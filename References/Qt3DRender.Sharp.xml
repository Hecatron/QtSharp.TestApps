<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qt3DRender.Sharp</name>
    </assembly>
    <members>
        <member name="T:Qt3DRender.QFrameGraphNode">
            <summary>
            <para>Base class of all FrameGraph configuration nodes.</para>
            </summary>
            <remarks>
            <para>This is an abstract class so it cannot be instanced directly but rather through one of its subclasses.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QFrameGraphNode.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrameGraphNode.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QFrameGraphNode.ParentFrameGraphNode">
            <summary>
            <para>Returns a pointer to the parent.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QCameraSelector">
            <summary>
            <para>Class to allow for selection of camera to be used</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCameraSelector.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates an instance with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraSelector.CameraChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QCameraSelector.Camera">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureImageData">
            <summary>
            <para>QTextureImageData stores data representing a texture.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureImageData.#ctor">
            <summary>
            <para>Constructs a new Qt3DRender::QTextureImageData.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureImageData.Cleanup">
            <summary>
            <para>Remove stored texture data and return the object to its initial state</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureImageData.SetImage(QtGui.QImage)">
            <summary>
            <para>Copies the image image as raw data within this object</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureImageData.SetData(QtCore.QByteArray,System.Int32,System.Boolean)">
            <summary>
            <para>Store the data data with blocksize blockSize and if the data to be stored is compressed isCompressed</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureImageData.Data(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns the raw image data for the texture at layer layer, face face and mipmapLevel mipmapLevel</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Width">
            <summary>
            <para>Returns the width of the stored texture</para>
            <para>See also setWidth().</para>
            <para></para>
            <para>Sets the width to width. setWidth</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Height">
            <summary>
            <para>Returns the height of the stored texture</para>
            <para>See also setHeight().</para>
            <para></para>
            <para>Sets the height to height. setHeight</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Depth">
            <summary>
            <para>Returns the depth of the stored texture</para>
            <para>See also setDepth().</para>
            <para></para>
            <para>Sets the depth to depth. setDepth</para>
            <para>See also depth().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Layers">
            <summary>
            <para>Returns the number of layers in the stored texture</para>
            <para>See also setLayers().</para>
            <para></para>
            <para>Sets the layers to layers. setLayers</para>
            <para>See also layers().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.MipLevels">
            <summary>
            <para>Returns the number of mip levels in the stored texture</para>
            <para>See also setMipLevels().</para>
            <para></para>
            <para>Sets the mip levels to mipLevels. setMipLevels</para>
            <para>See also mipLevels().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Faces">
            <summary>
            <para>Returns the number of faces in the stored texture</para>
            <para>See also setFaces().</para>
            <para></para>
            <para>Sets the faces to faces. setFaces</para>
            <para>See also faces().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Target">
            <summary>
            <para>Returns the target for the stored texture</para>
            <para>See also setTarget().</para>
            <para></para>
            <para>Sets the target to target. target</para>
            <para>See also target().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.Format">
            <summary>
            <para>Returns the format of the stored texture</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format to format. </para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.PixelFormat">
            <summary>
            <para>Returns the pixel format of the stored texture</para>
            <para>See also setPixelFormat().</para>
            <para></para>
            <para>Sets the pixel format to pixelFormat. setPixelFormat</para>
            <para>See also pixelFormat().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.PixelType">
            <summary>
            <para>Returns the pixel type of the stored texture</para>
            <para>See also setPixelType().</para>
            <para></para>
            <para>Sets the pixel type to pixelType setPixelType</para>
            <para>See also pixelType().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImageData.IsCompressed">
            <summary>
            <para>Returns true if the stored texture is in a compressed format</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAbstractTexture">
            <summary>
            <para>A base class to be used to provide textures.</para>
            </summary>
            <remarks>
            <para>The QAbstractTexture class shouldn't be used directly but rather through one of its subclasses. Each subclass implements a given texture target (2D, 2DArray, 3D, CubeMap ...) Each subclass provides a set of functors for each layer, cube map face and mipmap level. In turn the backend uses those functor to properly fill a corresponding OpenGL texture with data.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QAbstractTexture.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTexture.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAbstractTexture.#ctor(Qt3DRender.QAbstractTexture.Target,Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTexture.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAbstractTexture.AddTextureImage(Qt3DRender.QAbstractTextureImage)">
            <summary>
            <para>Adds a new Qt3DCore::QAbstractTextureImage textureImage to the texture provider.</para>
            <para>Note: Qt3DRender::QAbstractTextureImage should never be shared between multiple Qt3DRender::QAbstractTexture instances.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAbstractTexture.RemoveTextureImage(Qt3DRender.QAbstractTextureImage)">
            <summary>
            <para>Removes a Qt3DCore::QAbstractTextureImage textureImage from the texture provider.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAbstractTexture.SetSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the size of the texture provider to width w, height h and depth d.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.FormatChanged">
            <summary>
            <para>Holds the format of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> TextureFormat 	format() const</para>
            <para> void 	setFormat(TextureFormat format)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	formatChanged(TextureFormat format)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.StatusChanged">
            <summary>
            <para>Holds the current status of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.GenerateMipMapsChanged">
            <summary>
            <para>Holds whether the texture provider should auto generate mipmaps.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	generateMipMaps() const</para>
            <para> void 	setGenerateMipMaps(bool gen)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	generateMipMapsChanged(bool generateMipMaps)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.WidthChanged">
            <summary>
            <para>Holds the width of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	width() const</para>
            <para> void 	setWidth(int width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(int width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.HeightChanged">
            <summary>
            <para>Holds the height of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	height() const</para>
            <para> void 	setHeight(int height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(int height)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.DepthChanged">
            <summary>
            <para>Holds the depth of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	depth() const</para>
            <para> void 	setDepth(int depth)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthChanged(int depth)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.MagnificationFilterChanged">
            <summary>
            <para>Holds the magnification filter of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Filter 	magnificationFilter() const</para>
            <para> void 	setMagnificationFilter(Filter f)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	magnificationFilterChanged(Filter magnificationFilter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.MinificationFilterChanged">
            <summary>
            <para>Holds the minification filter of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Filter 	minificationFilter() const</para>
            <para> void 	setMinificationFilter(Filter f)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minificationFilterChanged(Filter minificationFilter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.MaximumAnisotropyChanged">
            <summary>
            <para>Holds the maximum anisotropy of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	maximumAnisotropy() const</para>
            <para> void 	setMaximumAnisotropy(float anisotropy)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumAnisotropyChanged(float maximumAnisotropy)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.ComparisonFunctionChanged">
            <summary>
            <para>Holds the comparison function of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> ComparisonFunction 	comparisonFunction() const</para>
            <para> void 	setComparisonFunction(ComparisonFunction function)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	comparisonFunctionChanged(ComparisonFunction comparisonFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.ComparisonModeChanged">
            <summary>
            <para>Holds the comparison mode of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> ComparisonMode 	comparisonMode() const</para>
            <para> void 	setComparisonMode(ComparisonMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	comparisonModeChanged(ComparisonMode comparisonMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTexture.LayersChanged">
            <summary>
            <para>Holds the maximum layer count of the texture provider. By default, the maximum layer count is 1.</para>
            <para>Note: this has a meaning only for texture providers that have 3D or array target formats.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	layers() const</para>
            <para> void 	setLayers(int layers)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layersChanged(int layers)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.WrapMode">
            <summary>
            <para>Holds the wrap mode of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QTextureWrapMode *	wrapMode()</para>
            <para></para>
            <para></para>
            <para>See also wrapMode().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.Format">
            <summary>
            <para>Holds the format of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.GenerateMipMaps">
            <summary>
            <para>Holds whether the texture provider should auto generate mipmaps.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.Width">
            <summary>
            <para>Holds the width of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.Height">
            <summary>
            <para>Holds the height of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.Depth">
            <summary>
            <para>Holds the depth of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.MinificationFilter">
            <summary>
            <para>Holds the minification filter of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.MagnificationFilter">
            <summary>
            <para>Holds the magnification filter of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.MaximumAnisotropy">
            <summary>
            <para>Holds the maximum anisotropy of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.comparisonFunction">
            <summary>
            <para>Holds the comparison function of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.comparisonMode">
            <summary>
            <para>Holds the comparison mode of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.Layers">
            <summary>
            <para>Holds the maximum layer count of the texture provider. By default, the maximum layer count is 1.</para>
            <para>Note: this has a meaning only for texture providers that have 3D or array target formats.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.status">
            <summary>
            <para>Holds the current status of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTexture.target">
            <summary>
            <para>Holds the target format of the texture provider.</para>
            <para>Note: The target format can only be set once.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderTargetOutput">
            <summary>
            <para>The QRenderTargetOutput class allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderTargetOutput.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderTargetOutput.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetOutput.AttachmentPointChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> AttachmentPoint 	attachmentPoint() const</para>
            <para> void 	setAttachmentPoint(AttachmentPoint attachmentPoint)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	attachmentPointChanged(AttachmentPoint attachmentPoint)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetOutput.TextureChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTexture *	texture() const</para>
            <para> void 	setTexture(QAbstractTexture *texture)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureChanged(QAbstractTexture *texture)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetOutput.MipLevelChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	mipLevel() const</para>
            <para> void 	setMipLevel(int level)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	mipLevelChanged(int mipLevel)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetOutput.LayerChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	layer() const</para>
            <para> void 	setLayer(int layer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layerChanged(int layer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetOutput.FaceChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTexture::CubeMapFace 	face() const</para>
            <para> void 	setFace(QAbstractTexture::CubeMapFace face)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceChanged(QAbstractTexture::CubeMapFace face)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderTargetOutput.Texture">
            <summary>
            <para>Returns the current texture.</para>
            <para>Note: Getter function for property texture. </para>
            <para>See also setTexture().</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTexture *	texture() const</para>
            <para> void 	setTexture(QAbstractTexture *texture)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureChanged(QAbstractTexture *texture)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QClearBuffers">
            <summary>
            <para>Class to clear buffers</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QClearBuffers.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QClearBuffers.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClearBuffers.BuffersChanged">
            <summary>
            <para>Specifies the buffer type to be used.</para>
            <para>Access functions:</para>
            <para></para>
            <para> BufferType 	buffers() const</para>
            <para> void 	setBuffers(BufferType buffers)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	buffersChanged(BufferType buffers)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClearBuffers.ClearColorChanged">
            <summary>
            <para>Specifies the clear color to be used.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	clearColor() const</para>
            <para> void 	setClearColor(const QColor &amp;color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clearColorChanged(const QColor &amp;color)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClearBuffers.ClearDepthValueChanged">
            <summary>
            <para>Specifies the clear depth value to be used.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	clearDepthValue() const</para>
            <para> void 	setClearDepthValue(float clearDepthValue)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clearDepthValueChanged(float clearDepthValue)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClearBuffers.ClearStencilValueChanged">
            <summary>
            <para>Specifies the stencil value to be used.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	clearStencilValue() const</para>
            <para> void 	setClearStencilValue(int clearStencilValue)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clearStencilValueChanged(int clearStencilValue)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClearBuffers.ColorBufferChanged">
            <summary>
            <para>Specifies a specific color buffer to clear. If set to NULL (default), and ColorBuffer flag is set, all color buffers will be cleared.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTargetOutput *	colorBuffer() const</para>
            <para> void 	setColorBuffer(QRenderTargetOutput *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	colorBufferChanged(QRenderTargetOutput *buffer)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QClearBuffers.Buffers">
            <summary>
            <para>Specifies the buffer type to be used.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QClearBuffers.ClearColor">
            <summary>
            <para>Specifies the clear color to be used.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QClearBuffers.ClearDepthValue">
            <summary>
            <para>Specifies the clear depth value to be used.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QClearBuffers.ClearStencilValue">
            <summary>
            <para>Specifies the stencil value to be used.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QClearBuffers.ColorBuffer">
            <summary>
            <para>Specifies a specific color buffer to clear. If set to NULL (default), and ColorBuffer flag is set, all color buffers will be cleared.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QClearBuffers.BufferType">
            <summary>
            <para>This enum type describes types of buffer to be cleared.</para>
            <para>The BufferTypeFlags type is a typedef for QFlags&lt;BufferType&gt;. It stores an OR combination of BufferType values.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QDispatchCompute">
            <summary>
            <para>Allows a glDispatchCompute call to be issued to do work in a compute shader on the GPU.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QDispatchCompute.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates an instance with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QDispatchCompute.WorkGroupXChanged">
            <summary>
            <para>Specifies X workgroup.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupX() const</para>
            <para> void 	setWorkGroupX(int workGroupX)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupXChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QDispatchCompute.WorkGroupYChanged">
            <summary>
            <para>Specifies Y workgroup.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupY() const</para>
            <para> void 	setWorkGroupY(int workGroupY)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupYChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QDispatchCompute.WorkGroupZChanged">
            <summary>
            <para>Specifies Z workgroup.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupZ() const</para>
            <para> void 	setWorkGroupZ(int workGroupZ)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupZChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QDispatchCompute.WorkGroupX">
            <summary>
            <para>Specifies X workgroup.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QDispatchCompute.WorkGroupY">
            <summary>
            <para>Specifies Y workgroup.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QDispatchCompute.WorkGroupZ">
            <summary>
            <para>Specifies Z workgroup.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QFrustumCulling">
            <summary>
            <para>If present, only tries to draw entities that are in the view of the camera. The camera is selected by a QCameraSelector frame graph node in the current hierarchy.</para>
            </summary>
            <remarks>
            <para>See also QCameraSelector.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QFrustumCulling.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates an instance with the specified parent.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QLayerFilter">
            <summary>
            <para>Controls layers Drawn in a frame graph branch.</para>
            </summary>
            <remarks>
            <para>A QLayerFiler can be used to instruct the renderer as to which layer(s) to draw in that branch of the frame graph.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QLayerFilter.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QLayerFilter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QLayerFilter.AddLayer(Qt3DRender.QLayer)">
            <summary>
            <para>Add layer to the current list of layers</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QLayerFilter.RemoveLayer(Qt3DRender.QLayer)">
            <summary>
            <para>Remove layer from the current list of layers</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QNoDraw">
            <summary>
            <para>When a QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</para>
            </summary>
            <remarks>
            <para>QNoDraw should be used when the FrameGraph needs to set up some render states or clear some buffers without requiring any mesh to be drawn. It has the same effect as having a Qt3DRender::QRenderPassFilter that matches none of available Qt3DRender::QRenderPass instances of the scene without the overhead cost of actually performing the filtering.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QNoDraw.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNoDraw.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderPassFilter">
            <summary>
            <para>Provides storage for vectors of Filter Keys and Parameters</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPassFilter.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderPassFilter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPassFilter.AddMatch(Qt3DRender.QFilterKey)">
            <summary>
            <para>Add the filter key filterKey to the match vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPassFilter.RemoveMatch(Qt3DRender.QFilterKey)">
            <summary>
            <para>Remove the filter key filterKey from the match vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPassFilter.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Add the parameter parameter to the parameter vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPassFilter.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Remove the parameter parameter from the parameter vector.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderStateSet">
            <summary>
            <para>The QRenderStateSet FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch.</para>
            </summary>
            <remarks>
            <para>States set on a QRenderStateSet are set globally, contrary to the per-material states that can be set on a QRenderPass. By default, an empty QRenderStateSet will result in all render states being disabled when executed. Adding a QRenderState state explicitly enables that render state at runtime.</para>
            <para></para>
            <para>See also QRenderState and QRenderPass.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QRenderStateSet.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderStateSet.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderStateSet.AddRenderState(Qt3DRender.QRenderState)">
            <summary>
            <para>Adds a new QRenderState state to the QRenderStateSet instance.</para>
            <para>Note: Not setting any QRenderState state on a QRenderStateSet instance implies all the render states will be disabled at render time.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderStateSet.RemoveRenderState(Qt3DRender.QRenderState)">
            <summary>
            <para>Removes the QRenderState state from the QRenderStateSet instance.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderSurfaceSelector">
            <summary>
            <para>Provides a way of specifying the render surface</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderSurfaceSelector.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs QRenderSurfaceSelector with given parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderSurfaceSelector.SurfaceChanged">
            <summary>
            <para>Sets surface.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QObject *	surface() const</para>
            <para> void 	setSurface(QObject *surfaceObject)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	surfaceChanged(QObject *surface)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderSurfaceSelector.ExternalRenderTargetSizeChanged">
            <summary>
            <para>Holds the size of the external render target.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	externalRenderTargetSize() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	externalRenderTargetSizeChanged(const QSize &amp;size)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderSurfaceSelector.SurfacePixelRatioChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	surfacePixelRatio() const</para>
            <para> void 	setSurfacePixelRatio(float ratio)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	surfacePixelRatioChanged(float ratio)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderSurfaceSelector.ExternalRenderTargetSize">
            <summary>
            <para>Holds the size of the external render target.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderSurfaceSelector.Surface">
            <summary>
            <para>Sets surface.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QObject *	surface() const</para>
            <para> void 	setSurface(QObject *surfaceObject)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	surfaceChanged(QObject *surface)</para>
            <para></para>
            <para></para>
            <para>Sets surface.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QObject *	surface() const</para>
            <para> void 	setSurface(QObject *surfaceObject)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	surfaceChanged(QObject *surface)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderTargetSelector">
            <summary>
            <para>Provides a way of specifying a render target</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderTargetSelector.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderTargetSelector.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderTargetSelector.TargetChanged">
            <summary>
            <para>Specifies the target to be rendered</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderTargetSelector.Target">
            <summary>
            <para>Specifies the target to be rendered</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            <para></para>
            <para>Specifies the target to be rendered</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSortPolicy">
            <summary>
            <para>Provides storage for the sort types to be used</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QSortPolicy.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSortPolicy.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSortPolicy.SortType">
            <summary>
            <para>This enum type describes sort types that can be employed</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTechniqueFilter">
            <summary>
            <para>Provides storage for vectors of Filter Keys and Parameters</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechniqueFilter.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTechniqueFilter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechniqueFilter.AddMatch(Qt3DRender.QFilterKey)">
            <summary>
            <para>Add the filter key filterKey to the match vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechniqueFilter.RemoveMatch(Qt3DRender.QFilterKey)">
            <summary>
            <para>Remove the filter key filterKey from the match vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechniqueFilter.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Add the parameter parameter to the parameter vector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechniqueFilter.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Remove the parameter parameter from the parameter vector.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QViewport">
            <summary>
            <para>A viewport on the Qt3D Scene</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QViewport.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QViewport.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QViewport.NormalizedRectChanged">
            <summary>
            <para>Specifies the normalise rect for the viewport</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRectF 	normalizedRect() const</para>
            <para> void 	setNormalizedRect(const QRectF &amp;normalizedRect)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalizedRectChanged(const QRectF &amp;normalizedRect)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QViewport.NormalizedRect">
            <summary>
            <para>Specifies the normalise rect for the viewport</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QCameraLens">
            <summary>
            <para>Qt3DRender::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCameraLens.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCameraLens.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCameraLens.SetOrthographicProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines an orthographic projection based on left, right, bottom, top, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCameraLens.SetFrustumProjection(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines an orthographic projection based on left, right, bottom, top, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCameraLens.SetPerspectiveProjection(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Defines a perspective projection based on fieldOfView, aspectRatio, nearPlane, farPlane.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.ProjectionTypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> ProjectionType 	projectionType() const</para>
            <para> void 	setProjectionType(ProjectionType projectionType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionTypeChanged(QCameraLens::ProjectionType projectionType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.NearPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	nearPlane() const</para>
            <para> void 	setNearPlane(float nearPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nearPlaneChanged(float nearPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.FarPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	farPlane() const</para>
            <para> void 	setFarPlane(float farPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	farPlaneChanged(float farPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.FieldOfViewChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	fieldOfView() const</para>
            <para> void 	setFieldOfView(float fieldOfView)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fieldOfViewChanged(float fieldOfView)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.AspectRatioChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	aspectRatio() const</para>
            <para> void 	setAspectRatio(float aspectRatio)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	aspectRatioChanged(float aspectRatio)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	left() const</para>
            <para> void 	setLeft(float left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(float left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.RightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	right() const</para>
            <para> void 	setRight(float right)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rightChanged(float right)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	bottom() const</para>
            <para> void 	setBottom(float bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(float bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.TopChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	top() const</para>
            <para> void 	setTop(float top)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	topChanged(float top)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCameraLens.ProjectionMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	projectionMatrix() const</para>
            <para> void 	setProjectionMatrix(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionMatrixChanged(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QCameraLens.ProjectionType">
            <summary>
            <para>Specifies which parameters of Qt3DRender::QCameraLens are used to compute the projection matrix.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QCamera">
            <summary>
            <para>The QCamera class provides interface for system camera devices.</para>
            </summary>
            <remarks>
            <para>QCamera can be used with QCameraViewfinder for viewfinder display, QMediaRecorder for video recording and QCameraImageCapture for image taking.</para>
            <para>You can use QCameraInfo to list available cameras and choose which one to use.</para>
            <para></para>
            <para></para>
            <para>  QList&lt;QCameraInfo&gt; cameras = QCameraInfo::availableCameras();</para>
            <para>  foreach (const QCameraInfo &amp;cameraInfo, cameras) {</para>
            <para>      if (cameraInfo.deviceName() == &quot;mycamera&quot;)</para>
            <para>          camera = new QCamera(cameraInfo);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>See the camera overview for more information.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QCamera.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCamera.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.TiltRotation(System.Single)">
            <summary>
            <para>Returns the calculated tilt rotation in relation to the angle taken in to adjust the camera's tilt or up/down rotation on the X axis.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.PanRotation(System.Single)">
            <summary>
            <para>Returns the calculated pan rotation in relation to the angle taken in to adjust the camera's pan or left/right rotation on the Y axis.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.RollRotation(System.Single)">
            <summary>
            <para>Returns the calculated roll rotation in relation to the angle taken in to adjust the camera's roll or lean left/right rotation on the Z axis.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Rotation(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Returns the calculated rotation in relation to the angle and chosen axis taken in.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Translate(QtGui.QVector3D,Qt3DRender.QCamera.CameraTranslationOption)">
            <summary>
            <para>Translates the camera's position and its view vector by vLocal in local coordinates. The option allows for toggling whether the view center should be translated.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.TranslateWorld(QtGui.QVector3D,Qt3DRender.QCamera.CameraTranslationOption)">
            <summary>
            <para>Translates the camera's position and its view vector by vWorld in world coordinates. The option allows for toggling whether the view center should be translated.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Tilt(System.Single)">
            <summary>
            <para>Adjusts the tilt angle of the camera by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Pan(System.Single)">
            <summary>
            <para>Adjusts the pan angle of the camera by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Pan(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Adjusts the pan angle of the camera by angle on a chosen axis.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Roll(System.Single)">
            <summary>
            <para>Adjusts the camera roll by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.TiltAboutViewCenter(System.Single)">
            <summary>
            <para>Adjusts the camera tilt about view center by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.PanAboutViewCenter(System.Single)">
            <summary>
            <para>Adjusts the camera pan about view center by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.PanAboutViewCenter(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Adjusts the camera pan about view center by angle on axis.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.RollAboutViewCenter(System.Single)">
            <summary>
            <para>Adjusts the camera roll about view center by angle.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.Rotate(QtGui.QQuaternion)">
            <summary>
            <para>Rotates the camera with the use of a Quaternion in q.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCamera.RotateAboutViewCenter(QtGui.QQuaternion)">
            <summary>
            <para>Rotates the camera about the view center with the use of a Quaternion in q.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.ProjectionTypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QCameraLens::ProjectionType 	projectionType() const</para>
            <para> void 	setProjectionType(QCameraLens::ProjectionType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionTypeChanged(QCameraLens::ProjectionType projectionType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.NearPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	nearPlane() const</para>
            <para> void 	setNearPlane(float nearPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nearPlaneChanged(float nearPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.FarPlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	farPlane() const</para>
            <para> void 	setFarPlane(float farPlane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	farPlaneChanged(float farPlane)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.FieldOfViewChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	fieldOfView() const</para>
            <para> void 	setFieldOfView(float fieldOfView)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fieldOfViewChanged(float fieldOfView)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.AspectRatioChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	aspectRatio() const</para>
            <para> void 	setAspectRatio(float aspectRatio)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	aspectRatioChanged(float aspectRatio)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	left() const</para>
            <para> void 	setLeft(float left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(float left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.RightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	right() const</para>
            <para> void 	setRight(float right)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rightChanged(float right)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	bottom() const</para>
            <para> void 	setBottom(float bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(float bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.TopChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	top() const</para>
            <para> void 	setTop(float top)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	topChanged(float top)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.ProjectionMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	projectionMatrix() const</para>
            <para> void 	setProjectionMatrix(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	projectionMatrixChanged(const QMatrix4x4 &amp;projectionMatrix)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.PositionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	position() const</para>
            <para> void 	setPosition(const QVector3D &amp;position)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	positionChanged(const QVector3D &amp;position)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.UpVectorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	upVector() const</para>
            <para> void 	setUpVector(const QVector3D &amp;upVector)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	upVectorChanged(const QVector3D &amp;upVector)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.ViewCenterChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	viewCenter() const</para>
            <para> void 	setViewCenter(const QVector3D &amp;viewCenter)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewCenterChanged(const QVector3D &amp;viewCenter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.ViewVectorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	viewVector() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewVectorChanged(const QVector3D &amp;viewVector)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCamera.ViewMatrixChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	viewMatrix() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewMatrixChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QCamera.Lens">
            <summary>
            <para>Returns the current lens.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QCamera.Transform">
            <summary>
            <para>Returns the camera's position via transform.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QComputeCommand">
            <summary>
            <para>The QComputerCommand class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QComputeCommand.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates a new Qt3DRender::QComputeCommand instance with the specified parent. parent</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QComputeCommand.WorkGroupXChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupX() const</para>
            <para> void 	setWorkGroupX(int workGroupX)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupXChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QComputeCommand.WorkGroupYChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupY() const</para>
            <para> void 	setWorkGroupY(int workGroupY)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupYChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QComputeCommand.WorkGroupZChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupZ() const</para>
            <para> void 	setWorkGroupZ(int workGroupZ)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupZChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QLayer">
            <summary>
            <para>The QLayer class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QLayer.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QLayer with the specified parent.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPickingSettings">
            <summary>
            <para>The QPickingSettings class specifies the current framegraph to be used by the renderer and specifies whether rendering is always active or updated only on changes.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QPickingSettings.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates a new Qt3DRender::QPickingSettings instance with the specified parent. parent</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPickingSettings.PickMethodChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> PickMethod 	pickMethod() const</para>
            <para> void 	setPickMethod(PickMethod pickMethod)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pickMethodChanged(QPickingSettings::PickMethod pickMethod)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPickingSettings.PickResultModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> PickResultMode 	pickResultMode() const</para>
            <para> void 	setPickResultMode(PickResultMode pickResultMode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pickResultModeChanged(QPickingSettings::PickResultMode pickResult)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPickingSettings.PickMethod">
            <summary>
            <para>Specifies which parameters of Qt3DRender::QPickingSettings are used.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPickingSettings.PickResultMode">
            <summary>
            <para>Specifies which parameters of Qt3DRender::PickResultMode are used.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderAspect">
            <summary>
            <para>The QRenderAspect class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderAspect.#ctor(QtCore.QObject)">
            <summary>
            <para>The constructor creates a new QRenderAspect::QRenderAspect instance with the specified parent. parent</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderAspect.#ctor(Qt3DRender.QRenderAspect.RenderType,QtCore.QObject)">
            <summary>
            <para>The constructor creates a new QRenderAspect::QRenderAspect instance with the specified type and parent. type parent</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderSettings">
            <summary>
            <para>The QRenderSettings class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderSettings.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>The constructor creates a new QRenderSettings::QRenderSettings instance with the specified parent. parent</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderSettings.ActiveFrameGraphChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QFrameGraphNode *	activeFrameGraph() const</para>
            <para> void 	setActiveFrameGraph(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeFrameGraphChanged(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderSettings.RenderPolicyChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> RenderPolicy 	renderPolicy() const</para>
            <para> void 	setRenderPolicy(RenderPolicy renderPolicy)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	renderPolicyChanged(RenderPolicy renderPolicy)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderSettings.ActiveFrameGraph">
            <summary>
            <para>Returns the current active framegraph.</para>
            <para>Note: Getter function for property activeFrameGraph. </para>
            <para>See also setActiveFrameGraph().</para>
            <para></para>
            <para>Sets the active framegraph to activeFrameGraph. activeFrameGraph</para>
            <para>Note: Setter function for property activeFrameGraph. </para>
            <para>See also activeFrameGraph().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderTarget">
            <summary>
            <para>The QRenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderTarget.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderTarget.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderTarget.AddOutput(Qt3DRender.QRenderTargetOutput)">
            <summary>
            <para>Adds a chosen output via output. output</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderTarget.RemoveOutput(Qt3DRender.QRenderTargetOutput)">
            <summary>
            <para>Removes a chosen output via output. output</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAttribute.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAttribute with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAttribute.#ctor(Qt3DRender.QBuffer,Qt3DRender.QAttribute.VertexBaseType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAttribute from buf of type, dataSize, count, offset, and stride with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAttribute.#ctor(Qt3DRender.QBuffer,System.String,Qt3DRender.QAttribute.VertexBaseType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAttribute named name from buf of type, dataSize, count, offset, and stride with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAttribute.SetDataType(Qt3DRender.QAttribute.VertexBaseType)">
            <summary>
            <para>Holds the data type.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAttribute.SetDataSize(System.UInt32)">
            <summary>
            <para>Holds the data size.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.BufferChanged">
            <summary>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBuffer *	buffer() const</para>
            <para> void 	setBuffer(QBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QBuffer *buffer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.NameChanged">
            <summary>
            <para>Holds the name.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.DataTypeChanged">
            <summary>
            <para>Holds the data type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> VertexBaseType 	vertexBaseType() const</para>
            <para> void 	setDataType(VertexBaseType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dataTypeChanged(VertexBaseType vertexBaseType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.DataSizeChanged">
            <summary>
            <para>Holds the data size.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	vertexSize() const</para>
            <para> void 	setDataSize(uint size)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dataSizeChanged(uint vertexSize)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.CountChanged">
            <summary>
            <para>Holds the count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	count() const</para>
            <para> void 	setCount(uint count)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	countChanged(uint count)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.ByteStrideChanged">
            <summary>
            <para>Holds the byte stride.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	byteStride() const</para>
            <para> void 	setByteStride(uint byteStride)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	byteStrideChanged(uint byteStride)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.ByteOffsetChanged">
            <summary>
            <para>Holds the byte offset.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	byteOffset() const</para>
            <para> void 	setByteOffset(uint byteOffset)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	byteOffsetChanged(uint byteOffset)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.DivisorChanged">
            <summary>
            <para>Holds the divisor.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	divisor() const</para>
            <para> void 	setDivisor(uint divisor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	divisorChanged(uint divisor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAttribute.AttributeTypeChanged">
            <summary>
            <para>Holds the attribute type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> AttributeType 	attributeType() const</para>
            <para> void 	setAttributeType(AttributeType attributeType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	attributeTypeChanged(AttributeType attributeType)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.Buffer">
            <summary>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBuffer *	buffer() const</para>
            <para> void 	setBuffer(QBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QBuffer *buffer)</para>
            <para></para>
            <para></para>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBuffer *	buffer() const</para>
            <para> void 	setBuffer(QBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QBuffer *buffer)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.Name">
            <summary>
            <para>Holds the name.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.Count">
            <summary>
            <para>Holds the count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.ByteStride">
            <summary>
            <para>Holds the byte stride.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.ByteOffset">
            <summary>
            <para>Holds the byte offset.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.Divisor">
            <summary>
            <para>Holds the divisor.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.attributeType">
            <summary>
            <para>Holds the attribute type.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.vertexBaseType">
            <summary>
            <para>Holds the data type.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.VertexSize">
            <summary>
            <para>Holds the data size.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.DefaultPositionAttributeName">
            <summary>
            <para>QAttribute::defaultPositionAttributeName Returns the name of the default position attribute</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.DefaultNormalAttributeName">
            <summary>
            <para>QAttribute::defaultNormalAttributeName Returns the name of the default normal attribute</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.DefaultColorAttributeName">
            <summary>
            <para>QAttribute::defaultColorAttributeName Returns the name of the default color attribute</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.DefaultTextureCoordinateAttributeName">
            <summary>
            <para>QAttribute::defaultTextureCoordinateAttributeName Returns the name of the default texture coordinate attribute</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAttribute.DefaultTangentAttributeName">
            <summary>
            <para>QAttribute::defaultTangentAttributeName Returns the name of the default tangent attribute</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAttribute.AttributeType">
            <summary>
            <para>The type of the attribute.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAttribute.VertexBaseType">
            <summary>
            <para>The type of the data.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QBuffer">
            <summary>
            <para>The QBuffer class provides a QIODevice interface for a QByteArray.</para>
            </summary>
            <remarks>
            <para>QBuffer allows you to access a QByteArray using the QIODevice interface. The QByteArray is treated just as a standard random-accessed file. Example:</para>
            <para></para>
            <para></para>
            <para>      QBuffer buffer;</para>
            <para>      char ch;</para>
            <para></para>
            <para>      buffer.open(QBuffer::ReadWrite);</para>
            <para>      buffer.write(&quot;Qt rocks!&quot;);</para>
            <para>      buffer.seek(0);</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 'Q'</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 't'</para>
            <para>      buffer.getChar(&amp;ch);  // ch == ' '</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 'r'</para>
            <para></para>
            <para></para>
            <para>By default, an internal QByteArray buffer is created for you when you create a QBuffer. You can access this buffer directly by calling buffer(). You can also use QBuffer with an existing QByteArray by calling setBuffer(), or by passing your array to QBuffer's constructor.</para>
            <para>Call open() to open the buffer. Then call write() or putChar() to write to the buffer, and read(), readLine(), readAll(), or getChar() to read from it. size() returns the current size of the buffer, and you can seek to arbitrary positions in the buffer by calling seek(). When you are done with accessing the buffer, call close().</para>
            <para>The following code snippet shows how to write data to a QByteArray using QDataStream and QBuffer:</para>
            <para></para>
            <para></para>
            <para>      QByteArray byteArray;</para>
            <para>      QBuffer buffer(&amp;byteArray);</para>
            <para>      buffer.open(QIODevice::WriteOnly);</para>
            <para></para>
            <para>      QDataStream out(&amp;buffer);</para>
            <para>      out &lt;&lt; QApplication::palette();</para>
            <para></para>
            <para></para>
            <para>Effectively, we convert the application's QPalette into a byte array. Here's how to read the data from the QByteArray:</para>
            <para></para>
            <para></para>
            <para>      QPalette palette;</para>
            <para>      QBuffer buffer(&amp;byteArray);</para>
            <para>      buffer.open(QIODevice::ReadOnly);</para>
            <para></para>
            <para>      QDataStream in(&amp;buffer);</para>
            <para>      in &gt;&gt; palette;</para>
            <para></para>
            <para></para>
            <para>QTextStream and QDataStream also provide convenience constructors that take a QByteArray and that create a QBuffer behind the scenes.</para>
            <para>QBuffer emits readyRead() when new data has arrived in the buffer. By connecting to this signal, you can use QBuffer to store temporary data before processing it. QBuffer also emits bytesWritten() every time new data has been written to the buffer.</para>
            <para></para>
            <para>See also QFile, QDataStream, QTextStream, and QByteArray.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QBuffer.#ctor(Qt3DRender.QBuffer.BufferType,Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBuffer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBuffer.DataChanged">
            <summary>
            <para>This signal is emitted with bytes when data changes.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBuffer.TypeChanged">
            <summary>
            <para>Holds the buffer type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> BufferType 	type() const</para>
            <para> void 	setType(BufferType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	typeChanged(BufferType type)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBuffer.UsageChanged">
            <summary>
            <para>Holds the buffer usage.</para>
            <para>Access functions:</para>
            <para></para>
            <para> UsageType 	usage() const</para>
            <para> void 	setUsage(UsageType usage)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	usageChanged(UsageType usage)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBuffer.SyncDataChanged">
            <summary>
            <para>Holds the syncData flag. When syncData is true, this will force data created by a Qt3DRender::QBufferDataGenerator to also be updated on the frontend Qt3DRender::QBuffer node. By default syncData is false.</para>
            <para>Note: : This has no effect if the buffer's data was set directly using the data property.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSyncData() const</para>
            <para> void 	setSyncData(bool syncData)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	syncDataChanged(bool syncData)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QBuffer.Data">
            <summary>
            <para>Returns the data.</para>
            <para>See also setData().</para>
            <para></para>
            <para>Sets bytes as data.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QBuffer.Type">
            <summary>
            <para>Holds the buffer type.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QBuffer.Usage">
            <summary>
            <para>Holds the buffer usage.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QBuffer.SyncData">
            <summary>
            <para>Holds the syncData flag. When syncData is true, this will force data created by a Qt3DRender::QBufferDataGenerator to also be updated on the frontend Qt3DRender::QBuffer node. By default syncData is false.</para>
            <para>Note: : This has no effect if the buffer's data was set directly using the data property.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QBuffer.BufferType">
            <summary>
            <para>The type of the buffer.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QBuffer.UsageType">
            <summary>
            <para>The type of the usage.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QGeometry.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QGeometry.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QGeometry.AddAttribute(Qt3DRender.QAttribute)">
            <summary>
            <para>Adds an attribute to this geometry.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QGeometry.RemoveAttribute(Qt3DRender.QAttribute)">
            <summary>
            <para>Removes the given attribute from this geometry.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometry.BoundingVolumePositionAttributeChanged">
            <summary>
            <para>Holds atribute used to compute the bounding volume .</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	boundingVolumePositionAttribute() const</para>
            <para> void 	setBoundingVolumePositionAttribute(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	boundingVolumePositionAttributeChanged(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometry.BoundingVolumePositionAttribute">
            <summary>
            <para>Holds atribute used to compute the bounding volume .</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	boundingVolumePositionAttribute() const</para>
            <para> void 	setBoundingVolumePositionAttribute(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	boundingVolumePositionAttributeChanged(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            <para></para>
            <para>Holds atribute used to compute the bounding volume .</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	boundingVolumePositionAttribute() const</para>
            <para> void 	setBoundingVolumePositionAttribute(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	boundingVolumePositionAttributeChanged(QAttribute *boundingVolumePositionAttribute)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QGeometryRenderer.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QGeometryRenderer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.InstanceCountChanged">
            <summary>
            <para>Holds the instance count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	instanceCount() const</para>
            <para> void 	setInstanceCount(int instanceCount)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	instanceCountChanged(int instanceCount)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.VertexCountChanged">
            <summary>
            <para>Holds the primitive count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	vertexCount() const</para>
            <para> void 	setVertexCount(int vertexCount)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	vertexCountChanged(int vertexCount)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.IndexOffsetChanged">
            <summary>
            <para>Holds the base vertex.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	indexOffset() const</para>
            <para> void 	setIndexOffset(int indexOffset)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	indexOffsetChanged(int indexOffset)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.FirstInstanceChanged">
            <summary>
            <para>Holds the base instance.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	firstInstance() const</para>
            <para> void 	setFirstInstance(int firstInstance)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	firstInstanceChanged(int firstInstance)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.FirstVertexChanged">
            <summary>
            <para>Holds the base vertex.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	firstVertex() const</para>
            <para> void 	setFirstVertex(int firstVertex)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	firstVertexChanged(int firstVertex)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.RestartIndexValueChanged">
            <summary>
            <para>Holds the restart index.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	restartIndexValue() const</para>
            <para> void 	setRestartIndexValue(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	restartIndexValueChanged(int restartIndexValue)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.VerticesPerPatchChanged">
            <summary>
            <para>Holds vertices per patch.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	verticesPerPatch() const</para>
            <para> void 	setVerticesPerPatch(int verticesPerPatch)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	verticesPerPatchChanged(int verticesPerPatch)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.PrimitiveRestartEnabledChanged">
            <summary>
            <para>Holds the primitive restart flag.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	primitiveRestartEnabled() const</para>
            <para> void 	setPrimitiveRestartEnabled(bool enabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primitiveRestartEnabledChanged(bool primitiveRestartEnabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.GeometryChanged">
            <summary>
            <para>Holds the geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QGeometry *	geometry() const</para>
            <para> void 	setGeometry(QGeometry *geometry)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryChanged(QGeometry *geometry)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGeometryRenderer.PrimitiveTypeChanged">
            <summary>
            <para>Holds the primitive type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> PrimitiveType 	primitiveType() const</para>
            <para> void 	setPrimitiveType(PrimitiveType primitiveType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primitiveTypeChanged(PrimitiveType primitiveType)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.InstanceCount">
            <summary>
            <para>Holds the instance count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.VertexCount">
            <summary>
            <para>Holds the primitive count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.IndexOffset">
            <summary>
            <para>Holds the base vertex.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.FirstInstance">
            <summary>
            <para>Holds the base instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.FirstVertex">
            <summary>
            <para>Holds the base vertex.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.RestartIndexValue">
            <summary>
            <para>Holds the restart index.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.VerticesPerPatch">
            <summary>
            <para>Holds vertices per patch.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.PrimitiveRestartEnabled">
            <summary>
            <para>Holds the primitive restart flag.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.Geometry">
            <summary>
            <para>Holds the geometry.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QGeometryRenderer.primitiveType">
            <summary>
            <para>Holds the primitive type.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QGeometryRenderer.PrimitiveType">
            <summary>
            <para>The type of the primitive.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QMesh">
            <summary>
            <para>A custom mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QMesh.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QMesh.SourceChanged">
            <summary>
            <para>Holds the source url to the file containing the custom mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;source)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QMesh.MeshNameChanged">
            <summary>
            <para>Holds the name of the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	meshName() const</para>
            <para> void 	setMeshName(const QString &amp;meshName)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	meshNameChanged(const QString &amp;meshName)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QMesh.Source">
            <summary>
            <para>Holds the source url to the file containing the custom mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QMesh.MeshName">
            <summary>
            <para>Holds the name of the mesh.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSceneLoader">
            <summary>
            <para>Provides the facility to load an existing Scene</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QSceneLoader.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSceneLoader.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSceneLoader.SourceChanged">
            <summary>
            <para>Specifies the url for the source to be loaded.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSceneLoader.StatusChanged">
            <summary>
            <para>Indicates the status of scene loading.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSceneLoader.Source">
            <summary>
            <para>Specifies the url for the source to be loaded.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSceneLoader.status">
            <summary>
            <para>Indicates the status of scene loading.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSceneLoader.Status">
            <summary>
            <para>This enum identifies the state of loading</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAbstractLight">
            <summary>
            <para>Encapsulate a QAbstractLight object in a Qt 3D scene.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractLight.ColorChanged">
            <summary>
            <para>Holds the current QAbstractLight color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	color() const</para>
            <para> void 	setColor(const QColor &amp;color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	colorChanged(const QColor &amp;color)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractLight.IntensityChanged">
            <summary>
            <para>Holds the current QAbstractLight intensity.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	intensity() const</para>
            <para> void 	setIntensity(float intensity)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	intensityChanged(float intensity)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractLight.Color">
            <summary>
            <para>Holds the current QAbstractLight color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractLight.Intensity">
            <summary>
            <para>Holds the current QAbstractLight intensity.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractLight.type">
            <summary>
            <para>Holds the current QAbstractLight type.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QDirectionalLight">
            <summary>
            <para>Encapsulate a Directional Light object in a Qt 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QDirectionalLight.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QDirectionalLight with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QDirectionalLight.WorldDirectionChanged">
            <summary>
            <para>Specifies the world direction of the directional light</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	worldDirection() const</para>
            <para> void 	setWorldDirection(const QVector3D &amp;worldDirection)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	worldDirectionChanged(const QVector3D &amp;worldDirection)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QDirectionalLight.WorldDirection">
            <summary>
            <para>Specifies the world direction of the directional light</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPointLight">
            <summary>
            <para>Encapsulate a Point Light object in a Qt 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QPointLight.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPointLight with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPointLight.ConstantAttenuationChanged">
            <summary>
            <para>Specifies the constant attenuation of the point light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	constantAttenuation() const</para>
            <para> void 	setConstantAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	constantAttenuationChanged(float constantAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPointLight.LinearAttenuationChanged">
            <summary>
            <para>Specifies the linear attenuation of the point light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	linearAttenuation() const</para>
            <para> void 	setLinearAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	linearAttenuationChanged(float linearAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPointLight.QuadraticAttenuationChanged">
            <summary>
            <para>Specifies the quadratic attenuation of the point light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	quadraticAttenuation() const</para>
            <para> void 	setQuadraticAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	quadraticAttenuationChanged(float quadraticAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPointLight.ConstantAttenuation">
            <summary>
            <para>Specifies the constant attenuation of the point light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPointLight.LinearAttenuation">
            <summary>
            <para>Specifies the linear attenuation of the point light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPointLight.QuadraticAttenuation">
            <summary>
            <para>Specifies the quadratic attenuation of the point light</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSpotLight">
            <summary>
            <para>Encapsulate a Spot Light object in a Qt 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QSpotLight.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QSpotLight with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSpotLight.ConstantAttenuationChanged">
            <summary>
            <para>Specifies the constant attenuation of the spot light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	constantAttenuation() const</para>
            <para> void 	setConstantAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	constantAttenuationChanged(float constantAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSpotLight.LinearAttenuationChanged">
            <summary>
            <para>Specifies the linear attenuation of the spot light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	linearAttenuation() const</para>
            <para> void 	setLinearAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	linearAttenuationChanged(float linearAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSpotLight.QuadraticAttenuationChanged">
            <summary>
            <para>Specifies the quadratic attenuation of the spot light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	quadraticAttenuation() const</para>
            <para> void 	setQuadraticAttenuation(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	quadraticAttenuationChanged(float quadraticAttenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSpotLight.LocalDirectionChanged">
            <summary>
            <para>Specifies the local direction of the spot light</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	localDirection() const</para>
            <para> void 	setLocalDirection(const QVector3D &amp;localDirection)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	localDirectionChanged(const QVector3D &amp;localDirection)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QSpotLight.CutOffAngleChanged">
            <summary>
            <para>Specifies the cut off angle of the spot light</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	cutOffAngle() const</para>
            <para> void 	setCutOffAngle(float cutOffAngle)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cutOffAngleChanged(float cutOffAngle)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSpotLight.ConstantAttenuation">
            <summary>
            <para>Specifies the constant attenuation of the spot light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSpotLight.LinearAttenuation">
            <summary>
            <para>Specifies the linear attenuation of the spot light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSpotLight.QuadraticAttenuation">
            <summary>
            <para>Specifies the quadratic attenuation of the spot light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSpotLight.LocalDirection">
            <summary>
            <para>Specifies the local direction of the spot light</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QSpotLight.CutOffAngle">
            <summary>
            <para>Specifies the cut off angle of the spot light</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QEffect">
            <summary>
            <para>The base class for effects in a Qt 3D scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QEffect.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QEffect with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QEffect.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Adds parameter to the effect. It sends a QPropertyNodeAddedChange to the backend. The parameter will be used to set a corresponding uniform value in the shader used by this effect.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QEffect.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Removes a parameter parameter from the effect.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QEffect.AddTechnique(Qt3DRender.QTechnique)">
            <summary>
            <para>Adds a new technique t to the effect. It sends a QPropertyNodeAddedChange to the backend.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QEffect.RemoveTechnique(Qt3DRender.QTechnique)">
            <summary>
            <para>Removes a technique t from the effect.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QFilterKey">
            <summary>
            <para>The QFilterKey class provides storage for filter keys and their values</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QFilterKey.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFilterKey.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QFilterKey.NameChanged">
            <summary>
            <para>Specifies the name of the filter key</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;customType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QFilterKey.ValueChanged">
            <summary>
            <para>Specifies the value of the filter key</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	value() const</para>
            <para> void 	setValue(const QVariant &amp;value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(const QVariant &amp;value)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QFilterKey.Value">
            <summary>
            <para>Specifies the value of the filter key</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QFilterKey.Name">
            <summary>
            <para>Specifies the name of the filter key</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QGraphicsApiFilter">
            <summary>
            <para>The QGraphicsApiFilter class identifies the API required for the attached QTechnique</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QGraphicsApiFilter.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsApiFilter with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.ApiChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Api 	api() const</para>
            <para> void 	setApi(Api api)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	apiChanged(Api api)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.ProfileChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> OpenGLProfile 	profile() const</para>
            <para> void 	setProfile(OpenGLProfile profile)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	profileChanged(OpenGLProfile profile)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.MinorVersionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	minorVersion() const</para>
            <para> void 	setMinorVersion(int minorVersion)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minorVersionChanged(int minorVersion)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.MajorVersionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	majorVersion() const</para>
            <para> void 	setMajorVersion(int majorVersion)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	majorVersionChanged(int majorVersion)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.ExtensionsChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStringList 	extensions() const</para>
            <para> void 	setExtensions(const QStringList &amp;extensions)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	extensionsChanged(const QStringList &amp;extensions)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.VendorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	vendor() const</para>
            <para> void 	setVendor(const QString &amp;vendor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	vendorChanged(const QString &amp;vendor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QGraphicsApiFilter.GraphicsApiFilterChanged">
            <summary>
            <para>This signal is emitted when the value of any property is changed.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QGraphicsApiFilter.OpenGLProfile">
            <summary>
            <para>This enum identifies the type of profile required</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QMaterial">
            <summary>
            <para>Provides an abstract class that should be the base of all Material component classes in a scene.</para>
            </summary>
            <remarks>
            <para>QMaterial provides a way to specify the rendering of an Entity. Any aspect can define its own subclass of QMaterial so that a Material can be used to describe a visual element; for example, the way sound should reflect off an element, the temperature of a surface, and so on.</para>
            <para></para>
            <para>See also QEffect, QMesh, and QComponent.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QMaterial.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QMaterial with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QMaterial.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Add parameter to the Materials parameter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QMaterial.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Remove parameter from the Material parameters.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QMaterial.EffectChanged">
            <summary>
            <para>Specifies the effect to be used with the material</para>
            <para>Access functions:</para>
            <para></para>
            <para> QEffect *	effect() const</para>
            <para> void 	setEffect(QEffect *effect)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	effectChanged(QEffect *effect)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QMaterial.Effect">
            <summary>
            <para>Returns the effect used by the Material.</para>
            <para>Note: Getter function for property effect. </para>
            <para>See also setEffect().</para>
            <para></para>
            <para>Sets the effect to be used with the Material.</para>
            <para>Note: Setter function for property effect. </para>
            <para>See also effect().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QParameter">
            <summary>
            <para>Provides storage for a name and value pair.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QParameter.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QParameter with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QParameter.#ctor(System.String,QtCore.QVariant,Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QParameter.#ctor(System.String,Qt3DRender.QAbstractTexture,Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameter.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QParameter.ValueChanged">
            <summary>
            <para>Specifies the value of the parameter</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	value() const</para>
            <para> void 	setValue(const QVariant &amp;dv)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(const QVariant &amp;value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QParameter.NameChanged">
            <summary>
            <para>Specifies the name of the parameter</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QParameter.Name">
            <summary>
            <para>Specifies the name of the parameter</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QParameter.Value">
            <summary>
            <para>Specifies the value of the parameter</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QShaderProgram">
            <summary>
            <para>Encapsulates a Shader Program.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QShaderProgram.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QShaderProgram with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QShaderProgram.SetShaderCode(Qt3DRender.QShaderProgram.ShaderType,QtCore.QByteArray)">
            <summary>
            <para>Sets the type shader from raw data in shaderCode.</para>
            <para>See also shaderCode().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QShaderProgram.ShaderCode(Qt3DRender.QShaderProgram.ShaderType)">
            <summary>
            <para>Returns the type shader code.</para>
            <para>See also setShaderCode().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QShaderProgram.LoadSource(QtCore.QUrl)">
            <summary>
            <para>Returns the shader code loaded from sourceUrl.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.VertexShaderCodeChanged">
            <summary>
            <para>Specifies the vertex shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	vertexShaderCode() const</para>
            <para> void 	setVertexShaderCode(const QByteArray &amp;vertexShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	vertexShaderCodeChanged(const QByteArray &amp;vertexShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.TessellationControlShaderCodeChanged">
            <summary>
            <para>Specifies the tessellation control shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	tessellationControlShaderCode() const</para>
            <para> void 	setTessellationControlShaderCode(const QByteArray &amp;tessellationControlShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	tessellationControlShaderCodeChanged(const QByteArray &amp;tessellationControlShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.TessellationEvaluationShaderCodeChanged">
            <summary>
            <para>Specifies the tessellation evaluation shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	tessellationEvaluationShaderCode() const</para>
            <para> void 	setTessellationEvaluationShaderCode(const QByteArray &amp;tessellationEvaluationShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	tessellationEvaluationShaderCodeChanged(const QByteArray &amp;tessellationEvaluationShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.GeometryShaderCodeChanged">
            <summary>
            <para>Specifies the geometry shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	geometryShaderCode() const</para>
            <para> void 	setGeometryShaderCode(const QByteArray &amp;geometryShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryShaderCodeChanged(const QByteArray &amp;geometryShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.FragmentShaderCodeChanged">
            <summary>
            <para>Specifies the fragment shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	fragmentShaderCode() const</para>
            <para> void 	setFragmentShaderCode(const QByteArray &amp;fragmentShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fragmentShaderCodeChanged(const QByteArray &amp;fragmentShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QShaderProgram.ComputeShaderCodeChanged">
            <summary>
            <para>Specifies the compute shader code to be used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	computeShaderCode() const</para>
            <para> void 	setComputeShaderCode(const QByteArray &amp;computeShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	computeShaderCodeChanged(const QByteArray &amp;computeShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.VertexShaderCode">
            <summary>
            <para>Specifies the vertex shader code to be used</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.TessellationControlShaderCode">
            <summary>
            <para>Specifies the tessellation control shader code to be used</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.TessellationEvaluationShaderCode">
            <summary>
            <para>Specifies the tessellation evaluation shader code to be used</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.GeometryShaderCode">
            <summary>
            <para>Specifies the geometry shader code to be used</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.FragmentShaderCode">
            <summary>
            <para>Specifies the fragment shader code to be used</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QShaderProgram.ComputeShaderCode">
            <summary>
            <para>Specifies the compute shader code to be used</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QShaderProgram.ShaderType">
            <summary>
            <para>This enum identifies the type of shader used</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QRenderPass">
            <summary>
            <para>Encapsulates a Render Pass.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QRenderPass with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.AddFilterKey(Qt3DRender.QFilterKey)">
            <summary>
            <para>Adds filterKey from to the Qt3DRender::QRenderPass local filter keys.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.RemoveFilterKey(Qt3DRender.QFilterKey)">
            <summary>
            <para>Removes filterKey from the Qt3DRender::QRenderPass local filter keys.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.AddRenderState(Qt3DRender.QRenderState)">
            <summary>
            <para>Adds a Qt3DCore::QRenderState state to the rendering pass. That implies that when the pass is executed at render time, the globally set render state will be modifed by the states defined locally by the Qt3DRender::QRenderPass.</para>
            <para>Note: not defining any Qt3DCore::QRenderState in a pass will result in the pass using the globally set render state for a given FrameGraph branch execution path.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.RemoveRenderState(Qt3DRender.QRenderState)">
            <summary>
            <para>Removes state from the Qt3DRender::QRenderPass local render state.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Add parameter to the render pass' parameters.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QRenderPass.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Remove parameter from the render pass' parameters.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QRenderPass.ShaderProgramChanged">
            <summary>
            <para>Specifies the shader program to be used for this render pass</para>
            <para>Access functions:</para>
            <para></para>
            <para> QShaderProgram *	shaderProgram() const</para>
            <para> void 	setShaderProgram(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderProgramChanged(QShaderProgram *shaderProgram)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QRenderPass.ShaderProgram">
            <summary>
            <para>Specifies the shader program to be used for this render pass</para>
            <para>Access functions:</para>
            <para></para>
            <para> QShaderProgram *	shaderProgram() const</para>
            <para> void 	setShaderProgram(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderProgramChanged(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para></para>
            <para>Sets the pass' shaderProgram.</para>
            <para>Note: Setter function for property shaderProgram. </para>
            <para>See also shaderProgram().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.PropertyReaderInterface.ReadProperty(QtCore.QVariant)">
            <summary>
            <para>Returns the property identifies by v</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QShaderData">
            <summary>
            <para>Provides a way of specifying values of a Uniform Block or a shader structure.</para>
            </summary>
            <remarks>
            <para>Note: When subclassing and adding properties to QShaderData, note that if you need to nest an inner Qt3DRender::QShaderData, the data type of the property should be Qt3DRender::QShaderData* instead of the name of your subclass.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QShaderData.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QShaderData.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTechnique">
            <summary>
            <para>Encapsulates a Technique.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QTechnique with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.AddFilterKey(Qt3DRender.QFilterKey)">
            <summary>
            <para>Add filterKey to the Qt3DRender::QTechnique local filter keys.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.RemoveFilterKey(Qt3DRender.QFilterKey)">
            <summary>
            <para>Removes filterKey from the Qt3DRender::QTechnique local filter keys.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.AddParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Add parameter to the techniques parameters.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.RemoveParameter(Qt3DRender.QParameter)">
            <summary>
            <para>Remove parameter from the techniques parameters.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.AddRenderPass(Qt3DRender.QRenderPass)">
            <summary>
            <para>Appends a pass to the technique.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTechnique.RemoveRenderPass(Qt3DRender.QRenderPass)">
            <summary>
            <para>Removes a pass from the technique.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTechnique.GraphicsApiFilter">
            <summary>
            <para>Specifies the graphics API filter being used</para>
            <para>Access functions:</para>
            <para></para>
            <para> QGraphicsApiFilter *	graphicsApiFilter()</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QObjectPicker">
            <summary>
            <para>The QObjectPicker class instantiates a component that can be used to interact with a QEntity by a process known as picking.</para>
            </summary>
            <remarks>
            <para>The signals pressed(), released(), clicked(), moved(), entered(), and exited() are emitted when the bounding volume defined by the pickAttribute property intersects with a ray.</para>
            <para>Pick queries are performed on mouse press and mouse release. If drag is enabled, queries also happen on each mouse move while any button is pressed. If hover is enabled, queries happen on every mouse move even if no button is pressed.</para>
            <para>Note: Instances of this component shouldn't be shared, not respecting that condition will most likely result in undefined behavior.</para>
            <para></para>
            <para>See also QPickingSettings.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QObjectPicker.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QObjectPicker.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Pressed">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on a mouse press the QPickEvent pick contains details of the event.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Released">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on a mouse release the QPickEvent pick contains details of the event.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Clicked">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on a mouse click the QPickEvent pick contains details of the event.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Moved">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on a mouse move with a button pressed the QPickEvent pick contains details of the event.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Entered">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on the mouse entering the volume.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.Exited">
            <summary>
            <para>This signal is emitted when the bounding volume defined by the pickAttribute property intersects with a ray on the ray exiting the volume.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.HoverEnabledChanged">
            <summary>
            <para>Specifies if hover is enabled</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isHoverEnabled() const</para>
            <para> void 	setHoverEnabled(bool hoverEnabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	hoverEnabledChanged(bool hoverEnabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.DragEnabledChanged">
            <summary>
            <para>Specifies if drag is enabled</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isDragEnabled() const</para>
            <para> void 	setDragEnabled(bool dragEnabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dragEnabledChanged(bool dragEnabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.PressedChanged">
            <summary>
            <para>Specifies if the object picker is currently pressed</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isPressed() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pressedChanged(bool pressed)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QObjectPicker.ContainsMouseChanged">
            <summary>
            <para>Specifies if the object picker currently contains the mouse</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	containsMouse() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	containsMouseChanged(bool containsMouse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QObjectPicker.HoverEnabled">
            <summary>
            <para>Specifies if hover is enabled</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QObjectPicker.DragEnabled">
            <summary>
            <para>Specifies if drag is enabled</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QObjectPicker.ContainsMouse">
            <summary>
            <para>Specifies if the object picker currently contains the mouse</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QObjectPicker.IsPressed">
            <summary>
            <para>Specifies if the object picker is currently pressed</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isPressed() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pressedChanged(bool pressed)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPickEvent">
            <summary>
            <para>The QPickEvent class holds information when an object is picked</para>
            </summary>
            <remarks>
            <para>See also QPickingSettings, QPickTriangleEvent, and QObjectPicker.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QPickEvent.#ctor">
            <summary>
            <para>Constructs a new QPickEvent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QPickEvent.#ctor(QtCore.QPointF,QtGui.QVector3D,QtGui.QVector3D,System.Single)">
            <summary>
            <para>Constructs a new QPickEvent with the given parameters: position, intersection, localIntersection and distance</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPickEvent.AcceptedChanged">
            <summary>
            <para>Specifies if event has been accepted</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAccepted() const</para>
            <para> void 	setAccepted(bool accepted)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	acceptedChanged(bool accepted)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickEvent.Accepted">
            <summary>
            <para>Specifies if event has been accepted</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickEvent.Position">
            <summary>
            <para>Specifies the position of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickEvent.Distance">
            <summary>
            <para>Specifies the distance of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickEvent.WorldIntersection">
            <summary>
            <para>Specifies the world intersection of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickEvent.LocalIntersection">
            <summary>
            <para>Specifies the local intersection of the event</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPickTriangleEvent">
            <summary>
            <para>The QPickTriangleEvent class holds information when a triangle is picked</para>
            </summary>
            <remarks>
            <para>See also QPickEvent and QPickSettings.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QPickTriangleEvent.#ctor">
            <summary>
            <para>Constructs a new QPickEvent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QPickTriangleEvent.#ctor(QtCore.QPointF,QtGui.QVector3D,QtGui.QVector3D,System.Single,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>QPickTriangleEvent::QPickTriangleEvent Constructs a new QPickEvent with the given parameters position, intersection, localIntersection, distance, triangleIndex, vertex1Index, vertex2Index and vertex3Index</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickTriangleEvent.TriangleIndex">
            <summary>
            <para>Specifies the triangle index of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickTriangleEvent.Vertex1Index">
            <summary>
            <para>Specifies the vertex 1 index of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickTriangleEvent.Vertex2Index">
            <summary>
            <para>Specifies the vertex 2 index of the event</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QPickTriangleEvent.Vertex3Index">
            <summary>
            <para>Specifies the vertex 3 index of the event</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAlphaCoverage">
            <summary>
            <para>A QAlphaCoverage class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAlphaCoverage.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAlphaCoverage.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAlphaTest.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAlphaTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAlphaTest.AlphaFunctionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> AlphaFunction 	alphaFunction() const</para>
            <para> void 	setAlphaFunction(AlphaFunction alphaFunction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	alphaFunctionChanged(AlphaFunction alphaFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAlphaTest.ReferenceValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	referenceValue() const</para>
            <para> void 	setReferenceValue(float referenceValue)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	referenceValueChanged(float referenceValue)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QBlendEquation.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendEquation.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquation.BlendFunctionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> BlendFunction 	blendFunction() const</para>
            <para> void 	setBlendFunction(BlendFunction blendFunction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blendFunctionChanged(BlendFunction blendFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QBlendEquationArguments">
            <summary>
            <para>Encapsulates blending information.</para>
            </summary>
            <remarks>
            <para>OpenGL pre-3.0: Set the same blend state for all draw buffers (one QBlendEquationArguments) OpenGL 3.0-pre4.0: Set the same blend state for all draw buffers, but can disable blending for particular buffers (one QBlendEquationArguments for setting glBlendFunc, n QBlendEquationArgumentss for enabling/disabling Draw Buffers) OpenGL 4.0+: Can set blend state individually for each draw buffer.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QBlendEquationArguments.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendEquationArguments.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.SourceRgbChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	sourceRgb() const</para>
            <para> void 	setSourceRgb(Blending sourceRgb)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceRgbChanged(Blending sourceRgb)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.SourceAlphaChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	sourceAlpha() const</para>
            <para> void 	setSourceAlpha(Blending sourceAlpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceAlphaChanged(Blending sourceAlpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.DestinationRgbChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	destinationRgb() const</para>
            <para> void 	setDestinationRgb(Blending destinationRgb)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	destinationRgbChanged(Blending destinationRgb)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.DestinationAlphaChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	destinationAlpha() const</para>
            <para> void 	setDestinationAlpha(Blending destinationAlpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	destinationAlphaChanged(Blending destinationAlpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.SourceRgbaChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.DestinationRgbaChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QBlendEquationArguments.BufferIndexChanged">
            <summary>
            <para>Specifies the index of the Draw Buffer that this BlendEquationArguments applies to. If negative, this will apply to all Draw Buffers.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	bufferIndex() const</para>
            <para> void 	setBufferIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferIndexChanged(int index)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QBlendEquationArguments.BufferIndex">
            <summary>
            <para>Specifies the index of the Draw Buffer that this BlendEquationArguments applies to. If negative, this will apply to all Draw Buffers.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QClipPlane">
            <summary>
            <para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance</para>
            </summary>
            <remarks>
            <para>By default, OpenGL supports up to 8 additional clipping planes. Qt3DCore::QClipPlane allows to enable one of these additional planes. These planes can then be manipulated in the shaders using gl_ClipDistance[i] where i varies between 0 and 8.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QClipPlane.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QClipPlane.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClipPlane.PlaneIndexChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	planeIndex() const</para>
            <para> void 	setPlaneIndex(int planeIndex)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	planeIndexChanged(int planeIndex)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClipPlane.NormalChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	normal() const</para>
            <para> void 	setNormal(QVector3D)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QVector3D normal)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QClipPlane.DistanceChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	distance() const</para>
            <para> void 	setDistance(float)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	distanceChanged(float distance)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QColorMask">
            <summary>
            <para>Allows specifying which color components should be written to the currently bound frame buffer.</para>
            </summary>
            <remarks>
            <para>By default, the property for each color component (red, green, blue, alpha) is set to true which means they will be written to the frame buffer. Setting any of the color component to false will prevent it from being written into the frame buffer.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QColorMask.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QColorMask.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QColorMask.RedMaskedChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isRedMasked() const</para>
            <para> void 	setRedMasked(bool redMasked)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	redMaskedChanged(bool redMasked)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QColorMask.GreenMaskedChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isGreenMasked() const</para>
            <para> void 	setGreenMasked(bool greenMasked)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	greenMaskedChanged(bool greenMasked)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QColorMask.BlueMaskedChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isBlueMasked() const</para>
            <para> void 	setBlueMasked(bool blueMasked)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blueMaskedChanged(bool blueMasked)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QColorMask.AlphaMaskedChanged">
            <summary>
            <para>Holds whether the alphaMasked component should be written to the frame buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAlphaMasked() const</para>
            <para> void 	setAlphaMasked(bool alphaMasked)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	alphaMaskedChanged(bool alphaMasked)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QColorMask.AlphaMasked">
            <summary>
            <para>Holds whether the alphaMasked component should be written to the frame buffer.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QCullFace.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCullFace.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QCullFace.ModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> CullingMode 	mode() const</para>
            <para> void 	setMode(CullingMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	modeChanged(CullingMode mode)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QDepthTest.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDepthTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QDepthTest.DepthFunctionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> DepthFunction 	depthFunction() const</para>
            <para> void 	setDepthFunction(DepthFunction depthFunction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthFunctionChanged(DepthFunction depthFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QDithering">
            <summary>
            <para>The QDithering class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QDithering.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDithering.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QFrontFace.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrontFace.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QFrontFace.DirectionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WindingDirection 	direction() const</para>
            <para> void 	setDirection(WindingDirection direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	directionChanged(WindingDirection direction)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QMultiSampleAntiAliasing.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QMultiSampleAntiAliasing.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QNoDepthMask.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNoDepthMask.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QPointSize">
            <summary>
            <para>Specifies the size of rasterized points. May either be set statically or by shader programs.</para>
            </summary>
            <remarks>
            <para>When using StaticValue, the value is set using glPointSize(), if available. When using Programmable, gl_PointSize must be set within shader programs, the value provided to this RenderState is ignored in that case.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QPointSize.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QPointSize.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPointSize.SizeModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> SizeMode 	sizeMode() const</para>
            <para> void 	setSizeMode(SizeMode sizeMode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sizeModeChanged(SizeMode sizeMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPointSize.ValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	value() const</para>
            <para> void 	setValue(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(float value)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QPolygonOffset.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QPolygonOffset.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPolygonOffset.ScaleFactorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	scaleFactor() const</para>
            <para> void 	setScaleFactor(float scaleFactor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scaleFactorChanged(float scaleFactor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QPolygonOffset.DepthStepsChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	depthSteps() const</para>
            <para> void 	setDepthSteps(float depthSteps)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthStepsChanged(float depthSteps)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QScissorTest.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QScissorTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QScissorTest.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	left() const</para>
            <para> void 	setLeft(int left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(int left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QScissorTest.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	bottom() const</para>
            <para> void 	setBottom(int bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(int bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QScissorTest.WidthChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	width() const</para>
            <para> void 	setWidth(int width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(int width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QScissorTest.HeightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	height() const</para>
            <para> void 	setHeight(int height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(int height)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QSeamlessCubemap">
            <summary>
            <para>Enables seamless cubemap texture filtering. When present in a state set, enables the seamless cubemap texture filtering as provided by the GL_ARB_seamless_cubemap extension (if available).</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QSeamlessCubemap.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSeamlessCubemap.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QStencilMask.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilMask.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilMask.FrontOutputMaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	frontOutputMask() const</para>
            <para> void 	setFrontOutputMask(uint frontOutputMask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	frontOutputMaskChanged(uint frontOutputMask)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilMask.BackOutputMaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	backOutputMask() const</para>
            <para> void 	setBackOutputMask(uint backOutputMask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	backOutputMaskChanged(uint backOutputMask)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QStencilOperation.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilOperation.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QStencilOperation.Front">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilOperationArguments *	front() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QStencilOperation.Back">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilOperationArguments *	back() const</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilOperationArguments.StencilTestFailureOperationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Operation 	stencilTestFailureOperation() const</para>
            <para> void 	setStencilTestFailureOperation(Operation operation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stencilTestFailureOperationChanged(Operation stencilFail)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilOperationArguments.DepthTestFailureOperationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Operation 	depthTestFailureOperation() const</para>
            <para> void 	setDepthTestFailureOperation(Operation operation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthTestFailureOperationChanged(Operation depthFail)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilOperationArguments.AllTestsPassOperationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Operation 	allTestsPassOperation() const</para>
            <para> void 	setAllTestsPassOperation(Operation operation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	allTestsPassOperationChanged(Operation stencilDepthPass)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilOperationArguments.FaceModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> FaceMode 	faceMode() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceModeChanged(FaceMode faceMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QStencilTest">
            <summary>
            <para>The QStencilTest class</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QStencilTest.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilTest.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QStencilTest.Front">
            <summary>
            <para>Returns the stencil test for the front</para>
            <para>Note: Getter function for property front. </para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QStencilTest.Back">
            <summary>
            <para>Returns the stencil test for the back</para>
            <para>Note: Getter function for property back. </para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilTestArguments.ComparisonMaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	comparisonMask() const</para>
            <para> void 	setComparisonMask(uint comparisonMask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	comparisonMaskChanged(uint comparisonMask)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilTestArguments.StencilFunctionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilFunction 	stencilFunction() const</para>
            <para> void 	setStencilFunction(StencilFunction stencilFunction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stencilFunctionChanged(StencilFunction stencilFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilTestArguments.ReferenceValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	referenceValue() const</para>
            <para> void 	setReferenceValue(int referenceValue)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	referenceValueChanged(int referenceValue)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QStencilTestArguments.FaceModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilFaceMode 	faceMode() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceModeChanged(StencilFaceMode faceMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QAbstractTextureImage">
            <summary>
            <para>Encapsulates the necessary information to create an OpenGL texture image.</para>
            </summary>
            <remarks>
            <para>QAbstractTextureImage should be used as the means of providing image data to a QAbstractTexture. It contains the necessary information: mipmap level, layer, cube face load at the proper place data into an OpenGL texture.</para>
            <para>The actual data is provided through a QTextureImageDataGenerator that will be executed by Aspect jobs in the backend. QAbstractTextureImage should be subclassed to provide a functor and eventual additional properties needed by the functor to load actual data.</para>
            <para>Note: : QAbstractTextureImage should never be shared. Expect crashes, undefined behavior at best if this rule is not respected.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QAbstractTextureImage.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTextureImage.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QAbstractTextureImage.NotifyDataGeneratorChanged">
            <summary>
            <para>Triggers an update of the data generator that is sent to the backend.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTextureImage.MipLevelChanged">
            <summary>
            <para>Holds the mipmap level of the texture image.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	mipLevel() const</para>
            <para> void 	setMipLevel(int level)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	mipLevelChanged(int mipLevel)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTextureImage.LayerChanged">
            <summary>
            <para>Returns the layer of the texture image.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	layer() const</para>
            <para> void 	setLayer(int layer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layerChanged(int layer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QAbstractTextureImage.FaceChanged">
            <summary>
            <para>Holds the cube map face of the texture image.</para>
            <para>Note: The cube map face has a meaning only for TargetCubeMap and TargetCubeMapArray.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTexture::CubeMapFace 	face() const</para>
            <para> void 	setFace(QAbstractTexture::CubeMapFace face)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceChanged(QAbstractTexture::CubeMapFace face)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTextureImage.MipLevel">
            <summary>
            <para>Holds the mipmap level of the texture image.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTextureImage.Layer">
            <summary>
            <para>Returns the layer of the texture image.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QAbstractTextureImage.Face">
            <summary>
            <para>Holds the cube map face of the texture image.</para>
            <para>Note: The cube map face has a meaning only for TargetCubeMap and TargetCubeMapArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureWrapMode">
            <summary>
            <para>Defines the wrap mode a Qt3DRender::QAbstractTexture should apply to a texture.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureWrapMode.#ctor(Qt3DRender.QTextureWrapMode.WrapMode,QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QTextureWrapMode.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureWrapMode.#ctor(Qt3DRender.QTextureWrapMode.WrapMode,Qt3DRender.QTextureWrapMode.WrapMode,Qt3DRender.QTextureWrapMode.WrapMode,QtCore.QObject)">
            <summary>
            <para>Contrusts a new Qt3DRender::QTextureWrapMode instance with the wrap mode to apply to each dimension x, y z of the texture and parent as parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureWrapMode.XChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	x() const</para>
            <para> void 	setX(WrapMode x)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xChanged(WrapMode x)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureWrapMode.YChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	y() const</para>
            <para> void 	setY(WrapMode y)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yChanged(WrapMode y)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureWrapMode.ZChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	z() const</para>
            <para> void 	setZ(WrapMode z)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zChanged(WrapMode z)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureImage">
            <summary>
            <para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</para>
            </summary>
            <remarks>
            <para>It contains the necessary information mipmap level, layer, cube face and source URL to load at the proper place data into an OpenGL texture.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.QTextureImage.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureImage.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureImage.SourceChanged">
            <summary>
            <para>This property holds the source url from which data for the texture image will be loaded.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;source)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureImage.StatusChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureImage.Source">
            <summary>
            <para>This property holds the source url from which data for the texture image will be loaded.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture1D">
            <summary>
            <para>A QAbstractTexture with a Target1D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture1D.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture1D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture1DArray">
            <summary>
            <para>A QAbstractTexture with a Target1DArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture1DArray.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture1DArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture2D">
            <summary>
            <para>A QAbstractTexture with a Target2D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture2D.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture2DArray">
            <summary>
            <para>A QAbstractTexture with a Target2DArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture2DArray.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture3D">
            <summary>
            <para>A QAbstractTexture with a Target3D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture3D.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture3D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureCubeMap">
            <summary>
            <para>A QAbstractTexture with a TargetCubeMap target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureCubeMap.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureCubeMap.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureCubeMapArray">
            <summary>
            <para>A QAbstractTexture with a TargetCubeMapArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureCubeMapArray.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureCubeMapArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture2DMultisample">
            <summary>
            <para>A QAbstractTexture with a Target2DMultisample target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture2DMultisample.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DMultisample.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTexture2DMultisampleArray">
            <summary>
            <para>A QAbstractTexture with a Target2DMultisampleArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTexture2DMultisampleArray.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DMultisampleArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureRectangle">
            <summary>
            <para>A QAbstractTexture with a TargetRectangle target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureRectangle.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureRectangle.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureBuffer">
            <summary>
            <para>A QAbstractTexture with a TargetBuffer target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureBuffer.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureBuffer.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureLoader.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureLoader.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.QTextureLoader.SourceChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;source)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.QTextureData">
            <summary>
            <para>The QTextureData class stores texture information such as the target, height, width, depth, layers, wrap, and if mipmaps are enabled.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.QTextureData.#ctor">
            <summary>
            <para>Creates a new QTextureData instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Target">
            <summary>
            <para>Returns the texture data target.</para>
            <para>See also setTarget().</para>
            <para></para>
            <para>Sets the target texture to target.</para>
            <para>See also target().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Format">
            <summary>
            <para>Returns the texture format</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the texture format to format.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Width">
            <summary>
            <para>Returns the texture width.</para>
            <para>See also setWidth().</para>
            <para></para>
            <para>Sets the texture width to width.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Height">
            <summary>
            <para>Returns the texture height.</para>
            <para>See also setHeight().</para>
            <para></para>
            <para>Sets the target height to height.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Depth">
            <summary>
            <para>Returns the texture depth.</para>
            <para>See also setDepth().</para>
            <para></para>
            <para>Sets the texture depth to depth</para>
            <para>See also depth().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.Layers">
            <summary>
            <para>Returns the texture layers.</para>
            <para>See also setLayers().</para>
            <para></para>
            <para>Sets the texture layers to layers.</para>
            <para>See also layers().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.AutoMipMapGenerationEnabled">
            <summary>
            <para>Returns whether the texture has auto mipmap generation enabled.</para>
            <para></para>
            <para>Sets whether the texture has automatic mipmap generation enabled, to autoMipMap.</para>
            <para>See also isAutoMipMapGenerationEnabled().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.MaximumAnisotropy">
            <summary>
            <para>Returns the current maximum anisotropy.</para>
            <para>See also setMaximumAnisotropy().</para>
            <para></para>
            <para>Sets the maximum anisotropy to maximumAnisotropy.</para>
            <para>See also maximumAnisotropy().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.MinificationFilter">
            <summary>
            <para>Returns the current minification filter.</para>
            <para>See also setMinificationFilter().</para>
            <para></para>
            <para>Sets the minification filter to filter.</para>
            <para>See also minificationFilter().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.MagnificationFilter">
            <summary>
            <para>Returns the current magnification filter.</para>
            <para>See also setMagnificationFilter().</para>
            <para></para>
            <para>Sets the magnification filter to filter.</para>
            <para>See also magnificationFilter().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.WrapModeX">
            <summary>
            <para>Returns the current wrap mode X.</para>
            <para>See also setWrapModeX().</para>
            <para></para>
            <para>Sets the wrap mode X to wrapModeX.</para>
            <para>See also wrapModeX().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.WrapModeY">
            <summary>
            <para>Returns the current wrap mode Y.</para>
            <para>See also setWrapModeY().</para>
            <para></para>
            <para>Sets the wrap mode Y to wrapModeY.</para>
            <para>See also wrapModeY().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.WrapModeZ">
            <summary>
            <para>Returns the current wrap mode Z.</para>
            <para>See also setWrapModeZ().</para>
            <para></para>
            <para>Sets the wrap mode Z to wrapModeZ.</para>
            <para>See also wrapModeZ().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.ComparisonFunction">
            <summary>
            <para>Returns the current comparison function.</para>
            <para>See also setComparisonFunction().</para>
            <para></para>
            <para>Sets the comparison function to comparisonFunction.</para>
            <para>See also comparisonFunction().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.QTextureData.ComparisonMode">
            <summary>
            <para>Returns the current comparison mode.</para>
            <para>See also setComparisonMode().</para>
            <para></para>
            <para>Sets the comparison mode to comparisonMode.</para>
            <para>See also comparisonMode().</para>
            </summary>
        </member>
    </members>
</doc>
