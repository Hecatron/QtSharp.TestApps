<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qt3DRenderSharp</name>
    </assembly>
    <members>
        <member name="T:Qt3DRender.Qt3DRender.QMaterial">
            <summary>
            <para>Provides an abstract class that should be the base of all Material component classes in a scene.</para>
            </summary>
            <remarks>
            <para>QAbstractMaterial provide a way to specify the rendering of an Entity. Any aspect can define its own subclass of QAbstractMaterial so that a Material can be used to describe a visual element; for example, the way sound should reflect off an element, the temperature of a surface, and so on.</para>
            <para></para>
            <para>See also QEffect, QMesh, and QComponent.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QMaterial.EffectChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QEffect *	effect() const</para>
            <para> void 	setEffect(QEffect *effect)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	effectChanged(QEffect *effect)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QMaterial.Effect">
            <summary>
            <para>Returns the effect used by the Material.</para>
            <para>Note: Getter function for property effect. </para>
            <para>See also setEffect().</para>
            <para></para>
            <para>Sets the effect to be used with the Material.</para>
            <para>Note: Setter function for property effect. </para>
            <para>See also effect().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QDiffuseMapMaterial">
            <summary>
            <para>The QDiffuseMapMaterial provides a default implementation of the phong lighting effect where the diffuse light component is read from a texture map.</para>
            </summary>
            <remarks>
            <para>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDiffuseMapMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.AmbientChanged">
            <summary>
            <para>Holds the current ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.DiffuseChanged">
            <summary>
            <para>Holds the current QTexture used as the diffuse map.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.SpecularChanged">
            <summary>
            <para>Holds the current specular color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	specular() const</para>
            <para> void 	setSpecular(const QColor &amp;specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(const QColor &amp;specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.ShininessChanged">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.TextureScaleChanged">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	textureScale() const</para>
            <para> void 	setTextureScale(float textureScale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureScaleChanged(float textureScale)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.Ambient">
            <summary>
            <para>Holds the current ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.Specular">
            <summary>
            <para>Holds the current specular color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.Shininess">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.Diffuse">
            <summary>
            <para>Holds the current QTexture used as the diffuse map.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para></para>
            <para>Holds the current QTexture used as the diffuse map.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseMapMaterial.TextureScale">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial">
            <summary>
            <para>The QDiffuseSpecularMapMaterial provides a default implementation of the phong lighting and bump effect where the diffuse and specular light components are read from texture maps.</para>
            </summary>
            <remarks>
            <para>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDiffuseSpecularMapMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.AmbientChanged">
            <summary>
            <para>Holds the current ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;ambient)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.DiffuseChanged">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.SpecularChanged">
            <summary>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.ShininessChanged">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.TextureScaleChanged">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	textureScale() const</para>
            <para> void 	setTextureScale(float textureScale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureScaleChanged(float textureScale)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.Ambient">
            <summary>
            <para>Holds the current ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.Diffuse">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para></para>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.Specular">
            <summary>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para></para>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.Shininess">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDiffuseSpecularMapMaterial.TextureScale">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QFrameGraphNode">
            <summary>
            <para>Base class of all FrameGraph configuration nodes.</para>
            </summary>
            <remarks>
            <para>This is an abstract class so it cannot be instanced directly but rather through one of its subclasses.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrameGraphNode.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrameGraphNode.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QFrameGraphNode.EnabledChanged">
            <summary>
            <para>Holds whether the frame graph node is enabled or disabled.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isEnabled() const</para>
            <para> void 	setEnabled(bool enabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	enabledChanged(bool enabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QFrameGraphNode.Enabled">
            <summary>
            <para>Holds whether the frame graph node is enabled or disabled.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QFrameGraphNode.ParentFrameGraphNode">
            <summary>
            <para>Returns a pointer to the parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTechniqueFilter.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTechniqueFilter.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QForwardRenderer">
            <summary>
            <para>The Qt3DRender::QForwardRenderer provides a default FrameGraph implementation of a forward renderer.</para>
            </summary>
            <remarks>
            <para>Forward rendering is how OpenGL is traditionally. It renders directly to the backbuffer one object at a time shading each one as it goes.</para>
            <para>Internally the Qt3DRender::QForwardRenderer is a subclass of Qt3DRender::QTechniqueFilter. This a is a single leaf Framegraph tree which contains a Qt3DRender::QViewport, a Qt3DRender::QCameraSelector and a Qt3DRender::QClearBuffer. The Qt3DRender::QForwardRenderer has a default requirement annotation whose name is &quot;renderingStyle&quot; and value &quot;forward&quot;. If you need to filter out your techniques, you should do so based on that annotation.</para>
            <para>By default the viewport occupies the whole screen and the clear color is white. Frustum culling is also enabled.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QForwardRenderer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QForwardRenderer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QForwardRenderer.ViewportRectChanged">
            <summary>
            <para>Holds the current viewport rect.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRectF 	viewportRect() const</para>
            <para> void 	setViewportRect(const QRectF &amp;viewportRect)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	viewportRectChanged(const QRectF &amp;viewportRect)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QForwardRenderer.ClearColorChanged">
            <summary>
            <para>Holds the current clearColor.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	clearColor() const</para>
            <para> void 	setClearColor(const QColor &amp;clearColor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clearColorChanged(const QColor &amp;clearColor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QForwardRenderer.CameraChanged">
            <summary>
            <para>Holds the current QEntity camera used to render the scene.</para>
            <para>Note: A camera is a QEntity that has a QCameraLens as one of its components.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QForwardRenderer.ViewportRect">
            <summary>
            <para>Holds the current viewport rect.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QForwardRenderer.ClearColor">
            <summary>
            <para>Holds the current clearColor.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QForwardRenderer.Camera">
            <summary>
            <para>Holds the current QEntity camera used to render the scene.</para>
            <para>Note: A camera is a QEntity that has a QCameraLens as one of its components.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para></para>
            <para>Sets the camera which should be used to render the scene to camera.</para>
            <para>Note: A camera is a QEntity having a QCameraLens as one of its components.</para>
            <para>Note: Setter function for property camera. </para>
            <para>See also camera().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QGoochMaterial">
            <summary>
            <para>The QGoochMaterial provides a material that implements the Gooch shading model, popular in CAD and CAM applications.</para>
            </summary>
            <remarks>
            <para>The Gooch lighting model uses both color and brightness to help show the curvature of 3D surfaces. This is often better than models such as Phong that rely purely upon changes in brightness. In situations such as in CAD and CAM applications where photorealism is not a goal, the Gooch shading model in conjunction with some kind of silhouette edge inking is a popular solution.</para>
            <para>The Gooch lighting model is explained fully in the original Gooch paper. The Gooch model mixes a diffuse objetc color with a user-provided cool color and warm color to produce the end points of a color ramp that is used to shade the object based upon the cosine of the angle between the vector from the fragment to the light source and the fragment's normal vector. Optionally, a specular highlight can be added on top. The relative contributions to the cool and warm colors by the diffuse color are controlled by the alpha and beta properties respecitvely.</para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGoochMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QGoochMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.DiffuseChanged">
            <summary>
            <para>Holds the current diffuse color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	diffuse() const</para>
            <para> void 	setDiffuse(const QColor &amp;diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(const QColor &amp;diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.SpecularChanged">
            <summary>
            <para>Holds the current specular color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	specular() const</para>
            <para> void 	setSpecular(const QColor &amp;specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(const QColor &amp;specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.CoolChanged">
            <summary>
            <para>Holds the current cool color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	cool() const</para>
            <para> void 	setCool(const QColor &amp;cool)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	coolChanged(const QColor &amp;cool)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.WarmChanged">
            <summary>
            <para>Holds the current warm color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	warm() const</para>
            <para> void 	setWarm(const QColor &amp;warm)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	warmChanged(const QColor &amp;warm)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.AlphaChanged">
            <summary>
            <para>Holds the current alpha value. The start point of the color ramp used by the Gooch shader is calculated as {c = cool + alpha * diffuse}.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	alpha() const</para>
            <para> void 	setAlpha(float alpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	alphaChanged(float alpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.BetaChanged">
            <summary>
            <para>Holds the current beta value. The start point of the color ramp used by the Gooch shader is calculated as {c = warm + beta * diffuse}.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	beta() const</para>
            <para> void 	setBeta(float beta)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	betaChanged(float beta)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGoochMaterial.ShininessChanged">
            <summary>
            <para>Holds the current shininess value. Higher values of shininess result in a smaller and brighter highlight.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Diffuse">
            <summary>
            <para>Holds the current diffuse color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Specular">
            <summary>
            <para>Holds the current specular color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Cool">
            <summary>
            <para>Holds the current cool color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Warm">
            <summary>
            <para>Holds the current warm color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Alpha">
            <summary>
            <para>Holds the current alpha value. The start point of the color ramp used by the Gooch shader is calculated as {c = cool + alpha * diffuse}.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Beta">
            <summary>
            <para>Holds the current beta value. The start point of the color ramp used by the Gooch shader is calculated as {c = warm + beta * diffuse}.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGoochMaterial.Shininess">
            <summary>
            <para>Holds the current shininess value. Higher values of shininess result in a smaller and brighter highlight.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial">
            <summary>
            <para>The QNormalDiffuseMapMaterial provides a default implementation of the phong lighting and bump effect where the diffuse light component is read from a texture map and the normals of the mesh being rendered from a normal texture map.</para>
            </summary>
            <remarks>
            <para>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNormalDiffuseMapMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.AmbientChanged">
            <summary>
            <para>Holds the current ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;ambient)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.DiffuseChanged">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has these properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap modeM</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.NormalChanged">
            <summary>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.SpecularChanged">
            <summary>
            <para>Holds the current specular color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	specular() const</para>
            <para> void 	setSpecular(const QColor &amp;specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(const QColor &amp;specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.ShininessChanged">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.TextureScaleChanged">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	textureScale() const</para>
            <para> void 	setTextureScale(float textureScale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureScaleChanged(float textureScale)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.Ambient">
            <summary>
            <para>Holds the current ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.Specular">
            <summary>
            <para>Holds the current specular color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.Diffuse">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has these properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap modeM</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para></para>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has these properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap modeM</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.Normal">
            <summary>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para></para>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.Shininess">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseMapMaterial.TextureScale">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QNormalDiffuseMapAlphaMaterial">
            <summary>
            <para>The QNormalDiffuseMapAlphaMaterial provides a default implementation of the phong lighting and bump effect where the diffuse light component is read from a texture map and the normals of the mesh being rendered from a normal texture map. In addition, it defines an alpha to coverage and a depth test to be performed in the rendering pass.</para>
            </summary>
            <remarks>
            <para>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QNormalDiffuseMapAlphaMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNormalDiffuseMapAlphaMaterial.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial">
            <summary>
            <para>The QNormalDiffuseSpecularMapMaterial provides a default implementation of the phong lighting and bump effect where the diffuse and specular light components are read from texture maps and the normals of the mesh being rendered from a normal texture map.</para>
            </summary>
            <remarks>
            <para>The specular lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNormalDiffuseSpecularMapMaterial.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.AmbientChanged">
            <summary>
            <para>Holds the current ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;ambient)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.DiffuseChanged">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.NormalChanged">
            <summary>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.SpecularChanged">
            <summary>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.ShininessChanged">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.TextureScaleChanged">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	textureScale() const</para>
            <para> void 	setTextureScale(float textureScale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureScaleChanged(float textureScale)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.Ambient">
            <summary>
            <para>Holds the current ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.Diffuse">
            <summary>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para></para>
            <para>Holds the current diffuse map texture.</para>
            <para>By default, the diffuse texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	diffuse() const</para>
            <para> void 	setDiffuse(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(QAbstractTextureProvider *diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.Normal">
            <summary>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para></para>
            <para>Holds the current normal map texture.</para>
            <para>By default, the normal texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	normal() const</para>
            <para> void 	setNormal(QAbstractTextureProvider *normal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	normalChanged(QAbstractTextureProvider *normal)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.Specular">
            <summary>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para></para>
            <para>Holds the current specular map texture.</para>
            <para>By default, the specular texture has the following properties:</para>
            <para></para>
            <para>Linear minification and magnification filters</para>
            <para>Linear mipmap with mipmapping enabled</para>
            <para>Repeat wrap mode</para>
            <para>Maximum anisotropy of 16.0</para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	specular() const</para>
            <para> void 	setSpecular(QAbstractTextureProvider *specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(QAbstractTextureProvider *specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.Shininess">
            <summary>
            <para>Holds the current shininess as a float value.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QNormalDiffuseSpecularMapMaterial.TextureScale">
            <summary>
            <para>Holds the current texture scale as a float value.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QPerVertexColorMaterial">
            <summary>
            <para>The QPerVertexColorMaterial class provides a default implementation for rendering the color properties set for each vertex.</para>
            </summary>
            <remarks>
            <para>This lighting effect is based on the combination of 2 lighting components ambient and diffuse. Ambient is set by the vertex color. Diffuse takes in account the normal distribution of each vertex.</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rough surface reflections with the lights</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and forms fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPerVertexColorMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPerVertexColorMaterial instance with parent object parent.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QPhongAlphaMaterial">
            <summary>
            <para>The QPhongAlphaMaterial class provides a default implementation of the phong lighting effect with alpha.</para>
            </summary>
            <remarks>
            <para>The phong lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para>Alpha is the transparency of the surface between 0 (fully transparent) and 1 (opaque).</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPhongAlphaMaterial instance with parent object parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.AmbientChanged">
            <summary>
            <para>Holds the ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;ambient)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.DiffuseChanged">
            <summary>
            <para>Holds the diffuse color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	diffuse() const</para>
            <para> void 	setDiffuse(const QColor &amp;diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(const QColor &amp;diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.SpecularChanged">
            <summary>
            <para>Holds the specular color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	specular() const</para>
            <para> void 	setSpecular(const QColor &amp;specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(const QColor &amp;specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.ShininessChanged">
            <summary>
            <para>Holds the shininess exponent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.AlphaChanged">
            <summary>
            <para>Holds the alpha component of the object which varies between 0 and 1.</para>
            <para>Note: : default value is 0.5f</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	alpha() const</para>
            <para> void 	setAlpha(float alpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	alphaChanged(float alpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.Ambient">
            <summary>
            <para>Holds the ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.Diffuse">
            <summary>
            <para>Holds the diffuse color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.Specular">
            <summary>
            <para>Holds the specular color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.Shininess">
            <summary>
            <para>Holds the shininess exponent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongAlphaMaterial.Alpha">
            <summary>
            <para>Holds the alpha component of the object which varies between 0 and 1.</para>
            <para>Note: : default value is 0.5f</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QPhongMaterial">
            <summary>
            <para>The QPhongMaterial class provides a default implementation of the phong lighting effect.</para>
            </summary>
            <remarks>
            <para>The phong lighting effect is based on the combination of 3 lighting components ambient, diffuse and specular. The relative strengths of these components is controlled by means of their reflectivity coefficients which are modelled as RGB triplets:</para>
            <para></para>
            <para>Ambient is the color that is emitted by an object without any other light source.</para>
            <para>Diffuse is the color that is emitted for rought surface reflections with the lights.</para>
            <para>Specular is the color emitted for shiny surface reflections with the lights.</para>
            <para>The shininess of a surface is controlled by a float property.</para>
            <para></para>
            <para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 2, OpenGL 3 or above as well as OpenGL ES 2.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPhongMaterial.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPhongMaterial instance with parent object parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongMaterial.AmbientChanged">
            <summary>
            <para>Holds the ambient color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	ambient() const</para>
            <para> void 	setAmbient(const QColor &amp;ambient)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ambientChanged(const QColor &amp;ambient)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongMaterial.DiffuseChanged">
            <summary>
            <para>Holds the diffuse color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	diffuse() const</para>
            <para> void 	setDiffuse(const QColor &amp;diffuse)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	diffuseChanged(const QColor &amp;diffuse)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongMaterial.SpecularChanged">
            <summary>
            <para>Holds the specular color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	specular() const</para>
            <para> void 	setSpecular(const QColor &amp;specular)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specularChanged(const QColor &amp;specular)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPhongMaterial.ShininessChanged">
            <summary>
            <para>Holds the shininess exponent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	shininess() const</para>
            <para> void 	setShininess(float shininess)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shininessChanged(float shininess)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongMaterial.Ambient">
            <summary>
            <para>Holds the ambient color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongMaterial.Diffuse">
            <summary>
            <para>Holds the diffuse color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongMaterial.Specular">
            <summary>
            <para>Holds the specular color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPhongMaterial.Shininess">
            <summary>
            <para>Holds the shininess exponent.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QSkyboxEntity">
            <summary>
            <para>Qt3DRender::QSkyboxEntity is a convenience Qt3DCore::QEntity subclass that can be used to insert a skybox in a 3D scene.</para>
            </summary>
            <remarks>
            <para>By specifying a base name and an extension, Qt3DCore::QSkyboxEntity will take care of building a TextureCubeMap to be rendered at runtime. The images in the source directory should match the pattern: base name + * &quot;_posx|_posy|_posz|_negx|_negy|_negz&quot; + extension</para>
            <para>By default the extension defaults to .png.</para>
            <para>Note: Please note that you shouldn't try to render skybox with an orthographic projection.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSkyboxEntity.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSkyboxEntity.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSkyboxEntity.SourceDirectoryChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSkyboxEntity.ExtensionChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSkyboxEntity.CameraPositionChanged">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSkyboxEntity.BaseName">
            <summary>
            <para>Returns the base name.</para>
            <para>See also setBaseName().</para>
            <para></para>
            <para>Sets the base name to baseName.</para>
            <para>See also baseName().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSkyboxEntity.Extension">
            <summary>
            <para>Returns the extension</para>
            <para>See also setExtension().</para>
            <para></para>
            <para>Sets the extension to extension.</para>
            <para>See also extension().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSkyboxEntity.CameraPosition">
            <summary>
            <para>Returns the camera postion.</para>
            <para>See also setCameraPosition().</para>
            <para></para>
            <para>Sets the camera position to cameraPosition.</para>
            <para>See also cameraPosition().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCameraSelector.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCameraSelector.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCameraSelector.CameraChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCameraSelector.Camera">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt3DCore::QEntity *	camera() const</para>
            <para> void 	setCamera(Qt3DCore::QEntity *camera)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cameraChanged(Qt3DCore::QEntity *camera)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QClearBuffer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QClearBuffer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QClearBuffer.BuffersChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> BufferType 	buffers() const</para>
            <para> void 	setBuffers(BufferType buffers)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	buffersChanged(BufferType buffers)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDispatchCompute.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDispatchCompute.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDispatchCompute.WorkGroupXChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupX() const</para>
            <para> void 	setWorkGroupX(int workGroupX)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupXChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDispatchCompute.WorkGroupYChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupY() const</para>
            <para> void 	setWorkGroupY(int workGroupY)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupYChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDispatchCompute.WorkGroupZChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	workGroupZ() const</para>
            <para> void 	setWorkGroupZ(int workGroupZ)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	workGroupZChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QFrameGraph">
            <summary>
            <para>Defines the rendering method to be used by the renderer.</para>
            </summary>
            <remarks>
            <para>QFrameGraph is the Component that has an activeFrameGraph property that should reference the root FrameGraphItem of a frame graph tree. The Entity that contains a FrameGraph property defines the rendering method to be used by the renderer.</para>
            <para>Note: Only one FrameGraph can be active at any moment.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrameGraph.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QFrameGraph with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrameGraph.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QFrameGraph.ActiveFrameGraphChanged">
            <summary>
            <para>Holds the current activeFrameGraph root node.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QFrameGraphNode *	activeFrameGraph() const</para>
            <para> void 	setActiveFrameGraph(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeFrameGraphChanged(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QFrameGraph.ActiveFrameGraph">
            <summary>
            <para>Holds the current activeFrameGraph root node.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QFrameGraphNode *	activeFrameGraph() const</para>
            <para> void 	setActiveFrameGraph(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeFrameGraphChanged(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            <para></para>
            <para>Holds the current activeFrameGraph root node.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QFrameGraphNode *	activeFrameGraph() const</para>
            <para> void 	setActiveFrameGraph(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeFrameGraphChanged(QFrameGraphNode *activeFrameGraph)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QFrameGraphSelector">
            <summary>
            <para>Qt3DRender::QFrameGraphSelector provide a way to select a one or more subtree of the FrameGraph at runtime</para>
            </summary>
            <remarks>
            <para>The selection is made by executing Qt3DRender::QFrameGraphSelectorFunctor that will return a vector containing the indices of the FrameGraph subtree to be used for the current frame.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrameGraphSelector.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrameGraphSelector.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrustumCulling.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrustumCulling.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QLayerFilter">
            <summary>
            <para>The QLayerFilter class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLayerFilter.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QLayerFilter with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLayerFilter.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QLayerFilter.LayersChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStringList 	layers() const</para>
            <para> void 	setLayers(const QStringList &amp;layers)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layersChanged(const QStringList &amp;layers)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLighting.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QLighting.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QNoDraw">
            <summary>
            <para>When a QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</para>
            </summary>
            <remarks>
            <para>QNoDraw should be used when the FrameGraph needs to set up some render states or clear some buffers without requiring any mesh to be drawn. It has the same effect as having a Qt3DRender::QRenderPassFilter that matches none of available Qt3DRender::QRenderPass instances of the scene without the overhead cost of actually performing the filtering.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QNoDraw.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QNoDraw.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderPassFilter.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderPassFilter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderAttachment.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderAttachment.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.TypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> RenderAttachmentType 	type() const</para>
            <para> void 	setType(RenderAttachmentType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	typeChanged(RenderAttachmentType type)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.TextureChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	texture() const</para>
            <para> void 	setTexture(QAbstractTextureProvider *texture)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureChanged(QAbstractTextureProvider *texture)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.MipLevelChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	mipLevel() const</para>
            <para> void 	setMipLevel(int level)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	mipLevelChanged(int mipLevel)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.LayerChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	layer() const</para>
            <para> void 	setLayer(int layer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layerChanged(int layer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.FaceChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> CubeMapFace 	face() const</para>
            <para> void 	setFace(CubeMapFace face)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceChanged(CubeMapFace face)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderAttachment.NameChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QRenderAttachment.Texture">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	texture() const</para>
            <para> void 	setTexture(QAbstractTextureProvider *texture)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureChanged(QAbstractTextureProvider *texture)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider *	texture() const</para>
            <para> void 	setTexture(QAbstractTextureProvider *texture)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	textureChanged(QAbstractTextureProvider *texture)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderTargetSelector.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderTargetSelector.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderTargetSelector.TargetChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QRenderTargetSelector.Target">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QRenderTarget *	target() const</para>
            <para> void 	setTarget(QRenderTarget *target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetChanged(QRenderTarget *target)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSortCriterion.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSortCriterion.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSortCriterion.SortChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> SortType 	sort() const</para>
            <para> void 	setSort(SortType sort)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sortChanged(SortType sort)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSortMethod.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSortMethod.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QStateSet">
            <summary>
            <para>The QStateSet FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch.</para>
            </summary>
            <remarks>
            <para>States set on a QStateSet are set globally, contrary to the per-material states that can be set on a QRenderPass. By default, an empty QStateSet will result in all render states being disabled when executed. Adding a QRenderState state explicitly enables that render state at runtime.</para>
            <para></para>
            <para>See also QRenderState and QRenderPass.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStateSet.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStateSet.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStateSet.AddRenderState(Qt3DRender.Qt3DRender.QRenderState)">
            <summary>
            <para>Adds a new QRenderState state to the QStateSet instance.</para>
            <para>Note: Not setting any QRenderState state on a QStateSet instance implies all the render states will be disabled at render time.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStateSet.RemoveRenderState(Qt3DRender.Qt3DRender.QRenderState)">
            <summary>
            <para>Removes the QRenderState state from the QStateSet instance.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QViewport.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QViewport.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QViewport.RectChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QRectF 	rect() const</para>
            <para> void 	setRect(const QRectF &amp;rect)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rectChanged(const QRectF &amp;rect)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QViewport.ClearColorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	clearColor() const</para>
            <para> void 	setClearColor(const QColor &amp;color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clearColorChanged(const QColor &amp;clearColor)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBoundingVolumeDebug.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBoundingVolumeDebug.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBoundingVolumeDebug.RecursiveChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	recursive() const</para>
            <para> void 	setRecursive(bool recursive)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	recursiveChanged(bool recursive)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractBuffer">
            <summary>
            <para>Abstract class.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractBuffer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAbstractBuffer with parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractBuffer.DataChanged">
            <summary>
            <para>This signal is emitted with bytes when data changes.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractBuffer.Data">
            <summary>
            <para>Returns the data.</para>
            <para>See also setData().</para>
            <para></para>
            <para>Sets bytes as data.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QBuffer">
            <summary>
            <para>The QBuffer class provides a QIODevice interface for a QByteArray.</para>
            </summary>
            <remarks>
            <para>QBuffer allows you to access a QByteArray using the QIODevice interface. The QByteArray is treated just as a standard random-accessed file. Example:</para>
            <para></para>
            <para></para>
            <para>      QBuffer buffer;</para>
            <para>      char ch;</para>
            <para></para>
            <para>      buffer.open(QBuffer::ReadWrite);</para>
            <para>      buffer.write(&quot;Qt rocks!&quot;);</para>
            <para>      buffer.seek(0);</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 'Q'</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 't'</para>
            <para>      buffer.getChar(&amp;ch);  // ch == ' '</para>
            <para>      buffer.getChar(&amp;ch);  // ch == 'r'</para>
            <para></para>
            <para></para>
            <para>By default, an internal QByteArray buffer is created for you when you create a QBuffer. You can access this buffer directly by calling buffer(). You can also use QBuffer with an existing QByteArray by calling setBuffer(), or by passing your array to QBuffer's constructor.</para>
            <para>Call open() to open the buffer. Then call write() or putChar() to write to the buffer, and read(), readLine(), readAll(), or getChar() to read from it. size() returns the current size of the buffer, and you can seek to arbitrary positions in the buffer by calling seek(). When you are done with accessing the buffer, call close().</para>
            <para>The following code snippet shows how to write data to a QByteArray using QDataStream and QBuffer:</para>
            <para></para>
            <para></para>
            <para>      QByteArray byteArray;</para>
            <para>      QBuffer buffer(&amp;byteArray);</para>
            <para>      buffer.open(QIODevice::WriteOnly);</para>
            <para></para>
            <para>      QDataStream out(&amp;buffer);</para>
            <para>      out &lt;&lt; QApplication::palette();</para>
            <para></para>
            <para></para>
            <para>Effectively, we convert the application's QPalette into a byte array. Here's how to read the data from the QByteArray:</para>
            <para></para>
            <para></para>
            <para>      QPalette palette;</para>
            <para>      QBuffer buffer(&amp;byteArray);</para>
            <para>      buffer.open(QIODevice::ReadOnly);</para>
            <para></para>
            <para>      QDataStream in(&amp;buffer);</para>
            <para>      in &gt;&gt; palette;</para>
            <para></para>
            <para></para>
            <para>QTextStream and QDataStream also provide convenience constructors that take a QByteArray and that create a QBuffer behind the scenes.</para>
            <para>QBuffer emits readyRead() when new data has arrived in the buffer. By connecting to this signal, you can use QBuffer to store temporary data before processing it. QBuffer also emits bytesWritten() every time new data has been written to the buffer.</para>
            <para></para>
            <para>See also QFile, QDataStream, QTextStream, and QByteArray.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBuffer.#ctor(Qt3DRender.Qt3DRender.QBuffer.BufferType,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBuffer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBuffer.TypeChanged">
            <summary>
            <para>Holds the buffer type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> BufferType 	type() const</para>
            <para> void 	setType(BufferType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	typeChanged(BufferType type)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBuffer.UsageChanged">
            <summary>
            <para>Holds the buffer usage.</para>
            <para>Access functions:</para>
            <para></para>
            <para> UsageType 	usage() const</para>
            <para> void 	setUsage(UsageType usage)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	usageChanged(UsageType usage)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBuffer.SyncChanged">
            <summary>
            <para>Holds the sync flag. When sync is true, this will force data created by a Qt3DRender::QBufferFunctor to also be updated on the frontend Qt3DRender::QBuffer node. By default sync is false.</para>
            <para>Note: : This has no effect if the buffer's data was set directly using the data property.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isSync() const</para>
            <para> void 	setSync(bool sync)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	syncChanged(bool sync)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QBuffer.Type">
            <summary>
            <para>Holds the buffer type.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QBuffer.Usage">
            <summary>
            <para>Holds the buffer usage.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QBuffer.Sync">
            <summary>
            <para>Holds the sync flag. When sync is true, this will force data created by a Qt3DRender::QBufferFunctor to also be updated on the frontend Qt3DRender::QBuffer node. By default sync is false.</para>
            <para>Note: : This has no effect if the buffer's data was set directly using the data property.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QBuffer.BufferType">
            <summary>
            <para>The type of the buffer.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QBuffer.UsageType">
            <summary>
            <para>The type of the usage.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractAttribute">
            <summary>
            <para>Abstract class.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractAttribute.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAbstractAttribute with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractAttribute.#ctor(Qt3DRender.Qt3DRender.QAbstractBuffer,Qt3DRender.Qt3DRender.QAbstractAttribute.DataType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QAbstractAttribute from buf of type, dataSize, count, offset, and stride with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractAttribute.Dump(System.Int32)">
            <summary>
            <para>count</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.BufferChanged">
            <summary>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractBuffer *	buffer() const</para>
            <para> void 	setBuffer(QAbstractBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QAbstractBuffer *buffer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.NameChanged">
            <summary>
            <para>Holds the name.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.DataTypeChanged">
            <summary>
            <para>Holds the data type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> DataType 	dataType() const</para>
            <para> void 	setDataType(DataType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dataTypeChanged(DataType dataType)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.DataSizeChanged">
            <summary>
            <para>Holds the data size.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	dataSize() const</para>
            <para> void 	setDataSize(uint size)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dataSizeChanged(uint dataSize)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.CountChanged">
            <summary>
            <para>Holds the count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	count() const</para>
            <para> void 	setCount(uint count)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	countChanged(uint count)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.ByteStrideChanged">
            <summary>
            <para>Holds the byte stride.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	byteStride() const</para>
            <para> void 	setByteStride(uint byteStride)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	byteStrideChanged(uint byteStride)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.ByteOffsetChanged">
            <summary>
            <para>Holds the byte offset.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	byteOffset() const</para>
            <para> void 	setByteOffset(uint byteOffset)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	byteOffsetChanged(uint byteOffset)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.DivisorChanged">
            <summary>
            <para>Holds the divisor.</para>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	divisor() const</para>
            <para> void 	setDivisor(uint divisor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	divisorChanged(uint divisor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractAttribute.AttributeTypeChanged">
            <summary>
            <para>Holds the attribute type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> AttributeType 	attributeType() const</para>
            <para> void 	setAttributeType(AttributeType attributeType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	attributeTypeChanged(AttributeType attributeType)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.Buffer">
            <summary>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractBuffer *	buffer() const</para>
            <para> void 	setBuffer(QAbstractBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QAbstractBuffer *buffer)</para>
            <para></para>
            <para></para>
            <para>Holds the buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractBuffer *	buffer() const</para>
            <para> void 	setBuffer(QAbstractBuffer *buffer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bufferChanged(QAbstractBuffer *buffer)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.Name">
            <summary>
            <para>Holds the name.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.dataType">
            <summary>
            <para>Holds the data type.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.DataSize">
            <summary>
            <para>Holds the data size.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.Count">
            <summary>
            <para>Holds the count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.ByteStride">
            <summary>
            <para>Holds the byte stride.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.ByteOffset">
            <summary>
            <para>Holds the byte offset.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.Divisor">
            <summary>
            <para>Holds the divisor.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractAttribute.attributeType">
            <summary>
            <para>Holds the attribute type.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractAttribute.AttributeType">
            <summary>
            <para>The type of the attribute.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractAttribute.DataType">
            <summary>
            <para>The type of the data.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAttribute.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAttribute.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAttribute.#ctor(Qt3DRender.Qt3DRender.QBuffer,Qt3DRender.Qt3DRender.QAbstractAttribute.DataType,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Default constructs an instance of QAttribute.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAttribute.#ctor(Qt3DRender.Qt3DRender.QBuffer,System.String,Qt3DRender.Qt3DRender.QAbstractAttribute.DataType,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Default constructs an instance of QAttribute.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QItemModelBuffer.#ctor">
            <summary>
            <para>Default constructs an instance of QItemModelBuffer.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QLayer">
            <summary>
            <para>The QLayer class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLayer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QLayer with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLayer.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QLayer.NamesChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStringList 	names() const</para>
            <para> void 	setNames(const QStringList &amp;names)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	namesChanged(const QStringList &amp;names)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderAspect.#ctor(QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QRenderAspect.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderAspect.#ctor(Qt3DRender.Qt3DRender.QRenderAspect.RenderType,QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QRenderAspect.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderTarget.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderTarget.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QWindow">
            <summary>
            <para>The QWindow class represents a window in the underlying windowing system.</para>
            </summary>
            <remarks>
            <para>A window that is supplied a parent becomes a native child window of their parent window.</para>
            <para>An application will typically use QWidget or QQuickView for its UI, and not QWindow directly. Still, it is possible to render directly to a QWindow with QBackingStore or QOpenGLContext, when wanting to keep dependencies to a minimum or when wanting to use OpenGL directly. The Raster Window Example and OpenGL Window Example are useful reference examples for how to render to a QWindow using either approach.</para>
            <para></para>
            <para>Resource Management</para>
            <para>Windows can potentially use a lot of memory. A usual measurement is width times height times color depth. A window might also include multiple buffers to support double and triple buffering, as well as depth and stencil buffers. To release a window's memory resources, call the destroy() function.</para>
            <para></para>
            <para>Content Orientation</para>
            <para>QWindow has reportContentOrientationChange() that can be used to specify the layout of the window contents in relation to the screen. The content orientation is simply a hint to the windowing system about which orientation the window contents are in. It's useful when you wish to keep the same window size, but rotate the contents instead, especially when doing rotation animations between different orientations. The windowing system might use this value to determine the layout of system popups or dialogs.</para>
            <para></para>
            <para>Visibility and Windowing System Exposure</para>
            <para>By default, the window is not visible, and you must call setVisible(true), or show() or similar to make it visible. To make a window hidden again, call setVisible(false) or hide(). The visible property describes the state the application wants the window to be in. Depending on the underlying system, a visible window might still not be shown on the screen. It could, for instance, be covered by other opaque windows or moved outside the physical area of the screen. On windowing systems that have exposure notifications, the isExposed() accessor describes whether the window should be treated as directly visible on screen. The exposeEvent() function is called whenever the windows exposure in the windowing system changes. On windowing systems that do not make this information visible to the application, isExposed() will simply return the same value as isVisible().</para>
            <para>QWindow::Visibility queried through visibility() is a convenience API combining the functions of visible() and windowState().</para>
            <para></para>
            <para>Rendering</para>
            <para>There are two Qt APIs that can be used to render content into a window, QBackingStore for rendering with a QPainter and flushing the contents to a window with type QSurface::RasterSurface, and QOpenGLContext for rendering with OpenGL to a window with type QSurface::OpenGLSurface.</para>
            <para>The application can start rendering as soon as isExposed() returns true, and can keep rendering until it isExposed() returns false. To find out when isExposed() changes, reimplement exposeEvent(). The window will always get a resize event before the first expose event.</para>
            <para></para>
            <para>Initial Geometry</para>
            <para>If the window's width and height are left uninitialized, the window will get a reasonable default geometry from the platform window. If the position is left uninitialized, then the platform window will allow the windowing system to position the window. For example on X11, the window manager usually does some kind of smart positioning to try to avoid having new windows completely obscure existing windows. However setGeometry() initializes both the position and the size, so if you want a fixed size but an automatic position, you should call resize() or setWidth() and setHeight() instead.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QWindow.Show">
            <summary>
            <para>Shows the window.</para>
            <para>This is equivalent to calling showFullScreen(), showMaximized(), or showNormal(), depending on the platform's default behavior for the window type and flags.</para>
            <para>See also showFullScreen(), showMaximized(), showNormal(), hide(), QStyleHints::showIsFullScreen(), and flags().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QWindow.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Override this to handle resize events (ev).</para>
            <para>The resize event is called whenever the window is resized in the windowing system, either directly through the windowing system acknowledging a setGeometry() or resize() request, or indirectly through the user resizing the window manually.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBoundingVolumeSpecifier.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QBoundingVolumeSpecifier with parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBoundingVolumeSpecifier.PositionAttributeChanged">
            <summary>
            <para>Holds the position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractAttribute *	positionAttribute() const</para>
            <para> void 	setPositionAttribute(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	positionAttributeChanged(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QBoundingVolumeSpecifier.PositionAttribute">
            <summary>
            <para>Holds the position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractAttribute *	positionAttribute() const</para>
            <para> void 	setPositionAttribute(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	positionAttributeChanged(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            <para></para>
            <para>Holds the position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractAttribute *	positionAttribute() const</para>
            <para> void 	setPositionAttribute(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	positionAttributeChanged(QAbstractAttribute *positionAttribute)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QGeometry.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGeometry.AddAttribute(Qt3DRender.Qt3DRender.QAbstractAttribute)">
            <summary>
            <para>Adds an attribute to this geometry.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGeometry.RemoveAttribute(Qt3DRender.Qt3DRender.QAbstractAttribute)">
            <summary>
            <para>Removes the given attribute from this geometry.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometry.VerticesPerPatchChanged">
            <summary>
            <para>Holds vertices per patch.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	verticesPerPatch() const</para>
            <para> void 	setVerticesPerPatch(int verticesPerPatch)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	verticesPerPatchChanged(int verticesPerPatch)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometry.VerticesPerPatch">
            <summary>
            <para>Holds vertices per patch.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometry.BoundingVolumeSpecifier">
            <summary>
            <para>Holds bounding volume specifier.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QBoundingVolumeSpecifier *	boundingVolumeSpecifier()</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QCuboidGeometry with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.UpdateIndices">
            <summary>
            <para>Updates indices based on mesh resolutions.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.UpdateVertices">
            <summary>
            <para>Updates vertices based on mesh resolutions.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.SetYZMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the y-z resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.SetXZMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the x-z resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidGeometry.SetXYMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the x-y resolution.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.XExtentChanged">
            <summary>
            <para>Holds the x extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	xExtent() const</para>
            <para> void 	setXExtent(float xExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xExtentChanged(float xExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.YExtentChanged">
            <summary>
            <para>Holds the y extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	yExtent() const</para>
            <para> void 	setYExtent(float yExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yExtentChanged(float yExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.ZExtentChanged">
            <summary>
            <para>Holds the z extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	zExtent() const</para>
            <para> void 	setZExtent(float zExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zExtentChanged(float zExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.YzMeshResolutionChanged">
            <summary>
            <para>Holds the y-z resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	yzMeshResolution() const</para>
            <para> void 	setYZMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yzMeshResolutionChanged(const QSize &amp;yzMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.XzMeshResolutionChanged">
            <summary>
            <para>Holds the x-z resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	xzMeshResolution() const</para>
            <para> void 	setXZMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xzMeshResolutionChanged(const QSize &amp;xzMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidGeometry.XyMeshResolutionChanged">
            <summary>
            <para>Holds the x-y resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	xyMeshResolution() const</para>
            <para> void 	setXYMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xyMeshResolutionChanged(const QSize &amp;xyMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.XExtent">
            <summary>
            <para>Holds the x extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.YExtent">
            <summary>
            <para>Holds the y extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.ZExtent">
            <summary>
            <para>Holds the z extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.YzMeshResolution">
            <summary>
            <para>Holds the y-z resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.XyMeshResolution">
            <summary>
            <para>Holds the x-y resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.XzMeshResolution">
            <summary>
            <para>Holds the x-z resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.PositionAttribute">
            <summary>
            <para>Holds the geometry position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	positionAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.NormalAttribute">
            <summary>
            <para>Holds the geometry normal attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	normalAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.TexCoordAttribute">
            <summary>
            <para>Holds the geometry texture coordinate attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	texCoordAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.TangentAttribute">
            <summary>
            <para>Holds the geometry tangent attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	tangentAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidGeometry.IndexAttribute">
            <summary>
            <para>Holds the geometry index attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	indexAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGeometryRenderer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QGeometryRenderer.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.InstanceCountChanged">
            <summary>
            <para>Holds the instance count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	instanceCount() const</para>
            <para> void 	setInstanceCount(int instanceCount)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	instanceCountChanged(int instanceCount)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveCountChanged">
            <summary>
            <para>Holds the primitive count.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	primitiveCount() const</para>
            <para> void 	setPrimitiveCount(int primitiveCount)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primitiveCountChanged(int primitiveCount)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.BaseVertexChanged">
            <summary>
            <para>Holds the base vertex.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	baseVertex() const</para>
            <para> void 	setBaseVertex(int baseVertex)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	baseVertexChanged(int baseVertex)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.BaseInstanceChanged">
            <summary>
            <para>Holds the base instance.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	baseInstance() const</para>
            <para> void 	setBaseInstance(int baseInstance)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	baseInstanceChanged(int baseInstance)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.RestartIndexChanged">
            <summary>
            <para>Holds the restart index.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	restartIndex() const</para>
            <para> void 	setRestartIndex(int index)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	restartIndexChanged(int restartIndex)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveRestartChanged">
            <summary>
            <para>Holds the primitive restart flag.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	primitiveRestart() const</para>
            <para> void 	setPrimitiveRestart(bool enabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primitiveRestartChanged(bool primitiveRestart)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.GeometryChanged">
            <summary>
            <para>Holds the geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QGeometry *	geometry() const</para>
            <para> void 	setGeometry(QGeometry *geometry)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryChanged(QGeometry *geometry)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveTypeChanged">
            <summary>
            <para>Holds the primitive type.</para>
            <para>Access functions:</para>
            <para></para>
            <para> PrimitiveType 	primitiveType() const</para>
            <para> void 	setPrimitiveType(PrimitiveType primitiveType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primitiveTypeChanged(PrimitiveType primitiveType)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.InstanceCount">
            <summary>
            <para>Holds the instance count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveCount">
            <summary>
            <para>Holds the primitive count.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.BaseVertex">
            <summary>
            <para>Holds the base vertex.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.BaseInstance">
            <summary>
            <para>Holds the base instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.RestartIndex">
            <summary>
            <para>Holds the restart index.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveRestart">
            <summary>
            <para>Holds the primitive restart flag.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.Geometry">
            <summary>
            <para>Holds the geometry.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QGeometryRenderer.primitiveType">
            <summary>
            <para>Holds the primitive type.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QGeometryRenderer.PrimitiveType">
            <summary>
            <para>The type of the primitive.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QCuboidMesh">
            <summary>
            <para>A cube mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCuboidMesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidMesh.SetYZMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the y-z resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidMesh.SetXZMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the x-z resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCuboidMesh.SetXYMeshResolution(QtCore.QSize)">
            <summary>
            <para>Holds the x-y resolution.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.XExtentChanged">
            <summary>
            <para>Holds the x extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	xExtent() const</para>
            <para> void 	setXExtent(float xExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xExtentChanged(float xExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.YExtentChanged">
            <summary>
            <para>Holds the y extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	yExtent() const</para>
            <para> void 	setYExtent(float yExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yExtentChanged(float yExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.ZExtentChanged">
            <summary>
            <para>Holds the z extent.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	zExtent() const</para>
            <para> void 	setZExtent(float zExtent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zExtentChanged(float zExtent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.YzMeshResolutionChanged">
            <summary>
            <para>Holds the y-z resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	yzMeshResolution() const</para>
            <para> void 	setYZMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yzMeshResolutionChanged(const QSize &amp;yzMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.XzMeshResolutionChanged">
            <summary>
            <para>Holds the x-z resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	xzMeshResolution() const</para>
            <para> void 	setXZMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xzMeshResolutionChanged(const QSize &amp;xzMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCuboidMesh.XyMeshResolutionChanged">
            <summary>
            <para>Holds the x-y resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	xyMeshResolution() const</para>
            <para> void 	setXYMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xyMeshResolutionChanged(const QSize &amp;xyMeshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.XExtent">
            <summary>
            <para>Holds the x extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.YExtent">
            <summary>
            <para>Holds the y extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.ZExtent">
            <summary>
            <para>Holds the z extent.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.YzMeshResolution">
            <summary>
            <para>Holds the y-z resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.XzMeshResolution">
            <summary>
            <para>Holds the x-z resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCuboidMesh.XyMeshResolution">
            <summary>
            <para>Holds the x-y resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCylinderGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QCylinderMesh with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCylinderGeometry.UpdateVertices">
            <summary>
            <para>Updates the vertices based on rings and slices.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCylinderGeometry.UpdateIndices">
            <summary>
            <para>Updates the indices based on rings and slices.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderGeometry.RadiusChanged">
            <summary>
            <para>Holds the radius of the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderGeometry.RingsChanged">
            <summary>
            <para>Holds the number of rings in the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderGeometry.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderGeometry.LengthChanged">
            <summary>
            <para>Holds the length of the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	length() const</para>
            <para> void 	setLength(float length)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	lengthChanged(float length)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.Rings">
            <summary>
            <para>Holds the number of rings in the cylinder.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.Slices">
            <summary>
            <para>Holds the number of slices in the cylinder.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.Radius">
            <summary>
            <para>Holds the radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.Length">
            <summary>
            <para>Holds the length of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.PositionAttribute">
            <summary>
            <para>Holds the geometry position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	positionAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.NormalAttribute">
            <summary>
            <para>Holds the geometry normal attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	normalAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.TexCoordAttribute">
            <summary>
            <para>Holds the geometry texture coordinate attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	texCoordAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderGeometry.IndexAttribute">
            <summary>
            <para>Holds the geometry index attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	indexAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QCylinderMesh">
            <summary>
            <para>A cylindrical mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCylinderMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCylinderMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderMesh.RadiusChanged">
            <summary>
            <para>Holds the radius of the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderMesh.RingsChanged">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderMesh.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCylinderMesh.LengthChanged">
            <summary>
            <para>Holds the length of the cylinder.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	length() const</para>
            <para> void 	setLength(float length)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	lengthChanged(float length)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderMesh.Rings">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderMesh.Slices">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderMesh.Radius">
            <summary>
            <para>Holds the radius of the cylinder.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QCylinderMesh.Length">
            <summary>
            <para>Holds the length of the cylinder.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QMesh">
            <summary>
            <para>A custom mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QMesh.SourceChanged">
            <summary>
            <para>Holds the source url to the file containing the custom mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;source)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QMesh.SubMeshChanged">
            <summary>
            <para>Holds the subMesh for the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	subMesh() const</para>
            <para> void 	setSubMesh(const QString &amp;subMesh)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	subMeshChanged(const QString &amp;subMesh)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QMesh.Source">
            <summary>
            <para>Holds the source url to the file containing the custom mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QMesh.SubMesh">
            <summary>
            <para>Holds the subMesh for the mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPlaneGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPlaneGeometry with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPlaneGeometry.UpdateVertices">
            <summary>
            <para>Updates vertices based on resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPlaneGeometry.UpdateIndices">
            <summary>
            <para>Updates indices based on resolution.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneGeometry.ResolutionChanged">
            <summary>
            <para>Holds the plane resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	resolution() const</para>
            <para> void 	setResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	resolutionChanged(const QSize &amp;resolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneGeometry.WidthChanged">
            <summary>
            <para>Holds the plane width.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	width() const</para>
            <para> void 	setWidth(float width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(float width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneGeometry.HeightChanged">
            <summary>
            <para>Holds the plane height.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	height() const</para>
            <para> void 	setHeight(float height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(float height)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.Resolution">
            <summary>
            <para>Holds the plane resolution.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.Width">
            <summary>
            <para>Holds the plane width.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.Height">
            <summary>
            <para>Holds the plane height.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.PositionAttribute">
            <summary>
            <para>Holds the geometry position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	positionAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.NormalAttribute">
            <summary>
            <para>Holds the geometry normal attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	normalAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.TexCoordAttribute">
            <summary>
            <para>Holds the geometry texture coordinate attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	texCoordAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.TangentAttribute">
            <summary>
            <para>Holds the geometry tangent attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	tangentAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneGeometry.IndexAttribute">
            <summary>
            <para>Holds the geometry index attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	indexAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QPlaneMesh">
            <summary>
            <para>A square planar mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPlaneMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QPlaneMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneMesh.MeshResolutionChanged">
            <summary>
            <para>Holds the plane resolution.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSize 	meshResolution() const</para>
            <para> void 	setMeshResolution(const QSize &amp;resolution)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	meshResolutionChanged(const QSize &amp;meshResolution)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneMesh.WidthChanged">
            <summary>
            <para>Holds the plane width.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	width() const</para>
            <para> void 	setWidth(float width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(float width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPlaneMesh.HeightChanged">
            <summary>
            <para>Holds the plane height.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	height() const</para>
            <para> void 	setHeight(float height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(float height)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneMesh.Width">
            <summary>
            <para>Holds the plane width.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneMesh.Height">
            <summary>
            <para>Holds the plane height.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPlaneMesh.MeshResolution">
            <summary>
            <para>Holds the plane resolution.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSphereGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QSphereGeometry with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSphereGeometry.UpdateVertices">
            <summary>
            <para>Updates vertices based on rings and slices.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSphereGeometry.UpdateIndices">
            <summary>
            <para>Updates indices based on rings and slices.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereGeometry.RadiusChanged">
            <summary>
            <para>Holds the radius of the sphere.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereGeometry.RingsChanged">
            <summary>
            <para>Holds the number of rings in the sphere.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereGeometry.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the sphere.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereGeometry.GenerateTangentsChanged">
            <summary>
            <para>Holds the value of the automatic tangent generation flag.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	generateTangents() const</para>
            <para> void 	setGenerateTangents(bool gen)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	generateTangentsChanged(bool generateTangents)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.Rings">
            <summary>
            <para>Holds the number of rings in the sphere.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.Slices">
            <summary>
            <para>Holds the number of slices in the sphere.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.Radius">
            <summary>
            <para>Holds the radius of the sphere.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.GenerateTangents">
            <summary>
            <para>Holds the value of the automatic tangent generation flag.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.PositionAttribute">
            <summary>
            <para>Holds the geometry position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	positionAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.NormalAttribute">
            <summary>
            <para>Holds the geometry normal attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	normalAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.TexCoordAttribute">
            <summary>
            <para>Holds the geometry texture coordinate attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	texCoordAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.TangentAttribute">
            <summary>
            <para>Holds the geometry tangent attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	tangentAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereGeometry.IndexAttribute">
            <summary>
            <para>Holds the geometry index attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	indexAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QSphereMesh">
            <summary>
            <para>A spherical mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSphereMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSphereMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereMesh.RadiusChanged">
            <summary>
            <para>Holds the radius of the sphere.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereMesh.RingsChanged">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereMesh.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSphereMesh.GenerateTangentsChanged">
            <summary>
            <para>Holds the value of the automatic tangent generation flag.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	generateTangents() const</para>
            <para> void 	setGenerateTangents(bool gen)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	generateTangentsChanged(bool generateTangents)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereMesh.Rings">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereMesh.Slices">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereMesh.Radius">
            <summary>
            <para>Holds the radius of the sphere.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QSphereMesh.GenerateTangents">
            <summary>
            <para>Holds the value of the automatic tangent generation flag.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTorusGeometry.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QTorusGeometry with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTorusGeometry.UpdateVertices">
            <summary>
            <para>Updates vertices based on rings and slices.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTorusGeometry.UpdateIndices">
            <summary>
            <para>Updates indices based on rings and slices.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusGeometry.RadiusChanged">
            <summary>
            <para>Holds the outer radius of the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusGeometry.RingsChanged">
            <summary>
            <para>Holds the number of rings in the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusGeometry.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusGeometry.MinorRadiusChanged">
            <summary>
            <para>Holds the inner radius of the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	minorRadius() const</para>
            <para> void 	setMinorRadius(float minorRadius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minorRadiusChanged(float minorRadius)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.Rings">
            <summary>
            <para>Holds the number of rings in the torus.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.Slices">
            <summary>
            <para>Holds the number of slices in the torus.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.Radius">
            <summary>
            <para>Holds the outer radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.MinorRadius">
            <summary>
            <para>Holds the inner radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.PositionAttribute">
            <summary>
            <para>Holds the geometry position attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	positionAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.NormalAttribute">
            <summary>
            <para>Holds the geometry normal attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	normalAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.TexCoordAttribute">
            <summary>
            <para>Holds the geometry texture coordinate attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	texCoordAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusGeometry.IndexAttribute">
            <summary>
            <para>Holds the geometry index attribute.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAttribute *	indexAttribute() const</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTorusMesh">
            <summary>
            <para>A custom mesh.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTorusMesh.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTorusMesh.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusMesh.RadiusChanged">
            <summary>
            <para>Holds the outer radius of the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	radius() const</para>
            <para> void 	setRadius(float radius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	radiusChanged(float radius)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusMesh.RingsChanged">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	rings() const</para>
            <para> void 	setRings(int rings)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	ringsChanged(int rings)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusMesh.SlicesChanged">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	slices() const</para>
            <para> void 	setSlices(int slices)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	slicesChanged(int slices)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTorusMesh.MinorRadiusChanged">
            <summary>
            <para>Holds the inner radius of the torus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	minorRadius() const</para>
            <para> void 	setMinorRadius(float minorRadius)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minorRadiusChanged(float minorRadius)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusMesh.Rings">
            <summary>
            <para>Holds the number of rings in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusMesh.Slices">
            <summary>
            <para>Holds the number of slices in the mesh.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusMesh.Radius">
            <summary>
            <para>Holds the outer radius of the torus.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTorusMesh.MinorRadius">
            <summary>
            <para>Holds the inner radius of the torus.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractSceneLoader.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractSceneLoader.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractSceneLoader.SourceChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractSceneLoader.StatusChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractSceneParser.#ctor">
            <summary>
            <para>Default constructs an instance of QAbstractSceneParser.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractSceneParser.ParserStatusChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> ParserStatus 	parserStatus() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parserStatusChanged(ParserStatus parserStatus)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractSceneParser.ErrorsChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStringList 	errors() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	errorsChanged(const QStringList &amp;errors)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSceneLoader.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QSceneLoader.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSceneParserPlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QSceneParserPlugin.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QShaderData">
            <summary>
            <para>Provides a way of specifying values of a Uniform Block or a shader structure.</para>
            </summary>
            <remarks>
            <para>Note: When subclassing and adding properties to QShaderData, note that if you need to nest an inner Qt3DRender::QShaderData, the data type of the property should be Qt3DRender::QShaderData* instead of the name of your subclass.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QShaderData.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QShaderData.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QLight.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QLight with the given parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QLight.TypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Type 	type() const</para>
            <para> void 	setType(Type type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	typeChanged(Type type)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QLight.ColorChanged">
            <summary>
            <para>Holds the current QLight color.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QColor 	color() const</para>
            <para> void 	setColor(const QColor &amp;color)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	colorChanged(const QColor &amp;color)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QLight.IntensityChanged">
            <summary>
            <para>Holds the current QLight intensity.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	intensity() const</para>
            <para> void 	setIntensity(float intensity)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	intensityChanged(float intensity)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QLight.Color">
            <summary>
            <para>Holds the current QLight color.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QLight.Intensity">
            <summary>
            <para>Holds the current QLight intensity.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDirectionalLight.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDirectionalLight.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDirectionalLight.DirectionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	direction() const</para>
            <para> void 	setDirection(const QVector3D &amp;direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	directionChanged(const QVector3D &amp;direction)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPointLight.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPointLight with the specified parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPointLight.AttenuationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	attenuation() const</para>
            <para> void 	setAttenuation(const QVector3D &amp;value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	attenuationChanged(const QVector3D &amp;attenuation)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPointLight.ConstantAttenuation">
            <summary>
            <para>See also setConstantAttenuation().</para>
            <para></para>
            <para>See also constantAttenuation().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPointLight.LinearAttenuation">
            <summary>
            <para>See also setLinearAttenuation().</para>
            <para></para>
            <para>See also linearAttenuation().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QPointLight.QuadraticAttenuation">
            <summary>
            <para>See also setQuadraticAttenuation().</para>
            <para></para>
            <para>See also quadraticAttenuation().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSpotLight.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QSpotLight with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QSpotLight.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSpotLight.DirectionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	direction() const</para>
            <para> void 	setDirection(const QVector3D &amp;direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	directionChanged(const QVector3D &amp;direction)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QSpotLight.CutOffAngleChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	cutOffAngle() const</para>
            <para> void 	setCutOffAngle(float cutOffAngle)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cutOffAngleChanged(float cutOffAngle)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAnnotation">
            <summary>
            <para>The QAnnotation class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAnnotation.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAnnotation.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAnnotation.NameChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;customType)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAnnotation.ValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	value() const</para>
            <para> void 	setValue(const QVariant &amp;value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(const QVariant &amp;value)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QEffect.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QEffect.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QGraphicsApiFilter">
            <summary>
            <para>The QGraphicsApiFilter class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGraphicsApiFilter.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QGraphicsApiFilter with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QGraphicsApiFilter.Copy(Qt3DRender.Qt3DRender.QGraphicsApiFilter)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.ApiChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Api 	api() const</para>
            <para> void 	setApi(Api api)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	apiChanged(Api api)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.ProfileChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Profile 	profile() const</para>
            <para> void 	setProfile(Profile profile)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	profileChanged(Profile profile)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.MinorVersionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	minorVersion() const</para>
            <para> void 	setMinorVersion(int minorVersion)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minorVersionChanged(int minorVersion)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.MajorVersionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	majorVersion() const</para>
            <para> void 	setMajorVersion(int majorVersion)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	majorVersionChanged(int majorVersion)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.ExtensionsChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStringList 	extensions() const</para>
            <para> void 	setExtensions(const QStringList &amp;extensions)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	extensionsChanged(const QStringList &amp;extensions)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.VendorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	vendor() const</para>
            <para> void 	setVendor(const QString &amp;vendor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	vendorChanged(const QString &amp;vendor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QGraphicsApiFilter.GraphicsApiFilterChanged">
            <summary>
            <para>This signal is emitted when the value of any property is changed.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameter.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameter.#ctor(System.String,QtCore.QVariant,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameter.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameter.#ctor(System.String,Qt3DRender.Qt3DRender.QAbstractTextureProvider,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameter.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QParameter.ValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	value() const</para>
            <para> void 	setValue(const QVariant &amp;dv)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(const QVariant &amp;value)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QParameter.NameChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	name() const</para>
            <para> void 	setName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	nameChanged(const QString &amp;name)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QParameterMapping">
            <summary>
            <para>The QParameterMapping class provides ...</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameterMapping.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QParameterMapping with the specified parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameterMapping.#ctor(System.String,System.String,Qt3DRender.Qt3DRender.QParameterMapping.Binding,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QParameterMapping.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QParameterMapping.Copy(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Copies the ref instance into this one.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QParameterMapping.ParameterNameChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	parameterName() const</para>
            <para> void 	setParameterName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parameterNameChanged(const QString &amp;parameterName)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QParameterMapping.ShaderVariableNameChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	shaderVariableName() const</para>
            <para> void 	setShaderVariableName(const QString &amp;name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderVariableNameChanged(const QString &amp;shaderVariableName)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QParameterMapping.BindingTypeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Binding 	bindingType() const</para>
            <para> void 	setBindingType(Binding type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bindingTypeChanged(Binding bindingType)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QShaderProgram.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QShaderProgram.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QShaderProgram.SetShaderCode(Qt3DRender.Qt3DRender.QShaderProgram.ShaderType,QtCore.QByteArray)">
            <summary>
            <para>See also shaderCode().</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QShaderProgram.ShaderCode(Qt3DRender.Qt3DRender.QShaderProgram.ShaderType)">
            <summary>
            <para>See also setShaderCode().</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.VertexShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	vertexShaderCode() const</para>
            <para> void 	setVertexShaderCode(const QByteArray &amp;vertexShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	vertexShaderCodeChanged(const QByteArray &amp;vertexShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.TessellationControlShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	tessellationControlShaderCode() const</para>
            <para> void 	setTessellationControlShaderCode(const QByteArray &amp;tessellationControlShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	tessellationControlShaderCodeChanged(const QByteArray &amp;tessellationControlShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.TessellationEvaluationShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	tessellationEvaluationShaderCode() const</para>
            <para> void 	setTessellationEvaluationShaderCode(const QByteArray &amp;tessellationEvaluationShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	tessellationEvaluationShaderCodeChanged(const QByteArray &amp;tessellationEvaluationShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.GeometryShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	geometryShaderCode() const</para>
            <para> void 	setGeometryShaderCode(const QByteArray &amp;geometryShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryShaderCodeChanged(const QByteArray &amp;geometryShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.FragmentShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	fragmentShaderCode() const</para>
            <para> void 	setFragmentShaderCode(const QByteArray &amp;fragmentShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	fragmentShaderCodeChanged(const QByteArray &amp;fragmentShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QShaderProgram.ComputeShaderCodeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	computeShaderCode() const</para>
            <para> void 	setComputeShaderCode(const QByteArray &amp;computeShaderCode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	computeShaderCodeChanged(const QByteArray &amp;computeShaderCode)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QRenderPass.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QRenderPass.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QRenderPass.ShaderProgramChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QShaderProgram *	shaderProgram() const</para>
            <para> void 	setShaderProgram(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderProgramChanged(QShaderProgram *shaderProgram)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QRenderPass.ShaderProgram">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QShaderProgram *	shaderProgram() const</para>
            <para> void 	setShaderProgram(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderProgramChanged(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> QShaderProgram *	shaderProgram() const</para>
            <para> void 	setShaderProgram(QShaderProgram *shaderProgram)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shaderProgramChanged(QShaderProgram *shaderProgram)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTechnique.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTechnique.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTechnique.GraphicsApiFilter">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QGraphicsApiFilter *	graphicsApiFilter()</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QObjectPicker">
            <summary>
            <para>The QObjectPicker class instantiates a component that can be used to interact with a QEntity by a process known as picking.</para>
            </summary>
            <remarks>
            <para>The signals pressed(), released(), clicked(), entered(), and exited() are emitted when the bounding volume defined by the pickAttribute property intersects with a ray.</para>
            <para>Note: Instances of this component shouldn't be shared, not respecting that condition will most likely result in undefined behavior.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QObjectPicker.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QObjectPicker.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.Pressed">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.Released">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.Clicked">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.Entered">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.Exited">
            <summary>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.HoverEnabledChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	hoverEnabled() const</para>
            <para> void 	setHoverEnabled(bool hoverEnabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	hoverEnabledChanged(bool hoverEnabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.PressedChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isPressed() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pressedChanged(bool pressed)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QObjectPicker.ContainsMouseChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	containsMouse() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	containsMouseChanged(bool containsMouse)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QObjectPicker.IsPressed">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isPressed() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	pressedChanged(bool pressed)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPickEvent.#ctor">
            <summary>
            <para>Default constructs an instance of QPickEvent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPickEvent.AcceptedChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAccepted() const</para>
            <para> void 	setAccepted(bool accepted)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	acceptedChanged(bool accepted)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAlphaCoverage.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAlphaCoverage.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAlphaTest.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAlphaTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAlphaTest.FuncChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> AlphaFunc 	func() const</para>
            <para> void 	setFunc(AlphaFunc func)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	funcChanged(AlphaFunc func)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAlphaTest.ClampChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	clamp() const</para>
            <para> void 	setClamp(float clamp)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	clampChanged(float clamp)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBlendEquation.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendEquation.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBlendEquation.ModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> BlendMode 	mode() const</para>
            <para> void 	setMode(BlendMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	modeChanged(BlendMode mode)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QBlendState">
            <summary>
            <para>Encapsulates blending information.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBlendState.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendState.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBlendState.#ctor(Qt3DRender.Qt3DRender.QRenderState.Type,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendState.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBlendState.SrcRGBChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	srcRGB() const</para>
            <para> void 	setSrcRGB(Blending srcRGB)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	srcRGBChanged(Blending srcRGB)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBlendState.SrcAlphaChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	srcAlpha() const</para>
            <para> void 	setSrcAlpha(Blending srcAlpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	srcAlphaChanged(Blending srcAlpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBlendState.DstRGBChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	dstRGB() const</para>
            <para> void 	setDstRGB(Blending dstRGB)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dstRGBChanged(Blending dstRGB)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QBlendState.DstAlphaChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Blending 	dstAlpha() const</para>
            <para> void 	setDstAlpha(Blending dstAlpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	dstAlphaChanged(Blending dstAlpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QBlendStateSeparate">
            <summary>
            <para>Encapsulates blending information.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QBlendStateSeparate.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QBlendStateSeparate.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QClipPlane">
            <summary>
            <para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance</para>
            </summary>
            <remarks>
            <para>By default, OpenGL supports up to 8 additional clipping planes. Qt3DCore::QClipPlane allows to enable one of these additional planes. These planes can then be manipulated in the shaders using gl_ClipDistance[i] where i varies between 0 and 8.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QClipPlane.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QClipPlane.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QClipPlane.PlaneChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	plane() const</para>
            <para> void 	setPlane(int plane)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	planeChanged(int plane)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QColorMask">
            <summary>
            <para>Allows specifying which color components should be written to the currently bound frame buffer.</para>
            </summary>
            <remarks>
            <para>By default, the property for each color component (red, green, blue, alpha) is set to true which means they will be written to the frame buffer. Setting any of the color component to false will prevent it from being written into the frame buffer.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QColorMask.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QColorMask.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QColorMask.RedChanged">
            <summary>
            <para>Holds whether the red color component should be written to the frame buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isRed() const</para>
            <para> void 	setRed(bool red)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	redChanged(bool red)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QColorMask.GreenChanged">
            <summary>
            <para>Holds whether the green color component should be written to the frame buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isGreen() const</para>
            <para> void 	setGreen(bool green)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	greenChanged(bool green)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QColorMask.BlueChanged">
            <summary>
            <para>Holds whether the blue color component should be written to the frame buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isBlue() const</para>
            <para> void 	setBlue(bool blue)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	blueChanged(bool blue)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QColorMask.AlphaChanged">
            <summary>
            <para>Holds whether the alpha component should be written to the frame buffer.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAlpha() const</para>
            <para> void 	setAlpha(bool alpha)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	alphaChanged(bool alpha)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QColorMask.Red">
            <summary>
            <para>Holds whether the red color component should be written to the frame buffer.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QColorMask.Green">
            <summary>
            <para>Holds whether the green color component should be written to the frame buffer.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QColorMask.Blue">
            <summary>
            <para>Holds whether the blue color component should be written to the frame buffer.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QColorMask.Alpha">
            <summary>
            <para>Holds whether the alpha component should be written to the frame buffer.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QCullFace.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QCullFace.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QCullFace.ModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> CullingMode 	mode() const</para>
            <para> void 	setMode(CullingMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	modeChanged(CullingMode mode)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDepthMask.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDepthMask.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDepthMask.MaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	mask() const</para>
            <para> void 	setMask(bool mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maskChanged(bool mask)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QDepthMask.Mask">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	mask() const</para>
            <para> void 	setMask(bool mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maskChanged(bool mask)</para>
            <para></para>
            <para></para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	mask() const</para>
            <para> void 	setMask(bool mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maskChanged(bool mask)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDepthTest.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDepthTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QDepthTest.FuncChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> DepthFunc 	func() const</para>
            <para> void 	setFunc(DepthFunc func)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	funcChanged(DepthFunc func)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QDithering.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QDithering.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QFrontFace.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QFrontFace.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QFrontFace.DirectionChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> FaceDir 	direction() const</para>
            <para> void 	setDirection(FaceDir direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	directionChanged(FaceDir direction)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QPointSize">
            <summary>
            <para>Specifies the size of rasterized points. May either be set statically or by shader programs.</para>
            </summary>
            <remarks>
            <para>When using StaticValue, the value is set using glPointSize(), if available. When using Programmable, gl_PointSize must be set within shader programs, the value provided to this RenderState is ignored in that case.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPointSize.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QPointSize.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPointSize.SpecificationChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> Specification 	specification() const</para>
            <para> void 	setSpecification(Specification spec)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	specificationChanged(Specification spec)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPointSize.ValueChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	value() const</para>
            <para> void 	setValue(float value)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(float value)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QPolygonOffset.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QPolygonOffset.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPolygonOffset.FactorChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	factor() const</para>
            <para> void 	setFactor(float factor)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	factorChanged(float factor)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QPolygonOffset.UnitsChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> float 	units() const</para>
            <para> void 	setUnits(float units)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	unitsChanged(float units)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QScissorTest.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QScissorTest.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QScissorTest.LeftChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	left() const</para>
            <para> void 	setLeft(int left)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	leftChanged(int left)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QScissorTest.BottomChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	bottom() const</para>
            <para> void 	setBottom(int bottom)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	bottomChanged(int bottom)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QScissorTest.WidthChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	width() const</para>
            <para> void 	setWidth(int width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(int width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QScissorTest.HeightChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	height() const</para>
            <para> void 	setHeight(int height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(int height)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStencilMask.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilMask.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilMask.FrontMaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	frontMask() const</para>
            <para> void 	setFrontMask(uint mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	frontMaskChanged(uint frontMask)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilMask.BackMaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	backMask() const</para>
            <para> void 	setBackMask(uint mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	backMaskChanged(uint backMask)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStencilOp.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilOp.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QStencilOp.Front">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilOpSeparate *	front() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QStencilOp.Back">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilOpSeparate *	back() const</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilOpSeparate.StencilFailChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilOp 	stencilFail() const</para>
            <para> void 	setStencilFail(StencilOp op)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stencilFailChanged(StencilOp stencilFail)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilOpSeparate.DepthFailChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilOp 	depthFail() const</para>
            <para> void 	setDepthFail(StencilOp op)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthFailChanged(StencilOp depthFail)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilOpSeparate.StencilDepthPassChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilOp 	stencilDepthPass() const</para>
            <para> void 	setStencilDepthPass(StencilOp op)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stencilDepthPassChanged(StencilOp stencilDepthPass)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilOpSeparate.FaceModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilFaceMode 	faceMode() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceModeChanged(StencilFaceMode faceMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStencilTest.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QStencilTest.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QStencilTest.Front">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilTestSeparate *	front() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QStencilTest.Back">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> QStencilTestSeparate *	back() const</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QStencilTestSeparate.SetRef(System.Int32)">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	ref() const</para>
            <para> void 	setRef(int ref)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	refChanged(int ref)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilTestSeparate.MaskChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> uint 	mask() const</para>
            <para> void 	setMask(uint mask)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maskChanged(uint mask)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilTestSeparate.FuncChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilFunc 	func() const</para>
            <para> void 	setFunc(StencilFunc func)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	funcChanged(StencilFunc func)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilTestSeparate.RefChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	ref() const</para>
            <para> void 	setRef(int ref)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	refChanged(int ref)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QStencilTestSeparate.FaceModeChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> StencilFaceMode 	faceMode() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	faceModeChanged(StencilFaceMode faceMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QStencilTestSeparate.Ref">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> int 	ref() const</para>
            <para> void 	setRef(int ref)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	refChanged(int ref)</para>
            <para></para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexImageData.#ctor">
            <summary>
            <para>Default constructs an instance of QTexImageData.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexImageData.SetData(QtCore.QByteArray,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType)">
            <summary>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTexImageData.Data">
            <summary>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractTextureProvider">
            <summary>
            <para>A base class to be used to provide textures.</para>
            </summary>
            <remarks>
            <para>The QAbstractTextureProvider class shouldn't be used directly but rather through one of its subclasses. Each subclass implements a given texture target (2D, 2DArray, 3D, CubeMap ...) Each subclass provides a set of functors for each layer, cube map face and mipmap level. In turn the backend uses those functor to properly fill a corresponding OpenGL texture with data.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureProvider.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTextureProvider.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureProvider.#ctor(Qt3DRender.Qt3DRender.QAbstractTextureProvider.Target,Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTextureProvider.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureProvider.AddTextureImage(Qt3DRender.Qt3DRender.QAbstractTextureImage)">
            <summary>
            <para>Adds a new Qt3DCore::QAbstractTextureImage textureImage to the texture provider.</para>
            <para>Note: Qt3DRender::QAbstractTextureImage should never be shared between multiple Qt3DRender::QAbstractTextureProvider instances.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureProvider.RemoveTextureImage(Qt3DRender.Qt3DRender.QAbstractTextureImage)">
            <summary>
            <para>Removes a Qt3DCore::QAbstractTextureImage textureImage from the texture provider.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureProvider.SetSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the size of the texture provider to width w, height h and depth d.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.FormatChanged">
            <summary>
            <para>Holds the format of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> TextureFormat 	format() const</para>
            <para> void 	setFormat(TextureFormat format)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	formatChanged(TextureFormat format)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.StatusChanged">
            <summary>
            <para>Holds the current status of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Status 	status() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	statusChanged(Status status)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.GenerateMipMapsChanged">
            <summary>
            <para>Holds whether the texture provider should auto generate mipmaps.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	generateMipMaps() const</para>
            <para> void 	setGenerateMipMaps(bool gen)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	generateMipMapsChanged(bool generateMipMaps)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.WidthChanged">
            <summary>
            <para>Holds the width of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	width() const</para>
            <para> void 	setWidth(int width)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(int width)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.HeightChanged">
            <summary>
            <para>Holds the height of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	height() const</para>
            <para> void 	setHeight(int height)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(int height)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.DepthChanged">
            <summary>
            <para>Holds the depth of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	depth() const</para>
            <para> void 	setDepth(int depth)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	depthChanged(int depth)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MagnificationFilterChanged">
            <summary>
            <para>Holds the magnification filter of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Filter 	magnificationFilter() const</para>
            <para> void 	setMagnificationFilter(Filter f)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	magnificationFilterChanged(Filter magnificationFilter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MinificationFilterChanged">
            <summary>
            <para>Holds the minification filter of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Filter 	minificationFilter() const</para>
            <para> void 	setMinificationFilter(Filter f)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minificationFilterChanged(Filter minificationFilter)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MaximumAnisotropyChanged">
            <summary>
            <para>Holds the maximum anisotropy of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	maximumAnisotropy() const</para>
            <para> void 	setMaximumAnisotropy(float anisotropy)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumAnisotropyChanged(float maximumAnisotropy)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.ComparisonFunctionChanged">
            <summary>
            <para>Holds the comparison function of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> ComparisonFunction 	comparisonFunction() const</para>
            <para> void 	setComparisonFunction(ComparisonFunction function)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	comparisonFunctionChanged(ComparisonFunction comparisonFunction)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.ComparisonModeChanged">
            <summary>
            <para>Holds the comparison mode of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> ComparisonMode 	comparisonMode() const</para>
            <para> void 	setComparisonMode(ComparisonMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	comparisonModeChanged(ComparisonMode comparisonMode)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MaximumLayersChanged">
            <summary>
            <para>Holds the maximum layer count of the texture provider. By default, the maximum layer count is 1.</para>
            <para>Note: this has a meaning only for texture providers that have 3D or array target formats.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	maximumLayers() const</para>
            <para> void 	setMaximumLayers(int maximumLayers)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumLayersChanged(int maximumLayers)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureProvider.UniqueChanged">
            <summary>
            <para>Sets whether this texture provider should be unique by reading unique. By default this is false.</para>
            <para>By default the renderer based on the attributes of texture providers is able to compare them and detect duplicates (same size, format and image sources) and smartly avoid unnecessary computations. In some cases however (texture providers used as Qt3DCore::RenderTarget attachments) you don't want the renderer to perform these comparison, in which case you can set is unique to true.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isUnique() const</para>
            <para> void 	setUnique(bool unique)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	uniqueChanged(bool unique)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.WrapMode">
            <summary>
            <para>Holds the wrap mode of the texture provider.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QTextureWrapMode *	wrapMode()</para>
            <para></para>
            <para></para>
            <para>See also wrapMode().</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.Format">
            <summary>
            <para>Holds the format of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.GenerateMipMaps">
            <summary>
            <para>Holds whether the texture provider should auto generate mipmaps.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.Width">
            <summary>
            <para>Holds the width of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.Height">
            <summary>
            <para>Holds the height of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.Depth">
            <summary>
            <para>Holds the depth of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MinificationFilter">
            <summary>
            <para>Holds the minification filter of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MagnificationFilter">
            <summary>
            <para>Holds the magnification filter of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MaximumAnisotropy">
            <summary>
            <para>Holds the maximum anisotropy of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.comparisonFunction">
            <summary>
            <para>Holds the comparison function of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.comparisonMode">
            <summary>
            <para>Holds the comparison mode of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.MaximumLayers">
            <summary>
            <para>Holds the maximum layer count of the texture provider. By default, the maximum layer count is 1.</para>
            <para>Note: this has a meaning only for texture providers that have 3D or array target formats.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.Unique">
            <summary>
            <para>Sets whether this texture provider should be unique by reading unique. By default this is false.</para>
            <para>By default the renderer based on the attributes of texture providers is able to compare them and detect duplicates (same size, format and image sources) and smartly avoid unnecessary computations. In some cases however (texture providers used as Qt3DCore::RenderTarget attachments) you don't want the renderer to perform these comparison, in which case you can set is unique to true.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.status">
            <summary>
            <para>Holds the current status of the texture provider.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureProvider.target">
            <summary>
            <para>Holds the target format of the texture provider.</para>
            <para>Note: The target format can only be set once.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QAbstractTextureImage">
            <summary>
            <para>Encapsulates the necessary information to create an OpenGL texture image.</para>
            </summary>
            <remarks>
            <para>QAbstractTextureImage should be used as the means of providing image data to a QAbstractTextureProvider. It contains the necessary information: mipmap level, layer, cube face load at the proper place data into an OpenGL texture.</para>
            <para>The actual data is provided through a QTextureDataFunctor that will be executed by Aspect jobs in the backend. QAbstractTextureImage should be subclassed to provide a functor and eventual additional properties needed by the functor to load actual data.</para>
            <para>Note: : QAbstractTextureImage should never be shared. Expect crashes, undefined behavior at best if this rule is not respected.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureImage.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QAbstractTextureImage.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QAbstractTextureImage.Update">
            <summary>
            <para>Triggers an update of the data functor that is sent to the backend.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureImage.MipmapLevelChanged">
            <summary>
            <para>Holds the mipmap level of the texture image.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	mipmapLevel() const</para>
            <para> void 	setMipmapLevel(int level)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	mipmapLevelChanged(int mipmapLevel)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureImage.LayerChanged">
            <summary>
            <para>Holds the layer of the texture image.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	layer() const</para>
            <para> void 	setLayer(int layer)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layerChanged(int layer)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QAbstractTextureImage.CubeMapFaceChanged">
            <summary>
            <para>Holds the cube map face of the texture image.</para>
            <para>Note: The cube map face has a meaning only for TargetCubeMap and TargetCubeMapArray.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractTextureProvider::CubeMapFace 	cubeMapFace() const</para>
            <para> void 	setCubeMapFace(QAbstractTextureProvider::CubeMapFace face)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cubeMapFaceChanged(QAbstractTextureProvider::CubeMapFace cubeMapFace)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureImage.MipmapLevel">
            <summary>
            <para>Holds the mipmap level of the texture image.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureImage.Layer">
            <summary>
            <para>Holds the layer of the texture image.</para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QAbstractTextureImage.CubeMapFace">
            <summary>
            <para>Holds the cube map face of the texture image.</para>
            <para>Note: The cube map face has a meaning only for TargetCubeMap and TargetCubeMapArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureWrapMode">
            <summary>
            <para>Defines the wrap mode a Qt3DRender::QAbstractTextureProvider should apply to a texture.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureWrapMode.#ctor(Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,QtCore.QObject)">
            <summary>
            <para>Default constructs an instance of QTextureWrapMode.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureWrapMode.#ctor(Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,Qt3DRender.Qt3DRender.QTextureWrapMode.WrapMode,QtCore.QObject)">
            <summary>
            <para>Contrusts a new Qt3DRender::QTextureWrapMode instance with the wrap mode to apply to each dimension x, y z of the texture and parent as parent.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTextureWrapMode.XChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	x() const</para>
            <para> void 	setX(WrapMode x)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xChanged(WrapMode x)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTextureWrapMode.YChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	y() const</para>
            <para> void 	setY(WrapMode y)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yChanged(WrapMode y)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTextureWrapMode.ZChanged">
            <summary>
            <para>Access functions:</para>
            <para></para>
            <para> WrapMode 	z() const</para>
            <para> void 	setZ(WrapMode z)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	zChanged(WrapMode z)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture1D">
            <summary>
            <para>A QAbstractTextureProvider with a Target1D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture1D.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture1D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture1DArray">
            <summary>
            <para>A QAbstractTextureProvider with a Target1DArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture1DArray.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture1DArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture2D">
            <summary>
            <para>A QAbstractTextureProvider with a Target2D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture2D.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture2DArray">
            <summary>
            <para>A QAbstractTextureProvider with a Target2DArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture2DArray.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture3D">
            <summary>
            <para>A QAbstractTextureProvider with a Target3D target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture3D.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture3D.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureCubeMap">
            <summary>
            <para>A QAbstractTextureProvider with a TargetCubeMap target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureCubeMap.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureCubeMap.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureCubeMapArray">
            <summary>
            <para>A QAbstractTextureProvider with a TargetCubeMapArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureCubeMapArray.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureCubeMapArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture2DMultisample">
            <summary>
            <para>A QAbstractTextureProvider with a Target2DMultisample target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture2DMultisample.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DMultisample.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTexture2DMultisampleArray">
            <summary>
            <para>A QAbstractTextureProvider with a Target2DMultisampleArray target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTexture2DMultisampleArray.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTexture2DMultisampleArray.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureRectangle">
            <summary>
            <para>A QAbstractTextureProvider with a TargetRectangle target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureRectangle.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureRectangle.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureBuffer">
            <summary>
            <para>A QAbstractTextureProvider with a TargetBuffer target format.</para>
            </summary>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureBuffer.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureBuffer.</para>
            </summary>
        </member>
        <member name="T:Qt3DRender.Qt3DRender.QTextureImage">
            <summary>
            <para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</para>
            </summary>
            <remarks>
            <para>It contains the necessary information mipmap level, layer, cube face and source URL to load at the proper place data into an OpenGL texture.</para>
            </remarks>
        </member>
        <member name="M:Qt3DRender.Qt3DRender.QTextureImage.#ctor(Qt3DCore.Qt3DCore.QNode)">
            <summary>
            <para>Default constructs an instance of QTextureImage.</para>
            </summary>
        </member>
        <member name="E:Qt3DRender.Qt3DRender.QTextureImage.SourceChanged">
            <summary>
            <para>This property holdsthe source url from which data for the texture image will be loaded.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	source() const</para>
            <para> void 	setSource(const QUrl &amp;source)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceChanged(const QUrl &amp;source)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DRender.Qt3DRender.QTextureImage.Source">
            <summary>
            <para>This property holdsthe source url from which data for the texture image will be loaded.</para>
            </summary>
        </member>
    </members>
</doc>
