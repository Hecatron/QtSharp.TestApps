<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Qt3DCore.Sharp</name>
    </assembly>
    <members>
        <member name="T:Qt3DCore.QNodeId">
            <summary>
            <para>Uniquely identifies a QNode</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.#ctor">
            <summary>
            <para>Default constructs an instance of QNodeId.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.op_Equality(Qt3DCore.QNodeId,Qt3DCore.QNodeId)">
            <summary>
            <para>Returns true if this == other.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.op_Inequality(Qt3DCore.QNodeId,Qt3DCore.QNodeId)">
            <summary>
            <para>Returns true if this != other.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.op_LessThan(Qt3DCore.QNodeId,Qt3DCore.QNodeId)">
            <summary>
            <para>Returns true if this &lt; other.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.op_GreaterThan(Qt3DCore.QNodeId,Qt3DCore.QNodeId)">
            <summary>
            <para>Returns true if this &gt; other.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.op_Implicit(Qt3DCore.QNodeId)~System.Boolean">
            <summary>
            <para>TODO</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeId.CreateId">
            <summary>
            <para>Returns node id.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNodeId.IsNull">
            <summary>
            <para>Returns TODO</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNodeId.Id">
            <summary>
            <para>Returns TODO</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.qnodeid.QHash(Qt3DCore.QNodeId,System.UInt32)">
            <summary>
            <para>Returns hash of node with id and optional seed.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QAbstractAspect">
            <summary>
            <para>QAbstractAspect is the base class for aspects that provide a vertical slice of behavior.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAbstractAspect.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QAbstractAspect with parent</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QAbstractAspect.RootEntityId">
            <summary>
            <para>Returns root entity node id.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QAspectEngine">
            <summary>
            <para>Responsible for handling all the QAbstractAspect subclasses that have been registered with the scene.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QAspectEngine with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.RegisterAspect(Qt3DCore.QAbstractAspect)">
            <summary>
            <para>Registers a new aspect to the AspectManager. The QAspectEngine takes ownership of the aspect and will delete it when the aspect is unregistered.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.RegisterAspect(System.String)">
            <summary>
            <para>Registers a new aspect to the AspectManager based on its name Uses the currently set aspect factory to create the actual aspect instance.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.UnregisterAspect(Qt3DCore.QAbstractAspect)">
            <summary>
            <para>Unregisters and deletes the given aspect.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.UnregisterAspect(System.String)">
            <summary>
            <para>Unregisters and deletes the aspect with the given name.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectEngine.ExecuteCommand(System.String)">
            <summary>
            <para>Executes the given command on aspect engine. Valid commands are:</para>
            <para></para>
            <para>&quot;list aspects&quot;</para>
            <para></para>
            <para>Returns the reply for the command.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.ChangeFlag">
            <summary>
            <para>The types of change that can be sent and received by Qt3D's change notification system.</para>
            <para>The ChangeFlags type is a typedef for QFlags&lt;ChangeFlag&gt;. It stores an OR combination of ChangeFlag values.</para>
            </summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.NodeCreated">
            <summary>A new instance of a QNode subclass has been created.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.NodeDeleted">
            <summary>A QNode has been deleted.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.PropertyUpdated">
            <summary>A QNode property has been updated.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.PropertyValueAdded">
            <summary>A QNode has been added to the scene.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.PropertyValueRemoved">
            <summary>A QNode has been removed from the scene.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.ComponentAdded">
            <summary>A QComponent has been added to a QEntity.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.ComponentRemoved">
            <summary>A QComponent has been removed from a QEntity.</summary>
        </member>
        <member name="F:Qt3DCore.ChangeFlag.AllChanges">
            <summary>Allows an observer to monitor for any of the above changes.</summary>
        </member>
        <member name="T:Qt3DCore.QSceneChange">
            <summary>
            <para>The base class for changes that can be sent and received by Qt3D's change notification system</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QSceneChange.#ctor(Qt3DCore.ChangeFlag,Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QSceneChange with type and subjectId.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QSceneChange.DeliveryFlags">
            <summary>
            <para>Returns the set delivery flags</para>
            <para>See also setDeliveryFlags().</para>
            <para></para>
            <para>Set the Delivery flags of the change to flags</para>
            <para>See also deliveryFlags().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QSceneChange.Type">
            <summary>
            <para>Returns scene change type.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QSceneChange.SubjectId">
            <summary>
            <para>Returns scene change subject id.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QSceneChange.DeliveryFlag">
            <summary>
            <para>The types of change that can be sent and received by Qt3D's change notification system.</para>
            <para>The DeliveryFlags type is a typedef for QFlags&lt;DeliveryFlag&gt;. It stores an OR combination of DeliveryFlag values.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QComponentAddedChange">
            <summary>
            <para>The QComponentAddedChange class is used to notify when a component is added to an entity</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QComponentAddedChange.#ctor(Qt3DCore.QEntity,Qt3DCore.QComponent)">
            <summary>
            <para>Constructs a new QComponentAddedChange with with entity and component.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentAddedChange.EntityId">
            <summary>
            <para>Returns the id of the entity the component was added to.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentAddedChange.ComponentId">
            <summary>
            <para>Returns the id of the component added.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentAddedChange.ComponentMetaObject">
            <summary>
            <para>Returns the metaobject.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QComponentRemovedChange">
            <summary>
            <para>The QComponentRemovedChange class is used to notify when a component is removed from an entity</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QComponentRemovedChange.#ctor(Qt3DCore.QEntity,Qt3DCore.QComponent)">
            <summary>
            <para>Constructs a new QComponentRemovedChange with entity and component.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentRemovedChange.EntityId">
            <summary>
            <para>Returns the id of the entity the component was removed from.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentRemovedChange.ComponentId">
            <summary>
            <para>Returns the id of the component removed.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QComponentRemovedChange.ComponentMetaObject">
            <summary>
            <para>Returns the metaobject.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyUpdatedChangeBase">
            <summary>
            <para>The QPropertyUpdatedChangeBase class is the base class for all PropertyUpdated QSceneChange events</para>
            </summary>
            <remarks>
            <para>The QPropertyUpdatedChangeBase class is the base class for all QSceneChange events that have the changeType() PropertyUpdated. You should not need to instantiate this class. Usually you should be using one of its subclasses such as QPropertyUpdatedChange or QTypedPropertyUpdatedChange.</para>
            <para>You can subclass this to create your own node update types for communication between your QNode and QBackendNode subclasses when writing your own aspects.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QPropertyUpdatedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyUpdatedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QDynamicPropertyUpdatedChange">
            <summary>
            <para>The QDynamicPropertyUpdatedChange class is used to notify when a dynamic property value is updated</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QDynamicPropertyUpdatedChange.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QDynamicPropertyUpdatedChange with subjectId.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QDynamicPropertyUpdatedChange.PropertyName">
            <summary>
            <para>Returns name of the property.</para>
            <para>See also setPropertyName().</para>
            <para></para>
            <para>Sets the property change name.</para>
            <para>See also propertyName().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QDynamicPropertyUpdatedChange.Value">
            <summary>
            <para>Returns property value.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Set the property change value.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QNodeCreatedChangeBase">
            <summary>
            <para>The QNodeCreatedChangeBase class is the base class for all NodeCreated QSceneChange events</para>
            </summary>
            <remarks>
            <para>The QNodeCreatedChangeBase class is the base class for all QSceneChange events that have the changeType() NodeCreated. You should not need to instantiate this class. Usually you should be using one of its subclasses such as QNodeCreatedChange.</para>
            <para>You can subclass this to create your own node update types for communication between your QNode and QBackendNode subclasses when writing your own aspects.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QNodeCreatedChangeBase.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QNodeCreatedChangeBase with node.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNodeCreatedChangeBase.ParentId">
            <summary>
            <para>Returns parent id.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNodeCreatedChangeBase.MetaObject">
            <summary>
            <para>Returns metaobject.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNodeCreatedChangeBase.IsNodeEnabled">
            <summary>
            <para>Returns node enabled.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QNode">
            <summary>
            <para>QNode is the base class of all Qt3D node classes used to build a Qt3D scene.</para>
            </summary>
            <remarks>
            <para>The owernship of QNode is determined by the QObject parent/child relationship between nodes. By itself, a QNode has no visual appearance and no particular meaning, it is there as a way of building a node based tree structure.</para>
            <para>The parent of a QNode instance can only be another QNode instance.</para>
            <para>Each QNode instance has a unique id that allows it to be recognizable from other instances.</para>
            <para>When properties are defined on a QNode subclass, their NOTIFY signal will automatically generate notifications that the Qt3D backend aspects will receive.</para>
            <para></para>
            <para>See also QEntity and QComponent.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QNode.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Creates a new QNode instance with parent parent.</para>
            <para>Note: The backend aspects will be notified that a QNode instance is part of the scene only if it has a parent; unless this is the root node of the Qt3D scene.</para>
            <para>See also setParent().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNode.BlockNotifications(System.Boolean)">
            <summary>
            <para>If block is true, property change notifications sent by this object to aspects are blocked. If block is false, no such blocking will occur.</para>
            <para>The return value is the previous value of notificationsBlocked().</para>
            <para>Note that the other notification types will be sent even if the notifications for this object have been blocked.</para>
            <para>See also notificationsBlocked().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNode.SetParent(Qt3DCore.QNode)">
            <summary>
            <para>Holds the immediate QNode parent, or null if the node has no parent.</para>
            <para>Setting the parent will notify the backend aspects about current QNode instance's parent change.</para>
            <para>Note: if parent happens to be null, this will actually notify that the current QNode instance was removed from the scene.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QNode *	parentNode() const</para>
            <para> void 	setParent(QNode *parent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parentChanged(QObject *parent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QNode.ParentChanged">
            <summary>
            <para>Holds the immediate QNode parent, or null if the node has no parent.</para>
            <para>Setting the parent will notify the backend aspects about current QNode instance's parent change.</para>
            <para>Note: if parent happens to be null, this will actually notify that the current QNode instance was removed from the scene.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QNode *	parentNode() const</para>
            <para> void 	setParent(QNode *parent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parentChanged(QObject *parent)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QNode.EnabledChanged">
            <summary>
            <para>Holds the QNode enabled flag. By default a QNode is always enabled.</para>
            <para>Note: the interpretation of what enabled means is aspect-dependent. Even if enabled is set to false, some aspects may still consider the node in some manner. This is documented on a class by class basis.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isEnabled() const</para>
            <para> void 	setEnabled(bool isEnabled)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	enabledChanged(bool enabled)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QNode.NodeDestroyed">
            <summary>
            <para>emitted when the node is destroyed.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNode.Enabled">
            <summary>
            <para>Holds the QNode enabled flag. By default a QNode is always enabled.</para>
            <para>Note: the interpretation of what enabled means is aspect-dependent. Even if enabled is set to false, some aspects may still consider the node in some manner. This is documented on a class by class basis.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNode.Id">
            <summary>
            <para>Returns the id that uniquely identifies the QNode instance.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNode.ParentNode">
            <summary>
            <para>Holds the immediate QNode parent, or null if the node has no parent.</para>
            <para>Setting the parent will notify the backend aspects about current QNode instance's parent change.</para>
            <para>Note: if parent happens to be null, this will actually notify that the current QNode instance was removed from the scene.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QNode *	parentNode() const</para>
            <para> void 	setParent(QNode *parent)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	parentChanged(QObject *parent)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QNode.NotificationsBlocked">
            <summary>
            <para>Returns true if aspect notifications are blocked; otherwise returns false. By default, notifications are not blocked.</para>
            <para>See also blockNotifications().</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeIdTypePair.#ctor">
            <summary>
            <para>Default constructs an instance of QNodeIdTypePair.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QNodeIdTypePair.#ctor(Qt3DCore.QNodeId,QtCore.QMetaObject)">
            <summary>
            <para>Default constructs an instance of QNodeIdTypePair.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.qnode.QIdForNode(Qt3DCore.QNode)">
            <summary>
            <para>Returns node id for node.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QNodeDestroyedChange">
            <summary>
            <para>Used to notify when a node is destroyed.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyValueAddedChangeBase">
            <summary>
            <para>The QPropertyValueAddedChangeBase class is the base class for all PropertyValueAdded QSceneChange events</para>
            </summary>
            <remarks>
            <para>The QPropertyValueAddedChangeBase class is the base class for all QSceneChange events that have the changeType() PropertyValueAdded. You should not need to instantiate this class. Usually you should be using one of its subclasses such as QPropertyNodeAddedChange.</para>
            <para>You can subclass this to create your own node added types for communication between your QNode and QBackendNode subclasses when writing your own aspects.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QPropertyValueAddedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyValueAddedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QStaticPropertyValueAddedChangeBase">
            <summary>
            <para>The QStaticPropertyValueAddedChangeBase class is the base class for all static PropertyValueAdded QSceneChange events</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QStaticPropertyValueAddedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QStaticPropertyValueAddedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QStaticPropertyValueAddedChangeBase.PropertyName">
            <summary>
            <para>Returns name of the property.</para>
            <para>See also setPropertyName().</para>
            <para></para>
            <para>Sets the property change name.</para>
            <para>See also propertyName().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyNodeAddedChange">
            <summary>
            <para>Used to notify when a node is added to a property</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QPropertyNodeAddedChange.#ctor(Qt3DCore.QNodeId,Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPropertyNodeAddedChange with subjectId, node.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyNodeAddedChange.AddedNodeId">
            <summary>
            <para>Returns the id of the node added to the property.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyNodeAddedChange.MetaObject">
            <summary>
            <para>Returns the meta object of the node added to the property.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyValueRemovedChangeBase">
            <summary>
            <para>The QPropertyValueRemovedChangeBase class is the base class for all PropertyValueRemoved QSceneChange events</para>
            </summary>
            <remarks>
            <para>The QPropertyValueRemovedChangeBase class is the base class for all QSceneChange events that have the changeType() PropertyValueRemoved. You should not need to instantiate this class. Usually you should be using one of its subclasses such as QPropertyNodeRemovedChange.</para>
            <para>You can subclass this to create your own node Removed types for communication between your QNode and QBackendNode subclasses when writing your own aspects.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QPropertyValueRemovedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyValueRemovedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QStaticPropertyValueRemovedChangeBase">
            <summary>
            <para>The QStaticPropertyValueRemovedChangeBase class is the base class for all static PropertyValueRemoved QSceneChange events</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QStaticPropertyValueRemovedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QStaticPropertyValueRemovedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QStaticPropertyValueRemovedChangeBase.PropertyName">
            <summary>
            <para>Returns name of the property.</para>
            <para>See also setPropertyName().</para>
            <para></para>
            <para>Sets the property change name.</para>
            <para>See also propertyName().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyNodeRemovedChange">
            <summary>
            <para>The QPropertyNodeRemovedChange class is used to notify when a node is removed from a property</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QPropertyNodeRemovedChange.#ctor(Qt3DCore.QNodeId,Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QPropertyNodeRemovedChange with subjectId, node.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyNodeRemovedChange.RemovedNodeId">
            <summary>
            <para>Returns the id of the node removed to the property.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyNodeRemovedChange.MetaObject">
            <summary>
            <para>Returns the metaObject of the node removed to the property.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QStaticPropertyUpdatedChangeBase">
            <summary>
            <para>The QStaticPropertyUpdatedChangeBase class is the base class for all static PropertyUpdated QSceneChange events</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QStaticPropertyUpdatedChangeBase.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QStaticPropertyUpdatedChangeBase with subjectId</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QStaticPropertyUpdatedChangeBase.PropertyName">
            <summary>
            <para>Returns name of the property.</para>
            <para>See also setPropertyName().</para>
            <para></para>
            <para>Sets the property change name.</para>
            <para>See also propertyName().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyUpdatedChange">
            <summary>
            <para>The QPropertyUpdatedChange class is used to notify when a property value is updated</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QPropertyUpdatedChange.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyUpdatedChange with subjectId.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyUpdatedChange.Value">
            <summary>
            <para>Returns property value.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Set the property change value.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyValueAddedChange">
            <summary>
            <para>Used to notify when a value is added to a property</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QPropertyValueAddedChange.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyValueAddedChange with subjectId.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyValueAddedChange.AddedValue">
            <summary>
            <para>Returns the value added to the property.</para>
            <para>See also setAddedValue().</para>
            <para></para>
            <para>Sets the value added to the property to value.</para>
            <para>See also addedValue().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QPropertyValueRemovedChange">
            <summary>
            <para>Used to notify when a value is added to a property</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QPropertyValueRemovedChange.#ctor(Qt3DCore.QNodeId)">
            <summary>
            <para>Constructs a new QPropertyValueRemovedChange with subjectId.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QPropertyValueRemovedChange.RemovedValue">
            <summary>
            <para>Returns the value removed from the property.</para>
            <para>See also setRemovedValue().</para>
            <para></para>
            <para>Sets the value removed from the property to value.</para>
            <para>See also removedValue().</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QAspectJob">
            <summary>
            <para>The base class for jobs executed in an aspect</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectJob.#ctor">
            <summary>
            <para>Default constructs an instance of QAspectJob.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QAspectJob.Run">
            <summary>
            <para>Executes job.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QBackendNodeMapper">
            <summary>
            <para>Creates and maps backend nodes to their respective frontend nodes</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QBackendNodeMapper.Get(Qt3DCore.QNodeId)">
            <summary>
            <para>Returns backend node for the given node id.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QBackendNodeMapper.Destroy(Qt3DCore.QNodeId)">
            <summary>
            <para>Destroys the backend node for the given node id.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QBackendNode">
            <summary>
            <para>The base class for all Qt3D backend nodes</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QBackendNode.#ctor(Qt3DCore.QBackendNode.Mode)">
            <summary>
            <para>Default constructs an instance of QBackendNode.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QBackendNode.Enabled">
            <summary>
            <para>Returns true if the backend node is enabled.</para>
            <para></para>
            <para>Enables or disables the backend node by enabled.</para>
            <para>See also isEnabled().</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QBackendNode.PeerId">
            <summary>
            <para>Returns the peer id of the backend node.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QBackendNode.mode">
            <summary>
            <para>Returns the mode of the backend mode.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QBackendNode.Mode">
            <summary>
            <para>The mode for the backend node.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QComponent">
            <summary>
            <para>The base class of scene nodes that can be aggregated by Qt3DCore::QEntity instances as a component.</para>
            </summary>
            <remarks>
            <para>A Qt3DCore::QComponent provides a vertical slice of behavior that can be assigned to and sometimes shared across Qt3DCore::QEntity instances.</para>
            <para>Qt3DCore::QComponent subclasses are often aggregated in groups that impart useful behavior to the aggregating entity. For example, to have an Entity that gets drawn by the Qt3D renderer aspect, an entity would most likely aggregate Qt3DCore::QTransform, Qt3DRender::QMesh, and Qt3DRender::QMaterial components.</para>
            <para></para>
            <para>See also Qt3DCore::QEntity.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QComponent.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QComponent instance with parent as the parent.</para>
            <para>Note: a QComponent should never be instanced directly, instance one of the subclasses instead.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QComponent.ShareableChanged">
            <summary>
            <para>Holds the shareable flag of the QComponent. The QComponent can be shared across several entities if true.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isShareable() const</para>
            <para> void 	setShareable(bool isShareable)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	shareableChanged(bool isShareable)</para>
            <para></para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QEntity">
            <summary>
            <para>Qt3DCore::QEntity is a Qt3DCore::QNode subclass that can aggregate several Qt3DCore::QComponent instances that will specify its behavior.</para>
            </summary>
            <remarks>
            <para>By itself a Qt3DCore::QEntity is an empty shell. The behavior of a Qt3DCore::QEntity object is defined by the Qt3DCore::QComponent objects it references. Each Qt3D backend aspect will be able to interpret and process an Entity by recognizing which components it is made up of. One aspect may decide to only process entities composed of a single Qt3DCore::QTransform component whilst another may focus on Qt3DCore::QMouseHandler.</para>
            <para></para>
            <para>See also Qt3DCore::QComponent and Qt3DCore::QTransform.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QEntity.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new Qt3DCore::QEntity instance with parent as parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QEntity.AddComponent(Qt3DCore.QComponent)">
            <summary>
            <para>Adds a new reference to the component comp.</para>
            <para>Note: If the Qt3DCore::QComponent has no parent, the Qt3DCore::QEntity will set itself as its parent thereby taking ownership of the component.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QEntity.RemoveComponent(Qt3DCore.QComponent)">
            <summary>
            <para>Removes the reference to comp.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QEntity.ParentEntity">
            <summary>
            <para>Returns the parent Qt3DCore::QEntity instance of this entity. If the immediate parent isn't a Qt3DCore::QEntity, this function traverses up the scene hierarchy until a parent Qt3DCore::QEntity is found. If no Qt3DCore::QEntity parent can be found, returns null.</para>
            </summary>
        </member>
        <member name="T:Qt3DCore.QTransform">
            <summary>
            <para>The QTransform class specifies 2D transformations of a coordinate system.</para>
            </summary>
            <remarks>
            <para>A transformation specifies how to translate, scale, shear, rotate or project the coordinate system, and is typically used when rendering graphics.</para>
            <para>QTransform differs from QMatrix in that it is a true 3x3 matrix, allowing perspective transformations. QTransform's toAffine() method allows casting QTransform to QMatrix. If a perspective transformation has been specified on the matrix, then the conversion will cause loss of data.</para>
            <para>QTransform is the recommended transformation class in Qt.</para>
            <para>A QTransform object can be built using the setMatrix(), scale(), rotate(), translate() and shear() functions. Alternatively, it can be built by applying basic matrix operations. The matrix can also be defined when constructed, and it can be reset to the identity matrix (the default) using the reset() function.</para>
            <para>The QTransform class supports mapping of graphic primitives: A given point, line, polygon, region, or painter path can be mapped to the coordinate system defined by this matrix using the map() function. In case of a rectangle, its coordinates can be transformed using the mapRect() function. A rectangle can also be transformed into a polygon (mapped to the coordinate system defined by this matrix), using the mapToPolygon() function.</para>
            <para>QTransform provides the isIdentity() function which returns true if the matrix is the identity matrix, and the isInvertible() function which returns true if the matrix is non-singular (i.e. AB = BA = I). The inverted() function returns an inverted copy of this matrix if it is invertible (otherwise it returns the identity matrix), and adjoint() returns the matrix's classical adjoint. In addition, QTransform provides the determinant() function which returns the matrix's determinant.</para>
            <para>Finally, the QTransform class supports matrix multiplication, addition and subtraction, and objects of the class can be streamed as well as compared.</para>
            <para></para>
            <para>Rendering Graphics</para>
            <para>When rendering graphics, the matrix defines the transformations but the actual transformation is performed by the drawing routines in QPainter.</para>
            <para>By default, QPainter operates on the associated device's own coordinate system. The standard coordinate system of a QPaintDevice has its origin located at the top-left position. The x values increase to the right; y values increase downward. For a complete description, see the coordinate system documentation.</para>
            <para>QPainter has functions to translate, scale, shear and rotate the coordinate system without using a QTransform. For example:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void SimpleTransformation::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      painter.rotate(45);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>Although these functions are very convenient, it can be more efficient to build a QTransform and call QPainter::setTransform() if you want to perform more than a single transform operation. For example:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void CombinedTransformation::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      QTransform transform;</para>
            <para>      transform.translate(50, 50);</para>
            <para>      transform.rotate(45);</para>
            <para>      transform.scale(0.5, 1.0);</para>
            <para>      painter.setTransform(transform);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>Basic Matrix Operations</para>
            <para></para>
            <para>A QTransform object contains a 3 x 3 matrix. The m31 (dx) and m32 (dy) elements specify horizontal and vertical translation. The m11 and m22 elements specify horizontal and vertical scaling. The m21 and m12 elements specify horizontal and vertical shearing. And finally, the m13 and m23 elements specify horizontal and vertical projection, with m33 as an additional projection factor.</para>
            <para>QTransform transforms a point in the plane to another point using the following formulas:</para>
            <para></para>
            <para></para>
            <para>  x' = m11*x + m21*y + dx</para>
            <para>  y' = m22*y + m12*x + dy</para>
            <para>  if (is not affine) {</para>
            <para>      w' = m13*x + m23*y + m33</para>
            <para>      x' /= w'</para>
            <para>      y' /= w'</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The point (x, y) is the original point, and (x', y') is the transformed point. (x', y') can be transformed back to (x, y) by performing the same operation on the inverted() matrix.</para>
            <para>The various matrix elements can be set when constructing the matrix, or by using the setMatrix() function later on. They can also be manipulated using the translate(), rotate(), scale() and shear() convenience functions. The currently set values can be retrieved using the m11(), m12(), m13(), m21(), m22(), m23(), m31(), m32(), m33(), dx() and dy() functions.</para>
            <para>Translation is the simplest transformation. Setting dx and dy will move the coordinate system dx units along the X axis and dy units along the Y axis. Scaling can be done by setting m11 and m22. For example, setting m11 to 2 and m22 to 1.5 will double the height and increase the width by 50%. The identity matrix has m11, m22, and m33 set to 1 (all others are set to 0) mapping a point to itself. Shearing is controlled by m12 and m21. Setting these elements to values different from zero will twist the coordinate system. Rotation is achieved by setting both the shearing factors and the scaling factors. Perspective transformation is achieved by setting both the projection factors and the scaling factors.</para>
            <para>Here's the combined transformations example using basic matrix operations:</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>  void BasicOperations::paintEvent(QPaintEvent *)</para>
            <para>  {</para>
            <para>      double pi = 3.14;</para>
            <para></para>
            <para>      double a    = pi/180 * 45.0;</para>
            <para>      double sina = sin(a);</para>
            <para>      double cosa = cos(a);</para>
            <para></para>
            <para>      QTransform translationTransform(1, 0, 0, 1, 50.0, 50.0);</para>
            <para>      QTransform rotationTransform(cosa, sina, -sina, cosa, 0, 0);</para>
            <para>      QTransform scalingTransform(0.5, 0, 0, 1.0, 0, 0);</para>
            <para></para>
            <para>      QTransform transform;</para>
            <para>      transform = scalingTransform * rotationTransform * translationTransform;</para>
            <para></para>
            <para>      QPainter painter(this);</para>
            <para>      painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>      painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>      painter.setTransform(transform);</para>
            <para></para>
            <para>      painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>      painter.setPen(QPen(Qt::black, 1));</para>
            <para>      painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPainter, Coordinate System, Affine Transformations Example, and Transformations Example.</para>
            </remarks>
        </member>
        <member name="M:Qt3DCore.QTransform.#ctor(Qt3DCore.QNode)">
            <summary>
            <para>Constructs a new QTransform with parent.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromAxisAndAngle(QtGui.QVector3D,System.Single)">
            <summary>
            <para>Creates a QQuaternion from axis and angle. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromAxisAndAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a QQuaternion from x, y, z, and angle. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromAxesAndAngles(QtGui.QVector3D,System.Single,QtGui.QVector3D,System.Single)">
            <summary>
            <para>Creates a QQuaternion from axis1, angle1, axis2, and angle2. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromAxesAndAngles(QtGui.QVector3D,System.Single,QtGui.QVector3D,System.Single,QtGui.QVector3D,System.Single)">
            <summary>
            <para>Creates a QQuaternion from axis1, angle1, axis2, angle2, axis3, and angle3. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromEulerAngles(QtGui.QVector3D)">
            <summary>
            <para>Creates a QQuaternion from eulerAngles. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.FromEulerAngles(System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a QQuaternion from pitch, yaw, and roll. Returns the resulting QQuaternion.</para>
            </summary>
        </member>
        <member name="M:Qt3DCore.QTransform.RotateAround(QtGui.QVector3D,System.Single,QtGui.QVector3D)">
            <summary>
            <para>Creates a rotation matrix from axis and angle around point. Returns the resulting QMatrix4x4.</para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.ScaleChanged">
            <summary>
            <para>Holds the uniform scale of the transform. If the scale has been set with setScale3D, holds the x value only.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	scale() const</para>
            <para> void 	setScale(float scale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scaleChanged(float scale)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.Scale3DChanged">
            <summary>
            <para>Holds the scale of the transform as QVector3D.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	scale3D() const</para>
            <para> void 	setScale3D(const QVector3D &amp;scale)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	scale3DChanged(const QVector3D &amp;scale)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.RotationChanged">
            <summary>
            <para>Holds the rotation of the transform as QQuaternion.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QQuaternion 	rotation() const</para>
            <para> void 	setRotation(const QQuaternion &amp;rotation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationChanged(const QQuaternion &amp;rotation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.TranslationChanged">
            <summary>
            <para>Holds the translation of the transform as QVector3D.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVector3D 	translation() const</para>
            <para> void 	setTranslation(const QVector3D &amp;translation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	translationChanged(const QVector3D &amp;translation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.MatrixChanged">
            <summary>
            <para>Holds the QMatrix4x4 of the transform.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QMatrix4x4 	matrix() const</para>
            <para> void 	setMatrix(const QMatrix4x4 &amp;matrix)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	matrixChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.RotationXChanged">
            <summary>
            <para>Holds the x rotation of the transform as Euler angle.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationX() const</para>
            <para> void 	setRotationX(float rotationX)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationXChanged(float rotationX)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.RotationYChanged">
            <summary>
            <para>Holds the y rotation of the transform as Euler angle.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationY() const</para>
            <para> void 	setRotationY(float rotationY)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationYChanged(float rotationY)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:Qt3DCore.QTransform.RotationZChanged">
            <summary>
            <para>Holds the z rotation of the transform as Euler angle.</para>
            <para>Access functions:</para>
            <para></para>
            <para> float 	rotationZ() const</para>
            <para> void 	setRotationZ(float rotationZ)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	rotationZChanged(float rotationZ)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.Scale">
            <summary>
            <para>Holds the uniform scale of the transform. If the scale has been set with setScale3D, holds the x value only.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.Scale3D">
            <summary>
            <para>Holds the scale of the transform as QVector3D.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.Rotation">
            <summary>
            <para>Holds the rotation of the transform as QQuaternion.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.Translation">
            <summary>
            <para>Holds the translation of the transform as QVector3D.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.Matrix">
            <summary>
            <para>Holds the QMatrix4x4 of the transform.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.RotationX">
            <summary>
            <para>Holds the x rotation of the transform as Euler angle.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.RotationY">
            <summary>
            <para>Holds the y rotation of the transform as Euler angle.</para>
            </summary>
        </member>
        <member name="P:Qt3DCore.QTransform.RotationZ">
            <summary>
            <para>Holds the z rotation of the transform as Euler angle.</para>
            </summary>
        </member>
    </members>
</doc>
