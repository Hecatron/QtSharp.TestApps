<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtCoreSharp</name>
    </assembly>
    <members>
        <member name="T:QtCore.QObject">
            <summary>
            <para>The QObject class is the base class of all Qt objects.</para>
            </summary>
            <remarks>
            <para>QObject is the heart of the Qt Object Model. The central feature
            in this model is a very powerful mechanism for seamless object
            communication called signals and slots. You can connect a signal to a slot
            with connect() and destroy the connection with disconnect(). To avoid never
            ending notification loops you can temporarily block signals with
            blockSignals(). The protected functions connectNotify() and
            disconnectNotify() make it possible to track connections.</para>
            <para>QObjects organize themselves in object trees. When you create a
            QObject with another object as parent, the object will automatically add
            itself to the parent's children() list. The parent takes ownership of the
            object; i.e., it will automatically delete its children in its destructor.
            You can look for an object by name and optionally type using findChild() or
            findChildren().</para>
            <para>Every object has an objectName() and its class name can be found
            via the corresponding metaObject() (see QMetaObject::className()). You can
            determine whether the object's class inherits another class in the QObject
            inheritance hierarchy by using the inherits() function.</para>
            <para>When an object is deleted, it emits a destroyed() signal. You can
            catch this signal to avoid dangling references to QObjects.</para>
            <para>QObjects can receive events through event() and filter the events
            of other objects. See installEventFilter() and eventFilter() for details. A
            convenience handler, childEvent(), can be reimplemented to catch child
            events.</para>
            <para>Last but not least, QObject provides the basic timer support in
            Qt; see QTimer for high-level support for timers.</para>
            <para>Notice that the Q_OBJECT macro is mandatory for any object that
            implements signals, slots or properties. You also need to run the Meta
            Object Compiler on the source file. We strongly recommend the use of this
            macro in all subclasses of QObject regardless of whether or not they
            actually use signals, slots and properties, since failure to do so may lead
            certain functions to exhibit strange behavior.</para>
            <para>All Qt widgets inherit QObject. The convenience function
            isWidgetType() returns whether an object is actually a widget. It is much
            faster than qobject_cast&lt;QWidget *&gt;(obj) or
            obj-&gt;inherits(&quot;QWidget&quot;).</para>
            <para>Some QObject functions, e.g. children(), return a QObjectList.
            QObjectList is a typedef for QList&lt;QObject *&gt;.</para>
            <para></para>
            <para>Thread Affinity</para>
            <para>A QObject instance is said to have a thread affinity, or that it
            lives in a certain thread. When a QObject receives a queued signal or a
            posted event, the slot or event handler will run in the thread that the
            object lives in.</para>
            <para>Note: If a QObject has no thread affinity (that is, if thread()
            returns zero), or if it lives in a thread that has no running event loop,
            then it cannot receive queued signals or posted events.</para>
            <para>By default, a QObject lives in the thread in which it is created.
            An object's thread affinity can be queried using thread() and changed using
            moveToThread().</para>
            <para>All QObjects must live in the same thread as their parent.
            Consequently:</para>
            <para></para>
            <para>setParent() will fail if the two QObjects involved live in
            different threads.</para>
            <para>When a QObject is moved to another thread, all its children will
            be automatically moved too.</para>
            <para>moveToThread() will fail if the QObject has a parent.</para>
            <para>If QObjects are created within QThread::run(), they cannot become
            children of the QThread object because the QThread does not live in the
            thread that calls QThread::run().</para>
            <para></para>
            <para>Note: A QObject's member variables do not automatically become
            its children. The parent-child relationship must be set by either passing a
            pointer to the child's constructor, or by calling setParent(). Without this
            step, the object's member variables will remain in the old thread when
            moveToThread() is called.</para>
            <para></para>
            <para></para>
            <para>No Copy Constructor or Assignment Operator</para>
            <para>QObject has neither a copy constructor nor an assignment
            operator. This is by design. Actually, they are declared, but in a private
            section with the macro Q_DISABLE_COPY(). In fact, all Qt classes derived
            from QObject (direct or indirect) use this macro to declare their copy
            constructor and assignment operator to be private. The reasoning is found
            in the discussion on Identity vs Value on the Qt Object Model page.</para>
            <para>The main consequence is that you should use pointers to QObject
            (or to your QObject subclass) where you might otherwise be tempted to use
            your QObject subclass as a value. For example, without a copy constructor,
            you can't use a subclass of QObject as the value to be stored in one of the
            container classes. You must store pointers.</para>
            <para></para>
            <para>Auto-Connection</para>
            <para>Qt's meta-object system provides a mechanism to automatically
            connect signals and slots between QObject subclasses and their children. As
            long as objects are defined with suitable object names, and slots follow a
            simple naming convention, this connection can be performed at run-time by
            the QMetaObject::connectSlotsByName() function.</para>
            <para>uic generates code that invokes this function to enable
            auto-connection to be performed between widgets on forms created with Qt
            Designer. More information about using auto-connection with Qt Designer is
            given in the Using a Designer UI File in Your Application section of the Qt
            Designer manual.</para>
            <para></para>
            <para>Dynamic Properties</para>
            <para>From Qt 4.2, dynamic properties can be added to and removed from
            QObject instances at run-time. Dynamic properties do not need to be
            declared at compile-time, yet they provide the same advantages as static
            properties and are manipulated using the same API - using property() to
            read them and setProperty() to write them.</para>
            <para>From Qt 4.3, dynamic properties are supported by Qt Designer, and
            both standard Qt widgets and user-created forms can be given dynamic
            properties.</para>
            <para></para>
            <para>Internationalization (I18n)</para>
            <para>All QObject subclasses support Qt's translation features, making
            it possible to translate an application's user interface into different
            languages.</para>
            <para>To make user-visible text translatable, it must be wrapped in
            calls to the tr() function. This is explained in detail in the Writing
            Source Code for Translation document.</para>
            <para></para>
            <para>See also QMetaObject, QPointer, QObjectCleanupHandler,
            Q_DISABLE_COPY(), and Object Trees &amp; Ownership.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QObject.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an object with parent object parent.</para>
            <para>The parent of an object may be viewed as the object's owner. For
            instance, a dialog box is the parent of the OK and Cancel buttons it
            contains.</para>
            <para>The destructor of a parent object destroys all child
            objects.</para>
            <para>Setting parent to 0 constructs an object with no parent. If the
            object is a widget, it will become a top-level window.</para>
            <para>See also parent(), findChild(), and findChildren().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.OnEvent(QtCore.QEvent)">
            <summary>
            <para>This virtual function receives events to an object and should
            return true if the event e was recognized and processed.</para>
            <para>The event() function can be reimplemented to customize the
            behavior of an object.</para>
            <para>See also installEventFilter(), timerEvent(),
            QCoreApplication::sendEvent(), and QCoreApplication::postEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Filters events if this object has been installed as an event
            filter for the watched object.</para>
            <para>In your reimplementation of this function, if you want to filter
            the event out, i.e. stop it being handled further, return true; otherwise
            return false.</para>
            <para>Example:</para>
            <para>class MainWindow : public QMainWindow</para>
            <para>{</para>
            <para>public:</para>
            <para>    MainWindow();</para>
            <para></para>
            <para>protected:</para>
            <para>    bool eventFilter(QObject *obj, QEvent *ev);</para>
            <para></para>
            <para>private:</para>
            <para>    QTextEdit *textEdit;</para>
            <para>};</para>
            <para></para>
            <para>MainWindow::MainWindow()</para>
            <para>{</para>
            <para>    textEdit = new QTextEdit;</para>
            <para>    setCentralWidget(textEdit);</para>
            <para></para>
            <para>    textEdit-&gt;installEventFilter(this);</para>
            <para>}</para>
            <para></para>
            <para>bool MainWindow::eventFilter(QObject *obj, QEvent *event)</para>
            <para>{</para>
            <para>    if (obj == textEdit) {</para>
            <para>        if (event-&gt;type() == QEvent::KeyPress) {</para>
            <para>            QKeyEvent *keyEvent =
            static_cast&lt;QKeyEvent*&gt;(event);</para>
            <para>            qDebug() &lt;&lt; &quot;Ate key press&quot; &lt;&lt;
            keyEvent-&gt;key();</para>
            <para>            return true;</para>
            <para>        } else {</para>
            <para>            return false;</para>
            <para>        }</para>
            <para>    } else {</para>
            <para>        // pass the event on to the parent class</para>
            <para>        return QMainWindow::eventFilter(obj, event);</para>
            <para>    }</para>
            <para>}</para>
            <para>Notice in the example above that unhandled events are passed to
            the base class's eventFilter() function, since the base class might have
            reimplemented eventFilter() for its own internal purposes.</para>
            <para>Warning: If you delete the receiver object in this function, be
            sure to return true. Otherwise, Qt will forward the event to the deleted
            object and the program might crash.</para>
            <para>See also installEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.BlockSignals(System.Boolean)">
            <summary>
            <para>If block is true, signals emitted by this object are blocked
            (i.e., emitting a signal will not invoke anything connected to it). If
            block is false, no such blocking will occur.</para>
            <para>The return value is the previous value of
            signalsBlocked().</para>
            <para>Note that the destroyed() signal will be emitted even if the
            signals for this object have been blocked.</para>
            <para>See also signalsBlocked().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QObject.MoveToThread(QtCore.QThread)" -->
        <member name="M:QtCore.QObject.StartTimer(System.Int32,QtCore.Qt.TimerType)">
            <summary>
            <para>Starts a timer and returns a timer identifier, or returns zero if
            it could not start a timer.</para>
            <para>A timer event will occur every interval milliseconds until
            killTimer() is called. If interval is 0, then the timer event occurs once
            every time there are no more window system events to process.</para>
            <para>The virtual timerEvent() function is called with the QTimerEvent
            event parameter class when a timer event occurs. Reimplement this function
            to get timer events.</para>
            <para>If multiple timers are running, the QTimerEvent::timerId() can be
            used to find out which timer was activated.</para>
            <para>Example:</para>
            <para>class MyObject : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para></para>
            <para>public:</para>
            <para>    MyObject(QObject *parent = 0);</para>
            <para></para>
            <para>protected:</para>
            <para>    void timerEvent(QTimerEvent *event);</para>
            <para>};</para>
            <para></para>
            <para>MyObject::MyObject(QObject *parent)</para>
            <para>    : QObject(parent)</para>
            <para>{</para>
            <para>    startTimer(50);     // 50-millisecond timer</para>
            <para>    startTimer(1000);   // 1-second timer</para>
            <para>    startTimer(60000);  // 1-minute timer</para>
            <para>}</para>
            <para></para>
            <para>void MyObject::timerEvent(QTimerEvent *event)</para>
            <para>{</para>
            <para>    qDebug() &lt;&lt; &quot;Timer ID:&quot; &lt;&lt;
            event-&gt;timerId();</para>
            <para>}</para>
            <para>Note that QTimer's accuracy depends on the underlying operating
            system and hardware. The timerType argument allows you to customize the
            accuracy of the timer. See Qt::TimerType for information on the different
            timer types. Most platforms support an accuracy of 20 milliseconds; some
            provide more. If Qt is unable to deliver the requested number of timer
            events, it will silently discard some.</para>
            <para>The QTimer class provides a high-level programming interface with
            single-shot timers and timer signals instead of events. There is also a
            QBasicTimer class that is more lightweight than QTimer and less clumsy than
            using timer IDs directly.</para>
            <para>See also timerEvent(), killTimer(), and
            QTimer::singleShot().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.KillTimer(System.Int32)">
            <summary>
            <para>Kills the timer with timer identifier, id.</para>
            <para>The timer identifier is returned by startTimer() when a timer
            event is started.</para>
            <para>See also timerEvent() and startTimer().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.InstallEventFilter(QtCore.QObject)">
            <summary>
            <para>Installs an event filter filterObj on this object. For
            example:</para>
            <para>monitoredObj-&gt;installEventFilter(filterObj);</para>
            <para>An event filter is an object that receives all events that are
            sent to this object. The filter can either stop the event or forward it to
            this object. The event filter filterObj receives events via its
            eventFilter() function. The eventFilter() function must return true if the
            event should be filtered, (i.e. stopped); otherwise it must return
            false.</para>
            <para>If multiple event filters are installed on a single object, the
            filter that was installed last is activated first.</para>
            <para>Here's a KeyPressEater class that eats the key presses of its
            monitored objects:</para>
            <para>class KeyPressEater : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    ...</para>
            <para></para>
            <para>protected:</para>
            <para>    bool eventFilter(QObject *obj, QEvent *event);</para>
            <para>};</para>
            <para></para>
            <para>bool KeyPressEater::eventFilter(QObject *obj, QEvent
            *event)</para>
            <para>{</para>
            <para>    if (event-&gt;type() == QEvent::KeyPress) {</para>
            <para>        QKeyEvent *keyEvent = static_cast&lt;QKeyEvent
            *&gt;(event);</para>
            <para>        qDebug(&quot;Ate key press %d&quot;,
            keyEvent-&gt;key());</para>
            <para>        return true;</para>
            <para>    } else {</para>
            <para>        // standard event processing</para>
            <para>        return QObject::eventFilter(obj, event);</para>
            <para>    }</para>
            <para>}</para>
            <para>And here's how to install it on two widgets:</para>
            <para>KeyPressEater *keyPressEater = new KeyPressEater(this);</para>
            <para>QPushButton *pushButton = new QPushButton(this);</para>
            <para>QListView *listView = new QListView(this);</para>
            <para></para>
            <para>pushButton-&gt;installEventFilter(keyPressEater);</para>
            <para>listView-&gt;installEventFilter(keyPressEater);</para>
            <para>The QShortcut class, for example, uses this technique to
            intercept shortcut key presses.</para>
            <para>Warning: If you delete the receiver object in your eventFilter()
            function, be sure to return true. If you return false, Qt sends the event
            to the deleted object and the program will crash.</para>
            <para>Note that the filtering object must be in the same thread as this
            object. If filterObj is in a different thread, this function does nothing.
            If either filterObj or this object are moved to a different thread after
            calling this function, the event filter will not be called until both
            objects have the same thread affinity again (it is not removed).</para>
            <para>See also removeEventFilter(), eventFilter(), and event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.RemoveEventFilter(QtCore.QObject)">
            <summary>
            <para>Removes an event filter object obj from this object. The request
            is ignored if such an event filter has not been installed.</para>
            <para>All event filters for this object are automatically removed when
            this object is destroyed.</para>
            <para>It is always safe to remove an event filter, even during event
            filter activation (i.e. from the eventFilter() function).</para>
            <para>See also installEventFilter(), eventFilter(), and event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Connect(QtCore.QObject,System.String,System.String,QtCore.Qt.ConnectionType)">
            <summary>
            <para>This function overloads connect().</para>
            <para>Connects signal from the sender object to this object's
            method.</para>
            <para>Equivalent to connect(sender, signal, this, method, type).</para>
            <para>Every connection you make emits a signal, so duplicate
            connections emit two signals. You can break a connection using
            disconnect().</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also disconnect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Disconnect(System.String,QtCore.QObject,System.String)">
            <summary>
            <para>This function overloads disconnect().</para>
            <para>Disconnects signal from method of receiver.</para>
            <para>A signal-slot connection is removed when either of the objects
            involved are destroyed.</para>
            <para>Note: This function is thread-safe.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Disconnect(QtCore.QObject,System.String)">
            <summary>
            <para>This function overloads disconnect().</para>
            <para>Disconnects all signals in this object from receiver's
            method.</para>
            <para>A signal-slot connection is removed when either of the objects
            involved are destroyed.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.DumpObjectTree">
            <summary>
            <para>Dumps a tree of children to the debug output.</para>
            <para>This function is useful for debugging, but does nothing if the
            library has been compiled in release mode (i.e. without debugging
            information).</para>
            <para>See also dumpObjectInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.DumpObjectInfo">
            <summary>
            <para>Dumps information about signal connections, etc. for this object
            to the debug output.</para>
            <para>This function is useful for debugging, but does nothing if the
            library has been compiled in release mode (i.e. without debugging
            information).</para>
            <para>See also dumpObjectTree().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.SetProperty(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the value of the object's name property to value.</para>
            <para>If the property is defined in the class using Q_PROPERTY then
            true is returned on success and false otherwise. If the property is not
            defined using Q_PROPERTY, and therefore not listed in the meta-object, it
            is added as a dynamic property and false is returned.</para>
            <para>Information about all available properties is provided through
            the metaObject() and dynamicPropertyNames().</para>
            <para>Dynamic properties can be queried again using property() and can
            be removed by setting the property value to an invalid QVariant. Changing
            the value of a dynamic property causes a QDynamicPropertyChangeEvent to be
            sent to the object.</para>
            <para>Note: Dynamic properties starting with &quot;_q_&quot; are
            reserved for internal purposes.</para>
            <para>See also property(), metaObject(), and
            dynamicPropertyNames().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Property(System.String)">
            <summary>
            <para>Returns the value of the object's name property.</para>
            <para>If no such property exists, the returned variant is
            invalid.</para>
            <para>Information about all available properties is provided through
            the metaObject() and dynamicPropertyNames().</para>
            <para>See also setProperty(), QVariant::isValid(), metaObject(), and
            dynamicPropertyNames().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Inherits(System.String)">
            <summary>
            <para>Returns true if this object is an instance of a class that
            inherits className or a QObject subclass that inherits className; otherwise
            returns false.</para>
            <para>A class is considered to inherit itself.</para>
            <para>Example:</para>
            <para>QTimer *timer = new QTimer;         // QTimer inherits
            QObject</para>
            <para>timer-&gt;inherits(&quot;QTimer&quot;);          // returns
            true</para>
            <para>timer-&gt;inherits(&quot;QObject&quot;);         // returns
            true</para>
            <para>timer-&gt;inherits(&quot;QAbstractButton&quot;); // returns
            false</para>
            <para></para>
            <para>// QVBoxLayout inherits QObject and QLayoutItem</para>
            <para>QVBoxLayout *layout = new QVBoxLayout;</para>
            <para>layout-&gt;inherits(&quot;QObject&quot;);        // returns
            true</para>
            <para>layout-&gt;inherits(&quot;QLayoutItem&quot;);    // returns true
            (even though QLayoutItem is not a QObject)</para>
            <para>If you need to determine whether an object is an instance of a
            particular class for the purpose of casting it, consider using
            qobject_cast&lt;Type *&gt;(object) instead.</para>
            <para>See also metaObject() and qobject_cast().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.DeleteLater">
            <summary>
            <para>Schedules this object for deletion.</para>
            <para>The object will be deleted when control returns to the event
            loop. If the event loop is not running when this function is called (e.g.
            deleteLater() is called on an object before QCoreApplication::exec()), the
            object will be deleted once the event loop is started. If deleteLater() is
            called after the main event loop has stopped, the object will not be
            deleted. Since Qt 4.8, if deleteLater() is called on an object that lives
            in a thread with no running event loop, the object will be destroyed when
            the thread finishes.</para>
            <para>Note that entering and leaving a new event loop (e.g., by opening
            a modal dialog) will not perform the deferred deletion; for the object to
            be deleted, the control must return to the event loop from which
            deleteLater() was called.</para>
            <para>Note: It is safe to call this function more than once; when the
            first deferred deletion event is delivered, any pending events for the
            object are removed from the event queue.</para>
            <para>See also destroyed() and QPointer.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Receivers(System.String)">
            <summary>
            <para>Returns the number of receivers connected to the signal.</para>
            <para>Since both slots and signals can be used as receivers for
            signals, and the same connections can be made many times, the number of
            receivers is the same as the number of connections made from this
            signal.</para>
            <para>When calling this function, you can use the SIGNAL() macro to
            pass a specific signal:</para>
            <para>if (receivers(SIGNAL(valueChanged(QByteArray))) &gt; 0) {</para>
            <para>    QByteArray data;</para>
            <para>    get_the_value(&amp;data);       // expensive operation</para>
            <para>    emit valueChanged(data);</para>
            <para>}</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, it might be useful when you need to perform expensive
            initialization only if something is connected to a signal.</para>
            <para>See also isSignalConnected().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.IsSignalConnected(QtCore.QMetaMethod)">
            <summary>
            <para>Returns true if the signal is connected to at least one receiver,
            otherwise returns false.</para>
            <para>signal must be a signal member of this object, otherwise the
            behaviour is undefined.</para>
            <para>static const QMetaMethod valueChangedSignal =
            QMetaMethod::fromSignal(&amp;MyObject::valueChanged);</para>
            <para>if (isSignalConnected(valueChangedSignal)) {</para>
            <para>    QByteArray data;</para>
            <para>    data = get_the_value();       // expensive operation</para>
            <para>    emit valueChanged(data);</para>
            <para>}</para>
            <para>As the code snippet above illustrates, you can use this function
            to avoid emitting a signal that nobody listens to.</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, it might be useful when you need to perform expensive
            initialization only if something is connected to a signal.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            timer events for the object.</para>
            <para>QTimer provides a higher-level interface to the timer
            functionality, and also more general information about timers. The timer
            event is passed in the event parameter.</para>
            <para>See also startTimer(), killTimer(), and event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.OnChildEvent(QtCore.QChildEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            child events. The event is passed in the event parameter.</para>
            <para>QEvent::ChildAdded and QEvent::ChildRemoved events are sent to
            objects when children are added or removed. In both cases you can only rely
            on the child being a QObject, or if isWidgetType() returns true, a QWidget.
            (This is because, in the ChildAdded case, the child is not yet fully
            constructed, and in the ChildRemoved case it might have been destructed
            already).</para>
            <para>QEvent::ChildPolished events are sent to widgets when children
            are polished, or when polished children are added. If you receive a child
            polished event, the child's construction is usually completed. However,
            this is not guaranteed, and multiple polish events may be delivered during
            the execution of a widget's constructor.</para>
            <para>For every child widget, you receive one ChildAdded event, zero or
            more ChildPolished events, and one ChildRemoved event.</para>
            <para>The ChildPolished event is omitted if a child is removed
            immediately after it is added. If a child is polished several times during
            construction and destruction, you may receive several child polished events
            for the same child, each time with a different virtual table.</para>
            <para>See also event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.OnCustomEvent(QtCore.QEvent)">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive
            custom events. Custom events are user-defined events with a type value at
            least as large as the QEvent::User item of the QEvent::Type enum, and is
            typically a QEvent subclass. The event is passed in the event
            parameter.</para>
            <para>See also event() and QEvent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.ConnectNotify(QtCore.QMetaMethod)">
            <summary>
            <para>This virtual function is called when something has been connected
            to signal in this object.</para>
            <para>If you want to compare signal with a specific signal, you can use
            QMetaMethod::fromSignal() as follows:</para>
            <para>if (signal ==
            QMetaMethod::fromSignal(&amp;MyObject::valueChanged)) {</para>
            <para>    // signal is valueChanged</para>
            <para>}</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, it might be useful when you need to perform expensive
            initialization only if something is connected to a signal.</para>
            <para>Warning: This function is called from the thread which performs
            the connection, which may be a different thread from the thread in which
            this object lives.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also connect() and disconnectNotify().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.DisconnectNotify(QtCore.QMetaMethod)">
            <summary>
            <para>This virtual function is called when something has been
            disconnected from signal in this object.</para>
            <para>See connectNotify() for an example of how to compare signal with
            a specific signal.</para>
            <para>If all signals were disconnected from this object (e.g., the
            signal argument to disconnect() was 0), disconnectNotify() is only called
            once, and the signal will be an invalid QMetaMethod (QMetaMethod::isValid()
            returns false).</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, it might be useful for optimizing access to expensive
            resources.</para>
            <para>Warning: This function is called from the thread which performs
            the disconnection, which may be a different thread from the thread in which
            this object lives. This function may also be called with a QObject internal
            mutex locked. It is therefore not allowed to re-enter any of any QObject
            functions from your reimplementation and if you lock a mutex in your
            reimplementation, make sure that you don't call QObject functions with that
            mutex held in other places or it will result in a deadlock.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also disconnect() and connectNotify().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Tr(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, optionally based on a
            disambiguation string and value of n for strings containing plurals;
            otherwise returns sourceText itself if no appropriate translated string is
            available.</para>
            <para>Example:</para>
            <para>void MainWindow::createMenus()</para>
            <para>{</para>
            <para>    fileMenu =
            menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));</para>
            <para>    ...</para>
            <para>If the same sourceText is used in different roles within the same
            context, an additional identifying string may be passed in disambiguation
            (0 by default). In Qt 4.4 and earlier, this was the preferred way to pass
            comments to translators.</para>
            <para>Example:</para>
            <para>MyWindow::MyWindow()</para>
            <para>{</para>
            <para>    QLabel *senderLabel = new
            QLabel(tr(&quot;Name:&quot;));</para>
            <para>    QLabel *recipientLabel = new QLabel(tr(&quot;Name:&quot;,
            &quot;recipient&quot;));</para>
            <para>    ...</para>
            <para>See Writing Source Code for Translation for a detailed
            description of Qt's translation mechanisms in general, and the
            Disambiguation section for information on disambiguation.</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>See also trUtf8(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Connect(QtCore.QObject,System.String,QtCore.QObject,System.String,QtCore.Qt.ConnectionType)">
            <summary>
            <para>Creates a connection of the given type from the signal in the
            sender object to the method in the receiver object. Returns a handle to the
            connection that can be used to disconnect it later.</para>
            <para>You must use the SIGNAL() and SLOT() macros when specifying the
            signal and the method, for example:</para>
            <para>QLabel *label = new QLabel;</para>
            <para>QScrollBar *scrollBar = new QScrollBar;</para>
            <para>QObject::connect(scrollBar, SIGNAL(valueChanged(int)),</para>
            <para>                 label,  SLOT(setNum(int)));</para>
            <para>This example ensures that the label always displays the current
            scroll bar value. Note that the signal and slots parameters must not
            contain any variable names, only the type. E.g. the following would not
            work and return false:</para>
            <para>// WRONG</para>
            <para>QObject::connect(scrollBar, SIGNAL(valueChanged(int
            value)),</para>
            <para>                 label, SLOT(setNum(int value)));</para>
            <para>A signal can also be connected to another signal:</para>
            <para>class MyWidget : public QWidget</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para></para>
            <para>public:</para>
            <para>    MyWidget();</para>
            <para></para>
            <para>signals:</para>
            <para>    void buttonClicked();</para>
            <para></para>
            <para>private:</para>
            <para>    QPushButton *myButton;</para>
            <para>};</para>
            <para></para>
            <para>MyWidget::MyWidget()</para>
            <para>{</para>
            <para>    myButton = new QPushButton(this);</para>
            <para>    connect(myButton, SIGNAL(clicked()),</para>
            <para>            this, SIGNAL(buttonClicked()));</para>
            <para>}</para>
            <para>In this example, the MyWidget constructor relays a signal from a
            private member variable, and makes it available under a name that relates
            to MyWidget.</para>
            <para>A signal can be connected to many slots and signals. Many signals
            can be connected to one slot.</para>
            <para>If a signal is connected to several slots, the slots are
            activated in the same order in which the connections were made, when the
            signal is emitted.</para>
            <para>The function returns a QMetaObject::Connection that represents a
            handle to a connection if it successfully connects the signal to the slot.
            The connection handle will be invalid if it cannot create the connection,
            for example, if QObject is unable to verify the existence of either signal
            or method, or if their signatures aren't compatible. You can check if the
            handle is valid by casting it to a bool.</para>
            <para>By default, a signal is emitted for every connection you make;
            two signals are emitted for duplicate connections. You can break all of
            these connections with a single disconnect() call. If you pass the
            Qt::UniqueConnection type, the connection will only be made if it is not a
            duplicate. If there is already a duplicate (exact same signal to the exact
            same slot on the same objects), the connection will fail and connect will
            return an invalid QMetaObject::Connection.</para>
            <para>The optional type parameter describes the type of connection to
            establish. In particular, it determines whether a particular signal is
            delivered to a slot immediately or queued for delivery at a later time. If
            the signal is queued, the parameters must be of types that are known to
            Qt's meta-object system, because Qt needs to copy the arguments to store
            them in an event behind the scenes. If you try to use a queued connection
            and get the error message</para>
            <para>QObject::connect: Cannot queue arguments of type 'MyType'</para>
            <para>(Make sure 'MyType' is registered using
            qRegisterMetaType().)</para>
            <para>call qRegisterMetaType() to register the data type before you
            establish the connection.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also disconnect(), sender(), qRegisterMetaType(), and
            Q_DECLARE_METATYPE().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Connect(QtCore.QObject,QtCore.QMetaMethod,QtCore.QObject,QtCore.QMetaMethod,QtCore.Qt.ConnectionType)">
            <summary>
            <para>Creates a connection of the given type from the signal in the
            sender object to the method in the receiver object. Returns a handle to the
            connection that can be used to disconnect it later.</para>
            <para>The Connection handle will be invalid if it cannot create the
            connection, for example, the parameters were invalid. You can check if the
            QMetaObject::Connection is valid by casting it to a bool.</para>
            <para>This function works in the same way as connect(const QObject
            *sender, const char *signal, const QObject *receiver, const char *method,
            Qt::ConnectionType type) but it uses QMetaMethod to specify signal and
            method.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also connect(const QObject *sender, const char *signal, const
            QObject *receiver, const char *method, Qt::ConnectionType type).</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Disconnect(QtCore.QObject,System.String,QtCore.QObject,System.String)">
            <summary>
            <para>Disconnects signal in object sender from method in object
            receiver. Returns true if the connection is successfully broken; otherwise
            returns false.</para>
            <para>A signal-slot connection is removed when either of the objects
            involved are destroyed.</para>
            <para>disconnect() is typically used in three ways, as the following
            examples demonstrate.</para>
            <para></para>
            <para>Disconnect everything connected to an object's
            signals:disconnect(myObject, 0, 0, 0);</para>
            <para>equivalent to the non-static overloaded function</para>
            <para>myObject-&gt;disconnect();</para>
            <para></para>
            <para>Disconnect everything connected to a specific
            signal:disconnect(myObject, SIGNAL(mySignal()), 0, 0);</para>
            <para>equivalent to the non-static overloaded function</para>
            <para>myObject-&gt;disconnect(SIGNAL(mySignal()));</para>
            <para></para>
            <para>Disconnect a specific receiver:disconnect(myObject, 0,
            myReceiver, 0);</para>
            <para>equivalent to the non-static overloaded function</para>
            <para>myObject-&gt;disconnect(myReceiver);</para>
            <para></para>
            <para></para>
            <para>0 may be used as a wildcard, meaning &quot;any signal&quot;,
            &quot;any receiving object&quot;, or &quot;any slot in the receiving
            object&quot;, respectively.</para>
            <para>The sender may never be 0. (You cannot disconnect signals from
            more than one object in a single call.)</para>
            <para>If signal is 0, it disconnects receiver and method from any
            signal. If not, only the specified signal is disconnected.</para>
            <para>If receiver is 0, it disconnects anything connected to signal. If
            not, slots in objects other than receiver are not disconnected.</para>
            <para>If method is 0, it disconnects anything that is connected to
            receiver. If not, only slots named method will be disconnected, and all
            other slots are left alone. The method must be 0 if receiver is left out,
            so you cannot disconnect a specifically-named slot on all objects.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also connect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Disconnect(QtCore.QObject,QtCore.QMetaMethod,QtCore.QObject,QtCore.QMetaMethod)">
            <summary>
            <para>Disconnects signal in object sender from method in object
            receiver. Returns true if the connection is successfully broken; otherwise
            returns false.</para>
            <para>This function provides the same possibilities like
            disconnect(const QObject *sender, const char *signal, const QObject
            *receiver, const char *method) but uses QMetaMethod to represent the signal
            and the method to be disconnected.</para>
            <para>Additionally this function returnsfalse and no signals and slots
            disconnected if:</para>
            <para></para>
            <para>signal is not a member of sender class or one of its parent
            classes.</para>
            <para>method is not a member of receiver class or one of its parent
            classes.</para>
            <para>signal instance represents not a signal.</para>
            <para></para>
            <para>QMetaMethod() may be used as wildcard in the meaning &quot;any
            signal&quot; or &quot;any slot in receiving object&quot;. In the same way 0
            can be used for receiver in the meaning &quot;any receiving object&quot;.
            In this case method should also be QMetaMethod(). sender parameter should
            be never 0.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also disconnect(const QObject *sender, const char *signal,
            const QObject *receiver, const char *method).</para>
            </summary>
        </member>
        <member name="M:QtCore.QObject.Disconnect(QtCore.QMetaObject.Connection)">
            <summary>
            <para>Disconnect a connection.</para>
            <para>If the connection is invalid or has already been disconnected, do
            nothing and return false.</para>
            <para>See also connect().</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.Destroyed">
            <summary>
            <para>This signal is emitted immediately before the object obj is destroyed, and can not be blocked.</para>
            <para>All the objects's children are destroyed immediately after this signal is emitted.</para>
            <para>See also deleteLater() and QPointer.</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.ObjectNameChanged">
            <summary>
            <para>This property holds the name of this object.</para>
            <para>You can find an object by name (and type) using findChild(). You can find a set of objects with findChildren().</para>
            <para>qDebug(&quot;MyClass::setPrecision(): (%s) invalid precision %f&quot;,</para>
            <para>       qPrintable(objectName()), newPrecision);</para>
            <para>By default, this property contains an empty string.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	objectName() const</para>
            <para> void 	setObjectName(const QString &amp; name)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	objectNameChanged(const QString &amp; objectName)	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also metaObject() and QMetaObject::className().</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.Event">
            <summary>
            <para>This virtual function receives events to an object and should return true if the event e was recognized and processed.</para>
            <para>The event() function can be reimplemented to customize the behavior of an object.</para>
            <para>See also installEventFilter(), timerEvent(), QCoreApplication::sendEvent(), and QCoreApplication::postEvent().</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.TimerEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive timer events for the object.</para>
            <para>QTimer provides a higher-level interface to the timer functionality, and also more general information about timers. The timer event is passed in the event parameter.</para>
            <para>See also startTimer(), killTimer(), and event().</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.ChildEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive child events. The event is passed in the event parameter.</para>
            <para>QEvent::ChildAdded and QEvent::ChildRemoved events are sent to objects when children are added or removed. In both cases you can only rely on the child being a QObject, or if isWidgetType() returns true, a QWidget. (This is because, in the ChildAdded case, the child is not yet fully constructed, and in the ChildRemoved case it might have been destructed already).</para>
            <para>QEvent::ChildPolished events are sent to widgets when children are polished, or when polished children are added. If you receive a child polished event, the child's construction is usually completed. However, this is not guaranteed, and multiple polish events may be delivered during the execution of a widget's constructor.</para>
            <para>For every child widget, you receive one ChildAdded event, zero or more ChildPolished events, and one ChildRemoved event.</para>
            <para>The ChildPolished event is omitted if a child is removed immediately after it is added. If a child is polished several times during construction and destruction, you may receive several child polished events for the same child, each time with a different virtual table.</para>
            <para>See also event().</para>
            </summary>
        </member>
        <member name="E:QtCore.QObject.CustomEvent">
            <summary>
            <para>This event handler can be reimplemented in a subclass to receive custom events. Custom events are user-defined events with a type value at least as large as the QEvent::User item of the QEvent::Type enum, and is typically a QEvent subclass. The event is passed in the event parameter.</para>
            <para>See also event() and QEvent.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.ObjectName">
            <summary>
            <para>This property holds the name of this object.</para>
            <para>You can find an object by name (and type) using findChild(). You
            can find a set of objects with findChildren().</para>
            <para>qDebug(&quot;MyClass::setPrecision(): (%s) invalid precision
            %f&quot;,</para>
            <para>       qPrintable(objectName()), newPrecision);</para>
            <para>By default, this property contains an empty string.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            <para>See also metaObject() and QMetaObject::className().</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.Parent">
            <summary>
            <para>Returns a pointer to the parent object.</para>
            <para>See also setParent() and children().</para>
            <para></para>
            <para>Makes the object a child of parent.</para>
            <para>See also parent() and children().</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.MetaObject">
            <summary>
            <para>Returns a pointer to the meta-object of this object.</para>
            <para>A meta-object contains information about a class that inherits
            QObject, e.g. class name, superclass name, properties, signals and slots.
            Every QObject subclass that contains the Q_OBJECT macro will have a
            meta-object.</para>
            <para>The meta-object information is required by the signal/slot
            connection mechanism and the property system. The inherits() function also
            makes use of the meta-object.</para>
            <para>If you have no pointer to an actual object instance but still
            want to access the meta-object of a class, you can use
            staticMetaObject.</para>
            <para>Example:</para>
            <para>QObject *obj = new QPushButton;</para>
            <para>obj-&gt;metaObject()-&gt;className();             // returns
            &quot;QPushButton&quot;</para>
            <para></para>
            <para>QPushButton::staticMetaObject.className();  // returns
            &quot;QPushButton&quot;</para>
            <para>See also staticMetaObject.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.IsWidgetType">
            <summary>
            <para>Returns true if the object is a widget; otherwise returns
            false.</para>
            <para>Calling this function is equivalent to calling
            inherits(&quot;QWidget&quot;), except that it is much faster.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.IsWindowType">
            <summary>
            <para>Returns true if the object is a window; otherwise returns
            false.</para>
            <para>Calling this function is equivalent to calling
            inherits(&quot;QWindow&quot;), except that it is much faster.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.SignalsBlocked">
            <summary>
            <para>Returns true if signals are blocked; otherwise returns
            false.</para>
            <para>Signals are not blocked by default.</para>
            <para>See also blockSignals().</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.Thread">
            <summary>
            <para>Returns the thread in which the object lives.</para>
            <para>See also moveToThread().</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.Sender">
            <summary>
            <para>Returns a pointer to the object that sent the signal, if called
            in a slot activated by a signal; otherwise it returns 0. The pointer is
            valid only during the execution of the slot that calls this function from
            this object's thread context.</para>
            <para>The pointer returned by this function becomes invalid if the
            sender is destroyed, or if the slot is disconnected from the sender's
            signal.</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, getting access to the sender might be useful when many
            signals are connected to a single slot.</para>
            <para>Warning: As mentioned above, the return value of this function is
            not valid when the slot is called via a Qt::DirectConnection from a thread
            different from this object's thread. Do not use this function in this type
            of scenario.</para>
            <para>See also senderSignalIndex() and QSignalMapper.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObject.SenderSignalIndex">
            <summary>
            <para>Returns the meta-method index of the signal that called the
            currently executing slot, which is a member of the class returned by
            sender(). If called outside of a slot activated by a signal, -1 is
            returned.</para>
            <para>For signals with default parameters, this function will always
            return the index with all parameters, regardless of which was used with
            connect(). For example, the signal destroyed(QObject *obj = 0) will have
            two different indexes (with and without the parameter), but this function
            will always return the index with a parameter. This does not apply when
            overloading signals with different parameters.</para>
            <para>Warning: This function violates the object-oriented principle of
            modularity. However, getting access to the signal index might be useful
            when many signals are connected to a single slot.</para>
            <para>Warning: The return value of this function is not valid when the
            slot is called via a Qt::DirectConnection from a thread different from this
            object's thread. Do not use this function in this type of scenario.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also sender(), QMetaObject::indexOfSignal(), and
            QMetaObject::method().</para>
            </summary>
        </member>
        <member name="T:QtCore.QChar">
            <summary>
            <para>The QChar class provides a 16-bit Unicode character.</para>
            </summary>
            <remarks>
            <para>In Qt, Unicode characters are 16-bit entities without any markup
            or structure. This class represents such an entity. It is lightweight, so
            it can be used everywhere. Most compilers treat it like a unsigned
            short.</para>
            <para>QChar provides a full complement of testing/classification
            functions, converting to and from other formats, converting from composed
            to decomposed Unicode, and trying to compare and case-convert if you ask it
            to.</para>
            <para>The classification functions include functions like those in the
            standard C++ header &lt;cctype&gt; (formerly &lt;ctype.h&gt;), but
            operating on the full range of Unicode characters, not just for the ASCII
            range. They all return true if the character is a certain type of
            character; otherwise they return false. These classification functions are
            isNull() (returns true if the character is '\0'), isPrint() (true if the
            character is any sort of printable character, including whitespace),
            isPunct() (any sort of punctation), isMark() (Unicode Mark), isLetter() (a
            letter), isNumber() (any sort of numeric character, not just 0-9),
            isLetterOrNumber(), and isDigit() (decimal digits). All of these are
            wrappers around category() which return the Unicode-defined category of
            each character. Some of these also calculate the derived properties (for
            example isSpace() returns true if the character is of category Separator_*
            or an exceptional code point from Other_Control category).</para>
            <para>QChar also provides direction(), which indicates the
            &quot;natural&quot; writing direction of this character. The joiningType()
            function indicates how the character joins with it's neighbors (needed
            mostly for Arabic or Syriac) and finally hasMirrored(), which indicates
            whether the character needs to be mirrored when it is printed in it's
            &quot;unnatural&quot; writing direction.</para>
            <para>Composed Unicode characters (like ring) can be converted to
            decomposed Unicode (&quot;a&quot; followed by &quot;ring above&quot;) by
            using decomposition().</para>
            <para>In Unicode, comparison is not necessarily possible and case
            conversion is very difficult at best. Unicode, covering the
            &quot;entire&quot; world, also includes most of the world's case and
            sorting problems. operator==() and friends will do comparison based purely
            on the numeric Unicode value (code point) of the characters, and toUpper()
            and toLower() will do case changes when the character has a well-defined
            uppercase/lowercase equivalent. For locale-dependent comparisons, use
            QString::localeAwareCompare().</para>
            <para>The conversion functions include unicode() (to a scalar),
            toLatin1() (to scalar, but converts all non-Latin-1 characters to 0), row()
            (gives the Unicode row), cell() (gives the Unicode cell), digitValue()
            (gives the integer value of any of the numerous digit characters), and a
            host of constructors.</para>
            <para>QChar provides constructors and cast operators that make it easy
            to convert to and from traditional 8-bit chars. If you defined
            QT_NO_CAST_FROM_ASCII and QT_NO_CAST_TO_ASCII, as explained in the QString
            documentation, you will need to explicitly call fromLatin1(), or use
            QLatin1Char, to construct a QChar from an 8-bit char, and you will need to
            call toLatin1() to get the 8-bit value back.</para>
            <para>For more information see &quot;About the Unicode Character
            Database&quot;.</para>
            <para></para>
            <para>See also Unicode, QString, and QLatin1Char.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QChar.#ctor">
            <summary>
            <para>Constructs a null QChar ('\0').</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.UInt16)">
            <summary>
            <para>Constructs a QChar for the character with Unicode code point
            code.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.Byte,System.Byte)">
            <summary>
            <para>Constructs a QChar for Unicode cell cell in row row.</para>
            <para>See also cell() and row().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.Int16)">
            <summary>
            <para>Constructs a QChar for the character with Unicode code point
            code.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.UInt32)">
            <summary>
            <para>Constructs a QChar for the character with Unicode code point
            code.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.Int32)">
            <summary>
            <para>Constructs a QChar for the character with Unicode code point
            code.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(QtCore.QChar.SpecialCharacter)">
            <summary>
            <para>Constructs a QChar for the predefined character value ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(QtCore.QLatin1Char)">
            <summary>
            <para>Constructs a QChar corresponding to ASCII/Latin-1 character
            ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.Char)">
            <summary>
            <para>Constructs a QChar corresponding to ASCII/Latin-1 character
            ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.#ctor(System.Byte)">
            <summary>
            <para>Constructs a QChar corresponding to ASCII/Latin-1 character
            ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.category">
            <summary>
            <para>Returns the character's category.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.direction">
            <summary>
            <para>Returns the character's direction.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.joiningType">
            <summary>
            <para>Returns information about the joining type attributes of the
            character (needed for certain languages such as Arabic or Syriac).</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.joining">
            <summary>
            <para>Returns information about the joining properties of the character
            (needed for certain languages such as Arabic).</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.combiningClass">
            <summary>
            <para>Returns the combining class for the character as defined in the
            Unicode standard. This is mainly useful as a positioning hint for marks
            attached to a base character.</para>
            <para>The Qt text rendering engine uses this information to correctly
            position non-spacing marks around a base character.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.MirroredChar">
            <summary>
            <para>Returns the mirrored character if this character is a mirrored
            character; otherwise returns the character itself.</para>
            <para>See also hasMirrored().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.HasMirrored">
            <summary>
            <para>Returns true if the character should be reversed if the text
            direction is reversed; otherwise returns false.</para>
            <para>A bit faster equivalent of (ch.mirroredChar() != ch).</para>
            <para>See also mirroredChar().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.decomposition">
            <summary>
            <para>Decomposes a character into it's constituent parts. Returns an
            empty string if no decomposition exists.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.DecompositionTag">
            <summary>
            <para>Returns the tag defining the composition of the character.
            Returns QChar::NoDecomposition if no decomposition exists.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.DigitValue">
            <summary>
            <para>Returns the numeric value of the digit, or -1 if the character is
            not a digit.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToLower">
            <summary>
            <para>Returns the lowercase equivalent if the character is uppercase or
            titlecase; otherwise returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToUpper">
            <summary>
            <para>Returns the uppercase equivalent if the character is lowercase or
            titlecase; otherwise returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToTitleCase">
            <summary>
            <para>Returns the title case equivalent if the character is lowercase
            or uppercase; otherwise returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToCaseFolded">
            <summary>
            <para>Returns the case folded equivalent of the character. For most
            Unicode characters this is the same as toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.script">
            <summary>
            <para>Returns the Unicode script property value for this
            character.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.unicodeVersion">
            <summary>
            <para>Returns the Unicode version that introduced this
            character.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToLatin1">
            <summary>
            <para>Returns the Latin-1 character equivalent to the QChar, or 0. This
            is mainly useful for non-internationalized software.</para>
            <para>Note: It is not possible to distinguish a non-Latin-1 character
            from a Latin-1 0 (NUL) character. Prefer to use unicode(), which does not
            have this ambiguity.</para>
            <para>See also unicode().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsPrint">
            <summary>
            <para>Returns true if the character is a printable character; otherwise
            returns false. This is any character not of category Other_*.</para>
            <para>Note that this gives no indication of whether the character is
            available in a particular font.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSpace">
            <summary>
            <para>Returns true if the character is a separator character
            (Separator_* categories or certain code points from Other_Control
            category); otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsMark">
            <summary>
            <para>Returns true if the character is a mark (Mark_* categories);
            otherwise returns false.</para>
            <para>See QChar::Category for more information regarding marks.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsPunct">
            <summary>
            <para>Returns true if the character is a punctuation mark
            (Punctuation_* categories); otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSymbol">
            <summary>
            <para>Returns true if the character is a symbol (Symbol_* categories);
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLetter">
            <summary>
            <para>Returns true if the character is a letter (Letter_* categories);
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsNumber">
            <summary>
            <para>Returns true if the character is a number (Number_* categories,
            not just 0-9); otherwise returns false.</para>
            <para>See also isDigit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLetterOrNumber">
            <summary>
            <para>Returns true if the character is a letter or number (Letter_* or
            Number_* categories); otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsDigit">
            <summary>
            <para>Returns true if the character is a decimal digit
            (Number_DecimalDigit); otherwise returns false.</para>
            <para>See also isNumber().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLower">
            <summary>
            <para>Returns true if the character is a lowercase letter, for example
            category() is Letter_Lowercase.</para>
            <para>See also isUpper(), toLower(), and toUpper().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsUpper">
            <summary>
            <para>Returns true if the character is an uppercase letter, for example
            category() is Letter_Uppercase.</para>
            <para>See also isLower(), toUpper(), and toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsTitleCase">
            <summary>
            <para>Returns true if the character is a titlecase letter, for example
            category() is Letter_Titlecase.</para>
            <para>See also isLower(), toUpper(), toLower(), and
            toTitleCase().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsNonCharacter">
            <summary>
            <para>Returns true if the QChar is a non-character; false
            otherwise.</para>
            <para>Unicode has a certain number of code points that are classified
            as &quot;non-characters:&quot; that is, they can be used for internal
            purposes in applications but cannot be used for text interchange. Those are
            the last two entries each Unicode Plane ([0xfffe..0xffff],
            [0x1fffe..0x1ffff], etc.) as well as the entries in range
            [0xfdd0..0xfdef].</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsHighSurrogate">
            <summary>
            <para>Returns true if the QChar is the high part of a UTF16 surrogate
            (for example if its code point is in range [0xd800..0xdbff]); false
            otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLowSurrogate">
            <summary>
            <para>Returns true if the QChar is the low part of a UTF16 surrogate
            (for example if its code point is in range [0xdc00..0xdfff]); false
            otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSurrogate">
            <summary>
            <para>Returns true if the QChar contains a code point that is in either
            the high or the low part of the UTF-16 surrogate range (for example if its
            code point is in range [0xd800..0xdfff]); false otherwise.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.FromLatin1(System.Char)">
            <summary>
            <para>Converts the Latin-1 character c to its equivalent QChar. This is
            mainly useful for non-internationalized software.</para>
            <para>An alternative is to use QLatin1Char.</para>
            <para>See also toLatin1() and unicode().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsNonCharacter(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a non-character; false otherwise.</para>
            <para>Unicode has a certain number of code points that are classified
            as &quot;non-characters:&quot; that is, they can be used for internal
            purposes in applications but cannot be used for text interchange. Those are
            the last two entries each Unicode Plane ([0xfffe..0xffff],
            [0x1fffe..0x1ffff], etc.) as well as the entries in range
            [0xfdd0..0xfdef].</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsHighSurrogate(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            the high part of a UTF16 surrogate (for example if its code point is in
            range [0xd800..0xdbff]); false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLowSurrogate(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            the low part of a UTF16 surrogate (for example if its code point is in
            range [0xdc00..0xdfff]); false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSurrogate(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4
            contains a code point that is in either the high or the low part of the
            UTF-16 surrogate range (for example if its code point is in range
            [0xd800..0xdfff]); false otherwise.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.RequiresSurrogates(System.UInt32)">
            <summary>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 can
            be split into the high and low parts of a UTF16 surrogate (for example if
            its code point is greater than or equals to 0x10000); false
            otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.SurrogateToUcs4(System.UInt16,System.UInt16)">
            <summary>
            <para>Converts a UTF16 surrogate pair with the given high and low
            values to it's UCS-4-encoded code point.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.SurrogateToUcs4(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts a UTF16 surrogate pair (high, low) to it's UCS-4-encoded
            code point.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.HighSurrogate(System.UInt32)">
            <summary>
            <para>Returns the high surrogate part of a UCS-4-encoded code point.
            The returned result is undefined if ucs4 is smaller than 0x10000.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.LowSurrogate(System.UInt32)">
            <summary>
            <para>Returns the low surrogate part of a UCS-4-encoded code point. The
            returned result is undefined if ucs4 is smaller than 0x10000.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.category(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the category of the UCS-4-encoded character specified by
            ucs4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.direction(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the direction of the UCS-4-encoded character specified by
            ucs4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.joiningType(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns information about the joining type attributes of the
            UCS-4-encoded character specified by ucs4 (needed for certain languages
            such as Arabic or Syriac).</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.joining(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns information about the joining properties of the
            UCS-4-encoded character specified by ucs4 (needed for certain languages
            such as Arabic).</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.combiningClass(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the combining class for the UCS-4-encoded character
            specified by ucs4, as defined in the Unicode standard.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.MirroredChar(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the mirrored character if the UCS-4-encoded character
            specified by ucs4 is a mirrored character; otherwise returns the character
            itself.</para>
            <para>See also hasMirrored().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.HasMirrored(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4
            should be reversed if the text direction is reversed; otherwise returns
            false.</para>
            <para>A bit faster equivalent of (QChar::mirroredChar(ucs4) !=
            ucs4).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also mirroredChar().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.decomposition(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Decomposes the UCS-4-encoded character specified by ucs4 into
            it's constituent parts. Returns an empty string if no decomposition
            exists.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.DecompositionTag(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the tag defining the composition of the UCS-4-encoded
            character specified by ucs4. Returns QChar::NoDecomposition if no
            decomposition exists.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.DigitValue(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the numeric value of the digit specified by the
            UCS-4-encoded character, ucs4, or -1 if the character is not a
            digit.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToLower(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the lowercase equivalent of the UCS-4-encoded character
            specified by ucs4 if the character is uppercase or titlecase; otherwise
            returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToUpper(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the uppercase equivalent of the UCS-4-encoded character
            specified by ucs4 if the character is lowercase or titlecase; otherwise
            returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToTitleCase(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the title case equivalent of the UCS-4-encoded character
            specified by ucs4 if the character is lowercase or uppercase; otherwise
            returns the character itself.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.ToCaseFolded(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the case folded equivalent of the UCS-4-encoded character
            specified by ucs4. For most Unicode characters this is the same as
            toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.script(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the Unicode script property value for the character
            specified in its UCS-4-encoded form as ucs4.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.unicodeVersion(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the Unicode version that introduced the character
            specified in its UCS-4-encoded form as ucs4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsPrint(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a printable character; otherwise returns false. This is any character not
            of category Other_*.</para>
            <para>Note that this gives no indication of whether the character is
            available in a particular font.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSpace(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a separator character (Separator_* categories or certain code points from
            Other_Control category); otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsMark(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a mark (Mark_* categories); otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsPunct(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a punctuation mark (Punctuation_* categories); otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsSymbol(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a symbol (Symbol_* categories); otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLetter(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a letter (Letter_* categories); otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsNumber(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a number (Number_* categories, not just 0-9); otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isDigit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLetterOrNumber(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a letter or number (Letter_* or Number_* categories); otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsDigit(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a decimal digit (Number_DecimalDigit); otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isNumber().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsLower(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a lowercase letter, for example category() is Letter_Lowercase.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isUpper(), toLower(), and toUpper().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsUpper(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            an uppercase letter, for example category() is Letter_Uppercase.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isLower(), toUpper(), and toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.IsTitleCase(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the UCS-4-encoded character specified by ucs4 is
            a titlecase letter, for example category() is Letter_Titlecase.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isLower(), toUpper(), toLower(), and
            toTitleCase().</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_Equality(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if c1 and c2 are the same Unicode character;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_LessThan(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if the numeric Unicode value of c1 is less than that
            of c2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_Inequality(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if c1 and c2 are not the same Unicode character;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_GreaterThanOrEqual(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if the numeric Unicode value of c1 is greater than
            or equal to that of c2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_GreaterThan(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if the numeric Unicode value of c1 is greater than
            that of c2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QChar.op_LessThanOrEqual(QtCore.QChar,QtCore.QChar)">
            <summary>
            <para>Returns true if the numeric Unicode value of c1 is less than or
            equal to that of c2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChar.Cell">
            <summary>
            <para>Returns the cell (least significant byte) of the Unicode
            character.</para>
            <para>See also row().</para>
            </summary>
        </member>
        <member name="P:QtCore.QChar.Row">
            <summary>
            <para>Returns the row (most significant byte) of the Unicode
            character.</para>
            <para>See also cell().</para>
            </summary>
        </member>
        <member name="P:QtCore.QChar.Unicode">
            <summary>
            <para>Returns a reference to the numeric Unicode value of the
            QChar.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChar.IsNull">
            <summary>
            <para>Returns true if the character is the Unicode character 0x0000
            ('\0'); otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChar.CurrentUnicodeVersion">
            <summary>
            <para>Returns the most recent supported Unicode version.</para>
            </summary>
        </member>
        <member name="F:QtCore.QChar.SpecialCharacter.Null">
            <summary>A QChar with this value isNull().</summary>
        </member>
        <member name="F:QtCore.QChar.SpecialCharacter.Tabulation">
            <summary>Character tabulation.</summary>
        </member>
        <member name="F:QtCore.QChar.SpecialCharacter.Nbsp">
            <summary>Non-breaking space.</summary>
        </member>
        <member name="F:QtCore.QChar.SpecialCharacter.ReplacementCharacter">
            <summary>The character shown when a font has no glyph for a certain codepoint. A special question mark character is often used. Codecs use this codepoint when input data cannot be represented in Unicode.</summary>
        </member>
        <member name="F:QtCore.QChar.SpecialCharacter.ObjectReplacementCharacter">
            <summary>Used to represent an object such as an image when such objects cannot be presented.</summary>
        </member>
        <member name="T:QtCore.QChar.Category">
            <summary>
            <para>This enum maps the Unicode character categories.</para>
            <para>The following characters are normative in Unicode:</para>
            <para>The following categories are informative in Unicode:</para>
            <para>See also category().</para>
            </summary>
        </member>
        <member name="F:QtCore.QChar.Category.Mark_NonSpacing">
            <summary>Unicode class name Mn</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Mark_SpacingCombining">
            <summary>Unicode class name Mc</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Mark_Enclosing">
            <summary>Unicode class name Me</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Number_DecimalDigit">
            <summary>Unicode class name Nd</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Number_Letter">
            <summary>Unicode class name Nl</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Number_Other">
            <summary>Unicode class name No</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Separator_Space">
            <summary>Unicode class name Zs</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Separator_Line">
            <summary>Unicode class name Zl</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Separator_Paragraph">
            <summary>Unicode class name Zp</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Other_Control">
            <summary>Unicode class name Cc</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Other_Format">
            <summary>Unicode class name Cf</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Other_Surrogate">
            <summary>Unicode class name Cs</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Other_PrivateUse">
            <summary>Unicode class name Co</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Other_NotAssigned">
            <summary>Unicode class name Cn</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Letter_Uppercase">
            <summary>Unicode class name Lu</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Letter_Lowercase">
            <summary>Unicode class name Ll</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Letter_Titlecase">
            <summary>Unicode class name Lt</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Letter_Modifier">
            <summary>Unicode class name Lm</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Letter_Other">
            <summary>Unicode class name Lo</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_Connector">
            <summary>Unicode class name Pc</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_Dash">
            <summary>Unicode class name Pd</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_Open">
            <summary>Unicode class name Ps</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_Close">
            <summary>Unicode class name Pe</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_InitialQuote">
            <summary>Unicode class name Pi</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_FinalQuote">
            <summary>Unicode class name Pf</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Punctuation_Other">
            <summary>Unicode class name Po</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Symbol_Math">
            <summary>Unicode class name Sm</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Symbol_Currency">
            <summary>Unicode class name Sc</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Symbol_Modifier">
            <summary>Unicode class name Sk</summary>
        </member>
        <member name="F:QtCore.QChar.Category.Symbol_Other">
            <summary>Unicode class name So</summary>
        </member>
        <member name="T:QtCore.QChar.Script">
            <summary>
            <para>This enum type defines the Unicode script property values.</para>
            <para>For details about the Unicode script property values see Unicode
            Standard Annex #24.</para>
            <para>In order to conform to C/C++ naming conventions
            &quot;Script_&quot; is prepended to the codes used in the Unicode
            Standard.</para>
            <para>This enum was introduced or modified in  Qt 5.1.</para>
            <para>See also script().</para>
            </summary>
        </member>
        <member name="F:QtCore.QChar.Script.Script_Unknown">
            <summary>For unassigned, private-use, noncharacter, and surrogate code points.</summary>
        </member>
        <member name="F:QtCore.QChar.Script.Script_Inherited">
            <summary>For characters that may be used with multiple scripts and that inherit their script from the preceding characters. These include nonspacing marks, enclosing marks, and zero width joiner/non-joiner characters.</summary>
        </member>
        <member name="F:QtCore.QChar.Script.Script_Common">
            <summary>For characters that may be used with multiple scripts and that do not inherit their script from the preceding characters.</summary>
        </member>
        <member name="T:QtCore.QChar.Direction">
            <summary>
            <para>This enum type defines the Unicode direction attributes. See the
            Unicode Standard for a description of the values.</para>
            <para>In order to conform to C/C++ naming conventions &quot;Dir&quot;
            is prepended to the codes used in the Unicode Standard.</para>
            <para>See also direction().</para>
            </summary>
        </member>
        <member name="F:QtCore.QChar.Direction.DirLRI">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QChar.Direction.DirRLI">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QChar.Direction.DirFSI">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QChar.Direction.DirPDI">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="T:QtCore.QChar.Decomposition">
            <summary>
            <para>This enum type defines the Unicode decomposition attributes. See
            the Unicode Standard for a description of the values.</para>
            <para>See also decomposition().</para>
            </summary>
        </member>
        <member name="T:QtCore.QChar.JoiningType">
            <summary>
            <para>since 5.3</para>
            <para>This enum type defines the Unicode joining type attributes. See
            the Unicode Standard for a description of the values.</para>
            <para>In order to conform to C/C++ naming conventions
            &quot;Joining_&quot; is prepended to the codes used in the Unicode
            Standard.</para>
            <para>See also joiningType().</para>
            </summary>
        </member>
        <member name="T:QtCore.QChar.Joining">
            <summary>
            <para>This enum type defines the Unicode joining attributes. See the
            Unicode Standard for a description of the values.</para>
            <para>See also joining().</para>
            </summary>
        </member>
        <member name="T:QtCore.QChar.UnicodeVersion">
            <summary>
            <para>Specifies which version of the Unicode standard introduced a
            certain character.</para>
            <para>See also unicodeVersion() and currentUnicodeVersion().</para>
            </summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_Unassigned">
            <summary>The value is not assigned to any character in version 6.3 of Unicode.</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_1_1">
            <summary>Version 1.1</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_2_0">
            <summary>Version 2.0</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_2_1_2">
            <summary>Version 2.1.2</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_3_0">
            <summary>Version 3.0</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_3_1">
            <summary>Version 3.1</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_3_2">
            <summary>Version 3.2</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_4_0">
            <summary>Version 4.0</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_4_1">
            <summary>Version 4.1</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_5_0">
            <summary>Version 5.0</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_5_1">
            <summary>Version 5.1</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_5_2">
            <summary>Version 5.2</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_6_0">
            <summary>Version 6.0</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_6_1">
            <summary>Version 6.1</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_6_2">
            <summary>Version 6.2</summary>
        </member>
        <member name="F:QtCore.QChar.UnicodeVersion.Unicode_6_3">
            <summary>Version 6.3 Since Qt 5.3</summary>
        </member>
        <member name="T:QtCore.QGenericArgument">
            <summary>
            <para>The QGenericArgument class is an internal helper class for
            marshalling arguments.</para>
            </summary>
            <remarks>
            <para>This class should never be used directly. Please use the Q_ARG()
            macro instead.</para>
            <para></para>
            <para>See also Q_ARG(), QMetaObject::invokeMethod(), and
            QGenericReturnArgument.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QGenericArgument.#ctor(System.String,System.IntPtr)">
            <summary>
            <para>Constructs a QGenericArgument object with the given name and
            data.</para>
            </summary>
        </member>
        <member name="P:QtCore.QGenericArgument.Data">
            <summary>
            <para>Returns the data set in the constructor.</para>
            </summary>
        </member>
        <member name="P:QtCore.QGenericArgument.Name">
            <summary>
            <para>Returns the name set in the constructor.</para>
            </summary>
        </member>
        <member name="T:QtCore.QGenericReturnArgument">
            <summary>
            <para>The QGenericReturnArgument class is an internal helper class for
            marshalling arguments.</para>
            </summary>
            <remarks>
            <para>This class should never be used directly. Please use the
            Q_RETURN_ARG() macro instead.</para>
            <para></para>
            <para>See also Q_RETURN_ARG(), QMetaObject::invokeMethod(), and
            QGenericArgument.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QGenericReturnArgument.#ctor(System.String,System.IntPtr)">
            <summary>
            <para>Constructs a QGenericReturnArgument object with the given name
            and data.</para>
            </summary>
        </member>
        <member name="P:QtCore.QGenericReturnArgument.Data">
            <summary>
            <para>Returns the data set in the constructor.</para>
            </summary>
        </member>
        <member name="P:QtCore.QGenericReturnArgument.Name">
            <summary>
            <para>Returns the name set in the constructor.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaObject">
            <summary>
            <para>The QMetaObject class contains meta-information about Qt
            objects.</para>
            </summary>
            <remarks>
            <para>The Qt Meta-Object System in Qt is responsible for the signals
            and slots inter-object communication mechanism, runtime type information,
            and the Qt property system. A single QMetaObject instance is created for
            each QObject subclass that is used in an application, and this instance
            stores all the meta-information for the QObject subclass. This object is
            available as QObject::metaObject().</para>
            <para>This class is not normally required for application programming,
            but it is useful if you write meta-applications, such as scripting engines
            or GUI builders.</para>
            <para>The functions you are most likely to find useful are
            these:</para>
            <para></para>
            <para>className() returns the name of a class.</para>
            <para>superClass() returns the superclass's meta-object.</para>
            <para>method() and methodCount() provide information about a class's
            meta-methods (signals, slots and other invokable member functions).</para>
            <para>enumerator() and enumeratorCount() and provide information about
            a class's enumerators.</para>
            <para>propertyCount() and property() provide information about a
            class's properties.</para>
            <para>constructor() and constructorCount() provide information about a
            class's meta-constructors.</para>
            <para></para>
            <para>The index functions indexOfConstructor(), indexOfMethod(),
            indexOfEnumerator(), and indexOfProperty() map names of constructors,
            member functions, enumerators, or properties to indexes in the meta-object.
            For example, Qt uses indexOfMethod() internally when you connect a signal
            to a slot.</para>
            <para>Classes can also have a list of name--value pairs of additional
            class information, stored in QMetaClassInfo objects. The number of pairs is
            returned by classInfoCount(), single pairs are returned by classInfo(), and
            you can search for pairs with indexOfClassInfo().</para>
            <para></para>
            <para>See also QMetaClassInfo, QMetaEnum, QMetaMethod, QMetaProperty,
            QMetaType, and Meta-Object System.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfConstructor(System.String)">
            <summary>
            <para>Finds constructor and returns its index; otherwise returns
            -1.</para>
            <para>Note that the constructor has to be in normalized form, as
            returned by normalizedSignature().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also constructor(), constructorCount(), and
            normalizedSignature().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfMethod(System.String)">
            <summary>
            <para>Finds method and returns its index; otherwise returns -1.</para>
            <para>Note that the method has to be in normalized form, as returned by
            normalizedSignature().</para>
            <para>See also method(), methodCount(), methodOffset(), and
            normalizedSignature().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfSignal(System.String)">
            <summary>
            <para>Finds signal and returns its index; otherwise returns -1.</para>
            <para>This is the same as indexOfMethod(), except that it will return
            -1 if the method exists but isn't a signal.</para>
            <para>Note that the signal has to be in normalized form, as returned by
            normalizedSignature().</para>
            <para>See also indexOfMethod(), normalizedSignature(), method(),
            methodCount(), and methodOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfSlot(System.String)">
            <summary>
            <para>Finds slot and returns its index; otherwise returns -1.</para>
            <para>This is the same as indexOfMethod(), except that it will return
            -1 if the method exists but isn't a slot.</para>
            <para>See also indexOfMethod(), method(), methodCount(), and
            methodOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfEnumerator(System.String)">
            <summary>
            <para>Finds enumerator name and returns its index; otherwise returns
            -1.</para>
            <para>See also enumerator(), enumeratorCount(), and
            enumeratorOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfProperty(System.String)">
            <summary>
            <para>Finds property name and returns its index; otherwise returns
            -1.</para>
            <para>See also property(), propertyCount(), and
            propertyOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.IndexOfClassInfo(System.String)">
            <summary>
            <para>Finds class information item name and returns its index;
            otherwise returns -1.</para>
            <para>See also classInfo(), classInfoCount(), and
            classInfoOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.Constructor(System.Int32)">
            <summary>
            <para>Returns the meta-data for the constructor with the given
            index.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also constructorCount() and newInstance().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.Method(System.Int32)">
            <summary>
            <para>Returns the meta-data for the method with the given index.</para>
            <para>See also methodCount(), methodOffset(), and
            indexOfMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.Enumerator(System.Int32)">
            <summary>
            <para>Returns the meta-data for the enumerator with the given
            index.</para>
            <para>See also enumeratorCount(), enumeratorOffset(), and
            indexOfEnumerator().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.Property(System.Int32)">
            <summary>
            <para>Returns the meta-data for the property with the given index. If
            no such property exists, a null QMetaProperty is returned.</para>
            <para>See also propertyCount(), propertyOffset(), and
            indexOfProperty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.ClassInfo(System.Int32)">
            <summary>
            <para>Returns the meta-data for the item of class information with the
            given index.</para>
            <para>Example:</para>
            <para>class MyClass : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    Q_CLASSINFO(&quot;author&quot;, &quot;Sabrina
            Schweinsteiger&quot;)</para>
            <para>    Q_CLASSINFO(&quot;url&quot;,
            &quot;http://doc.moosesoft.co.uk/1.0/&quot;)</para>
            <para></para>
            <para>public:</para>
            <para>    ...</para>
            <para>};</para>
            <para>See also classInfoCount(), classInfoOffset(), and
            indexOfClassInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NewInstance(QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Constructs a new instance of this class. You can pass up to ten
            arguments (val0, val1, val2, val3, val4, val5, val6, val7, val8, and val9)
            to the constructor. Returns the new object, or 0 if no suitable constructor
            is available.</para>
            <para>Note that only constructors that are declared with the
            Q_INVOKABLE modifier are made available through the meta-object
            system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also Q_ARG() and constructor().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.CheckConnectArgs(System.String,System.String)">
            <summary>
            <para>Returns true if the signal and method arguments are compatible;
            otherwise returns false.</para>
            <para>Both signal and method are expected to be normalized.</para>
            <para>See also normalizedSignature().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.CheckConnectArgs(QtCore.QMetaMethod,QtCore.QMetaMethod)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the signal and method arguments are compatible;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NormalizedSignature(System.String)">
            <summary>
            <para>Normalizes the signature of the given method.</para>
            <para>Qt uses normalized signatures to decide whether two given signals
            and slots are compatible. Normalization reduces whitespace to a minimum,
            moves 'const' to the front where appropriate, removes 'const' from value
            types and replaces const references with values.</para>
            <para>See also checkConnectArgs() and normalizedType().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.NormalizedType(System.String)">
            <summary>
            <para>Normalizes a type.</para>
            <para>See QMetaObject::normalizedSignature() for a description on how
            Qt normalizes.</para>
            <para>Example:</para>
            <para>QByteArray normType = QMetaObject::normalizedType(&quot; int
            const  *&quot;);</para>
            <para>// normType is now &quot;const int*&quot;</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also normalizedSignature().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.ConnectSlotsByName(QtCore.QObject)">
            <summary>
            <para>Searches recursively for all child objects of the given object,
            and connects matching signals from them to slots of object that follow the
            following form:</para>
            <para>void on_&lt;object name&gt;_&lt;signal name&gt;(&lt;signal
            parameters&gt;);</para>
            <para>Let's assume our object has a child object of type QPushButton
            with the object name button1. The slot to catch the button's clicked()
            signal would be:</para>
            <para>void on_button1_clicked();</para>
            <para>If object itself has a properly set object name, its own signals
            are also connected to its respective slots.</para>
            <para>See also QObject::setObjectName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes the member (a signal or a slot name) on the object obj.
            Returns true if the member could be invoked. Returns false if there is no
            such member or the parameters did not match.</para>
            <para>The invocation can be either synchronous or asynchronous,
            depending on type:</para>
            <para></para>
            <para>If type is Qt::DirectConnection, the member will be invoked
            immediately.</para>
            <para>If type is Qt::QueuedConnection, a QEvent will be sent and the
            member is invoked as soon as the application enters the main event
            loop.</para>
            <para>If type is Qt::BlockingQueuedConnection, the method will be
            invoked in the same way as for Qt::QueuedConnection, except that the
            current thread will block until the event is delivered. Using this
            connection type to communicate between objects in the same thread will lead
            to deadlocks.</para>
            <para>If type is Qt::AutoConnection, the member is invoked
            synchronously if obj lives in the same thread as the caller; otherwise it
            will invoke the member asynchronously.</para>
            <para></para>
            <para>The return value of the member function call is placed in ret. If
            the invocation is asynchronous, the return value cannot be evaluated. You
            can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to the member function.</para>
            <para>QGenericArgument and QGenericReturnArgument are internal helper
            classes. Because signals and slots can be dynamically invoked, you must
            enclose the arguments using the Q_ARG() and Q_RETURN_ARG() macros. Q_ARG()
            takes a type name and a const reference of that type; Q_RETURN_ARG() takes
            a type name and a non-const reference.</para>
            <para>You only need to pass the name of the signal or slot to this
            function, not the entire signature. For example, to asynchronously invoke
            the quit() slot on a QThread, use the following code:</para>
            <para>QMetaObject::invokeMethod(thread, &quot;quit&quot;,</para>
            <para>                          Qt::QueuedConnection);</para>
            <para>With asynchronous method invocations, the parameters must be of
            types that are known to Qt's meta-object system, because Qt needs to copy
            the arguments to store them in an event behind the scenes. If you try to
            use a queued connection and get the error message</para>
            <para>QMetaObject::invokeMethod: Unable to handle unregistered datatype
            'MyType'</para>
            <para>call qRegisterMetaType() to register the data type before you
            call invokeMethod().</para>
            <para>To synchronously invoke the compute(QString, int, double) slot on
            some arbitrary object obj retrieve its return value:</para>
            <para>QString retVal;</para>
            <para>QMetaObject::invokeMethod(obj, &quot;compute&quot;,
            Qt::DirectConnection,</para>
            <para>                          Q_RETURN_ARG(QString, retVal),</para>
            <para>                          Q_ARG(QString,
            &quot;sqrt&quot;),</para>
            <para>                          Q_ARG(int, 42),</para>
            <para>                          Q_ARG(double, 9.7));</para>
            <para>If the &quot;compute&quot; slot does not take exactly one
            QString, one int and one double in the specified order, the call will
            fail.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaMethod::invoke().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload always invokes the member using the connection type
            Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaObject.InvokeMethod(QtCore.QObject,System.String,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invokeMethod().</para>
            <para>This overload invokes the member using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.ClassName">
            <summary>
            <para>Returns the class name.</para>
            <para>See also superClass().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.SuperClass">
            <summary>
            <para>Returns the meta-object of the superclass, or 0 if there is no
            such object.</para>
            <para>See also className().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.MethodOffset">
            <summary>
            <para>Returns the method offset for this class; i.e. the index position
            of this class's first member function.</para>
            <para>The offset is the sum of all the methods in the class's
            superclasses (which is always positive since QObject has the deleteLater()
            slot and a destroyed() signal).</para>
            <para>See also method(), methodCount(), and indexOfMethod().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.EnumeratorOffset">
            <summary>
            <para>Returns the enumerator offset for this class; i.e. the index
            position of this class's first enumerator.</para>
            <para>If the class has no superclasses with enumerators, the offset is
            0; otherwise the offset is the sum of all the enumerators in the class's
            superclasses.</para>
            <para>See also enumerator(), enumeratorCount(), and
            indexOfEnumerator().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.PropertyOffset">
            <summary>
            <para>Returns the property offset for this class; i.e. the index
            position of this class's first property.</para>
            <para>The offset is the sum of all the properties in the class's
            superclasses (which is always positive since QObject has the name()
            property).</para>
            <para>See also property(), propertyCount(), and
            indexOfProperty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.ClassInfoOffset">
            <summary>
            <para>Returns the class information offset for this class; i.e. the
            index position of this class's first class information item.</para>
            <para>If the class has no superclasses with class information, the
            offset is 0; otherwise the offset is the sum of all the class information
            items in the class's superclasses.</para>
            <para>See also classInfo(), classInfoCount(), and
            indexOfClassInfo().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.ConstructorCount">
            <summary>
            <para>Returns the number of constructors in this class.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also constructor() and indexOfConstructor().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.MethodCount">
            <summary>
            <para>Returns the number of methods in this class, including the number
            of methods provided by each base class. These include signals and slots as
            well as normal member functions.</para>
            <para>Use code like the following to obtain a QStringList containing
            the methods specific to a given class:</para>
            <para>const QMetaObject* metaObject = obj-&gt;metaObject();</para>
            <para>QStringList methods;</para>
            <para>for(int i = metaObject-&gt;methodOffset(); i &lt;
            metaObject-&gt;methodCount(); ++i)</para>
            <para>    methods &lt;&lt;
            QString::fromLatin1(metaObject-&gt;method(i).methodSignature());</para>
            <para>See also method(), methodOffset(), and indexOfMethod().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.EnumeratorCount">
            <summary>
            <para>Returns the number of enumerators in this class.</para>
            <para>See also enumerator(), enumeratorOffset(), and
            indexOfEnumerator().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.PropertyCount">
            <summary>
            <para>Returns the number of properties in this class, including the
            number of properties provided by each base class.</para>
            <para>Use code like the following to obtain a QStringList containing
            the properties specific to a given class:</para>
            <para>const QMetaObject* metaObject = obj-&gt;metaObject();</para>
            <para>QStringList properties;</para>
            <para>for(int i = metaObject-&gt;propertyOffset(); i &lt;
            metaObject-&gt;propertyCount(); ++i)</para>
            <para>    properties &lt;&lt;
            QString::fromLatin1(metaObject-&gt;property(i).name());</para>
            <para>See also property(), propertyOffset(), and
            indexOfProperty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.ClassInfoCount">
            <summary>
            <para>Returns the number of items of class information in this
            class.</para>
            <para>See also classInfo(), classInfoOffset(), and
            indexOfClassInfo().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaObject.UserProperty">
            <summary>
            <para>Returns the property that has the USER flag set to true.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QMetaProperty::isUser().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaObject.Connection">
            <summary>
            <para>Represents a handle to a signal-slot connection. It can be used
            to disconnect that connection, or check if the connection was
            successful</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also QObject::disconnect().</para>
            </remarks>
        </member>
        <member name="M:QtCore.qglobal.QVersion">
            <summary>
            <para>Returns the version number of Qt at run-time as a string (for
            example, &quot;4.1.2&quot;). This may be a different version than the
            version the application was compiled against.</para>
            <para>See also QT_VERSION_STR.</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QRound(System.Double)">
            <summary>
            <para>Rounds value to the nearest integer.</para>
            <para>Example:</para>
            <para>qreal valueA = 2.3;</para>
            <para>qreal valueB = 2.7;</para>
            <para></para>
            <para>int roundedValueA = qRound(valueA);</para>
            <para>// roundedValueA = 2</para>
            <para>int roundedValueB = qRound(valueB);</para>
            <para>// roundedValueB = 3</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QRound(System.Single)">
            <summary>
            <para>Rounds value to the nearest integer.</para>
            <para>Example:</para>
            <para>qreal valueA = 2.3;</para>
            <para>qreal valueB = 2.7;</para>
            <para></para>
            <para>int roundedValueA = qRound(valueA);</para>
            <para>// roundedValueA = 2</para>
            <para>int roundedValueB = qRound(valueB);</para>
            <para>// roundedValueB = 3</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QRound64(System.Double)">
            <summary>
            <para>Rounds value to the nearest 64-bit integer.</para>
            <para>Example:</para>
            <para>qreal valueA = 42949672960.3;</para>
            <para>qreal valueB = 42949672960.7;</para>
            <para></para>
            <para>qint64 roundedValueA = qRound64(valueA);</para>
            <para>// roundedValueA = 42949672960</para>
            <para>qint64 roundedValueB = qRound64(valueB);</para>
            <para>// roundedValueB = 42949672961</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QRound64(System.Single)">
            <summary>
            <para>Rounds value to the nearest 64-bit integer.</para>
            <para>Example:</para>
            <para>qreal valueA = 42949672960.3;</para>
            <para>qreal valueB = 42949672960.7;</para>
            <para></para>
            <para>qint64 roundedValueA = qRound64(valueA);</para>
            <para>// roundedValueA = 42949672960</para>
            <para>qint64 roundedValueB = qRound64(valueB);</para>
            <para>// roundedValueB = 42949672961</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QtTrId(System.String,System.Int32)">
            <summary>
            <para>The qtTrId function finds and returns a translated string.</para>
            <para>Returns a translated string identified by id. If no matching
            string is found, the id itself is returned. This should not happen under
            normal conditions.</para>
            <para>If n &gt;= 0, all occurrences of %n in the resulting string are
            replaced with a decimal representation of n. In addition, depending on n's
            value, the translation text may vary.</para>
            <para>Meta data and comments can be passed as documented for
            QObject::tr(). In addition, it is possible to supply a source string
            template like that:</para>
            <para>//% &lt;C string&gt;</para>
            <para>or</para>
            <para>\begincomment% &lt;C string&gt; \endcomment</para>
            <para>Example:</para>
            <para>    //% &quot;%n fooish bar(s) found.\n&quot;</para>
            <para>    //% &quot;Do you want to continue?&quot;</para>
            <para>    QString text = qtTrId(&quot;qtn_foo_bar&quot;, n);</para>
            <para>Creating QM files suitable for use with this function requires
            passing the -idbased option to the lrelease tool.</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Note: This function is reentrant.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QObject::tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.Qgetenv(System.String)">
            <summary>
            <para>Returns the value of the environment variable with name varName.
            To get the variable string, use QByteArray::constData().</para>
            <para>Note: qgetenv() was introduced because getenv() from the standard
            C library was deprecated in VC2005 (and later versions). qgetenv() uses the
            new replacement function in VC, and calls the standard C library's
            implementation on all other platforms.</para>
            <para>See also qputenv(), qEnvironmentVariableIsSet(), and
            qEnvironmentVariableIsEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.Qputenv(System.String,QtCore.QByteArray)">
            <summary>
            <para>This function sets the value of the environment variable named
            varName. It will create the variable if it does not exist. It returns 0 if
            the variable could not be set.</para>
            <para>Calling qputenv with an empty value removes the environment
            variable on Windows, and makes it set (but empty) on Unix. Prefer using
            qunsetenv() for fully portable behavior.</para>
            <para>Note: qputenv() was introduced because putenv() from the standard
            C library was deprecated in VC2005 (and later versions). qputenv() uses the
            replacement function in VC, and calls the standard C library's
            implementation on all other platforms.</para>
            <para>See also qgetenv().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.Qunsetenv(System.String)">
            <summary>
            <para>This function deletes the variable varName from the
            environment.</para>
            <para>Returns true on success.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qputenv() and qgetenv().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QEnvironmentVariableIsEmpty(System.String)">
            <summary>
            <para>Returns whether the environment variable varName is empty.</para>
            <para>Equivalent to</para>
            <para>qgetenv(varName).isEmpty()</para>
            <para>except that it's potentially much faster, and can't throw
            exceptions.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qgetenv() and qEnvironmentVariableIsSet().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QEnvironmentVariableIsSet(System.String)">
            <summary>
            <para>Returns whether the environment variable varName is set.</para>
            <para>Equivalent to</para>
            <para>!qgetenv(varName).isNull()</para>
            <para>except that it's potentially much faster, and can't throw
            exceptions.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qgetenv() and qEnvironmentVariableIsEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QEnvironmentVariableIntValue(System.String,System.Boolean@)">
            <summary>
            <para>Returns the numerical value of the environment variable varName.
            If ok is not null, sets *ok to true or false depending on the success of
            the conversion.</para>
            <para>Equivalent to</para>
            <para>qgetenv(varName).toInt()</para>
            <para>except that it's much faster, and can't throw exceptions.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qgetenv() and qEnvironmentVariableIsSet().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.Qsrand(System.UInt32)">
            <summary>
            <para>Thread-safe version of the standard C++ srand() function.</para>
            <para>Sets the argument seed to be used to generate a new random number
            sequence of pseudo random integers to be returned by qrand().</para>
            <para>The sequence of random numbers generated is deterministic per
            thread. For example, if two threads call qsrand(1) and subsequently calls
            qrand(), the threads will get the same random number sequence.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also qrand().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.Qrand">
            <summary>
            <para>Thread-safe version of the standard C++ rand() function.</para>
            <para>Returns a value between 0 and RAND_MAX (defined in
            &lt;cstdlib&gt; and &lt;stdlib.h&gt;), the next number in the current
            sequence of pseudo-random integers.</para>
            <para>Use qsrand() to initialize the pseudo-random number generator
            with a seed value.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also qsrand().</para>
            </summary>
        </member>
        <member name="M:QtCore.qglobal.QEnvironmentVariableIntValue(System.String)">
            <summary>
            <para>Returns the numerical value of the environment variable varName.
            If ok is not null, sets *ok to true or false depending on the success of
            the conversion.</para>
            <para>Equivalent to</para>
            <para>qgetenv(varName).toInt()</para>
            <para>except that it's much faster, and can't throw exceptions.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qgetenv() and qEnvironmentVariableIsSet().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSysInfo">
            <summary>
            <para>The QSysInfo class provides information about the system.</para>
            </summary>
            <remarks>
            <para></para>
            <para>WordSize specifies the size of a pointer for the platform on
            which the application is compiled.</para>
            <para>ByteOrder specifies whether the platform is big-endian or
            little-endian.</para>
            <para>WindowsVersion specifies the version of the Windows operating
            system on which the application is run.</para>
            <para>MacintoshVersion specifies the version of the Macintosh operating
            system on which the application is run.</para>
            <para></para>
            <para>Some constants are defined only on certain platforms. You can use
            the preprocessor symbols Q_OS_WIN and Q_OS_OSX to test that the application
            is compiled under Windows or OS X.</para>
            <para></para>
            <para>See also QLibraryInfo.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSysInfo.BuildCpuArchitecture">
            <summary>
            <para>Returns the architecture of the CPU that Qt was compiled for, in
            text format. Note that this may not match the actual CPU that the
            application is running on if there's an emulation layer or if the CPU
            supports multiple architectures (like x86-64 processors supporting i386
            applications). To detect that, use currentCpuArchitecture().</para>
            <para>Values returned by this function are stable and will not change
            over time, so applications can rely on the returned value as an identifier,
            except that new CPU types may be added over time.</para>
            <para>Typical returned values are (note: list not exhaustive):</para>
            <para></para>
            <para>&quot;arm&quot;</para>
            <para>&quot;arm64&quot;</para>
            <para>&quot;i386&quot;</para>
            <para>&quot;ia64&quot;</para>
            <para>&quot;mips&quot;</para>
            <para>&quot;mips64&quot;</para>
            <para>&quot;power&quot;</para>
            <para>&quot;power64&quot;</para>
            <para>&quot;sparc&quot;</para>
            <para>&quot;sparcv9&quot;</para>
            <para>&quot;x86_64&quot;</para>
            <para></para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QSysInfo::buildAbi() and
            QSysInfo::currentCpuArchitecture().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSysInfo.BuildAbi">
            <summary>
            <para>Returns the full architecture string that Qt was compiled for.
            This string is useful for identifying different, incompatible builds. For
            example, it can be used as an identifier to request an upgrade package from
            a server.</para>
            <para>The values returned from this function are kept stable as
            follows: the mandatory components of the result will not change in future
            versions of Qt, but optional suffixes may be added.</para>
            <para>The returned value is composed of three or more parts, separated
            by dashes (&quot;-&quot;). They are:</para>
            <para></para>
            <para> ComponentValue</para>
            <para>CPU Architecture	The same as QSysInfo::buildCpuArchitecture(),
            such as &quot;arm&quot;, &quot;i386&quot;, &quot;mips&quot; or
            &quot;x86_64&quot;</para>
            <para>Endianness	&quot;little_endian&quot; or
            &quot;big_endian&quot;</para>
            <para>Word size	Whether it's a 32- or 64-bit application. Possible
            values are: &quot;llp64&quot; (Windows 64-bit), &quot;lp64&quot; (Unix
            64-bit), &quot;ilp32&quot; (32-bit)</para>
            <para>(Optional) ABI	Zero or more components identifying different ABIs
            possible in this architecture. Currently, Qt has optional ABI components
            for ARM and MIPS processors: one component is the main ABI (such as
            &quot;eabi&quot;, &quot;o32&quot;, &quot;n32&quot;, &quot;o64&quot;);
            another is whether the calling convention is using hardware floating point
            registers (&quot;hardfloat&quot; is present).Additionally, if Qt was
            configured with -qreal float, the ABI option tag &quot;qreal_float&quot;
            will be present. If Qt was configured with another type as qreal, that type
            is present after &quot;qreal_&quot;, with all characters other than letters
            and digits escaped by an underscore, followed by two hex digits. For
            example, -qreal long double becomes &quot;qreal_long_20double&quot;.</para>
            <para></para>
            <para></para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QSysInfo::buildCpuArchitecture().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.WindowsVersion">
            <summary>
            <para>This variable holds the version of the Windows operating system
            on which the application is run.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.windowsVersion">
            <summary>
            <para>Returns the version of the Windows operating system on which the
            application is run, or WV_None if the operating system is not
            Windows.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.macVersion">
            <summary>
            <para>Returns the version of Darwin (OS X or iOS) on which the
            application is run, or MV_None if the operating system is not a version of
            Darwin.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.CurrentCpuArchitecture">
            <summary>
            <para>Returns the architecture of the CPU that the application is
            running on, in text format. Note that this function depends on what the OS
            will report and may not detect the actual CPU architecture if the OS hides
            that information or is unable to provide it. For example, a 32-bit OS
            running on a 64-bit CPU is usually unable to determine the CPU is actually
            capable of running 64-bit programs.</para>
            <para>Values returned by this function are mostly stable: an attempt
            will be made to ensure that they stay constant over time and match the
            values returned by QSysInfo::builldCpuArchitecture(). However, due to the
            nature of the operating system functions being used, there may be
            discrepancies.</para>
            <para>Typical returned values are (note: list not exhaustive):</para>
            <para></para>
            <para>&quot;arm&quot;</para>
            <para>&quot;arm64&quot;</para>
            <para>&quot;i386&quot;</para>
            <para>&quot;ia64&quot;</para>
            <para>&quot;mips&quot;</para>
            <para>&quot;mips64&quot;</para>
            <para>&quot;power&quot;</para>
            <para>&quot;power64&quot;</para>
            <para>&quot;sparc&quot;</para>
            <para>&quot;sparcv9&quot;</para>
            <para>&quot;x86_64&quot;</para>
            <para></para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QSysInfo::buildAbi() and
            QSysInfo::buildCpuArchitecture().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.KernelType">
            <summary>
            <para>Returns the type of the operating system kernel Qt was compiled
            for. It's also the kernel the application is running on, unless the host
            operating system is running a form of compatibility or virtualization
            layer.</para>
            <para>Values returned by this function are stable and will not change
            over time, so applications can rely on the returned value as an identifier,
            except that new OS kernel types may be added over time.</para>
            <para>On Windows, this function returns the type of Windows kernel,
            like &quot;wince&quot; or &quot;winnt&quot;. On Unix systems, it returns
            the same as the output of uname -s (lowercased).</para>
            <para>Note that this function may return surprising values: it returns
            &quot;linux&quot; for all operating systems running Linux (including
            Android), &quot;qnx&quot; for all operating systems running QNX (including
            BlackBerry 10), &quot;freebsd&quot; for Debian/kFreeBSD, and
            &quot;darwin&quot; for OS X and iOS. For information on the type of product
            the application is running on, see productType().</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QFileSelector, kernelVersion(), productType(),
            productVersion(), and prettyProductName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.KernelVersion">
            <summary>
            <para>Returns the release version of the operating system kernel. On
            Windows, it returns the version of the NT or CE kernel. On Unix systems,
            including Android, BlackBerry and OS X, it returns the same as the uname -r
            command would return.</para>
            <para>If the version could not be determined, this function may return
            an empty string.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also kernelType(), productType(), productVersion(), and
            prettyProductName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.ProductType">
            <summary>
            <para>Returns the product name of the operating system this application
            is running in. If the application is running on some sort of emulation or
            virtualization layer (such as WINE on a Unix system), this function will
            inspect the emulation / virtualization layer.</para>
            <para>Values returned by this function are stable and will not change
            over time, so applications can rely on the returned value as an identifier,
            except that new OS types may be added over time.</para>
            <para>Linux and Android note: this function returns &quot;android&quot;
            for Linux systems running Android userspace, notably when using the Bionic
            library. For all other Linux systems, regardless of C library being used,
            it tries to determine the distribution name and returns that. If
            determining the distribution name failed, it returns
            &quot;unknown&quot;.</para>
            <para>BlackBerry note: this function returns &quot;blackberry&quot; for
            QNX systems running the BlackBerry userspace, but &quot;qnx&quot; for all
            other QNX-based systems.</para>
            <para>Darwin, OS X and iOS note: this function returns &quot;osx&quot;
            for OS X systems, &quot;ios&quot; for iOS systems and &quot;darwin&quot; in
            case the system could not be determined.</para>
            <para>FreeBSD note: this function returns &quot;debian&quot; for
            Debian/kFreeBSD and &quot;unknown&quot; otherwise.</para>
            <para>Windows note: this function returns &quot;winphone&quot; for
            builds for Windows Phone, &quot;winrt&quot; for WinRT builds,
            &quot;wince&quot; for Windows CE and Embedded Compact builds, and
            &quot;windows&quot; for normal desktop builds.</para>
            <para>For other Unix-type systems, this function usually returns
            &quot;unknown&quot;.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QFileSelector, kernelType(), kernelVersion(),
            productVersion(), and prettyProductName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.ProductVersion">
            <summary>
            <para>Returns the product version of the operating system in string
            form. If the version could not be determined, this function returns
            &quot;unknown&quot;.</para>
            <para>It will return the Android, BlackBerry, iOS, OS X, Windows
            full-product versions on those systems. In particular, on OS X, iOS and
            Windows, the returned string is similar to the macVersion() or
            windowsVersion() enums.</para>
            <para>On Linux systems, it will try to determine the distribution
            version and will return that. This is also done on Debian/kFreeBSD, so this
            function will return Debian version in that case.</para>
            <para>In all other Unix-type systems, this function always returns
            &quot;unknown&quot;.</para>
            <para>Note: The version string returned from this function is only
            guaranteed to be orderable on Android, BlackBerry, OS X and iOS. On
            Windows, some Windows versions are text (&quot;XP&quot; and
            &quot;Vista&quot;, for example). On Linux, the version of the distribution
            may jump unexpectedly, please refer to the distribution's documentation for
            versioning practices.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also kernelType(), kernelVersion(), productType(), and
            prettyProductName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSysInfo.PrettyProductName">
            <summary>
            <para>Returns a prettier form of productType() and productVersion(),
            containing other tokens like the operating system type, codenames and other
            information. The result of this function is suitable for displaying to the
            user, but not for long-term storage, as the string may change with updates
            to Qt.</para>
            <para>If productType() is &quot;unknown&quot;, this function will
            instead use the kernelType() and kernelVersion() functions.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also kernelType(), kernelVersion(), productType(), and
            productVersion().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSysInfo.Sizes">
            <summary>
            <para>This enum provides platform-specific information about the sizes
            of data structures used by the underlying architecture.</para>
            </summary>
        </member>
        <member name="F:QtCore.QSysInfo.Sizes.WordSize">
            <summary>The size in bits of a pointer for the platform on which the application is compiled (32 or 64).</summary>
        </member>
        <member name="F:QtCore.QSysInfo.Endian.BigEndian">
            <summary>Big-endian byte order (also called Network byte order)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.Endian.LittleEndian">
            <summary>Little-endian byte order</summary>
        </member>
        <member name="F:QtCore.QSysInfo.Endian.ByteOrder">
            <summary>Equals BigEndian or LittleEndian, depending on the platform's byte order.</summary>
        </member>
        <member name="T:QtCore.QSysInfo.WinVersion">
            <summary>
            <para>This enum provides symbolic names for the various versions of the
            Windows operating system. On Windows, the QSysInfo::WindowsVersion variable
            gives the version of the system on which the application is run.</para>
            <para>MS-DOS-based versions:</para>
            <para>NT-based versions (note that each operating system version is
            only represented once rather than each Windows edition):</para>
            <para>Alternatively, you may use the following macros which correspond
            directly to the Windows operating system version number:</para>
            <para>CE-based versions:</para>
            <para>The following masks can be used for testing whether a Windows
            version is MS-DOS-based, NT-based, or CE-based:</para>
            <para>See also MacVersion.</para>
            </summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_None">
            <summary>Operating system other than Windows.</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_32s">
            <summary>Windows 3.1 with Win 32s</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_95">
            <summary>Windows 95</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_98">
            <summary>Windows 98</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_Me">
            <summary>Windows Me</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_DOS_based">
            <summary>MS-DOS-based version of Windows</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_NT">
            <summary>Windows NT (operating system version 4.0)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_2000">
            <summary>Windows 2000 (operating system version 5.0)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_XP">
            <summary>Windows XP (operating system version 5.1)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_2003">
            <summary>Windows Server 2003, Windows Server 2003 R2, Windows Home Server, Windows XP Professional x64 Edition (operating system version 5.2)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_VISTA">
            <summary>Windows Vista, Windows Server 2008 (operating system version 6.0)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_WINDOWS7">
            <summary>Windows 7, Windows Server 2008 R2 (operating system version 6.1)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_WINDOWS8">
            <summary>Windows 8 (operating system version 6.2)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_WINDOWS8_1">
            <summary>Windows 8.1 (operating system version 6.3), introduced in Qt 5.2</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_WINDOWS10">
            <summary>Windows 10 (operating system version 10.0), introduced in Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_NT_based">
            <summary>NT-based version of Windows</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_4_0">
            <summary>Operating system version 4.0, corresponds to Windows NT</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_5_0">
            <summary>Operating system version 5.0, corresponds to Windows 2000</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_5_1">
            <summary>Operating system version 5.1, corresponds to Windows XP</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_5_2">
            <summary>Operating system version 5.2, corresponds to Windows Server 2003, Windows Server 2003 R2, Windows Home Server, and Windows XP Professional x64 Edition</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_6_0">
            <summary>Operating system version 6.0, corresponds to Windows Vista and Windows Server 2008</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_6_1">
            <summary>Operating system version 6.1, corresponds to Windows 7 and Windows Server 2008 R2</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_6_2">
            <summary>Operating system version 6.2, corresponds to Windows 8</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_6_3">
            <summary>Operating system version 6.3, corresponds to Windows 8.1, introduced in Qt 5.2</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_10_0">
            <summary>Operating system version 10.0, corresponds to Windows 10, introduced in Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_CE">
            <summary>Windows CE</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_CENET">
            <summary>Windows CE .NET</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_CE_5">
            <summary>Windows CE 5.x</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_CE_6">
            <summary>Windows CE 6.x</summary>
        </member>
        <member name="F:QtCore.QSysInfo.WinVersion.WV_CE_based">
            <summary>CE-based version of Windows</summary>
        </member>
        <member name="T:QtCore.QSysInfo.MacVersion">
            <summary>
            <para>This enum provides symbolic names for the various versions of the
            Darwin operating system, covering both OS X and iOS. The
            QSysInfo::MacintoshVersion variable gives the version of the system on
            which the application is run.</para>
            <para>See also WinVersion.</para>
            </summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_None">
            <summary>Not a Darwin operating system</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_Unknown">
            <summary>An unknown and currently unsupported platform</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_9">
            <summary>Mac OS 9 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_0">
            <summary>Mac OS X 10.0 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_1">
            <summary>Mac OS X 10.1 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_2">
            <summary>Mac OS X 10.2 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_3">
            <summary>Mac OS X 10.3 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_4">
            <summary>Mac OS X 10.4 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_5">
            <summary>Mac OS X 10.5 (unsupported)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_6">
            <summary>Mac OS X 10.6</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_7">
            <summary>OS X 10.7</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_8">
            <summary>OS X 10.8</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_9">
            <summary>OS X 10.9</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_10">
            <summary>OS X 10.10</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_10_11">
            <summary>OS X 10.11</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_CHEETAH">
            <summary>Apple codename for MV_10_0</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_PUMA">
            <summary>Apple codename for MV_10_1</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_JAGUAR">
            <summary>Apple codename for MV_10_2</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_PANTHER">
            <summary>Apple codename for MV_10_3</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_TIGER">
            <summary>Apple codename for MV_10_4</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_LEOPARD">
            <summary>Apple codename for MV_10_5</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_SNOWLEOPARD">
            <summary>Apple codename for MV_10_6</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_LION">
            <summary>Apple codename for MV_10_7</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_MOUNTAINLION">
            <summary>Apple codename for MV_10_8</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_MAVERICKS">
            <summary>Apple codename for MV_10_9</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_YOSEMITE">
            <summary>Apple codename for MV_10_10</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_ELCAPITAN">
            <summary>Apple codename for MV_10_11</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS">
            <summary>iOS (any)</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_4_3">
            <summary>iOS 4.3</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_5_0">
            <summary>iOS 5.0</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_5_1">
            <summary>iOS 5.1</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_6_0">
            <summary>iOS 6.0</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_6_1">
            <summary>iOS 6.1</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_7_0">
            <summary>iOS 7.0</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_7_1">
            <summary>iOS 7.1</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_8_0">
            <summary>iOS 8.0</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_8_1">
            <summary>iOS 8.1</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_8_2">
            <summary>iOS 8.2</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_8_3">
            <summary>iOS 8.3</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_8_4">
            <summary>iOS 8.4</summary>
        </member>
        <member name="F:QtCore.QSysInfo.MacVersion.MV_IOS_9_0">
            <summary>iOS 9.0</summary>
        </member>
        <member name="T:QtCore.QtMsgType">
            <summary>
            <para>This enum describes the messages that can be sent to a message
            handler (QtMessageHandler). You can use the enum to identify and associate
            the various message types with the appropriate actions.</para>
            <para>QtInfoMsg was added in Qt 5.5.</para>
            <para>See also QtMessageHandler and qInstallMessageHandler().</para>
            </summary>
        </member>
        <member name="F:QtCore.QtMsgType.QtDebugMsg">
            <summary>A message generated by the qDebug() function.</summary>
        </member>
        <member name="F:QtCore.QtMsgType.QtWarningMsg">
            <summary>A message generated by the qWarning() function.</summary>
        </member>
        <member name="F:QtCore.QtMsgType.QtCriticalMsg">
            <summary>A message generated by the qCritical() function.</summary>
        </member>
        <member name="F:QtCore.QtMsgType.QtFatalMsg">
            <summary>A message generated by the qFatal() function.</summary>
        </member>
        <member name="F:QtCore.QtMsgType.QtInfoMsg">
            <summary>A message generated by the qInfo() function.</summary>
        </member>
        <member name="T:QtCore.QMessageLogContext">
            <summary>
            <para>The QMessageLogContext class provides additional information
            about a log message.</para>
            </summary>
            <remarks>
            <para>The class provides information about the source code location a
            qDebug(), qInfo(), qWarning(), qCritical() or qFatal() message was
            generated.</para>
            <para>Note: By default, this information is recorded only in debug
            builds. You can overwrite this explicitly by defining QT_MESSAGELOGCONTEXT
            or QT_NO_MESSAGELOGCONTEXT.</para>
            <para></para>
            <para>See also QMessageLogger, QtMessageHandler, and
            qInstallMessageHandler().</para>
            </remarks>
        </member>
        <member name="T:QtCore.QMessageLogger">
            <summary>
            <para>The QMessageLogger class generates log messages.</para>
            </summary>
            <remarks>
            <para>QMessageLogger is used to generate messages for the Qt logging
            framework. Usually one uses it through qDebug(), qInfo(), qWarning(),
            qCritical, or qFatal() functions, which are actually macros: For example
            qDebug() expands to QMessageLogger(__FILE__, __LINE__, Q_FUNC_INFO).debug()
            for debug builds, and QMessageLogger(0, 0, 0).debug() for release
            builds.</para>
            <para>One example of direct use is to forward errors that stem from a
            scripting language, e.g. QML:</para>
            <para>    void statusChanged(QDeclarativeComponent::Status status)
            {</para>
            <para>        if (status == QDeclarativeComponent::Error) {</para>
            <para>            foreach (const QDeclarativeError &amp;error,
            component-&gt;errors()) {</para>
            <para>                const QByteArray file =
            error.url().toEncoded();</para>
            <para>                QMessageLogger(file.constData(), error.line(),
            0).debug() &lt;&lt; error.description();</para>
            <para>            }</para>
            <para>        }</para>
            <para>    }</para>
            <para></para>
            <para>See also QMessageLogContext, qDebug(), qInfo(), qWarning(),
            qCritical(), and qFatal().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMessageLogger.#ctor">
            <summary>
            <para>Constructs a default QMessageLogger. See the other constructors
            to specify context information.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.#ctor(System.String,System.Int32,System.String)">
            <summary>
            <para>Constructs a QMessageLogger to record log messages for file at
            line in function. The is equivalent to QMessageLogger(file, line, function,
            &quot;default&quot;)</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            <para>Constructs a QMessageLogger to record category messages for file
            at line in function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug(System.String)">
            <summary>
            <para>Logs a debug message specified with format msg. Additional
            parameters, specified by msg, may be used.</para>
            <para>See also qDebug().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning(System.String)">
            <summary>
            <para>Logs a warning message specified with format msg. Additional
            parameters, specified by msg, may be used.</para>
            <para>See also qWarning().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical(System.String)">
            <summary>
            <para>Logs a critical message specified with format msg. Additional
            parameters, specified by msg, may be used.</para>
            <para>See also qCritical().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug(QtCore.QLoggingCategory,System.String)">
            <summary>
            <para>Logs a debug message specified with format msg for the context
            cat. Additional parameters, specified by msg, may be used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCDebug().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug(QtCore.QMessageLogger.CategoryFunction,System.String)">
            <summary>
            <para>Logs a debug message specified with format msg for the context
            returned by catFunc. Additional parameters, specified by msg, may be
            used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCDebug().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Info(QtCore.QLoggingCategory,System.String)">
            <summary>
            <para>Logs an informational message specified with format msg for the
            context cat. Additional parameters, specified by msg, may be used.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qCInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Info(QtCore.QMessageLogger.CategoryFunction,System.String)">
            <summary>
            <para>Logs an informational message specified with format msg for the
            context returned by catFunc. Additional parameters, specified by msg, may
            be used.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qCInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning(QtCore.QLoggingCategory,System.String)">
            <summary>
            <para>Logs a warning message specified with format msg for the context
            cat. Additional parameters, specified by msg, may be used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCWarning().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning(QtCore.QMessageLogger.CategoryFunction,System.String)">
            <summary>
            <para>Logs a warning message specified with format msg for the context
            returned by catFunc. Additional parameters, specified by msg, may be
            used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCWarning().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical(QtCore.QLoggingCategory,System.String)">
            <summary>
            <para>Logs a critical message specified with format msg for the context
            cat. Additional parameters, specified by msg, may be used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCCritical().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical(QtCore.QMessageLogger.CategoryFunction,System.String)">
            <summary>
            <para>Logs a critical message specified with format msg for the context
            returned by catFunc. Additional parameters, specified by msg, may be
            used.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCCritical().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Fatal(System.String)">
            <summary>
            <para>Logs a fatal message specified with format msg. Additional
            parameters, specified by msg, may be used.</para>
            <para>See also qFatal().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug">
            <summary>
            <para>Logs a debug message using a QDebug stream</para>
            <para>See also qDebug() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug(QtCore.QLoggingCategory)">
            <summary>
            <para>Logs a debug message into category cat using a QDebug
            stream.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCDebug() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Debug(QtCore.QMessageLogger.CategoryFunction)">
            <summary>
            <para>Logs a debug message into category returned by catFunc using a
            QDebug stream.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCDebug() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Info">
            <summary>
            <para>Logs an informational message using a QDebug stream.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qInfo() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Info(QtCore.QLoggingCategory)">
            <summary>
            <para>Logs an informational message into the category cat using a
            QDebug stream.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qCInfo() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Info(QtCore.QMessageLogger.CategoryFunction)">
            <summary>
            <para>Logs an informational message into category returned by catFunc
            using a QDebug stream.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also qCInfo() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning">
            <summary>
            <para>Logs a warning message using a QDebug stream</para>
            <para>See also qWarning() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning(QtCore.QLoggingCategory)">
            <summary>
            <para>Logs a warning message into category cat using a QDebug
            stream.</para>
            <para>See also qCWarning() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Warning(QtCore.QMessageLogger.CategoryFunction)">
            <summary>
            <para>Logs a warning message into category returned by catFunc using a
            QDebug stream.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCWarning() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical">
            <summary>
            <para>Logs a critical message using a QDebug stream</para>
            <para>See also qCritical() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical(QtCore.QLoggingCategory)">
            <summary>
            <para>Logs a critical message into category cat using a QDebug
            stream.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCCritical() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageLogger.Critical(QtCore.QMessageLogger.CategoryFunction)">
            <summary>
            <para>Logs a critical message into category returned by catFunc using a
            QDebug stream.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qCCritical() and QDebug.</para>
            </summary>
        </member>
        <member name="M:QtCore.qlogging.QInstallMessageHandler(QtCore.QtMessageHandler)">
            <summary>
            <para>Installs a Qt message handler which has been defined previously.
            Returns a pointer to the previous message handler.</para>
            <para>The message handler is a function that prints out debug messages,
            warnings, critical and fatal error messages. The Qt library (debug mode)
            contains hundreds of warning messages that are printed when internal errors
            (usually invalid function arguments) occur. Qt built in release mode also
            contains such warnings unless QT_NO_WARNING_OUTPUT and/or
            QT_NO_DEBUG_OUTPUT have been set during compilation. If you implement your
            own message handler, you get total control of these messages.</para>
            <para>The default message handler prints the message to the standard
            output under X11 or to the debugger under Windows. If it is a fatal
            message, the application aborts immediately.</para>
            <para>Only one message handler can be defined, since this is usually
            done on an application-wide basis to control debug output.</para>
            <para>To restore the message handler, call
            qInstallMessageHandler(0).</para>
            <para>Example:</para>
            <para>#include &lt;qapplication.h&gt;</para>
            <para>#include &lt;stdio.h&gt;</para>
            <para>#include &lt;stdlib.h&gt;</para>
            <para></para>
            <para>void myMessageOutput(QtMsgType type, const QMessageLogContext
            &amp;context, const QString &amp;msg)</para>
            <para>{</para>
            <para>    QByteArray localMsg = msg.toLocal8Bit();</para>
            <para>    switch (type) {</para>
            <para>    case QtDebugMsg:</para>
            <para>        fprintf(stderr, &quot;Debug: %s (%s:%u, %s)\n&quot;,
            localMsg.constData(), context.file, context.line, context.function);</para>
            <para>        break;</para>
            <para>    case QtInfoMsg:</para>
            <para>        fprintf(stderr, &quot;Info: %s (%s:%u, %s)\n&quot;,
            localMsg.constData(), context.file, context.line, context.function);</para>
            <para>        break;</para>
            <para>    case QtWarningMsg:</para>
            <para>        fprintf(stderr, &quot;Warning: %s (%s:%u, %s)\n&quot;,
            localMsg.constData(), context.file, context.line, context.function);</para>
            <para>        break;</para>
            <para>    case QtCriticalMsg:</para>
            <para>        fprintf(stderr, &quot;Critical: %s (%s:%u, %s)\n&quot;,
            localMsg.constData(), context.file, context.line, context.function);</para>
            <para>        break;</para>
            <para>    case QtFatalMsg:</para>
            <para>        fprintf(stderr, &quot;Fatal: %s (%s:%u, %s)\n&quot;,
            localMsg.constData(), context.file, context.line, context.function);</para>
            <para>        abort();</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>int main(int argc, char **argv)</para>
            <para>{</para>
            <para>    qInstallMessageHandler(myMessageOutput);</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    ...</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QtMessageHandler, QtMsgType, qDebug(), qWarning(),
            qCritical(), qFatal(), and Debugging Techniques.</para>
            </summary>
        </member>
        <member name="M:QtCore.qlogging.QSetMessagePattern(System.String)">
            <summary>
            <para>Changes the output of the default message handler.</para>
            <para>Allows to tweak the output of qDebug(), qWarning(), qCritical()
            and qFatal().</para>
            <para>Following placeholders are supported:</para>
            <para></para>
            <para> PlaceholderDescription</para>
            <para>%{appname}	QCoreApplication::applicationName()</para>
            <para>%{category}	Logging category</para>
            <para>%{file}	Path to source file</para>
            <para>%{function}	Function</para>
            <para>%{line}	Line in source file</para>
            <para>%{message}	The actual message</para>
            <para>%{pid}	QCoreApplication::applicationPid()</para>
            <para>%{threadid}	The system-wide ID of current thread (if it can be
            obtained)</para>
            <para>%{qthreadptr}	A pointer to the current QThread (result of
            QThread::currentThread())</para>
            <para>%{type}	&quot;debug&quot;, &quot;warning&quot;,
            &quot;critical&quot; or &quot;fatal&quot;</para>
            <para>%{time process}	time of the message, in seconds since the process
            started (the token &quot;process&quot; is literal)</para>
            <para>%{time boot}	the time of the message, in seconds since the system
            boot if that can be determined (the token &quot;boot&quot; is literal). If
            the time since boot could not be obtained, the output is indeterminate (see
            QElapsedTimer::msecsSinceReference()).</para>
            <para>%{time [format]}	system time when the message occurred, formatted
            by passing the format to QDateTime::toString(). If the format is not
            specified, the format of Qt::ISODate is used.</para>
            <para>%{backtrace [depth=N] [separator=&quot;...&quot;]}	A backtrace
            with the number of frames specified by the optional depth parameter
            (defaults to 5), and separated by the optional separator parameter
            (defaults to &quot;|&quot;). This expansion is available only on some
            platforms (currently only platfoms using glibc). Names are only known for
            exported functions. If you want to see the name of every function in your
            application, use QMAKE_LFLAGS += -rdynamic. When reading backtraces, take
            into account that frames might be missing due to inlining or tail call
            optimization.</para>
            <para></para>
            <para>You can also use conditionals on the type of the message using
            %{if-debug}, %{if-info} %{if-warning}, %{if-critical} or %{if-fatal}
            followed by an %{endif}. What is inside the %{if-*} and %{endif} will only
            be printed if the type matches.</para>
            <para>Finally, text inside %{if-category} ... %{endif} is only printed
            if the category is not the default one.</para>
            <para>Example:</para>
            <para>QT_MESSAGE_PATTERN=&quot;[%{time yyyyMMdd h:mm:ss.zzz t}
            %{if-debug}D%{endif}%{if-info}I%{endif}%{if-warning}W%{endif}%{if-critical}
            C%{endif}%{if-fatal}F%{endif}] %{file}:%{line} - %{message}&quot;</para>
            <para>The default pattern is &quot;%{if-category}%{category}:
            %{endif}%{message}&quot;.</para>
            <para>The pattern can also be changed at runtime by setting the
            QT_MESSAGE_PATTERN environment variable; if both qSetMessagePattern() is
            called and QT_MESSAGE_PATTERN is set, the environment variable takes
            precedence.</para>
            <para>Custom message handlers can use qFormatLogMessage() to take
            pattern into account.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also qInstallMessageHandler() and Debugging
            Techniques.</para>
            </summary>
        </member>
        <member name="M:QtCore.qlogging.QFormatLogMessage(QtCore.QtMsgType,QtCore.QMessageLogContext,System.String)">
            <summary>
            <para>Generates a formatted string out of the type, context, str
            arguments.</para>
            <para>qFormatLogMessage returns a QString that is formatted according
            to the current message pattern. It can be used by custom message handlers
            to format output similar to Qt's default message handler.</para>
            <para>The function is thread-safe.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also qInstallMessageHandler() and
            qSetMessagePattern().</para>
            </summary>
        </member>
        <member name="T:QtCore.QFlag">
            <summary>
            <para>The QFlag class is a helper data type for QFlags.</para>
            </summary>
            <remarks>
            <para>It is equivalent to a plain int, except with respect to function
            overloading and type conversions. You should never need to use this class
            in your applications.</para>
            <para></para>
            <para>See also QFlags.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFlag.#ctor(System.Int32)">
            <summary>
            <para>Constructs a QFlag object that stores the given value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFlag.#ctor(System.Int16)">
            <summary>
            <para>Constructs a QFlag object that stores the given value.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFlag.#ctor(System.UInt16)">
            <summary>
            <para>Constructs a QFlag object that stores the given value.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFlag.op_Implicit(QtCore.QFlag)~System.Int32">
            <summary>
            <para>Returns the value stored by the QFlag object.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAtomicInt">
            <summary>
            <para>The QAtomicInt class provides platform-independent atomic
            operations on int.</para>
            </summary>
            <remarks>
            <para>This class is a equivalent to QAtomicInteger&lt;int&gt;. All
            other functionality is equivalent. Please see that class for more
            information.</para>
            <para></para>
            <para>See also QAtomicInteger and QAtomicPointer.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAtomicInt.#ctor(System.Int32)">
            <summary>
            <para>Constructs a QAtomicInt with the given value.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsInf(System.Double)">
            <summary>
            <para>Returns true if the double d is equivalent to infinity.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsNaN(System.Double)">
            <summary>
            <para>Returns true if the double d is not a number (NaN).</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsFinite(System.Double)">
            <summary>
            <para>Returns true if the double d is a finite number.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsInf(System.Single)">
            <summary>
            <para>Returns true if the float f is equivalent to infinity.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsNaN(System.Single)">
            <summary>
            <para>Returns true if the float f is not a number (NaN).</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QIsFinite(System.Single)">
            <summary>
            <para>Returns true if the float f is a finite number.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QSNaN">
            <summary>
            <para>Returns the bit pattern of a signalling NaN as a double.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QQNaN">
            <summary>
            <para>Returns the bit pattern of a quiet NaN as a double.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QInf">
            <summary>
            <para>Returns the bit pattern for an infinite number as a
            double.</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QFloatDistance(System.Single,System.Single)">
            <summary>
            <para>Returns the number of representable floating-point numbers
            between a and b.</para>
            <para>This function provides an alternative way of doing approximated
            comparisons of floating-point numbers similar to qFuzzyCompare(). However,
            it returns the distance between two numbers, which gives the caller a
            possibility to choose the accepted error. Errors are relative, so for
            instance the distance between 1.0E-5 and 1.00001E-5 will give 110, while
            the distance between 1.0E36 and 1.00001E36 will give 127.</para>
            <para>This function is useful if a floating point comparison requires a
            certain precision. Therefore, if a and b are equal it will return 0. The
            maximum value it will return for 32-bit floating point numbers is
            4,278,190,078. This is the distance between -FLT_MAX and +FLT_MAX.</para>
            <para>The function does not give meaningful results if any of the
            arguments are Infinite or NaN. You can check for this by calling
            qIsFinite().</para>
            <para>The return value can be considered as the &quot;error&quot;, so
            if you for instance want to compare two 32-bit floating point numbers and
            all you need is an approximated 24-bit precision, you can use this function
            like this:</para>
            <para>if (qFloatDistance(a, b) &lt; (1 &lt;&lt; 7)) {   // The last 7
            bits are not</para>
            <para>                                        // significant</para>
            <para>    // precise enough</para>
            <para>}</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also qFuzzyCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.qnumeric.QFloatDistance(System.Double,System.Double)">
            <summary>
            <para>Returns the number of representable floating-point numbers
            between a and b.</para>
            <para>This function serves the same purpose as qFloatDistance(float,
            float), but returns the distance between two double numbers. Since the
            range is larger than for two float numbers ([-DBL_MAX,DBL_MAX]), the return
            type is quint64.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also qFuzzyCompare().</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.TimerType">
            <summary>
            <para>The timer type indicates how accurate a timer can be.</para>
            <para>On UNIX (including Linux, OS X, and iOS), Qt will keep
            millisecond accuracy for Qt::PreciseTimer. For Qt::CoarseTimer, the
            interval will be adjusted up to 5% to align the timer with other timers
            that are expected to fire at or around the same time. The objective is to
            make most timers wake up at the same time, thereby reducing CPU wakeups and
            power consumption.</para>
            <para>On Windows, Qt will use Windows's Multimedia timer facility (if
            available) for Qt::PreciseTimer and normal Windows timers for
            Qt::CoarseTimer and Qt::VeryCoarseTimer.</para>
            <para>On all platforms, the interval for Qt::VeryCoarseTimer is rounded
            to the nearest full second (e.g. an interval of 23500ms will be rounded to
            24000ms, and 20300ms to 20000ms).</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TimerType.PreciseTimer">
            <summary>Precise timers try to keep millisecond accuracy</summary>
        </member>
        <member name="F:QtCore.Qt.TimerType.CoarseTimer">
            <summary>Coarse timers try to keep accuracy within 5% of the desired interval</summary>
        </member>
        <member name="F:QtCore.Qt.TimerType.VeryCoarseTimer">
            <summary>Very coarse timers only keep full second accuracy</summary>
        </member>
        <member name="T:QtCore.Qt.ConnectionType">
            <summary>
            <para>This enum describes the types of connection that can be used
            between signals and slots. In particular, it determines whether a
            particular signal is delivered to a slot immediately or queued for delivery
            at a later time.</para>
            <para>With queued connections, the parameters must be of types that are
            known to Qt's meta-object system, because Qt needs to copy the arguments to
            store them in an event behind the scenes. If you try to use a queued
            connection and get the error message:</para>
            <para>QObject::connect: Cannot queue arguments of type 'MyType'</para>
            <para>Call qRegisterMetaType() to register the data type before you
            establish the connection.</para>
            <para>When using signals and slots with multiple threads, see Signals
            and Slots Across Threads.</para>
            <para>See also Thread Support in Qt, QObject::connect(),
            qRegisterMetaType(), and Q_DECLARE_METATYPE().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ConnectionType.AutoConnection">
            <summary>(Default) If the receiver lives in the thread that emits the signal, Qt::DirectConnection is used. Otherwise, Qt::QueuedConnection is used. The connection type is determined when the signal is emitted.</summary>
        </member>
        <member name="F:QtCore.Qt.ConnectionType.DirectConnection">
            <summary>The slot is invoked immediately when the signal is emitted. The slot is executed in the signalling thread.</summary>
        </member>
        <member name="F:QtCore.Qt.ConnectionType.QueuedConnection">
            <summary>The slot is invoked when control returns to the event loop of the receiver's thread. The slot is executed in the receiver's thread.</summary>
        </member>
        <member name="F:QtCore.Qt.ConnectionType.BlockingQueuedConnection">
            <summary>Same as Qt::QueuedConnection, except that the signalling thread blocks until the slot returns. This connection must not be used if the receiver lives in the signalling thread, or else the application will deadlock.</summary>
        </member>
        <member name="F:QtCore.Qt.ConnectionType.UniqueConnection">
            <summary>This is a flag that can be combined with any one of the above connection types, using a bitwise OR. When Qt::UniqueConnection is set, QObject::connect() will fail if the connection already exists (i.e. if the same signal is already connected to the same slot for the same pair of objects). This flag was introduced in Qt 4.6.</summary>
        </member>
        <member name="T:QtCore.Qt.FindChildOption">
            <summary>
            <para>The FindChildOptions type is a typedef for
            QFlags&lt;FindChildOption&gt;. It stores an OR combination of
            FindChildOption values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.FindChildOption.FindDirectChildrenOnly">
            <summary>Looks only at the direct children of the object.</summary>
        </member>
        <member name="F:QtCore.Qt.FindChildOption.FindChildrenRecursively">
            <summary>Looks at all children of the object (recursive search).</summary>
        </member>
        <member name="T:QtCore.Qt.DateFormat">
            <summary>
            <para>Note: For ISODate formats, each Y, M and D represents a single
            digit of the year, month and day used to specify the date. Each H, M and S
            represents a single digit of the hour, minute and second used to specify
            the time. The presence of a literal T character is used to separate the
            date and time when both are specified.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.TextDate">
            <summary>The default Qt format, which includes the day and month name, the day number in the month, and the year in full. The day and month names will be short, localized names. This is basically equivalent to using the date format string, "ddd MMM d yyyy". See QDate::toString() for more information.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.ISODate">
            <summary>ISO 8601 extended format: either YYYY-MM-DD for dates or YYYY-MM-DDTHH:mm:ss, YYYY-MM-DDTHH:mm:ssTZD (e.g., 1997-07-16T19:20:30+01:00) for combined dates and times.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.SystemLocaleDate">
            <summary>This enum value is deprecated. Use Qt::SystemLocaleShortDate instead (or Qt::SystemLocaleLongDate if you want long dates).</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.LocalDate">
            <summary>This enum value is deprecated. Use Qt::SystemLocaleShortDate instead (or Qt::SystemLocaleLongDate if you want long dates).</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.LocaleDate">
            <summary>This enum value is deprecated. Use Qt::DefaultLocaleShortDate instead (or Qt::DefaultLocaleLongDate if you want long dates).</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.SystemLocaleShortDate">
            <summary>The short format used by the operating system.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.SystemLocaleLongDate">
            <summary>The long format used by the operating system.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.DefaultLocaleShortDate">
            <summary>The short format specified by the application's locale.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.DefaultLocaleLongDate">
            <summary>The long format used by the application's locale.</summary>
        </member>
        <member name="F:QtCore.Qt.DateFormat.RFC2822Date">
            <summary>RFC 2822, RFC 850 and RFC 1036 format: either [ddd,] dd MMM yyyy hh:mm[:ss] +/-TZ or ddd MMM dd yyyy hh:mm[:ss] +/-TZ for combined dates and times.</summary>
        </member>
        <member name="F:QtCore.Qt.TimeSpec.LocalTime">
            <summary>Locale dependent time (Timezones and Daylight Savings Time).</summary>
        </member>
        <member name="F:QtCore.Qt.TimeSpec.UTC">
            <summary>Coordinated Universal Time, replaces Greenwich Mean Time.</summary>
        </member>
        <member name="F:QtCore.Qt.TimeSpec.OffsetFromUTC">
            <summary>An offset in seconds from Coordinated Universal Time.</summary>
        </member>
        <member name="F:QtCore.Qt.TimeSpec.TimeZone">
            <summary>A named time zone using a specific set of Daylight Savings rules.</summary>
        </member>
        <member name="T:QtCore.Qt.LayoutDirection">
            <summary>
            <para>Specifies the direction of Qt's layouts and text handling.</para>
            <para>Right-to-left layouts are necessary for certain languages,
            notably Arabic and Hebrew.</para>
            <para>LayoutDirectionAuto serves two purposes. When used in conjunction
            with widgets and layouts, it will imply to use the layout direction set on
            the parent widget or QApplication. This has the same effect as
            QWidget::unsetLayoutDirection().</para>
            <para>When LayoutDirectionAuto is used in conjunction with text
            layouting, it will imply that the text directionality is determined from
            the content of the string to be layouted.</para>
            <para>See also QApplication::setLayoutDirection(),
            QWidget::setLayoutDirection(), QTextOption::setTextDirection(), and
            QString::isRightToLeft().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.LayoutDirection.LeftToRight">
            <summary>Left-to-right layout.</summary>
        </member>
        <member name="F:QtCore.Qt.LayoutDirection.RightToLeft">
            <summary>Right-to-left layout.</summary>
        </member>
        <member name="F:QtCore.Qt.LayoutDirection.LayoutDirectionAuto">
            <summary>Automatic layout.</summary>
        </member>
        <member name="T:QtCore.Qt.AspectRatioMode">
            <summary>
            <para>This enum type defines what happens to the aspect ratio when
            scaling an rectangle.</para>
            <para>See also QSize::scale() and QImage::scaled().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.AspectRatioMode.IgnoreAspectRatio">
            <summary>The size is scaled freely. The aspect ratio is not preserved.</summary>
        </member>
        <member name="F:QtCore.Qt.AspectRatioMode.KeepAspectRatio">
            <summary>The size is scaled to a rectangle as large as possible inside a given rectangle, preserving the aspect ratio.</summary>
        </member>
        <member name="F:QtCore.Qt.AspectRatioMode.KeepAspectRatioByExpanding">
            <summary>The size is scaled to a rectangle as small as possible outside a given rectangle, preserving the aspect ratio.</summary>
        </member>
        <member name="T:QtCore.Qt.ItemDataRole">
            <summary>
            <para>Each item in the model has a set of data elements associated with
            it, each with its own role. The roles are used by the view to indicate to
            the model which type of data it needs. Custom models should return data in
            these types.</para>
            <para>The general purpose roles (and the associated types) are:</para>
            <para>Roles describing appearance and meta data (with associated
            types):</para>
            <para>Accessibility roles (with associated types):</para>
            <para>User roles:</para>
            <para>For user roles, it is up to the developer to decide which types
            to use and ensure that components use the correct types when accessing and
            setting data.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.DisplayRole">
            <summary>The key data to be rendered in the form of text. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.DecorationRole">
            <summary>The data to be rendered as a decoration in the form of an icon. (QColor, QIcon or QPixmap)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.EditRole">
            <summary>The data in a form suitable for editing in an editor. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.ToolTipRole">
            <summary>The data displayed in the item's tooltip. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.StatusTipRole">
            <summary>The data displayed in the status bar. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.WhatsThisRole">
            <summary>The data displayed for the item in "What's This?" mode. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.FontRole">
            <summary>The font used for items rendered with the default delegate. (QFont)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.TextAlignmentRole">
            <summary>The alignment of the text for items rendered with the default delegate. (Qt::AlignmentFlag)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.BackgroundColorRole">
            <summary>This role is obsolete. Use BackgroundRole instead.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.BackgroundRole">
            <summary>The background brush used for items rendered with the default delegate. (QBrush)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.TextColorRole">
            <summary>This role is obsolete. Use ForegroundRole instead.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.ForegroundRole">
            <summary>The foreground brush (text color, typically) used for items rendered with the default delegate. (QBrush)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.CheckStateRole">
            <summary>This role is used to obtain the checked state of an item. (Qt::CheckState)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.AccessibleTextRole">
            <summary>The text to be used by accessibility extensions and plugins, such as screen readers. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.AccessibleDescriptionRole">
            <summary>A description of the item for accessibility purposes. (QString)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.SizeHintRole">
            <summary>The size hint for the item that will be supplied to views. (QSize)</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.InitialSortOrderRole">
            <summary>This role is used to obtain the initial sort order of a header view section. (Qt::SortOrder). This role was introduced in Qt 4.8.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemDataRole.UserRole">
            <summary>The first role that can be used for application-specific purposes.</summary>
        </member>
        <member name="T:QtCore.Qt.ItemFlag">
            <summary>
            <para>This enum describes the properties of an item:</para>
            <para>Note that checkable items need to be given both a suitable set of
            flags and an initial state, indicating whether the item is checked or not.
            This is handled automatically for model/view components, but needs to be
            explicitly set for instances of QListWidgetItem, QTableWidgetItem, and
            QTreeWidgetItem.</para>
            <para>Note that it is undefined behavior to reimplement
            QAbstractItemModel::hasChildren to return true for an index if that index
            has the Qt::ItemNeverHasChildren flag set.</para>
            <para>The ItemFlags type is a typedef for QFlags&lt;ItemFlag&gt;. It
            stores an OR combination of ItemFlag values.</para>
            <para>See also QAbstractItemModel.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.NoItemFlags">
            <summary>It does not have any properties set.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsSelectable">
            <summary>It can be selected.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsEditable">
            <summary>It can be edited.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsDragEnabled">
            <summary>It can be dragged.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsDropEnabled">
            <summary>It can be used as a drop target.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsUserCheckable">
            <summary>It can be checked or unchecked by the user.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsEnabled">
            <summary>The user can interact with the item.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsTristate">
            <summary>The item can show three separate states. This enables automatic management of the state of parent items in QTreeWidget (checked if all children are checked, unchecked if all children are unchecked, or partially checked if only some children are checked).</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemNeverHasChildren">
            <summary>The item never has child items.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemFlag.ItemIsUserTristate">
            <summary>The user can cycle through three separate states. This value has been added in Qt 5.5.</summary>
        </member>
        <member name="T:QtCore.Qt.Orientation">
            <summary>
            <para>This type is used to signify an object's orientation.</para>
            <para>Orientation is used with QScrollBar for example.</para>
            <para>The Orientations type is a typedef for QFlags&lt;Orientation&gt;.
            It stores an OR combination of Orientation values.</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.DropAction">
            <summary>
            <para>The DropActions type is a typedef for QFlags&lt;DropAction&gt;.
            It stores an OR combination of DropAction values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.DropAction.CopyAction">
            <summary>Copy the data to the target.</summary>
        </member>
        <member name="F:QtCore.Qt.DropAction.MoveAction">
            <summary>Move the data from the source to the target.</summary>
        </member>
        <member name="F:QtCore.Qt.DropAction.LinkAction">
            <summary>Create a link from the source to the target.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtCore.Qt.DropAction.TargetMoveAction" -->
        <member name="F:QtCore.Qt.DropAction.IgnoreAction">
            <summary>Ignore the action (do nothing with the data).</summary>
        </member>
        <member name="T:QtCore.Qt.SortOrder">
            <summary>
            <para>This enum describes how the items in a widget are sorted.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.SortOrder.AscendingOrder">
            <summary>The items are sorted ascending e.g. starts with 'AAA' ends with 'ZZZ' in Latin-1 locales</summary>
        </member>
        <member name="F:QtCore.Qt.SortOrder.DescendingOrder">
            <summary>The items are sorted descending e.g. starts with 'ZZZ' ends with 'AAA' in Latin-1 locales</summary>
        </member>
        <member name="T:QtCore.Qt.MatchFlag">
            <summary>
            <para>This enum describes the type of matches that can be used when
            searching for items in a model.</para>
            <para>The MatchFlags type is a typedef for QFlags&lt;MatchFlag&gt;. It
            stores an OR combination of MatchFlag values.</para>
            <para>See also QString::compare() and QRegExp.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchExactly">
            <summary>Performs QVariant-based matching.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchContains">
            <summary>The search term is contained in the item.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchStartsWith">
            <summary>The search term matches the start of the item.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchEndsWith">
            <summary>The search term matches the end of the item.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchRegExp">
            <summary>Performs string-based matching using a regular expression as the search term.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchWildcard">
            <summary>Performs string-based matching using a string with wildcards as the search term.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchFixedString">
            <summary>Performs string-based matching. String-based comparisons are case-insensitive unless the MatchCaseSensitive flag is also specified.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchCaseSensitive">
            <summary>The search is case sensitive.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchWrap">
            <summary>Perform a search that wraps around, so that when the search reaches the last item in the model, it begins again at the first item and continues until all items have been examined.</summary>
        </member>
        <member name="F:QtCore.Qt.MatchFlag.MatchRecursive">
            <summary>Searches the entire hierarchy.</summary>
        </member>
        <member name="T:QtCore.Qt.GlobalColor">
            <summary>
            <para>Qt's predefined QColor objects:</para>
            <para>See also QColor.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.color0">
            <summary>0 pixel value (for bitmaps)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.color1">
            <summary>1 pixel value (for bitmaps)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.black">
            <summary>Black (#000000)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.white">
            <summary>White (#ffffff)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkGray">
            <summary>Dark gray (#808080)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.gray">
            <summary>Gray (#a0a0a4)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.lightGray">
            <summary>Light gray (#c0c0c0)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.red">
            <summary>Red (#ff0000)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.green">
            <summary>Green (#00ff00)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.blue">
            <summary>Blue (#0000ff)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.cyan">
            <summary>Cyan (#00ffff)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.magenta">
            <summary>Magenta (#ff00ff)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.yellow">
            <summary>Yellow (#ffff00)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkRed">
            <summary>Dark red (#800000)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkGreen">
            <summary>Dark green (#008000)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkBlue">
            <summary>Dark blue (#000080)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkCyan">
            <summary>Dark cyan (#008080)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkMagenta">
            <summary>Dark magenta (#800080)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.darkYellow">
            <summary>Dark yellow (#808000)</summary>
        </member>
        <member name="F:QtCore.Qt.GlobalColor.transparent">
            <summary>a transparent black value (i.e., QColor(0, 0, 0, 0))</summary>
        </member>
        <member name="T:QtCore.Qt.BrushStyle">
            <summary>
            <para>This enum type defines the brush styles supported by Qt, i.e. the
            fill pattern of shapes drawn using QPainter.</para>
            <para>See also QBrush.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.NoBrush">
            <summary>No brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.SolidPattern">
            <summary>Uniform color.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense1Pattern">
            <summary>Extremely dense brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense2Pattern">
            <summary>Very dense brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense3Pattern">
            <summary>Somewhat dense brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense4Pattern">
            <summary>Half dense brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense5Pattern">
            <summary>Somewhat sparse brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense6Pattern">
            <summary>Very sparse brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.Dense7Pattern">
            <summary>Extremely sparse brush pattern.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.HorPattern">
            <summary>Horizontal lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.VerPattern">
            <summary>Vertical lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.CrossPattern">
            <summary>Crossing horizontal and vertical lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.BDiagPattern">
            <summary>Backward diagonal lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.FDiagPattern">
            <summary>Forward diagonal lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.DiagCrossPattern">
            <summary>Crossing diagonal lines.</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.LinearGradientPattern">
            <summary>Linear gradient (set using a dedicated QBrush constructor).</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.RadialGradientPattern">
            <summary>Radial gradient (set using a dedicated QBrush constructor).</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.ConicalGradientPattern">
            <summary>Conical gradient (set using a dedicated QBrush constructor).</summary>
        </member>
        <member name="F:QtCore.Qt.BrushStyle.TexturePattern">
            <summary>Custom pattern (see QBrush::setTexture()).</summary>
        </member>
        <member name="T:QtCore.Qt.PenStyle">
            <summary>
            <para>This enum type defines the pen styles that can be drawn using
            QPainter. The styles are:</para>
            <para></para>
            <para> 	</para>
            <para>Qt::SolidLine	Qt::DashLine	Qt::DotLine</para>
            <para>	</para>
            <para>Qt::DashDotLine	Qt::DashDotDotLine	Qt::CustomDashLine</para>
            <para></para>
            <para>See also QPen.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.NoPen">
            <summary>no line at all. For example, QPainter::drawRect() fills but does not draw any boundary line.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.SolidLine">
            <summary>A plain line.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.DashLine">
            <summary>Dashes separated by a few pixels.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.DotLine">
            <summary>Dots separated by a few pixels.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.DashDotLine">
            <summary>Alternate dots and dashes.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.DashDotDotLine">
            <summary>One dash, two dots, one dash, two dots.</summary>
        </member>
        <member name="F:QtCore.Qt.PenStyle.CustomDashLine">
            <summary>A custom pattern defined using QPainterPathStroker::setDashPattern().</summary>
        </member>
        <member name="T:QtCore.Qt.CursorShape">
            <summary>
            <para>This enum type defines the various cursors that can be
            used.</para>
            <para>The standard arrow cursor is the default for widgets in a normal
            state.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.ArrowCursor">
            <summary>The standard arrow cursor.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.UpArrowCursor">
            <summary>An arrow pointing upwards toward the top of the screen.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.CrossCursor">
            <summary>A crosshair cursor, typically used to help the user accurately select a point on the screen.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.WaitCursor">
            <summary>An hourglass or watch cursor, usually shown during operations that prevent the user from interacting with the application.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.IBeamCursor">
            <summary>A caret or ibeam cursor, indicating that a widget can accept and display text input.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SizeVerCursor">
            <summary>A cursor used for elements that are used to vertically resize top-level windows.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SizeHorCursor">
            <summary>A cursor used for elements that are used to horizontally resize top-level windows.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SizeBDiagCursor">
            <summary>A cursor used for elements that are used to diagonally resize top-level windows at their top-right and bottom-left corners.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SizeFDiagCursor">
            <summary>A cursor used for elements that are used to diagonally resize top-level windows at their top-left and bottom-right corners.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SizeAllCursor">
            <summary>A cursor used for elements that are used to resize top-level windows in any direction.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.BlankCursor">
            <summary>A blank/invisible cursor, typically used when the cursor shape needs to be hidden.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SplitVCursor">
            <summary>A cursor used for vertical splitters, indicating that a handle can be dragged horizontally to adjust the use of available space.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.SplitHCursor">
            <summary>A cursor used for horizontal splitters, indicating that a handle can be dragged vertically to adjust the use of available space.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.PointingHandCursor">
            <summary>A pointing hand cursor that is typically used for clickable elements such as hyperlinks.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.ForbiddenCursor">
            <summary>A slashed circle cursor, typically used during drag and drop operations to indicate that dragged content cannot be dropped on particular widgets or inside certain regions.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.WhatsThisCursor">
            <summary>An arrow with a question mark, typically used to indicate the presence of What's This? help for a widget.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.BusyCursor">
            <summary>An hourglass or watch cursor, usually shown during operations that allow the user to interact with the application while they are performed in the background.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.OpenHandCursor">
            <summary>A cursor representing an open hand, typically used to indicate that the area under the cursor is the visible part of a canvas that the user can click and drag in order to scroll around.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.ClosedHandCursor">
            <summary>A cursor representing a closed hand, typically used to indicate that a dragging operation is in progress that involves scrolling.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.DragCopyCursor">
            <summary>A cursor that is usually used when dragging an item to copy it.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.DragMoveCursor">
            <summary>A cursor that is usually used when dragging an item.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorShape.DragLinkCursor">
            <summary>A cursor that is usually used when dragging an item to make a link to it.</summary>
        </member>
        <member name="T:QtCore.Qt.KeyboardModifier">
            <summary>
            <para>This enum describes the modifier keys.</para>
            <para>Note: On OS X, the ControlModifier value corresponds to the
            Command keys on the Macintosh keyboard, and the MetaModifier value
            corresponds to the Control keys. The KeypadModifier value will also be set
            when an arrow key is pressed as the arrow keys are considered part of the
            keypad.</para>
            <para>Note: On Windows Keyboards, Qt::MetaModifier and Qt::Key_Meta are
            mapped to the Windows key.</para>
            <para>The KeyboardModifiers type is a typedef for
            QFlags&lt;KeyboardModifier&gt;. It stores an OR combination of
            KeyboardModifier values.</para>
            <para>See also MouseButton and Modifier.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.NoModifier">
            <summary>No modifier key is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.ShiftModifier">
            <summary>A Shift key on the keyboard is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.ControlModifier">
            <summary>A Ctrl key on the keyboard is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.AltModifier">
            <summary>An Alt key on the keyboard is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.MetaModifier">
            <summary>A Meta key on the keyboard is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.KeypadModifier">
            <summary>A keypad button is pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.KeyboardModifier.GroupSwitchModifier">
            <summary>X11 only. A Mode_switch key on the keyboard is pressed.</summary>
        </member>
        <member name="T:QtCore.Qt.Modifier">
            <summary>
            <para>This enum provides shorter names for the keyboard modifier keys
            supported by Qt.</para>
            <para>Note: On OS X, the CTRL value corresponds to the Command keys on
            the Macintosh keyboard, and the META value corresponds to the Control
            keys.</para>
            <para>See also KeyboardModifier and MouseButton.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.Modifier.META">
            <summary>The Meta keys.</summary>
        </member>
        <member name="F:QtCore.Qt.Modifier.SHIFT">
            <summary>The Shift keys provided on all standard keyboards.</summary>
        </member>
        <member name="F:QtCore.Qt.Modifier.CTRL">
            <summary>The Ctrl keys.</summary>
        </member>
        <member name="F:QtCore.Qt.Modifier.ALT">
            <summary>The normal Alt keys, but not keys like AltGr.</summary>
        </member>
        <member name="F:QtCore.Qt.Modifier.UNICODE_ACCEL">
            <summary>The shortcut is specified as a Unicode code point, not as a Qt Key.</summary>
        </member>
        <member name="T:QtCore.Qt.MouseButton">
            <summary>
            <para>This enum type describes the different mouse buttons.</para>
            <para>Note: Some models of multi-button mice are pre-configured with
            high-numbered Buttons emulating keyboard sequences, for use in specific
            games. In order for these Buttons to be seen as actual 'Mouse Buttons', the
            device must be re-configured (using the vendor's configuration
            tool).</para>
            <para>The MouseButtons type is a typedef for QFlags&lt;MouseButton&gt;.
            It stores an OR combination of MouseButton values.</para>
            <para>See also KeyboardModifier and Modifier.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.NoButton">
            <summary>The button state does not refer to any button (see QMouseEvent::button()).</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.LeftButton">
            <summary>The left button is pressed, or an event refers to the left button. (The left button may be the right button on left-handed mice.)</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.RightButton">
            <summary>The right button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.MidButton">
            <summary>The middle button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.MiddleButton">
            <summary>The middle button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.BackButton">
            <summary>The 'Back' button. (Typically present on the 'thumb' side of a mouse with extra buttons. This is NOT the tilt wheel.)</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.XButton1">
            <summary>The 'Back' Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton1">
            <summary>The 'Back' Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ForwardButton">
            <summary>The 'Forward' Button. (Typically present beside the 'Back' button, and also pressed by the thumb.)</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.XButton2">
            <summary>The 'Forward Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton2">
            <summary>The 'Forward' Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.TaskButton">
            <summary>The 'Task' Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton3">
            <summary>The 'Task' Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton4">
            <summary>The 7th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton5">
            <summary>The 8th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton6">
            <summary>The 9th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton7">
            <summary>The 10th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton8">
            <summary>The 11th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton9">
            <summary>The 12th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton10">
            <summary>The 13th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton11">
            <summary>The 14th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton12">
            <summary>The 15th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton13">
            <summary>The 16th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton14">
            <summary>The 17th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton15">
            <summary>The 18th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton16">
            <summary>The 19th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton17">
            <summary>The 20th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton18">
            <summary>The 21st non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton19">
            <summary>The 22nd non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton20">
            <summary>The 23rd non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton21">
            <summary>The 24th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton22">
            <summary>The 25th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton23">
            <summary>The 26th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.ExtraButton24">
            <summary>The 27th non-wheel Mouse Button.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseButton.AllButtons">
            <summary>This value corresponds to a mask of all possible mouse buttons. Use to set the 'acceptedButtons' property of a MouseArea to accept ALL mouse buttons.</summary>
        </member>
        <member name="T:QtCore.Qt.FocusPolicy">
            <summary>
            <para>This enum type defines the various policies a widget can have
            with respect to acquiring keyboard focus.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.FocusPolicy.NoFocus">
            <summary>the widget does not accept focus.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusPolicy.TabFocus">
            <summary>the widget accepts focus by tabbing.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusPolicy.ClickFocus">
            <summary>the widget accepts focus by clicking.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusPolicy.StrongFocus">
            <summary>the widget accepts focus by both tabbing and clicking. On OS X this will also be indicate that the widget accepts tab focus when in 'Text/List focus mode'.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusPolicy.WheelFocus">
            <summary>like Qt::StrongFocus plus the widget accepts focus by using the mouse wheel.</summary>
        </member>
        <member name="T:QtCore.Qt.TabFocusBehavior">
            <summary>
            <para>This enum type provides different focus behaviors for tab
            navigation.</para>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TabFocusBehavior.NoTabFocus">
            <summary>iterate nothing.</summary>
        </member>
        <member name="F:QtCore.Qt.TabFocusBehavior.TabFocusTextControls">
            <summary>iterate text controls and widgets.</summary>
        </member>
        <member name="F:QtCore.Qt.TabFocusBehavior.TabFocusListControls">
            <summary>iterate list controls and widgets.</summary>
        </member>
        <member name="F:QtCore.Qt.TabFocusBehavior.TabFocusAllControls">
            <summary>iterate all controls and widgets.</summary>
        </member>
        <member name="T:QtCore.Qt.TileRule">
            <summary>
            <para>This enum describes how to repeat or stretch the parts of an
            image when drawing.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TileRule.StretchTile">
            <summary>Scale the image to fit to the available area.</summary>
        </member>
        <member name="F:QtCore.Qt.TileRule.RepeatTile">
            <summary>Repeat the image until there is no more space. May crop the last image.</summary>
        </member>
        <member name="F:QtCore.Qt.TileRule.RoundTile">
            <summary>Similar to Repeat, but scales the image down to ensure that the last tile is not cropped.</summary>
        </member>
        <member name="T:QtCore.Qt.AlignmentFlag">
            <summary>
            <para>This enum type is used to describe alignment. It contains
            horizontal and vertical flags that can be combined to produce the required
            effect.</para>
            <para>The TextElideMode enum can also be used in many situations to
            fine-tune the appearance of aligned text.</para>
            <para>The horizontal flags are:</para>
            <para>The vertical flags are:</para>
            <para>You can use only one of the horizontal flags at a time. There is
            one two-dimensional flag:</para>
            <para>You can use at most one horizontal and one vertical flag at a
            time. Qt::AlignCenter counts as both horizontal and vertical.</para>
            <para>Three enum values are useful in applications that can be run in
            right-to-left mode:</para>
            <para>Masks:</para>
            <para>Conflicting combinations of flags have undefined meanings.</para>
            <para>The Alignment type is a typedef for QFlags&lt;AlignmentFlag&gt;.
            It stores an OR combination of AlignmentFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignLeft">
            <summary>Aligns with the left edge.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignLeading">
            <summary>Synonym for Qt::AlignLeft.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignRight">
            <summary>Aligns with the right edge.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignTrailing">
            <summary>Synonym for Qt::AlignRight.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignHCenter">
            <summary>Centers horizontally in the available space.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignJustify">
            <summary>Justifies the text in the available space.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignAbsolute">
            <summary>If the widget's layout direction is Qt::RightToLeft (instead of Qt::LeftToRight, the default), Qt::AlignLeft refers to the right edge and Qt::AlignRight to the left edge. This is normally the desired behavior. If you want Qt::AlignLeft to always mean "left" and Qt::AlignRight to always mean "right", combine the flag with Qt::AlignAbsolute.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignTop">
            <summary>Aligns with the top.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignBottom">
            <summary>Aligns with the bottom.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignVCenter">
            <summary>Centers vertically in the available space.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignBaseline">
            <summary>Aligns with the baseline.</summary>
        </member>
        <member name="F:QtCore.Qt.AlignmentFlag.AlignCenter">
            <summary>Centers in both dimensions.</summary>
        </member>
        <member name="T:QtCore.Qt.TextFlag">
            <summary>
            <para>This enum type is used to define some modifier flags. Some of
            these flags only make sense in the context of printing:</para>
            <para>You can use as many modifier flags as you want, except that
            Qt::TextSingleLine and Qt::TextWordWrap cannot be combined.</para>
            <para>Flags that are inappropriate for a given use are generally
            ignored.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextSingleLine">
            <summary>Treats all whitespace as spaces and prints just one line.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextDontClip">
            <summary>If it's impossible to stay within the given bounds, it prints outside.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextExpandTabs">
            <summary>Makes the U+0009 (ASCII tab) character move to the next tab stop.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtCore.Qt.TextFlag.TextShowMnemonic" -->
        <member name="F:QtCore.Qt.TextFlag.TextWordWrap">
            <summary>Breaks lines at appropriate points, e.g. at word boundaries.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextWrapAnywhere">
            <summary>Breaks lines anywhere, even within words.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextDontPrint">
            <summary>Treat this text as "hidden" and don't print it.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextIncludeTrailingSpaces">
            <summary>When this option is set, QTextLine::naturalTextWidth() and QTextLine::naturalTextRect() will return a value that includes the width of trailing spaces in the text; otherwise this width is excluded.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextHideMnemonic">
            <summary>Same as Qt::TextShowMnemonic but doesn't draw the underlines.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFlag.TextJustificationForced">
            <summary>Ensures that text lines are justified.</summary>
        </member>
        <member name="T:QtCore.Qt.TextElideMode">
            <summary>
            <para>This enum specifies where the ellipsis should appear when
            displaying texts that don't fit:</para>
            <para>Qt::ElideMiddle is normally the most appropriate choice for URLs
            (e.g., &quot;http://bugreports.qt.../QTWEBSITE-13/&quot;), whereas
            Qt::ElideRight is appropriate for other strings (e.g., &quot;Deploying
            Applications on Ma...&quot;).</para>
            <para>See also QAbstractItemView::textElideMode,
            QFontMetrics::elidedText(), AlignmentFlag, and QTabBar::elideMode.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TextElideMode.ElideLeft">
            <summary>The ellipsis should appear at the beginning of the text.</summary>
        </member>
        <member name="F:QtCore.Qt.TextElideMode.ElideRight">
            <summary>The ellipsis should appear at the end of the text.</summary>
        </member>
        <member name="F:QtCore.Qt.TextElideMode.ElideMiddle">
            <summary>The ellipsis should appear in the middle of the text.</summary>
        </member>
        <member name="F:QtCore.Qt.TextElideMode.ElideNone">
            <summary>Ellipsis should NOT appear in the text.</summary>
        </member>
        <member name="T:QtCore.Qt.WhiteSpaceMode">
            <summary>
            <para>This enum describes the types of whitespace mode that are used by
            the QTextDocument class to meet the requirements of different kinds of
            textual information.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.WhiteSpaceMode.WhiteSpaceNormal">
            <summary>The whitespace mode used to display normal word wrapped text in paragraphs.</summary>
        </member>
        <member name="F:QtCore.Qt.WhiteSpaceMode.WhiteSpacePre">
            <summary>A preformatted text mode in which whitespace is reproduced exactly.</summary>
        </member>
        <member name="T:QtCore.Qt.HitTestAccuracy">
            <summary>
            <para>This enum contains the types of accuracy that can be used by the
            QTextDocument class when testing for mouse clicks on text documents.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.HitTestAccuracy.ExactHit">
            <summary>The point at which input occurred must coincide exactly with input-sensitive parts of the document.</summary>
        </member>
        <member name="F:QtCore.Qt.HitTestAccuracy.FuzzyHit">
            <summary>The point at which input occurred can lie close to input-sensitive parts of the document.</summary>
        </member>
        <member name="T:QtCore.Qt.WindowType">
            <summary>
            <para>This enum type is used to specify various window-system
            properties for the widget. They are fairly unusual but necessary in a few
            cases. Some of these flags depend on whether the underlying window manager
            supports them.</para>
            <para>The main types are</para>
            <para>There are also a number of flags which you can use to customize
            the appearance of top-level windows. These have no effect on other
            windows:</para>
            <para>The CustomizeWindowHint flag is used to enable customization of
            the window controls. This flag must be set to allow the WindowTitleHint,
            WindowSystemMenuHint, WindowMinimizeButtonHint, WindowMaximizeButtonHint
            and WindowCloseButtonHint flags to be changed.</para>
            <para>The WindowFlags type is a typedef for QFlags&lt;WindowType&gt;.
            It stores an OR combination of WindowType values.</para>
            <para>See also QWidget::windowFlags and Window Flags Example.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Widget">
            <summary>This is the default type for QWidget. Widgets of this type are child widgets if they have a parent, and independent windows if they have no parent. See also Qt::Window and Qt::SubWindow.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Window">
            <summary>Indicates that the widget is a window, usually with a window system frame and a title bar, irrespective of whether the widget has a parent or not. Note that it is not possible to unset this flag if the widget does not have a parent.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Dialog">
            <summary>Indicates that the widget is a window that should be decorated as a dialog (i.e., typically no maximize or minimize buttons in the title bar). This is the default type for QDialog. If you want to use it as a modal dialog, it should be launched from another window, or have a parent and used with the QWidget::windowModality property. If you make it modal, the dialog will prevent other top-level windows in the application from getting any input. We refer to a top-level window that has a parent as a secondary window.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Sheet">
            <summary>Indicates that the window is a Macintosh sheet. Since using a sheet implies window modality, the recommended way is to use QWidget::setWindowModality(), or QDialog::open(), instead.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Drawer">
            <summary>Indicates that the widget is a Macintosh drawer.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Popup">
            <summary>Indicates that the widget is a pop-up top-level window, i.e. that it is modal, but has a window system frame appropriate for pop-up menus.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Tool">
            <summary>Indicates that the widget is a tool window. A tool window is often a small window with a smaller than usual title bar and decoration, typically used for collections of tool buttons. If there is a parent, the tool window will always be kept on top of it. If there isn't a parent, you may consider using Qt::WindowStaysOnTopHint as well. If the window system supports it, a tool window can be decorated with a somewhat lighter frame. It can also be combined with Qt::FramelessWindowHint. On OS X, tool windows correspond to the Floating class of windows. This means that the window lives on a level above normal windows; it impossible to put a normal window on top of it. By default, tool windows will disappear when the application is inactive. This can be controlled by the Qt::WA_MacAlwaysShowToolWindow attribute.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.ToolTip">
            <summary>Indicates that the widget is a tooltip. This is used internally to implement tooltips.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.SplashScreen">
            <summary>Indicates that the window is a splash screen. This is the default type for QSplashScreen.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.Desktop">
            <summary>Indicates that this widget is the desktop. This is the type for QDesktopWidget.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.SubWindow">
            <summary>Indicates that this widget is a sub-window, such as a QMdiSubWindow widget.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.ForeignWindow">
            <summary>Indicates that this window object is a handle representing a native platform window created by another process or by manually using native code.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.CoverWindow">
            <summary>Indicates that the window represents a cover window, which is shown when the application is minimized on the BlackBerry platform for instance.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowType_Mask">
            <summary>A mask for extracting the window type part of the window flags.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.MSWindowsFixedSizeDialogHint">
            <summary>Gives the window a thin dialog border on Windows. This style is traditionally used for fixed-size dialogs.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.MSWindowsOwnDC">
            <summary>Gives the window its own display context on Windows.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.BypassWindowManagerHint">
            <summary>This flag can be used to indicate to the platform plugin that "all" window manager protocols should be disabled. This flag will behave different depending on what operating system the application is running on and what window manager is running. The flag can be used to get a native window with no configuration set.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.X11BypassWindowManagerHint">
            <summary>Bypass the window manager completely. This results in a borderless window that is not managed at all (i.e., no keyboard input unless you call QWidget::activateWindow() manually).</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.FramelessWindowHint">
            <summary>Produces a borderless window. The user cannot move or resize a borderless window via the window system. On X11, the result of the flag is dependent on the window manager and its ability to understand Motif and/or NETWM hints. Most existing modern window managers can handle this.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowTitleHint">
            <summary>Gives the window a title bar.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowSystemMenuHint">
            <summary>Adds a window system menu, and possibly a close button (for example on Mac). If you need to hide or show a close button, it is more portable to use WindowCloseButtonHint.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowMinimizeButtonHint">
            <summary>Adds a minimize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowMaximizeButtonHint">
            <summary>Adds a maximize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowMinMaxButtonsHint">
            <summary>Adds a minimize and a maximize button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowContextHelpButtonHint">
            <summary>Adds a context help button to dialogs. On some platforms this implies Qt::WindowSystemMenuHint for it to work.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowShadeButtonHint">
            <summary>Adds a shade button in place of the minimize button if the underlying window manager supports it.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowStaysOnTopHint">
            <summary>Informs the window system that the window should stay on top of all other windows. Note that on some window managers on X11 you also have to pass Qt::X11BypassWindowManagerHint for this flag to work correctly.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowTransparentForInput">
            <summary>Informs the window system that this window is used only for output (displaying something) and does not take input. Therefore input events should pass through as if it wasn't there.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowOverridesSystemGestures">
            <summary>Informs the window system that this window implements its own set of gestures and that system level gestures, like for instance three-finger desktop switching, should be disabled.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowDoesNotAcceptFocus">
            <summary>Informs the window system that this window should not receive the input focus.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.MaximizeUsingFullscreenGeometryHint">
            <summary>Informs the window system that when maximizing the window it should use as much of the available screen geometry as possible, including areas that may be covered by system UI such as status bars or application launchers. This may result in the window being placed under these system UIs, but does not guarantee it, depending on whether or not the platform supports it. When the flag is enabled the user is responsible for taking QScreen::availableGeometry() into account, so that any UI elements in the application that require user interaction are not covered by system UI.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.CustomizeWindowHint">
            <summary>Turns off the default window title hints.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowStaysOnBottomHint">
            <summary>Informs the window system that the window should stay on bottom of all other windows. Note that on X11 this hint will work only in window managers that support _NET_WM_STATE_BELOW atom. If a window always on the bottom has a parent, the parent will also be left on the bottom. This window hint is currently not implemented for OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowCloseButtonHint">
            <summary>Adds a close button. On some platforms this implies Qt::WindowSystemMenuHint for it to work.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.MacWindowToolBarButtonHint">
            <summary>On OS X adds a tool bar button (i.e., the oblong button that is on the top right of windows that have toolbars).</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.BypassGraphicsProxyWidget">
            <summary>Prevents the window and its children from automatically embedding themselves into a QGraphicsProxyWidget if the parent widget is already embedded. You can set this flag if you want your widget to always be a toplevel widget on the desktop, regardless of whether the parent widget is embedded in a scene or not.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.NoDropShadowWindowHint">
            <summary>Disables window drop shadow on supporting platforms.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowFullscreenButtonHint">
            <summary>On OS X adds a fullscreen button.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowOkButtonHint">
            <summary>Adds an OK button to the window decoration of a dialog. Only supported for Windows CE.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowType.WindowCancelButtonHint">
            <summary>Adds a Cancel button to the window decoration of a dialog. Only supported for Windows CE.</summary>
        </member>
        <member name="T:QtCore.Qt.WindowState">
            <summary>
            <para>This enum type is used to specify the current state of a
            top-level window.</para>
            <para>The states are</para>
            <para>The WindowStates type is a typedef for QFlags&lt;WindowState&gt;.
            It stores an OR combination of WindowState values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.WindowState.WindowNoState">
            <summary>The window has no state set (in normal state).</summary>
        </member>
        <member name="F:QtCore.Qt.WindowState.WindowMinimized">
            <summary>The window is minimized (i.e. iconified).</summary>
        </member>
        <member name="F:QtCore.Qt.WindowState.WindowMaximized">
            <summary>The window is maximized with a frame around it.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowState.WindowFullScreen">
            <summary>The window fills the entire screen without any frame around it.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowState.WindowActive">
            <summary>The window is the active window, i.e. it has keyboard focus.</summary>
        </member>
        <member name="T:QtCore.Qt.ApplicationState">
            <summary>
            <para>This enum type is used to specify the current state of the
            application.</para>
            <para>The states are</para>
            <para>This enum was introduced or modified in  Qt 5.1.</para>
            <para>The ApplicationStates type is a typedef for
            QFlags&lt;ApplicationState&gt;. It stores an OR combination of
            ApplicationState values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationState.ApplicationSuspended">
            <summary>The application is about to suspend. When entering this state, the application should save its state, cease all activities, and be prepared for code execution to stop. While suspended, the application can be killed at any time without further warnings (e.g. when low memory forces the OS to purge suspended applications).</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationState.ApplicationHidden">
            <summary>The application is hidden and runs in the background. This is the normal state for applications that need to do background processing, like playing music, while the user interacts with other applications. The application should free up all graphical resources when entering this state.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationState.ApplicationInactive">
            <summary>The application is visible, but not selected to be in front. On desktop platforms, this typically means that the user activated another application. On mobile platforms, it is more common to enter this state when the OS is interrupting the user with e.g. incoming calls or SMS-messages. While in this state, consider reducing CPU-intensive tasks.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationState.ApplicationActive">
            <summary>The application is visible and selected to be in front.</summary>
        </member>
        <member name="T:QtCore.Qt.ScreenOrientation">
            <summary>
            <para>This enum type specifies the various orientations a screen might
            have.</para>
            <para>The ScreenOrientations type is a typedef for
            QFlags&lt;ScreenOrientation&gt;. It stores an OR combination of
            ScreenOrientation values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ScreenOrientation.PrimaryOrientation">
            <summary>The display's primary orientation.</summary>
        </member>
        <member name="F:QtCore.Qt.ScreenOrientation.PortraitOrientation">
            <summary>Portrait orientation, display height is greater than display width, rotated 90 degree clockwise relative to landscape.</summary>
        </member>
        <member name="F:QtCore.Qt.ScreenOrientation.LandscapeOrientation">
            <summary>Landscape orientation, display width is greater than display height.</summary>
        </member>
        <member name="F:QtCore.Qt.ScreenOrientation.InvertedPortraitOrientation">
            <summary>Inverted portrait orientation, rotated 180 degrees relative to portrait.</summary>
        </member>
        <member name="F:QtCore.Qt.ScreenOrientation.InvertedLandscapeOrientation">
            <summary>Inverted landscape orientation, rotated 180 degrees relative to landscape.</summary>
        </member>
        <member name="T:QtCore.Qt.WidgetAttribute">
            <summary>
            <para>This enum type is used to specify various widget attributes.
            Attributes are set and cleared with QWidget::setAttribute(), and queried
            with QWidget::testAttribute(), although some have special convenience
            functions which are mentioned below.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_Disabled">
            <summary>Indicates that the widget is disabled, i.e. it does not receive any mouse or keyboard events. There is also a getter functions QWidget::isEnabled(). This is set/cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_UnderMouse">
            <summary>Indicates that the widget is under the mouse cursor. The value is not updated correctly during drag and drop operations. There is also a getter function, QWidget::underMouse(). This flag is set or cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MouseTracking">
            <summary>Indicates that the widget has mouse tracking enabled. See QWidget::mouseTracking.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_ContentsPropagated">
            <summary>This flag is superfluous and obsolete; it no longer has any effect. Since Qt 4.1, all widgets that do not set WA_PaintOnScreen propagate their contents.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_OpaquePaintEvent">
            <summary>Indicates that the widget paints all its pixels when it receives a paint event. Thus, it is not required for operations like updating, resizing, scrolling and focus changes to erase the widget before generating paint events. The use of WA_OpaquePaintEvent provides a small optimization by helping to reduce flicker on systems that do not support double buffering and avoiding computational cycles necessary to erase the background prior to painting. Note: Unlike WA_NoSystemBackground, WA_OpaquePaintEvent makes an effort to avoid transparent window backgrounds. This flag is set or cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoBackground">
            <summary>This value is obsolete. Use WA_OpaquePaintEvent instead.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_StaticContents">
            <summary>Indicates that the widget contents are north-west aligned and static. On resize, such a widget will receive paint events only for parts of itself that are newly visible. This flag is set or cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_PaintOnScreen">
            <summary>Indicates that the widget wants to draw directly onto the screen. Widgets with this attribute set do not participate in composition management, i.e. they cannot be semi-transparent or shine through semi-transparent overlapping widgets. Note: This flag is only supported on X11 and it disables double buffering. On Qt for Embedded Linux, the flag only works when set on a top-level widget and it relies on support from the active screen driver. This flag is set or cleared by the widget's author. To render outside of Qt's paint system, e.g., if you require native painting primitives, you need to reimplement QWidget::paintEngine() to return 0 and set this flag.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoSystemBackground">
            <summary>Indicates that the widget has no background, i.e. when the widget receives paint events, the background is not automatically repainted. Note: Unlike WA_OpaquePaintEvent, newly exposed areas are never filled with the background (e.g., after showing a window for the first time the user can see "through" it until the application processes the paint events). This flag is set or cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_UpdatesDisabled">
            <summary>Indicates that updates are blocked (including the system background). This flag is set or cleared by the Qt kernel. Warning: This flag must never be set or cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_Mapped">
            <summary>Indicates that the widget is mapped on screen. This is set/cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacNoClickThrough">
            <summary>When a widget that has this attribute set is clicked, and its window is inactive, the click will make the window active but won't be seen by the widget. Typical use of this attribute is on widgets with "destructive" actions, such as a "Delete" button. WA_MacNoClickThrough also applies to all child widgets of the widget that has it set.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_InputMethodEnabled">
            <summary>Enables input methods for Asian languages. Must be set when creating custom text editing widgets. On Windows CE this flag can be used in addition to QApplication::autoSipEnabled to automatically display the SIP when entering a widget.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_ForceDisabled">
            <summary>Indicates that the widget is explicitly disabled, i.e. it will remain disabled even when all its ancestors are set to the enabled state. This implies WA_Disabled. This is set/cleared by QWidget::setEnabled() and QWidget::setDisabled().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_KeyCompression">
            <summary>Enables key event compression if set, and disables it if not set. By default key compression is off, so widgets receive one key press event for each key press (or more, since autorepeat is usually on). If you turn it on and your program doesn't keep up with key input, Qt may try to compress key events so that more than one character can be processed in each event. For example, a word processor widget might receive 2, 3 or more characters in each QKeyEvent::text(), if the layout recalculation takes too long for the CPU. If a widget supports multiple character unicode input, it is always safe to turn the compression on. Qt performs key event compression only for printable characters. Qt::Modifier keys, cursor movement keys, function keys and miscellaneous action keys (e.g. Escape, Enter, Backspace, PrintScreen) will stop key event compression, even if there are more compressible key events available. Platforms other than Mac and X11 do not support this compression, in which case turning it on will have no effect. This is set/cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_PendingMoveEvent">
            <summary>Indicates that a move event is pending, e.g., when a hidden widget was moved. This flag is set or cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_PendingResizeEvent">
            <summary>Indicates that a resize event is pending, e.g., when a hidden widget was resized. This flag is set or cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_SetPalette">
            <summary>Indicates that the widget has a palette of its own. This flag is set or cleared by QWidget::setPalette().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_SetFont">
            <summary>Indicates that the widget has a font of its own. This flag is set or cleared by QWidget::setFont().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_SetCursor">
            <summary>Indicates that the widget has a cursor of its own. This flag is set or cleared by QWidget::setCursor() and QWidget::unsetCursor().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoChildEventsFromChildren">
            <summary>Indicates that the widget does not want to receive ChildAdded or ChildRemoved events sent from its children. This is set by a widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_WindowModified">
            <summary>Indicates that the window is marked as modified. On some platforms this flag will do nothing, on others (including OS X and Windows) the window will take a modified appearance. This flag is set or cleared by QWidget::setWindowModified().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_Resized">
            <summary>Indicates that the widget has an explicit size. This flag is set or cleared by QWidget::resize() and QWidget::setGeometry().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_Moved">
            <summary>Indicates that the widget has an explicit position. This is set/cleared by QWidget::move() and by QWidget::setGeometry().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacBrushedMetal">
            <summary>Indicates the widget should be drawn in the brushed metal style as supported by the windowing system. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_CustomWhatsThis">
            <summary>Indicates that the widget wants to continue operating normally in "What's This?" mode. This is set by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_LayoutOnEntireRect">
            <summary>Indicates that the widget wants QLayout to operate on the entire QWidget::rect(), not only on QWidget::contentsRect(). This is set by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_OutsideWSRange">
            <summary>Indicates that the widget is outside the valid range of the window system's coordinate system. A widget outside the valid range cannot be mapped on screen. This is set/cleared by the Qt kernel.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_TransparentForMouseEvents">
            <summary>When enabled, this attribute disables the delivery of mouse events to the widget and its children. Mouse events are delivered to other widgets as if the widget and its children were not present in the widget hierarchy; mouse clicks and other events effectively "pass through" them. This attribute is disabled by default.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_PaintUnclipped">
            <summary>Makes all painters operating on this widget unclipped. Children of this widget or other widgets in front of it do not clip the area the painter can paint on. This flag is only supported for widgets with the WA_PaintOnScreen flag set. The preferred way to do this in a cross platform way is to create a transparent widget that lies in front of the other widgets.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoMouseReplay">
            <summary>Used for pop-up widgets. Indicates that the most recent mouse press event should not be replayed when the pop-up widget closes. The flag is set by the widget's author and cleared by the Qt kernel every time the widget receives a new mouse event.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_DeleteOnClose">
            <summary>Makes Qt delete this widget when the widget has accepted the close event (see QWidget::closeEvent()).</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_RightToLeft">
            <summary>Indicates that the layout direction for the widget is right to left.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoChildEventsForParent">
            <summary>Indicates that the widget does not want ChildAdded or ChildRemoved events sent to its parent. This is rarely necessary but can help to avoid automatic insertion widgets like splitters and layouts. This is set by a widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_ForceUpdatesDisabled">
            <summary>Indicates that updates are explicitly disabled for the widget; i.e. it will remain disabled even when all its ancestors are set to the updates-enabled state. This implies WA_UpdatesDisabled. This is set/cleared by QWidget::setUpdatesEnabled().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_ShowModal">
            <summary>This attribute has been deprecated. Use QWidget::windowModality instead.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MouseNoMask">
            <summary>Makes the widget receive mouse events for the entire widget regardless of the currently set mask, overriding QWidget::setMask(). This is not applicable for top-level windows.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_GroupLeader">
            <summary>This attribute has been deprecated. Use QWidget::windowModality instead.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NoMousePropagation">
            <summary>Prohibits mouse events from being propagated to the widget's parent. This attribute is disabled by default.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_Hover">
            <summary>Forces Qt to generate paint events when the mouse enters or leaves the widget. This feature is typically used when implementing custom styles; see the Styles example for details.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_QuitOnClose">
            <summary>Makes Qt quit the application when the last widget with the attribute set has accepted closeEvent(). This behavior can be modified with the QApplication::quitOnLastWindowClosed property. By default this attribute is set for all widgets of type Qt::Window.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_KeyboardFocusChange">
            <summary>Set on a toplevel window when the users changes focus with the keyboard (tab, backtab, or shortcut).</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_AcceptDrops">
            <summary>Allows data from drag and drop operations to be dropped onto the widget (see QWidget::setAcceptDrops()).</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_WindowPropagation">
            <summary>Makes a toplevel window inherit font and palette from its parent.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_AlwaysShowToolTips">
            <summary>Enables tooltips for inactive windows.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacOpaqueSizeGrip">
            <summary>Indicates that the native Carbon size grip should be opaque instead of transparent (the default). This attribute is only applicable to OS X and is set by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_SetStyle">
            <summary>Indicates that the widget has a style of its own. This flag is set or cleared by QWidget::setStyle().</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_SetLocale">
            <summary>Indicates the locale should be taken into consideration in the widget.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacShowFocusRect">
            <summary>Indicates that this widget should get a QFocusFrame around it. Some widgets draw their own focus halo regardless of this attribute. Not that the QWidget::focusPolicy also plays the main role in whether something is given focus or not, this only controls whether or not this gets the focus frame. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacNormalSize">
            <summary>Indicates the widget should have the normal size for widgets in OS X. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacSmallSize">
            <summary>Indicates the widget should have the small size for widgets in OS X. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacMiniSize">
            <summary>Indicates the widget should have the mini size for widgets in OS X. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_LayoutUsesWidgetRect">
            <summary>Ignore the layout item rect from the style when laying out this widget with QLayout.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_StyledBackground">
            <summary>Indicates the widget should be drawn using a styled background.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MSWindowsUseDirect3D">
            <summary>This value is obsolete and has no effect.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacAlwaysShowToolWindow">
            <summary>On OS X, show the tool window even when the application is not active. By default, all tool windows are hidden when the application is inactive.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_StyleSheet">
            <summary>Indicates that the widget is styled using a style sheet.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_ShowWithoutActivating">
            <summary>Show the widget without making it active.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_NativeWindow">
            <summary>Indicates that a native window is created for the widget. Enabling this flag will also force a native window for the widget's ancestors unless Qt::WA_DontCreateNativeAncestors is set.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_DontCreateNativeAncestors">
            <summary>Indicates that the widget's ancestors are kept non-native even though the widget itself is native.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacVariableSize">
            <summary>Indicates the widget can choose between alternative sizes for widgets to avoid clipping. This attribute is only applicable to OS X.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_DontShowOnScreen">
            <summary>Indicates that the widget is hidden or is not a part of the viewable Desktop.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeDesktop">
            <summary>Adds _NET_WM_WINDOW_TYPE_DESKTOP to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeDock">
            <summary>Adds _NET_WM_WINDOW_TYPE_DOCK to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeToolBar">
            <summary>Adds _NET_WM_WINDOW_TYPE_TOOLBAR to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for QToolBar.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeMenu">
            <summary>Adds _NET_WM_WINDOW_TYPE_MENU to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for QMenu when torn-off.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeUtility">
            <summary>Adds _NET_WM_WINDOW_TYPE_UTILITY to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for the Qt::Tool window type.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeSplash">
            <summary>Adds _NET_WM_WINDOW_TYPE_SPLASH to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for the Qt::SplashScreen window type.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeDialog">
            <summary>Adds _NET_WM_WINDOW_TYPE_DIALOG to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for the Qt::Dialog and Qt::Sheet window types.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeDropDownMenu">
            <summary>Adds _NET_WM_WINDOW_TYPE_DROPDOWN_MENU to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for QMenu objects added to a QMenuBar.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypePopupMenu">
            <summary>Adds _NET_WM_WINDOW_TYPE_POPUP_MENU to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for QMenu.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeToolTip">
            <summary>Adds _NET_WM_WINDOW_TYPE_TOOLTIP to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for the Qt::ToolTip window type.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeNotification">
            <summary>Adds _NET_WM_WINDOW_TYPE_NOTIFICATION to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeCombo">
            <summary>Adds _NET_WM_WINDOW_TYPE_COMBO to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute for the QComboBox pop-up.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11NetWmWindowTypeDND">
            <summary>Adds _NET_WM_WINDOW_TYPE_DND to the window's _NET_WM_WINDOW_TYPE X11 window property. See http://standards.freedesktop.org/wm-spec/ for more details. This attribute has no effect on non-X11 platforms. Note: Qt automatically sets this attribute on the feedback widget used during a drag.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_MacFrameworkScaled">
            <summary>Enables resolution independence aware mode on Mac when using Carbon. This attribute has no effect on Cocoa. The attribute is off by default and can be enabled on a per-window basis.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_TranslucentBackground">
            <summary>Indicates that the widget should have a translucent background, i.e., any non-opaque regions of the widgets will be translucent because the widget will have an alpha channel. Setting this flag causes WA_NoSystemBackground to be set. On Windows the widget also needs the Qt::FramelessWindowHint window flag to be set. This flag is set or cleared by the widget's author.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_AcceptTouchEvents">
            <summary>Allows touch events (see QTouchEvent) to be sent to the widget. Must be set on all widgets that can handle touch events. Without this attribute set, events from a touch device will be sent as mouse events.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_TouchPadAcceptSingleTouchEvents">
            <summary>Allows touchpad single touch events to be sent to the widget.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_X11DoNotAcceptFocus">
            <summary>Asks the window manager to not give focus to this top level window. This attribute has no effect on non-X11 platforms.</summary>
        </member>
        <member name="F:QtCore.Qt.WidgetAttribute.WA_AlwaysStackOnTop">
            <summary>Since Qt 5.4, this value forces QOpenGLWidget and QQuickWidget to be drawn last, on top of other widgets. Ignored for other type of widgets. Setting this attribute breaks the stacking order, but allows having a semi-transparent OpenGL widget with other widgets visible underneath. It is strongly recommended to call update() on the widget's top-level window after enabling or disabling this attribute.</summary>
        </member>
        <member name="T:QtCore.Qt.ApplicationAttribute">
            <summary>
            <para>This enum describes attributes that change the behavior of
            application-wide features. These are enabled and disabled using
            QCoreApplication::setAttribute(), and can be tested for with
            QCoreApplication::testAttribute().</para>
            <para>After setting this attribute, application code that uses pixmap
            sizes in layout geometry calculations should typically divide by
            devicePixelRatio() to get device-independent layout geometry.</para>
            <para>The following values are obsolete:</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_ImmediateWidgetCreation">
            <summary>This attribute is no longer fully supported in Qt 5. It ensures that widgets are created as soon as they are constructed. By default, resources for widgets are allocated on demand to improve efficiency and minimize resource usage. Setting or clearing this attribute affects widgets constructed after the change. Setting it tells Qt to create toplevel windows immediately. Therefore, if it is important to minimize resource consumption, do not set this attribute.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_MSWindowsUseDirect3DByDefault">
            <summary>This value is obsolete and has no effect.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_DontShowIconsInMenus">
            <summary>Actions with the Icon property won't be shown in any menus unless specifically set by the QAction::iconVisibleInMenu property. Menus that are currently open or menus already created in the native OS X menubar may not pick up a change in this attribute. Changes in the QAction::iconVisibleInMenu property will always be picked up.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_NativeWindows">
            <summary>Ensures that widgets have native windows.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_DontCreateNativeWidgetSiblings">
            <summary>Ensures that siblings of native widgets stay non-native unless specifically set by the Qt::WA_NativeWindow attribute.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_MacPluginApplication">
            <summary>Stops the Qt mac application from doing specific initializations that do not necessarily make sense when using Qt to author a plugin. This includes avoiding loading our nib for the main menu and not taking possession of the native menu bar. When setting this attribute to true will also set the AA_DontUseNativeMenuBar attribute to true. It also disables native event filters.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_DontUseNativeMenuBar">
            <summary>All menubars created while this attribute is set to true won't be used as a native menubar (e.g, the menubar at the top of the main screen on OS X or at the bottom in Windows CE).</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_MacDontSwapCtrlAndMeta">
            <summary>On OS X by default, Qt swaps the Control and Meta (Command) keys (i.e., whenever Control is pressed, Qt sends Meta, and whenever Meta is pressed Control is sent). When this attribute is true, Qt will not do the flip. QKeySequence::StandardKey will also flip accordingly (i.e., QKeySequence::Copy will be Command+C on the keyboard regardless of the value set, though what is output for QKeySequence::toString(QKeySequence::PortableText) will be different).</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_Use96Dpi">
            <summary>Assume the screen has a resolution of 96 DPI rather than using the OS-provided resolution. This will cause font rendering to be consistent in pixels-per-point across devices rather than defining 1 point as 1/72 inch.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_X11InitThreads">
            <summary>Calls XInitThreads() as part of the QApplication construction in order to make Xlib calls thread-safe. This attribute must be set before QApplication is constructed.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_SynthesizeTouchForUnhandledMouseEvents">
            <summary>All mouse events that are not accepted by the application will be translated to touch events instead.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_SynthesizeMouseForUnhandledTouchEvents">
            <summary>All touch events that are not accepted by the application will be translated to left button mouse events instead. This attribute is enabled by default.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_UseHighDpiPixmaps">
            <summary>Make QIcon::pixmap() generate high-dpi pixmaps that can be larger than the requested size. Such pixmaps will have devicePixelRatio() set to a value higher than 1.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_ForceRasterWidgets">
            <summary>Make top-level widgets use pure raster surfaces, and do not support non-native GL-based child widgets.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_UseDesktopOpenGL">
            <summary>Forces the usage of desktop OpenGL (for example, opengl32.dll or libGL.so) on platforms that use dynamic loading of the OpenGL implementation. This value has been added in Qt 5.3.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_UseOpenGLES">
            <summary>Forces the usage of OpenGL ES 2.0 or higher on platforms that use dynamic loading of the OpenGL implementation. This value has been added in Qt 5.3.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_UseSoftwareOpenGL">
            <summary>Forces the usage of a software based OpenGL implementation on platforms that use dynamic loading of the OpenGL implementation. This will typically be a patched build of Mesa llvmpipe, providing OpenGL 2.1. The value may have no effect if no such OpenGL implementation is available. The default name of this library is opengl32sw.dll and can be overridden by setting the environment variable QT_OPENGL_DLL. See the platform-specific pages, for instance Qt for Windows, for more information. This value has been added in Qt 5.4.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_ShareOpenGLContexts">
            <summary>Enables resource sharing between the OpenGL contexts used by classes like QOpenGLWidget and QQuickWidget. This allows sharing OpenGL resources, like textures, between QOpenGLWidget instances that belong to different top-level windows. This value has been added in Qt 5.4.</summary>
        </member>
        <member name="F:QtCore.Qt.ApplicationAttribute.AA_SetPalette">
            <summary>Indicates whether a palette was explicitly set on the QApplication/QGuiApplication. This value has been added in Qt 5.5.</summary>
        </member>
        <member name="T:QtCore.Qt.ImageConversionFlag">
            <summary>
            <para>The options marked &quot;(default)&quot; are set if no other
            values from the list are included (since the defaults are zero):</para>
            <para>Color/Mono preference (ignored for QBitmap):</para>
            <para>Dithering mode preference for RGB channels:</para>
            <para>Dithering mode preference for alpha channel:</para>
            <para>Color matching versus dithering preference:</para>
            <para>The ImageConversionFlags type is a typedef for
            QFlags&lt;ImageConversionFlag&gt;. It stores an OR combination of
            ImageConversionFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.AutoColor">
            <summary>(default) - If the image has depth 1 and contains only black and white pixels, the pixmap becomes monochrome.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.ColorOnly">
            <summary>The pixmap is dithered/converted to the native display depth.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.MonoOnly">
            <summary>The pixmap becomes monochrome. If necessary, it is dithered using the chosen dithering algorithm.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.ThresholdAlphaDither">
            <summary>(default) - No dithering.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.OrderedAlphaDither">
            <summary>A faster, more ordered dither.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.DiffuseAlphaDither">
            <summary>A high-quality dither.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.DiffuseDither">
            <summary>(default) - A high-quality dither.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.OrderedDither">
            <summary>A faster, more ordered dither.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.ThresholdDither">
            <summary>No dithering; closest color is used.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.PreferDither">
            <summary>(default when converting to a pixmap) - Always dither 32-bit images when the image is converted to 8 bits.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.AvoidDither">
            <summary>(default when converting for the purpose of saving to file) - Dither 32-bit images only if the image has more than 256 colors and it is being converted to 8 bits.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.NoOpaqueDetection">
            <summary>Do not check whether the image contains non-opaque pixels. Use this if you know that the image is semi-transparent and you want to avoid the overhead of checking the pixels in the image until a non-opaque pixel is found, or if you want the pixmap to retain an alpha channel for some other reason. If the image has no alpha channel this flag has no effect.</summary>
        </member>
        <member name="F:QtCore.Qt.ImageConversionFlag.NoFormatConversion">
            <summary>Don't do any format conversions on the image. Can be useful when converting a QImage to a QPixmap for a one-time rendering operation for example. Note that a QPixmap not in the preferred format will be much slower as a paint device.</summary>
        </member>
        <member name="T:QtCore.Qt.BGMode">
            <summary>
            <para>Background mode:</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.Key">
            <summary>
            <para>The key names used by Qt.</para>
            <para>See also QKeyEvent::key().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Enter">
            <summary>Typically located on the keypad.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Pause">
            <summary>The Pause/Break key (Note: Not related to pausing media)</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Control">
            <summary>On OS X, this corresponds to the Command keys.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Meta">
            <summary>On OS X, this corresponds to the Control keys. On Windows keyboards, this key is mapped to the Windows key.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_AltGr">
            <summary>On Windows, when the KeyDown event for this key is sent, the Ctrl+Alt modifiers are also set.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_MediaPlay">
            <summary>A key setting the state of the media player to play</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_MediaStop">
            <summary>A key setting the state of the media player to stop</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_MediaPause">
            <summary>A key setting the state of the media player to pause (Note: not the pause/break key)</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_MediaTogglePlayPause">
            <summary>A key to toggle the play/pause state in the media player (rather than setting an absolute state)</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch0">
            <summary>On X11 this key is mapped to "My Computer" (XF86XK_MyComputer) key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch1">
            <summary>On X11 this key is mapped to "Calculator" (XF86XK_Calculator) key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch2">
            <summary>On X11 this key is mapped to XF86XK_Launch0 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch3">
            <summary>On X11 this key is mapped to XF86XK_Launch1 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch4">
            <summary>On X11 this key is mapped to XF86XK_Launch2 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch5">
            <summary>On X11 this key is mapped to XF86XK_Launch3 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch6">
            <summary>On X11 this key is mapped to XF86XK_Launch4 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch7">
            <summary>On X11 this key is mapped to XF86XK_Launch5 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch8">
            <summary>On X11 this key is mapped to XF86XK_Launch6 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Launch9">
            <summary>On X11 this key is mapped to XF86XK_Launch7 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchA">
            <summary>On X11 this key is mapped to XF86XK_Launch8 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchB">
            <summary>On X11 this key is mapped to XF86XK_Launch9 key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchC">
            <summary>On X11 this key is mapped to XF86XK_LaunchA key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchD">
            <summary>On X11 this key is mapped to XF86XK_LaunchB key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchE">
            <summary>On X11 this key is mapped to XF86XK_LaunchC key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchF">
            <summary>On X11 this key is mapped to XF86XK_LaunchD key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Calculator">
            <summary>On X11 this key is not mapped for legacy reasons. Use Qt::Key_Launch1 instead.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchG">
            <summary>On X11 this key is mapped to XF86XK_LaunchE key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_LaunchH">
            <summary>On X11 this key is mapped to XF86XK_LaunchF key for legacy reasons.</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Call">
            <summary>A key to answer or initiate a call (see Qt::Key_ToggleCallHangup for a key to toggle current call state)</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Hangup">
            <summary>A key to end an ongoing call (see Qt::Key_ToggleCallHangup for a key to toggle current call state)</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_ToggleCallHangup">
            <summary>A key to toggle the current call state (ie. either answer, or hangup) depending on current call state</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_Camera">
            <summary>A key to activate the camera shutter</summary>
        </member>
        <member name="F:QtCore.Qt.Key.Key_CameraFocus">
            <summary>A key to focus the camera</summary>
        </member>
        <member name="T:QtCore.Qt.PenCapStyle">
            <summary>
            <para>This enum type defines the pen cap styles supported by Qt, i.e.
            the line end caps that can be drawn using QPainter.</para>
            <para></para>
            <para> 	</para>
            <para>Qt::SquareCap	Qt::FlatCap	Qt::RoundCap</para>
            <para></para>
            <para>See also QPen.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.PenCapStyle.FlatCap">
            <summary>a square line end that does not cover the end point of the line.</summary>
        </member>
        <member name="F:QtCore.Qt.PenCapStyle.SquareCap">
            <summary>a square line end that covers the end point and extends beyond it by half the line width.</summary>
        </member>
        <member name="F:QtCore.Qt.PenCapStyle.RoundCap">
            <summary>a rounded line end.</summary>
        </member>
        <member name="T:QtCore.Qt.PenJoinStyle">
            <summary>
            <para>This enum type defines the pen join styles supported by Qt, i.e.
            which joins between two connected lines can be drawn using QPainter.</para>
            <para></para>
            <para> 	</para>
            <para>Qt::BevelJoin	Qt::MiterJoin	Qt::RoundJoin</para>
            <para></para>
            <para>See also QPen.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.PenJoinStyle.MiterJoin">
            <summary>The outer edges of the lines are extended to meet at an angle, and this area is filled.</summary>
        </member>
        <member name="F:QtCore.Qt.PenJoinStyle.BevelJoin">
            <summary>The triangular notch between the two lines is filled.</summary>
        </member>
        <member name="F:QtCore.Qt.PenJoinStyle.RoundJoin">
            <summary>A circular arc between the two lines is filled.</summary>
        </member>
        <member name="F:QtCore.Qt.PenJoinStyle.SvgMiterJoin">
            <summary>A miter join corresponding to the definition of a miter join in the SVG 1.2 Tiny specification.</summary>
        </member>
        <member name="T:QtCore.Qt.SizeMode">
            <summary>
            <para>This enum is used by QPainter::drawRoundedRect() and
            QPainterPath::addRoundedRect() functions to specify the radii of rectangle
            corners with respect to the dimensions of the bounding rectangles
            specified.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.SizeMode.AbsoluteSize">
            <summary>Specifies the size using absolute measurements.</summary>
        </member>
        <member name="F:QtCore.Qt.SizeMode.RelativeSize">
            <summary>Specifies the size relative to the bounding rectangle, typically using percentage measurements.</summary>
        </member>
        <member name="T:QtCore.Qt.UIEffect">
            <summary>
            <para>This enum describes the available UI effects.</para>
            <para>By default, Qt will try to use the platform specific desktop
            settings for each effect. Use the QApplication::setDesktopSettingsAware()
            function (passing false as argument) to prevent this, and the
            QApplication::setEffectEnabled() to enable or disable a particular
            effect.</para>
            <para>Note that all effects are disabled on screens running at less
            than 16-bit color depth.</para>
            <para>See also QApplication::setEffectEnabled() and
            QApplication::setDesktopSettingsAware().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_AnimateMenu">
            <summary>Show animated menus.</summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_FadeMenu">
            <summary>Show faded menus.</summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_AnimateCombo">
            <summary>Show animated comboboxes.</summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_AnimateTooltip">
            <summary>Show tooltip animations.</summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_FadeTooltip">
            <summary>Show tooltip fading effects.</summary>
        </member>
        <member name="F:QtCore.Qt.UIEffect.UI_AnimateToolBox">
            <summary>Reserved</summary>
        </member>
        <member name="T:QtCore.Qt.TextFormat">
            <summary>
            <para>This enum is used in widgets that can display both plain text and
            rich text, for example QLabel. It is used for deciding whether a text
            string should be interpreted as one or the other. This is normally done by
            passing one of the enum values to a QTextEdit::setTextFormat()
            function.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TextFormat.PlainText">
            <summary>The text string is interpreted as a plain text string.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFormat.RichText">
            <summary>The text string is interpreted as a rich text string. See Supported HTML Subset for the definition of rich text.</summary>
        </member>
        <member name="F:QtCore.Qt.TextFormat.AutoText">
            <summary>The text string is interpreted as for Qt::RichText if Qt::mightBeRichText() returns true, otherwise as Qt::PlainText.</summary>
        </member>
        <member name="T:QtCore.Qt.DockWidgetArea">
            <summary>
            <para>The DockWidgetAreas type is a typedef for
            QFlags&lt;DockWidgetArea&gt;. It stores an OR combination of DockWidgetArea
            values.</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.ToolBarArea">
            <summary>
            <para>The ToolBarAreas type is a typedef for QFlags&lt;ToolBarArea&gt;.
            It stores an OR combination of ToolBarArea values.</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.ScrollBarPolicy">
            <summary>
            <para>This enum type describes the various modes of
            QAbstractScrollArea's scroll bars.</para>
            <para>(The modes for the horizontal and vertical scroll bars are
            independent.)</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ScrollBarPolicy.ScrollBarAsNeeded">
            <summary>QAbstractScrollArea shows a scroll bar when the content is too large to fit and not otherwise. This is the default.</summary>
        </member>
        <member name="F:QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff">
            <summary>QAbstractScrollArea never shows a scroll bar.</summary>
        </member>
        <member name="F:QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOn">
            <summary>QAbstractScrollArea always shows a scroll bar. This property is ignored on systems with transient scroll bars (e.g., on Mac from version 10.7).</summary>
        </member>
        <member name="T:QtCore.Qt.Corner">
            <summary>
            <para>This enum type specifies a corner in a rectangle:</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.Corner.TopLeftCorner">
            <summary>The top-left corner of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Corner.TopRightCorner">
            <summary>The top-right corner of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Corner.BottomLeftCorner">
            <summary>The bottom-left corner of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Corner.BottomRightCorner">
            <summary>The bottom-right corner of the rectangle.</summary>
        </member>
        <member name="T:QtCore.Qt.Edge">
            <summary>
            <para>This enum type specifies an edge in a rectangle:</para>
            <para>This enum was introduced or modified in  Qt 5.1.</para>
            <para>The Edges type is a typedef for QFlags&lt;Edge&gt;. It stores an
            OR combination of Edge values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.Edge.TopEdge">
            <summary>The top edge of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Edge.LeftEdge">
            <summary>The left edge of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Edge.RightEdge">
            <summary>The right edge of the rectangle.</summary>
        </member>
        <member name="F:QtCore.Qt.Edge.BottomEdge">
            <summary>The bottom edge of the rectangle.</summary>
        </member>
        <member name="T:QtCore.Qt.ShortcutContext">
            <summary>
            <para>For a QEvent::Shortcut event to occur, the shortcut's key
            sequence must be entered by the user in a context where the shortcut is
            active. The possible contexts are these:</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ShortcutContext.WidgetShortcut">
            <summary>The shortcut is active when its parent widget has focus.</summary>
        </member>
        <member name="F:QtCore.Qt.ShortcutContext.WindowShortcut">
            <summary>The shortcut is active when its parent widget is a logical subwidget of the active top-level window.</summary>
        </member>
        <member name="F:QtCore.Qt.ShortcutContext.ApplicationShortcut">
            <summary>The shortcut is active when one of the applications windows are active.</summary>
        </member>
        <member name="F:QtCore.Qt.ShortcutContext.WidgetWithChildrenShortcut">
            <summary>The shortcut is active when its parent widget, or any of its children has focus. Children which are top-level widgets, except pop-ups, are not affected by this shortcut context.</summary>
        </member>
        <member name="T:QtCore.Qt.FillRule">
            <summary>
            <para>Specifies which method should be used to fill the paths and
            polygons.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.FillRule.OddEvenFill">
            <summary>Specifies that the region is filled using the odd even fill rule. With this rule, we determine whether a point is inside the shape by using the following method. Draw a horizontal line from the point to a location outside the shape, and count the number of intersections. If the number of intersections is an odd number, the point is inside the shape. This mode is the default.</summary>
        </member>
        <member name="F:QtCore.Qt.FillRule.WindingFill">
            <summary>Specifies that the region is filled using the non zero winding rule. With this rule, we determine whether a point is inside the shape by using the following method. Draw a horizontal line from the point to a location outside the shape. Determine whether the direction of the line at each intersection point is up or down. The winding number is determined by summing the direction of each intersection. If the number is non zero, the point is inside the shape. This fill mode can also in most cases be considered as the intersection of closed shapes.</summary>
        </member>
        <member name="T:QtCore.Qt.MaskMode">
            <summary>
            <para>This enum specifies the behavior of the
            QPixmap::createMaskFromColor() and QImage::createMaskFromColor()
            functions.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.MaskMode.MaskInColor">
            <summary>Creates a mask where all pixels matching the given color are opaque.</summary>
        </member>
        <member name="F:QtCore.Qt.MaskMode.MaskOutColor">
            <summary>Creates a mask where all pixels matching the given color are transparent.</summary>
        </member>
        <member name="F:QtCore.Qt.ClipOperation.NoClip">
            <summary>This operation turns clipping off.</summary>
        </member>
        <member name="F:QtCore.Qt.ClipOperation.ReplaceClip">
            <summary>Replaces the current clip path/rect/region with the one supplied in the function call.</summary>
        </member>
        <member name="F:QtCore.Qt.ClipOperation.IntersectClip">
            <summary>Intersects the current clip path/rect/region with the one supplied in the function call.</summary>
        </member>
        <member name="T:QtCore.Qt.ItemSelectionMode">
            <summary>
            <para>This enum is used in QGraphicsItem, QGraphicsScene and
            QGraphicsView to specify how items are selected, or how to determine if a
            shapes and items collide.</para>
            <para>See also QGraphicsScene::items(),
            QGraphicsScene::collidingItems(), QGraphicsView::items(),
            QGraphicsItem::collidesWithItem(), and
            QGraphicsItem::collidesWithPath().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionMode.ContainsItemShape">
            <summary>The output list contains only items whose shape is fully contained inside the selection area. Items that intersect with the area's outline are not included.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionMode.IntersectsItemShape">
            <summary>The output list contains both items whose shape is fully contained inside the selection area, and items that intersect with the area's outline. This is a common mode for rubber band selection.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionMode.ContainsItemBoundingRect">
            <summary>The output list contains only items whose bounding rectangle is fully contained inside the selection area. Items that intersect with the area's outline are not included.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionMode.IntersectsItemBoundingRect">
            <summary>The output list contains both items whose bounding rectangle is fully contained inside the selection area, and items that intersect with the area's outline. This method is commonly used for determining areas that need redrawing.</summary>
        </member>
        <member name="T:QtCore.Qt.ItemSelectionOperation">
            <summary>
            <para>This enum is used in QGraphicsScene to specify what to do with
            currently selected items when setting a selection area.</para>
            <para>See also QGraphicsScene::setSelectionArea().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionOperation.ReplaceSelection">
            <summary>The currently selected items are replaced by items in the selection area.</summary>
        </member>
        <member name="F:QtCore.Qt.ItemSelectionOperation.AddToSelection">
            <summary>The items in the selection area are added to the currently selected items.</summary>
        </member>
        <member name="T:QtCore.Qt.TransformationMode">
            <summary>
            <para>This enum type defines whether image transformations (e.g.,
            scaling) should be smooth or not.</para>
            <para>See also QImage::scaled().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TransformationMode.FastTransformation">
            <summary>The transformation is performed quickly, with no smoothing.</summary>
        </member>
        <member name="F:QtCore.Qt.TransformationMode.SmoothTransformation">
            <summary>The resulting image is transformed using bilinear filtering.</summary>
        </member>
        <member name="T:QtCore.Qt.Axis">
            <summary>
            <para>This enum type defines three values to represent the three axes
            in the cartesian coordinate system.</para>
            <para>See also QTransform::rotate() and
            QTransform::rotateRadians().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.Axis.XAxis">
            <summary>The X axis.</summary>
        </member>
        <member name="F:QtCore.Qt.Axis.YAxis">
            <summary>The Y axis.</summary>
        </member>
        <member name="F:QtCore.Qt.Axis.ZAxis">
            <summary>The Z axis.</summary>
        </member>
        <member name="T:QtCore.Qt.FocusReason">
            <summary>
            <para>This enum specifies why the focus changed. It will be passed
            through QWidget::setFocus and can be retrieved in the QFocusEvent sent to
            the widget upon focus change.</para>
            <para>See also Keyboard Focus in Widgets.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.MouseFocusReason">
            <summary>A mouse action occurred.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.TabFocusReason">
            <summary>The Tab key was pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.BacktabFocusReason">
            <summary>A Backtab occurred. The input for this may include the Shift or Control keys; e.g. Shift+Tab.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.ActiveWindowFocusReason">
            <summary>The window system made this window either active or inactive.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.PopupFocusReason">
            <summary>The application opened/closed a pop-up that grabbed/released the keyboard focus.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.ShortcutFocusReason">
            <summary>The user typed a label's buddy shortcut</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.MenuBarFocusReason">
            <summary>The menu bar took focus.</summary>
        </member>
        <member name="F:QtCore.Qt.FocusReason.OtherFocusReason">
            <summary>Another reason, usually application-specific.</summary>
        </member>
        <member name="T:QtCore.Qt.ContextMenuPolicy">
            <summary>
            <para>This enum type defines the various policies a widget can have
            with respect to showing a context menu.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ContextMenuPolicy.NoContextMenu">
            <summary>the widget does not feature a context menu, context menu handling is deferred to the widget's parent.</summary>
        </member>
        <member name="F:QtCore.Qt.ContextMenuPolicy.DefaultContextMenu">
            <summary>the widget's QWidget::contextMenuEvent() handler is called.</summary>
        </member>
        <member name="F:QtCore.Qt.ContextMenuPolicy.ActionsContextMenu">
            <summary>the widget displays its QWidget::actions() as context menu.</summary>
        </member>
        <member name="F:QtCore.Qt.ContextMenuPolicy.CustomContextMenu">
            <summary>the widget emits the QWidget::customContextMenuRequested() signal.</summary>
        </member>
        <member name="F:QtCore.Qt.ContextMenuPolicy.PreventContextMenu">
            <summary>the widget does not feature a context menu, and in contrast to NoContextMenu, the handling is not deferred to the widget's parent. This means that all right mouse button events are guaranteed to be delivered to the widget itself through QWidget::mousePressEvent(), and QWidget::mouseReleaseEvent().</summary>
        </member>
        <member name="T:QtCore.Qt.InputMethodQuery">
            <summary>
            <para>Masks:</para>
            <para>The InputMethodQueries type is a typedef for
            QFlags&lt;InputMethodQuery&gt;. It stores an OR combination of
            InputMethodQuery values.</para>
            <para>See also QInputMethodQueryEvent.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImEnabled">
            <summary>The widget accepts input method input.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImCursorRectangle">
            <summary>The rectangle covering the area of the input cursor in widget coordinates.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImMicroFocus">
            <summary>This query is obsolete. Use ImCursorRectangle instead.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImFont">
            <summary>The currently used font for text input.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImCursorPosition">
            <summary>The logical position of the cursor within the text surrounding the input area (see ImSurroundingText).</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImSurroundingText">
            <summary>The plain text around the input area, for example the current paragraph.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImCurrentSelection">
            <summary>The currently selected text.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImMaximumTextLength">
            <summary>The maximum number of characters that the widget can hold. If there is no limit, QVariant::QVariant() is returned.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImAnchorPosition">
            <summary>The position of the selection anchor. This may be less or greater than ImCursorPosition, depending on which side of selection the cursor is. If there is no selection, it returns the same as ImCursorPosition.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImHints">
            <summary>The hints for input method on expected input. (See Qt::InputMethodHints)</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImPreferredLanguage">
            <summary>The preferred input language.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImAbsolutePosition">
            <summary>The logical position of the cursor within the entire document.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImTextBeforeCursor">
            <summary>The plain text before the cursor. The widget can decide how much text to return, but must not return an empty string unless the cursor is at the start of the document.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImTextAfterCursor">
            <summary>The plain text after the cursor. The widget can decide how much text to return, but must not return an empty string unless the cursor is at the end of the document.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImPlatformData">
            <summary>Platform specific data for input method.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImQueryInput">
            <summary>Commonly changed properties on input.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodQuery.ImQueryAll">
            <summary>Query for all input method properties.</summary>
        </member>
        <member name="T:QtCore.Qt.InputMethodHint">
            <summary>
            <para>Flags that alter the behavior:</para>
            <para>Flags that restrict input (exclusive flags):</para>
            <para>Masks:</para>
            <para>Note: If several exclusive flags are OR-ed together, the
            resulting character set will consist of the union of the specified sets.
            For instance specifying ImhNumbersOnly and ImhUppercaseOnly would yield a
            set consisting of numbers and uppercase letters.</para>
            <para>The InputMethodHints type is a typedef for
            QFlags&lt;InputMethodHint&gt;. It stores an OR combination of
            InputMethodHint values.</para>
            <para>See also QGraphicsItem::inputMethodHints().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhNone">
            <summary>No hints.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhHiddenText">
            <summary>The input method should not show the characters while typing. This is automatically set when setting QLineEdit::echoMode to Password. Note that setting ImhHiddenText does not change the echo mode.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhSensitiveData">
            <summary>Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhNoAutoUppercase">
            <summary>The input method should not try to automatically switch to upper case when a sentence ends.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhPreferNumbers">
            <summary>Numbers are preferred (but not required).</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhPreferUppercase">
            <summary>Upper case letters are preferred (but not required).</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhPreferLowercase">
            <summary>Lower case letters are preferred (but not required).</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhNoPredictiveText">
            <summary>Do not use predictive text (i.e. dictionary lookup) while typing.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhDate">
            <summary>The text editor functions as a date field.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhTime">
            <summary>The text editor functions as a time field.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhPreferLatin">
            <summary>Latin characters are preferred (but not required).</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhMultiLine">
            <summary>Multiple lines can be entered into the text field.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhDigitsOnly">
            <summary>Only digits are allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhFormattedNumbersOnly">
            <summary>Only number input is allowed. This includes decimal point and minus sign.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhUppercaseOnly">
            <summary>Only upper case letter input is allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhLowercaseOnly">
            <summary>Only lower case letter input is allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhDialableCharactersOnly">
            <summary>Only characters suitable for phone dialing are allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhEmailCharactersOnly">
            <summary>Only characters suitable for email addresses are allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhUrlCharactersOnly">
            <summary>Only characters suitable for URLs are allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhLatinOnly">
            <summary>Only latin based input is allowed.</summary>
        </member>
        <member name="F:QtCore.Qt.InputMethodHint.ImhExclusiveInputMask">
            <summary>This mask yields nonzero if any of the exclusive flags are used.</summary>
        </member>
        <member name="T:QtCore.Qt.ToolButtonStyle">
            <summary>
            <para>The style of the tool button, describing how the button's text
            and icon should be displayed.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ToolButtonStyle.ToolButtonIconOnly">
            <summary>Only display the icon.</summary>
        </member>
        <member name="F:QtCore.Qt.ToolButtonStyle.ToolButtonTextOnly">
            <summary>Only display the text.</summary>
        </member>
        <member name="F:QtCore.Qt.ToolButtonStyle.ToolButtonTextBesideIcon">
            <summary>The text appears beside the icon.</summary>
        </member>
        <member name="F:QtCore.Qt.ToolButtonStyle.ToolButtonTextUnderIcon">
            <summary>The text appears under the icon.</summary>
        </member>
        <member name="F:QtCore.Qt.ToolButtonStyle.ToolButtonFollowStyle">
            <summary>Follow the style.</summary>
        </member>
        <member name="T:QtCore.Qt.AnchorPoint">
            <summary>
            <para>Specifies a side of a layout item that can be anchored. This is
            used by QGraphicsAnchorLayout.</para>
            <para>See also QGraphicsAnchorLayout.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorLeft">
            <summary>The left side of a layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorHorizontalCenter">
            <summary>A "virtual" side that is centered between the left and the right side of a layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorRight">
            <summary>The right side of a layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorTop">
            <summary>The top side of a layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorVerticalCenter">
            <summary>A "virtual" side that is centered between the top and the bottom side of a layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.AnchorPoint.AnchorBottom">
            <summary>The bottom side of a layout item.</summary>
        </member>
        <member name="T:QtCore.Qt.CheckState">
            <summary>
            <para>This enum describes the state of checkable items, controls, and
            widgets.</para>
            <para>See also QCheckBox, Qt::ItemFlags, and Qt::ItemDataRole.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.CheckState.Unchecked">
            <summary>The item is unchecked.</summary>
        </member>
        <member name="F:QtCore.Qt.CheckState.PartiallyChecked">
            <summary>The item is partially checked. Items in hierarchical models may be partially checked if some, but not all, of their children are checked.</summary>
        </member>
        <member name="F:QtCore.Qt.CheckState.Checked">
            <summary>The item is checked.</summary>
        </member>
        <member name="T:QtCore.Qt.WindowModality">
            <summary>
            <para>This enum specifies the behavior of a modal window. A modal
            window is one that blocks input to other windows. Note that windows that
            are children of a modal window are not blocked.</para>
            <para>The values are:</para>
            <para>See also QWidget::windowModality and QDialog.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.WindowModality.NonModal">
            <summary>The window is not modal and does not block input to other windows.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowModality.WindowModal">
            <summary>The window is modal to a single window hierarchy and blocks input to its parent window, all grandparent windows, and all siblings of its parent and grandparent windows.</summary>
        </member>
        <member name="F:QtCore.Qt.WindowModality.ApplicationModal">
            <summary>The window is modal to the application and blocks input to all windows.</summary>
        </member>
        <member name="T:QtCore.Qt.TextInteractionFlag">
            <summary>
            <para>This enum specifies how a text displaying widget reacts to user
            input.</para>
            <para>The TextInteractionFlags type is a typedef for
            QFlags&lt;TextInteractionFlag&gt;. It stores an OR combination of
            TextInteractionFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.NoTextInteraction">
            <summary>No interaction with the text is possible.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.TextSelectableByMouse">
            <summary>Text can be selected with the mouse and copied to the clipboard using a context menu or standard keyboard shortcuts.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.TextSelectableByKeyboard">
            <summary>Text can be selected with the cursor keys on the keyboard. A text cursor is shown.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.LinksAccessibleByMouse">
            <summary>Links can be highlighted and activated with the mouse.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.LinksAccessibleByKeyboard">
            <summary>Links can be focused using tab and activated with enter.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.TextEditable">
            <summary>The text is fully editable.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.TextEditorInteraction">
            <summary>The default for a text editor.</summary>
        </member>
        <member name="F:QtCore.Qt.TextInteractionFlag.TextBrowserInteraction">
            <summary>The default for QTextBrowser.</summary>
        </member>
        <member name="T:QtCore.Qt.EventPriority">
            <summary>
            <para>This enum can be used to specify event priorities.</para>
            <para>Note that these values are provided purely for convenience, since
            event priorities can be any value between INT_MAX and INT_MIN, inclusive.
            For example, you can define custom priorities as being relative to each
            other:</para>
            <para>enum CustomEventPriority</para>
            <para>{</para>
            <para>    // An important event</para>
            <para>    ImportantEventPriority = Qt::HighEventPriority,</para>
            <para></para>
            <para>    // A more important event</para>
            <para>    MoreImportantEventPriority = ImportantEventPriority +
            1,</para>
            <para></para>
            <para>    // A critical event</para>
            <para>    CriticalEventPriority = 100 *
            MoreImportantEventPriority,</para>
            <para></para>
            <para>    // Not that important</para>
            <para>    StatusEventPriority = Qt::LowEventPriority,</para>
            <para></para>
            <para>    // These are less important than Status events</para>
            <para>    IdleProcessingDoneEventPriority = StatusEventPriority -
            1</para>
            <para>};</para>
            <para>See also QCoreApplication::postEvent().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.EventPriority.HighEventPriority">
            <summary>Events with this priority are sent before events with NormalEventPriority or LowEventPriority.</summary>
        </member>
        <member name="F:QtCore.Qt.EventPriority.NormalEventPriority">
            <summary>Events with this priority are sent after events with HighEventPriority, but before events with LowEventPriority.</summary>
        </member>
        <member name="F:QtCore.Qt.EventPriority.LowEventPriority">
            <summary>Events with this priority are sent after events with HighEventPriority or NormalEventPriority.</summary>
        </member>
        <member name="T:QtCore.Qt.SizeHint">
            <summary>
            <para>This enum is used by QGraphicsLayoutItem::sizeHint()</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            <para>See also QGraphicsLayoutItem::sizeHint().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.SizeHint.MinimumSize">
            <summary>is used to specify the minimum size of a graphics layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.SizeHint.PreferredSize">
            <summary>is used to specify the preferred size of a graphics layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.SizeHint.MaximumSize">
            <summary>is used to specify the maximum size of a graphics layout item.</summary>
        </member>
        <member name="F:QtCore.Qt.SizeHint.MinimumDescent">
            <summary>is used to specify the minimum descent of a text string in a graphics layout item.</summary>
        </member>
        <member name="T:QtCore.Qt.WindowFrameSection">
            <summary>
            <para>This enum is used to describe parts of a window frame. It is
            returned by QGraphicsWidget::windowFrameSectionAt() to describe what
            section of the window frame is under the mouse.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            <para>See also QGraphicsWidget::windowFrameEvent(),
            QGraphicsWidget::paintWindowFrame(), and
            QGraphicsWidget::windowFrameSectionAt().</para>
            </summary>
        </member>
        <member name="T:QtCore.Qt.CoordinateSystem">
            <summary>
            <para>This enum specifies the coordinate system.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.CoordinateSystem.DeviceCoordinates">
            <summary>Coordinates are relative to the upper-left corner of the object's paint device.</summary>
        </member>
        <member name="F:QtCore.Qt.CoordinateSystem.LogicalCoordinates">
            <summary>Coordinates are relative to the upper-left corner of the object.</summary>
        </member>
        <member name="T:QtCore.Qt.TouchPointState">
            <summary>
            <para>This enum represents the state of a touch point at the time a
            QTouchEvent occurred.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>The TouchPointStates type is a typedef for
            QFlags&lt;TouchPointState&gt;. It stores an OR combination of
            TouchPointState values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.TouchPointState.TouchPointPressed">
            <summary>The touch point is now pressed.</summary>
        </member>
        <member name="F:QtCore.Qt.TouchPointState.TouchPointMoved">
            <summary>The touch point moved.</summary>
        </member>
        <member name="F:QtCore.Qt.TouchPointState.TouchPointStationary">
            <summary>The touch point did not move.</summary>
        </member>
        <member name="F:QtCore.Qt.TouchPointState.TouchPointReleased">
            <summary>The touch point was released.</summary>
        </member>
        <member name="T:QtCore.Qt.GestureState">
            <summary>
            <para>This enum type describes the state of a gesture.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>See also QGesture.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.GestureState.NoGesture">
            <summary>No gesture has been detected.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureState.GestureStarted">
            <summary>A continuous gesture has started.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureState.GestureUpdated">
            <summary>A gesture continues.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureState.GestureFinished">
            <summary>A gesture has finished.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureState.GestureCanceled">
            <summary>A gesture was canceled.</summary>
        </member>
        <member name="T:QtCore.Qt.GestureType">
            <summary>
            <para>This enum type describes the standard gestures.</para>
            <para>User-defined gestures are registered with the
            QGestureRecognizer::registerRecognizer() function which generates a custom
            gesture ID with the Qt::CustomGesture flag set.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>See also QGesture, QWidget::grabGesture(), and
            QGraphicsObject::grabGesture().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.TapGesture">
            <summary>A Tap gesture.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.TapAndHoldGesture">
            <summary>A Tap-And-Hold (Long-Tap) gesture.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.PanGesture">
            <summary>A Pan gesture.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.PinchGesture">
            <summary>A Pinch gesture.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.SwipeGesture">
            <summary>A Swipe gesture.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureType.CustomGesture">
            <summary>A flag that can be used to test if the gesture is a user-defined gesture ID.</summary>
        </member>
        <member name="T:QtCore.Qt.GestureFlag">
            <summary>
            <para>This enum type describes additional flags that can be used when
            subscribing to a gesture.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>The GestureFlags type is a typedef for QFlags&lt;GestureFlag&gt;.
            It stores an OR combination of GestureFlag values.</para>
            <para>See also QWidget::grabGesture() and
            QGraphicsObject::grabGesture().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.GestureFlag.DontStartGestureOnChildren">
            <summary>By default gestures can start on the widget or over any of its children. Use this flag to disable this and allow a gesture to start on the widget only.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureFlag.ReceivePartialGestures">
            <summary>Allows any ignored gesture events to be propagated to parent widgets which have specified this hint. By default only gestures that are in the Qt::GestureStarted state are propagated and the widget always gets the full gesture sequence starting with a gesture in the Qt::GestureStarted state and ending with a gesture in the Qt::GestureFinished or Qt::GestureCanceled states.</summary>
        </member>
        <member name="F:QtCore.Qt.GestureFlag.IgnoredGesturesPropagateToParent">
            <summary>Since Qt 4.7, this flag allows you to fine-tune gesture event propagation. By setting the flag when grabbing a gesture all ignored partial gestures will propagate to their parent items.</summary>
        </member>
        <member name="T:QtCore.Qt.NativeGestureType">
            <summary>
            <para>This enum returns the gesture type.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.BeginNativeGesture">
            <summary>Sent before gesture event stream.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.EndNativeGesture">
            <summary>Sent after gesture event stream.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.PanNativeGesture">
            <summary>Sent after a panning gesture. Similar to a click-and-drag mouse movement.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.ZoomNativeGesture">
            <summary>Specifies the magnification delta in percent.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.SmartZoomNativeGesture">
            <summary>Boolean magnification state.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.RotateNativeGesture">
            <summary>Rotation delta in degrees.</summary>
        </member>
        <member name="F:QtCore.Qt.NativeGestureType.SwipeNativeGesture">
            <summary>Sent after a swipe movements.</summary>
        </member>
        <member name="T:QtCore.Qt.NavigationMode">
            <summary>
            <para>This enum type describes the mode for moving focus.</para>
            <para>Note: In 4.6, cursor navigation is only implemented for Symbian
            OS. On other platforms, it behaves as NavigationModeNone.</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            <para>See also QApplication::setNavigationMode() and
            QApplication::navigationMode().</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.NavigationMode.NavigationModeNone">
            <summary>Only the touch screen is used.</summary>
        </member>
        <member name="F:QtCore.Qt.NavigationMode.NavigationModeKeypadTabOrder">
            <summary>Qt::Key_Up and Qt::Key_Down are used to change focus.</summary>
        </member>
        <member name="F:QtCore.Qt.NavigationMode.NavigationModeKeypadDirectional">
            <summary>Qt::Key_Up, Qt::Key_Down, Qt::Key_Left and Qt::Key_Right are used to change focus.</summary>
        </member>
        <member name="F:QtCore.Qt.NavigationMode.NavigationModeCursorAuto">
            <summary>The mouse cursor is used to change focus, it is displayed only on non touchscreen devices. The keypad is used to implement a virtual cursor, unless the device has an analog mouse type of input device (e.g. touchpad). This is the recommended setting for an application such as a web browser that needs pointer control on both touch and non-touch devices.</summary>
        </member>
        <member name="F:QtCore.Qt.NavigationMode.NavigationModeCursorForceVisible">
            <summary>The mouse cursor is used to change focus, it is displayed regardless of device type. The keypad is used to implement a virtual cursor, unless the device has an analog mouse type of input device (e.g. touchpad)</summary>
        </member>
        <member name="T:QtCore.Qt.CursorMoveStyle">
            <summary>
            <para>This enum describes the movement style available to text cursors.
            The options are:</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.CursorMoveStyle.LogicalMoveStyle">
            <summary>Within a left-to-right text block, decrease cursor position when pressing left arrow key, increase cursor position when pressing the right arrow key. If the text block is right-to-left, the opposite behavior applies.</summary>
        </member>
        <member name="F:QtCore.Qt.CursorMoveStyle.VisualMoveStyle">
            <summary>Pressing the left arrow key will always cause the cursor to move left, regardless of the text's writing direction. Pressing the right arrow key will always cause the cursor to move right.</summary>
        </member>
        <member name="T:QtCore.Qt.ScrollPhase">
            <summary>
            <para>This enum describes the phase of scrolling.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.ScrollPhase.ScrollBegin">
            <summary>Scrolling is about to begin, but the scrolling distance did not yet change.</summary>
        </member>
        <member name="F:QtCore.Qt.ScrollPhase.ScrollUpdate">
            <summary>The scrolling distance has changed (default).</summary>
        </member>
        <member name="F:QtCore.Qt.ScrollPhase.ScrollEnd">
            <summary>Scrolling has ended, but the scrolling distance did not change anymore.</summary>
        </member>
        <member name="T:QtCore.Qt.MouseEventSource">
            <summary>
            <para>This enum describes the source of a mouse event and can be useful
            to determine if the event is an artificial mouse event originating from
            another device such as a touchscreen.</para>
            <para>This enum was introduced or modified in  Qt 5.3.</para>
            <para>See also Qt::AA_SynthesizeMouseForUnhandledTouchEvents.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.MouseEventSource.MouseEventNotSynthesized">
            <summary>The most common value. On platforms where such information is available this value indicates that the event was generated in response to a genuine mouse event in the system.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseEventSource.MouseEventSynthesizedBySystem">
            <summary>Indicates that the mouse event was synthesized from a touch event by the platform.</summary>
        </member>
        <member name="F:QtCore.Qt.MouseEventSource.MouseEventSynthesizedByQt">
            <summary>Indicates that the mouse event was synthesized from an unhandled touch event by Qt.</summary>
        </member>
        <member name="T:QtCore.Qt.MouseEventFlag">
            <summary>
            <para>This enum provides additional information concerning a
            QMouseEvent.</para>
            <para>This enum was introduced or modified in  Qt 5.3.</para>
            <para>The MouseEventFlags type is a typedef for
            QFlags&lt;MouseEventFlag&gt;. It stores an OR combination of MouseEventFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.Qt.MouseEventFlag.MouseEventCreatedDoubleClick">
            <summary>Indicates that Qt has created a MouseButtonDblClick event from this event. The flag is set in the causing MouseButtonPress, and not in the resulting MouseButtonDblClick.</summary>
        </member>
        <member name="T:QtCore.QLatin1Char">
            <summary>
            <para>The QLatin1Char class provides an 8-bit ASCII/Latin-1
            character.</para>
            </summary>
            <remarks>
            <para>This class is only useful to construct a QChar with 8-bit
            character.</para>
            <para></para>
            <para>See also QChar, QLatin1String, and QString.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLatin1Char.#ctor(System.Char)">
            <summary>
            <para>Constructs a Latin-1 character for c. This constructor should be
            used when the encoding of the input character is known to be
            Latin-1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1Char.ToLatin1">
            <summary>
            <para>Converts a Latin-1 character to an 8-bit ASCII representation of
            the character.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLatin1Char.Unicode">
            <summary>
            <para>Converts a Latin-1 character to an 16-bit-encoded Unicode
            representation of the character.</para>
            </summary>
        </member>
        <member name="T:QtCore.QByteArray">
            <summary>
            <para>The QByteArray class provides an array of bytes.</para>
            </summary>
            <remarks>
            <para>QByteArray can be used to store both raw bytes (including '\0's)
            and traditional 8-bit '\0'-terminated strings. Using QByteArray is much
            more convenient than using const char *. Behind the scenes, it always
            ensures that the data is followed by a '\0' terminator, and uses implicit
            sharing (copy-on-write) to reduce memory usage and avoid needless copying
            of data.</para>
            <para>In addition to QByteArray, Qt also provides the QString class to
            store string data. For most purposes, QString is the class you want to use.
            It stores 16-bit Unicode characters, making it easy to store
            non-ASCII/non-Latin-1 characters in your application. Furthermore, QString
            is used throughout in the Qt API. The two main cases where QByteArray is
            appropriate are when you need to store raw binary data, and when memory
            conservation is critical (e.g., with Qt for Embedded Linux).</para>
            <para>One way to initialize a QByteArray is simply to pass a const char
            * to its constructor. For example, the following code creates a byte array
            of size 5 containing the data &quot;Hello&quot;:</para>
            <para>QByteArray ba(&quot;Hello&quot;);</para>
            <para>Although the size() is 5, the byte array also maintains an extra
            '\0' character at the end so that if a function is used that asks for a
            pointer to the underlying data (e.g. a call to data()), the data pointed to
            is guaranteed to be '\0'-terminated.</para>
            <para>QByteArray makes a deep copy of the const char * data, so you can
            modify it later without experiencing side effects. (If for performance
            reasons you don't want to take a deep copy of the character data, use
            QByteArray::fromRawData() instead.)</para>
            <para>Another approach is to set the size of the array using resize()
            and to initialize the data byte per byte. QByteArray uses 0-based indexes,
            just like C++ arrays. To access the byte at a particular index position,
            you can use operator[](). On non-const byte arrays, operator[]() returns a
            reference to a byte that can be used on the left side of an assignment. For
            example:</para>
            <para>QByteArray ba;</para>
            <para>ba.resize(5);</para>
            <para>ba[0] = 0x3c;</para>
            <para>ba[1] = 0xb8;</para>
            <para>ba[2] = 0x64;</para>
            <para>ba[3] = 0x18;</para>
            <para>ba[4] = 0xca;</para>
            <para>For read-only access, an alternative syntax is to use
            at():</para>
            <para>for (int i = 0; i &lt; ba.size(); ++i) {</para>
            <para>    if (ba.at(i) &gt;= 'a' &amp;&amp; ba.at(i) &lt;= 'f')</para>
            <para>        cout &lt;&lt; &quot;Found character in range [a-f]&quot;
            &lt;&lt; endl;</para>
            <para>}</para>
            <para>at() can be faster than operator[](), because it never causes a
            deep copy to occur.</para>
            <para>To extract many bytes at a time, use left(), right(), or
            mid().</para>
            <para>A QByteArray can embed '\0' bytes. The size() function always
            returns the size of the whole array, including embedded '\0' bytes, but
            excluding the terminating '\0' added by QByteArray. For example:</para>
            <para>QByteArray ba1(&quot;ca\0r\0t&quot;);</para>
            <para>ba1.size();                     // Returns 2.</para>
            <para>ba1.constData();                // Returns &quot;ca&quot; with
            terminating \0.</para>
            <para></para>
            <para>QByteArray ba2(&quot;ca\0r\0t&quot;, 3);</para>
            <para>ba2.size();                     // Returns 3.</para>
            <para>ba2.constData();                // Returns &quot;ca\0&quot; with
            terminating \0.</para>
            <para></para>
            <para>QByteArray ba3(&quot;ca\0r\0t&quot;, 4);</para>
            <para>ba3.size();                     // Returns 4.</para>
            <para>ba3.constData();                // Returns &quot;ca\0r&quot; with
            terminating \0.</para>
            <para></para>
            <para>const char cart[] = {'c', 'a', '\0', 'r', '\0', 't'};</para>
            <para>QByteArray ba4(QByteArray::fromRawData(cart, 6));</para>
            <para>ba4.size();                     // Returns 6.</para>
            <para>ba4.constData();                // Returns &quot;ca\0r\0t&quot;
            without terminating \0.</para>
            <para>If you want to obtain the length of the data up to and excluding
            the first '\0' character, call qstrlen() on the byte array.</para>
            <para>After a call to resize(), newly allocated bytes have undefined
            values. To set all the bytes to a particular value, call fill().</para>
            <para>To obtain a pointer to the actual character data, call data() or
            constData(). These functions return a pointer to the beginning of the data.
            The pointer is guaranteed to remain valid until a non-const function is
            called on the QByteArray. It is also guaranteed that the data ends with a
            '\0' byte unless the QByteArray was created from a raw data. This '\0' byte
            is automatically provided by QByteArray and is not counted in
            size().</para>
            <para>QByteArray provides the following basic functions for modifying
            the byte data: append(), prepend(), insert(), replace(), and remove(). For
            example:</para>
            <para>QByteArray x(&quot;and&quot;);</para>
            <para>x.prepend(&quot;rock &quot;);         // x == &quot;rock
            and&quot;</para>
            <para>x.append(&quot; roll&quot;);          // x == &quot;rock and
            roll&quot;</para>
            <para>x.replace(5, 3, &quot;&amp;&quot;);       // x == &quot;rock
            &amp; roll&quot;</para>
            <para>The replace() and remove() functions' first two arguments are the
            position from which to start erasing and the number of bytes that should be
            erased.</para>
            <para>When you append() data to a non-empty array, the array will be
            reallocated and the new data copied to it. You can avoid this behavior by
            calling reserve(), which preallocates a certain amount of memory. You can
            also call capacity() to find out how much memory QByteArray actually
            allocated. Data appended to an empty array is not copied.</para>
            <para>A frequent requirement is to remove whitespace characters from a
            byte array ('\n', '\t', ' ', etc.). If you want to remove whitespace from
            both ends of a QByteArray, use trimmed(). If you want to remove whitespace
            from both ends and replace multiple consecutive whitespaces with a single
            space character within the byte array, use simplified().</para>
            <para>If you want to find all occurrences of a particular character or
            substring in a QByteArray, use indexOf() or lastIndexOf(). The former
            searches forward starting from a given index position, the latter searches
            backward. Both return the index position of the character or substring if
            they find it; otherwise, they return -1. For example, here's a typical loop
            that finds all occurrences of a particular substring:</para>
            <para>QByteArray ba(&quot;We must be &lt;b&gt;bold&lt;/b&gt;, very
            &lt;b&gt;bold&lt;/b&gt;&quot;);</para>
            <para>int j = 0;</para>
            <para>while ((j = ba.indexOf(&quot;&lt;b&gt;&quot;, j)) != -1) {</para>
            <para>    cout &lt;&lt; &quot;Found &lt;b&gt; tag at index position
            &quot; &lt;&lt; j &lt;&lt; endl;</para>
            <para>    ++j;</para>
            <para>}</para>
            <para>If you simply want to check whether a QByteArray contains a
            particular character or substring, use contains(). If you want to find out
            how many times a particular character or substring occurs in the byte
            array, use count(). If you want to replace all occurrences of a particular
            value with another, use one of the two-parameter replace()
            overloads.</para>
            <para>QByteArrays can be compared using overloaded operators such as
            operator&lt;(), operator&lt;=(), operator==(), operator&gt;=(), and so on.
            The comparison is based exclusively on the numeric values of the characters
            and is very fast, but is not what a human would expect.
            QString::localeAwareCompare() is a better choice for sorting user-interface
            strings.</para>
            <para>For historical reasons, QByteArray distinguishes between a null
            byte array and an empty byte array. A null byte array is a byte array that
            is initialized using QByteArray's default constructor or by passing (const
            char *)0 to the constructor. An empty byte array is any byte array with
            size 0. A null byte array is always empty, but an empty byte array isn't
            necessarily null:</para>
            <para>QByteArray().isNull();          // returns true</para>
            <para>QByteArray().isEmpty();         // returns true</para>
            <para></para>
            <para>QByteArray(&quot;&quot;).isNull();        // returns false</para>
            <para>QByteArray(&quot;&quot;).isEmpty();       // returns true</para>
            <para></para>
            <para>QByteArray(&quot;abc&quot;).isNull();     // returns false</para>
            <para>QByteArray(&quot;abc&quot;).isEmpty();    // returns false</para>
            <para>All functions except isNull() treat null byte arrays the same as
            empty byte arrays. For example, data() returns a pointer to a '\0'
            character for a null byte array (not a null pointer), and QByteArray()
            compares equal to QByteArray(&quot;&quot;). We recommend that you always
            use isEmpty() and avoid isNull().</para>
            <para></para>
            <para>Notes on Locale</para>
            <para></para>
            <para>Number-String Conversions</para>
            <para>Functions that perform conversions between numeric data types and
            strings are performed in the C locale, irrespective of the user's locale
            settings. Use QString to perform locale-aware conversions between numbers
            and strings.</para>
            <para></para>
            <para>8-bit Character Comparisons</para>
            <para>In QByteArray, the notion of uppercase and lowercase and of which
            character is greater than or less than another character is locale
            dependent. This affects functions that support a case insensitive option or
            that compare or lowercase or uppercase their arguments. Case insensitive
            operations and comparisons will be accurate if both strings contain only
            ASCII characters. (If $LC_CTYPE is set, most Unix systems do &quot;the
            right thing&quot;.) Functions that this affects include contains(),
            indexOf(), lastIndexOf(), operator&lt;(), operator&lt;=(), operator&gt;(),
            operator&gt;=(), toLower() and toUpper().</para>
            <para>This issue does not apply to QStrings since they represent
            characters using Unicode.</para>
            <para></para>
            <para>See also QString and QBitArray.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QByteArray.#ctor(System.String,System.Int32)">
            <summary>
            <para>Constructs a byte array containing the first size bytes of array
            data.</para>
            <para>If data is 0, a null byte array is constructed.</para>
            <para>If size is negative, data is assumed to point to a nul-terminated
            string and its length is determined dynamically. The terminating
            nul-character is not considered part of the byte array.</para>
            <para>QByteArray makes a deep copy of the string data.</para>
            <para>See also fromRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.#ctor(System.Int32,System.Char)">
            <summary>
            <para>Constructs a byte array of size size with every byte set to
            character ch.</para>
            <para>See also fill().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a copy of other.</para>
            <para>This operation takes constant time, because QByteArray is
            implicitly shared. This makes returning a QByteArray from a function very
            fast. If a shared instance is modified, it will be copied (copy-on-write),
            taking linear time.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Swap(QtCore.QByteArray)">
            <summary>
            <para>Swaps byte array other with this byte array. This operation is
            very fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Resize(System.Int32)">
            <summary>
            <para>Sets the size of the byte array to size bytes.</para>
            <para>If size is greater than the current size, the byte array is
            extended to make it size bytes with the extra bytes added to the end. The
            new bytes are uninitialized.</para>
            <para>If size is less than the current size, bytes are removed from the
            end.</para>
            <para>See also size() and truncate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Fill(System.Char,System.Int32)">
            <summary>
            <para>Sets every byte in the byte array to character ch. If size is
            different from -1 (the default), the byte array is resized to size size
            beforehand.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Istambul&quot;);</para>
            <para>ba.fill('o');</para>
            <para>// ba == &quot;oooooooo&quot;</para>
            <para></para>
            <para>ba.fill('X', 2);</para>
            <para>// ba == &quot;XX&quot;</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Reserve(System.Int32)">
            <summary>
            <para>Attempts to allocate memory for at least size bytes. If you know
            in advance how large the byte array will be, you can call this function,
            and if you call resize() often you are likely to get better performance. If
            size is an underestimate, the worst that will happen is that the QByteArray
            will be a bit slower.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QByteArray's memory usage. In general, you will rarely ever need to
            call this function. If you want to change the size of the byte array, call
            resize().</para>
            <para>See also squeeze() and capacity().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Squeeze">
            <summary>
            <para>Releases any memory not required to store the array's
            data.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QByteArray's memory usage. In general, you will rarely ever need to
            call this function.</para>
            <para>See also reserve() and capacity().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Implicit(QtCore.QByteArray)~System.String">
            <summary>
            <para>Returns a pointer to the data stored in the byte array. The
            pointer can be used to access the bytes that compose the array. The data is
            '\0'-terminated. The pointer remains valid as long as the array isn't
            reallocated or destroyed.</para>
            <para>This operator is mostly useful to pass a byte array to a function
            that accepts a const char *.</para>
            <para>You can disable this operator by defining
            QT_NO_CAST_FROM_BYTEARRAY when you compile your applications.</para>
            <para>Note: A QByteArray can store any byte values including '\0's, but
            most functions that take char * arguments assume that the data ends at the
            first '\0' they encounter.</para>
            <para>See also constData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Implicit(QtCore.QByteArray)~System.IntPtr">
            <summary>
            <para>Returns a pointer to the data stored in the byte array. The
            pointer can be used to access the bytes that compose the array. The data is
            '\0'-terminated. The pointer remains valid as long as the array isn't
            reallocated or destroyed.</para>
            <para>This operator is mostly useful to pass a byte array to a function
            that accepts a const char *.</para>
            <para>You can disable this operator by defining
            QT_NO_CAST_FROM_BYTEARRAY when you compile your applications.</para>
            <para>Note: A QByteArray can store any byte values including '\0's, but
            most functions that take char * arguments assume that the data ends at the
            first '\0' they encounter.</para>
            <para>See also constData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Clear">
            <summary>
            <para>Clears the contents of the byte array and makes it empty.</para>
            <para>See also resize() and isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.At(System.Int32)">
            <summary>
            <para>Returns the character at index position i in the byte
            array.</para>
            <para>i must be a valid index position in the byte array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also operator[]().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.IndexOf(System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the first occurrence of the
            character ch in the byte array, searching forward from index position from.
            Returns -1 if ch could not be found.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;ABCBA&quot;);</para>
            <para>ba.indexOf(&quot;B&quot;);            // returns 1</para>
            <para>ba.indexOf(&quot;B&quot;, 1);         // returns 1</para>
            <para>ba.indexOf(&quot;B&quot;, 2);         // returns 3</para>
            <para>ba.indexOf(&quot;X&quot;);            // returns -1</para>
            <para>See also lastIndexOf() and contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.IndexOf(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the first occurrence of the string
            str in the byte array, searching forward from index position from. Returns
            -1 if str could not be found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.IndexOf(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>Returns the index position of the first occurrence of the byte
            array ba in this byte array, searching forward from index position from.
            Returns -1 if ba could not be found.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;sticky question&quot;);</para>
            <para>QByteArray y(&quot;sti&quot;);</para>
            <para>x.indexOf(y);               // returns 0</para>
            <para>x.indexOf(y, 1);            // returns 10</para>
            <para>x.indexOf(y, 10);           // returns 10</para>
            <para>x.indexOf(y, 11);           // returns -1</para>
            <para>See also lastIndexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.LastIndexOf(System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the last occurrence of character ch
            in the byte array, searching backward from index position from. If from is
            -1 (the default), the search starts at the last (size() - 1) byte. Returns
            -1 if ch could not be found.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;ABCBA&quot;);</para>
            <para>ba.lastIndexOf(&quot;B&quot;);        // returns 3</para>
            <para>ba.lastIndexOf(&quot;B&quot;, 3);     // returns 3</para>
            <para>ba.lastIndexOf(&quot;B&quot;, 2);     // returns 1</para>
            <para>ba.lastIndexOf(&quot;X&quot;);        // returns -1</para>
            <para>See also indexOf() and contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.LastIndexOf(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the last occurrence of the string
            str in the byte array, searching backward from index position from. If from
            is -1 (the default), the search starts at the last (size() - 1) byte.
            Returns -1 if str could not be found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.LastIndexOf(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>Returns the index position of the last occurrence of the byte
            array ba in this byte array, searching backward from index position from.
            If from is -1 (the default), the search starts at the last byte. Returns -1
            if ba could not be found.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;crazy azimuths&quot;);</para>
            <para>QByteArray y(&quot;az&quot;);</para>
            <para>x.lastIndexOf(y);           // returns 6</para>
            <para>x.lastIndexOf(y, 6);        // returns 6</para>
            <para>x.lastIndexOf(y, 5);        // returns 2</para>
            <para>x.lastIndexOf(y, 1);        // returns -1</para>
            <para>See also indexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Contains(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the byte array contains the character ch;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Contains(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the byte array contains the string str; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Contains(QtCore.QByteArray)">
            <summary>
            <para>Returns true if the byte array contains an occurrence of the byte
            array ba; otherwise returns false.</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Count(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the number of occurrences of character ch in the byte
            array.</para>
            <para>See also contains() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Count(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the number of (potentially overlapping) occurrences of
            string str in the byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Count(QtCore.QByteArray)">
            <summary>
            <para>Returns the number of (potentially overlapping) occurrences of
            byte array ba in this byte array.</para>
            <para>See also contains() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Left(System.Int32)">
            <summary>
            <para>Returns a byte array that contains the leftmost len bytes of this
            byte array.</para>
            <para>The entire byte array is returned if len is greater than
            size().</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Pineapple&quot;);</para>
            <para>QByteArray y = x.left(4);</para>
            <para>// y == &quot;Pine&quot;</para>
            <para>See also right(), mid(), startsWith(), and truncate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Right(System.Int32)">
            <summary>
            <para>Returns a byte array that contains the rightmost len bytes of
            this byte array.</para>
            <para>The entire byte array is returned if len is greater than
            size().</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Pineapple&quot;);</para>
            <para>QByteArray y = x.right(5);</para>
            <para>// y == &quot;apple&quot;</para>
            <para>See also endsWith(), left(), and mid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Mid(System.Int32,System.Int32)">
            <summary>
            <para>Returns a byte array containing len bytes from this byte array,
            starting at position pos.</para>
            <para>If len is -1 (the default), or pos + len &gt;= size(), returns a
            byte array containing all bytes starting at position pos until the end of
            the byte array.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Five pineapples&quot;);</para>
            <para>QByteArray y = x.mid(5, 4);     // y == &quot;pine&quot;</para>
            <para>QByteArray z = x.mid(5);        // z ==
            &quot;pineapples&quot;</para>
            <para>See also left() and right().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.StartsWith(QtCore.QByteArray)">
            <summary>
            <para>Returns true if this byte array starts with byte array ba;
            otherwise returns false.</para>
            <para>Example:</para>
            <para>QByteArray url(&quot;ftp://ftp.qt-project.org/&quot;);</para>
            <para>if (url.startsWith(&quot;ftp:&quot;))</para>
            <para>    ...</para>
            <para>See also endsWith() and left().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.StartsWith(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if this byte array starts with character ch;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.StartsWith(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if this byte array starts with string str; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.EndsWith(QtCore.QByteArray)">
            <summary>
            <para>Returns true if this byte array ends with byte array ba;
            otherwise returns false.</para>
            <para>Example:</para>
            <para>QByteArray
            url(&quot;http://qt-project.org/doc/qt-5.0/qtdoc/index.html&quot;);</para>
            <para>if (url.endsWith(&quot;.html&quot;))</para>
            <para>    ...</para>
            <para>See also startsWith() and right().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.EndsWith(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if this byte array ends with character ch; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.EndsWith(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if this byte array ends with string str; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Truncate(System.Int32)">
            <summary>
            <para>Truncates the byte array at index position pos.</para>
            <para>If pos is beyond the end of the array, nothing happens.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Stockholm&quot;);</para>
            <para>ba.truncate(5);             // ba == &quot;Stock&quot;</para>
            <para>See also chop(), resize(), and left().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Chop(System.Int32)">
            <summary>
            <para>Removes n bytes from the end of the byte array.</para>
            <para>If n is greater than size(), the result is an empty byte
            array.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;STARTTLS\r\n&quot;);</para>
            <para>ba.chop(2);                 // ba == &quot;STARTTLS&quot;</para>
            <para>See also truncate(), resize(), and left().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToLower">
            <summary>
            <para>Returns a lowercase copy of the byte array. The bytearray is
            interpreted as a Latin-1 encoded string.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Qt by THE QT COMPANY&quot;);</para>
            <para>QByteArray y = x.toLower();</para>
            <para>// y == &quot;qt by the qt company&quot;</para>
            <para>See also toUpper() and 8-bit Character Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToUpper">
            <summary>
            <para>Returns an uppercase copy of the byte array. The bytearray is
            interpreted as a Latin-1 encoded string.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Qt by THE QT COMPANY&quot;);</para>
            <para>QByteArray y = x.toUpper();</para>
            <para>// y == &quot;QT BY THE QT COMPANY&quot;</para>
            <para>See also toLower() and 8-bit Character Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.LeftJustified(System.Int32,System.Char,System.Boolean)">
            <summary>
            <para>Returns a byte array of size width that contains this byte array
            padded by the fill character.</para>
            <para>If truncate is false and the size() of the byte array is more
            than width, then the returned byte array is a copy of this byte
            array.</para>
            <para>If truncate is true and the size() of the byte array is more than
            width, then any bytes in a copy of the byte array after position width are
            removed, and the copy is returned.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;apple&quot;);</para>
            <para>QByteArray y = x.leftJustified(8, '.');   // y ==
            &quot;apple...&quot;</para>
            <para>See also rightJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.RightJustified(System.Int32,System.Char,System.Boolean)">
            <summary>
            <para>Returns a byte array of size width that contains the fill
            character followed by this byte array.</para>
            <para>If truncate is false and the size of the byte array is more than
            width, then the returned byte array is a copy of this byte array.</para>
            <para>If truncate is true and the size of the byte array is more than
            width, then the resulting byte array is truncated at position width.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;apple&quot;);</para>
            <para>QByteArray y = x.rightJustified(8, '.');    // y ==
            &quot;...apple&quot;</para>
            <para>See also leftJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Prepend(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Prepends the character ch to this byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Prepend(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Prepends the string str to this byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Prepend(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Prepends len bytes of the string str to this byte array.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Prepend(QtCore.QByteArray)">
            <summary>
            <para>Prepends the byte array ba to this byte array and returns a
            reference to this byte array.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;ship&quot;);</para>
            <para>QByteArray y(&quot;air&quot;);</para>
            <para>x.prepend(y);</para>
            <para>// x == &quot;airship&quot;</para>
            <para>This is the same as insert(0, ba).</para>
            <para>Note: QByteArray is an implicitly shared class. Consequently, if
            this is an empty QByteArray, then this will just share the data held in ba.
            In this case, no copying of data is done, taking constant time. If a shared
            instance is modified, it will be copied (copy-on-write), taking linear
            time.</para>
            <para>If this is not an empty QByteArray, a deep copy of the data is
            performed, taking linear time.</para>
            <para>See also append() and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Append(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends the character ch to this byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Append(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends the string str to this byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Append(System.String,System.Int32)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends the first len characters of the string str to this byte
            array and returns a reference to this byte array.</para>
            <para>If len is negative, the length of the string will be determined
            automatically using qstrlen(). If len is zero or str is null, nothing is
            appended to the byte array. Ensure that len is not longer than str.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Append(QtCore.QByteArray)">
            <summary>
            <para>Appends the byte array ba onto the end of this byte array.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;free&quot;);</para>
            <para>QByteArray y(&quot;dom&quot;);</para>
            <para>x.append(y);</para>
            <para>// x == &quot;freedom&quot;</para>
            <para>This is the same as insert(size(), ba).</para>
            <para>Note: QByteArray is an implicitly shared class. Consequently, if
            this is an empty QByteArray, then this will just share the data held in ba.
            In this case, no copying of data is done, taking constant time. If a shared
            instance is modified, it will be copied (copy-on-write), taking linear
            time.</para>
            <para>If this is not an empty QByteArray, a deep copy of the data is
            performed, taking linear time.</para>
            <para>This operation typically does not suffer from allocation
            overhead, because QByteArray preallocates extra space at the end of the
            data so that it may grow without reallocating for each append
            operation.</para>
            <para>See also operator+=(), prepend(), and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Insert(System.Int32,System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts character ch at index position i in the byte array. If i
            is greater than size(), the array is first extended using resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Insert(System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the string str at position i in the byte array.</para>
            <para>If i is greater than size(), the array is first extended using
            resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Insert(System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts len bytes of the string str at position i in the byte
            array.</para>
            <para>If i is greater than size(), the array is first extended using
            resize().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Insert(System.Int32,QtCore.QByteArray)">
            <summary>
            <para>Inserts the byte array ba at index position i and returns a
            reference to this byte array.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Meal&quot;);</para>
            <para>ba.insert(1, QByteArray(&quot;ontr&quot;));</para>
            <para>// ba == &quot;Montreal&quot;</para>
            <para>See also append(), prepend(), replace(), and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Remove(System.Int32,System.Int32)">
            <summary>
            <para>Removes len bytes from the array, starting at index position pos,
            and returns a reference to the array.</para>
            <para>If pos is out of range, nothing happens. If pos is valid, but pos
            + len is larger than the size of the array, the array is truncated at
            position pos.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Montreal&quot;);</para>
            <para>ba.remove(1, 4);</para>
            <para>// ba == &quot;Meal&quot;</para>
            <para>See also insert() and replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces len bytes from index position pos with the zero
            terminated string after.</para>
            <para>Notice: this can change the length of the byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces len bytes from index position pos with alen bytes from
            the string after. after is allowed to have '\0' characters.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Int32,System.Int32,QtCore.QByteArray)">
            <summary>
            <para>Replaces len bytes from index position pos with the byte array
            after, and returns a reference to this byte array.</para>
            <para>Example:</para>
            <para>QByteArray x(&quot;Say yes!&quot;);</para>
            <para>QByteArray y(&quot;no&quot;);</para>
            <para>x.replace(4, 3, y);</para>
            <para>// x == &quot;Say no!&quot;</para>
            <para>See also insert() and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Char,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the character before with the string
            after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Char,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the character before with the byte
            array after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the string before with the string
            after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the string before with the string
            after. Since the sizes of the strings are given by bsize and asize, they
            may contain zero characters and do not need to be zero-terminated.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the byte array before with the byte
            array after.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;colour behaviour flavour
            neighbour&quot;);</para>
            <para>ba.replace(QByteArray(&quot;ou&quot;),
            QByteArray(&quot;o&quot;));</para>
            <para>// ba == &quot;color behavior flavor neighbor&quot;</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(QtCore.QByteArray,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the byte array before with the
            string after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the string before with the byte
            array after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace(System.Char,System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the character before with the
            character after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Repeated(System.Int32)">
            <summary>
            <para>Returns a copy of this byte array repeated the specified number
            of times.</para>
            <para>If times is less than 1, an empty byte array is returned.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;ab&quot;);</para>
            <para>ba.repeated(4);             // returns
            &quot;abababab&quot;</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Append1(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends the string str to this byte array. The Unicode data is
            converted into 8-bit characters using QString::toUtf8().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Insert1(System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the string str at index position i in the byte array. The
            Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>If i is greater than size(), the array is first extended using
            resize().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace1(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the string before with the string
            after.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace1(System.Char,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the character before with the string
            after. The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Replace1(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replaces every occurrence of the string before with the byte
            array after. The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.IndexOf1(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the first occurrence of the string
            str in the byte array, searching forward from index position from. Returns
            -1 if str could not be found.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.LastIndexOf1(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the last occurrence of the string
            str in the byte array, searching backward from index position from. If from
            is -1 (the default), the search starts at the last (size() - 1) byte.
            Returns -1 if str could not be found.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>You can disable this function by defining QT_NO_CAST_TO_ASCII
            when you compile your applications. You then need to call QString::toUtf8()
            (or QString::toLatin1() or QString::toLocal8Bit()) explicitly if you want
            to convert the data to const char *.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Equality(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is equal to string str; otherwise
            returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Inequality(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is not equal to string str;
            otherwise returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThan(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is lexically less than string
            str; otherwise returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThan(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is lexically greater than string
            str; otherwise returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThanOrEqual(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is lexically less than or equal
            to string str; otherwise returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThanOrEqual(QtCore.QByteArray,System.String)">
            <summary>
            <para>Returns true if this byte array is greater than or equal to
            string str; otherwise returns false.</para>
            <para>The Unicode data is converted into 8-bit characters using
            QString::toUtf8().</para>
            <para>The comparison is case sensitive.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. You then need to call
            QString::fromUtf8(), QString::fromLatin1(), or QString::fromLocal8Bit()
            explicitly if you want to convert the byte array to a QString before doing
            the comparison.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to a short using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToUShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to an int using base base, which
            is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray str(&quot;FF&quot;);</para>
            <para>bool ok;</para>
            <para>int hex = str.toInt(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>int dec = str.toInt(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToUInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to an unsigned int using base
            base, which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to a long int using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray str(&quot;FF&quot;);</para>
            <para>bool ok;</para>
            <para>long hex = str.toLong(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>long dec = str.toLong(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToULong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to an unsigned long int using
            base base, which is 10 by default and must be between 2 and 36, or
            0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToLongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToULongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the byte array converted to an unsigned long long using
            base base, which is 10 by default and must be between 2 and 36, or
            0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToFloat(System.Boolean@)">
            <summary>
            <para>Returns the byte array converted to a float value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToDouble(System.Boolean@)">
            <summary>
            <para>Returns the byte array converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray string(&quot;1234.56&quot;);</para>
            <para>double a = string.toDouble();   // a == 1234.56</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToBase64(QtCore.QByteArray.Base64Option)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the byte array, encoded using the options
            options.</para>
            <para>QByteArray text(&quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;);</para>
            <para>text.toBase64(QByteArray::Base64Encoding |
            QByteArray::OmitTrailingEquals);      // returns
            &quot;PHA+SGVsbG8/PC9wPg&quot;</para>
            <para>text.toBase64(QByteArray::Base64Encoding);
            // returns &quot;PHA+SGVsbG8/PC9wPg==&quot;</para>
            <para>text.toBase64(QByteArray::Base64UrlEncoding);
            // returns &quot;PHA-SGVsbG8_PC9wPg==&quot;</para>
            <para>text.toBase64(QByteArray::Base64UrlEncoding |
            QByteArray::OmitTrailingEquals);   // returns
            &quot;PHA-SGVsbG8_PC9wPg&quot;</para>
            <para>The algorithm used to encode Base64-encoded data is defined in
            RFC 4648.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also fromBase64().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToBase64">
            <summary>
            <para>Returns a copy of the byte array, encoded as Base64.</para>
            <para>QByteArray text(&quot;Qt is great!&quot;);</para>
            <para>text.toBase64();        // returns
            &quot;UXQgaXMgZ3JlYXQh&quot;</para>
            <para>The algorithm used to encode Base64-encoded data is defined in
            RFC 4648.</para>
            <para>See also fromBase64().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToHex">
            <summary>
            <para>Returns a hex encoded copy of the byte array. The hex encoding
            uses the numbers 0-9 and the letters a-f.</para>
            <para>See also fromHex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToPercentEncoding(QtCore.QByteArray,QtCore.QByteArray,System.Char)">
            <summary>
            <para>Returns a URI/URL-style percent-encoded copy of this byte array.
            The percent parameter allows you to override the default '%' character for
            another.</para>
            <para>By default, this function will encode all characters that are not
            one of the following:</para>
            <para>ALPHA (&quot;a&quot; to &quot;z&quot; and &quot;A&quot; to
            &quot;Z&quot;) / DIGIT (0 to 9) / &quot;-&quot; / &quot;.&quot; /
            &quot;_&quot; / &quot;~&quot;</para>
            <para>To prevent characters from being encoded pass them to exclude. To
            force characters to be encoded pass them to include. The percent character
            is always encoded.</para>
            <para>Example:</para>
            <para>QByteArray text = &quot;{a fishy string?}&quot;;</para>
            <para>QByteArray ba = text.toPercentEncoding(&quot;{}&quot;,
            &quot;s&quot;);</para>
            <para>qDebug(ba.constData());</para>
            <para>// prints &quot;{a fi%73hy %73tring%3F}&quot;</para>
            <para>The hex encoding uses the numbers 0-9 and the uppercase letters
            A-F.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also fromPercentEncoding() and
            QUrl::toPercentEncoding().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.Int16,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.UInt16,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.Int32,System.Int32)">
            <summary>
            <para>Sets the byte array to the printed value of n in base base (10 by
            default) and returns a reference to the byte array. The base can be any
            value between 2 and 36. For bases other than 10, n is treated as an
            unsigned integer.</para>
            <para>Example:</para>
            <para>QByteArray ba;</para>
            <para>int n = 63;</para>
            <para>ba.setNum(n);           // ba == &quot;63&quot;</para>
            <para>ba.setNum(n, 16);       // ba == &quot;3f&quot;</para>
            <para>Note: The format of the number is not localized; the default C
            locale is used irrespective of the user's locale.</para>
            <para>See also number() and toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.Int64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.UInt64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.Single,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the byte array to the printed value of n, formatted in
            format f with precision prec, and returns a reference to the byte
            array.</para>
            <para>Note: The format of the number is not localized; the default C
            locale is used irrespective of the user's locale.</para>
            <para>See also toFloat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetNum(System.Double,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the byte array to the printed value of n, formatted in
            format f with precision prec, and returns a reference to the byte
            array.</para>
            <para>The format f can be any of the following:</para>
            <para></para>
            <para> FormatMeaning</para>
            <para>e	format as [-]9.9e[+|-]999</para>
            <para>E	format as [-]9.9E[+|-]999</para>
            <para>f	format as [-]9.9</para>
            <para>g	use e or f format, whichever is the most concise</para>
            <para>G	use E or f format, whichever is the most concise</para>
            <para></para>
            <para>With 'e', 'E', and 'f', prec is the number of digits after the
            decimal point. With 'g' and 'G', prec is the maximum number of significant
            digits (trailing zeroes are omitted).</para>
            <para>Note: The format of the number is not localized; the default C
            locale is used irrespective of the user's locale.</para>
            <para>See also toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.SetRawData(System.String,System.UInt32)">
            <summary>
            <para>Resets the QByteArray to use the first size bytes of the data
            array. The bytes are not copied. The QByteArray will contain the data
            pointer. The caller guarantees that data will not be deleted or modified as
            long as this QByteArray and any copies of it exist that have not been
            modified.</para>
            <para>This function can be used instead of fromRawData() to re-use
            existing QByteArray objects to save memory re-allocations.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also fromRawData(), data(), and constData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Begin">
            <summary>
            <para>Returns an STL-style iterator pointing to the first character in
            the byte-array.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.End">
            <summary>
            <para>Returns an STL-style iterator pointing to the imaginary character
            after the last character in the byte-array.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_back(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as append(ch).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_back(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as append(str).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_back(QtCore.QByteArray)">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to append(other).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_front(System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as prepend(ch).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_front(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as prepend(str).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Push_front(QtCore.QByteArray)">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to prepend(other).</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Count">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToShort">
            <summary>
            <para>Returns the byte array converted to a short using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToUShort">
            <summary>
            <para>Returns the byte array converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToInt">
            <summary>
            <para>Returns the byte array converted to an int using base base, which
            is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray str(&quot;FF&quot;);</para>
            <para>bool ok;</para>
            <para>int hex = str.toInt(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>int dec = str.toInt(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToUInt">
            <summary>
            <para>Returns the byte array converted to an unsigned int using base
            base, which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToLong">
            <summary>
            <para>Returns the byte array converted to a long int using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray str(&quot;FF&quot;);</para>
            <para>bool ok;</para>
            <para>long hex = str.toLong(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>long dec = str.toLong(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToULong">
            <summary>
            <para>Returns the byte array converted to an unsigned long int using
            base base, which is 10 by default and must be between 2 and 36, or
            0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToLongLong">
            <summary>
            <para>Returns the byte array converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToULongLong">
            <summary>
            <para>Returns the byte array converted to an unsigned long long using
            base base, which is 10 by default and must be between 2 and 36, or
            0.</para>
            <para>If base is 0, the base is determined automatically using the
            following rules: If the byte array begins with &quot;0x&quot;, it is
            assumed to be hexadecimal; if it begins with &quot;0&quot;, it is assumed
            to be octal; otherwise it is assumed to be decimal.</para>
            <para>Returns 0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToFloat">
            <summary>
            <para>Returns the byte array converted to a float value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.ToDouble">
            <summary>
            <para>Returns the byte array converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If ok is not 0: if a conversion error occurs, *ok is set to
            false; otherwise *ok is set to true.</para>
            <para>QByteArray string(&quot;1234.56&quot;);</para>
            <para>double a = string.toDouble();   // a == 1234.56</para>
            <para>Note: The conversion of the number is performed in the default C
            locale, irrespective of the user's locale.</para>
            <para>See also number().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Number(System.Int32,System.Int32)">
            <summary>
            <para>Returns a byte array containing the string equivalent of the
            number n to base base (10 by default). The base can be any value between 2
            and 36.</para>
            <para>Example:</para>
            <para>int n = 63;</para>
            <para>QByteArray::number(n);              // returns
            &quot;63&quot;</para>
            <para>QByteArray::number(n, 16);          // returns
            &quot;3f&quot;</para>
            <para>QByteArray::number(n, 16).toUpper();  // returns
            &quot;3F&quot;</para>
            <para>Note: The format of the number is not localized; the default C
            locale is used irrespective of the user's locale.</para>
            <para>See also setNum() and toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Number(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Number(System.Int64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Number(System.UInt64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Number(System.Double,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a byte array that contains the printed value of n,
            formatted in format f with precision prec.</para>
            <para>Argument n is formatted according to the f format specified,
            which is g by default, and can be any of the following:</para>
            <para></para>
            <para> FormatMeaning</para>
            <para>e	format as [-]9.9e[+|-]999</para>
            <para>E	format as [-]9.9E[+|-]999</para>
            <para>f	format as [-]9.9</para>
            <para>g	use e or f format, whichever is the most concise</para>
            <para>G	use E or f format, whichever is the most concise</para>
            <para></para>
            <para>With 'e', 'E', and 'f', prec is the number of digits after the
            decimal point. With 'g' and 'G', prec is the maximum number of significant
            digits (trailing zeroes are omitted).</para>
            <para>QByteArray ba = QByteArray::number(12.3456, 'E', 3);</para>
            <para>// ba == 1.235E+01</para>
            <para>Note: The format of the number is not localized; the default C
            locale is used irrespective of the user's locale.</para>
            <para>See also toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.FromRawData(System.String,System.Int32)">
            <summary>
            <para>Constructs a QByteArray that uses the first size bytes of the
            data array. The bytes are not copied. The QByteArray will contain the data
            pointer. The caller guarantees that data will not be deleted or modified as
            long as this QByteArray and any copies of it exist that have not been
            modified. In other words, because QByteArray is an implicitly shared class
            and the instance returned by this function contains the data pointer, the
            caller must not delete data or modify it directly as long as the returned
            QByteArray and any copies exist. However, QByteArray does not take
            ownership of data, so the QByteArray destructor will never delete the raw
            data, even when the last QByteArray referring to data is destroyed.</para>
            <para>A subsequent attempt to modify the contents of the returned
            QByteArray or any copy made from it will cause it to create a deep copy of
            the data array before doing the modification. This ensures that the raw
            data array itself will never be modified by QByteArray.</para>
            <para>Here is an example of how to read data using a QDataStream on raw
            data in memory without copying the raw data into a QByteArray:</para>
            <para> static const char mydata[] = {</para>
            <para>    0x00, 0x00, 0x03, 0x84, 0x78, 0x9c, 0x3b, 0x76,</para>
            <para>    0xec, 0x18, 0xc3, 0x31, 0x0a, 0xf1, 0xcc, 0x99,</para>
            <para>    ...</para>
            <para>    0x6d, 0x5b</para>
            <para>};</para>
            <para></para>
            <para>QByteArray data = QByteArray::fromRawData(mydata,
            sizeof(mydata));</para>
            <para>QDataStream in(&amp;data, QIODevice::ReadOnly);</para>
            <para>...</para>
            <para>Warning: A byte array created with fromRawData() is not
            null-terminated, unless the raw data contains a 0 character at position
            size. While that does not matter for QDataStream or functions like
            indexOf(), passing the byte array to a function accepting a const char *
            expected to be '\0'-terminated will fail.</para>
            <para>See also setRawData(), data(), and constData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.FromBase64(QtCore.QByteArray,QtCore.QByteArray.Base64Option)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a decoded copy of the Base64 array base64, using the
            alphabet defined by options. Input is not checked for validity; invalid
            characters in the input are skipped, enabling the decoding process to
            continue with subsequent characters.</para>
            <para>For example:</para>
            <para>QByteArray::fromBase64(&quot;PHA+SGVsbG8/PC9wPg==&quot;,
            QByteArray::Base64Encoding); // returns
            &quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;</para>
            <para>QByteArray::fromBase64(&quot;PHA-SGVsbG8_PC9wPg==&quot;,
            QByteArray::Base64UrlEncoding); // returns
            &quot;&lt;p&gt;Hello?&lt;/p&gt;&quot;</para>
            <para>The algorithm used to decode Base64-encoded data is defined in
            RFC 4648.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also toBase64().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.FromBase64(QtCore.QByteArray)">
            <summary>
            <para>Returns a decoded copy of the Base64 array base64. Input is not
            checked for validity; invalid characters in the input are skipped, enabling
            the decoding process to continue with subsequent characters.</para>
            <para>For example:</para>
            <para>QByteArray text =
            QByteArray::fromBase64(&quot;UXQgaXMgZ3JlYXQh&quot;);</para>
            <para>text.data();            // returns &quot;Qt is
            great!&quot;</para>
            <para>The algorithm used to decode Base64-encoded data is defined in
            RFC 4648.</para>
            <para>See also toBase64().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.FromHex(QtCore.QByteArray)">
            <summary>
            <para>Returns a decoded copy of the hex encoded array hexEncoded. Input
            is not checked for validity; invalid characters in the input are skipped,
            enabling the decoding process to continue with subsequent
            characters.</para>
            <para>For example:</para>
            <para>QByteArray text =
            QByteArray::fromHex(&quot;517420697320677265617421&quot;);</para>
            <para>text.data();            // returns &quot;Qt is
            great!&quot;</para>
            <para>See also toHex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.FromPercentEncoding(QtCore.QByteArray,System.Char)">
            <summary>
            <para>Returns a decoded copy of the URI/URL-style percent-encoded
            input. The percent parameter allows you to replace the '%' character for
            another (for instance, '_' or '=').</para>
            <para>For example:</para>
            <para>QByteArray text =
            QByteArray::fromPercentEncoding(&quot;Qt%20is%20great%33&quot;);</para>
            <para>text.data();            // returns &quot;Qt is
            great!&quot;</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also toPercentEncoding() and
            QUrl::fromPercentEncoding().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Equality(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is equal to byte array a2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Equality(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is equal to byte array a2; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Inequality(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is not equal to byte array a2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Inequality(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is not equal to byte array a2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThan(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is lexically less than byte array
            a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThan(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is lexically less than byte array a2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThanOrEqual(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is lexically less than or equal to
            byte array a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_LessThanOrEqual(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is lexically less than or equal to byte
            array a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThan(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is lexically greater than byte
            array a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThan(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is lexically greater than byte array
            a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThanOrEqual(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if byte array a1 is lexically greater than or equal
            to byte array a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_GreaterThanOrEqual(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if string a1 is lexically greater than or equal to
            byte array a2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Addition(QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>Returns a byte array that is the result of concatenating byte
            array a1 and byte array a2.</para>
            <para>See also QByteArray::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Addition(QtCore.QByteArray,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a byte array that is the result of concatenating byte
            array a1 and string a2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Addition(QtCore.QByteArray,System.Char)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a byte array that is the result of concatenating byte
            array a1 and character a2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Addition(System.String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a byte array that is the result of concatenating string
            a1 and byte array a2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.op_Addition(System.Char,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a byte array that is the result of concatenating
            character a1 and byte array a2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.QUncompress(System.Byte*,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Uncompresses the first nbytes of data and returns a new byte
            array with the uncompressed data.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrdup(System.String)">
            <summary>
            <para>Returns a duplicate string.</para>
            <para>Allocates space for a copy of src, copies it, and returns a
            pointer to the copy. If src is 0, it immediately returns 0.</para>
            <para>Ownership is passed to the caller, so the returned string must be
            deleted using delete[].</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrlen(System.String)">
            <summary>
            <para>A safe strlen() function.</para>
            <para>Returns the number of characters that precede the terminating
            '\0', or 0 if str is 0.</para>
            <para>See also qstrnlen().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrnlen(System.String,System.UInt32)">
            <summary>
            <para>A safe strnlen() function.</para>
            <para>Returns the number of characters that precede the terminating
            '\0', but at most maxlen. If str is 0, returns 0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also qstrlen().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrcpy(System.Char*,System.String)">
            <summary>
            <para>Copies all the characters up to and including the '\0' from src
            into dst and returns a pointer to dst. If src is 0, it immediately returns
            0.</para>
            <para>This function assumes that dst is large enough to hold the
            contents of src.</para>
            <para>See also qstrncpy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrncpy(System.Char*,System.String,System.UInt32)">
            <summary>
            <para>A safe strncpy() function.</para>
            <para>Copies at most len bytes from src (stopping at len or the
            terminating '\0' whichever comes first) into dst and returns a pointer to
            dst. Guarantees that dst is '\0'-terminated. If src or dst is 0, returns 0
            immediately.</para>
            <para>This function assumes that dst is at least len characters
            long.</para>
            <para>Note: When compiling with Visual C++ compiler version 14.00
            (Visual C++ 2005) or later, internally the function strncpy_s will be
            used.</para>
            <para>See also qstrcpy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrcmp(System.String,System.String)">
            <summary>
            <para>A safe strcmp() function.</para>
            <para>Compares str1 and str2. Returns a negative value if str1 is less
            than str2, 0 if str1 is equal to str2 or a positive value if str1 is
            greater than str2.</para>
            <para>Special case 1: Returns 0 if str1 and str2 are both 0.</para>
            <para>Special case 2: Returns an arbitrary non-zero value if str1 is 0
            or str2 is 0 (but not both).</para>
            <para>See also qstrncmp(), qstricmp(), qstrnicmp(), and 8-bit Character
            Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrncmp(System.String,System.String,System.UInt32)">
            <summary>
            <para>A safe strncmp() function.</para>
            <para>Compares at most len bytes of str1 and str2.</para>
            <para>Returns a negative value if str1 is less than str2, 0 if str1 is
            equal to str2 or a positive value if str1 is greater than str2.</para>
            <para>Special case 1: Returns 0 if str1 and str2 are both 0.</para>
            <para>Special case 2: Returns a random non-zero value if str1 is 0 or
            str2 is 0 (but not both).</para>
            <para>See also qstrcmp(), qstricmp(), qstrnicmp(), and 8-bit Character
            Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstricmp(System.String,System.String)">
            <summary>
            <para>A safe stricmp() function.</para>
            <para>Compares str1 and str2 ignoring the case of the characters. The
            encoding of the strings is assumed to be Latin-1.</para>
            <para>Returns a negative value if str1 is less than str2, 0 if str1 is
            equal to str2 or a positive value if str1 is greater than str2.</para>
            <para>Special case 1: Returns 0 if str1 and str2 are both 0.</para>
            <para>Special case 2: Returns a random non-zero value if str1 is 0 or
            str2 is 0 (but not both).</para>
            <para>See also qstrcmp(), qstrncmp(), qstrnicmp(), and 8-bit Character
            Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qstrnicmp(System.String,System.String,System.UInt32)">
            <summary>
            <para>A safe strnicmp() function.</para>
            <para>Compares at most len bytes of str1 and str2 ignoring the case of
            the characters. The encoding of the strings is assumed to be
            Latin-1.</para>
            <para>Returns a negative value if str1 is less than str2, 0 if str1 is
            equal to str2 or a positive value if str1 is greater than str2.</para>
            <para>Special case 1: Returns 0 if str1 and str2 are both 0.</para>
            <para>Special case 2: Returns a random non-zero value if str1 is 0 or
            str2 is 0 (but not both).</para>
            <para>See also qstrcmp(), qstrncmp(), qstricmp(), and 8-bit Character
            Comparisons.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.Qsnprintf(System.Char*,System.UInt32,System.String)">
            <summary>
            <para></para>
            <para>A portable snprintf() function, calls qvsnprintf.</para>
            <para>fmt is the printf() format string. The result is put into str,
            which is a buffer of at least n bytes.</para>
            <para>Warning: Call this function only when you know what you are doing
            since it shows different behavior on certain platforms. Use
            QString::asprintf() to format a string instead.</para>
            <para>See also qvsnprintf() and QString::asprintf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.QChecksum(System.String,System.UInt32)">
            <summary>
            <para>Returns the CRC-16 checksum of the first len bytes of
            data.</para>
            <para>The checksum is independent of the byte order
            (endianness).</para>
            <para>Note: This function is a 16-bit cache conserving (16 entry table)
            implementation of the CRC-16-CCITT algorithm.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.QCompress(System.Byte*,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compresses the first nbytes of data and returns the compressed
            data in a new byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.QCompress(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>Compresses the data byte array and returns the compressed data in
            a new byte array.</para>
            <para>The compressionLevel parameter specifies how much compression
            should be used. Valid values are between 0 and 9, with 9 corresponding to
            the greatest compression (i.e. smaller compressed data) at the cost of
            using a slower algorithm. Smaller values (8, 7, ..., 1) provide
            successively less compression at slightly faster speeds. The value 0
            corresponds to no compression at all. The default value is -1, which
            specifies zlib's default compression.</para>
            <para>See also qUncompress().</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArray.QUncompress(QtCore.QByteArray)">
            <summary>
            <para>Uncompresses the data byte array and returns a new byte array
            with the uncompressed data.</para>
            <para>Returns an empty QByteArray if the input data was corrupt.</para>
            <para>This function will uncompress data compressed with qCompress()
            from this and any earlier Qt version, back to Qt 3.1 when this feature was
            added.</para>
            <para>Note: If you want to use this function to uncompress external
            data that was compressed using zlib, you first need to prepend a four byte
            header to the byte array containing the data. The header must contain the
            expected length (in bytes) of the uncompressed data, expressed as an
            unsigned, big-endian, 32-bit integer.</para>
            <para>See also qCompress().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Item(System.Int32)">
            <summary>
            <para>Returns the byte at index position i as a modifiable
            reference.</para>
            <para>If an assignment is made beyond the end of the byte array, the
            array is extended with resize() before the assignment takes place.</para>
            <para>Example:</para>
            <para>QByteArray ba;</para>
            <para>for (int i = 0; i &lt; 10; ++i)</para>
            <para>    ba[i] = 'A' + i;</para>
            <para>// ba == &quot;ABCDEFGHIJ&quot;</para>
            <para>The return value is of type QByteRef, a helper class for
            QByteArray. When you get an object of type QByteRef, you can use it as if
            it were a char &amp;. If you assign to it, the assignment will apply to the
            character in the QByteArray from which you got the reference.</para>
            <para>See also at().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Item(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Size">
            <summary>
            <para>Returns the number of bytes in this byte array.</para>
            <para>The last byte in the byte array is at position size() - 1. In
            addition, QByteArray ensures that the byte at position size() is always
            '\0', so that you can use the return value of data() and constData() as
            arguments to functions that expect '\0'-terminated strings. If the
            QByteArray object was created from a raw data that didn't include the
            trailing null-termination character then QByteArray doesn't add it
            automaticall unless the deep copy is created.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Hello&quot;);</para>
            <para>int n = ba.size();          // n == 5</para>
            <para>ba.data()[0];               // returns 'H'</para>
            <para>ba.data()[4];               // returns 'o'</para>
            <para>ba.data()[5];               // returns '\0'</para>
            <para>See also isEmpty() and resize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.IsEmpty">
            <summary>
            <para>Returns true if the byte array has size 0; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>QByteArray().isEmpty();         // returns true</para>
            <para>QByteArray(&quot;&quot;).isEmpty();       // returns true</para>
            <para>QByteArray(&quot;abc&quot;).isEmpty();    // returns false</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Capacity">
            <summary>
            <para>Returns the maximum number of bytes that can be stored in the
            byte array without forcing a reallocation.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QByteArray's memory usage. In general, you will rarely ever need to
            call this function. If you want to know how many bytes are in the byte
            array, call size().</para>
            <para>See also reserve() and squeeze().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Data">
            <summary>
            <para>Returns a pointer to the data stored in the byte array. The
            pointer can be used to access and modify the bytes that compose the array.
            The data is '\0'-terminated, i.e. the number of bytes in the returned
            character string is size() + 1 for the '\0' terminator.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;Hello world&quot;);</para>
            <para>char *data = ba.data();</para>
            <para>while (*data) {</para>
            <para>    cout &lt;&lt; &quot;[&quot; &lt;&lt; *data &lt;&lt;
            &quot;]&quot; &lt;&lt; endl;</para>
            <para>    ++data;</para>
            <para>}</para>
            <para>The pointer remains valid as long as the byte array isn't
            reallocated or destroyed. For read-only access, constData() is faster
            because it never causes a deep copy to occur.</para>
            <para>This function is mostly useful to pass a byte array to a function
            that accepts a const char *.</para>
            <para>The following example makes a copy of the char* returned by
            data(), but it will corrupt the heap and cause a crash because it does not
            allocate a byte for the '\0' at the end:</para>
            <para>QString tmp = &quot;test&quot;;</para>
            <para>QByteArray text = tmp.toLocal8Bit();</para>
            <para>char *data = new char[text.size()];</para>
            <para>strcpy(data, text.data());</para>
            <para>delete [] data;</para>
            <para>This one allocates the correct amount of space:</para>
            <para>QString tmp = &quot;test&quot;;</para>
            <para>QByteArray text = tmp.toLocal8Bit();</para>
            <para>char *data = new char[text.size() + 1];</para>
            <para>strcpy(data, text.data());</para>
            <para>delete [] data;</para>
            <para>Note: A QByteArray can store any byte values including '\0's, but
            most functions that take char * arguments assume that the data ends at the
            first '\0' they encounter.</para>
            <para>See also constData() and operator[]().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.ConstData">
            <summary>
            <para>Returns a pointer to the data stored in the byte array. The
            pointer can be used to access the bytes that compose the array. The data is
            '\0'-terminated unless the QByteArray object was created from raw data. The
            pointer remains valid as long as the byte array isn't reallocated or
            destroyed.</para>
            <para>This function is mostly useful to pass a byte array to a function
            that accepts a const char *.</para>
            <para>Note: A QByteArray can store any byte values including '\0's, but
            most functions that take char * arguments assume that the data ends at the
            first '\0' they encounter.</para>
            <para>See also data(), operator[](), and fromRawData().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Trimmed">
            <summary>
            <para>Returns a byte array that has whitespace removed from the start
            and the end.</para>
            <para>Whitespace means any character for which the standard C++
            isspace() function returns true in the C locale. This includes the ASCII
            characters '\t', '\n', '\v', '\f', '\r', and ' '.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;  lots\t of\nwhitespace\r\n &quot;);</para>
            <para>ba = ba.trimmed();</para>
            <para>// ba == &quot;lots\t of\nwhitespace&quot;;</para>
            <para>Unlike simplified(), trimmed() leaves internal whitespace
            alone.</para>
            <para>See also simplified().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Simplified">
            <summary>
            <para>Returns a byte array that has whitespace removed from the start
            and the end, and which has each sequence of internal whitespace replaced
            with a single space.</para>
            <para>Whitespace means any character for which the standard C++
            isspace() function returns true in the C locale. This includes the ASCII
            isspace() function returns true in the C locale. This includes the ASCII
            characters '\t', '\n', '\v', '\f', '\r', and ' '.</para>
            <para>Example:</para>
            <para>QByteArray ba(&quot;  lots\t of\nwhitespace\r\n &quot;);</para>
            <para>ba = ba.simplified();</para>
            <para>// ba == &quot;lots of whitespace&quot;;</para>
            <para>See also trimmed().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Cbegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first
            character in the byte-array.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also begin() and cend().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.ConstBegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first
            character in the byte-array.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Cend">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary
            character after the last character in the list.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also cbegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.ConstEnd">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary
            character after the last character in the list.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.Length">
            <summary>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArray.IsNull">
            <summary>
            <para>Returns true if this byte array is null; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>QByteArray().isNull();          // returns true</para>
            <para>QByteArray(&quot;&quot;).isNull();        // returns false</para>
            <para>QByteArray(&quot;abc&quot;).isNull();     // returns false</para>
            <para>Qt makes a distinction between null byte arrays and empty byte
            arrays for historical reasons. For most applications, what matters is
            whether or not a byte array contains any data, and this can be determined
            using isEmpty().</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="T:QtCore.QByteArray.Base64Option">
            <summary>
            <para>This enum contains the options available for encoding and
            decoding Base64. Base64 is defined by RFC 4648, with the following
            options:</para>
            <para>QByteArray::fromBase64() ignores the KeepTrailingEquals and
            OmitTrailingEquals options and will not flag errors in case they are
            missing or if there are too many of them.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>The Base64Options type is a typedef for
            QFlags&lt;Base64Option&gt;. It stores an OR combination of Base64Option
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QByteArray.Base64Option.Base64Encoding">
            <summary>(default) The regular Base64 alphabet, called simply "base64"</summary>
        </member>
        <member name="F:QtCore.QByteArray.Base64Option.Base64UrlEncoding">
            <summary>An alternate alphabet, called "base64url", which replaces two characters in the alphabet to be more friendly to URLs.</summary>
        </member>
        <member name="F:QtCore.QByteArray.Base64Option.KeepTrailingEquals">
            <summary>(default) Keeps the trailing padding equal signs at the end of the encoded data, so the data is always a size multiple of four.</summary>
        </member>
        <member name="F:QtCore.QByteArray.Base64Option.OmitTrailingEquals">
            <summary>Omits adding the padding equal signs at the end of the encoded data.</summary>
        </member>
        <member name="T:QtCore.QLatin1String">
            <summary>
            <para>The QLatin1String class provides a thin wrapper around an
            US-ASCII/Latin-1 encoded string literal.</para>
            </summary>
            <remarks>
            <para>Many of QString's member functions are overloaded to accept const
            char * instead of QString. This includes the copy constructor, the
            assignment operator, the comparison operators, and various other functions
            such as insert(), replace(), and indexOf(). These functions are usually
            optimized to avoid constructing a QString object for the const char * data.
            For example, assuming str is a QString,</para>
            <para>if (str == &quot;auto&quot; || str == &quot;extern&quot;</para>
            <para>        || str == &quot;static&quot; || str ==
            &quot;register&quot;) {</para>
            <para>    ...</para>
            <para>}</para>
            <para>is much faster than</para>
            <para>if (str == QString(&quot;auto&quot;) || str ==
            QString(&quot;extern&quot;)</para>
            <para>        || str == QString(&quot;static&quot;) || str ==
            QString(&quot;register&quot;)) {</para>
            <para>    ...</para>
            <para>}</para>
            <para>because it doesn't construct four temporary QString objects and
            make a deep copy of the character data.</para>
            <para>Applications that define QT_NO_CAST_FROM_ASCII (as explained in
            the QString documentation) don't have access to QString's const char * API.
            To provide an efficient way of specifying constant Latin-1 strings, Qt
            provides the QLatin1String, which is just a very thin wrapper around a
            const char *. Using QLatin1String, the example code above becomes</para>
            <para>if (str == QLatin1String(&quot;auto&quot;)</para>
            <para>        || str == QLatin1String(&quot;extern&quot;)</para>
            <para>        || str == QLatin1String(&quot;static&quot;)</para>
            <para>        || str == QLatin1String(&quot;register&quot;) {</para>
            <para>    ...</para>
            <para>}</para>
            <para>This is a bit longer to type, but it provides exactly the same
            benefits as the first version of the code, and is faster than converting
            the Latin-1 strings using QString::fromLatin1().</para>
            <para>Thanks to the QString(QLatin1String) constructor, QLatin1String
            can be used everywhere a QString is expected. For example:</para>
            <para>QLabel *label = new QLabel(QLatin1String(&quot;MOD&quot;),
            this);</para>
            <para></para>
            <para>See also QString, QLatin1Char, and QStringLiteral.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLatin1String.#ctor(System.String)">
            <summary>
            <para>Constructs a QLatin1String object that stores str. Note that if
            str is 0, an empty string is created; this case is handled by
            QString.</para>
            <para>The string data is not copied. The caller must be able to
            guarantee that str will not be deleted or modified as long as the
            QLatin1String object exists.</para>
            <para>See also latin1().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.#ctor(System.String,System.Int32)">
            <summary>
            <para>Constructs a QLatin1String object that stores str with size. Note
            that if str is 0, an empty string is created; this case is handled by
            QString.</para>
            <para>The string data is not copied. The caller must be able to
            guarantee that str will not be deleted or modified as long as the
            QLatin1String object exists.</para>
            <para>See also latin1().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a QLatin1String object that stores str.</para>
            <para>The string data is not copied. The caller must be able to
            guarantee that str will not be deleted or modified as long as the
            QLatin1String object exists.</para>
            <para>See also latin1().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Equality(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is equal to string other; otherwise
            returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings with
            QString::localeAwareCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Inequality(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is not equal to string other;
            otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings with
            QString::localeAwareCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThan(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is lexically greater than string
            other; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings with
            QString::localeAwareCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThan(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is lexically less than the other
            string; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings using the
            QString::localeAwareCompare() function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThanOrEqual(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is lexically greater than or equal to
            string other; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings with
            QString::localeAwareCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThanOrEqual(QtCore.QLatin1String,System.String)">
            <summary>
            <para>Returns true if this string is lexically less than or equal to
            string other; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings with
            QString::localeAwareCompare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Equality(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The other byte array is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Inequality(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator!=().</para>
            <para>The other byte array is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThan(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The other const char pointer is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThan(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The other const char pointer is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThanOrEqual(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The other array is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThanOrEqual(QtCore.QLatin1String,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The other array is converted to a QString using the
            QString::fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Equality(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically equal to string s2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Inequality(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically unequal to string s2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThan(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically smaller than string s2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_LessThanOrEqual(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically smaller than or equal to
            string s2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThan(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically greater than string s2;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_GreaterThanOrEqual(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if string s1 is lexically greater than or equal to
            string s2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLatin1String.op_Equality(QtCore.QLatin1String,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string s1 is lexically equal to string reference
            s2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLatin1String.Latin1">
            <summary>
            <para>Returns the Latin-1 string stored in this object.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLatin1String.Size">
            <summary>
            <para>Returns the size of the Latin-1 string stored in this
            object.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLatin1String.Data">
            <summary>
            <para>Returns the Latin-1 string stored in this object.</para>
            </summary>
        </member>
        <member name="T:QtCore.QString">
            <summary>
            <para>The QString class provides a Unicode character string.</para>
            </summary>
            <remarks>
            <para>QString stores a string of 16-bit QChars, where each QChar
            corresponds one Unicode 4.0 character. (Unicode characters with code values
            above 65535 are stored using surrogate pairs, i.e., two consecutive
            QChars.)</para>
            <para>Unicode is an international standard that supports most of the
            writing systems in use today. It is a superset of US-ASCII (ANSI X3.4-1986)
            and Latin-1 (ISO 8859-1), and all the US-ASCII/Latin-1 characters are
            available at the same code positions.</para>
            <para>Behind the scenes, QString uses implicit sharing (copy-on-write)
            to reduce memory usage and to avoid the needless copying of data. This also
            helps reduce the inherent overhead of storing 16-bit characters instead of
            8-bit characters.</para>
            <para>In addition to QString, Qt also provides the QByteArray class to
            store raw bytes and traditional 8-bit '\0'-terminated strings. For most
            purposes, QString is the class you want to use. It is used throughout the
            Qt API, and the Unicode support ensures that your applications will be easy
            to translate if you want to expand your application's market at some point.
            The two main cases where QByteArray is appropriate are when you need to
            store raw binary data, and when memory conservation is critical (like in
            embedded systems).</para>
            <para></para>
            <para>Initializing a String</para>
            <para>One way to initialize a QString is simply to pass a const char *
            to its constructor. For example, the following code creates a QString of
            size 5 containing the data &quot;Hello&quot;:</para>
            <para>QString str = &quot;Hello&quot;;</para>
            <para>QString converts the const char * data into Unicode using the
            fromUtf8() function.</para>
            <para>In all of the QString functions that take const char *
            parameters, the const char * is interpreted as a classic C-style
            '\0'-terminated string encoded in UTF-8. It is legal for the const char *
            parameter to be 0.</para>
            <para>You can also provide string data as an array of QChars:</para>
            <para>static const QChar data[4] = { 0x0055, 0x006e, 0x10e3, 0x03a3
            };</para>
            <para>QString str(data, 4);</para>
            <para>QString makes a deep copy of the QChar data, so you can modify it
            later without experiencing side effects. (If for performance reasons you
            don't want to take a deep copy of the character data, use
            QString::fromRawData() instead.)</para>
            <para>Another approach is to set the size of the string using resize()
            and to initialize the data character per character. QString uses 0-based
            indexes, just like C++ arrays. To access the character at a particular
            index position, you can use operator[](). On non-const strings,
            operator[]() returns a reference to a character that can be used on the
            left side of an assignment. For example:</para>
            <para>QString str;</para>
            <para>str.resize(4);</para>
            <para></para>
            <para>str[0] = QChar('U');</para>
            <para>str[1] = QChar('n');</para>
            <para>str[2] = QChar(0x10e3);</para>
            <para>str[3] = QChar(0x03a3);</para>
            <para>For read-only access, an alternative syntax is to use the at()
            function:</para>
            <para>QString str;</para>
            <para></para>
            <para>for (int i = 0; i &lt; str.size(); ++i) {</para>
            <para>    if (str.at(i) &gt;= QChar('a') &amp;&amp; str.at(i) &lt;=
            QChar('f'))</para>
            <para>        qDebug() &lt;&lt; &quot;Found character in range
            [a-f]&quot;;</para>
            <para>}</para>
            <para>The at() function can be faster than operator[](), because it
            never causes a deep copy to occur. Alternatively, use the left(), right(),
            or mid() functions to extract several characters at a time.</para>
            <para>A QString can embed '\0' characters (QChar::Null). The size()
            function always returns the size of the whole string, including embedded
            '\0' characters.</para>
            <para>After a call to the resize() function, newly allocated characters
            have undefined values. To set all the characters in the string to a
            particular value, use the fill() function.</para>
            <para>QString provides dozens of overloads designed to simplify string
            usage. For example, if you want to compare a QString with a string literal,
            you can write code like this and it will work as expected:</para>
            <para>QString str;</para>
            <para></para>
            <para>if (str == &quot;auto&quot; || str == &quot;extern&quot;</para>
            <para>        || str == &quot;static&quot; || str ==
            &quot;register&quot;) {</para>
            <para>    // ...</para>
            <para>}</para>
            <para>You can also pass string literals to functions that take QStrings
            as arguments, invoking the QString(const char *) constructor. Similarly,
            you can pass a QString to a function that takes a const char * argument
            using the qPrintable() macro which returns the given QString as a const
            char *. This is equivalent to calling
            &lt;QString&gt;.toLocal8Bit().constData().</para>
            <para></para>
            <para>Manipulating String Data</para>
            <para>QString provides the following basic functions for modifying the
            character data: append(), prepend(), insert(), replace(), and remove(). For
            example:</para>
            <para>QString str = &quot;and&quot;;</para>
            <para>str.prepend(&quot;rock &quot;);     // str == &quot;rock
            and&quot;</para>
            <para>str.append(&quot; roll&quot;);        // str == &quot;rock and
            roll&quot;</para>
            <para>str.replace(5, 3, &quot;&amp;&quot;);   // str == &quot;rock
            &amp; roll&quot;</para>
            <para>If you are building a QString gradually and know in advance
            approximately how many characters the QString will contain, you can call
            reserve(), asking QString to preallocate a certain amount of memory. You
            can also call capacity() to find out how much memory QString actually
            allocated.</para>
            <para>The replace() and remove() functions' first two arguments are the
            position from which to start erasing and the number of characters that
            should be erased. If you want to replace all occurrences of a particular
            substring with another, use one of the two-parameter replace()
            overloads.</para>
            <para>A frequent requirement is to remove whitespace characters from a
            string ('\n', '\t', ' ', etc.). If you want to remove whitespace from both
            ends of a QString, use the trimmed() function. If you want to remove
            whitespace from both ends and replace multiple consecutive whitespaces with
            a single space character within the string, use simplified().</para>
            <para>If you want to find all occurrences of a particular character or
            substring in a QString, use the indexOf() or lastIndexOf() functions. The
            former searches forward starting from a given index position, the latter
            searches backward. Both return the index position of the character or
            substring if they find it; otherwise, they return -1. For example, here's a
            typical loop that finds all occurrences of a particular substring:</para>
            <para>QString str = &quot;We must be &lt;b&gt;bold&lt;/b&gt;, very
            &lt;b&gt;bold&lt;/b&gt;&quot;;</para>
            <para>int j = 0;</para>
            <para></para>
            <para>while ((j = str.indexOf(&quot;&lt;b&gt;&quot;, j)) != -1)
            {</para>
            <para>    qDebug() &lt;&lt; &quot;Found &lt;b&gt; tag at index
            position&quot; &lt;&lt; j;</para>
            <para>    ++j;</para>
            <para>}</para>
            <para>QString provides many functions for converting numbers into
            strings and strings into numbers. See the arg() functions, the setNum()
            functions, the number() static functions, and the toInt(), toDouble(), and
            similar functions.</para>
            <para>To get an upper- or lowercase version of a string use toUpper()
            or toLower().</para>
            <para>Lists of strings are handled by the QStringList class. You can
            split a string into a list of strings using the split() function, and join
            a list of strings into a single string with an optional separator using
            QStringList::join(). You can obtain a list of strings from a string list
            that contain a particular substring or that match a particular QRegExp
            using the QStringList::filter() function.</para>
            <para></para>
            <para>Querying String Data</para>
            <para>If you want to see if a QString starts or ends with a particular
            substring use startsWith() or endsWith(). If you simply want to check
            whether a QString contains a particular character or substring, use the
            contains() function. If you want to find out how many times a particular
            character or substring occurs in the string, use count().</para>
            <para>QStrings can be compared using overloaded operators such as
            operator&lt;(), operator&lt;=(), operator==(), operator&gt;=(), and so on.
            Note that the comparison is based exclusively on the numeric Unicode values
            of the characters. It is very fast, but is not what a human would expect;
            the QString::localeAwareCompare() function is a better choice for sorting
            user-interface strings.</para>
            <para>To obtain a pointer to the actual character data, call data() or
            constData(). These functions return a pointer to the beginning of the QChar
            data. The pointer is guaranteed to remain valid until a non-const function
            is called on the QString.</para>
            <para></para>
            <para>Converting Between 8-Bit Strings and Unicode Strings</para>
            <para>QString provides the following three functions that return a
            const char * version of the string as QByteArray: toUtf8(), toLatin1(), and
            toLocal8Bit().</para>
            <para></para>
            <para>toLatin1() returns a Latin-1 (ISO 8859-1) encoded 8-bit
            string.</para>
            <para>toUtf8() returns a UTF-8 encoded 8-bit string. UTF-8 is a
            superset of US-ASCII (ANSI X3.4-1986) that supports the entire Unicode
            character set through multibyte sequences.</para>
            <para>toLocal8Bit() returns an 8-bit string using the system's local
            encoding.</para>
            <para></para>
            <para>To convert from one of these encodings, QString provides
            fromLatin1(), fromUtf8(), and fromLocal8Bit(). Other encodings are
            supported through the QTextCodec class.</para>
            <para>As mentioned above, QString provides a lot of functions and
            operators that make it easy to interoperate with const char * strings. But
            this functionality is a double-edged sword: It makes QString more
            convenient to use if all strings are US-ASCII or Latin-1, but there is
            always the risk that an implicit conversion from or to const char * is done
            using the wrong 8-bit encoding. To minimize these risks, you can turn off
            these implicit conversions by defining the following two preprocessor
            symbols:</para>
            <para></para>
            <para>QT_NO_CAST_FROM_ASCII disables automatic conversions from C
            string literals and pointers to Unicode.</para>
            <para>QT_RESTRICTED_CAST_FROM_ASCII allows automatic conversions from C
            characters and character arrays, but disables automatic conversions from
            character pointers to Unicode.</para>
            <para>QT_NO_CAST_TO_ASCII disables automatic conversion from QString to
            C strings.</para>
            <para></para>
            <para>One way to define these preprocessor symbols globally for your
            application is to add the following entry to your qmake project
            file:</para>
            <para>DEFINES += QT_NO_CAST_FROM_ASCII \</para>
            <para>           QT_NO_CAST_TO_ASCII</para>
            <para>You then need to explicitly call fromUtf8(), fromLatin1(), or
            fromLocal8Bit() to construct a QString from an 8-bit string, or use the
            lightweight QLatin1String class, for example:</para>
            <para>QString url =
            QLatin1String(&quot;http://www.unicode.org/&quot;);</para>
            <para>Similarly, you must call toLatin1(), toUtf8(), or toLocal8Bit()
            explicitly to convert the QString to an 8-bit string. (Other encodings are
            supported through the QTextCodec class.)</para>
            <para></para>
            <para> Note for C Programmers</para>
            <para>Due to C++'s type system and the fact that QString is implicitly
            shared, QStrings may be treated like ints or other basic types. For
            example:QString Widget::boolToString(bool b)</para>
            <para>{</para>
            <para>    QString result;</para>
            <para>    if (b)</para>
            <para>        result = &quot;True&quot;;</para>
            <para>    else</para>
            <para>        result = &quot;False&quot;;</para>
            <para>    return result;</para>
            <para>}</para>
            <para>The result variable, is a normal variable allocated on the stack.
            When return is called, and because we're returning by value, the copy
            constructor is called and a copy of the string is returned. No actual
            copying takes place thanks to the implicit sharing.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Distinction Between Null and Empty Strings</para>
            <para>For historical reasons, QString distinguishes between a null
            string and an empty string. A null string is a string that is initialized
            using QString's default constructor or by passing (const char *)0 to the
            constructor. An empty string is any string with size 0. A null string is
            always empty, but an empty string isn't necessarily null:</para>
            <para>QString().isNull();               // returns true</para>
            <para>QString().isEmpty();              // returns true</para>
            <para></para>
            <para>QString(&quot;&quot;).isNull();             // returns
            false</para>
            <para>QString(&quot;&quot;).isEmpty();            // returns
            true</para>
            <para></para>
            <para>QString(&quot;abc&quot;).isNull();          // returns
            false</para>
            <para>QString(&quot;abc&quot;).isEmpty();         // returns
            false</para>
            <para>All functions except isNull() treat null strings the same as
            empty strings. For example, toUtf8().constData() returns a pointer to a
            '\0' character for a null string (not a null pointer), and QString()
            compares equal to QString(&quot;&quot;). We recommend that you always use
            the isEmpty() function and avoid isNull().</para>
            <para></para>
            <para>Argument Formats</para>
            <para>In member functions where an argument format can be specified
            (e.g., arg(), number()), the argument format can be one of the
            following:</para>
            <para></para>
            <para> FormatMeaning</para>
            <para>e	format as [-]9.9e[+|-]999</para>
            <para>E	format as [-]9.9E[+|-]999</para>
            <para>f	format as [-]9.9</para>
            <para>g	use e or f format, whichever is the most concise</para>
            <para>G	use E or f format, whichever is the most concise</para>
            <para></para>
            <para>A precision is also specified with the argument format. For the
            'e', 'E', and 'f' formats, the precision represents the number of digits
            after the decimal point. For the 'g' and 'G' formats, the precision
            represents the maximum number of significant digits (trailing zeroes are
            omitted).</para>
            <para></para>
            <para>More Efficient String Construction</para>
            <para>Many strings are known at compile time. But the trivial
            constructor QString(&quot;Hello&quot;), will copy the contents of the
            string, treating the contents as Latin-1. To avoid this one can use the
            QStringLiteral macro to directly create the required data at compile time.
            Constructing a QString out of the literal does then not cause any overhead
            at runtime.</para>
            <para>A slightly less efficient way is to use QLatin1String. This class
            wraps a C string literal, precalculates it length at compile time and can
            then be used for faster comparison with QStrings and conversion to QStrings
            than a regular C string literal.</para>
            <para>Using the QString '+' operator, it is easy to construct a complex
            string from multiple substrings. You will often write code like
            this:</para>
            <para>    QString foo;</para>
            <para>    QString type = &quot;long&quot;;</para>
            <para></para>
            <para>    foo-&gt;setText(QLatin1String(&quot;vector&lt;&quot;) + type
            + QLatin1String(&quot;&gt;::iterator&quot;));</para>
            <para></para>
            <para>    if (foo.startsWith(&quot;(&quot; + type + &quot;)
            0x&quot;))</para>
            <para>        ...</para>
            <para>There is nothing wrong with either of these string constructions,
            but there are a few hidden inefficiencies. Beginning with Qt 4.6, you can
            eliminate them.</para>
            <para>First, multiple uses of the '+' operator usually means multiple
            memory allocations. When concatenating n substrings, where n &gt; 2, there
            can be as many as n - 1 calls to the memory allocator.</para>
            <para>In 4.6, an internal template class QStringBuilder has been added
            along with a few helper functions. This class is marked internal and does
            not appear in the documentation, because you aren't meant to instantiate it
            in your code. Its use will be automatic, as described below. The class is
            found in src/corelib/tools/qstringbuilder.cpp if you want to have a look at
            it.</para>
            <para>QStringBuilder uses expression templates and reimplements the '%'
            operator so that when you use '%' for string concatenation instead of '+',
            multiple substring concatenations will be postponed until the final result
            is about to be assigned to a QString. At this point, the amount of memory
            required for the final result is known. The memory allocator is then called
            once to get the required space, and the substrings are copied into it one
            by one.</para>
            <para>Additional efficiency is gained by inlining and reduced reference
            counting (the QString created from a QStringBuilder typically has a ref
            count of 1, whereas QString::append() needs an extra test).</para>
            <para>There are three ways you can access this improved method of
            string construction. The straightforward way is to include QStringBuilder
            wherever you want to use it, and use the '%' operator instead of '+' when
            concatenating strings:</para>
            <para>    #include &lt;QStringBuilder&gt;</para>
            <para></para>
            <para>    QString hello(&quot;hello&quot;);</para>
            <para>    QStringRef el(&amp;hello, 2, 3);</para>
            <para>    QLatin1String world(&quot;world&quot;);</para>
            <para>    QString message =  hello % el % world % QChar('!');</para>
            <para>A more global approach which is the most convenient but not
            entirely source compatible, is to this define in your .pro file:</para>
            <para>    DEFINES *= QT_USE_QSTRINGBUILDER</para>
            <para>and the '+' will automatically be performed as the QStringBuilder
            '%' everywhere.</para>
            <para></para>
            <para>See also fromRawData(), QChar, QLatin1String, QByteArray, and
            QStringRef.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QString.#ctor">
            <summary>
            <para>Constructs a null string. Null strings are also empty.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(QtCore.QChar,System.Int32)">
            <summary>
            <para>Constructs a string initialized with the first size characters of
            the QChar array unicode.</para>
            <para>If unicode is 0, a null string is constructed.</para>
            <para>If size is negative, unicode is assumed to point to a
            nul-terminated array and its length is determined dynamically. The
            terminating nul-character is not considered part of the string.</para>
            <para>QString makes a deep copy of the string data. The unicode data is
            copied as is and the Byte Order Mark is preserved if present.</para>
            <para>See also fromRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(QtCore.QChar)">
            <summary>
            <para>Constructs a string of size 1 containing the character ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(System.Int32,QtCore.QChar)">
            <summary>
            <para>Constructs a string of the given size with every character set to
            ch.</para>
            <para>See also fill().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(QtCore.QLatin1String)">
            <summary>
            <para>Constructs a copy of the Latin-1 string str.</para>
            <para>See also fromLatin1().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(QtCore.QString)">
            <summary>
            <para>Constructs a copy of other.</para>
            <para>This operation takes constant time, because QString is implicitly
            shared. This makes returning a QString from a function very fast. If a
            shared instance is modified, it will be copied (copy-on-write), and that
            takes linear time.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a string initialized with the byte array ba. The given
            byte array is converted to Unicode using fromUtf8(). Stops copying at the
            first 0 character, otherwise copies the entire byte array.</para>
            <para>You can disable this constructor by defining
            QT_NO_CAST_FROM_ASCII when you compile your applications. This can be
            useful if you want to ensure that all user-visible strings go through
            QObject::tr(), for example.</para>
            <para>See also fromLatin1(), fromLocal8Bit(), and fromUtf8().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Swap(QtCore.QString)">
            <summary>
            <para>Swaps string other with this string. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count">
            <summary>
            <para>This function overloads count().</para>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Resize(System.Int32)">
            <summary>
            <para>Sets the size of the string to size characters.</para>
            <para>If size is greater than the current size, the string is extended
            to make it size characters long with the extra characters added to the end.
            The new characters are uninitialized.</para>
            <para>If size is less than the current size, characters are removed
            from the end.</para>
            <para>Example:</para>
            <para>QString s = &quot;Hello world&quot;;</para>
            <para>s.resize(5);</para>
            <para>// s == &quot;Hello&quot;</para>
            <para></para>
            <para>s.resize(8);</para>
            <para>// s == &quot;Hello???&quot; (where ? stands for any
            character)</para>
            <para>If you want to append a certain number of identical characters to
            the string, use operator+=() as follows rather than resize():</para>
            <para>QString t = &quot;Hello&quot;;</para>
            <para>t += QString(10, 'X');</para>
            <para>// t == &quot;HelloXXXXXXXXXX&quot;</para>
            <para>If you want to expand the string so that it reaches a certain
            width and fill the new positions with a particular character, use the
            leftJustified() function:</para>
            <para>If size is negative, it is equivalent to passing zero.</para>
            <para>QString r = &quot;Hello&quot;;</para>
            <para>r = r.leftJustified(10, ' ');</para>
            <para>// r == &quot;Hello     &quot;</para>
            <para>See also truncate() and reserve().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Fill(QtCore.QChar,System.Int32)">
            <summary>
            <para>Sets every character in the string to character ch. If size is
            different from -1 (default), the string is resized to size
            beforehand.</para>
            <para>Example:</para>
            <para>QString str = &quot;Berlin&quot;;</para>
            <para>str.fill('z');</para>
            <para>// str == &quot;zzzzzz&quot;</para>
            <para></para>
            <para>str.fill('A', 2);</para>
            <para>// str == &quot;AA&quot;</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Truncate(System.Int32)">
            <summary>
            <para>Truncates the string at the given position index.</para>
            <para>If the specified position index is beyond the end of the string,
            nothing happens.</para>
            <para>Example:</para>
            <para>QString str = &quot;Vladivostok&quot;;</para>
            <para>str.truncate(4);</para>
            <para>// str == &quot;Vlad&quot;</para>
            <para>If position is negative, it is equivalent to passing zero.</para>
            <para>See also chop(), resize(), and left().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Chop(System.Int32)">
            <summary>
            <para>Removes n characters from the end of the string.</para>
            <para>If n is greater than size(), the result is an empty
            string.</para>
            <para>Example:</para>
            <para>QString str(&quot;LOGOUT\r\n&quot;);</para>
            <para>str.chop(2);</para>
            <para>// str == &quot;LOGOUT&quot;</para>
            <para>If you want to remove characters from the beginning of the
            string, use remove() instead.</para>
            <para>See also truncate(), resize(), and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Reserve(System.Int32)">
            <summary>
            <para>Attempts to allocate memory for at least size characters. If you
            know in advance how large the string will be, you can call this function,
            and if you resize the string often you are likely to get better
            performance. If size is an underestimate, the worst that will happen is
            that the QString will be a bit slower.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QString's memory usage. In general, you will rarely ever need to
            call this function. If you want to change the size of the string, call
            resize().</para>
            <para>This function is useful for code that needs to build up a long
            string and wants to avoid repeated reallocation. In this example, we want
            to add to the string until some condition is true, and we're fairly sure
            that size is large enough to make a call to reserve() worthwhile:</para>
            <para>QString result;</para>
            <para>int maxSize;</para>
            <para>bool condition;</para>
            <para>QChar nextChar;</para>
            <para></para>
            <para>result.reserve(maxSize);</para>
            <para></para>
            <para>while (condition)</para>
            <para>    result.append(nextChar);</para>
            <para></para>
            <para>result.squeeze();</para>
            <para>See also squeeze() and capacity().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Squeeze">
            <summary>
            <para>Releases any memory not required to store the character
            data.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QString's memory usage. In general, you will rarely ever need to
            call this function.</para>
            <para>See also reserve() and capacity().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Clear">
            <summary>
            <para>Clears the contents of the string and makes it null.</para>
            <para>See also resize() and isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.At(System.Int32)">
            <summary>
            <para>Returns the character at the given index position in the
            string.</para>
            <para>The position must be a valid index position in the string (i.e.,
            0 &lt;= position &lt; size()).</para>
            <para>See also operator[]().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int64,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt64,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int32,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The a argument is expressed in the given base, which is 10 by
            default and must be between 2 and 36.</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale. The default locale is determined from the system's locale
            settings at application startup. It can be changed using
            QLocale::setDefault(). The 'L' flag is ignored if base is not 10.</para>
            <para>QString str;</para>
            <para>str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)</para>
            <para>        .arg(63, 0, 16);</para>
            <para>// str == &quot;Decimal 63 is 3f in hexadecimal&quot;</para>
            <para></para>
            <para>QLocale::setDefault(QLocale(QLocale::English,
            QLocale::UnitedStates));</para>
            <para>str = QString(&quot;%1 %L2 %L3&quot;)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345, 0, 16);</para>
            <para>// str == &quot;12345 12,345 3039&quot;</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt32,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a to a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg1(System.Int32,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The a argument is expressed in base base, which is 10 by default
            and must be between 2 and 36. For bases other than 10, a is treated as an
            unsigned integer.</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale, set by QLocale::setDefault(). If no default locale was
            specified, the &quot;C&quot; locale is used. The 'L' flag is ignored if
            base is not 10.</para>
            <para>QString str;</para>
            <para>str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)</para>
            <para>        .arg(63, 0, 16);</para>
            <para>// str == &quot;Decimal 63 is 3f in hexadecimal&quot;</para>
            <para></para>
            <para>QLocale::setDefault(QLocale(QLocale::English,
            QLocale::UnitedStates));</para>
            <para>str = QString(&quot;%1 %L2 %L3&quot;)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345, 0, 16);</para>
            <para>// str == &quot;12345 12,345 3039&quot;</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg1(System.UInt32,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int16,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt16,System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Double,System.Int32,System.Char,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>Argument a is formatted according to the specified format and
            precision. See Argument Formats for details.</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>double d = 12.34;</para>
            <para>QString str = QString(&quot;delta: %1&quot;).arg(d, 0, 'E',
            3);</para>
            <para>// str == &quot;delta: 1.234E+01&quot;</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale, set by QLocale::setDefault(). If no default locale was
            specified, the &quot;C&quot; locale is used.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), this function will
            use the locale's zero to pad. For negative numbers, the zero padding will
            probably appear before the minus sign.</para>
            <para>See also QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Char,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The a argument is interpreted as a Latin-1 character.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QChar,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads arg().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,System.Int32,QtCore.QChar)">
            <summary>
            <para>Returns a copy of this string with the lowest numbered place
            marker replaced by string a, i.e., %1, %2, ..., %99.</para>
            <para>fieldWidth specifies the minimum amount of space that argument a
            shall occupy. If a requires less space than fieldWidth, it is padded to
            fieldWidth with character fillChar. A positive fieldWidth produces
            right-aligned text. A negative fieldWidth produces left-aligned
            text.</para>
            <para>This example shows how we might create a status string for
            reporting progress while processing a list of files:</para>
            <para>QString i;           // current file's number</para>
            <para>QString total;       // number of files to process</para>
            <para>QString fileName;    // current file's name</para>
            <para></para>
            <para>QString status = QString(&quot;Processing file %1 of %2:
            %3&quot;)</para>
            <para>                .arg(i).arg(total).arg(fileName);</para>
            <para>First, arg(i) replaces %1. Then arg(total) replaces %2. Finally,
            arg(fileName) replaces %3.</para>
            <para>One advantage of using arg() over asprintf() is that the order of
            the numbered place markers can change, if the application's strings are
            translated into other languages, but each arg() will still replace the
            lowest numbered unreplaced place marker, no matter where it appears. Also,
            if place marker %i appears more than once in the string, the arg() replaces
            all of them.</para>
            <para>If there is no unreplaced place marker remaining, a warning
            message is output and the result is undefined. Place marker numbers must be
            in the range 1 to 99.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as str.arg(a1).arg(a2), except that the strings
            a1 and a2 are replaced in one pass. This can make a difference if a1
            contains e.g. %1:</para>
            <para>QString str;</para>
            <para>str = &quot;%1 %2&quot;;</para>
            <para></para>
            <para>str.arg(&quot;%1f&quot;, &quot;Hello&quot;);        // returns
            &quot;%1f Hello&quot;</para>
            <para>str.arg(&quot;%1f&quot;).arg(&quot;Hello&quot;);    // returns
            &quot;Hellof %2&quot;</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling str.arg(a1).arg(a2).arg(a3), except
            that the strings a1, a2 and a3 are replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling str.arg(a1).arg(a2).arg(a3).arg(a4),
            except that the strings a1, a2, a3 and a4 are replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling
            str.arg(a1).arg(a2).arg(a3).arg(a4).arg(a5), except that the strings a1,
            a2, a3, a4, and a5 are replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling
            str.arg(a1).arg(a2).arg(a3).arg(a4).arg(a5).arg(a6)), except that the
            strings a1, a2, a3, a4, a5, and a6 are replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling
            str.arg(a1).arg(a2).arg(a3).arg(a4).arg(a5).arg(a6).arg(a7), except that
            the strings a1, a2, a3, a4, a5, a6, and a7 are replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling
            str.arg(a1).arg(a2).arg(a3).arg(a4).arg(a5).arg(a6).arg(a7).arg(a8), except
            that the strings a1, a2, a3, a4, a5, a6, a7, and a8 are replaced in one
            pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString,QtCore.QString)">
            <summary>
            <para>This function overloads arg().</para>
            <para>This is the same as calling
            str.arg(a1).arg(a2).arg(a3).arg(a4).arg(a5).arg(a6).arg(a7).arg(a8).arg(a9)
            , except that the strings a1, a2, a3, a4, a5, a6, a7, a8, and a9 are
            replaced in one pass.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first occurrence of the
            character ch in the string, searching forward from index position from.
            Returns -1 if ch could not be found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QString,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the first occurrence of the string
            str in this string, searching forward from index position from. Returns -1
            if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString x = &quot;sticky question&quot;;</para>
            <para>QString y = &quot;sti&quot;;</para>
            <para>x.indexOf(y);               // returns 0</para>
            <para>x.indexOf(y, 1);            // returns 10</para>
            <para>x.indexOf(y, 10);           // returns 10</para>
            <para>x.indexOf(y, 11);           // returns -1</para>
            <para>If from is -1, the search starts at the last character; if it is
            -2, at the next to last character and so on.</para>
            <para>See also lastIndexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QLatin1String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the first occurrence of the string
            str in this string, searching forward from index position from. Returns -1
            if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString x = &quot;sticky question&quot;;</para>
            <para>QString y = &quot;sti&quot;;</para>
            <para>x.indexOf(y);               // returns 0</para>
            <para>x.indexOf(y, 1);            // returns 10</para>
            <para>x.indexOf(y, 10);           // returns 10</para>
            <para>x.indexOf(y, 11);           // returns -1</para>
            <para>If from is -1, the search starts at the last character; if it is
            -2, at the next to last character and so on.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also lastIndexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QStringRef,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first occurrence of the string
            reference str in this string, searching forward from index position from.
            Returns -1 if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the
            character ch, searching backward from position from.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QString,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the last occurrence of the string
            str in this string, searching backward from index position from. If from is
            -1 (default), the search starts at the last character; if from is -2, at
            the next to last character and so on. Returns -1 if str is not
            found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString x = &quot;crazy azimuths&quot;;</para>
            <para>QString y = &quot;az&quot;;</para>
            <para>x.lastIndexOf(y);           // returns 6</para>
            <para>x.lastIndexOf(y, 6);        // returns 6</para>
            <para>x.lastIndexOf(y, 5);        // returns 2</para>
            <para>x.lastIndexOf(y, 1);        // returns -1</para>
            <para>See also indexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QLatin1String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the string
            str in this string, searching backward from index position from. If from is
            -1 (default), the search starts at the last character; if from is -2, at
            the next to last character and so on. Returns -1 if str is not
            found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString x = &quot;crazy azimuths&quot;;</para>
            <para>QString y = &quot;az&quot;;</para>
            <para>x.lastIndexOf(y);           // returns 6</para>
            <para>x.lastIndexOf(y, 6);        // returns 6</para>
            <para>x.lastIndexOf(y, 5);        // returns 2</para>
            <para>x.lastIndexOf(y, 1);        // returns -1</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also indexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QStringRef,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the string
            reference str in this string, searching backward from index position from.
            If from is -1 (default), the search starts at the last character; if from
            is -2, at the next to last character and so on. Returns -1 if str is not
            found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also indexOf(), contains(), and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if this string contains an occurrence of the
            character ch; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if this string contains an occurrence of the string
            str; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString str = &quot;Peter Pan&quot;;</para>
            <para>str.contains(&quot;peter&quot;, Qt::CaseInsensitive);    //
            returns true</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if this string contains an occurrence of the latin-1
            string str; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if this string contains an occurrence of the string
            reference str; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of occurrences of character ch in the
            string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the number of (potentially overlapping) occurrences of
            the string str in this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>See also contains() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of (potentially overlapping) occurrences of
            the string reference str in this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also contains() and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first match of the regular
            expression rx in the string, searching forward from index position from.
            Returns -1 if rx didn't match anywhere.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.indexOf(QRegExp(&quot;m[aeiou]&quot;), 0);       // returns
            4</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last match of the regular
            expression rx in the string, searching backward from index position from.
            Returns -1 if rx didn't match anywhere.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.lastIndexOf(QRegExp(&quot;m[aeiou]&quot;));      // returns
            8</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QRegExp)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if the regular expression rx matches somewhere in
            this string; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count(QtCore.QRegExp)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of times the regular expression rx matches in
            the string.</para>
            <para>This function counts overlapping matches, so in the example
            below, there are four instances of &quot;ana&quot; or
            &quot;ama&quot;:</para>
            <para>QString str = &quot;banana and panama&quot;;</para>
            <para>str.count(QRegExp(&quot;a[nm]a&quot;));    // returns 4</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf1(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first match of the regular
            expression rx in the string, searching forward from index position from.
            Returns -1 if rx didn't match anywhere.</para>
            <para>If there is a match, the rx regular expression will contain the
            matched captures (see QRegExp::matchedLength, QRegExp::cap).</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.indexOf(QRegExp(&quot;m[aeiou]&quot;), 0);       // returns
            4</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf1(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last match of the regular
            expression rx in the string, searching backward from index position from.
            Returns -1 if rx didn't match anywhere.</para>
            <para>If there is a match, the rx regular expression will contain the
            matched captures (see QRegExp::matchedLength, QRegExp::cap).</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.lastIndexOf(QRegExp(&quot;m[aeiou]&quot;));      // returns
            8</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains1(QtCore.QRegExp)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if the regular expression rx matches somewhere in
            this string; otherwise returns false.</para>
            <para>If there is a match, the rx regular expression will contain the
            matched captures (see QRegExp::matchedLength, QRegExp::cap).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QRegularExpression,System.Int32)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first match of the regular
            expression re in the string, searching forward from index position from.
            Returns -1 if re didn't match anywhere.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.indexOf(QRegularExpression(&quot;m[aeiou]&quot;), 0);
            // returns 4</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.IndexOf(QtCore.QRegularExpression,System.Int32,QtCore.QRegularExpressionMatch)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the first match of the regular
            expression re in the string, searching forward from index position from.
            Returns -1 if re didn't match anywhere.</para>
            <para>If the match is successful and rmatch is not a null pointer, it
            also writes the results of the match into the QRegularExpressionMatch
            object pointed to by rmatch.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>QRegularExpressionMatch match;</para>
            <para>str.indexOf(QRegularExpression(&quot;m[aeiou]&quot;), 0,
            &amp;match);       // returns 4</para>
            <para>// match.captured() == mi</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QRegularExpression,System.Int32)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last match of the regular
            expression re in the string, which starts before the index position from.
            Returns -1 if re didn't match anywhere.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>str.lastIndexOf(QRegularExpression(&quot;m[aeiou]&quot;));
            // returns 8</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LastIndexOf(QtCore.QRegularExpression,System.Int32,QtCore.QRegularExpressionMatch)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the last match of the regular
            expression re in the string, which starts before the index position from.
            Returns -1 if re didn't match anywhere.</para>
            <para>If the match is successful and rmatch is not a null pointer, it
            also writes the results of the match into the QRegularExpressionMatch
            object pointed to by rmatch.</para>
            <para>Example:</para>
            <para>QString str = &quot;the minimum&quot;;</para>
            <para>QRegularExpressionMatch match;</para>
            <para>str.lastIndexOf(QRegularExpression(&quot;m[aeiou]&quot;), -1,
            &amp;match);      // returns 8</para>
            <para>// match.captured() == mu</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QRegularExpression)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if the regular expression re matches somewhere in
            this string; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Contains(QtCore.QRegularExpression,QtCore.QRegularExpressionMatch)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if the regular expression re matches somewhere in
            this string; otherwise returns false.</para>
            <para>If the match is successful and match is not a null pointer, it
            also writes the results of the match into the QRegularExpressionMatch
            object pointed to by match.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QRegularExpression::match().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Count(QtCore.QRegularExpression)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of times the regular expression re matches in
            the string.</para>
            <para>This function counts overlapping matches, so in the example
            below, there are four instances of &quot;ana&quot; or
            &quot;ama&quot;:</para>
            <para>QString str = &quot;banana and panama&quot;;</para>
            <para>str.count(QRegularExpression(&quot;a[nm]a&quot;));    // returns
            4</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Section(QtCore.QChar,System.Int32,System.Int32,QtCore.QString.SectionFlag)">
            <summary>
            <para>This function returns a section of the string.</para>
            <para>This string is treated as a sequence of fields separated by the
            character, sep. The returned string consists of the fields from position
            start to position end inclusive. If end is not specified, all fields from
            position start to the end of the string are included. Fields are numbered
            0, 1, 2, etc., counting from the left, and -1, -2, etc., counting from
            right to left.</para>
            <para>The flags argument can be used to affect some aspects of the
            function's behavior, e.g. whether to be case sensitive, whether to skip
            empty fields and how to deal with leading and trailing separators; see
            SectionFlags.</para>
            <para>QString str;</para>
            <para>QString csv =
            &quot;forename,middlename,surname,phone&quot;;</para>
            <para>QString path = &quot;/usr/local/bin/myapp&quot;; // First field
            is empty</para>
            <para>QString::SectionFlag flag = QString::SectionSkipEmpty;</para>
            <para></para>
            <para>str = csv.section(',', 2, 2);   // str ==
            &quot;surname&quot;</para>
            <para>str = path.section('/', 3, 4);  // str ==
            &quot;bin/myapp&quot;</para>
            <para>str = path.section('/', 3, 3, flag); // str ==
            &quot;myapp&quot;</para>
            <para>If start or end is negative, we count fields from the right of
            the string, the right-most field being -1, the one from right-most field
            being -2, and so on.</para>
            <para>str = csv.section(',', -3, -2);  // str ==
            &quot;middlename,surname&quot;</para>
            <para>str = path.section('/', -1); // str == &quot;myapp&quot;</para>
            <para>See also split().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Section(QtCore.QString,System.Int32,System.Int32,QtCore.QString.SectionFlag)">
            <summary>
            <para>This function overloads section().</para>
            <para>QString str;</para>
            <para>QString data =
            &quot;forename**middlename**surname**phone&quot;;</para>
            <para></para>
            <para>str = data.section(&quot;**&quot;, 2, 2); // str ==
            &quot;surname&quot;</para>
            <para>str = data.section(&quot;**&quot;, -3, -2); // str ==
            &quot;middlename**surname&quot;</para>
            <para>See also split().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Section(QtCore.QRegExp,System.Int32,System.Int32,QtCore.QString.SectionFlag)">
            <summary>
            <para>This function overloads section().</para>
            <para>This string is treated as a sequence of fields separated by the
            regular expression, reg.</para>
            <para>QString line = &quot;forename\tmiddlename  surname \t \t
            phone&quot;;</para>
            <para>QRegExp sep(&quot;\\s+&quot;);</para>
            <para>str = line.section(sep, 2, 2); // str ==
            &quot;surname&quot;</para>
            <para>str = line.section(sep, -3, -2); // str == &quot;middlename
            surname&quot;</para>
            <para>Warning: Using this QRegExp version is much more expensive than
            the overloaded string and character versions.</para>
            <para>See also split() and simplified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Section(QtCore.QRegularExpression,System.Int32,System.Int32,QtCore.QString.SectionFlag)">
            <summary>
            <para>This function overloads section().</para>
            <para>This string is treated as a sequence of fields separated by the
            regular expression, re.</para>
            <para>QString line = &quot;forename\tmiddlename  surname \t \t
            phone&quot;;</para>
            <para>QRegularExpression sep(&quot;\\s+&quot;);</para>
            <para>str = line.section(sep, 2, 2); // str ==
            &quot;surname&quot;</para>
            <para>str = line.section(sep, -3, -2); // str == &quot;middlename
            surname&quot;</para>
            <para>Warning: Using this QRegularExpression version is much more
            expensive than the overloaded string and character versions.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also split() and simplified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Left(System.Int32)">
            <summary>
            <para>Returns a substring that contains the n leftmost characters of
            the string.</para>
            <para>The entire string is returned if n is greater than size() or less
            than zero.</para>
            <para>QString x = &quot;Pineapple&quot;;</para>
            <para>QString y = x.left(4);      // y == &quot;Pine&quot;</para>
            <para>See also right(), mid(), and startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Right(System.Int32)">
            <summary>
            <para>Returns a substring that contains the n rightmost characters of
            the string.</para>
            <para>The entire string is returned if n is greater than size() or less
            than zero.</para>
            <para>QString x = &quot;Pineapple&quot;;</para>
            <para>QString y = x.right(5);      // y == &quot;apple&quot;</para>
            <para>See also left(), mid(), and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Mid(System.Int32,System.Int32)">
            <summary>
            <para>Returns a string that contains n characters of this string,
            starting at the specified position index.</para>
            <para>Returns a null string if the position index exceeds the length of
            the string. If there are less than n characters available in the string
            starting at the given position, or if n is -1 (default), the function
            returns all characters that are available from the specified
            position.</para>
            <para>Example:</para>
            <para>QString x = &quot;Nine pineapples&quot;;</para>
            <para>QString y = x.mid(5, 4);            // y ==
            &quot;pine&quot;</para>
            <para>QString z = x.mid(5);               // z ==
            &quot;pineapples&quot;</para>
            <para>See also left() and right().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LeftRef(System.Int32)">
            <summary>
            <para>Returns a substring reference to the n leftmost characters of the
            string.</para>
            <para>If n is greater than size() or less than zero, a reference to the
            entire string is returned.</para>
            <para>QString x = &quot;Pineapple&quot;;</para>
            <para>QStringRef y = x.leftRef(4);        // y ==
            &quot;Pine&quot;</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also left(), rightRef(), midRef(), and startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.RightRef(System.Int32)">
            <summary>
            <para>Returns a substring reference to the n rightmost characters of
            the string.</para>
            <para>If n is greater than size() or less than zero, a reference to the
            entire string is returned.</para>
            <para>QString x = &quot;Pineapple&quot;;</para>
            <para>QStringRef y = x.rightRef(5);       // y ==
            &quot;apple&quot;</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also right(), leftRef(), midRef(), and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.MidRef(System.Int32,System.Int32)">
            <summary>
            <para>Returns a substring reference to n characters of this string,
            starting at the specified position.</para>
            <para>If the position exceeds the length of the string, a null
            reference is returned.</para>
            <para>If there are less than n characters available in the string,
            starting at the given position, or if n is -1 (default), the function
            returns all characters from the specified position onwards.</para>
            <para>Example:</para>
            <para>QString x = &quot;Nine pineapples&quot;;</para>
            <para>QStringRef y = x.midRef(5, 4);      // y ==
            &quot;pine&quot;</para>
            <para>QStringRef z = x.midRef(5);         // z ==
            &quot;pineapples&quot;</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also mid(), leftRef(), and rightRef().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.StartsWith(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the string starts with s; otherwise returns
            false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>QString str = &quot;Bananas&quot;;</para>
            <para>str.startsWith(&quot;Ban&quot;);     // returns true</para>
            <para>str.startsWith(&quot;Car&quot;);     // returns false</para>
            <para>See also endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.StartsWith(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the string starts with the string reference s;
            otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.StartsWith(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.StartsWith(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads startsWith().</para>
            <para>Returns true if the string starts with c; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.EndsWith(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the string ends with s; otherwise returns
            false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>QString str = &quot;Bananas&quot;;</para>
            <para>str.endsWith(&quot;anas&quot;);         // returns true</para>
            <para>str.endsWith(&quot;pple&quot;);         // returns false</para>
            <para>See also startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.EndsWith(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads endsWith().</para>
            <para>Returns true if the string ends with the string reference s;
            otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.EndsWith(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.EndsWith(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the string ends with c; otherwise returns
            false.</para>
            <para>This function overloads endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LeftJustified(System.Int32,QtCore.QChar,System.Boolean)">
            <summary>
            <para>Returns a string of size width that contains this string padded
            by the fill character.</para>
            <para>If truncate is false and the size() of the string is more than
            width, then the returned string is a copy of the string.</para>
            <para>QString s = &quot;apple&quot;;</para>
            <para>QString t = s.leftJustified(8, '.');    // t ==
            &quot;apple...&quot;</para>
            <para>If truncate is true and the size() of the string is more than
            width, then any characters in a copy of the string after position width are
            removed, and the copy is returned.</para>
            <para>QString str = &quot;Pineapple&quot;;</para>
            <para>str = str.leftJustified(5, '.', true);    // str ==
            &quot;Pinea&quot;</para>
            <para>See also rightJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.RightJustified(System.Int32,QtCore.QChar,System.Boolean)">
            <summary>
            <para>Returns a string of size() width that contains the fill character
            followed by the string. For example:</para>
            <para>QString s = &quot;apple&quot;;</para>
            <para>QString t = s.rightJustified(8, '.');    // t ==
            &quot;...apple&quot;</para>
            <para>If truncate is false and the size() of the string is more than
            width, then the returned string is a copy of the string.</para>
            <para>If truncate is true and the size() of the string is more than
            width, then the resulting string is truncated at position width.</para>
            <para>QString str = &quot;Pineapple&quot;;</para>
            <para>str = str.rightJustified(5, '.', true);    // str ==
            &quot;Pinea&quot;</para>
            <para>See also leftJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLower">
            <summary>
            <para>Returns a lowercase copy of the string.</para>
            <para>QString str = &quot;The Qt PROJECT&quot;;</para>
            <para>str = str.toLower();        // str == &quot;the qt
            project&quot;</para>
            <para>The case conversion will always happen in the 'C' locale. For
            locale dependent case folding use QLocale::toLower()</para>
            <para>See also toUpper() and QLocale::toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUpper">
            <summary>
            <para>Returns an uppercase copy of the string.</para>
            <para>QString str = &quot;TeXt&quot;;</para>
            <para>str = str.toUpper();        // str == &quot;TEXT&quot;</para>
            <para>The case conversion will always happen in the 'C' locale. For
            locale dependent case folding use QLocale::toUpper()</para>
            <para>See also toLower() and QLocale::toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToCaseFolded">
            <summary>
            <para>Returns the case folded equivalent of the string. For most
            Unicode characters this is the same as toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToHtmlEscaped">
            <summary>
            <para>Converts a plain text string to an HTML string with HTML
            metacharacters &lt;, &gt;, &amp;, and &quot; replaced by HTML
            entities.</para>
            <para>Example:</para>
            <para>QString plain = &quot;#include &lt;QtCore&gt;&quot;</para>
            <para>QString html = plain.toHtmlEscaped();</para>
            <para>// html == &quot;#include &amp;lt;QtCore&amp;gt;&quot;</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Insert(System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads insert().</para>
            <para>Inserts ch at the given index position in the string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Insert(System.Int32,QtCore.QChar,System.Int32)">
            <summary>
            <para>This function overloads insert().</para>
            <para>Inserts the first size characters of the QChar array unicode at
            the given index position in the string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Insert(System.Int32,QtCore.QString)">
            <summary>
            <para>Inserts the string str at the given index position and returns a
            reference to this string.</para>
            <para>Example:</para>
            <para>QString str = &quot;Meal&quot;;</para>
            <para>str.insert(1, QString(&quot;ontr&quot;));</para>
            <para>// str == &quot;Montreal&quot;</para>
            <para>If the given position is greater than size(), the array is first
            extended using resize().</para>
            <para>See also append(), prepend(), replace(), and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Insert(System.Int32,QtCore.QLatin1String)">
            <summary>
            <para>This function overloads insert().</para>
            <para>Inserts the Latin-1 string str at the given index
            position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QChar)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends the character ch to this string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QChar,System.Int32)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends len characters from the QChar array str to this
            string.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QString)">
            <summary>
            <para>Appends the string str onto the end of this string.</para>
            <para>Example:</para>
            <para>QString x = &quot;free&quot;;</para>
            <para>QString y = &quot;dom&quot;;</para>
            <para></para>
            <para>x.append(y);</para>
            <para>// x == &quot;freedom&quot;</para>
            <para>This is the same as using the insert() function:</para>
            <para>x.insert(x.size(), y);</para>
            <para>The append() function is typically very fast (constant time),
            because QString preallocates extra space at the end of the string data so
            it can grow without reallocating the entire string each time.</para>
            <para>See also operator+=(), prepend(), and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QStringRef)">
            <summary>
            <para>Appends the given string reference to this string and returns the
            result.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QLatin1String)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends the Latin-1 string str to this string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Prepend(QtCore.QChar)">
            <summary>
            <para>This function overloads prepend().</para>
            <para>Prepends the character ch to this string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Prepend(QtCore.QString)">
            <summary>
            <para>Prepends the string str to the beginning of this string and
            returns a reference to this string.</para>
            <para>Example:</para>
            <para>QString x = &quot;ship&quot;;</para>
            <para>QString y = &quot;air&quot;;</para>
            <para>x.prepend(y);</para>
            <para>// x == &quot;airship&quot;</para>
            <para>See also append() and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Prepend(QtCore.QLatin1String)">
            <summary>
            <para>This function overloads prepend().</para>
            <para>Prepends the Latin-1 string str to this string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Remove(System.Int32,System.Int32)">
            <summary>
            <para>Removes n characters from the string, starting at the given
            position index, and returns a reference to the string.</para>
            <para>If the specified position index is within the string, but
            position + n is beyond the end of the string, the string is truncated at
            the specified position.</para>
            <para>QString s = &quot;Montreal&quot;;</para>
            <para>s.remove(1, 4);</para>
            <para>// s == &quot;Meal&quot;</para>
            <para>See also insert() and replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Remove(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Removes every occurrence of the character ch in this string, and
            returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString t = &quot;Ali Baba&quot;;</para>
            <para>t.remove(QChar('a'), Qt::CaseInsensitive);</para>
            <para>// t == &quot;li Bb&quot;</para>
            <para>This is the same as replace(ch, &quot;&quot;, cs).</para>
            <para>See also replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Remove(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Removes every occurrence of the given str string in this string,
            and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This is the same as replace(str, &quot;&quot;, cs).</para>
            <para>See also replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(System.Int32,System.Int32,QtCore.QChar)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces n characters beginning at index position with the
            character after and returns a reference to this string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(System.Int32,System.Int32,QtCore.QChar,System.Int32)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces n characters beginning at index position with the first
            size characters of the QChar array unicode and returns a reference to this
            string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(System.Int32,System.Int32,QtCore.QString)">
            <summary>
            <para>Replaces n characters beginning at index position with the string
            after and returns a reference to this string.</para>
            <para>Note: If the specified position index is within the string, but
            position + n goes outside the strings range, then n will be adjusted to
            stop at the end of the string.</para>
            <para>Example:</para>
            <para>QString x = &quot;Say yes!&quot;;</para>
            <para>QString y = &quot;no&quot;;</para>
            <para>x.replace(4, 3, y);</para>
            <para>// x == &quot;Say no!&quot;</para>
            <para>See also insert() and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QChar,QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the character before with the
            character after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QChar,System.Int32,QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces each occurrence in this string of the first blen
            characters of before with the first alen characters of after and returns a
            reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QLatin1String,QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the string before with the string
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Note: The text is not rescanned after a replacement.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QLatin1String,QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the string before with the string
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Note: The text is not rescanned after a replacement.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QString,QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the string before with the string
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Note: The text is not rescanned after a replacement.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QString,QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the string before with the string
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Example:</para>
            <para>QString str = &quot;colour behaviour flavour
            neighbour&quot;;</para>
            <para>str.replace(QString(&quot;ou&quot;),
            QString(&quot;o&quot;));</para>
            <para>// str == &quot;color behavior flavor neighbor&quot;</para>
            <para>Note: The replacement text is not rescanned after it is
            inserted.</para>
            <para>Example:</para>
            <para>QString equis = &quot;xxxxxx&quot;;</para>
            <para>equis.replace(&quot;xx&quot;, &quot;x&quot;);</para>
            <para>// equis == &quot;xxx&quot;</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QChar,QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the character ch in the string with
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QChar,QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the character c with the string
            after and returns a reference to this string.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>Note: The text is not rescanned after a replacement.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Replace(QtCore.QRegExp,QtCore.QString)">
            <summary>
            <para>This function overloads replace().</para>
            <para>Replaces every occurrence of the regular expression rx in the
            string with after. Returns a reference to the string. For example:</para>
            <para>QString s = &quot;Banana&quot;;</para>
            <para>s.replace(QRegExp(&quot;a[mn]&quot;), &quot;ox&quot;);</para>
            <para>// s == &quot;Boxoxa&quot;</para>
            <para>For regular expressions containing capturing parentheses,
            occurrences of \1, \2, ..., in after are replaced with rx.cap(1), cap(2),
            ...</para>
            <para>QString t = &quot;A &lt;i&gt;bon mot&lt;/i&gt;.&quot;;</para>
            <para>t.replace(QRegExp(&quot;&lt;i&gt;([^&lt;]*)&lt;/i&gt;&quot;),
            &quot;\\emph{\\1}&quot;);</para>
            <para>// t == &quot;A \\emph{bon mot}.&quot;</para>
            <para>See also indexOf(), lastIndexOf(), remove(), and
            QRegExp::cap().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Remove(QtCore.QRegExp)">
            <summary>
            <para>Removes every occurrence of the regular expression rx in the
            string, and returns a reference to the string. For example:</para>
            <para>QString r = &quot;Telephone&quot;;</para>
            <para>r.remove(QRegExp(&quot;[aeiou].&quot;));</para>
            <para>// r == &quot;The&quot;</para>
            <para>See also indexOf(), lastIndexOf(), and replace().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QString.Replace(QtCore.QRegularExpression,QtCore.QString)" -->
        <member name="M:QtCore.QString.Remove(QtCore.QRegularExpression)">
            <summary>
            <para>Removes every occurrence of the regular expression re in the
            string, and returns a reference to the string. For example:</para>
            <para>QString r = &quot;Telephone&quot;;</para>
            <para>r.remove(QRegularExpression(&quot;[aeiou].&quot;));</para>
            <para>// r == &quot;The&quot;</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also indexOf(), lastIndexOf(), and replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Split(QtCore.QString,QtCore.QString.SplitBehavior,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Splits the string into substrings wherever sep occurs, and
            returns the list of those strings. If sep does not match anywhere in the
            string, split() returns a single-element list containing this
            string.</para>
            <para>cs specifies whether sep should be matched case sensitively or
            case insensitively.</para>
            <para>If behavior is QString::SkipEmptyParts, empty entries don't
            appear in the result. By default, empty entries are kept.</para>
            <para>Example:</para>
            <para>QString str = &quot;a,,b,c&quot;;</para>
            <para></para>
            <para>QStringList list1 = str.split(&quot;,&quot;);</para>
            <para>// list1: [ &quot;a&quot;, &quot;&quot;, &quot;b&quot;,
            &quot;c&quot; ]</para>
            <para></para>
            <para>QStringList list2 = str.split(&quot;,&quot;,
            QString::SkipEmptyParts);</para>
            <para>// list2: [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]</para>
            <para>See also QStringList::join() and section().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Split(QtCore.QChar,QtCore.QString.SplitBehavior,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Split(QtCore.QRegExp,QtCore.QString.SplitBehavior)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Splits the string into substrings wherever the regular expression
            rx matches, and returns the list of those strings. If rx does not match
            anywhere in the string, split() returns a single-element list containing
            this string.</para>
            <para>Here's an example where we extract the words in a sentence using
            one or more whitespace characters as the separator:</para>
            <para>QString str;</para>
            <para>QStringList list;</para>
            <para></para>
            <para>str = &quot;Some  text\n\twith  strange whitespace.&quot;;</para>
            <para>list = str.split(QRegExp(&quot;\\s+&quot;));</para>
            <para>// list: [ &quot;Some&quot;, &quot;text&quot;, &quot;with&quot;,
            &quot;strange&quot;, &quot;whitespace.&quot; ]</para>
            <para>Here's a similar example, but this time we use any sequence of
            non-word characters as the separator:</para>
            <para>str = &quot;This time, a normal English sentence.&quot;;</para>
            <para>list = str.split(QRegExp(&quot;\\W+&quot;),
            QString::SkipEmptyParts);</para>
            <para>// list: [ &quot;This&quot;, &quot;time&quot;, &quot;a&quot;,
            &quot;normal&quot;, &quot;English&quot;, &quot;sentence&quot; ]</para>
            <para>Here's a third example where we use a zero-length assertion, \b
            (word boundary), to split the string into an alternating sequence of
            non-word and word tokens:</para>
            <para>str = &quot;Now: this sentence fragment.&quot;;</para>
            <para>list = str.split(QRegExp(&quot;\\b&quot;));</para>
            <para>// list: [ &quot;&quot;, &quot;Now&quot;, &quot;: &quot;,
            &quot;this&quot;, &quot; &quot;, &quot;sentence&quot;, &quot; &quot;,
            &quot;fragment&quot;, &quot;.&quot; ]</para>
            <para>See also QStringList::join() and section().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Split(QtCore.QRegularExpression,QtCore.QString.SplitBehavior)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Splits the string into substrings wherever the regular expression
            re matches, and returns the list of those strings. If re does not match
            anywhere in the string, split() returns a single-element list containing
            this string.</para>
            <para>Here's an example where we extract the words in a sentence using
            one or more whitespace characters as the separator:</para>
            <para>QString str;</para>
            <para>QStringList list;</para>
            <para></para>
            <para>str = &quot;Some  text\n\twith  strange whitespace.&quot;;</para>
            <para>list = str.split(QRegularExpression(&quot;\\s+&quot;));</para>
            <para>// list: [ &quot;Some&quot;, &quot;text&quot;, &quot;with&quot;,
            &quot;strange&quot;, &quot;whitespace.&quot; ]</para>
            <para>Here's a similar example, but this time we use any sequence of
            non-word characters as the separator:</para>
            <para>str = &quot;This time, a normal English sentence.&quot;;</para>
            <para>list = str.split(QRegularExpression(&quot;\\W+&quot;),
            QString::SkipEmptyParts);</para>
            <para>// list: [ &quot;This&quot;, &quot;time&quot;, &quot;a&quot;,
            &quot;normal&quot;, &quot;English&quot;, &quot;sentence&quot; ]</para>
            <para>Here's a third example where we use a zero-length assertion, \b
            (word boundary), to split the string into an alternating sequence of
            non-word and word tokens:</para>
            <para>str = &quot;Now: this sentence fragment.&quot;;</para>
            <para>list = str.split(QRegularExpression(&quot;\\b&quot;));</para>
            <para>// list: [ &quot;&quot;, &quot;Now&quot;, &quot;: &quot;,
            &quot;this&quot;, &quot; &quot;, &quot;sentence&quot;, &quot; &quot;,
            &quot;fragment&quot;, &quot;.&quot; ]</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QStringList::join() and section().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Normalized(QtCore.QString.NormalizationForm,QtCore.QChar.UnicodeVersion)">
            <summary>
            <para>Returns the string in the given Unicode normalization mode,
            according to the given version of the Unicode standard.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Repeated(System.Int32)">
            <summary>
            <para>Returns a copy of this string repeated the specified number of
            times.</para>
            <para>If times is less than 1, an empty string is returned.</para>
            <para>Example:</para>
            <para>QString str(&quot;ab&quot;);</para>
            <para>str.repeated(4);            // returns
            &quot;abababab&quot;</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLatin1">
            <summary>
            <para>Returns a Latin-1 representation of the string as a
            QByteArray.</para>
            <para>The returned byte array is undefined if the string contains
            non-Latin1 characters. Those characters may be suppressed or replaced with
            a question mark.</para>
            <para>See also fromLatin1(), toUtf8(), toLocal8Bit(), and
            QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUtf8">
            <summary>
            <para>Returns a UTF-8 representation of the string as a
            QByteArray.</para>
            <para>UTF-8 is a Unicode codec and can represent all characters in a
            Unicode string like QString.</para>
            <para>See also fromUtf8(), toLatin1(), toLocal8Bit(), and
            QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLocal8Bit">
            <summary>
            <para>Returns the local 8-bit representation of the string as a
            QByteArray. The returned byte array is undefined if the string contains
            characters not supported by the local 8-bit encoding.</para>
            <para>QTextCodec::codecForLocale() is used to perform the conversion
            from Unicode. If the locale encoding could not be determined, this function
            does the same as toLatin1().</para>
            <para>If this string contains any characters that cannot be encoded in
            the locale, the returned byte array is undefined. Those characters may be
            suppressed or replaced by another.</para>
            <para>See also fromLocal8Bit(), toLatin1(), toUtf8(), and
            QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToWCharArray(System.Char*)">
            <summary>
            <para>Fills the array with the data contained in this QString object.
            The array is encoded in UTF-16 on platforms where wchar_t is 2 bytes wide
            (e.g. windows) and in UCS-4 on platforms where wchar_t is 4 bytes wide
            (most Unix systems).</para>
            <para>array has to be allocated by the caller and contain enough space
            to hold the complete string (allocating the array with the same length as
            the string is always sufficient).</para>
            <para>This function returns the actual length of the string in
            array.</para>
            <para>Note: This function does not append a null character to the
            array.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also utf16(), toUcs4(), toLatin1(), toUtf8(), toLocal8Bit(),
            and toStdWString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetRawData(QtCore.QChar,System.Int32)">
            <summary>
            <para>Resets the QString to use the first size Unicode characters in
            the array unicode. The data in unicode is not copied. The caller must be
            able to guarantee that unicode will not be deleted or modified as long as
            the QString (or an unmodified copy of it) exists.</para>
            <para>This function can be used instead of fromRawData() to re-use
            existings QString objects to save memory re-allocations.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also fromRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetUnicode(QtCore.QChar,System.Int32)">
            <summary>
            <para>Resizes the string to size characters and copies unicode into the
            string.</para>
            <para>If unicode is 0, nothing is copied, but the string is still
            resized to size.</para>
            <para>See also unicode() and setUtf16().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetUtf16(System.UInt16@,System.Int32)">
            <summary>
            <para>Resizes the string to size characters and copies unicode into the
            string.</para>
            <para>If unicode is 0, nothing is copied, but the string is still
            resized to size.</para>
            <para>Note that unlike fromUtf16(), this function does not consider
            BOMs and possibly differing byte ordering.</para>
            <para>See also utf16() and setUnicode().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            <para>Lexically compares this string with the other string and returns
            an integer less than, equal to, or greater than zero if this string is less
            than, equal to, or greater than the other string.</para>
            <para>Same as compare(*this, other, cs).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            <para>Same as compare(*this, other, cs).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            <para>Compares the string reference, ref, with the string and returns
            an integer less than, equal to, or greater than zero if the string is less
            than, equal to, or greater than ref.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LocaleAwareCompare(QtCore.QString)">
            <summary>
            <para>This function overloads localeAwareCompare().</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>Same as localeAwareCompare(*this, other).</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LocaleAwareCompare(QtCore.QStringRef)">
            <summary>
            <para>This function overloads localeAwareCompare().</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>Same as localeAwareCompare(*this, other).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a short using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toShort()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>short hex = str.toShort(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>short dec = str.toShort(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>See also number(), toUShort(), toInt(), and
            QLocale::toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUShort()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>ushort hex = str.toUShort(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>ushort dec = str.toUShort(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toShort(), and QLocale::toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an int using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toInt()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para>int hex = str.toInt(&amp;ok, 16);       // hex == 255, ok ==
            true</para>
            <para>int dec = str.toInt(&amp;ok, 10);       // dec == 0, ok ==
            false</para>
            <para>See also number(), toUInt(), toDouble(), and
            QLocale::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned int using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUInt()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>uint hex = str.toUInt(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>uint dec = str.toUInt(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toInt(), and QLocale::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a long using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>long hex = str.toLong(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>long dec = str.toLong(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toULong(), toInt(), and
            QLocale::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToULong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>ulong hex = str.toULong(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>ulong dec = str.toULong(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>See also number() and QLocale::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>qint64 hex = str.toLongLong(&amp;ok, 16);      // hex == 255, ok
            == true</para>
            <para>qint64 dec = str.toLongLong(&amp;ok, 10);      // dec == 0, ok ==
            false</para>
            <para>See also number(), toULongLong(), toInt(), and
            QLocale::toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToULongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned long long using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>quint64 hex = str.toULongLong(&amp;ok, 16);    // hex == 255, ok
            == true</para>
            <para>quint64 dec = str.toULongLong(&amp;ok, 10);    // dec == 0, ok ==
            false</para>
            <para>See also number(), toLongLong(), and
            QLocale::toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToFloat(System.Boolean@)">
            <summary>
            <para>Returns the string converted to a float value.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true. Returns 0.0 if the conversion fails.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toFloat()</para>
            <para>Example:</para>
            <para>QString str1 = &quot;1234.56&quot;;</para>
            <para>str1.toFloat();             // returns 1234.56</para>
            <para></para>
            <para>bool ok;</para>
            <para>QString str2 = &quot;R2D2&quot;;</para>
            <para>str2.toFloat(&amp;ok);          // returns 0.0, sets ok to
            false</para>
            <para>See also number(), toDouble(), toInt(), and
            QLocale::toFloat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToDouble(System.Boolean@)">
            <summary>
            <para>Returns the string converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>QString str = &quot;1234.56&quot;;</para>
            <para>double val = str.toDouble();   // val == 1234.56</para>
            <para>Warning: The QString content may only contain valid numerical
            characters which includes the plus/minus sign, the characters g and e used
            in scientific notation, and the decimal point. Including the unit or
            additional characters leads to a conversion error.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>d = QString( &quot;1234.56e-02&quot; ).toDouble(&amp;ok); // ok
            == true, d == 12.3456</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toDouble()</para>
            <para>d = QString( &quot;1234,56&quot; ).toDouble(&amp;ok); // ok ==
            false</para>
            <para>d = QString( &quot;1234.56&quot; ).toDouble(&amp;ok); // ok ==
            true, d == 1234.56</para>
            <para>For historical reasons, this function does not handle thousands
            group separators. If you need to convert such numbers, use
            QLocale::toDouble().</para>
            <para>d = QString( &quot;1,234,567.89&quot; ).toDouble(&amp;ok); // ok
            == false</para>
            <para>d = QString( &quot;1234567.89&quot; ).toDouble(&amp;ok); // ok ==
            true</para>
            <para>See also number(), QLocale::setDefault(), QLocale::toDouble(),
            and trimmed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.Int16,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.UInt16,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.Int32,System.Int32)">
            <summary>
            <para>Sets the string to the printed value of n in the specified base,
            and returns a reference to the string.</para>
            <para>The base is 10 by default and must be between 2 and 36. For bases
            other than 10, n is treated as an unsigned integer.</para>
            <para>QString str;</para>
            <para>str.setNum(1234);       // str == &quot;1234&quot;</para>
            <para>The formatting always uses QLocale::C, i.e.,
            English/UnitedStates. To get a localized string representation of a number,
            use QLocale::toString() with the appropriate locale.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum1(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum1(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.Int64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.UInt64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.Single,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the string to the printed value of n, formatted according to
            the given format and precision, and returns a reference to the
            string.</para>
            <para>The formatting always uses QLocale::C, i.e.,
            English/UnitedStates. To get a localized string representation of a number,
            use QLocale::toString() with the appropriate locale.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.SetNum(System.Double,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the string to the printed value of n, formatted according to
            the given format and precision, and returns a reference to the
            string.</para>
            <para>The format can be 'e', 'E', 'f', 'g' or 'G' (see Argument Formats
            for an explanation of the formats).</para>
            <para>The formatting always uses QLocale::C, i.e.,
            English/UnitedStates. To get a localized string representation of a number,
            use QLocale::toString() with the appropriate locale.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThan(QtCore.QString,QtCore.QLatin1String)">
            <summary>
            <para>This function overloads operator&lt;().</para>
            <para>Returns true if this string is lexically less than the parameter
            string called other; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThan(QtCore.QString,QtCore.QLatin1String)">
            <summary>
            <para>This function overloads operator&gt;().</para>
            <para>Returns true if this string is lexically greater than the
            parameter string other; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Inequality(QtCore.QString,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if this string is not equal to parameter string
            other. Otherwise returns false.</para>
            <para>This function overloads operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThanOrEqual(QtCore.QString,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if this string is lexically less than or equal to
            parameter string other. Otherwise returns false.</para>
            <para>This function overloads operator&lt;=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThanOrEqual(QtCore.QString,QtCore.QLatin1String)">
            <summary>
            <para>Returns true if this string is lexically greater than or equal to
            parameter string other. Otherwise returns false.</para>
            <para>This function overloads operator&gt;=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Prepend1(System.String)">
            <summary>
            <para>This function overloads prepend().</para>
            <para>Prepends the string str to this string. The const char pointer is
            converted to Unicode using the fromUtf8() function.</para>
            <para>You can disable this function by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Prepend(QtCore.QByteArray)">
            <summary>
            <para>This function overloads prepend().</para>
            <para>Prepends the byte array ba to this string. The byte array is
            converted to Unicode using the fromUtf8() function.</para>
            <para>You can disable this function by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append1(System.String)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends the string str to this string. The given const char
            pointer is converted to Unicode using the fromUtf8() function.</para>
            <para>You can disable this function by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Append(QtCore.QByteArray)">
            <summary>
            <para>This function overloads append().</para>
            <para>Appends the byte array ba to this string. The given byte array is
            converted to Unicode using the fromUtf8() function.</para>
            <para>You can disable this function by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Equality(QtCore.QString,System.String)">
            <summary>
            <para>This function overloads operator==().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Inequality(QtCore.QString,System.String)">
            <summary>
            <para>This function overloads operator!=().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThan(QtCore.QString,System.String)">
            <summary>
            <para>Returns true if this string is lexically less than string other.
            Otherwise returns false.</para>
            <para>This function overloads operator&lt;().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThanOrEqual(QtCore.QString,System.String)">
            <summary>
            <para>This function overloads operator&lt;=().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThan(QtCore.QString,System.String)">
            <summary>
            <para>This function overloads operator&gt;().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThanOrEqual(QtCore.QString,System.String)">
            <summary>
            <para>This function overloads operator&gt;=().</para>
            <para>The other const char pointer is converted to a QString using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Equality(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator==().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. This function stops conversion at the first NUL
            character found, or the end of the byte array.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically equal to the parameter
            string other. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Inequality(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator!=().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. If any NUL characters ('\0') are embedded in the byte
            array, they will be included in the transformation.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThan(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator&lt;().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. If any NUL characters ('\0') are embedded in the byte
            array, they will be included in the transformation.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThan(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator&gt;().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. If any NUL characters ('\0') are embedded in the byte
            array, they will be included in the transformation.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_LessThanOrEqual(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator&lt;=().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. If any NUL characters ('\0') are embedded in the byte
            array, they will be included in the transformation.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_GreaterThanOrEqual(QtCore.QString,QtCore.QByteArray)">
            <summary>
            <para>This function overloads operator&gt;=().</para>
            <para>The other byte array is converted to a QString using the
            fromUtf8() function. If any NUL characters ('\0') are embedded in the byte
            array, they will be included in the transformation.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Begin">
            <summary>
            <para>Returns an STL-style iterator pointing to the first character in
            the string.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.End">
            <summary>
            <para>Returns an STL-style iterator pointing to the imaginary character
            after the last character in the string.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Push_back(QtCore.QChar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends the given ch character onto the end of this
            string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Push_back(QtCore.QString)">
            <summary>
            <para>This function is provided for STL compatibility, appending the
            given other string onto the end of this string. It is equivalent to
            append(other).</para>
            <para>See also append().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Push_front(QtCore.QChar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Prepends the given ch character to the beginning of this
            string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Push_front(QtCore.QString)">
            <summary>
            <para>This function is provided for STL compatibility, prepending the
            given other string to the beginning of this string. It is equivalent to
            prepend(other).</para>
            <para>See also prepend().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int64,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt64,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The a argument is expressed in the given base, which is 10 by
            default and must be between 2 and 36.</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale. The default locale is determined from the system's locale
            settings at application startup. It can be changed using
            QLocale::setDefault(). The 'L' flag is ignored if base is not 10.</para>
            <para>QString str;</para>
            <para>str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)</para>
            <para>        .arg(63, 0, 16);</para>
            <para>// str == &quot;Decimal 63 is 3f in hexadecimal&quot;</para>
            <para></para>
            <para>QLocale::setDefault(QLocale(QLocale::English,
            QLocale::UnitedStates));</para>
            <para>str = QString(&quot;%1 %L2 %L3&quot;)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345, 0, 16);</para>
            <para>// str == &quot;12345 12,345 3039&quot;</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt32,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a to a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg1(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The a argument is expressed in base base, which is 10 by default
            and must be between 2 and 36. For bases other than 10, a is treated as an
            unsigned integer.</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale, set by QLocale::setDefault(). If no default locale was
            specified, the &quot;C&quot; locale is used. The 'L' flag is ignored if
            base is not 10.</para>
            <para>QString str;</para>
            <para>str = QString(&quot;Decimal 63 is %1 in hexadecimal&quot;)</para>
            <para>        .arg(63, 0, 16);</para>
            <para>// str == &quot;Decimal 63 is 3f in hexadecimal&quot;</para>
            <para></para>
            <para>QLocale::setDefault(QLocale(QLocale::English,
            QLocale::UnitedStates));</para>
            <para>str = QString(&quot;%1 %L2 %L3&quot;)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345)</para>
            <para>        .arg(12345, 0, 16);</para>
            <para>// str == &quot;12345 12,345 3039&quot;</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg1(System.UInt32,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Int16,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.UInt16,System.Int32,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>The base argument specifies the base to use when converting the
            integer a into a string. The base must be between 2 and 36, with 8 giving
            octal, 10 decimal, and 16 hexadecimal numbers.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), the locale's zero is
            used. For negative numbers, zero padding might appear before the minus
            sign.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Double,System.Int32,System.Char,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>Argument a is formatted according to the specified format and
            precision. See Argument Formats for details.</para>
            <para>fieldWidth specifies the minimum amount of space that a is padded
            to and filled with the character fillChar. A positive value produces
            right-aligned text; a negative value produces left-aligned text.</para>
            <para>double d = 12.34;</para>
            <para>QString str = QString(&quot;delta: %1&quot;).arg(d, 0, 'E',
            3);</para>
            <para>// str == &quot;delta: 1.234E+01&quot;</para>
            <para>The '%' can be followed by an 'L', in which case the sequence is
            replaced with a localized representation of a. The conversion uses the
            default locale, set by QLocale::setDefault(). If no default locale was
            specified, the &quot;C&quot; locale is used.</para>
            <para>If fillChar is '0' (the number 0, ASCII 48), this function will
            use the locale's zero to pad. For negative numbers, the zero padding will
            probably appear before the minus sign.</para>
            <para>See also QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(System.Char,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            <para>The a argument is interpreted as a Latin-1 character.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QChar,System.Int32)">
            <summary>
            <para>This function overloads arg().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Arg(QtCore.QString,System.Int32)">
            <summary>
            <para>Returns a copy of this string with the lowest numbered place
            marker replaced by string a, i.e., %1, %2, ..., %99.</para>
            <para>fieldWidth specifies the minimum amount of space that argument a
            shall occupy. If a requires less space than fieldWidth, it is padded to
            fieldWidth with character fillChar. A positive fieldWidth produces
            right-aligned text. A negative fieldWidth produces left-aligned
            text.</para>
            <para>This example shows how we might create a status string for
            reporting progress while processing a list of files:</para>
            <para>QString i;           // current file's number</para>
            <para>QString total;       // number of files to process</para>
            <para>QString fileName;    // current file's name</para>
            <para></para>
            <para>QString status = QString(&quot;Processing file %1 of %2:
            %3&quot;)</para>
            <para>                .arg(i).arg(total).arg(fileName);</para>
            <para>First, arg(i) replaces %1. Then arg(total) replaces %2. Finally,
            arg(fileName) replaces %3.</para>
            <para>One advantage of using arg() over asprintf() is that the order of
            the numbered place markers can change, if the application's strings are
            translated into other languages, but each arg() will still replace the
            lowest numbered unreplaced place marker, no matter where it appears. Also,
            if place marker %i appears more than once in the string, the arg() replaces
            all of them.</para>
            <para>If there is no unreplaced place marker remaining, a warning
            message is output and the result is undefined. Place marker numbers must be
            in the range 1 to 99.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LeftJustified(System.Int32)">
            <summary>
            <para>Returns a string of size width that contains this string padded
            by the fill character.</para>
            <para>If truncate is false and the size() of the string is more than
            width, then the returned string is a copy of the string.</para>
            <para>QString s = &quot;apple&quot;;</para>
            <para>QString t = s.leftJustified(8, '.');    // t ==
            &quot;apple...&quot;</para>
            <para>If truncate is true and the size() of the string is more than
            width, then any characters in a copy of the string after position width are
            removed, and the copy is returned.</para>
            <para>QString str = &quot;Pineapple&quot;;</para>
            <para>str = str.leftJustified(5, '.', true);    // str ==
            &quot;Pinea&quot;</para>
            <para>See also rightJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.RightJustified(System.Int32)">
            <summary>
            <para>Returns a string of size() width that contains the fill character
            followed by the string. For example:</para>
            <para>QString s = &quot;apple&quot;;</para>
            <para>QString t = s.rightJustified(8, '.');    // t ==
            &quot;...apple&quot;</para>
            <para>If truncate is false and the size() of the string is more than
            width, then the returned string is a copy of the string.</para>
            <para>If truncate is true and the size() of the string is more than
            width, then the resulting string is truncated at position width.</para>
            <para>QString str = &quot;Pineapple&quot;;</para>
            <para>str = str.rightJustified(5, '.', true);    // str ==
            &quot;Pinea&quot;</para>
            <para>See also leftJustified().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToShort">
            <summary>
            <para>Returns the string converted to a short using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toShort()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>short hex = str.toShort(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>short dec = str.toShort(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>See also number(), toUShort(), toInt(), and
            QLocale::toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUShort">
            <summary>
            <para>Returns the string converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUShort()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>ushort hex = str.toUShort(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>ushort dec = str.toUShort(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toShort(), and QLocale::toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToInt">
            <summary>
            <para>Returns the string converted to an int using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toInt()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para>int hex = str.toInt(&amp;ok, 16);       // hex == 255, ok ==
            true</para>
            <para>int dec = str.toInt(&amp;ok, 10);       // dec == 0, ok ==
            false</para>
            <para>See also number(), toUInt(), toDouble(), and
            QLocale::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToUInt">
            <summary>
            <para>Returns the string converted to an unsigned int using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUInt()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>uint hex = str.toUInt(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>uint dec = str.toUInt(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toInt(), and QLocale::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLong">
            <summary>
            <para>Returns the string converted to a long using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>long hex = str.toLong(&amp;ok, 16);     // hex == 255, ok ==
            true</para>
            <para>long dec = str.toLong(&amp;ok, 10);     // dec == 0, ok ==
            false</para>
            <para>See also number(), toULong(), toInt(), and
            QLocale::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToULong">
            <summary>
            <para>Returns the string converted to an unsigned long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>ulong hex = str.toULong(&amp;ok, 16);   // hex == 255, ok ==
            true</para>
            <para>ulong dec = str.toULong(&amp;ok, 10);   // dec == 0, ok ==
            false</para>
            <para>See also number() and QLocale::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToLongLong">
            <summary>
            <para>Returns the string converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>qint64 hex = str.toLongLong(&amp;ok, 16);      // hex == 255, ok
            == true</para>
            <para>qint64 dec = str.toLongLong(&amp;ok, 10);      // dec == 0, ok ==
            false</para>
            <para>See also number(), toULongLong(), toInt(), and
            QLocale::toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToULongLong">
            <summary>
            <para>Returns the string converted to an unsigned long long using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>Example:</para>
            <para>QString str = &quot;FF&quot;;</para>
            <para>bool ok;</para>
            <para></para>
            <para>quint64 hex = str.toULongLong(&amp;ok, 16);    // hex == 255, ok
            == true</para>
            <para>quint64 dec = str.toULongLong(&amp;ok, 10);    // dec == 0, ok ==
            false</para>
            <para>See also number(), toLongLong(), and
            QLocale::toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToFloat">
            <summary>
            <para>Returns the string converted to a float value.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true. Returns 0.0 if the conversion fails.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toFloat()</para>
            <para>Example:</para>
            <para>QString str1 = &quot;1234.56&quot;;</para>
            <para>str1.toFloat();             // returns 1234.56</para>
            <para></para>
            <para>bool ok;</para>
            <para>QString str2 = &quot;R2D2&quot;;</para>
            <para>str2.toFloat(&amp;ok);          // returns 0.0, sets ok to
            false</para>
            <para>See also number(), toDouble(), toInt(), and
            QLocale::toFloat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.ToDouble">
            <summary>
            <para>Returns the string converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>QString str = &quot;1234.56&quot;;</para>
            <para>double val = str.toDouble();   // val == 1234.56</para>
            <para>Warning: The QString content may only contain valid numerical
            characters which includes the plus/minus sign, the characters g and e used
            in scientific notation, and the decimal point. Including the unit or
            additional characters leads to a conversion error.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>d = QString( &quot;1234.56e-02&quot; ).toDouble(&amp;ok); // ok
            == true, d == 12.3456</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toDouble()</para>
            <para>d = QString( &quot;1234,56&quot; ).toDouble(&amp;ok); // ok ==
            false</para>
            <para>d = QString( &quot;1234.56&quot; ).toDouble(&amp;ok); // ok ==
            true, d == 1234.56</para>
            <para>For historical reasons, this function does not handle thousands
            group separators. If you need to convert such numbers, use
            QLocale::toDouble().</para>
            <para>d = QString( &quot;1,234,567.89&quot; ).toDouble(&amp;ok); // ok
            == false</para>
            <para>d = QString( &quot;1234567.89&quot; ).toDouble(&amp;ok); // ok ==
            true</para>
            <para>See also number(), QLocale::setDefault(), QLocale::toDouble(),
            and trimmed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Asprintf(System.String)">
            <summary>
            <para>Safely builds a formatted string from the format string cformat
            and an arbitrary list of arguments.</para>
            <para>The format string supports the conversion specifiers, length
            modifiers, and flags provided by printf() in the standard C++ library. The
            cformat string and %s arguments must be UTF-8 encoded.</para>
            <para>Note: The %lc escape sequence expects a unicode character of type
            char16_t, or ushort (as returned by QChar::unicode()). The %ls escape
            sequence expects a pointer to a zero-terminated array of unicode characters
            of type char16_t, or ushort (as returned by QString::utf16()). This is at
            odds with the printf() in the standard C++ library, which defines %lc to
            print a wchar_t and %ls to print a wchar_t*, and might also produce
            compiler warnings on platforms where the size of wchar_t is not 16
            bits.</para>
            <para>Warning: We do not recommend using QString::asprintf() in new Qt
            code. Instead, consider using QTextStream or arg(), both of which support
            Unicode strings seamlessly and are type-safe. Here's an example that uses
            QTextStream:</para>
            <para>QString result;</para>
            <para>QTextStream(&amp;result) &lt;&lt; &quot;pi = &quot; &lt;&lt;
            3.14;</para>
            <para>// result == &quot;pi = 3.14&quot;</para>
            <para>For translations, especially if the strings contains more than
            one escape sequence, you should consider using the arg() function instead.
            This allows the order of the replacements to be controlled by the
            translator.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also arg().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromLatin1(System.String,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the Latin-1 string str.</para>
            <para>If size is -1 (default), it is taken to be strlen(str).</para>
            <para>See also toLatin1(), fromUtf8(), and fromLocal8Bit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUtf8(System.String,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size bytes of the
            UTF-8 string str.</para>
            <para>If size is -1 (default), it is taken to be strlen(str).</para>
            <para>UTF-8 is a Unicode codec and can represent all characters in a
            Unicode string like QString. However, invalid sequences are possible with
            UTF-8 and, if any such are found, they will be replaced with one or more
            &quot;replacement characters&quot;, or suppressed. These include
            non-Unicode sequences, non-characters, overlong sequences or surrogate
            codepoints encoded into UTF-8.</para>
            <para>This function can be used to process incoming data incrementally
            as long as all UTF-8 characters are terminated within the incoming data.
            Any unterminated characters at the end of the string will be replaced or
            suppressed. In order to do stateful decoding, please use
            QTextDecoder.</para>
            <para>See also toUtf8(), fromLatin1(), and fromLocal8Bit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromLocal8Bit(System.String,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the 8-bit string str.</para>
            <para>If size is -1 (default), it is taken to be strlen(str).</para>
            <para>QTextCodec::codecForLocale() is used to perform the
            conversion.</para>
            <para>See also toLocal8Bit(), fromLatin1(), and fromUtf8().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromLatin1(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QString initialized with the Latin-1 string str.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUtf8(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QString initialized with the UTF-8 string str.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromLocal8Bit(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QString initialized with the 8-bit string str.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUtf16(System.UInt16@,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the Unicode string unicode (ISO-10646-UTF-16 encoded).</para>
            <para>If size is -1 (default), unicode must be terminated with a
            0.</para>
            <para>This function checks for a Byte Order Mark (BOM). If it is
            missing, host byte order is assumed.</para>
            <para>This function is slow compared to the other Unicode conversions.
            Use QString(const QChar *, int) or QString(const QChar *) if
            possible.</para>
            <para>QString makes a deep copy of the Unicode data.</para>
            <para>See also utf16(), setUtf16(), and fromStdU16String().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUcs4(System.UInt32@,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the Unicode string unicode (ISO-10646-UCS-4 encoded).</para>
            <para>If size is -1 (default), unicode must be terminated with a
            0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toUcs4(), fromUtf16(), utf16(), setUtf16(),
            fromWCharArray(), and fromStdU32String().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromRawData(QtCore.QChar,System.Int32)">
            <summary>
            <para>Constructs a QString that uses the first size Unicode characters
            in the array unicode. The data in unicode is not copied. The caller must be
            able to guarantee that unicode will not be deleted or modified as long as
            the QString (or an unmodified copy of it) exists.</para>
            <para>Any attempts to modify the QString or copies of it will cause it
            to create a deep copy of the data, ensuring that the raw data isn't
            modified.</para>
            <para>Here's an example of how we can use a QRegExp on raw data in
            memory without requiring to copy the data into a QString:</para>
            <para>QRegExp pattern;</para>
            <para>static const QChar unicode[] = {</para>
            <para>        0x005A, 0x007F, 0x00A4, 0x0060,</para>
            <para>        0x1009, 0x0020, 0x0020};</para>
            <para>int size = sizeof(unicode) / sizeof(QChar);</para>
            <para></para>
            <para>QString str = QString::fromRawData(unicode, size);</para>
            <para>if (str.contains(QRegExp(pattern))) {</para>
            <para>    // ...</para>
            <para>}</para>
            <para>Warning: A string created with fromRawData() is not
            '\0'-terminated, unless the raw data contains a '\0' character at position
            size. This means unicode() will not return a '\0'-terminated string
            (although utf16() does, at the cost of copying the raw data).</para>
            <para>See also fromUtf16() and setRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUtf16(System.Void**,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the Unicode string unicode (ISO-10646-UTF-16 encoded).</para>
            <para>If size is -1 (default), unicode must be terminated with a
            0.</para>
            <para>This function checks for a Byte Order Mark (BOM). If it is
            missing, host byte order is assumed.</para>
            <para>This function is slow compared to the other Unicode conversions.
            Use QString(const QChar *, int) or QString(const QChar *) if
            possible.</para>
            <para>QString makes a deep copy of the Unicode data.</para>
            <para>See also utf16(), setUtf16(), and fromStdU16String().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromUcs4(System.Void**,System.Int32)">
            <summary>
            <para>Returns a QString initialized with the first size characters of
            the Unicode string unicode (ISO-10646-UCS-4 encoded).</para>
            <para>If size is -1 (default), unicode must be terminated with a
            0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toUcs4(), fromUtf16(), utf16(), setUtf16(),
            fromWCharArray(), and fromStdU32String().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.FromWCharArray(System.String,System.Int32)">
            <summary>
            <para>Returns a copy of the string, where the encoding of string
            depends on the size of wchar. If wchar is 4 bytes, the string is
            interpreted as UCS-4, if wchar is 2 bytes it is interpreted as
            UTF-16.</para>
            <para>If size is -1 (default), the string has to be 0
            terminated.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also fromUtf16(), fromLatin1(), fromLocal8Bit(), fromUtf8(),
            fromUcs4(), and fromStdWString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QString,QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Compares s1 with s2 and returns an integer less than, equal to,
            or greater than zero if s1 is less than, equal to, or greater than
            s2.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>Case sensitive comparison is based exclusively on the numeric
            Unicode values of the characters and is very fast, but is not what a human
            would expect. Consider sorting user-visible strings with
            localeAwareCompare().</para>
            <para>int x = QString::compare(&quot;aUtO&quot;, &quot;AuTo&quot;,
            Qt::CaseInsensitive);  // x == 0</para>
            <para>int y = QString::compare(&quot;auto&quot;, &quot;Car&quot;,
            Qt::CaseSensitive);     // y &gt; 0</para>
            <para>int z = QString::compare(&quot;auto&quot;, &quot;Car&quot;,
            Qt::CaseInsensitive);   // z &lt; 0</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also operator==(), operator&lt;(), and operator&gt;().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QString,QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            <para>Performs a comparison of s1 and s2, using the case sensitivity
            setting cs.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QLatin1String,QtCore.QString,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            <para>Performs a comparison of s1 and s2, using the case sensitivity
            setting cs.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Compare(QtCore.QString,QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads compare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LocaleAwareCompare(QtCore.QString,QtCore.QString)">
            <summary>
            <para>Compares s1 with s2 and returns an integer less than, equal to,
            or greater than zero if s1 is less than, equal to, or greater than
            s2.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>On OS X and iOS this function compares according the &quot;Order
            for sorted lists&quot; setting in the International preferences
            panel.</para>
            <para>See also compare() and QLocale.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.LocaleAwareCompare(QtCore.QString,QtCore.QStringRef)">
            <summary>
            <para>This function overloads localeAwareCompare().</para>
            <para>Compares s1 with s2 and returns an integer less than, equal to,
            or greater than zero if s1 is less than, equal to, or greater than
            s2.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number1(System.Int32,System.Int32)">
            <summary>
            <para>Returns a string equivalent of the number n according to the
            specified base.</para>
            <para>The base is 10 by default and must be between 2 and 36. For bases
            other than 10, n is treated as an unsigned integer.</para>
            <para>The formatting always uses QLocale::C, i.e.,
            English/UnitedStates. To get a localized string representation of a number,
            use QLocale::toString() with the appropriate locale.</para>
            <para>long a = 63;</para>
            <para>QString s = QString::number(a, 16);             // s ==
            &quot;3f&quot;</para>
            <para>QString t = QString::number(a, 16).toUpper();     // t ==
            &quot;3F&quot;</para>
            <para>See also setNum().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number1(System.UInt32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number(System.Int64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number(System.UInt64,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.Number(System.Double,System.Char,System.Int32)">
            <summary>
            <para>Returns a string equivalent of the number n, formatted according
            to the specified format and precision. See Argument Formats for
            details.</para>
            <para>Unlike QLocale::toString(), this function does not honor the
            user's locale settings.</para>
            <para>See also setNum() and QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Addition(QtCore.QString,QtCore.QString)">
            <summary>
            <para>Returns a string which is the result of concatenating s1 and
            s2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Addition(System.Char,QtCore.QString)">
            <summary>
            <para>Returns a string which is the result of concatenating the
            character ch and the string s.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Addition(QtCore.QString,System.Char)">
            <summary>
            <para>Returns a string which is the result of concatenating the string
            s and the character ch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QString.op_Equality(QtCore.QString,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string s1 is lexically equal to string reference
            s2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Item(System.Int32)">
            <summary>
            <para>Returns the character at the specified position in the string as
            a modifiable reference.</para>
            <para>Example:</para>
            <para>QString str;</para>
            <para></para>
            <para>if (str[0] == QChar('?'))</para>
            <para>    str[0] = QChar('_');</para>
            <para>The return value is of type QCharRef, a helper class for QString.
            When you get an object of type QCharRef, you can use it as if it were a
            QChar &amp;. If you assign to it, the assignment will apply to the
            character in the QString from which you got the reference.</para>
            <para>See also at().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Item(System.UInt32)">
            <summary>
            <para>This function overloads operator[]().</para>
            <para>Returns the character at the specified position in the string as
            a modifiable reference.</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Size">
            <summary>
            <para>Returns the number of characters in this string.</para>
            <para>The last character in the string is at position size() - 1. In
            addition, QString ensures that the character at position size() is always
            '\0', so that you can use the return value of data() and constData() as
            arguments to functions that expect '\0'-terminated strings.</para>
            <para>Example:</para>
            <para>QString str = &quot;World&quot;;</para>
            <para>int n = str.size();         // n == 5</para>
            <para>str.data()[0];              // returns 'W'</para>
            <para>str.data()[4];              // returns 'd'</para>
            <para>str.data()[5];              // returns '\0'</para>
            <para>See also isEmpty() and resize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Length">
            <summary>
            <para>Returns the number of characters in this string. Equivalent to
            size().</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.IsEmpty">
            <summary>
            <para>Returns true if the string has no characters; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>QString().isEmpty();            // returns true</para>
            <para>QString(&quot;&quot;).isEmpty();          // returns true</para>
            <para>QString(&quot;x&quot;).isEmpty();         // returns false</para>
            <para>QString(&quot;abc&quot;).isEmpty();       // returns false</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Capacity">
            <summary>
            <para>Returns the maximum number of characters that can be stored in
            the string without forcing a reallocation.</para>
            <para>The sole purpose of this function is to provide a means of fine
            tuning QString's memory usage. In general, you will rarely ever need to
            call this function. If you want to know how many characters are in the
            string, call size().</para>
            <para>See also reserve() and squeeze().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Unicode">
            <summary>
            <para>Returns a '\0'-terminated Unicode representation of the string.
            The result remains valid until the string is modified.</para>
            <para>See also setUnicode() and utf16().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Data">
            <summary>
            <para>Returns a pointer to the data stored in the QString. The pointer
            can be used to access and modify the characters that compose the string.
            For convenience, the data is '\0'-terminated.</para>
            <para>Example:</para>
            <para>QString str = &quot;Hello world&quot;;</para>
            <para>QChar *data = str.data();</para>
            <para>while (!data-&gt;isNull()) {</para>
            <para>    qDebug() &lt;&lt; data-&gt;unicode();</para>
            <para>    ++data;</para>
            <para>}</para>
            <para>Note that the pointer remains valid only as long as the string is
            not modified by other means. For read-only access, constData() is faster
            because it never causes a deep copy to occur.</para>
            <para>See also constData() and operator[]().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.ConstData">
            <summary>
            <para>Returns a pointer to the data stored in the QString. The pointer
            can be used to access the characters that compose the string. For
            convenience, the data is '\0'-terminated.</para>
            <para>Note that the pointer remains valid only as long as the string is
            not modified.</para>
            <para>See also data() and operator[]().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Trimmed">
            <summary>
            <para>Returns a string that has whitespace removed from the start and
            the end.</para>
            <para>Whitespace means any character for which QChar::isSpace() returns
            true. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and
            ' '.</para>
            <para>Example:</para>
            <para>QString str = &quot;  lots\t of\nwhitespace\r\n &quot;;</para>
            <para>str = str.trimmed();</para>
            <para>// str == &quot;lots\t of\nwhitespace&quot;</para>
            <para>Unlike simplified(), trimmed() leaves internal whitespace
            alone.</para>
            <para>See also simplified().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Simplified">
            <summary>
            <para>Returns a string that has whitespace removed from the start and
            the end, and that has each sequence of internal whitespace replaced with a
            single space.</para>
            <para>Whitespace means any character for which QChar::isSpace() returns
            true. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and
            ' '.</para>
            <para>Example:</para>
            <para>QString str = &quot;  lots\t of\nwhitespace\r\n &quot;;</para>
            <para>str = str.simplified();</para>
            <para>// str == &quot;lots of whitespace&quot;;</para>
            <para>See also trimmed().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Utf16">
            <summary>
            <para>Returns the QString as a '\0'-terminated array of unsigned
            shorts. The result remains valid until the string is modified.</para>
            <para>The returned string is in host byte order.</para>
            <para>See also setUtf16() and unicode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Cbegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first
            character in the string.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also begin() and cend().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.ConstBegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first
            character in the string.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.Cend">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary
            character after the last character in the list.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also cbegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.ConstEnd">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary
            character after the last character in the list.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.IsNull">
            <summary>
            <para>Returns true if this string is null; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>QString().isNull();             // returns true</para>
            <para>QString(&quot;&quot;).isNull();           // returns false</para>
            <para>QString(&quot;abc&quot;).isNull();        // returns false</para>
            <para>Qt makes a distinction between null strings and empty strings for
            historical reasons. For most applications, what matters is whether or not a
            string contains any data, and this can be determined using the isEmpty()
            function.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QString.IsRightToLeft">
            <summary>
            <para>Returns true if the string is read right to left.</para>
            </summary>
        </member>
        <member name="T:QtCore.QString.SplitBehavior">
            <summary>
            <para>This enum specifies how the split() function should behave with
            respect to empty strings.</para>
            <para>See also split().</para>
            </summary>
        </member>
        <member name="F:QtCore.QString.SplitBehavior.KeepEmptyParts">
            <summary>If a field is empty, keep it in the result.</summary>
        </member>
        <member name="F:QtCore.QString.SplitBehavior.SkipEmptyParts">
            <summary>If a field is empty, don't include it in the result.</summary>
        </member>
        <member name="T:QtCore.QString.SectionFlag">
            <summary>
            <para>This enum specifies flags that can be used to affect various
            aspects of the section() function's behavior with respect to separators and
            empty fields.</para>
            <para>The SectionFlags type is a typedef for QFlags&lt;SectionFlag&gt;.
            It stores an OR combination of SectionFlag values.</para>
            <para>See also section().</para>
            </summary>
        </member>
        <member name="F:QtCore.QString.SectionFlag.SectionDefault">
            <summary>Empty fields are counted, leading and trailing separators are not included, and the separator is compared case sensitively.</summary>
        </member>
        <member name="F:QtCore.QString.SectionFlag.SectionSkipEmpty">
            <summary>Treat empty fields as if they don't exist, i.e. they are not considered as far as start and end are concerned.</summary>
        </member>
        <member name="F:QtCore.QString.SectionFlag.SectionIncludeLeadingSep">
            <summary>Include the leading separator (if any) in the result string.</summary>
        </member>
        <member name="F:QtCore.QString.SectionFlag.SectionIncludeTrailingSep">
            <summary>Include the trailing separator (if any) in the result string.</summary>
        </member>
        <member name="F:QtCore.QString.SectionFlag.SectionCaseInsensitiveSeps">
            <summary>Compare the separator case-insensitively.</summary>
        </member>
        <member name="T:QtCore.QString.NormalizationForm">
            <summary>
            <para>This enum describes the various normalized forms of Unicode
            text.</para>
            <para>See also normalized() and Unicode Standard Annex #15.</para>
            </summary>
        </member>
        <member name="F:QtCore.QString.NormalizationForm.NormalizationForm_D">
            <summary>Canonical Decomposition</summary>
        </member>
        <member name="F:QtCore.QString.NormalizationForm.NormalizationForm_C">
            <summary>Canonical Decomposition followed by Canonical Composition</summary>
        </member>
        <member name="F:QtCore.QString.NormalizationForm.NormalizationForm_KD">
            <summary>Compatibility Decomposition</summary>
        </member>
        <member name="F:QtCore.QString.NormalizationForm.NormalizationForm_KC">
            <summary>Compatibility Decomposition followed by Canonical Composition</summary>
        </member>
        <member name="T:QtCore.QStringRef">
            <summary>
            <para>The QStringRef class provides a thin wrapper around QString
            substrings.</para>
            </summary>
            <remarks>
            <para>QStringRef provides a read-only subset of the QString API.</para>
            <para>A string reference explicitly references a portion of a string()
            with a given size(), starting at a specific position(). Calling toString()
            returns a copy of the data as a real QString instance.</para>
            <para>This class is designed to improve the performance of substring
            handling when manipulating substrings obtained from existing QString
            instances. QStringRef avoids the memory allocation and reference counting
            overhead of a standard QString by simply referencing a part of the original
            string. This can prove to be advantageous in low level code, such as that
            used in a parser, at the expense of potentially more complex code.</para>
            <para>For most users, there are no semantic benefits to using
            QStringRef instead of QString since QStringRef requires attention to be
            paid to memory management issues, potentially making code more complex to
            write and maintain.</para>
            <para>Warning: A QStringRef is only valid as long as the referenced
            string exists. If the original string is deleted, the string reference
            points to an invalid memory location.</para>
            <para>We suggest that you only use this class in stable code where
            profiling has clearly identified that performance improvements can be made
            by replacing standard string operations with the optimized substring
            handling provided by this class.</para>
            <para></para>
            <para>See also Implicitly Shared Classes.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStringRef.#ctor">
            <summary>
            <para>Constructs an empty string reference.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a string reference to the range of characters in the
            given string specified by the starting position and length in
            characters.</para>
            <para>Warning: This function exists to improve performance as much as
            possible, and performs no bounds checking. For program correctness,
            position and length must describe a valid substring of string.</para>
            <para>This means that the starting position must be positive or 0 and
            smaller than string's length, and length must be positive or 0 but smaller
            than the string's length minus the starting position; i.e, 0 &lt;= position
            &lt; string-&gt;length() and 0 &lt;= length &lt;= string-&gt;length() -
            position must both be satisfied.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.#ctor(System.String)">
            <summary>
            <para>Constructs a string reference to the given string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.#ctor(QtCore.QStringRef)">
            <summary>
            <para>Constructs a copy of the other string reference.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Count">
            <summary>
            <para>Returns the number of characters referred to by the string
            reference. Equivalent to size() and length().</para>
            <para>See also position() and string().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.IndexOf(System.String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the first occurrence of the string
            str in this string reference, searching forward from index position from.
            Returns -1 if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>If from is -1, the search starts at the last character; if it is
            -2, at the next to last character and so on.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::indexOf(), lastIndexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.IndexOf(QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first occurrence of the
            character ch in the string reference, searching forward from index position
            from. Returns -1 if ch could not be found.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::indexOf(), lastIndexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.IndexOf(QtCore.QLatin1String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the first occurrence of the string
            str in this string reference, searching forward from index position from.
            Returns -1 if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>If from is -1, the search starts at the last character; if it is
            -2, at the next to last character and so on.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::indexOf(), lastIndexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.IndexOf(QtCore.QStringRef,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first occurrence of the string
            reference str in this string reference, searching forward from index
            position from. Returns -1 if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::indexOf(), lastIndexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LastIndexOf(System.String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the index position of the last occurrence of the string
            str in this string reference, searching backward from index position from.
            If from is -1 (default), the search starts at the last character; if from
            is -2, at the next to last character and so on. Returns -1 if str is not
            found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::lastIndexOf(), indexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LastIndexOf(QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the
            character ch, searching backward from position from.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::lastIndexOf(), indexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LastIndexOf(QtCore.QLatin1String,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the string
            str in this string reference, searching backward from index position from.
            If from is -1 (default), the search starts at the last character; if from
            is -2, at the next to last character and so on. Returns -1 if str is not
            found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::lastIndexOf(), indexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LastIndexOf(QtCore.QStringRef,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last occurrence of the string
            reference str in this string reference, searching backward from index
            position from. If from is -1 (default), the search starts at the last
            character; if from is -2, at the next to last character and so on. Returns
            -1 if str is not found.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::lastIndexOf(), indexOf(), contains(), and
            count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Contains(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if this string reference contains an occurrence of
            the string str; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Contains(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if this string contains an occurrence of the
            character ch; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Contains(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if this string reference contains an occurrence of
            the string str; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4,8.</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Contains(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads contains().</para>
            <para>Returns true if this string reference contains an occurrence of
            the string reference str; otherwise returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also indexOf() and count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Count(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns the number of (potentially overlapping) occurrences of
            the string str in this string reference.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::count(), contains(), and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Count(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of occurrences of the character ch in the
            string reference.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::count(), contains(), and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Count(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads count().</para>
            <para>Returns the number of (potentially overlapping) occurrences of
            the string reference str in this string reference.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::count(), contains(), and indexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Left(System.Int32)">
            <summary>
            <para>Returns a substring reference to the n leftmost characters of the
            string.</para>
            <para>If n is greater than size() or less than zero, a reference to the
            entire string is returned.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also right(), mid(), and startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Right(System.Int32)">
            <summary>
            <para>Returns a substring reference to the n rightmost characters of
            the string.</para>
            <para>If n is greater than size() or less than zero, a reference to the
            entire string is returned.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also left(), mid(), and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Mid(System.Int32,System.Int32)">
            <summary>
            <para>Returns a substring reference to n characters of this string,
            starting at the specified position.</para>
            <para>If the position exceeds the length of the string, a null
            reference is returned.</para>
            <para>If there are less than n characters available in the string,
            starting at the given position, or if n is -1 (default), the function
            returns all characters from the specified position onwards.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also left() and right().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.StartsWith(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the string reference starts with str; otherwise
            returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::startsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.StartsWith(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads startsWith().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::startsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.StartsWith(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads startsWith().</para>
            <para>Returns true if the string reference starts with ch; otherwise
            returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::startsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.StartsWith(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads startsWith().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::startsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.EndsWith(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the string reference ends with str; otherwise
            returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::endsWith() and startsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.EndsWith(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads endsWith().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::endsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.EndsWith(QtCore.QChar,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads endsWith().</para>
            <para>Returns true if the string reference ends with ch; otherwise
            returns false.</para>
            <para>If cs is Qt::CaseSensitive (default), the search is case
            sensitive; otherwise the search is case insensitive.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::endsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.EndsWith(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This function overloads endsWith().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::endsWith() and endsWith().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Begin">
            <summary>
            <para>Same as unicode().</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.End">
            <summary>
            <para>Returns a pointer to one character past the last one in this
            string. (It is the same as unicode() + size().)</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLatin1">
            <summary>
            <para>Returns a Latin-1 representation of the string as a
            QByteArray.</para>
            <para>The returned byte array is undefined if the string contains
            non-Latin1 characters. Those characters may be suppressed or replaced with
            a question mark.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also toUtf8(), toLocal8Bit(), and QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToUtf8">
            <summary>
            <para>Returns a UTF-8 representation of the string as a
            QByteArray.</para>
            <para>UTF-8 is a Unicode codec and can represent all characters in a
            Unicode string like QString.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also toLatin1(), toLocal8Bit(), and QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLocal8Bit">
            <summary>
            <para>Returns the local 8-bit representation of the string as a
            QByteArray. The returned byte array is undefined if the string contains
            characters not supported by the local 8-bit encoding.</para>
            <para>QTextCodec::codecForLocale() is used to perform the conversion
            from Unicode. If the locale encoding could not be determined, this function
            does the same as toLatin1().</para>
            <para>If this string contains any characters that cannot be encoded in
            the locale, the returned byte array is undefined. Those characters may be
            suppressed or replaced by another.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also toLatin1(), toUtf8(), and QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Clear">
            <summary>
            <para>Clears the contents of the string reference by making it null and
            empty.</para>
            <para>See also isEmpty() and isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToString">
            <summary>
            <para>Returns a copy of the string reference as a QString
            object.</para>
            <para>If the string reference is not a complete reference of the string
            (meaning that position() is 0 and size() equals string()-&gt;size()), this
            function will allocate a new string to return.</para>
            <para>See also string().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.AppendTo(System.String)">
            <summary>
            <para>Appends the string reference to string, and returns a new
            reference to the combined string data.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.At(System.Int32)">
            <summary>
            <para>Returns the character at the given index position in the string
            reference.</para>
            <para>The position must be a valid index position in the string (i.e.,
            0 &lt;= position &lt; size()).</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_Equality(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator==().</para>
            <para>The s byte array is converted to a QStringRef using the
            fromUtf8() function. This function stops conversion at the first NUL
            character found, or the end of the byte array.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically equal to the parameter
            string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_Inequality(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator!=().</para>
            <para>The s const char pointer is converted to a QStringRef using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is not lexically equal to the
            parameter string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_LessThan(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator&lt;().</para>
            <para>The s const char pointer is converted to a QStringRef using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically smaller than the
            parameter string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_LessThanOrEqual(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator&lt;=().</para>
            <para>The s const char pointer is converted to a QStringRef using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically smaller than or equal to
            the parameter string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_GreaterThan(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator&gt;().</para>
            <para>The s const char pointer is converted to a QStringRef using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically greater than the
            parameter string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_GreaterThanOrEqual(QtCore.QStringRef,System.String)">
            <summary>
            <para>This function overloads operator&gt;=().</para>
            <para>The s const char pointer is converted to a QStringRef using the
            fromUtf8() function.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications. This can be useful if you want to
            ensure that all user-visible strings go through QObject::tr(), for
            example.</para>
            <para>Returns true if this string is lexically greater than or equal to
            the parameter string s. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>Equivalent to compare(*this, other, cs).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QString::compare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>Equivalent to compare(*this, other, cs).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QString::compare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>Equivalent to compare(*this, other, cs).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QString::compare().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LocaleAwareCompare(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LocaleAwareCompare(QtCore.QStringRef)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares this string with the other string and returns an integer
            less than, equal to, or greater than zero if this string is less than,
            equal to, or greater than the other string.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a short using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toShort()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToUShort(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUShort()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an int using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toInt()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToUInt(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned int using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUInt()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a long using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToULong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toULong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToULongLong(System.Boolean@,System.Int32)">
            <summary>
            <para>Returns the string converted to an unsigned long long using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToFloat(System.Boolean@)">
            <summary>
            <para>Returns the string converted to a float value.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true. Returns 0.0 if the conversion fails.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toFloat()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toFloat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToDouble(System.Boolean@)">
            <summary>
            <para>Returns the string converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toDouble()</para>
            <para>For historic reasons, this function does not handle thousands
            group separators. If you need to convert such numbers, use
            QLocale::toDouble().</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToShort">
            <summary>
            <para>Returns the string converted to a short using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toShort()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToUShort">
            <summary>
            <para>Returns the string converted to an unsigned short using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUShort()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToInt">
            <summary>
            <para>Returns the string converted to an int using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toInt()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToUInt">
            <summary>
            <para>Returns the string converted to an unsigned int using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toUInt()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLong">
            <summary>
            <para>Returns the string converted to a long using base base, which is
            10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToULong">
            <summary>
            <para>Returns the string converted to an unsigned long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toULong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToLongLong">
            <summary>
            <para>Returns the string converted to a long long using base base,
            which is 10 by default and must be between 2 and 36, or 0. Returns 0 if the
            conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toLongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToULongLong">
            <summary>
            <para>Returns the string converted to an unsigned long long using base
            base, which is 10 by default and must be between 2 and 36, or 0. Returns 0
            if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>If base is 0, the C language convention is used: If the string
            begins with &quot;0x&quot;, base 16 is used; if the string begins with
            &quot;0&quot;, base 8 is used; otherwise, base 10 is used.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toULongLong()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToFloat">
            <summary>
            <para>Returns the string converted to a float value.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true. Returns 0.0 if the conversion fails.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toFloat()</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toFloat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.ToDouble">
            <summary>
            <para>Returns the string converted to a double value.</para>
            <para>Returns 0.0 if the conversion fails.</para>
            <para>If a conversion error occurs, *ok is set to false; otherwise *ok
            is set to true.</para>
            <para>The string conversion will always happen in the 'C' locale. For
            locale dependent conversion use QLocale::toDouble()</para>
            <para>For historic reasons, this function does not handle thousands
            group separators. If you need to convert such numbers, use
            QLocale::toDouble().</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(QtCore.QStringRef,System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Compares the string s1 with the string s2 and returns an integer
            less than, equal to, or greater than zero if s1 is less than, equal to, or
            greater than s2.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(QtCore.QStringRef,QtCore.QStringRef,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares the string s1 with the string s2 and returns an integer
            less than, equal to, or greater than zero if s1 is less than, equal to, or
            greater than s2.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.Compare(QtCore.QStringRef,QtCore.QLatin1String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares the string s1 with the string s2 and returns an integer
            less than, equal to, or greater than zero if s1 is less than, equal to, or
            greater than s2.</para>
            <para>If cs is Qt::CaseSensitive, the comparison is case sensitive;
            otherwise the comparison is case insensitive.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LocaleAwareCompare(QtCore.QStringRef,System.String)">
            <summary>
            <para>Compares s1 with s2 and returns an integer less than, equal to,
            or greater than zero if s1 is less than, equal to, or greater than
            s2.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>On OS X and iOS, this function compares according the &quot;Order
            for sorted lists&quot; setting in the International prefereces
            panel.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also compare() and QLocale.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.LocaleAwareCompare(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares s1 with s2 and returns an integer less than, equal to,
            or greater than zero if s1 is less than, equal to, or greater than
            s2.</para>
            <para>The comparison is performed in a locale- and also
            platform-dependent manner. Use this function to present sorted lists of
            strings to the user.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_Equality(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string reference s1 is lexically equal to string
            reference s2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_LessThan(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string reference s1 is lexically less than string
            reference s2; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings using the
            QString::localeAwareCompare() function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_GreaterThan(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string reference s1 is lexically greater than
            string reference s2; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings using the
            QString::localeAwareCompare() function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_LessThanOrEqual(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string reference s1 is lexically less than or
            equal to string reference s2; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings using the
            QString::localeAwareCompare() function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringRef.op_GreaterThanOrEqual(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>Returns true if string reference s1 is lexically greater than or
            equal to string reference s2; otherwise returns false.</para>
            <para>The comparison is based exclusively on the numeric Unicode values
            of the characters and is very fast, but is not what a human would expect.
            Consider sorting user-interface strings using the
            QString::localeAwareCompare() function.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.String">
            <summary>
            <para>Returns a pointer to the string referred to by the string
            reference, or 0 if it does not reference a string.</para>
            <para>See also unicode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Position">
            <summary>
            <para>Returns the starting position in the referenced string that is
            referred to by the string reference.</para>
            <para>See also size() and string().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Size">
            <summary>
            <para>Returns the number of characters referred to by the string
            reference. Equivalent to length() and count().</para>
            <para>See also position() and string().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Length">
            <summary>
            <para>Returns the number of characters referred to by the string
            reference. Equivalent to size() and count().</para>
            <para>See also position() and string().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Unicode">
            <summary>
            <para>Returns a Unicode representation of the string reference. Since
            the data stems directly from the referenced string, it is not
            null-terminated unless the string reference includes the string's null
            terminator.</para>
            <para>See also string().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Data">
            <summary>
            <para>Same as unicode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.ConstData">
            <summary>
            <para>Same as unicode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Cbegin">
            <summary>
            <para>Same as unicode().</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Cend">
            <summary>
            <para>Returns a pointer to one character past the last one in this
            string. (It is the same as unicode() + size().)</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.IsEmpty">
            <summary>
            <para>Returns true if the string reference has no characters; otherwise
            returns false.</para>
            <para>A string reference is empty if its size is zero.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.IsNull">
            <summary>
            <para>Returns true if string() returns a null pointer or a pointer to a
            null string; otherwise returns true.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringRef.Trimmed">
            <summary>
            <para>Returns a string that has whitespace removed from the start and
            the end.</para>
            <para>Whitespace means any character for which QChar::isSpace() returns
            true. This includes the ASCII characters '\t', '\n', '\v', '\f', '\r', and
            ' '.</para>
            <para>Unlike QString::simplified(), trimmed() leaves internal
            whitespace alone.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QString::trimmed().</para>
            </summary>
        </member>
        <member name="M:QtCore.qalgorithms.QPopulationCount(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.qalgorithms.QPopulationCount(System.Byte)">
            <summary>
            <para>Returns the number of bits set in v. This number is also called
            the Hamming Weight of v.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.qalgorithms.QPopulationCount(System.UInt16)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.qalgorithms.QPopulationCount(System.UInt64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtCore.QRegExp">
            <summary>
            <para>The QRegExp class provides pattern matching using regular
            expressions.</para>
            </summary>
            <remarks>
            <para>A regular expression, or &quot;regexp&quot;, is a pattern for
            matching substrings in a text. This is useful in many contexts,
            e.g.,</para>
            <para></para>
            <para> Validation	A regexp can test whether a substring meets some
            criteria, e.g. is an integer or contains no whitespace.</para>
            <para>Searching	A regexp provides more powerful pattern matching than
            simple substring matching, e.g., match one of the words mail, letter or
            correspondence, but none of the words email, mailman, mailer, letterbox,
            etc.</para>
            <para>Search and Replace	A regexp can replace all occurrences of a
            substring with a different substring, e.g., replace all occurrences of
            &amp; with &amp;amp; except where the &amp; is already followed by an
            amp;.</para>
            <para>String Splitting	A regexp can be used to identify where a string
            should be split apart, e.g. splitting tab-delimited strings.</para>
            <para></para>
            <para>A brief introduction to regexps is presented, a description of
            Qt's regexp language, some examples, and the function documentation itself.
            QRegExp is modeled on Perl's regexp language. It fully supports Unicode.
            QRegExp can also be used in a simpler, wildcard mode that is similar to the
            functionality found in command shells. The syntax rules used by QRegExp can
            be changed with setPatternSyntax(). In particular, the pattern syntax can
            be set to QRegExp::FixedString, which means the pattern to be matched is
            interpreted as a plain string, i.e., special characters (e.g., backslash)
            are not escaped.</para>
            <para>A good text on regexps is Mastering Regular Expressions (Third
            Edition) by Jeffrey E. F. Friedl, ISBN 0-596-52812-4.</para>
            <para></para>
            <para>Introduction</para>
            <para>Regexps are built up from expressions, quantifiers, and
            assertions. The simplest expression is a character, e.g. x or 5. An
            expression can also be a set of characters enclosed in square brackets.
            [ABCD] will match an A or a B or a C or a D. We can write this same
            expression as [A-D], and an expression to match any capital letter in the
            English alphabet is written as [A-Z].</para>
            <para>A quantifier specifies the number of occurrences of an expression
            that must be matched. x{1,1} means match one and only one x. x{1,5} means
            match a sequence of x characters that contains at least one x but no more
            than five.</para>
            <para>Note that in general regexps cannot be used to check for balanced
            brackets or tags. For example, a regexp can be written to match an opening
            html &lt;b&gt; and its closing &lt;/b&gt;, if the &lt;b&gt; tags are not
            nested, but if the &lt;b&gt; tags are nested, that same regexp will match
            an opening &lt;b&gt; tag with the wrong closing &lt;/b&gt;. For the
            fragment &lt;b&gt;bold &lt;b&gt;bolder&lt;/b&gt;&lt;/b&gt;, the first
            &lt;b&gt; would be matched with the first &lt;/b&gt;, which is not correct.
            However, it is possible to write a regexp that will match nested brackets
            or tags correctly, but only if the number of nesting levels is fixed and
            known. If the number of nesting levels is not fixed and known, it is
            impossible to write a regexp that will not fail.</para>
            <para>Suppose we want a regexp to match integers in the range 0 to 99.
            At least one digit is required, so we start with the expression [0-9]{1,1},
            which matches a single digit exactly once. This regexp matches integers in
            the range 0 to 9. To match integers up to 99, increase the maximum number
            of occurrences to 2, so the regexp becomes [0-9]{1,2}. This regexp
            satisfies the original requirement to match integers from 0 to 99, but it
            will also match integers that occur in the middle of strings. If we want
            the matched integer to be the whole string, we must use the anchor
            assertions, ^ (caret) and $ (dollar). When ^ is the first character in a
            regexp, it means the regexp must match from the beginning of the string.
            When $ is the last character of the regexp, it means the regexp must match
            to the end of the string. The regexp becomes ^[0-9]{1,2}$. Note that
            assertions, e.g. ^ and $, do not match characters but locations in the
            string.</para>
            <para>If you have seen regexps described elsewhere, they may have
            looked different from the ones shown here. This is because some sets of
            characters and some quantifiers are so common that they have been given
            special symbols to represent them. [0-9] can be replaced with the symbol
            \d. The quantifier to match exactly one occurrence, {1,1}, can be replaced
            with the expression itself, i.e. x{1,1} is the same as x. So our 0 to 99
            matcher could be written as ^\d{1,2}$. It can also be written ^\d\d{0,1}$,
            i.e. From the start of the string, match a digit, followed immediately by 0
            or 1 digits. In practice, it would be written as ^\d\d?$. The ? is
            shorthand for the quantifier {0,1}, i.e. 0 or 1 occurrences. ? makes an
            expression optional. The regexp ^\d\d?$ means From the beginning of the
            string, match one digit, followed immediately by 0 or 1 more digit,
            followed immediately by end of string.</para>
            <para>To write a regexp that matches one of the words 'mail' or
            'letter' or 'correspondence' but does not match words that contain these
            words, e.g., 'email', 'mailman', 'mailer', and 'letterbox', start with a
            regexp that matches 'mail'. Expressed fully, the regexp is
            m{1,1}a{1,1}i{1,1}l{1,1}, but because a character expression is
            automatically quantified by {1,1}, we can simplify the regexp to mail,
            i.e., an 'm' followed by an 'a' followed by an 'i' followed by an 'l'. Now
            we can use the vertical bar |, which means or, to include the other two
            words, so our regexp for matching any of the three words becomes
            mail|letter|correspondence. Match 'mail' or 'letter' or 'correspondence'.
            While this regexp will match one of the three words we want to match, it
            will also match words we don't want to match, e.g., 'email'. To prevent the
            regexp from matching unwanted words, we must tell it to begin and end the
            match at word boundaries. First we enclose our regexp in parentheses,
            (mail|letter|correspondence). Parentheses group expressions together, and
            they identify a part of the regexp that we wish to capture. Enclosing the
            expression in parentheses allows us to use it as a component in more
            complex regexps. It also allows us to examine which of the three words was
            actually matched. To force the match to begin and end on word boundaries,
            we enclose the regexp in \b word boundary assertions:
            \b(mail|letter|correspondence)\b. Now the regexp means: Match a word
            boundary, followed by the regexp in parentheses, followed by a word
            boundary. The \b assertion matches a position in the regexp, not a
            character. A word boundary is any non-word character, e.g., a space,
            newline, or the beginning or ending of a string.</para>
            <para>If we want to replace ampersand characters with the HTML entity
            &amp;amp;, the regexp to match is simply &amp;. But this regexp will also
            match ampersands that have already been converted to HTML entities. We want
            to replace only ampersands that are not already followed by amp;. For this,
            we need the negative lookahead assertion, (?!__). The regexp can then be
            written as &amp;(?!amp;), i.e. Match an ampersand that is not followed by
            amp;.</para>
            <para>If we want to count all the occurrences of 'Eric' and 'Eirik' in
            a string, two valid solutions are \b(Eric|Eirik)\b and \bEi?ri[ck]\b. The
            word boundary assertion '\b' is required to avoid matching words that
            contain either name, e.g. 'Ericsson'. Note that the second regexp matches
            more spellings than we want: 'Eric', 'Erik', 'Eiric' and 'Eirik'.</para>
            <para>Some of the examples discussed above are implemented in the code
            examples section.</para>
            <para></para>
            <para></para>
            <para>Characters and Abbreviations for Sets of Characters</para>
            <para></para>
            <para> ElementMeaning</para>
            <para>c	A character represents itself unless it has a special regexp
            meaning. e.g. c matches the character c.</para>
            <para>\c	A character that follows a backslash matches the character
            itself, except as specified below. e.g., To match a literal caret at the
            beginning of a string, write \^.</para>
            <para>\a	Matches the ASCII bell (BEL, 0x07).</para>
            <para>\f	Matches the ASCII form feed (FF, 0x0C).</para>
            <para>\n	Matches the ASCII line feed (LF, 0x0A, Unix newline).</para>
            <para>\r	Matches the ASCII carriage return (CR, 0x0D).</para>
            <para>\t	Matches the ASCII horizontal tab (HT, 0x09).</para>
            <para>\v	Matches the ASCII vertical tab (VT, 0x0B).</para>
            <para>\xhhhh	Matches the Unicode character corresponding to the
            hexadecimal number hhhh (between 0x0000 and 0xFFFF).</para>
            <para>\0ooo (i.e., \zero ooo)	matches the ASCII/Latin1 character for
            the octal number ooo (between 0 and 0377).</para>
            <para>. (dot)	Matches any character (including newline).</para>
            <para>\d	Matches a digit (QChar::isDigit()).</para>
            <para>\D	Matches a non-digit.</para>
            <para>\s	Matches a whitespace character (QChar::isSpace()).</para>
            <para>\S	Matches a non-whitespace character.</para>
            <para>\w	Matches a word character (QChar::isLetterOrNumber(),
            QChar::isMark(), or '_').</para>
            <para>\W	Matches a non-word character.</para>
            <para>\n	The n-th backreference, e.g. \1, \2, etc.</para>
            <para></para>
            <para>Note: The C++ compiler transforms backslashes in strings. To
            include a \ in a regexp, enter it twice, i.e. \\. To match the backslash
            character itself, enter it four times, i.e. \\\\.</para>
            <para></para>
            <para></para>
            <para>Sets of Characters</para>
            <para>Square brackets mean match any character contained in the square
            brackets. The character set abbreviations described above can appear in a
            character set in square brackets. Except for the character set
            abbreviations and the following two exceptions, characters do not have
            special meanings in square brackets.</para>
            <para></para>
            <para> ^	The caret negates the character set if it occurs as the first
            character (i.e. immediately after the opening square bracket). [abc]
            matches 'a' or 'b' or 'c', but [^abc] matches anything but 'a' or 'b' or
            'c'.</para>
            <para>-	The dash indicates a range of characters. [W-Z] matches 'W' or
            'X' or 'Y' or 'Z'.</para>
            <para></para>
            <para>Using the predefined character set abbreviations is more portable
            than using character ranges across platforms and languages. For example,
            [0-9] matches a digit in Western alphabets but \d matches a digit in any
            alphabet.</para>
            <para>Note: In other regexp documentation, sets of characters are often
            called &quot;character classes&quot;.</para>
            <para></para>
            <para></para>
            <para>Quantifiers</para>
            <para>By default, an expression is automatically quantified by {1,1},
            i.e. it should occur exactly once. In the following list, E stands for
            expression. An expression is a character, or an abbreviation for a set of
            characters, or a set of characters in square brackets, or an expression in
            parentheses.</para>
            <para></para>
            <para> E?	Matches zero or one occurrences of E. This quantifier means
            The previous expression is optional, because it will match whether or not
            the expression is found. E? is the same as E{0,1}. e.g., dents? matches
            'dent' or 'dents'.</para>
            <para>E+	Matches one or more occurrences of E. E+ is the same as E{1,}.
            e.g., 0+ matches '0', '00', '000', etc.</para>
            <para>E*	Matches zero or more occurrences of E. It is the same as
            E{0,}. The * quantifier is often used in error where + should be used. For
            example, if \s*$ is used in an expression to match strings that end in
            whitespace, it will match every string because \s*$ means Match zero or
            more whitespaces followed by end of string. The correct regexp to match
            strings that have at least one trailing whitespace character is
            \s+$.</para>
            <para>E{n}	Matches exactly n occurrences of E. E{n} is the same as
            repeating E n times. For example, x{5} is the same as xxxxx. It is also the
            same as E{n,n}, e.g. x{5,5}.</para>
            <para>E{n,}	Matches at least n occurrences of E.</para>
            <para>E{,m}	Matches at most m occurrences of E. E{,m} is the same as
            E{0,m}.</para>
            <para>E{n,m}	Matches at least n and at most m occurrences of E.</para>
            <para></para>
            <para>To apply a quantifier to more than just the preceding character,
            use parentheses to group characters together in an expression. For example,
            tag+ matches a 't' followed by an 'a' followed by at least one 'g', whereas
            (tag)+ matches at least one occurrence of 'tag'.</para>
            <para>Note: Quantifiers are normally &quot;greedy&quot;. They always
            match as much text as they can. For example, 0+ matches the first zero it
            finds and all the consecutive zeros after the first zero. Applied to
            '20005', it matches '20005'. Quantifiers can be made non-greedy, see
            setMinimal().</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Capturing Text</para>
            <para>Parentheses allow us to group elements together so that we can
            quantify and capture them. For example if we have the expression
            mail|letter|correspondence that matches a string we know that one of the
            words matched but not which one. Using parentheses allows us to
            &quot;capture&quot; whatever is matched within their bounds, so if we used
            (mail|letter|correspondence) and matched this regexp against the string
            &quot;I sent you some email&quot; we can use the cap() or capturedTexts()
            functions to extract the matched characters, in this case 'mail'.</para>
            <para>We can use captured text within the regexp itself. To refer to
            the captured text we use backreferences which are indexed from 1, the same
            as for cap(). For example we could search for duplicate words in a string
            using \b(\w+)\W+\1\b which means match a word boundary followed by one or
            more word characters followed by one or more non-word characters followed
            by the same text as the first parenthesized expression followed by a word
            boundary.</para>
            <para>If we want to use parentheses purely for grouping and not for
            capturing we can use the non-capturing syntax, e.g. (?:green|blue).
            Non-capturing parentheses begin '(?:' and end ')'. In this example we match
            either 'green' or 'blue' but we do not capture the match so we only know
            whether or not we matched but not which color we actually found. Using
            non-capturing parentheses is more efficient than using capturing
            parentheses since the regexp engine has to do less book-keeping.</para>
            <para>Both capturing and non-capturing parentheses may be
            nested.</para>
            <para></para>
            <para>For historical reasons, quantifiers (e.g. *) that apply to
            capturing parentheses are more &quot;greedy&quot; than other quantifiers.
            For example, a*(a*) will match &quot;aaa&quot; with cap(1) ==
            &quot;aaa&quot;. This behavior is different from what other regexp engines
            do (notably, Perl). To obtain a more intuitive capturing behavior, specify
            QRegExp::RegExp2 to the QRegExp constructor or call
            setPatternSyntax(QRegExp::RegExp2).</para>
            <para></para>
            <para>When the number of matches cannot be determined in advance, a
            common idiom is to use cap() in a loop. For example:</para>
            <para>QRegExp rx(&quot;(\\d+)&quot;);</para>
            <para>QString str = &quot;Offsets: 12 14 99 231 7&quot;;</para>
            <para>QStringList list;</para>
            <para>int pos = 0;</para>
            <para></para>
            <para>while ((pos = rx.indexIn(str, pos)) != -1) {</para>
            <para>    list &lt;&lt; rx.cap(1);</para>
            <para>    pos += rx.matchedLength();</para>
            <para>}</para>
            <para>// list: [&quot;12&quot;, &quot;14&quot;, &quot;99&quot;,
            &quot;231&quot;, &quot;7&quot;]</para>
            <para></para>
            <para></para>
            <para>Assertions</para>
            <para>Assertions make some statement about the text at the point where
            they occur in the regexp but they do not match any characters. In the
            following list E stands for any expression.</para>
            <para></para>
            <para> ^	The caret signifies the beginning of the string. If you wish
            to match a literal ^ you must escape it by writing \\^. For example,
            ^#include will only match strings which begin with the characters
            '#include'. (When the caret is the first character of a character set it
            has a special meaning, see Sets of Characters.)</para>
            <para>$	The dollar signifies the end of the string. For example \d\s*$
            will match strings which end with a digit optionally followed by
            whitespace. If you wish to match a literal $ you must escape it by writing
            \\$.</para>
            <para>\b	A word boundary. For example the regexp \bOK\b means match
            immediately after a word boundary (e.g. start of string or whitespace) the
            letter 'O' then the letter 'K' immediately before another word boundary
            (e.g. end of string or whitespace). But note that the assertion does not
            actually match any whitespace so if we write (\bOK\b) and we have a match
            it will only contain 'OK' even if the string is &quot;It's OK
            now&quot;.</para>
            <para>\B	A non-word boundary. This assertion is true wherever \b is
            false. For example if we searched for \Bon\B in &quot;Left on&quot; the
            match would fail (space and end of string aren't non-word boundaries), but
            it would match in &quot;tonne&quot;.</para>
            <para>(?=E)	Positive lookahead. This assertion is true if the
            expression matches at this point in the regexp. For example,
            const(?=\s+char) matches 'const' whenever it is followed by 'char', as in
            'static const char *'. (Compare with const\s+char, which matches 'static
            const char *'.)</para>
            <para>(?!E)	Negative lookahead. This assertion is true if the
            expression does not match at this point in the regexp. For example,
            const(?!\s+char) matches 'const' except when it is followed by
            'char'.</para>
            <para></para>
            <para></para>
            <para>Wildcard Matching</para>
            <para>Most command shells such as bash or cmd.exe support &quot;file
            globbing&quot;, the ability to identify a group of files by using
            wildcards. The setPatternSyntax() function is used to switch between regexp
            and wildcard mode. Wildcard matching is much simpler than full regexps and
            has only four features:</para>
            <para></para>
            <para> c	Any character represents itself apart from those mentioned
            below. Thus c matches the character c.</para>
            <para>?	Matches any single character. It is the same as . in full
            regexps.</para>
            <para>*	Matches zero or more of any characters. It is the same as .* in
            full regexps.</para>
            <para>[...]	Sets of characters can be represented in square brackets,
            similar to full regexps. Within the character class, like outside,
            backslash has no special meaning.</para>
            <para></para>
            <para>In the mode Wildcard, the wildcard characters cannot be escaped.
            In the mode WildcardUnix, the character '\' escapes the wildcard.</para>
            <para>For example if we are in wildcard mode and have strings which
            contain filenames we could identify HTML files with *.html. This will match
            zero or more characters followed by a dot followed by 'h', 't', 'm' and
            'l'.</para>
            <para>To test a string against a wildcard expression, use exactMatch().
            For example:</para>
            <para>QRegExp rx(&quot;*.txt&quot;);</para>
            <para>rx.setPatternSyntax(QRegExp::Wildcard);</para>
            <para>rx.exactMatch(&quot;README.txt&quot;);        // returns
            true</para>
            <para>rx.exactMatch(&quot;welcome.txt.bak&quot;);   // returns
            false</para>
            <para></para>
            <para></para>
            <para>Notes for Perl Users</para>
            <para>Most of the character class abbreviations supported by Perl are
            supported by QRegExp, see characters and abbreviations for sets of
            characters.</para>
            <para>In QRegExp, apart from within character classes, ^ always
            signifies the start of the string, so carets must always be escaped unless
            used for that purpose. In Perl the meaning of caret varies automagically
            depending on where it occurs so escaping it is rarely necessary. The same
            applies to $ which in QRegExp always signifies the end of the
            string.</para>
            <para>QRegExp's quantifiers are the same as Perl's greedy quantifiers
            (but see the note above). Non-greedy matching cannot be applied to
            individual quantifiers, but can be applied to all the quantifiers in the
            pattern. For example, to match the Perl regexp ro+?m requires:</para>
            <para>QRegExp rx(&quot;ro+m&quot;);</para>
            <para>rx.setMinimal(true);</para>
            <para>The equivalent of Perl's /i option is
            setCaseSensitivity(Qt::CaseInsensitive).</para>
            <para>Perl's /g option can be emulated using a loop.</para>
            <para>In QRegExp . matches any character, therefore all QRegExp regexps
            have the equivalent of Perl's /s option. QRegExp does not have an
            equivalent to Perl's /m option, but this can be emulated in various ways
            for example by splitting the input into lines or by looping with a regexp
            that searches for newlines.</para>
            <para>Because QRegExp is string oriented, there are no \A, \Z, or \z
            assertions. The \G assertion is not supported but can be emulated in a
            loop.</para>
            <para>Perl's $&amp; is cap(0) or capturedTexts()[0]. There are no
            QRegExp equivalents for $`, $' or $+. Perl's capturing variables, $1, $2,
            ... correspond to cap(1) or capturedTexts()[1], cap(2) or
            capturedTexts()[2], etc.</para>
            <para>To substitute a pattern use QString::replace().</para>
            <para>Perl's extended /x syntax is not supported, nor are directives,
            e.g. (?i), or regexp comments, e.g. (?#comment). On the other hand, C++'s
            rules for literal strings can be used to achieve the same:</para>
            <para>QRegExp mark(&quot;\\b&quot;      // word boundary</para>
            <para>              &quot;[Mm]ark&quot; // the word we want to
            match</para>
            <para>            );</para>
            <para>Both zero-width positive and zero-width negative lookahead
            assertions (?=pattern) and (?!pattern) are supported with the same syntax
            as Perl. Perl's lookbehind assertions, &quot;independent&quot;
            subexpressions and conditional expressions are not supported.</para>
            <para>Non-capturing parentheses are also supported, with the same
            (?:pattern) syntax.</para>
            <para>See QString::split() and QStringList::join() for equivalents to
            Perl's split and join functions.</para>
            <para>Note: because C++ transforms \'s they must be written twice in
            code, e.g. \b must be written \\b.</para>
            <para></para>
            <para></para>
            <para>Code Examples</para>
            <para>QRegExp rx(&quot;^\\d\\d?$&quot;);    // match integers 0 to
            99</para>
            <para>rx.indexIn(&quot;123&quot;);          // returns -1 (no
            match)</para>
            <para>rx.indexIn(&quot;-6&quot;);           // returns -1 (no
            match)</para>
            <para>rx.indexIn(&quot;6&quot;);            // returns 0 (matched at
            position 0)</para>
            <para>The third string matches '6'. This is a simple validation regexp
            for integers in the range 0 to 99.</para>
            <para>QRegExp rx(&quot;^\\S+$&quot;);       // match strings without
            whitespace</para>
            <para>rx.indexIn(&quot;Hello world&quot;);  // returns -1 (no
            match)</para>
            <para>rx.indexIn(&quot;This_is-OK&quot;);   // returns 0 (matched at
            position 0)</para>
            <para>The second string matches 'This_is-OK'. We've used the character
            set abbreviation '\S' (non-whitespace) and the anchors to match strings
            which contain no whitespace.</para>
            <para>In the following example we match strings containing 'mail' or
            'letter' or 'correspondence' but only match whole words i.e. not
            'email'</para>
            <para>QRegExp
            rx(&quot;\\b(mail|letter|correspondence)\\b&quot;);</para>
            <para>rx.indexIn(&quot;I sent you an email&quot;);     // returns -1
            (no match)</para>
            <para>rx.indexIn(&quot;Please write the letter&quot;); // returns
            17</para>
            <para>The second string matches &quot;Please write the letter&quot;.
            The word 'letter' is also captured (because of the parentheses). We can see
            what text we've captured like this:</para>
            <para>QString captured = rx.cap(1); // captured ==
            &quot;letter&quot;</para>
            <para>This will capture the text from the first set of capturing
            parentheses (counting capturing left parentheses from left to right). The
            parentheses are counted from 1 since cap(0) is the whole matched regexp
            (equivalent to '&amp;' in most regexp engines).</para>
            <para>QRegExp rx(&quot;&amp;(?!amp;)&quot;);      // match ampersands
            but not &amp;amp;</para>
            <para>QString line1 = &quot;This &amp; that&quot;;</para>
            <para>line1.replace(rx, &quot;&amp;amp;&quot;);</para>
            <para>// line1 == &quot;This &amp;amp; that&quot;</para>
            <para>QString line2 = &quot;His &amp;amp; hers &amp;
            theirs&quot;;</para>
            <para>line2.replace(rx, &quot;&amp;amp;&quot;);</para>
            <para>// line2 == &quot;His &amp;amp; hers &amp;amp;
            theirs&quot;</para>
            <para>Here we've passed the QRegExp to QString's replace() function to
            replace the matched text with new text.</para>
            <para>QString str = &quot;One Eric another Eirik, and an Ericsson.
            &quot;</para>
            <para>              &quot;How many Eiriks, Eric?&quot;;</para>
            <para>QRegExp rx(&quot;\\b(Eric|Eirik)\\b&quot;); // match Eric or
            Eirik</para>
            <para>int pos = 0;    // where we are in the string</para>
            <para>int count = 0;  // how many Eric and Eirik's we've counted</para>
            <para>while (pos &gt;= 0) {</para>
            <para>    pos = rx.indexIn(str, pos);</para>
            <para>    if (pos &gt;= 0) {</para>
            <para>        ++pos;      // move along in str</para>
            <para>        ++count;    // count our Eric or Eirik</para>
            <para>    }</para>
            <para>}</para>
            <para>We've used the indexIn() function to repeatedly match the regexp
            in the string. Note that instead of moving forward by one character at a
            time pos++ we could have written pos += rx.matchedLength() to skip over the
            already matched string. The count will equal 3, matching 'One Eric another
            Eirik, and an Ericsson. How many Eiriks, Eric?'; it doesn't match
            'Ericsson' or 'Eiriks' because they are not bounded by non-word
            boundaries.</para>
            <para>One common use of regexps is to split lines of delimited data
            into their component fields.</para>
            <para>str = &quot;The Qt Company Ltd\tqt.io\tFinland&quot;;</para>
            <para>QString company, web, country;</para>
            <para>rx.setPattern(&quot;^([^\t]+)\t([^\t]+)\t([^\t]+)$&quot;);</para>
            <para>if (rx.indexIn(str) != -1) {</para>
            <para>    company = rx.cap(1);</para>
            <para>    web = rx.cap(2);</para>
            <para>    country = rx.cap(3);</para>
            <para>}</para>
            <para>In this example our input lines have the format company name, web
            address and country. Unfortunately the regexp is rather long and not very
            versatile -- the code will break if we add any more fields. A simpler and
            better solution is to look for the separator, '\t' in this case, and take
            the surrounding text. The QString::split() function can take a separator
            string or regexp as an argument and split a string accordingly.</para>
            <para>QStringList field = str.split(&quot;\t&quot;);</para>
            <para>Here field[0] is the company, field[1] the web address and so
            on.</para>
            <para>To imitate the matching of a shell we can use wildcard
            mode.</para>
            <para>QRegExp rx(&quot;*.html&quot;);</para>
            <para>rx.setPatternSyntax(QRegExp::Wildcard);</para>
            <para>rx.exactMatch(&quot;index.html&quot;);                // returns
            true</para>
            <para>rx.exactMatch(&quot;default.htm&quot;);               // returns
            false</para>
            <para>rx.exactMatch(&quot;readme.txt&quot;);                // returns
            false</para>
            <para>Wildcard matching can be convenient because of its simplicity,
            but any wildcard regexp can be defined using full regexps, e.g. .*\.html$.
            Notice that we can't match both .html and .htm files with a wildcard unless
            we use *.htm* which will also match 'test.html.bak'. A full regexp gives us
            the precision we need, .*\.html?$.</para>
            <para>QRegExp can match case insensitively using setCaseSensitivity(),
            and can use non-greedy matching, see setMinimal(). By default QRegExp uses
            full regexps but this can be changed with setPatternSyntax(). Searching can
            be done forward with indexIn() or backward with lastIndexIn(). Captured
            text can be accessed using capturedTexts() which returns a string list of
            all captured strings, or using cap() which returns the captured string for
            the given index. The pos() function takes a match index and returns the
            position in the string where the match was made (or -1 if there was no
            match).</para>
            <para></para>
            <para>See also QString, QStringList, QRegExpValidator,
            QSortFilterProxyModel, and Regular Expression Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRegExp.#ctor">
            <summary>
            <para>Constructs an empty regexp.</para>
            <para>See also isValid() and errorString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.#ctor(System.String,QtCore.Qt.CaseSensitivity,QtCore.QRegExp.PatternSyntax)">
            <summary>
            <para>Constructs a regular expression object for the given pattern
            string. The pattern must be given using wildcard notation if syntax is
            Wildcard; the default is RegExp. The pattern is case sensitive, unless cs
            is Qt::CaseInsensitive. Matching is greedy (maximal), but can be changed by
            calling setMinimal().</para>
            <para>See also setPattern(), setCaseSensitivity(), and
            setPatternSyntax().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.#ctor(QtCore.QRegExp)">
            <summary>
            <para>Constructs a regular expression as a copy of rx.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.Swap(QtCore.QRegExp)">
            <summary>
            <para>Swaps regular expression other with this regular expression. This
            operation is very fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.op_Equality(QtCore.QRegExp,QtCore.QRegExp)">
            <summary>
            <para>Returns true if this regular expression is equal to rx; otherwise
            returns false.</para>
            <para>Two QRegExp objects are equal if they have the same pattern
            strings and the same settings for case sensitivity, wildcard and minimal
            matching.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.op_Inequality(QtCore.QRegExp,QtCore.QRegExp)">
            <summary>
            <para>Returns true if this regular expression is not equal to rx;
            otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.ExactMatch(System.String)">
            <summary>
            <para>Returns true if str is matched exactly by this regular
            expression; otherwise returns false. You can determine how much of the
            string was matched by calling matchedLength().</para>
            <para>For a given regexp string R, exactMatch(&quot;R&quot;) is the
            equivalent of indexIn(&quot;^R$&quot;) since exactMatch() effectively
            encloses the regexp in the start of string and end of string anchors,
            except that it sets matchedLength() differently.</para>
            <para>For example, if the regular expression is blue, then exactMatch()
            returns true only for input blue. For inputs bluebell, blutak and
            lightblue, exactMatch() returns false and matchedLength() will return 4, 3
            and 0 respectively.</para>
            <para>Although const, this function sets matchedLength(),
            capturedTexts(), and pos().</para>
            <para>See also indexIn() and lastIndexIn().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.IndexIn(System.String,System.Int32,QtCore.QRegExp.CaretMode)">
            <summary>
            <para>Attempts to find a match in str from position offset (0 by
            default). If offset is -1, the search starts at the last character; if -2,
            at the next to last character; etc.</para>
            <para>Returns the position of the first match, or -1 if there was no
            match.</para>
            <para>The caretMode parameter can be used to instruct whether ^ should
            match at index 0 or at offset.</para>
            <para>You might prefer to use QString::indexOf(), QString::contains(),
            or even QStringList::filter(). To replace matches use
            QString::replace().</para>
            <para>Example:</para>
            <para>QString str = &quot;offsets: 1.23 .50 71.00 6.00&quot;;</para>
            <para>QRegExp rx(&quot;\\d*\\.\\d+&quot;);    // primitive floating
            point matching</para>
            <para>int count = 0;</para>
            <para>int pos = 0;</para>
            <para>while ((pos = rx.indexIn(str, pos)) != -1) {</para>
            <para>    ++count;</para>
            <para>    pos += rx.matchedLength();</para>
            <para>}</para>
            <para>// pos will be 9, 14, 18 and finally 24; count will end up as
            4</para>
            <para>Although const, this function sets matchedLength(),
            capturedTexts() and pos().</para>
            <para>If the QRegExp is a wildcard expression (see setPatternSyntax())
            and want to test a string against the whole wildcard expression, use
            exactMatch() instead of this function.</para>
            <para>See also lastIndexIn() and exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.LastIndexIn(System.String,System.Int32,QtCore.QRegExp.CaretMode)">
            <summary>
            <para>Attempts to find a match backwards in str from position offset.
            If offset is -1 (the default), the search starts at the last character; if
            -2, at the next to last character; etc.</para>
            <para>Returns the position of the first match, or -1 if there was no
            match.</para>
            <para>The caretMode parameter can be used to instruct whether ^ should
            match at index 0 or at offset.</para>
            <para>Although const, this function sets matchedLength(),
            capturedTexts() and pos().</para>
            <para>Warning: Searching backwards is much slower than searching
            forwards.</para>
            <para>See also indexIn() and exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.Cap(System.Int32)">
            <summary>
            <para>Returns the text captured by the nth subexpression. The entire
            match has index 0 and the parenthesized subexpressions have indexes
            starting from 1 (excluding non-capturing parentheses).</para>
            <para>QRegExp rxlen(&quot;(\\d+)(?:\\s*)(cm|inch)&quot;);</para>
            <para>int pos = rxlen.indexIn(&quot;Length: 189cm&quot;);</para>
            <para>if (pos &gt; -1) {</para>
            <para>    QString value = rxlen.cap(1); // &quot;189&quot;</para>
            <para>    QString unit = rxlen.cap(2);  // &quot;cm&quot;</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The order of elements matched by cap() is as follows. The first
            element, cap(0), is the entire matching string. Each subsequent element
            corresponds to the next capturing open left parentheses. Thus cap(1) is the
            text of the first capturing parentheses, cap(2) is the text of the second,
            and so on.</para>
            <para>See also capturedTexts() and pos().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.Pos(System.Int32)">
            <summary>
            <para>Returns the position of the nth captured text in the searched
            string. If nth is 0 (the default), pos() returns the position of the whole
            match.</para>
            <para>Example:</para>
            <para>QRegExp rx(&quot;/([a-z]+)/([a-z]+)&quot;);</para>
            <para>rx.indexIn(&quot;Output /dev/null&quot;);   // returns 7
            (position of /dev/null)</para>
            <para>rx.pos(0);                        // returns 7 (position of
            /dev/null)</para>
            <para>rx.pos(1);                        // returns 8 (position of
            dev)</para>
            <para>rx.pos(2);                        // returns 12 (position of
            null)</para>
            <para>For zero-length matches, pos() always returns -1. (For example,
            if cap(4) would return an empty string, pos(4) returns -1.) This is a
            feature of the implementation.</para>
            <para>See also cap() and capturedTexts().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegExp.Escape(System.String)">
            <summary>
            <para>Returns the string str with every regexp special character
            escaped with a backslash. The special characters are $, (,), *, +, ., ?, [,
            ,], ^, {, | and }.</para>
            <para>Example:</para>
            <para>s1 = QRegExp::escape(&quot;bingo&quot;);   // s1 ==
            &quot;bingo&quot;</para>
            <para>s2 = QRegExp::escape(&quot;f(x)&quot;);    // s2 ==
            &quot;f\\(x\\)&quot;</para>
            <para>This function is useful to construct regexp patterns
            dynamically:</para>
            <para>QRegExp rx(&quot;(&quot; + QRegExp::escape(name) +</para>
            <para>           &quot;|&quot; + QRegExp::escape(alias) +
            &quot;)&quot;);</para>
            <para>See also setPatternSyntax().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.Pattern">
            <summary>
            <para>Returns the pattern string of the regular expression. The pattern
            has either regular expression syntax or wildcard syntax, depending on
            patternSyntax().</para>
            <para>See also setPattern(), patternSyntax(), and
            caseSensitivity().</para>
            <para></para>
            <para>Sets the pattern string to pattern. The case sensitivity,
            wildcard, and minimal matching options are not changed.</para>
            <para>See also pattern(), setPatternSyntax(), and
            setCaseSensitivity().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.CaseSensitivity">
            <summary>
            <para>Returns Qt::CaseSensitive if the regexp is matched case
            sensitively; otherwise returns Qt::CaseInsensitive.</para>
            <para>See also setCaseSensitivity(), patternSyntax(), pattern(), and
            isMinimal().</para>
            <para></para>
            <para>Sets case sensitive matching to cs.</para>
            <para>If cs is Qt::CaseSensitive, \.txt$ matches readme.txt but not
            README.TXT.</para>
            <para>See also caseSensitivity(), setPatternSyntax(), setPattern(), and
            setMinimal().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.patternSyntax">
            <summary>
            <para>Returns the syntax used by the regular expression. The default is
            QRegExp::RegExp.</para>
            <para>See also setPatternSyntax(), pattern(), and
            caseSensitivity().</para>
            <para></para>
            <para>Sets the syntax mode for the regular expression. The default is
            QRegExp::RegExp.</para>
            <para>Setting syntax to QRegExp::Wildcard enables simple shell-like
            QRegExp wildcard matching. For example, r*.txt matches the string
            readme.txt in wildcard mode, but does not match readme.</para>
            <para>Setting syntax to QRegExp::FixedString means that the pattern is
            interpreted as a plain string. Special characters (e.g., backslash) don't
            need to be escaped then.</para>
            <para>See also patternSyntax(), setPattern(), setCaseSensitivity(), and
            escape().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.Minimal">
            <summary>
            <para>Returns true if minimal (non-greedy) matching is enabled;
            otherwise returns false.</para>
            <para>See also caseSensitivity() and setMinimal().</para>
            <para></para>
            <para>Enables or disables minimal matching. If minimal is false,
            matching is greedy (maximal) which is the default.</para>
            <para>For example, suppose we have the input string &quot;We must be
            &lt;b&gt;bold&lt;/b&gt;, very &lt;b&gt;bold&lt;/b&gt;!&quot; and the
            pattern &lt;b&gt;.*&lt;/b&gt;. With the default greedy (maximal) matching,
            the match is &quot;We must be &lt;b&gt;bold&lt;/b&gt;, very
            &lt;b&gt;bold&lt;/b&gt;!&quot;. But with minimal (non-greedy) matching, the
            first match is: &quot;We must be &lt;b&gt;bold&lt;/b&gt;, very
            &lt;b&gt;bold&lt;/b&gt;!&quot; and the second match is &quot;We must be
            &lt;b&gt;bold&lt;/b&gt;, very &lt;b&gt;bold&lt;/b&gt;!&quot;. In practice
            we might use the pattern &lt;b&gt;[^&lt;]*&lt;/b&gt; instead, although this
            will still fail for nested tags.</para>
            <para>See also isMinimal() and setCaseSensitivity().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.IsEmpty">
            <summary>
            <para>Returns true if the pattern string is empty; otherwise returns
            false.</para>
            <para>If you call exactMatch() with an empty pattern on an empty string
            it will return true; otherwise it returns false since it operates over the
            whole string. If you call indexIn() with an empty pattern on any string it
            will return the start offset (0 by default) because the empty pattern
            matches the 'emptiness' at the start of the string. In this case the length
            of the match returned by matchedLength() will be 0.</para>
            <para>See QString::isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.IsValid">
            <summary>
            <para>Returns true if the regular expression is valid; otherwise
            returns false. An invalid regular expression never matches.</para>
            <para>The pattern [a-z is an example of an invalid pattern, since it
            lacks a closing square bracket.</para>
            <para>Note that the validity of a regexp may also depend on the setting
            of the wildcard flag, for example *.html is a valid wildcard regexp but an
            invalid full regexp.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.MatchedLength">
            <summary>
            <para>Returns the length of the last matched string, or -1 if there was
            no match.</para>
            <para>See also exactMatch(), indexIn(), and lastIndexIn().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.CaptureCount">
            <summary>
            <para>Returns the number of captures contained in the regular
            expression.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.CapturedTexts">
            <summary>
            <para>Returns a list of the captured text strings.</para>
            <para>The first string in the list is the entire matched string. Each
            subsequent list element contains a string that matched a (capturing)
            subexpression of the regexp.</para>
            <para>For example:</para>
            <para>QRegExp rx(&quot;(\\d+)(\\s*)(cm|inch(es)?)&quot;);</para>
            <para>int pos = rx.indexIn(&quot;Length: 36 inches&quot;);</para>
            <para>QStringList list = rx.capturedTexts();</para>
            <para>// list is now (&quot;36 inches&quot;, &quot;36&quot;, &quot;
            &quot;, &quot;inches&quot;, &quot;es&quot;)</para>
            <para>The above example also captures elements that may be present but
            which we have no interest in. This problem can be solved by using
            non-capturing parentheses:</para>
            <para>QRegExp rx(&quot;(\\d+)(?:\\s*)(cm|inch(?:es)?)&quot;);</para>
            <para>int pos = rx.indexIn(&quot;Length: 36 inches&quot;);</para>
            <para>QStringList list = rx.capturedTexts();</para>
            <para>// list is now (&quot;36 inches&quot;, &quot;36&quot;,
            &quot;inches&quot;)</para>
            <para>Note that if you want to iterate over the list, you should
            iterate over a copy, e.g.</para>
            <para>QStringList list = rx.capturedTexts();</para>
            <para>QStringList::iterator it = list.begin();</para>
            <para>while (it != list.end()) {</para>
            <para>    myProcessing(*it);</para>
            <para>    ++it;</para>
            <para>}</para>
            <para>Some regexps can match an indeterminate number of times. For
            example if the input string is &quot;Offsets: 12 14 99 231 7&quot; and the
            regexp, rx, is (\d+)+, we would hope to get a list of all the numbers
            matched. However, after calling rx.indexIn(str), capturedTexts() will
            return the list (&quot;12&quot;, &quot;12&quot;), i.e. the entire match was
            &quot;12&quot; and the first subexpression matched was &quot;12&quot;. The
            correct approach is to use cap() in a loop.</para>
            <para>The order of elements in the string list is as follows. The first
            element is the entire matching string. Each subsequent element corresponds
            to the next capturing open left parentheses. Thus capturedTexts()[1] is the
            text of the first capturing parentheses, capturedTexts()[2] is the text of
            the second and so on (corresponding to $1, $2, etc., in some other regexp
            languages).</para>
            <para>See also cap() and pos().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegExp.ErrorString">
            <summary>
            <para>Returns a text string that explains why a regexp pattern is
            invalid the case being; otherwise returns &quot;no error
            occurred&quot;.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="T:QtCore.QRegExp.PatternSyntax">
            <summary>
            <para>The syntax used to interpret the meaning of the pattern.</para>
            <para>See also setPatternSyntax().</para>
            </summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.RegExp">
            <summary>A rich Perl-like pattern matching syntax. This is the default.</summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.Wildcard">
            <summary>This provides a simple pattern matching syntax similar to that used by shells (command interpreters) for "file globbing". See QRegExp wildcard matching.</summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.FixedString">
            <summary>The pattern is a fixed string. This is equivalent to using the RegExp pattern on a string in which all metacharacters are escaped using escape().</summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.RegExp2">
            <summary>Like RegExp, but with greedy quantifiers. (Introduced in Qt 4.2.)</summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.WildcardUnix">
            <summary>This is similar to Wildcard but with the behavior of a Unix shell. The wildcard characters can be escaped with the character "\".</summary>
        </member>
        <member name="F:QtCore.QRegExp.PatternSyntax.W3CXmlSchema11">
            <summary>The pattern is a regular expression as defined by the W3C XML Schema 1.1 specification.</summary>
        </member>
        <member name="T:QtCore.QRegExp.CaretMode">
            <summary>
            <para>The CaretMode enum defines the different meanings of the caret
            (^) in a regular expression. The possible values are:</para>
            </summary>
        </member>
        <member name="F:QtCore.QRegExp.CaretMode.CaretAtZero">
            <summary>The caret corresponds to index 0 in the searched string.</summary>
        </member>
        <member name="F:QtCore.QRegExp.CaretMode.CaretAtOffset">
            <summary>The caret corresponds to the start offset of the search.</summary>
        </member>
        <member name="F:QtCore.QRegExp.CaretMode.CaretWontMatch">
            <summary>The caret never matches.</summary>
        </member>
        <member name="T:QtCore.QStringMatcher">
            <summary>
            <para>The QStringMatcher class holds a sequence of characters that can
            be quickly matched in a Unicode string.</para>
            </summary>
            <remarks>
            <para>This class is useful when you have a sequence of QChars that you
            want to repeatedly match against some strings (perhaps in a loop), or when
            you want to search for the same sequence of characters multiple times in
            the same string. Using a matcher object and indexIn() is faster than
            matching a plain QString with QString::indexOf() if repeated matching takes
            place. This class offers no benefit if you are doing one-off string
            matches.</para>
            <para>Create the QStringMatcher with the QString you want to search
            for. Then call indexIn() on the QString that you want to search.</para>
            <para></para>
            <para>See also QString, QByteArrayMatcher, and QRegExp.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStringMatcher.#ctor">
            <summary>
            <para>Constructs an empty string matcher that won't match anything.
            Call setPattern() to give it a pattern to match.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringMatcher.#ctor(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Constructs a string matcher that will search for pattern, with
            case sensitivity cs.</para>
            <para>Call indexIn() to perform a search.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringMatcher.#ctor(QtCore.QChar,System.Int32,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Constructs a string matcher that will search for the pattern
            referred to by uc with the given length and case sensitivity specified by
            cs.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringMatcher.#ctor(QtCore.QStringMatcher)">
            <summary>
            <para>Copies the other string matcher to this string matcher.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringMatcher.IndexIn(System.String,System.Int32)">
            <summary>
            <para>Searches the string str from character position from (default 0,
            i.e. from the first character), for the string pattern() that was set in
            the constructor or in the most recent call to setPattern(). Returns the
            position where the pattern() matched in str, or -1 if no match was
            found.</para>
            <para>See also setPattern() and setCaseSensitivity().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringMatcher.IndexIn(QtCore.QChar,System.Int32,System.Int32)">
            <summary>
            <para>Searches the string starting at str (of length length) from
            character position from (default 0, i.e. from the first character), for the
            string pattern() that was set in the constructor or in the most recent call
            to setPattern(). Returns the position where the pattern() matched in str,
            or -1 if no match was found.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setPattern() and setCaseSensitivity().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringMatcher.Pattern">
            <summary>
            <para>Returns the string pattern that this string matcher will search
            for.</para>
            <para>See also setPattern().</para>
            <para></para>
            <para>Sets the string that this string matcher will search for to
            pattern.</para>
            <para>See also pattern(), setCaseSensitivity(), and indexIn().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringMatcher.CaseSensitivity">
            <summary>
            <para>Returns the case sensitivity setting for this string
            matcher.</para>
            <para>See also setCaseSensitivity().</para>
            <para></para>
            <para>Sets the case sensitivity setting of this string matcher to
            cs.</para>
            <para>See also caseSensitivity(), setPattern(), and indexIn().</para>
            </summary>
        </member>
        <member name="T:QtCore.QStringList">
            <summary>
            <para>The QStringList class provides a list of strings.</para>
            </summary>
            <remarks>
            <para>QStringList inherits from QList&lt;QString&gt;. Like QList,
            QStringList is implicitly shared. It provides fast index-based access as
            well as fast insertions and removals. Passing string lists as value
            parameters is both fast and safe.</para>
            <para>All of QList's functionality also applies to QStringList. For
            example, you can use isEmpty() to test whether the list is empty, and you
            can call functions like append(), prepend(), insert(), replace(),
            removeAll(), removeAt(), removeFirst(), removeLast(), and removeOne() to
            modify a QStringList. In addition, QStringList provides a few convenience
            functions that make handling lists of strings easier:</para>
            <para></para>
            <para>Adding Strings</para>
            <para>Strings can be added to a list using the append(), operator+=()
            and operator&lt;&lt;() functions. For example:</para>
            <para>    QStringList fonts;</para>
            <para>    fonts &lt;&lt; &quot;Arial&quot; &lt;&lt;
            &quot;Helvetica&quot; &lt;&lt; &quot;Times&quot; &lt;&lt;
            &quot;Courier&quot;;</para>
            <para></para>
            <para>Iterating Over the Strings</para>
            <para>To iterate over a list, you can either use index positions or
            QList's Java-style and STL-style iterator types:</para>
            <para>Indexing:</para>
            <para>    for (int i = 0; i &lt; fonts.size(); ++i)</para>
            <para>         cout &lt;&lt; fonts.at(i).toLocal8Bit().constData()
            &lt;&lt; endl;</para>
            <para>Java-style iterator:</para>
            <para>    QStringListIterator javaStyleIterator(fonts);</para>
            <para>    while (javaStyleIterator.hasNext())</para>
            <para>         cout &lt;&lt;
            javaStyleIterator.next().toLocal8Bit().constData() &lt;&lt; endl;</para>
            <para>STL-style iterator:</para>
            <para>    QStringList::const_iterator constIterator;</para>
            <para>    for (constIterator = fonts.constBegin(); constIterator !=
            fonts.constEnd();</para>
            <para>           ++constIterator)</para>
            <para>        cout &lt;&lt; (*constIterator).toLocal8Bit().constData()
            &lt;&lt; endl;</para>
            <para>The QStringListIterator class is simply a type definition for
            QListIterator&lt;QString&gt;. QStringList also provide the
            QMutableStringListIterator class which is a type definition for
            QMutableListIterator&lt;QString&gt;.</para>
            <para></para>
            <para>Manipulating the Strings</para>
            <para>QStringList provides several functions allowing you to manipulate
            the contents of a list. You can concatenate all the strings in a string
            list into a single string (with an optional separator) using the join()
            function. For example:</para>
            <para>    QString str = fonts.join(&quot;, &quot;);</para>
            <para>     // str == &quot;Arial, Helvetica, Times,
            Courier&quot;</para>
            <para>The argument to join can be a single character or a
            string.</para>
            <para>To break up a string into a string list, use the QString::split()
            function:</para>
            <para>    QStringList list;</para>
            <para>    list = str.split(&quot;,&quot;);</para>
            <para>     // list: [&quot;Arial&quot;, &quot;Helvetica&quot;,
            &quot;Times&quot;, &quot;Courier&quot;]</para>
            <para>The argument to split can be a single character, a string, or a
            QRegExp.</para>
            <para>In addition, the operator+() function allows you to concatenate
            two string lists into one. To sort a string list, use the sort()
            function.</para>
            <para>QString list also provides the filter() function which lets you
            to extract a new list which contains only those strings which contain a
            particular substring (or match a particular regular expression):</para>
            <para>    QStringList monospacedFonts =
            fonts.filter(QRegExp(&quot;Courier|Fixed&quot;));</para>
            <para>The contains() function tells you whether the list contains a
            given string, while the indexOf() function returns the index of the first
            occurrence of the given string. The lastIndexOf() function on the other
            hand, returns the index of the last occurrence of the string.</para>
            <para>Finally, the replaceInStrings() function calls QString::replace()
            on each string in the string list in turn. For example:</para>
            <para>    QStringList files;</para>
            <para>    files &lt;&lt; &quot;$QTDIR/src/moc/moc.y&quot;</para>
            <para>          &lt;&lt; &quot;$QTDIR/src/moc/moc.l&quot;</para>
            <para>          &lt;&lt; &quot;$QTDIR/include/qconfig.h&quot;;</para>
            <para></para>
            <para>    files.replaceInStrings(&quot;$QTDIR&quot;,
            &quot;/usr/lib/qt&quot;);</para>
            <para>    // files: [ &quot;/usr/lib/qt/src/moc/moc.y&quot;,
            ...]</para>
            <para></para>
            <para>See also QString.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStringList.#ctor">
            <summary>
            <para>Constructs an empty string list.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.#ctor(System.String)">
            <summary>
            <para>Constructs a string list that contains the given string, str.
            Longer lists are easily created like this:</para>
            <para>    QStringList longerList = (QStringList() &lt;&lt; str1
            &lt;&lt; str2 &lt;&lt; str3);</para>
            <para>See also append().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.Contains(System.String,QtCore.Qt.CaseSensitivity)">
            <summary>
            <para>Returns true if the list contains the string str; otherwise
            returns false. The search is case insensitive if cs is Qt::CaseInsensitive;
            the search is case sensitive by default.</para>
            <para>See also indexOf(), lastIndexOf(), and
            QString::contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.op_Addition(QtCore.QStringList,QtCore.QStringList)">
            <summary>
            <para>Returns a string list that is the concatenation of this string
            list with the other string list.</para>
            <para>See also append().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.IndexOf(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>Returns the index position of the first exact match of rx in the
            list, searching forward from index position from. Returns -1 if no item
            matched.</para>
            <para>By default, this function is case sensitive.</para>
            <para>See also lastIndexOf(), contains(), and
            QRegExp::exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.LastIndexOf(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>Returns the index position of the last exact match of rx in the
            list, searching backward from index position from. If from is -1 (the
            default), the search starts at the last item. Returns -1 if no item
            matched.</para>
            <para>By default, this function is case sensitive.</para>
            <para>See also indexOf(), contains(), and QRegExp::exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.IndexOf1(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads indexOf().</para>
            <para>Returns the index position of the first exact match of rx in the
            list, searching forward from index position from. Returns -1 if no item
            matched.</para>
            <para>By default, this function is case sensitive.</para>
            <para>If an item matched, the rx regular expression will contain the
            matched objects (see QRegExp::matchedLength, QRegExp::cap).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also lastIndexOf(), contains(), and
            QRegExp::exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.LastIndexOf1(QtCore.QRegExp,System.Int32)">
            <summary>
            <para>This function overloads lastIndexOf().</para>
            <para>Returns the index position of the last exact match of rx in the
            list, searching backward from index position from. If from is -1 (the
            default), the search starts at the last item. Returns -1 if no item
            matched.</para>
            <para>By default, this function is case sensitive.</para>
            <para>If an item matched, the rx regular expression will contain the
            matched objects (see QRegExp::matchedLength, QRegExp::cap).</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also indexOf(), contains(), and QRegExp::exactMatch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.IndexOf(QtCore.QRegularExpression,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the first match of re in the list,
            searching forward from index position from. Returns -1 if no item
            matched.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also lastIndexOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringList.LastIndexOf(QtCore.QRegularExpression,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the index position of the last exact match of re in the
            list, searching backward from index position from. If from is -1 (the
            default), the search starts at the last item. Returns -1 if no item
            matched.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also indexOf().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaType">
            <summary>
            <para>The QMetaType class manages named types in the meta-object
            system.</para>
            </summary>
            <remarks>
            <para>The class is used as a helper to marshall types in QVariant and
            in queued signals and slots connections. It associates a type name to a
            type so that it can be created and destructed dynamically at run-time.
            Declare new types with Q_DECLARE_METATYPE() to make them available to
            QVariant and other template-based functions. Call qRegisterMetaType() to
            make types available to non-template based functions, such as the queued
            signal and slot connections.</para>
            <para>Any class or struct that has a public default constructor, a
            public copy constructor, and a public destructor can be registered.</para>
            <para>The following code allocates and destructs an instance of
            MyClass:</para>
            <para>int id = QMetaType::type(&quot;MyClass&quot;);</para>
            <para>if (id != QMetaType::UnknownType) {</para>
            <para>    void *myClassPtr = QMetaType::create(id);</para>
            <para>    ...</para>
            <para>    QMetaType::destroy(id, myClassPtr);</para>
            <para>    myClassPtr = 0;</para>
            <para>}</para>
            <para>If we want the stream operators operator&lt;&lt;() and
            operator&gt;&gt;() to work on QVariant objects that store custom types, the
            custom type must provide operator&lt;&lt;() and operator&gt;&gt;()
            operators.</para>
            <para></para>
            <para>See also Q_DECLARE_METATYPE(), QVariant::setValue(),
            QVariant::value(), and QVariant::fromValue().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMetaType.#ctor(System.Int32)">
            <summary>
            <para>Constructs a QMetaType object that contains all information about
            type typeId.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.IsRegistered">
            <summary>
            <para>Returns true if this QMetaType object contains valid information
            about a type, false otherwise.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.SizeOf">
            <summary>
            <para>Returns the size of the type in bytes (i.e. sizeof(T), where T is
            the actual type for which this QMetaType instance was constructed
            for).</para>
            <para>This function is typically used together with construct() to
            perform low-level management of the memory used by a type.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::construct() and QMetaType::sizeOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Create(System.IntPtr)">
            <summary>
            <para>Returns a copy of copy, assuming it is of the type that this
            QMetaType instance was created for. If copy is null, creates a default
            constructed instance.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::destroy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Destroy(System.IntPtr)">
            <summary>
            <para>Destroys the data, assuming it is of the type that this QMetaType
            instance was created for.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::create().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Construct(System.IntPtr,System.IntPtr)">
            <summary>
            <para>Constructs a value of the type that this QMetaType instance was
            constructed for in the existing memory addressed by where, that is a copy
            of copy, and returns where. If copy is zero, the value is default
            constructed.</para>
            <para>This is a low-level function for explicitly managing the memory
            used to store the type. Consider calling create() if you don't need this
            level of control (that is, use &quot;new&quot; rather than &quot;placement
            new&quot;).</para>
            <para>You must ensure that where points to a location where the new
            value can be stored and that where is suitably aligned. The type's size can
            be queried by calling sizeOf().</para>
            <para>The rule of thumb for alignment is that a type is aligned to its
            natural boundary, which is the smallest power of 2 that is bigger than the
            type, unless that alignment is larger than the maximum useful alignment for
            the platform. For practical purposes, alignment larger than 2 *
            sizeof(void*) is only necessary for special hardware instructions (e.g.,
            aligned SSE loads and stores on x86).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Destruct(System.IntPtr)">
            <summary>
            <para>Destructs the value, located at data, assuming that it is of the
            type for which this QMetaType instance was constructed for.</para>
            <para>Unlike destroy(), this function only invokes the type's
            destructor, it doesn't invoke the delete operator.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::construct().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.type(System.String)">
            <summary>
            <para>Returns a handle to the type called typeName, or
            QMetaType::UnknownType if there is no such type.</para>
            <para>See also isRegistered(), typeName(), and Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.TypeName(System.Int32)">
            <summary>
            <para>Returns the type name associated with the given typeId, or 0 if
            no matching type was found. The returned pointer must not be
            deleted.</para>
            <para>See also type(), isRegistered(), and Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.SizeOf(System.Int32)">
            <summary>
            <para>Returns the size of the given type in bytes (i.e. sizeof(T),
            where T is the actual type identified by the type argument).</para>
            <para>This function is typically used together with construct() to
            perform low-level management of the memory used by a type.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also construct().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.TypeFlags(System.Int32)">
            <summary>
            <para>Returns flags of the given type.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::TypeFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.MetaObjectForType(System.Int32)">
            <summary>
            <para>returns QMetaType::metaObject for type</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also metaObject().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.IsRegistered(System.Int32)">
            <summary>
            <para>Returns true if the datatype with ID type is registered;
            otherwise returns false.</para>
            <para>See also type(), typeName(), and Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Create(System.Int32,System.IntPtr)">
            <summary>
            <para>Returns a copy of copy, assuming it is of type type. If copy is
            zero, creates a default constructed instance.</para>
            <para>See also destroy(), isRegistered(), and Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Destroy(System.Int32,System.IntPtr)">
            <summary>
            <para>Destroys the data, assuming it is of the type given.</para>
            <para>See also create(), isRegistered(), and Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Construct(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            <para>Constructs a value of the given type in the existing memory
            addressed by where, that is a copy of copy, and returns where. If copy is
            zero, the value is default constructed.</para>
            <para>This is a low-level function for explicitly managing the memory
            used to store the type. Consider calling create() if you don't need this
            level of control (that is, use &quot;new&quot; rather than &quot;placement
            new&quot;).</para>
            <para>You must ensure that where points to a location that can store a
            value of type type, and that where is suitably aligned. The type's size can
            be queried by calling sizeOf().</para>
            <para>The rule of thumb for alignment is that a type is aligned to its
            natural boundary, which is the smallest power of 2 that is bigger than the
            type, unless that alignment is larger than the maximum useful alignment for
            the platform. For practical purposes, alignment larger than 2 *
            sizeof(void*) is only necessary for special hardware instructions (e.g.,
            aligned SSE loads and stores on x86).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also destruct() and sizeOf().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Destruct(System.Int32,System.IntPtr)">
            <summary>
            <para>Destructs the value of the given type, located at where.</para>
            <para>Unlike destroy(), this function only invokes the type's
            destructor, it doesn't invoke the delete operator.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also construct().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Save(QtCore.QDataStream,System.Int32,System.IntPtr)">
            <summary>
            <para>Writes the object pointed to by data with the ID type to the
            given stream. Returns true if the object is saved successfully; otherwise
            returns false.</para>
            <para>The type must have been registered with qRegisterMetaType() and
            qRegisterMetaTypeStreamOperators() beforehand.</para>
            <para>Normally, you should not need to call this function directly.
            Instead, use QVariant's operator&lt;&lt;(), which relies on save() to
            stream custom types.</para>
            <para>See also load() and qRegisterMetaTypeStreamOperators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Load(QtCore.QDataStream,System.Int32,System.IntPtr)">
            <summary>
            <para>Reads the object of the specified type from the given stream into
            data. Returns true if the object is loaded successfully; otherwise returns
            false.</para>
            <para>The type must have been registered with qRegisterMetaType() and
            qRegisterMetaTypeStreamOperators() beforehand.</para>
            <para>Normally, you should not need to call this function directly.
            Instead, use QVariant's operator&gt;&gt;(), which relies on load() to
            stream custom types.</para>
            <para>See also save() and qRegisterMetaTypeStreamOperators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.HasRegisteredComparators(System.Int32)">
            <summary>
            <para>Returns true, if the meta type system has registered comparators
            for type id typeId.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.HasRegisteredDebugStreamOperator(System.Int32)">
            <summary>
            <para>Returns true, if the meta type system has a registered debug
            stream operator for type id typeId.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Convert(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            <para>Converts the object at from from fromTypeId to the preallocated
            space at to typed toTypeId. Returns true, if the conversion succeeded,
            otherwise false.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Compare(System.IntPtr,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            <para>Compares the objects at lhs and rhs. Both objects need to be of
            type typeId. result is set to less than, equal to or greater than zero, if
            lhs is less than, equal to or greater than rhs. Returns true, if the
            comparison succeeded, otherwise false.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.Equals(System.IntPtr,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            <para>Compares the objects at lhs and rhs. Both objects need to be of
            type typeId. result is set to zero, if lhs equals to rhs. Returns true, if
            the comparison succeeded, otherwise false.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.DebugStream(QtCore.QDebug,System.IntPtr,System.Int32)">
            <summary>
            <para>Streams the object at rhs of type typeId to the debug stream dbg.
            Returns true on success, otherwise false.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaType.HasRegisteredConverterFunction(System.Int32,System.Int32)">
            <summary>
            <para>Returns true, if the meta type system has a registered conversion
            from meta type id fromTypeId to toTypeId</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaType.IsValid">
            <summary>
            <para>Returns true if this QMetaType object contains valid information
            about a type, false otherwise.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaType.Flags">
            <summary>
            <para>Returns flags of the type for which this QMetaType instance was
            constructed.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QMetaType::TypeFlags and QMetaType::typeFlags().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaType.MetaObject">
            <summary>
            <para>return a QMetaObject relative to this type.</para>
            <para>If the type is a pointer type to a subclass of QObject, flags()
            contains QMetaType::PointerToQObject and this function returns the
            corresponding QMetaObject. This can be used to in combinaison with
            QMetaObject::construct to create QObject of this type.</para>
            <para>If the type is a Q_GADGET, flags() contains QMetaType::IsGadget,
            and this function returns its QMetaObject. This can be used to retrieve
            QMetaMethod and QMetaProperty and use them on a pointer of this type.
            (given by QVariant::data for example)</para>
            <para>If the type is an enumeration, flags() contains
            QMetaType::IsEnumeration, and this function returns the QMetaObject of the
            enclosing object if the enum was registered as a Q_ENUM or 0
            otherwise</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QMetaType::metaObjectForType() and
            QMetaType::flags().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaType.Type">
            <summary>
            <para>These are the built-in types supported by QMetaType: Read doc on
            QChar Read doc on QChar</para>
            <para>Additional types can be registered using
            Q_DECLARE_METATYPE().</para>
            <para>See also type() and typeName().</para>
            </summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Void">
            <summary>void</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Bool">
            <summary>bool</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Int">
            <summary>int</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.UInt">
            <summary>unsigned int</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.LongLong">
            <summary>LongLong</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.ULongLong">
            <summary>ULongLong</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Double">
            <summary>double</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Long">
            <summary>long</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Short">
            <summary>short</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Char">
            <summary>char</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.ULong">
            <summary>unsigned long</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.UShort">
            <summary>unsigned short</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.UChar">
            <summary>unsigned char</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.Float">
            <summary>float</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.SChar">
            <summary>signed char</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.VoidStar">
            <summary>void *</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QChar">
            <summary>QChar</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QString">
            <summary>QString</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QStringList">
            <summary>QStringList</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QByteArray">
            <summary>QByteArray</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QBitArray">
            <summary>QBitArray</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QDate">
            <summary>QDate</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QTime">
            <summary>QTime</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QDateTime">
            <summary>QDateTime</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QUrl">
            <summary>QUrl</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QLocale">
            <summary>QLocale</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QRect">
            <summary>QRect</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QRectF">
            <summary>QRectF</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QSize">
            <summary>QSize</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QSizeF">
            <summary>QSizeF</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QLine">
            <summary>QLine</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QLineF">
            <summary>QLineF</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPoint">
            <summary>QPoint</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPointF">
            <summary>QPointF</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QRegExp">
            <summary>QRegExp</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QEasingCurve">
            <summary>QEasingCurve</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QUuid">
            <summary>QUuid</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVariant">
            <summary>QVariant</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QModelIndex">
            <summary>QModelIndex</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QRegularExpression">
            <summary>QRegularExpression</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QJsonValue">
            <summary>QJsonValue</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QJsonObject">
            <summary>QJsonObject</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QJsonArray">
            <summary>QJsonArray</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QJsonDocument">
            <summary>QJsonDocument</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPersistentModelIndex">
            <summary>QPersistentModelIndex (since 5.5)</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QObjectStar">
            <summary>QObject *</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVariantMap">
            <summary>QVariantMap</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVariantList">
            <summary>QVariantList</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVariantHash">
            <summary>QVariantHash</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QByteArrayList">
            <summary>QByteArrayList</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QFont">
            <summary>QFont</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPixmap">
            <summary>QPixmap</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QBrush">
            <summary>QBrush</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QColor">
            <summary>QColor</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPalette">
            <summary>QPalette</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QIcon">
            <summary>QIcon</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QImage">
            <summary>QImage</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPolygon">
            <summary>QPolygon</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QRegion">
            <summary>QRegion</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QBitmap">
            <summary>QBitmap</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QCursor">
            <summary>QCursor</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QKeySequence">
            <summary>QKeySequence</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPen">
            <summary>QPen</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QTextLength">
            <summary>QTextLength</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QTextFormat">
            <summary>QTextFormat</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QMatrix">
            <summary>QMatrix</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QTransform">
            <summary>QTransform</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QMatrix4x4">
            <summary>QMatrix4x4</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVector2D">
            <summary>QVector2D</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVector3D">
            <summary>QVector3D</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QVector4D">
            <summary>QVector4D</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QQuaternion">
            <summary>QQuaternion</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QPolygonF">
            <summary>QPolygonF</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.QSizePolicy">
            <summary>QSizePolicy</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.UnknownType">
            <summary>This is an invalid type id. It is returned from QMetaType for types that are not registered</summary>
        </member>
        <member name="F:QtCore.QMetaType.Type.User">
            <summary>Base value for user types</summary>
        </member>
        <member name="T:QtCore.QMetaType.TypeFlag">
            <summary>
            <para>The enum describes attributes of a type supported by
            QMetaType.</para>
            <para>The TypeFlags type is a typedef for QFlags&lt;TypeFlag&gt;. It
            stores an OR combination of TypeFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QMetaType.TypeFlag.NeedsConstruction">
            <summary>This type has non-trivial constructors. If the flag is not set instances can be safely initialized with memset to 0.</summary>
        </member>
        <member name="F:QtCore.QMetaType.TypeFlag.NeedsDestruction">
            <summary>This type has a non-trivial destructor. If the flag is not set calls to the destructor are not necessary before discarding objects.</summary>
        </member>
        <member name="F:QtCore.QMetaType.TypeFlag.MovableType">
            <summary>An instance of a type having this attribute can be safely moved by memcpy.</summary>
        </member>
        <member name="F:QtCore.QMetaType.TypeFlag.PointerToQObject">
            <summary>This type is a pointer to a derived of QObject This type is a Q_GADGET and it's corresponding QMetaObject can be accessed with QMetaType::metaObject Since 5.5.</summary>
        </member>
        <member name="F:QtCore.QMetaType.TypeFlag.IsEnumeration">
            <summary>This type is an enumeration</summary>
        </member>
        <member name="T:QtCore.QSignalBlocker">
            <summary>
            <para>Exception-safe wrapper around QObject::blockSignals()</para>
            </summary>
            <remarks>
            <para>QSignalBlocker can be used whereever you would otherwise use a
            pair of calls to blockSignals(). It blocks signals in its constructor and
            in the destructor it resets the state to what it was before the constructor
            ran.</para>
            <para>{</para>
            <para>const QSignalBlocker blocker(someQObject);</para>
            <para>// no signals here</para>
            <para>}</para>
            <para>is thus equivalent to</para>
            <para>const bool wasBlocked =
            someQObject-&gt;blockSignals(true);</para>
            <para>// no signals here</para>
            <para>someQObject-&gt;blockSignals(wasBlocked);</para>
            <para>except the code using QSignalBlocker is safe in the face of
            exceptions.</para>
            <para></para>
            <para>See also QMutexLocker and QEventLoopLocker.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSignalBlocker.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructor. Calls object-&gt;blockSignals(true).</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalBlocker.Reblock">
            <summary>
            <para>Re-blocks signals after a previous unblock().</para>
            <para>The numbers of reblock() and unblock() calls are not counted, so
            every reblock() undoes any number of unblock() calls.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalBlocker.Unblock">
            <summary>
            <para>Temporarily restores the QObject::signalsBlocked() state to what
            it was before this QSignaBlocker's constructor ran. To undo, use
            reblock().</para>
            <para>The numbers of reblock() and unblock() calls are not counted, so
            every unblock() undoes any number of reblock() calls.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractAnimation">
            <summary>
            <para>The QAbstractAnimation class is the base of all
            animations.</para>
            </summary>
            <remarks>
            <para>The class defines the functions for the functionality shared by
            all animations. By inheriting this class, you can create custom animations
            that plug into the rest of the animation framework.</para>
            <para>The progress of an animation is given by its current time
            (currentLoopTime()), which is measured in milliseconds from the start of
            the animation (0) to its end (duration()). The value is updated
            automatically while the animation is running. It can also be set directly
            with setCurrentTime().</para>
            <para>At any point an animation is in one of three states: Running,
            Stopped, or Paused--as defined by the State enum. The current state can be
            changed by calling start(), stop(), pause(), or resume(). An animation will
            always reset its current time when it is started. If paused, it will
            continue with the same current time when resumed. When an animation is
            stopped, it cannot be resumed, but will keep its current time (until
            started again). QAbstractAnimation will emit stateChanged() whenever its
            state changes.</para>
            <para>An animation can loop any number of times by setting the
            loopCount property. When an animation's current time reaches its
            duration(), it will reset the current time and keep running. A loop count
            of 1 (the default value) means that the animation will run one time. Note
            that a duration of -1 means that the animation will run until stopped; the
            current time will increase indefinitely. When the current time equals
            duration() and the animation is in its final loop, the Stopped state is
            entered, and the finished() signal is emitted.</para>
            <para>QAbstractAnimation provides pure virtual functions used by
            subclasses to track the progress of the animation: duration() and
            updateCurrentTime(). The duration() function lets you report a duration for
            the animation (as discussed above). The animation framework calls
            updateCurrentTime() when current time has changed. By reimplementing this
            function, you can track the animation progress. Note that neither the
            interval between calls nor the number of calls to this function are
            defined; though, it will normally be 60 updates per second.</para>
            <para>By reimplementing updateState(), you can track the animation's
            state changes, which is particularly useful for animations that are not
            driven by time.</para>
            <para></para>
            <para>See also QVariantAnimation, QPropertyAnimation, QAnimationGroup,
            and The Animation Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractAnimation.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs the QAbstractAnimation base class, and passes parent
            to QObject's constructor.</para>
            <para>See also QVariantAnimation and QAnimationGroup.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.Start(QtCore.QAbstractAnimation.DeletionPolicy)">
            <summary>
            <para>Starts the animation. The policy argument says whether or not the
            animation should be deleted when it's done. When the animation starts, the
            stateChanged() signal is emitted, and state() returns Running. When control
            reaches the event loop, the animation will run by itself, periodically
            calling updateCurrentTime() as the animation progresses.</para>
            <para>If the animation is currently stopped or has already reached the
            end, calling start() will rewind the animation and start again from the
            beginning. When the animation reaches the end, the animation will either
            stop, or if the loop level is more than 1, it will rewind and continue from
            the beginning.</para>
            <para>If the animation is already running, this function does
            nothing.</para>
            <para>See also stop() and state().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.Pause">
            <summary>
            <para>Pauses the animation. When the animation is paused, state()
            returns Paused. The value of currentTime will remain unchanged until
            resume() or start() is called. If you want to continue from the current
            time, call resume().</para>
            <para>See also start(), state(), and resume().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.Resume">
            <summary>
            <para>Resumes the animation after it was paused. When the animation is
            resumed, it emits the resumed() and stateChanged() signals. The currenttime
            is not changed.</para>
            <para>See also start(), pause(), and state().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.SetPaused(System.Boolean)">
            <summary>
            <para>If paused is true, the animation is paused. If paused is false,
            the animation is resumed.</para>
            <para>See also state(), pause(), and resume().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.Stop">
            <summary>
            <para>Stops the animation. When the animation is stopped, it emits the
            stateChanged() signal, and state() returns Stopped. The current time is not
            changed.</para>
            <para>If the animation stops by itself after reaching the end (i.e.,
            currentLoopTime() == duration() and currentLoop() &gt; loopCount() - 1),
            the finished() signal is emitted.</para>
            <para>See also start() and state().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.UpdateCurrentTime(System.Int32)">
            <summary>
            <para>This pure virtual function is called every time the animation's
            currentTime changes.</para>
            <para>See also updateState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.UpdateState(QtCore.QAbstractAnimation.State,QtCore.QAbstractAnimation.State)">
            <summary>
            <para>This virtual function is called by QAbstractAnimation when the
            state of the animation is changed from oldState to newState.</para>
            <para>See also start(), stop(), pause(), and resume().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.UpdateDirection(QtCore.QAbstractAnimation.Direction)">
            <summary>
            <para>This virtual function is called by QAbstractAnimation when the
            direction of the animation is changed. The direction argument is the new
            direction.</para>
            <para>See also setDirection() and direction().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractAnimation.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractAnimation.Finished">
            <summary>
            <para>QAbstractAnimation emits this signal after the animation has stopped and has reached the end.</para>
            <para>This signal is emitted after stateChanged().</para>
            <para>See also stateChanged().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractAnimation.StateChanged">
            <summary>
            <para>This property holds state of the animation.</para>
            <para>This property describes the current state of the animation. When the animation state changes, QAbstractAnimation emits the stateChanged() signal.</para>
            <para>Access functions:</para>
            <para></para>
            <para> State 	state() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	stateChanged(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractAnimation.CurrentLoopChanged">
            <summary>
            <para>This property holds the current loop of the animation.</para>
            <para>This property describes the current loop of the animation. By default, the animation's loop count is 1, and so the current loop will always be 0. If the loop count is 2 and the animation runs past its duration, it will automatically rewind and restart at current time 0, and current loop 1, and so on.</para>
            <para>When the current loop changes, QAbstractAnimation emits the currentLoopChanged() signal.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	currentLoop() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentLoopChanged(int currentLoop)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractAnimation.DirectionChanged">
            <summary>
            <para>This property holds the direction of the animation when it is in Running state.</para>
            <para>This direction indicates whether the time moves from 0 towards the animation duration, or from the value of the duration and towards 0 after start() has been called.</para>
            <para>By default, this property is set to Forward.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Direction 	direction() const</para>
            <para> void 	setDirection(Direction direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	directionChanged(QAbstractAnimation::Direction newDirection)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.direction">
            <summary>
            <para>This property holds the direction of the animation when it is in
            Running state.</para>
            <para>This direction indicates whether the time moves from 0 towards
            the animation duration, or from the value of the duration and towards 0
            after start() has been called.</para>
            <para>By default, this property is set to Forward.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.LoopCount">
            <summary>
            <para>This property holds the loop count of the animation.</para>
            <para>This property describes the loop count of the animation as an
            integer. By default this value is 1, indicating that the animation should
            run once only, and then stop. By changing it you can let the animation loop
            several times. With a value of 0, the animation will not run at all, and
            with a value of -1, the animation will loop forever until stopped. It is
            not supported to have loop on an animation that has an undefined duration.
            It will only run once.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.CurrentTime">
            <summary>
            <para>This property holds the current time and progress of the
            animation.</para>
            <para>This property describes the animation's current time. You can
            change the current time by calling setCurrentTime, or you can call start()
            and let the animation run, setting the current time automatically as the
            animation progresses.</para>
            <para>The animation's current time starts at 0, and ends at
            totalDuration().</para>
            <para>See also loopCount and currentLoopTime().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.state">
            <summary>
            <para>This property holds state of the animation.</para>
            <para>This property describes the current state of the animation. When
            the animation state changes, QAbstractAnimation emits the stateChanged()
            signal.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.Group">
            <summary>
            <para>If this animation is part of a QAnimationGroup, this function
            returns a pointer to the group; otherwise, it returns 0.</para>
            <para>See also QAnimationGroup::addAnimation().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.CurrentLoopTime">
            <summary>
            <para>Returns the current time inside the current loop. It can go from
            0 to duration().</para>
            <para>See also duration() and currentTime.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.CurrentLoop">
            <summary>
            <para>This property holds the current loop of the animation.</para>
            <para>This property describes the current loop of the animation. By
            default, the animation's loop count is 1, and so the current loop will
            always be 0. If the loop count is 2 and the animation runs past its
            duration, it will automatically rewind and restart at current time 0, and
            current loop 1, and so on.</para>
            <para>When the current loop changes, QAbstractAnimation emits the
            currentLoopChanged() signal.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.Duration">
            <summary>
            <para>This property holds the duration of the animation.</para>
            <para>If the duration is -1, it means that the duration is undefined.
            In this case, loopCount is ignored.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractAnimation.TotalDuration">
            <summary>
            <para>Returns the total and effective duration of the animation,
            including the loop count.</para>
            <para>See also duration() and currentTime.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractAnimation.Direction">
            <summary>
            <para>This enum describes the direction of the animation when in
            Running state.</para>
            <para>See also direction.</para>
            </summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.Direction.Forward">
            <summary>The current time of the animation increases with time (i.e., moves from 0 and towards the end / duration).</summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.Direction.Backward">
            <summary>The current time of the animation decreases with time (i.e., moves from the end / duration and towards 0).</summary>
        </member>
        <member name="T:QtCore.QAbstractAnimation.State">
            <summary>
            <para>This enum describes the state of the animation.</para>
            <para>See also state() and stateChanged().</para>
            </summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.State.Stopped">
            <summary>The animation is not running. This is the initial state of QAbstractAnimation, and the state QAbstractAnimation reenters when finished. The current time remain unchanged until either setCurrentTime() is called, or the animation is started by calling start().</summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.State.Paused">
            <summary>The animation is paused (i.e., temporarily suspended). Calling resume() will resume animation activity.</summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.State.Running">
            <summary>The animation is running. While control is in the event loop, QAbstractAnimation will update its current time at regular intervals, calling updateCurrentTime() when appropriate.</summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.DeletionPolicy.KeepWhenStopped">
            <summary>The animation will not be deleted when stopped.</summary>
        </member>
        <member name="F:QtCore.QAbstractAnimation.DeletionPolicy.DeleteWhenStopped">
            <summary>The animation will be automatically deleted when stopped.</summary>
        </member>
        <member name="M:QtCore.QAnimationDriver.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAnimationGroup">
            <summary>
            <para>The QAnimationGroup class is an abstract base class for groups of
            animations.</para>
            </summary>
            <remarks>
            <para>An animation group is a container for animations (subclasses of
            QAbstractAnimation). A group is usually responsible for managing the state
            of its animations, i.e., it decides when to start, stop, resume, and pause
            them. Currently, Qt provides two such groups: QParallelAnimationGroup and
            QSequentialAnimationGroup. Look up their class descriptions for
            details.</para>
            <para>Since QAnimationGroup inherits from QAbstractAnimation, you can
            combine groups, and easily construct complex animation graphs. You can
            query QAbstractAnimation for the group it belongs to (using the group()
            function).</para>
            <para>To start a top-level animation group, you simply use the start()
            function from QAbstractAnimation. By a top-level animation group, we think
            of a group that itself is not contained within another group. Starting sub
            groups directly is not supported, and may lead to unexpected
            behavior.</para>
            <para>QAnimationGroup provides methods for adding and retrieving
            animations. Besides that, you can remove animations by calling
            removeAnimation(), and clear the animation group by calling clear(). You
            may keep track of changes in the group's animations by listening to
            QEvent::ChildAdded and QEvent::ChildRemoved events.</para>
            <para>QAnimationGroup takes ownership of the animations it manages, and
            ensures that they are deleted when the animation group is deleted.</para>
            <para></para>
            <para>See also QAbstractAnimation, QVariantAnimation, and The Animation
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAnimationGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QAnimationGroup. parent is passed to QObject's
            constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.AnimationAt(System.Int32)">
            <summary>
            <para>Returns a pointer to the animation at index in this group. This
            function is useful when you need access to a particular animation. index is
            between 0 and animationCount() - 1.</para>
            <para>See also animationCount() and indexOfAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.IndexOfAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Returns the index of animation. The returned index can be passed
            to the other functions that take an index as an argument.</para>
            <para>See also insertAnimation(), animationAt(), and
            takeAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.AddAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Adds animation to this group. This will call insertAnimation with
            index equals to animationCount().</para>
            <para>Note: The group takes ownership of the animation.</para>
            <para>See also removeAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.InsertAnimation(System.Int32,QtCore.QAbstractAnimation)">
            <summary>
            <para>Inserts animation into this animation group at index. If index is
            0 the animation is inserted at the beginning. If index is animationCount(),
            the animation is inserted at the end.</para>
            <para>Note: The group takes ownership of the animation.</para>
            <para>See also takeAnimation(), addAnimation(), indexOfAnimation(), and
            removeAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.RemoveAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Removes animation from this group. The ownership of animation is
            transferred to the caller.</para>
            <para>See also takeAnimation(), insertAnimation(), and
            addAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.TakeAnimation(System.Int32)">
            <summary>
            <para>Returns the animation at index and removes it from the animation
            group.</para>
            <para>Note: The ownership of the animation is transferred to the
            caller.</para>
            <para>See also removeAnimation(), addAnimation(), insertAnimation(),
            and indexOfAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.Clear">
            <summary>
            <para>Removes and deletes all animations in this animation group, and
            resets the current time to 0.</para>
            <para>See also addAnimation() and removeAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAnimationGroup.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAnimationGroup.AnimationCount">
            <summary>
            <para>Returns the number of animations managed by this group.</para>
            <para>See also indexOfAnimation(), addAnimation(), and
            animationAt().</para>
            </summary>
        </member>
        <member name="T:QtCore.QParallelAnimationGroup">
            <summary>
            <para>The QParallelAnimationGroup class provides a parallel group of
            animations.</para>
            </summary>
            <remarks>
            <para>QParallelAnimationGroup--a container for animations--starts all
            its animations when it is started itself, i.e., runs all animations in
            parallel. The animation group finishes when the longest lasting animation
            has finished.</para>
            <para>You can treat QParallelAnimationGroup as any other
            QAbstractAnimation, e.g., pause, resume, or add it to other animation
            groups.</para>
            <para>QParallelAnimationGroup *group = new
            QParallelAnimationGroup;</para>
            <para>group-&gt;addAnimation(anim1);</para>
            <para>group-&gt;addAnimation(anim2);</para>
            <para></para>
            <para>group-&gt;start();</para>
            <para>In this example, anim1 and anim2 are two QPropertyAnimations that
            have already been set up.</para>
            <para></para>
            <para>See also QAnimationGroup, QPropertyAnimation, and The Animation
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QParallelAnimationGroup. parent is passed to
            QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.UpdateCurrentTime(System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractAnimation::updateCurrentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.UpdateState(QtCore.QAbstractAnimation.State,QtCore.QAbstractAnimation.State)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.UpdateDirection(QtCore.QAbstractAnimation.Direction)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateDirection().</para>
            </summary>
        </member>
        <member name="M:QtCore.QParallelAnimationGroup.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QParallelAnimationGroup.Duration">
            <summary>
            <para>Reimplemented from QAbstractAnimation::duration().</para>
            </summary>
        </member>
        <member name="T:QtCore.QPauseAnimation">
            <summary>
            <para>The QPauseAnimation class provides a pause for
            QSequentialAnimationGroup.</para>
            </summary>
            <remarks>
            <para>If you wish to introduce a delay between animations in a
            QSequentialAnimationGroup, you can insert a QPauseAnimation. This class
            does not animate anything, but does not finish before a specified number of
            milliseconds have elapsed from when it was started. You specify the
            duration of the pause in the constructor. It can also be set directly with
            setDuration().</para>
            <para>It is not necessary to construct a QPauseAnimation yourself.
            QSequentialAnimationGroup provides the convenience functions addPause() and
            insertPause(). These functions simply take the number of milliseconds the
            pause should last.</para>
            <para></para>
            <para>See also QSequentialAnimationGroup.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPauseAnimation.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QPauseAnimation. parent is passed to QObject's
            constructor. The default duration is 0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPauseAnimation.#ctor(System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a QPauseAnimation. msecs is the duration of the pause.
            parent is passed to QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPauseAnimation.SetDuration(System.Int32)">
            <summary>
            <para>This property holds the duration of the pause.</para>
            <para>The duration of the pause. The duration should not be negative.
            The default duration is 250 milliseconds.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPauseAnimation.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPauseAnimation.UpdateCurrentTime(System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractAnimation::updateCurrentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPauseAnimation.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPauseAnimation.Duration">
            <summary>
            <para>This property holds the duration of the pause.</para>
            <para>The duration of the pause. The duration should not be negative.
            The default duration is 250 milliseconds.</para>
            </summary>
        </member>
        <member name="T:QtCore.QEasingCurve">
            <summary>
            <para>The QEasingCurve class provides easing curves for controlling
            animation.</para>
            </summary>
            <remarks>
            <para>Easing curves describe a function that controls how the speed of
            the interpolation between 0 and 1 should be. Easing curves allow
            transitions from one value to another to appear more natural than a simple
            constant speed would allow. The QEasingCurve class is usually used in
            conjunction with the QVariantAnimation and QPropertyAnimation classes but
            can be used on its own. It is usually used to accelerate the interpolation
            from zero velocity (ease in) or decelerate to zero velocity (ease out).
            Ease in and ease out can also be combined in the same easing curve.</para>
            <para>To calculate the speed of the interpolation, the easing curve
            provides the function valueForProgress(), where the progress argument
            specifies the progress of the interpolation: 0 is the start value of the
            interpolation, 1 is the end value of the interpolation. The returned value
            is the effective progress of the interpolation. If the returned value is
            the same as the input value for all input values the easing curve is a
            linear curve. This is the default behaviour.</para>
            <para>For example,</para>
            <para>QEasingCurve easing(QEasingCurve::InOutQuad);</para>
            <para></para>
            <para>for(qreal t = 0.0; t &lt; 1.0; t+=0.1)</para>
            <para>    qWarning() &lt;&lt; &quot;Effective progress&quot; &lt;&lt; t
            &lt;&lt; &quot; is</para>
            <para>               &lt;&lt; easing.valueForProgress(t);</para>
            <para></para>
            <para>will print the effective progress of the interpolation between 0
            and 1.</para>
            <para>When using a QPropertyAnimation, the associated easing curve will
            be used to control the progress of the interpolation between startValue and
            endValue:</para>
            <para>QPropertyAnimation animation;</para>
            <para>animation.setStartValue(0);</para>
            <para>animation.setEndValue(1000);</para>
            <para>animation.setDuration(1000);</para>
            <para>animation.setEasingCurve(QEasingCurve::InOutQuad);</para>
            <para>The ability to set an amplitude, overshoot, or period depends on
            the QEasingCurve type. Amplitude access is available to curves that behave
            as springs such as elastic and bounce curves. Changing the amplitude
            changes the height of the curve. Period access is only available to elastic
            curves and setting a higher period slows the rate of bounce. Only curves
            that have &quot;boomerang&quot; behaviors such as the InBack, OutBack,
            InOutBack, and OutInBack have overshoot settings. These curves will
            interpolate beyond the end points and return to the end point, acting
            similar to a boomerang.</para>
            <para>The Easing Curves Example contains samples of QEasingCurve types
            and lets you change the curve settings.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QEasingCurve.#ctor(QtCore.QEasingCurve.Type)">
            <summary>
            <para>Constructs an easing curve of the given type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.#ctor(QtCore.QEasingCurve)">
            <summary>
            <para>Construct a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.Swap(QtCore.QEasingCurve)">
            <summary>
            <para>Swaps curve other with this curve. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.op_Equality(QtCore.QEasingCurve,QtCore.QEasingCurve)">
            <summary>
            <para>Compare this easing curve with other and returns true if they are
            equal. It will also compare the properties of a curve.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.op_Inequality(QtCore.QEasingCurve,QtCore.QEasingCurve)">
            <summary>
            <para>Compare this easing curve with other and returns true if they are
            not equal. It will also compare the properties of a curve.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.AddCubicBezierSegment(QtCore.QPointF,QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Adds a segment of a cubic bezier spline to define a custom easing
            curve. It is only applicable if type() is QEasingCurve::BezierSpline. Note
            that the spline implicitly starts at (0.0, 0.0) and has to end at (1.0,
            1.0) to be a valid easing curve. c1 and c2 are the control points used for
            drawing the curve. endPoint is the endpoint of the curve.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.AddTCBSegment(QtCore.QPointF,System.Double,System.Double,System.Double)">
            <summary>
            <para>Adds a segment of a TCB bezier spline to define a custom easing
            curve. It is only applicable if type() is QEasingCurve::TCBSpline. The
            spline has to start explitly at (0.0, 0.0) and has to end at (1.0, 1.0) to
            be a valid easing curve. The tension t changes the length of the tangent
            vector. The continuity c changes the sharpness in change between the
            tangents. The bias b changes the direction of the tangent vector. nextPoint
            is the sample position. All three parameters are valid between -1 and 1 and
            define the tangent of the control point. If all three parameters are 0 the
            resulting spline is a Catmull-Rom spline. The begin and endpoint always
            have a bias of -1 and 1, since the outer tangent is not defined.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEasingCurve.ValueForProgress(System.Double)">
            <summary>
            <para>Return the effective progress for the easing curve at progress.
            Whereas progress must be between 0 and 1, the returned effective progress
            can be outside those bounds. For example, QEasingCurve::InBack will return
            negative values in the beginning of the function.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEasingCurve.Amplitude">
            <summary>
            <para>Returns the amplitude. This is not applicable for all curve
            types. It is only applicable for bounce and elastic curves (curves of
            type() QEasingCurve::InBounce, QEasingCurve::OutBounce,
            QEasingCurve::InOutBounce, QEasingCurve::OutInBounce,
            QEasingCurve::InElastic, QEasingCurve::OutElastic,
            QEasingCurve::InOutElastic or QEasingCurve::OutInElastic).</para>
            <para>See also setAmplitude().</para>
            <para></para>
            <para>Sets the amplitude to amplitude.</para>
            <para>This will set the amplitude of the bounce or the amplitude of the
            elastic &quot;spring&quot; effect. The higher the number, the higher the
            amplitude.</para>
            <para>See also amplitude().</para>
            </summary>
        </member>
        <member name="P:QtCore.QEasingCurve.Period">
            <summary>
            <para>Returns the period. This is not applicable for all curve types.
            It is only applicable if type() is QEasingCurve::InElastic,
            QEasingCurve::OutElastic, QEasingCurve::InOutElastic or
            QEasingCurve::OutInElastic.</para>
            <para>See also setPeriod().</para>
            <para></para>
            <para>Sets the period to period. Setting a small period value will give
            a high frequency of the curve. A large period will give it a small
            frequency.</para>
            <para>See also period().</para>
            </summary>
        </member>
        <member name="P:QtCore.QEasingCurve.Overshoot">
            <summary>
            <para>Returns the overshoot. This is not applicable for all curve
            types. It is only applicable if type() is QEasingCurve::InBack,
            QEasingCurve::OutBack, QEasingCurve::InOutBack or
            QEasingCurve::OutInBack.</para>
            <para>See also setOvershoot().</para>
            <para></para>
            <para>Sets the overshoot to overshoot.</para>
            <para>0 produces no overshoot, and the default value of 1.70158
            produces an overshoot of 10 percent.</para>
            <para>See also overshoot().</para>
            </summary>
        </member>
        <member name="P:QtCore.QEasingCurve.type">
            <summary>
            <para>Returns the type of the easing curve.</para>
            <para>See also setType().</para>
            <para></para>
            <para>Sets the type of the easing curve to type.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtCore.QEasingCurve.CustomType">
            <summary>
            <para>Returns the function pointer to the custom easing curve. If
            type() does not return QEasingCurve::Custom, this function will return
            0.</para>
            <para>See also setCustomType().</para>
            <para></para>
            <para>Sets a custom easing curve that is defined by the user in the
            function func. The signature of the function is qreal
            myEasingFunction(qreal progress), where progress and the return value are
            considered to be normalized between 0 and 1. (In some cases the return
            value can be outside that range) After calling this function type() will
            return QEasingCurve::Custom. func cannot be zero.</para>
            <para>See also customType() and valueForProgress().</para>
            </summary>
        </member>
        <member name="T:QtCore.QEasingCurve.Type">
            <summary>
            <para>The type of easing curve.</para>
            <para>See also addCubicBezierSegment() and addTCBSegment().</para>
            </summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InQuad">
            <summary>Easing curve for a linear (t) function: velocity is constant.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutQuad">
            <summary>Easing curve for a quadratic (t^2) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutQuad">
            <summary>Easing curve for a quadratic (t^2) function: decelerating to zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInQuad">
            <summary>Easing curve for a quadratic (t^2) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InCubic">
            <summary>Easing curve for a quadratic (t^2) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutCubic">
            <summary>Easing curve for a cubic (t^3) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutCubic">
            <summary>Easing curve for a cubic (t^3) function: decelerating to zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInCubic">
            <summary>Easing curve for a cubic (t^3) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InQuart">
            <summary>Easing curve for a cubic (t^3) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutQuart">
            <summary>Easing curve for a quartic (t^4) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutQuart">
            <summary>Easing curve for a quartic (t^4) function: decelerating to zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInQuart">
            <summary>Easing curve for a quartic (t^4) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InQuint">
            <summary>Easing curve for a quartic (t^4) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutQuint">
            <summary>Easing curve for a quintic (t^5) easing in: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutQuint">
            <summary>Easing curve for a quintic (t^5) function: decelerating to zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInQuint">
            <summary>Easing curve for a quintic (t^5) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InSine">
            <summary>Easing curve for a quintic (t^5) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutSine">
            <summary>Easing curve for a sinusoidal (sin(t)) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutSine">
            <summary>Easing curve for a sinusoidal (sin(t)) function: decelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInSine">
            <summary>Easing curve for a sinusoidal (sin(t)) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InExpo">
            <summary>Easing curve for a sinusoidal (sin(t)) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutExpo">
            <summary>Easing curve for an exponential (2^t) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutExpo">
            <summary>Easing curve for an exponential (2^t) function: decelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInExpo">
            <summary>Easing curve for an exponential (2^t) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InCirc">
            <summary>Easing curve for an exponential (2^t) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutCirc">
            <summary>Easing curve for a circular (sqrt(1-t^2)) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutCirc">
            <summary>Easing curve for a circular (sqrt(1-t^2)) function: decelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInCirc">
            <summary>Easing curve for a circular (sqrt(1-t^2)) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InElastic">
            <summary>Easing curve for a circular (sqrt(1-t^2)) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutElastic">
            <summary>Easing curve for an elastic (exponentially decaying sine wave) function: accelerating from zero velocity. The peak amplitude can be set with the amplitude parameter, and the period of decay by the period parameter.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutElastic">
            <summary>Easing curve for an elastic (exponentially decaying sine wave) function: decelerating from zero velocity. The peak amplitude can be set with the amplitude parameter, and the period of decay by the period parameter.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInElastic">
            <summary>Easing curve for an elastic (exponentially decaying sine wave) function: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InBack">
            <summary>Easing curve for an elastic (exponentially decaying sine wave) function: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutBack">
            <summary>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing in: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutBack">
            <summary>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing out: decelerating to zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInBack">
            <summary>Easing curve for a back (overshooting cubic function: (s+1)*t^3 - s*t^2) easing in/out: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InBounce">
            <summary>Easing curve for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: deceleration until halfway, then acceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutBounce">
            <summary>Easing curve for a bounce (exponentially decaying parabolic bounce) function: accelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.InOutBounce">
            <summary>Easing curve for a bounce (exponentially decaying parabolic bounce) function: decelerating from zero velocity.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.OutInBounce">
            <summary>Easing curve for a bounce (exponentially decaying parabolic bounce) function easing in/out: acceleration until halfway, then deceleration.</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.BezierSpline">
            <summary>Allows defining a custom easing curve using a cubic bezier spline</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.TCBSpline">
            <summary>Allows defining a custom easing curve using a TCB spline</summary>
        </member>
        <member name="F:QtCore.QEasingCurve.Type.Custom">
            <summary>This is returned if the user specified a custom curve type with setCustomType(). Note that you cannot call setType() with this value, but type() can return it.</summary>
        </member>
        <member name="T:QtCore.QVariant">
            <summary>
            <para>The QVariant class acts like a union for the most common Qt data
            types.</para>
            </summary>
            <remarks>
            <para>Because C++ forbids unions from including types that have
            non-default constructors or destructors, most interesting Qt classes cannot
            be used in unions. Without QVariant, this would be a problem for
            QObject::property() and for database work, etc.</para>
            <para>A QVariant object holds a single value of a single type() at a
            time. (Some type()s are multi-valued, for example a string list.) You can
            find out what type, T, the variant holds, convert it to a different type
            using convert(), get its value using one of the toT() functions (e.g.,
            toSize()) and check whether the type can be converted to a particular type
            using canConvert().</para>
            <para>The methods named toT() (e.g., toInt(), toString()) are const. If
            you ask for the stored type, they return a copy of the stored object. If
            you ask for a type that can be generated from the stored type, toT() copies
            and converts and leaves the object itself unchanged. If you ask for a type
            that cannot be generated from the stored type, the result depends on the
            type; see the function documentation for details.</para>
            <para>Here is some example code to demonstrate the use of
            QVariant:</para>
            <para>QDataStream out(...);</para>
            <para>QVariant v(123);                // The variant now contains an
            int</para>
            <para>int x = v.toInt();              // x = 123</para>
            <para>out &lt;&lt; v;                       // Writes a type tag and an
            int to out</para>
            <para>v = QVariant(&quot;hello&quot;);          // The variant now
            contains a QByteArray</para>
            <para>v = QVariant(tr(&quot;hello&quot;));      // The variant now
            contains a QString</para>
            <para>int y = v.toInt();              // y = 0 since v cannot be
            converted to an int</para>
            <para>QString s = v.toString();       // s = tr(&quot;hello&quot;)
            (see QObject::tr())</para>
            <para>out &lt;&lt; v;                       // Writes a type tag and a
            QString to out</para>
            <para>...</para>
            <para>QDataStream in(...);            // (opening the previously
            written stream)</para>
            <para>in &gt;&gt; v;                        // Reads an Int
            variant</para>
            <para>int z = v.toInt();              // z = 123</para>
            <para>qDebug(&quot;Type is %s&quot;,            // prints &quot;Type is
            int&quot;</para>
            <para>        v.typeName());</para>
            <para>v = v.toInt() + 100;            // The variant now hold the value
            223</para>
            <para>v = QVariant(QStringList());</para>
            <para>You can even store QList&lt;QVariant&gt; and QMap&lt;QString,
            QVariant&gt; values in a variant, so you can easily construct arbitrarily
            complex data structures of arbitrary types. This is very powerful and
            versatile, but may prove less memory and speed efficient than storing
            specific types in standard data structures.</para>
            <para>QVariant also supports the notion of null values, where you can
            have a defined type with no value set. However, note that QVariant types
            can only be cast when they have had a value set.</para>
            <para>QVariant x, y(QString()), z(QString(&quot;&quot;));</para>
            <para>x.convert(QVariant::Int);</para>
            <para>// x.isNull() == true</para>
            <para>// y.isNull() == true, z.isNull() == false</para>
            <para>QVariant can be extended to support other types than those
            mentioned in the Type enum. See the QMetaType documentation for
            details.</para>
            <para></para>
            <para>A Note on GUI Types</para>
            <para>Because QVariant is part of the Qt Core module, it cannot provide
            conversion functions to data types defined in Qt GUI, such as QColor,
            QImage, and QPixmap. In other words, there is no toColor() function.
            Instead, you can use the QVariant::value() or the qvariant_cast() template
            function. For example:</para>
            <para>QVariant variant;</para>
            <para>...</para>
            <para>QColor color = variant.value&lt;QColor&gt;();</para>
            <para>The inverse conversion (e.g., from QColor to QVariant) is
            automatic for all data types supported by QVariant, including GUI-related
            types:</para>
            <para>QColor color = palette().background().color();</para>
            <para>QVariant variant = color;</para>
            <para></para>
            <para>Using canConvert() and convert() Consecutively</para>
            <para>When using canConvert() and convert() consecutively, it is
            possible for canConvert() to return true, but convert() to return false.
            This is typically because canConvert() only reports the general ability of
            QVariant to convert between types given suitable data; it is still possible
            to supply data which cannot actually be converted.</para>
            <para>For example, canConvert(Int) would return true when called on a
            variant containing a string because, in principle, QVariant is able to
            convert strings of numbers to integers. However, if the string contains
            non-numeric characters, it cannot be converted to an integer, and any
            attempt to convert it will fail. Hence, it is important to have both
            functions return true for a successful conversion.</para>
            <para></para>
            <para>See also QMetaType.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QVariant.Type)">
            <summary>
            <para>Constructs a null variant of type type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Int32,System.IntPtr)">
            <summary>
            <para>Constructs variant of type typeId, and initializes with copy if
            copy is not 0.</para>
            <para>Note that you have to pass the address of the variable you want
            stored.</para>
            <para>Usually, you never have to use this constructor, use
            QVariant::fromValue() instead to construct variants from the pointer types
            represented by QMetaType::VoidStar, and QMetaType::QObjectStar.</para>
            <para>See also QVariant::fromValue() and QMetaType::Type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QVariant)">
            <summary>
            <para>Constructs a copy of the variant, p, passed as the argument to
            this constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QDataStream)">
            <summary>
            <para>Reads the variant from the data stream, s.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Int32)">
            <summary>
            <para>Constructs a new variant with an integer value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.UInt32)">
            <summary>
            <para>Constructs a new variant with an unsigned integer value,
            val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Int64)">
            <summary>
            <para>Constructs a new variant with a long long integer value,
            val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.UInt64)">
            <summary>
            <para>Constructs a new variant with an unsigned long long integer
            value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Boolean)">
            <summary>
            <para>Constructs a new variant with a boolean value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Double)">
            <summary>
            <para>Constructs a new variant with a floating point value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.Single)">
            <summary>
            <para>Constructs a new variant with a floating point value, val.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(System.String)">
            <summary>
            <para>Constructs a new variant with a string value of val. The variant
            creates a deep copy of val into a QString assuming UTF-8 encoding on the
            input val.</para>
            <para>Note that val is converted to a QString for storing in the
            variant and QVariant::userType() will return QMetaType::QString for the
            variant.</para>
            <para>You can disable this operator by defining QT_NO_CAST_FROM_ASCII
            when you compile your applications.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a new variant with a bytearray value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QBitArray)">
            <summary>
            <para>Constructs a new variant with a bitarray value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QLatin1String)">
            <summary>
            <para>Constructs a new variant with a string value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QStringList)">
            <summary>
            <para>Constructs a new variant with a string list value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QChar)">
            <summary>
            <para>Constructs a new variant with a char value, c.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QDate)">
            <summary>
            <para>Constructs a new variant with a date value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QTime)">
            <summary>
            <para>Constructs a new variant with a time value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QDateTime)">
            <summary>
            <para>Constructs a new variant with a date/time value, val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QSize)">
            <summary>
            <para>Constructs a new variant with a size value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QSizeF)">
            <summary>
            <para>Constructs a new variant with a size value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QPoint)">
            <summary>
            <para>Constructs a new variant with a point value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QPointF)">
            <summary>
            <para>Constructs a new variant with a point value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QLine)">
            <summary>
            <para>Constructs a new variant with a line value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QLineF)">
            <summary>
            <para>Constructs a new variant with a line value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QRect)">
            <summary>
            <para>Constructs a new variant with a rect value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QRectF)">
            <summary>
            <para>Constructs a new variant with a rect value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QLocale)">
            <summary>
            <para>Constructs a new variant with a locale value, l.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QRegExp)">
            <summary>
            <para>Constructs a new variant with the regexp value regExp.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QRegularExpression)">
            <summary>
            <para>Constructs a new variant with the regular expression value
            re.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QUrl)">
            <summary>
            <para>Constructs a new variant with a url value of val.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QEasingCurve)">
            <summary>
            <para>Constructs a new variant with an easing curve value, val.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QUuid)">
            <summary>
            <para>Constructs a new variant with an uuid value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QModelIndex)">
            <summary>
            <para>Constructs a new variant with a QModelIndex value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QPersistentModelIndex)">
            <summary>
            <para>Constructs a new variant with a QPersistentModelIndex value,
            val.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QJsonValue)">
            <summary>
            <para>Constructs a new variant with a json value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QJsonObject)">
            <summary>
            <para>Constructs a new variant with a json object value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QJsonArray)">
            <summary>
            <para>Constructs a new variant with a json array value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.#ctor(QtCore.QJsonDocument)">
            <summary>
            <para>Constructs a new variant with a json document value, val.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.Swap(QtCore.QVariant)">
            <summary>
            <para>Swaps variant other with this variant. This operation is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.CanConvert(System.Int32)">
            <summary>
            <para>Returns true if the variant's type can be cast to the requested
            type, targetTypeId. Such casting is done automatically when calling the
            toInt(), toBool(), ... methods.</para>
            <para>The following casts are done automatically:</para>
            <para></para>
            <para> TypeAutomatically Cast To</para>
            <para>QMetaType::Bool	QMetaType::QChar, QMetaType::Double,
            QMetaType::Int, QMetaType::LongLong, QMetaType::QString, QMetaType::UInt,
            QMetaType::ULongLong</para>
            <para>QMetaType::QByteArray	QMetaType::Double, QMetaType::Int,
            QMetaType::LongLong, QMetaType::QString, QMetaType::UInt,
            QMetaType::ULongLong</para>
            <para>QMetaType::QChar	QMetaType::Bool, QMetaType::Int,
            QMetaType::UInt, QMetaType::LongLong, QMetaType::ULongLong</para>
            <para>QMetaType::QColor	QMetaType::QString</para>
            <para>QMetaType::QDate	QMetaType::QDateTime, QMetaType::QString</para>
            <para>QMetaType::QDateTime	QMetaType::QDate, QMetaType::QString,
            QMetaType::QTime</para>
            <para>QMetaType::Double	QMetaType::Bool, QMetaType::Int,
            QMetaType::LongLong, QMetaType::QString, QMetaType::UInt,
            QMetaType::ULongLong</para>
            <para>QMetaType::QFont	QMetaType::QString</para>
            <para>QMetaType::Int	QMetaType::Bool, QMetaType::QChar,
            QMetaType::Double, QMetaType::LongLong, QMetaType::QString,
            QMetaType::UInt, QMetaType::ULongLong</para>
            <para>QMetaType::QKeySequence	QMetaType::Int, QMetaType::QString</para>
            <para>QMetaType::QVariantList	QMetaType::QStringList (if the list's
            items can be converted to QStrings)</para>
            <para>QMetaType::LongLong	QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::QString,
            QMetaType::UInt, QMetaType::ULongLong</para>
            <para>QMetaType::QPoint	QMetaType::QPointF</para>
            <para>QMetaType::QRect	QMetaType::QRectF</para>
            <para>QMetaType::QString	QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::QColor, QMetaType::QDate,
            QMetaType::QDateTime, QMetaType::Double, QMetaType::QFont, QMetaType::Int,
            QMetaType::QKeySequence, QMetaType::LongLong, QMetaType::QStringList,
            QMetaType::QTime, QMetaType::UInt, QMetaType::ULongLong</para>
            <para>QMetaType::QStringList	QMetaType::QVariantList,
            QMetaType::QString (if the list contains exactly one item)</para>
            <para>QMetaType::QTime	QMetaType::QString</para>
            <para>QMetaType::UInt	QMetaType::Bool, QMetaType::QChar,
            QMetaType::Double, QMetaType::Int, QMetaType::LongLong, QMetaType::QString,
            QMetaType::ULongLong</para>
            <para>QMetaType::ULongLong	QMetaType::Bool, QMetaType::QChar,
            QMetaType::Double, QMetaType::Int, QMetaType::LongLong, QMetaType::QString,
            QMetaType::UInt</para>
            <para></para>
            <para>A QVariant containing a pointer to a type derived from QObject
            will also return true for this function if a qobject_cast to the type
            described by targetTypeId would succeed. Note that this only works for
            QObject subclasses which use the Q_OBJECT macro.</para>
            <para>A QVariant containing a sequential container will also return
            true for this function if the targetTypeId is QVariantList. It is possible
            to iterate over the contents of the container without extracting it as a
            (copied) QVariantList:</para>
            <para>QList&lt;int&gt; intList;</para>
            <para>intList.push_back(7);</para>
            <para>intList.push_back(11);</para>
            <para>intList.push_back(42);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(intList);</para>
            <para>if (variant.canConvert&lt;QVariantList&gt;()) {</para>
            <para>    QSequentialIterable iterable =
            variant.value&lt;QSequentialIterable&gt;();</para>
            <para>    // Can use foreach:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QSequentialIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QSequentialIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it;</para>
            <para>    }</para>
            <para>}</para>
            <para>This requires that the value_type of the container is itself a
            metatype.</para>
            <para>Similarly, a QVariant containing a sequential container will also
            return true for this function the targetTypeId is QVariantHash or
            QVariantMap. It is possible to iterate over the contents of the container
            without extracting it as a (copied) QVariantHash or QVariantMap:</para>
            <para>QHash&lt;int, QString&gt; mapping;</para>
            <para>mapping.insert(7, &quot;Seven&quot;);</para>
            <para>mapping.insert(11, &quot;Eleven&quot;);</para>
            <para>mapping.insert(42, &quot;Forty-two&quot;);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(mapping);</para>
            <para>if (variant.canConvert&lt;QVariantHash&gt;()) {</para>
            <para>    QAssociativeIterable iterable =
            variant.value&lt;QAssociativeIterable&gt;();</para>
            <para>    // Can use foreach over the values:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for over the values:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QAssociativeIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QAssociativeIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it; // The current value</para>
            <para>        qDebug() &lt;&lt; it.key();</para>
            <para>        qDebug() &lt;&lt; it.value();</para>
            <para>    }</para>
            <para>}</para>
            <para>See also convert(), QSequentialIterable,
            Q_DECLARE_SEQUENTIAL_CONTAINER_METATYPE(), QAssociativeIterable, and
            Q_DECLARE_ASSOCIATIVE_CONTAINER_METATYPE().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.Convert(System.Int32)">
            <summary>
            <para>Casts the variant to the requested type, targetTypeId. If the
            cast cannot be done, the variant is cleared. Returns true if the current
            type of the variant was successfully cast; otherwise returns false.</para>
            <para>A QVariant containing a pointer to a type derived from QObject
            will also convert and return true for this function if a qobject_cast to
            the type described by targetTypeId would succeed. Note that this only works
            for QObject subclasses which use the Q_OBJECT macro.</para>
            <para>Warning: For historical reasons, converting a null QVariant
            results in a null value of the desired type (e.g., an empty string for
            QString) and a result of false.</para>
            <para>See also canConvert() and clear().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.Clear">
            <summary>
            <para>Convert this variant to type QMetaType::UnknownType and free up
            any resources used.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToInt(System.Boolean@)">
            <summary>
            <para>Returns the variant as an int if the variant has userType()
            QMetaType::Int, QMetaType::Bool, QMetaType::QByteArray, QMetaType::QChar,
            QMetaType::Double, QMetaType::LongLong, QMetaType::QString,
            QMetaType::UInt, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>Warning: If the value is convertible to a QMetaType::LongLong but
            is too large to be represented in an int, the resulting arithmetic overflow
            will not be reflected in ok. A simple workaround is to use
            QString::toInt().</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToUInt(System.Boolean@)">
            <summary>
            <para>Returns the variant as an unsigned int if the variant has
            userType() QMetaType::UInt, QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an unsigned int; otherwise *ok is set to false.</para>
            <para>Warning: If the value is convertible to a QMetaType::ULongLong
            but is too large to be represented in an unsigned int, the resulting
            arithmetic overflow will not be reflected in ok. A simple workaround is to
            use QString::toUInt().</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToLongLong(System.Boolean@)">
            <summary>
            <para>Returns the variant as a long long int if the variant has
            userType() QMetaType::LongLong, QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::QString,
            QMetaType::UInt, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToULongLong(System.Boolean@)">
            <summary>
            <para>Returns the variant as as an unsigned long long int if the
            variant has type() QMetaType::ULongLong, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::QChar, QMetaType::Double, QMetaType::Int,
            QMetaType::LongLong, QMetaType::QString, or QMetaType::UInt; otherwise
            returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToBool">
            <summary>
            <para>Returns the variant as a bool if the variant has userType()
            Bool.</para>
            <para>Returns true if the variant has userType() QMetaType::Bool,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::LongLong,
            QMetaType::UInt, or QMetaType::ULongLong and the value is non-zero, or if
            the variant has type QMetaType::QString or QMetaType::QByteArray and its
            lower-case content is not one of the following: empty, &quot;0&quot; or
            &quot;false&quot;; otherwise returns false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToDouble(System.Boolean@)">
            <summary>
            <para>Returns the variant as a double if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToFloat(System.Boolean@)">
            <summary>
            <para>Returns the variant as a float if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToReal(System.Boolean@)">
            <summary>
            <para>Returns the variant as a qreal if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToByteArray">
            <summary>
            <para>Returns the variant as a QByteArray if the variant has userType()
            QMetaType::QByteArray or QMetaType::QString (converted using
            QString::fromUtf8()); otherwise returns an empty byte array.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToBitArray">
            <summary>
            <para>Returns the variant as a QBitArray if the variant has userType()
            QMetaType::QBitArray; otherwise returns an empty bit array.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToString">
            <summary>
            <para>Returns the variant as a QString if the variant has userType()
            QMetaType::QString, QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::QDate, QMetaType::QDateTime,
            QMetaType::Double, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QStringList, QMetaType::QTime, QMetaType::UInt, or
            QMetaType::ULongLong; otherwise returns an empty string.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToStringList">
            <summary>
            <para>Returns the variant as a QStringList if the variant has
            userType() QMetaType::QStringList, QMetaType::QString, or
            QMetaType::QVariantList of a type that can be converted to QString;
            otherwise returns an empty list.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToChar">
            <summary>
            <para>Returns the variant as a QChar if the variant has userType()
            QMetaType::QChar, QMetaType::Int, or QMetaType::UInt; otherwise returns an
            invalid QChar.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToDate">
            <summary>
            <para>Returns the variant as a QDate if the variant has userType()
            QMetaType::QDate, QMetaType::QDateTime, or QMetaType::QString; otherwise
            returns an invalid date.</para>
            <para>If the type() is QMetaType::QString, an invalid date will be
            returned if the string cannot be parsed as a Qt::ISODate format
            date.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToTime">
            <summary>
            <para>Returns the variant as a QTime if the variant has userType()
            QMetaType::QTime, QMetaType::QDateTime, or QMetaType::QString; otherwise
            returns an invalid time.</para>
            <para>If the type() is QMetaType::QString, an invalid time will be
            returned if the string cannot be parsed as a Qt::ISODate format
            time.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToDateTime">
            <summary>
            <para>Returns the variant as a QDateTime if the variant has userType()
            QMetaType::QDateTime, QMetaType::QDate, or QMetaType::QString; otherwise
            returns an invalid date/time.</para>
            <para>If the type() is QMetaType::QString, an invalid date/time will be
            returned if the string cannot be parsed as a Qt::ISODate format
            date/time.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToPoint">
            <summary>
            <para>Returns the variant as a QPoint if the variant has userType()
            QMetaType::QPointF or QMetaType::QPointF; otherwise returns a null
            QPoint.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToPointF">
            <summary>
            <para>Returns the variant as a QPointF if the variant has userType()
            QMetaType::QPoint or QMetaType::QPointF; otherwise returns a null
            QPointF.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToRect">
            <summary>
            <para>Returns the variant as a QRect if the variant has userType()
            QMetaType::QRect; otherwise returns an invalid QRect.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToSize">
            <summary>
            <para>Returns the variant as a QSize if the variant has userType()
            QMetaType::QSize; otherwise returns an invalid QSize.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToSizeF">
            <summary>
            <para>Returns the variant as a QSizeF if the variant has userType()
            QMetaType::QSizeF; otherwise returns an invalid QSizeF.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToLine">
            <summary>
            <para>Returns the variant as a QLine if the variant has userType()
            QMetaType::QLine; otherwise returns an invalid QLine.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToLineF">
            <summary>
            <para>Returns the variant as a QLineF if the variant has userType()
            QMetaType::QLineF; otherwise returns an invalid QLineF.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToRectF">
            <summary>
            <para>Returns the variant as a QRectF if the variant has userType()
            QMetaType::QRect or QMetaType::QRectF; otherwise returns an invalid
            QRectF.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToLocale">
            <summary>
            <para>Returns the variant as a QLocale if the variant has userType()
            QMetaType::QLocale; otherwise returns an invalid QLocale.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToRegExp">
            <summary>
            <para>Returns the variant as a QRegExp if the variant has userType()
            QMetaType::QRegExp; otherwise returns an empty QRegExp.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToRegularExpression">
            <summary>
            <para>Returns the variant as a QRegularExpression if the variant has
            userType() QRegularExpression; otherwise returns an empty
            QRegularExpression.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToUrl">
            <summary>
            <para>Returns the variant as a QUrl if the variant has userType()
            QMetaType::QUrl; otherwise returns an invalid QUrl.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToEasingCurve">
            <summary>
            <para>Returns the variant as a QEasingCurve if the variant has
            userType() QMetaType::QEasingCurve; otherwise returns a default easing
            curve.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToUuid">
            <summary>
            <para>Returns the variant as a QUuid if the variant has userType()
            QUuid; otherwise returns a default constructed QUuid.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToModelIndex">
            <summary>
            <para>Returns the variant as a QModelIndex if the variant has
            userType() QModelIndex; otherwise returns a default constructed
            QModelIndex.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert(), convert(), and
            toPersistentModelIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToPersistentModelIndex">
            <summary>
            <para>Returns the variant as a QPersistentModelIndex if the variant has
            userType() QPersistentModelIndex; otherwise returns a default constructed
            QPersistentModelIndex.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also canConvert(), convert(), and toModelIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToJsonValue">
            <summary>
            <para>Returns the variant as a QJsonValue if the variant has userType()
            QJsonValue; otherwise returns a default constructed QJsonValue.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToJsonObject">
            <summary>
            <para>Returns the variant as a QJsonObject if the variant has
            userType() QJsonObject; otherwise returns a default constructed
            QJsonObject.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToJsonArray">
            <summary>
            <para>Returns the variant as a QJsonArray if the variant has userType()
            QJsonArray; otherwise returns a default constructed QJsonArray.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToJsonDocument">
            <summary>
            <para>Returns the variant as a QJsonDocument if the variant has
            userType() QJsonDocument; otherwise returns a default constructed
            QJsonDocument.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_Equality(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if they are equal;
            otherwise returns false.</para>
            <para>QVariant uses the equality operator of the type() it contains to
            check for equality. QVariant will try to convert() v if its type is not the
            same as this variant's type. See canConvert() for a list of possible
            conversions.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_Inequality(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if they are not
            equal; otherwise returns false.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_LessThan(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if this is less
            than v.</para>
            <para>Note: Comparability might not be availabe for the type stored in
            this QVariant or in v.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_LessThanOrEqual(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if this is less or
            equal than v.</para>
            <para>Note: Comparability might not be available for the type stored in
            this QVariant or in v.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_GreaterThan(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if this is larger
            than v.</para>
            <para>Note: Comparability might not be available for the type stored in
            this QVariant or in v.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.op_GreaterThanOrEqual(QtCore.QVariant,QtCore.QVariant)">
            <summary>
            <para>Compares this QVariant with v and returns true if this is larger
            or equal than v.</para>
            <para>Note: Comparability might not be available for the type stored in
            this QVariant or in v.</para>
            <para>Warning: To make this function work with a custom type registered
            with qRegisterMetaType(), its comparison operator must be registered using
            QMetaType::registerComparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToInt">
            <summary>
            <para>Returns the variant as an int if the variant has userType()
            QMetaType::Int, QMetaType::Bool, QMetaType::QByteArray, QMetaType::QChar,
            QMetaType::Double, QMetaType::LongLong, QMetaType::QString,
            QMetaType::UInt, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>Warning: If the value is convertible to a QMetaType::LongLong but
            is too large to be represented in an int, the resulting arithmetic overflow
            will not be reflected in ok. A simple workaround is to use
            QString::toInt().</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToUInt">
            <summary>
            <para>Returns the variant as an unsigned int if the variant has
            userType() QMetaType::UInt, QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an unsigned int; otherwise *ok is set to false.</para>
            <para>Warning: If the value is convertible to a QMetaType::ULongLong
            but is too large to be represented in an unsigned int, the resulting
            arithmetic overflow will not be reflected in ok. A simple workaround is to
            use QString::toUInt().</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToLongLong">
            <summary>
            <para>Returns the variant as a long long int if the variant has
            userType() QMetaType::LongLong, QMetaType::Bool, QMetaType::QByteArray,
            QMetaType::QChar, QMetaType::Double, QMetaType::Int, QMetaType::QString,
            QMetaType::UInt, or QMetaType::ULongLong; otherwise returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToULongLong">
            <summary>
            <para>Returns the variant as as an unsigned long long int if the
            variant has type() QMetaType::ULongLong, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::QChar, QMetaType::Double, QMetaType::Int,
            QMetaType::LongLong, QMetaType::QString, or QMetaType::UInt; otherwise
            returns 0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to an int; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToDouble">
            <summary>
            <para>Returns the variant as a double if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToFloat">
            <summary>
            <para>Returns the variant as a float if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.ToReal">
            <summary>
            <para>Returns the variant as a qreal if the variant has userType()
            QMetaType::Double, QMetaType::Float, QMetaType::Bool,
            QMetaType::QByteArray, QMetaType::Int, QMetaType::LongLong,
            QMetaType::QString, QMetaType::UInt, or QMetaType::ULongLong; otherwise
            returns 0.0.</para>
            <para>If ok is non-null: *ok is set to true if the value could be
            converted to a double; otherwise *ok is set to false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also canConvert() and convert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.TypeToName(System.Int32)">
            <summary>
            <para>Converts the int representation of the storage type, typeId, to
            its string representation.</para>
            <para>Returns a null pointer if the type is QMetaType::UnknownType or
            doesn't exist.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariant.NameToType(System.String)">
            <summary>
            <para>Converts the string representation of the storage type given in
            name, to its enum representation.</para>
            <para>If the string representation cannot be converted to any enum
            representation, the variant is set to Invalid.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariant.type">
            <summary>
            <para>Returns the storage type of the value stored in the variant.
            Although this function is declared as returning QVariant::Type, the return
            value should be interpreted as QMetaType::Type. In particular,
            QVariant::UserType is returned here only if the value is equal or greater
            than QMetaType::User.</para>
            <para>Note that return values in the ranges QVariant::Char through
            QVariant::RegExp and QVariant::Font through QVariant::Transform correspond
            to the values in the ranges QMetaType::QChar through QMetaType::QRegExp and
            QMetaType::QFont through QMetaType::QQuaternion.</para>
            <para>Pay particular attention when working with char and QChar
            variants. Note that there is no QVariant constructor specifically for type
            char, but there is one for QChar. For a variant of type QChar, this
            function returns QVariant::Char, which is the same as QMetaType::QChar, but
            for a variant of type char, this function returns QMetaType::Char, which is
            not the same as QVariant::Char.</para>
            <para>Also note that the types void*, long, short, unsigned long,
            unsigned short, unsigned char, float, QObject*, and QWidget* are
            represented in QMetaType::Type but not in QVariant::Type, and they can be
            returned by this function. However, they are considered to be user defined
            types when tested against QVariant::Type.</para>
            <para>To test whether an instance of QVariant contains a data type that
            is compatible with the data type you are interested in, use
            canConvert().</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariant.UserType">
            <summary>
            <para>Returns the storage type of the value stored in the variant. For
            non-user types, this is the same as type().</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariant.TypeName">
            <summary>
            <para>Returns the name of the type stored in the variant. The returned
            strings describe the C++ datatype used to store the data: for example,
            &quot;QFont&quot;, &quot;QString&quot;, or &quot;QVariantList&quot;. An
            Invalid variant returns 0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariant.IsValid">
            <summary>
            <para>Returns true if the storage type of this variant is not
            QMetaType::UnknownType; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariant.IsNull">
            <summary>
            <para>Returns true if this is a null variant, false otherwise. A
            variant is considered null if it contains a default constructed value or a
            built-in type instance that has an isNull method, in which case the result
            would be the same as calling isNull on the wrapped object.</para>
            <para>Warning: The result of the function doesn't affect == operator,
            which means that two values can be equal even if one of them is null and
            another is not.</para>
            </summary>
        </member>
        <member name="T:QtCore.QVariant.Type">
            <summary>
            <para>This enum type defines the types of variable that a QVariant can
            contain.</para>
            </summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Invalid">
            <summary>no type</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Bool">
            <summary>a bool</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Int">
            <summary>an int</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.UInt">
            <summary>a uint</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.LongLong">
            <summary>a qlonglong</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.ULongLong">
            <summary>a qulonglong</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Double">
            <summary>a double</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Char">
            <summary>a QChar</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Map">
            <summary>a QVariantMap</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.List">
            <summary>a QVariantList</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.String">
            <summary>a QString</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.StringList">
            <summary>a QStringList</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.ByteArray">
            <summary>a QByteArray</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.BitArray">
            <summary>a QBitArray</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Date">
            <summary>a QDate</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Time">
            <summary>a QTime</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.DateTime">
            <summary>a QDateTime</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Url">
            <summary>a QUrl</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Locale">
            <summary>a QLocale</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Rect">
            <summary>a QRect</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.RectF">
            <summary>a QRectF</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Size">
            <summary>a QSize</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.SizeF">
            <summary>a QSizeF</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Line">
            <summary>a QLine</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.LineF">
            <summary>a QLineF</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Point">
            <summary>a QPoint</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.PointF">
            <summary>a QPointF</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.RegExp">
            <summary>a QRegExp</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.RegularExpression">
            <summary>a QRegularExpression</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Hash">
            <summary>a QVariantHash</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.EasingCurve">
            <summary>a QEasingCurve</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Uuid">
            <summary>a QUuid</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.ModelIndex">
            <summary>a QModelIndex</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.PersistentModelIndex">
            <summary>a QPersistentModelIndex (since 5.5)</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Font">
            <summary>a QFont</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Pixmap">
            <summary>a QPixmap</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Brush">
            <summary>a QBrush</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Color">
            <summary>a QColor</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Palette">
            <summary>a QPalette</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Image">
            <summary>a QImage</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Polygon">
            <summary>a QPolygon</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Region">
            <summary>a QRegion</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Bitmap">
            <summary>a QBitmap</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Cursor">
            <summary>a QCursor</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.KeySequence">
            <summary>a QKeySequence</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Pen">
            <summary>a QPen</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.TextLength">
            <summary>a QTextLength</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.TextFormat">
            <summary>a QTextFormat</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Matrix">
            <summary>a QMatrix</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Transform">
            <summary>a QTransform</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Matrix4x4">
            <summary>a QMatrix4x4</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Vector2D">
            <summary>a QVector2D</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Vector3D">
            <summary>a QVector3D</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Vector4D">
            <summary>a QVector4D</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Quaternion">
            <summary>a QQuaternion</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.PolygonF">
            <summary>a QPolygonF</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.Icon">
            <summary>a QIcon</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.SizePolicy">
            <summary>a QSizePolicy</summary>
        </member>
        <member name="F:QtCore.QVariant.Type.UserType">
            <summary>Base value for user-defined types.</summary>
        </member>
        <member name="T:QtCore.QSequentialIterable">
            <summary>
            <para>The QSequentialIterable class is an iterable interface for a
            container in a QVariant.</para>
            </summary>
            <remarks>
            <para>This class allows several methods of accessing the elements of a
            container held within a QVariant. An instance of QSequentialIterable can be
            extracted from a QVariant if it can be converted to a QVariantList.</para>
            <para>QList&lt;int&gt; intList;</para>
            <para>intList.push_back(7);</para>
            <para>intList.push_back(11);</para>
            <para>intList.push_back(42);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(intList);</para>
            <para>if (variant.canConvert&lt;QVariantList&gt;()) {</para>
            <para>    QSequentialIterable iterable =
            variant.value&lt;QSequentialIterable&gt;();</para>
            <para>    // Can use foreach:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QSequentialIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QSequentialIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it;</para>
            <para>    }</para>
            <para>}</para>
            <para>The container itself is not copied before iterating over
            it.</para>
            <para></para>
            <para>See also QVariant.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSequentialIterable.Begin">
            <summary>
            <para>Returns a QSequentialIterable::const_iterator for the beginning
            of the container. This can be used in stl-style iteration.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.End">
            <summary>
            <para>Returns a QSequentialIterable::const_iterator for the end of the
            container. This can be used in stl-style iteration.</para>
            <para>See also begin().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.At(System.Int32)">
            <summary>
            <para>Returns the element at position idx in the container.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.CanReverseIterate">
            <summary>
            <para>Returns whether it is possible to iterate over the container in
            reverse. This corresponds to the std::bidirectional_iterator_tag iterator
            trait of the const_iterator of the container.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSequentialIterable.Size">
            <summary>
            <para>Returns the number of elements in the container.</para>
            </summary>
        </member>
        <member name="T:QtCore.QSequentialIterable.Const_iterator">
            <summary>
            <para>The QAssociativeIterable::const_iterator allows iteration over a
            container in a QVariant.</para>
            </summary>
            <remarks>
            <para>A QAssociativeIterable::const_iterator can only be created by a
            QAssociativeIterable instance, and can be used in a way similar to other
            stl-style iterators.</para>
            <para>QHash&lt;int, QString&gt; mapping;</para>
            <para>mapping.insert(7, &quot;Seven&quot;);</para>
            <para>mapping.insert(11, &quot;Eleven&quot;);</para>
            <para>mapping.insert(42, &quot;Forty-two&quot;);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(mapping);</para>
            <para>if (variant.canConvert&lt;QVariantHash&gt;()) {</para>
            <para>    QAssociativeIterable iterable =
            variant.value&lt;QAssociativeIterable&gt;();</para>
            <para>    // Can use foreach over the values:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for over the values:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QAssociativeIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QAssociativeIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it; // The current value</para>
            <para>        qDebug() &lt;&lt; it.key();</para>
            <para>        qDebug() &lt;&lt; it.value();</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>See also QAssociativeIterable.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.#ctor(QtCore.QSequentialIterable.Const_iterator)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Equality(QtCore.QSequentialIterable.Const_iterator,QtCore.QSequentialIterable.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Inequality(QtCore.QSequentialIterable.Const_iterator,QtCore.QSequentialIterable.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Increment(QtCore.QSequentialIterable.Const_iterator)">
            <summary>
            <para>The prefix ++ operator (++it) advances the iterator to the next
            item in the container and returns an iterator to the new current
            item.</para>
            <para>Calling this function on QSequentialIterable::end() leads to
            undefined results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Decrement(QtCore.QSequentialIterable.Const_iterator)">
            <summary>
            <para>The prefix -- operator (--it) makes the preceding item current
            and returns an iterator to the new current item.</para>
            <para>Calling this function on QSequentialIterable::begin() leads to
            undefined results.</para>
            <para>If the container in the QVariant does not support bi-directional
            iteration, calling this function leads to undefined results.</para>
            <para>See also operator++() and canReverseIterate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Addition(QtCore.QSequentialIterable.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator.</para>
            <para>See also operator-() and operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialIterable.Const_iterator.op_Subtraction(QtCore.QSequentialIterable.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator.</para>
            <para>If the container in the QVariant does not support bi-directional
            iteration, calling this function leads to undefined results.</para>
            <para>See also operator+(), operator-=(), and
            canReverseIterate().</para>
            </summary>
        </member>
        <member name="T:QtCore.QAssociativeIterable">
            <summary>
            <para>The QAssociativeIterable class is an iterable interface for an
            associative container in a QVariant.</para>
            </summary>
            <remarks>
            <para>This class allows several methods of accessing the elements of an
            associative container held within a QVariant. An instance of
            QAssociativeIterable can be extracted from a QVariant if it can be
            converted to a QVariantHash or QVariantMap.</para>
            <para>QHash&lt;int, QString&gt; mapping;</para>
            <para>mapping.insert(7, &quot;Seven&quot;);</para>
            <para>mapping.insert(11, &quot;Eleven&quot;);</para>
            <para>mapping.insert(42, &quot;Forty-two&quot;);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(mapping);</para>
            <para>if (variant.canConvert&lt;QVariantHash&gt;()) {</para>
            <para>    QAssociativeIterable iterable =
            variant.value&lt;QAssociativeIterable&gt;();</para>
            <para>    // Can use foreach over the values:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for over the values:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QAssociativeIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QAssociativeIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it; // The current value</para>
            <para>        qDebug() &lt;&lt; it.key();</para>
            <para>        qDebug() &lt;&lt; it.value();</para>
            <para>    }</para>
            <para>}</para>
            <para>The container itself is not copied before iterating over
            it.</para>
            <para></para>
            <para>See also QVariant.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Begin">
            <summary>
            <para>Returns a QAssociativeIterable::const_iterator for the beginning
            of the container. This can be used in stl-style iteration.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.End">
            <summary>
            <para>Returns a QAssociativeIterable::const_iterator for the end of the
            container. This can be used in stl-style iteration.</para>
            <para>See also begin().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Find(QtCore.QVariant)">
            <summary>
            <para>Returns a QAssociativeIterable::const_iterator for the given key
            key in the container, if the types are convertible.</para>
            <para>If the key is not found, returns end().</para>
            <para>This can be used in stl-style iteration.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also begin(), end(), and value().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Value(QtCore.QVariant)">
            <summary>
            <para>Returns the value for the given key in the container, if the
            types are convertible.</para>
            <para>See also find().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAssociativeIterable.Size">
            <summary>
            <para>Returns the number of elements in the container.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAssociativeIterable.Const_iterator">
            <summary>
            <para>The QAssociativeIterable::const_iterator allows iteration over a
            container in a QVariant.</para>
            </summary>
            <remarks>
            <para>A QAssociativeIterable::const_iterator can only be created by a
            QAssociativeIterable instance, and can be used in a way similar to other
            stl-style iterators.</para>
            <para>QHash&lt;int, QString&gt; mapping;</para>
            <para>mapping.insert(7, &quot;Seven&quot;);</para>
            <para>mapping.insert(11, &quot;Eleven&quot;);</para>
            <para>mapping.insert(42, &quot;Forty-two&quot;);</para>
            <para></para>
            <para>QVariant variant = QVariant::fromValue(mapping);</para>
            <para>if (variant.canConvert&lt;QVariantHash&gt;()) {</para>
            <para>    QAssociativeIterable iterable =
            variant.value&lt;QAssociativeIterable&gt;();</para>
            <para>    // Can use foreach over the values:</para>
            <para>    foreach (const QVariant &amp;v, iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use C++11 range-for over the values:</para>
            <para>    for (const QVariant &amp;v : iterable) {</para>
            <para>        qDebug() &lt;&lt; v;</para>
            <para>    }</para>
            <para>    // Can use iterators:</para>
            <para>    QAssociativeIterable::const_iterator it =
            iterable.begin();</para>
            <para>    const QAssociativeIterable::const_iterator end =
            iterable.end();</para>
            <para>    for ( ; it != end; ++it) {</para>
            <para>        qDebug() &lt;&lt; *it; // The current value</para>
            <para>        qDebug() &lt;&lt; it.key();</para>
            <para>        qDebug() &lt;&lt; it.value();</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>See also QAssociativeIterable.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.#ctor(QtCore.QAssociativeIterable.Const_iterator)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Equality(QtCore.QAssociativeIterable.Const_iterator,QtCore.QAssociativeIterable.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Inequality(QtCore.QAssociativeIterable.Const_iterator,QtCore.QAssociativeIterable.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Increment(QtCore.QAssociativeIterable.Const_iterator)">
            <summary>
            <para>The prefix ++ operator (++it) advances the iterator to the next
            item in the container and returns an iterator to the new current
            item.</para>
            <para>Calling this function on QAssociativeIterable::end() leads to
            undefined results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Decrement(QtCore.QAssociativeIterable.Const_iterator)">
            <summary>
            <para>The prefix -- operator (--it) makes the preceding item current
            and returns an iterator to the new current item.</para>
            <para>Calling this function on QAssociativeIterable::begin() leads to
            undefined results.</para>
            <para>See also operator++().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Addition(QtCore.QAssociativeIterable.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator.</para>
            <para>See also operator-() and operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAssociativeIterable.Const_iterator.op_Subtraction(QtCore.QAssociativeIterable.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator.</para>
            <para>See also operator+() and operator-=().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAssociativeIterable.Const_iterator.Key">
            <summary>
            <para>Returns the current key, converted to a QVariant.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAssociativeIterable.Const_iterator.Value">
            <summary>
            <para>Returns the current value, converted to a QVariant.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtCore.QVariantAnimation" -->
        <member name="M:QtCore.QVariantAnimation.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QVariantAnimation object. parent is passed to
            QAbstractAnimation's constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.KeyValueAt(System.Double)">
            <summary>
            <para>Returns the key frame value for the given step. The given step
            must be in the range 0 to 1. If there is no KeyValue for step, it returns
            an invalid QVariant.</para>
            <para>See also keyValues() and setKeyValueAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.SetKeyValueAt(System.Double,QtCore.QVariant)">
            <summary>
            <para>Creates a key frame at the given step with the given value. The
            given step must be in the range 0 to 1.</para>
            <para>See also setKeyValues() and keyValueAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.SetDuration(System.Int32)">
            <summary>
            <para>This property holds the duration of the animation.</para>
            <para>This property describes the duration in milliseconds of the
            animation. The default duration is 250 milliseconds.</para>
            <para>See also QAbstractAnimation::duration().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.UpdateCurrentTime(System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractAnimation::updateCurrentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.UpdateState(QtCore.QAbstractAnimation.State,QtCore.QAbstractAnimation.State)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.UpdateCurrentValue(QtCore.QVariant)">
            <summary>
            <para>This virtual function is called every time the animation's
            current value changes. The value argument is the new current value.</para>
            <para>The base class implementation does nothing.</para>
            <para>See also currentValue.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.Interpolated(QtCore.QVariant,QtCore.QVariant,System.Double)">
            <summary>
            <para>This virtual function returns the linear interpolation between
            variants from and to, at progress, usually a value between 0 and 1. You can
            reimplement this function in a subclass of QVariantAnimation to provide
            your own interpolation algorithm.</para>
            <para>Note that in order for the interpolation to work with a
            QEasingCurve that return a value smaller than 0 or larger than 1 (such as
            QEasingCurve::InBack) you should make sure that it can extrapolate. If the
            semantic of the datatype does not allow extrapolation this function should
            handle that gracefully.</para>
            <para>You should call the QVariantAnimation implementation of this
            function if you want your class to handle the types already supported by Qt
            (see class QVariantAnimation description for a list of supported
            types).</para>
            <para>See also QEasingCurve.</para>
            </summary>
        </member>
        <member name="M:QtCore.QVariantAnimation.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QVariantAnimation.ValueChanged">
            <summary>
            <para>This property holds the current value of the animation.</para>
            <para>This property describes the current value; an interpolated value between the start value and the end value, using the current time for progress. The value itself is obtained from interpolated(), which is called repeatedly as the animation is running.</para>
            <para>QVariantAnimation calls the virtual updateCurrentValue() function when the current value changes. This is particularly useful for subclasses that need to track updates. For example, QPropertyAnimation uses this function to animate Qt properties.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QVariant 	currentValue() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	valueChanged(const QVariant &amp; value)</para>
            <para></para>
            <para>See also startValue and endValue.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariantAnimation.StartValue">
            <summary>
            <para>This property holds the optional start value of the
            animation.</para>
            <para>This property describes the optional start value of the
            animation. If omitted, or if a null QVariant is assigned as the start
            value, the animation will use the current position of the end when the
            animation is started.</para>
            <para>See also endValue.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariantAnimation.EndValue">
            <summary>
            <para>This property holds the end value of the animation.</para>
            <para>This property describes the end value of the animation.</para>
            <para>See also startValue.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariantAnimation.Duration">
            <summary>
            <para>This property holds the duration of the animation.</para>
            <para>This property describes the duration in milliseconds of the
            animation. The default duration is 250 milliseconds.</para>
            <para>See also QAbstractAnimation::duration().</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariantAnimation.EasingCurve">
            <summary>
            <para>This property holds the easing curve of the animation.</para>
            <para>This property defines the easing curve of the animation. By
            default, a linear easing curve is used, resulting in linear interpolation.
            Other curves are provided, for instance, QEasingCurve::InCirc, which
            provides a circular entry curve. Another example is
            QEasingCurve::InOutElastic, which provides an elastic effect on the values
            of the interpolated variant.</para>
            <para>QVariantAnimation will use the QEasingCurve::valueForProgress()
            to transform the &quot;normalized progress&quot; (currentTime /
            totalDuration) of the animation into the effective progress actually used
            by the animation. It is this effective progress that will be the progress
            when interpolated() is called. Also, the steps in the keyValues are
            referring to this effective progress.</para>
            <para>The easing curve is used with the interpolator, the
            interpolated() virtual function, and the animation's duration to control
            how the current value changes as the animation progresses.</para>
            </summary>
        </member>
        <member name="P:QtCore.QVariantAnimation.CurrentValue">
            <summary>
            <para>This property holds the current value of the animation.</para>
            <para>This property describes the current value; an interpolated value
            between the start value and the end value, using the current time for
            progress. The value itself is obtained from interpolated(), which is called
            repeatedly as the animation is running.</para>
            <para>QVariantAnimation calls the virtual updateCurrentValue() function
            when the current value changes. This is particularly useful for subclasses
            that need to track updates. For example, QPropertyAnimation uses this
            function to animate Qt properties.</para>
            <para>See also startValue and endValue.</para>
            </summary>
        </member>
        <member name="T:QtCore.QPropertyAnimation">
            <summary>
            <para>The QPropertyAnimation class animates Qt properties</para>
            </summary>
            <remarks>
            <para>QPropertyAnimation interpolates over Qt properties. As property
            values are stored in QVariants, the class inherits QVariantAnimation, and
            supports animation of the same meta types as its super class.</para>
            <para>A class declaring properties must be a QObject. To make it
            possible to animate a property, it must provide a setter (so that
            QPropertyAnimation can set the property's value). Note that this makes it
            possible to animate many of Qt's widgets. Let's look at an example:</para>
            <para>QPropertyAnimation *animation = new QPropertyAnimation(myWidget,
            &quot;geometry&quot;);</para>
            <para>animation-&gt;setDuration(10000);</para>
            <para>animation-&gt;setStartValue(QRect(0, 0, 100, 30));</para>
            <para>animation-&gt;setEndValue(QRect(250, 250, 100, 30));</para>
            <para></para>
            <para>animation-&gt;start();</para>
            <para>The property name and the QObject instance of which property
            should be animated are passed to the constructor. You can then specify the
            start and end value of the property. The procedure is equal for properties
            in classes you have implemented yourself--just check with QVariantAnimation
            that your QVariant type is supported.</para>
            <para>The QVariantAnimation class description explains how to set up
            the animation in detail. Note, however, that if a start value is not set,
            the property will start at the value it had when the QPropertyAnimation
            instance was created.</para>
            <para>QPropertyAnimation works like a charm on its own. For complex
            animations that, for instance, contain several objects, QAnimationGroup is
            provided. An animation group is an animation that can contain other
            animations, and that can manage when its animations are played. Look at
            QParallelAnimationGroup for an example.</para>
            <para></para>
            <para>See also QVariantAnimation, QAnimationGroup, and The Animation
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPropertyAnimation.#ctor(QtCore.QObject)">
            <summary>
            <para>Construct a QPropertyAnimation object. parent is passed to
            QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPropertyAnimation.#ctor(QtCore.QObject,QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Construct a QPropertyAnimation object. parent is passed to
            QObject's constructor. The animation changes the property propertyName on
            target. The default duration is 250ms.</para>
            <para>See also targetObject and propertyName.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPropertyAnimation.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPropertyAnimation.UpdateCurrentValue(QtCore.QVariant)">
            <summary>
            <para>Reimplemented from
            QVariantAnimation::updateCurrentValue().</para>
            <para>This virtual function is called by QVariantAnimation whenever the
            current value changes. value is the new, updated value. It updates the
            current value of the property on the target object.</para>
            <para>See also currentValue and currentTime.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPropertyAnimation.UpdateState(QtCore.QAbstractAnimation.State,QtCore.QAbstractAnimation.State)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateState().</para>
            <para>If the startValue is not defined when the state of the animation
            changes from Stopped to Running, the current property value is used as the
            initial value for the animation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPropertyAnimation.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPropertyAnimation.TargetObject">
            <summary>
            <para>This property holds the target QObject for this animation.</para>
            <para>This property defines the target QObject for this
            animation.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPropertyAnimation.PropertyName">
            <summary>
            <para>This property holds the target property name for this
            animation.</para>
            <para>This property defines the target property name for this
            animation. The property name is required for the animation to
            operate.</para>
            </summary>
        </member>
        <member name="T:QtCore.QSequentialAnimationGroup">
            <summary>
            <para>The QSequentialAnimationGroup class provides a sequential group
            of animations.</para>
            </summary>
            <remarks>
            <para>QSequentialAnimationGroup is a QAnimationGroup that runs its
            animations in sequence, i.e., it starts one animation after another has
            finished playing. The animations are played in the order they are added to
            the group (using addAnimation() or insertAnimation()). The animation group
            finishes when its last animation has finished.</para>
            <para>At each moment there is at most one animation that is active in
            the group; it is returned by currentAnimation(). An empty group has no
            current animation.</para>
            <para>A sequential animation group can be treated as any other
            animation, i.e., it can be started, stopped, and added to other groups. You
            can also call addPause() or insertPause() to add a pause to a sequential
            animation group.</para>
            <para>QSequentialAnimationGroup *group = new
            QSequentialAnimationGroup;</para>
            <para></para>
            <para>group-&gt;addAnimation(anim1);</para>
            <para>group-&gt;addAnimation(anim2);</para>
            <para></para>
            <para>group-&gt;start();</para>
            <para>In this example, anim1 and anim2 are two already set up
            QPropertyAnimations.</para>
            <para></para>
            <para>See also QAnimationGroup, QAbstractAnimation, and The Animation
            Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QSequentialAnimationGroup. parent is passed to
            QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.AddPause(System.Int32)">
            <summary>
            <para>Adds a pause of msecs to this animation group. The pause is
            considered as a special type of animation, thus animationCount will be
            increased by one.</para>
            <para>See also insertPause() and
            QAnimationGroup::addAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.InsertPause(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a pause of msecs milliseconds at index in this animation
            group.</para>
            <para>See also addPause() and
            QAnimationGroup::insertAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.UpdateCurrentTime(System.Int32)">
            <summary>
            <para>Reimplemented from
            QAbstractAnimation::updateCurrentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.UpdateState(QtCore.QAbstractAnimation.State,QtCore.QAbstractAnimation.State)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.UpdateDirection(QtCore.QAbstractAnimation.Direction)">
            <summary>
            <para>Reimplemented from QAbstractAnimation::updateDirection().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSequentialAnimationGroup.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QSequentialAnimationGroup.CurrentAnimationChanged">
            <summary>
            <para>Returns the animation in the current time.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractAnimation * 	currentAnimation() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	currentAnimationChanged(QAbstractAnimation * current)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtCore.QSequentialAnimationGroup.Duration">
            <summary>
            <para>Reimplemented from QAbstractAnimation::duration().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSequentialAnimationGroup.CurrentAnimation">
            <summary>
            <para>Returns the animation in the current time.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextCodec">
            <summary>
            <para>The QTextCodec class provides conversions between text
            encodings.</para>
            </summary>
            <remarks>
            <para>Qt uses Unicode to store, draw and manipulate strings. In many
            situations you may wish to deal with data that uses a different encoding.
            For example, most Japanese documents are still stored in Shift-JIS or ISO
            2022-JP, while Russian users often have their documents in KOI8-R or
            Windows-1251.</para>
            <para>Qt provides a set of QTextCodec classes to help with converting
            non-Unicode formats to and from Unicode. You can also create your own codec
            classes.</para>
            <para>The supported encodings are:</para>
            <para></para>
            <para>Big5</para>
            <para>Big5-HKSCS</para>
            <para>CP949</para>
            <para>EUC-JP</para>
            <para>EUC-KR</para>
            <para>GB18030</para>
            <para>HP-ROMAN8</para>
            <para>IBM 850</para>
            <para>IBM 866</para>
            <para>IBM 874</para>
            <para>ISO 2022-JP</para>
            <para>ISO 8859-1 to 10</para>
            <para>ISO 8859-13 to 16</para>
            <para>Iscii-Bng, Dev, Gjr, Knd, Mlm, Ori, Pnj, Tlg, and Tml</para>
            <para>KOI8-R</para>
            <para>KOI8-U</para>
            <para>Macintosh</para>
            <para>Shift-JIS</para>
            <para>TIS-620</para>
            <para>TSCII</para>
            <para>UTF-8</para>
            <para>UTF-16</para>
            <para>UTF-16BE</para>
            <para>UTF-16LE</para>
            <para>UTF-32</para>
            <para>UTF-32BE</para>
            <para>UTF-32LE</para>
            <para>Windows-1250 to 1258</para>
            <para></para>
            <para>If Qt is compiled with ICU support enabled, most codecs supported
            by ICU will also be available to the application.</para>
            <para>QTextCodecs can be used as follows to convert some locally
            encoded string to Unicode. Suppose you have some string encoded in Russian
            KOI8-R encoding, and want to convert it to Unicode. The simple way to do it
            is like this:</para>
            <para>QByteArray encodedString = &quot;...&quot;;</para>
            <para>QTextCodec *codec =
            QTextCodec::codecForName(&quot;KOI8-R&quot;);</para>
            <para>QString string = codec-&gt;toUnicode(encodedString);</para>
            <para>After this, string holds the text converted to Unicode.
            Converting a string from Unicode to the local encoding is just as
            easy:</para>
            <para>QString string = &quot;...&quot;;</para>
            <para>QTextCodec *codec =
            QTextCodec::codecForName(&quot;KOI8-R&quot;);</para>
            <para>QByteArray encodedString = codec-&gt;fromUnicode(string);</para>
            <para>To read or write files in various encodings, use QTextStream and
            its setCodec() function. See the Codecs example for an application of
            QTextCodec to file I/O.</para>
            <para>Some care must be taken when trying to convert the data in
            chunks, for example, when receiving it over a network. In such cases it is
            possible that a multi-byte character will be split over two chunks. At best
            this might result in the loss of a character and at worst cause the entire
            conversion to fail.</para>
            <para>The approach to use in these situations is to create a
            QTextDecoder object for the codec and use this QTextDecoder for the whole
            decoding process, as shown below:</para>
            <para>QTextCodec *codec =
            QTextCodec::codecForName(&quot;Shift-JIS&quot;);</para>
            <para>QTextDecoder *decoder = codec-&gt;makeDecoder();</para>
            <para></para>
            <para>QString string;</para>
            <para>while (new_data_available()) {</para>
            <para>    QByteArray chunk = get_new_data();</para>
            <para>    string += decoder-&gt;toUnicode(chunk);</para>
            <para>}</para>
            <para>delete decoder;</para>
            <para>The QTextDecoder object maintains state between chunks and
            therefore works correctly even if a multi-byte character is split between
            chunks.</para>
            <para></para>
            <para>Creating Your Own Codec Class</para>
            <para>Support for new text encodings can be added to Qt by creating
            QTextCodec subclasses.</para>
            <para>The pure virtual functions describe the encoder to the system and
            the coder is used as required in the different text file formats supported
            by QTextStream, and under X11, for the locale-specific character input and
            output.</para>
            <para>To add support for another encoding to Qt, make a subclass of
            QTextCodec and implement the functions listed in the table below.</para>
            <para></para>
            <para> FunctionDescription</para>
            <para>name()	Returns the official name for the encoding. If the
            encoding is listed in the IANA character-sets encoding file, the name
            should be the preferred MIME name for the encoding.</para>
            <para>aliases()	Returns a list of alternative names for the encoding.
            QTextCodec provides a default implementation that returns an empty list.
            For example, &quot;ISO-8859-1&quot; has &quot;latin1&quot;,
            &quot;CP819&quot;, &quot;IBM819&quot;, and &quot;iso-ir-100&quot; as
            aliases.</para>
            <para>mibEnum()	Return the MIB enum for the encoding if it is listed in
            the IANA character-sets encoding file.</para>
            <para>convertToUnicode()	Converts an 8-bit character string to
            Unicode.</para>
            <para>convertFromUnicode()	Converts a Unicode string to an 8-bit
            character string.</para>
            <para></para>
            <para></para>
            <para>See also QTextStream, QTextDecoder, QTextEncoder, and Text Codecs
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTextCodec.#ctor">
            <summary>
            <para>Constructs a QTextCodec, and gives it the highest precedence. The
            QTextCodec should always be constructed on the heap (i.e. with new). Qt
            takes ownership and will delete it when the application terminates.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CanEncode(QtCore.QChar)">
            <summary>
            <para>Returns true if the Unicode character ch can be fully encoded
            with this codec; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CanEncode(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>s contains the string being tested for encode-ability.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.ToUnicode(QtCore.QByteArray)">
            <summary>
            <para>Converts a from the encoding of this codec to Unicode, and
            returns the result in a QString.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.ToUnicode(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>chars contains the source characters.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.FromUnicode(System.String)">
            <summary>
            <para>Converts str from Unicode to the encoding of this codec, and
            returns the result in a QByteArray.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.ToUnicode(System.String,System.Int32,QtCore.QTextCodec.ConverterState)">
            <summary>
            <para>Converts the first size characters from the input from the
            encoding of this codec to Unicode, and returns the result in a
            QString.</para>
            <para>The state of the convertor used is updated.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.FromUnicode(QtCore.QChar,System.Int32,QtCore.QTextCodec.ConverterState)">
            <summary>
            <para>Converts the first number of characters from the input array from
            Unicode to the encoding of this codec, and returns the result in a
            QByteArray.</para>
            <para>The state of the convertor used is updated.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.MakeDecoder(QtCore.QTextCodec.ConversionFlag)">
            <summary>
            <para>Creates a QTextDecoder with a specified flags to decode chunks of
            char * data to create chunks of Unicode data.</para>
            <para>The caller is responsible for deleting the returned
            object.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.MakeEncoder(QtCore.QTextCodec.ConversionFlag)">
            <summary>
            <para>Creates a QTextEncoder with a specified flags to encode chunks of
            Unicode data as char * data.</para>
            <para>The caller is responsible for deleting the returned
            object.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.ConvertToUnicode(System.String,System.Int32,QtCore.QTextCodec.ConverterState)">
            <summary>
            <para>QTextCodec subclasses must reimplement this function.</para>
            <para>Converts the first len characters of chars from the encoding of
            the subclass to Unicode, and returns the result in a QString.</para>
            <para>state can be 0, in which case the conversion is stateless and
            default conversion rules should be used. If state is not 0, the codec
            should save the state after the conversion in state, and adjust the
            remainingChars and invalidChars members of the struct.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.ConvertFromUnicode(QtCore.QChar,System.Int32,QtCore.QTextCodec.ConverterState)">
            <summary>
            <para>QTextCodec subclasses must reimplement this function.</para>
            <para>Converts the first number of characters from the input array from
            Unicode to the encoding of the subclass, and returns the result in a
            QByteArray.</para>
            <para>state can be 0 in which case the conversion is stateless and
            default conversion rules should be used. If state is not 0, the codec
            should save the state after the conversion in state, and adjust the
            remainingChars and invalidChars members of the struct.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForName(QtCore.QByteArray)">
            <summary>
            <para>Searches all installed QTextCodec objects and returns the one
            which best matches name; the match is case-insensitive. Returns 0 if no
            codec matching the name name could be found.</para>
            <para>Note: This function is thread-safe.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForName(System.String)">
            <summary>
            <para>Searches all installed QTextCodec objects and returns the one
            which best matches name; the match is case-insensitive. Returns 0 if no
            codec matching the name name could be found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForMib(System.Int32)">
            <summary>
            <para>Returns the QTextCodec which matches the MIBenum mib.</para>
            <para>Note: This function is thread-safe.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForHtml(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Tries to detect the encoding of the provided snippet of HTML in
            the given byte array, ba, by checking the BOM (Byte Order Mark) and the
            content-type meta header and returns a QTextCodec instance that is capable
            of decoding the html to unicode. If the codec cannot be detected, this
            overload returns a Latin-1 QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForHtml(QtCore.QByteArray,QtCore.QTextCodec)">
            <summary>
            <para>Tries to detect the encoding of the provided snippet of HTML in
            the given byte array, ba, by checking the BOM (Byte Order Mark) and the
            content-type meta header and returns a QTextCodec instance that is capable
            of decoding the html to unicode. If the codec cannot be detected from the
            content provided, defaultCodec is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also codecForUtfText().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForUtfText(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Tries to detect the encoding of the provided snippet ba by using
            the BOM (Byte Order Mark) and returns a QTextCodec instance that is capable
            of decoding the text to unicode. If the codec cannot be detected, this
            overload returns a Latin-1 QTextCodec.</para>
            <para>See also codecForHtml().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextCodec.CodecForUtfText(QtCore.QByteArray,QtCore.QTextCodec)">
            <summary>
            <para>Tries to detect the encoding of the provided snippet ba by using
            the BOM (Byte Order Mark) and returns a QTextCodec instance that is capable
            of decoding the text to unicode. If the codec cannot be detected from the
            content provided, defaultCodec is returned.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also codecForHtml().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextCodec.CodecForLocale">
            <summary>
            <para>Returns a pointer to the codec most suitable for this
            locale.</para>
            <para>On Windows, the codec will be based on a system locale. On Unix
            systems, the codec will might fall back to using the iconv library if no
            builtin codec for the locale can be found.</para>
            <para>Note that in these cases the codec's name will be
            &quot;System&quot;.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also setCodecForLocale().</para>
            <para></para>
            <para>Set the codec to c; this will be returned by codecForLocale(). If
            c is a null pointer, the codec is reset to the default.</para>
            <para>This might be needed for some applications that want to use their
            own mechanism for setting the locale.</para>
            <para>Warning: This function is not reentrant.</para>
            <para>See also codecForLocale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextCodec.Name">
            <summary>
            <para>QTextCodec subclasses must reimplement this function. It returns
            the name of the encoding supported by the subclass.</para>
            <para>If the codec is registered as a character set in the IANA
            character-sets encoding file this method should return the preferred mime
            name for the codec if defined, otherwise its name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextCodec.MibEnum">
            <summary>
            <para>Subclasses of QTextCodec must reimplement this function. It
            returns the MIBenum (see IANA character-sets encoding file for more
            information). It is important that each QTextCodec subclass returns the
            correct unique value for this function.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextCodec.ConversionFlag">
            <summary>
            <para>The ConversionFlags type is a typedef for
            QFlags&lt;ConversionFlag&gt;. It stores an OR combination of ConversionFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextCodec.ConversionFlag.DefaultConversion">
            <summary>No flag is set.</summary>
        </member>
        <member name="F:QtCore.QTextCodec.ConversionFlag.ConvertInvalidToNull">
            <summary>If this flag is set, each invalid input character is output as a null character.</summary>
        </member>
        <member name="F:QtCore.QTextCodec.ConversionFlag.IgnoreHeader">
            <summary>Ignore any Unicode byte-order mark and don't generate any.</summary>
        </member>
        <member name="M:QtCore.QTextCodec.ConverterState.#ctor(QtCore.QTextCodec.ConversionFlag)">
            <summary>
            <para>Constructs a ConverterState object initialized with the given
            flags.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextEncoder">
            <summary>
            <para>The QTextEncoder class provides a state-based encoder.</para>
            </summary>
            <remarks>
            <para>A text encoder converts text from Unicode into an encoded text
            format using a specific codec.</para>
            <para>The encoder converts Unicode into another format, remembering any
            state that is required between calls.</para>
            <para></para>
            <para>See also QTextCodec::makeEncoder() and QTextDecoder.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTextEncoder.#ctor(QtCore.QTextCodec)">
            <summary>
            <para>Constructs a text encoder for the given codec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextEncoder.#ctor(QtCore.QTextCodec,QtCore.QTextCodec.ConversionFlag)">
            <summary>
            <para>Constructs a text encoder for the given codec and conversion
            flags.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextEncoder.FromUnicode(System.String)">
            <summary>
            <para>Converts the Unicode string str into an encoded
            QByteArray.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextEncoder.FromUnicode(QtCore.QChar,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts len characters (not bytes) from uc, and returns the
            result in a QByteArray.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextDecoder">
            <summary>
            <para>The QTextDecoder class provides a state-based decoder.</para>
            </summary>
            <remarks>
            <para>A text decoder converts text from an encoded text format into
            Unicode using a specific codec.</para>
            <para>The decoder converts text in this format into Unicode,
            remembering any state that is required between calls.</para>
            <para></para>
            <para>See also QTextCodec::makeDecoder() and QTextEncoder.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTextDecoder.#ctor(QtCore.QTextCodec)">
            <summary>
            <para>Constructs a text decoder for the given codec.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextDecoder.#ctor(QtCore.QTextCodec,QtCore.QTextCodec.ConversionFlag)">
            <summary>
            <para>Constructs a text decoder for the given codec and conversion
            flags.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextDecoder.ToUnicode(System.String,System.Int32)">
            <summary>
            <para>Converts the first len bytes in chars to Unicode, returning the
            result.</para>
            <para>If not all characters are used (e.g. if only part of a multi-byte
            encoding is at the end of the characters), the decoder remembers enough
            state to continue with the next call to this function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextDecoder.ToUnicode(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts the bytes in the byte array specified by ba to Unicode
            and returns the result.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextDecoder.ToUnicode(System.String,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The converted string is returned in target.</para>
            </summary>
        </member>
        <member name="T:QtCore.QSharedData">
            <summary>
            <para>The QSharedData class is a base class for shared data
            objects.</para>
            </summary>
            <remarks>
            <para>QSharedData is designed to be used with QSharedDataPointer or
            QExplicitlySharedDataPointer to implement custom implicitly shared or
            explicitly shared classes. QSharedData provides thread-safe reference
            counting.</para>
            <para>See QSharedDataPointer and QExplicitlySharedDataPointer for
            details.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSharedData.#ctor">
            <summary>
            <para>Constructs a QSharedData object with a reference count of
            0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedData.#ctor(QtCore.QSharedData)">
            <summary>
            <para>Constructs a QSharedData object with reference count 0. other is
            ignored.</para>
            </summary>
        </member>
        <member name="T:QtCore.QDate">
            <summary>
            <para>The QDate class provides date functions.</para>
            </summary>
            <remarks>
            <para>A QDate object contains a calendar date, i.e. year, month, and
            day numbers, in the Gregorian calendar. It can read the current date from
            the system clock. It provides functions for comparing dates, and for
            manipulating dates. For example, it is possible to add and subtract days,
            months, and years to dates.</para>
            <para>A QDate object is typically created by giving the year, month,
            and day numbers explicitly. Note that QDate interprets two digit years as
            is, i.e., years 0 - 99. A QDate can also be constructed with the static
            function currentDate(), which creates a QDate object containing the system
            clock's date. An explicit date can also be set using setDate(). The
            fromString() function returns a QDate given a string and a date format
            which is used to interpret the date within the string.</para>
            <para>The year(), month(), and day() functions provide access to the
            year, month, and day numbers. Also, dayOfWeek() and dayOfYear() functions
            are provided. The same information is provided in textual format by the
            toString(), shortDayName(), longDayName(), shortMonthName(), and
            longMonthName() functions.</para>
            <para>QDate provides a full set of operators to compare two QDate
            objects where smaller means earlier, and larger means later.</para>
            <para>You can increment (or decrement) a date by a given number of days
            using addDays(). Similarly you can use addMonths() and addYears(). The
            daysTo() function returns the number of days between two dates.</para>
            <para>The daysInMonth() and daysInYear() functions return how many days
            there are in this date's month and year, respectively. The isLeapYear()
            function indicates whether a date is in a leap year.</para>
            <para></para>
            <para></para>
            <para>No Year 0</para>
            <para>There is no year 0. Dates in that year are considered invalid.
            The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before
            current era.&quot; The day before 1 January 1 CE is 31 December 1
            BCE.</para>
            <para></para>
            <para>Range of Valid Dates</para>
            <para>Dates are stored internally as a Julian Day number, an integer
            count of every day in a contiguous range, with 24 November 4714 BCE in the
            Gregorian calendar being Julian Day 0 (1 January 4713 BCE in the Julian
            calendar). As well as being an efficient and accurate way of storing an
            absolute date, it is suitable for converting a Date into other calendar
            systems such as Hebrew, Islamic or Chinese. The Julian Day number can be
            obtained using QDate::toJulianDay() and can be set using
            QDate::fromJulianDay().</para>
            <para>The range of dates able to be stored by QDate as a Julian Day
            number is for technical reasons limited to between -784350574879 and
            784354017364, which means from before 2 billion BCE to after 2 billion
            CE.</para>
            <para></para>
            <para>See also QTime, QDateTime, QDateEdit, QDateTimeEdit, and
            QCalendarWidget.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDate.#ctor">
            <summary>
            <para>Constructs a null date. Null dates are invalid.</para>
            <para>See also isNull() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a date with year y, month m and day d.</para>
            <para>If the specified date is invalid, the date is not set and
            isValid() returns false.</para>
            <para>Warning: Years 1 to 99 are interpreted as is. Year 0 is
            invalid.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.IsValid">
            <summary>
            <para>Returns true if this date is valid; otherwise returns
            false.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.WeekNumber(System.Int32@)">
            <summary>
            <para>Returns the week number (1 to 53), and stores the year in
            *yearNumber unless yearNumber is null (the default).</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>In accordance with ISO 8601, weeks start on Monday and the first
            Thursday of a year is always in week 1 of that year. Most years have 52
            weeks, but some have 53.</para>
            <para>*yearNumber is not always the same as year(). For example, 1
            January 2000 has week number 52 in the year 1999, and 31 December 2002 has
            week number 1 in the year 2003.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.ToString(QtCore.Qt.DateFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the date as a string. The format parameter determines the
            format of the string.</para>
            <para>If the format is Qt::TextDate, the string is formatted in the
            default way. QDate::shortDayName() and QDate::shortMonthName() are used to
            generate the string, so the day and month names will be localized names
            using the system locale, i.e. QLocale::system(). An example of this
            formatting is &quot;Sat May 20 1995&quot;.</para>
            <para>If the format is Qt::ISODate, the string format corresponds to
            the ISO 8601 extended specification for representations of dates and times,
            taking the form YYYY-MM-DD, where YYYY is the year, MM is the month of the
            year (between 01 and 12), and DD is the day of the month between 01 and
            31.</para>
            <para>If the format is Qt::SystemLocaleShortDate or
            Qt::SystemLocaleLongDate, the string format depends on the locale settings
            of the system. Identical to calling QLocale::system().toString(date,
            QLocale::ShortFormat) or QLocale::system().toString(date,
            QLocale::LongFormat).</para>
            <para>If the format is Qt::DefaultLocaleShortDate or
            Qt::DefaultLocaleLongDate, the string format depends on the default
            application locale. This is the locale set with QLocale::setDefault(), or
            the system locale if no default locale has been set. Identical to calling
            QLocale().toString(date, QLocale::ShortFormat)  or QLocale().toString(date,
            QLocale::LongFormat).</para>
            <para>If the format is Qt::RFC2822Date, the string is formatted in an
            RFC 2822 compatible way. An example of this formatting is &quot;20 May
            1995&quot;.</para>
            <para>If the date is invalid, an empty string will be returned.</para>
            <para>Warning: The Qt::ISODate format is only valid for years in the
            range 0 to 9999. This restriction may apply to locale-aware formats as
            well, depending on the locale settings.</para>
            <para>See also shortDayName() and shortMonthName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.ToString(System.String)">
            <summary>
            <para>Returns the date as a string. The format parameter determines the
            format of the result string.</para>
            <para>These expressions may be used:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>d	the day as number without a leading zero (1 to 31)</para>
            <para>dd	the day as number with a leading zero (01 to 31)</para>
            <para>ddd	the abbreviated localized day name (e.g. 'Mon' to 'Sun').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>dddd	the long localized day name (e.g. 'Monday' to 'Sunday').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>M	the month as number without a leading zero (1 to 12)</para>
            <para>MM	the month as number with a leading zero (01 to 12)</para>
            <para>MMM	the abbreviated localized month name (e.g. 'Jan' to 'Dec').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>MMMM	the long localized month name (e.g. 'January' to
            'December'). Uses the system locale to localize the name, i.e.
            QLocale::system().</para>
            <para>yy	the year as two digit number (00 to 99)</para>
            <para>yyyy	the year as four digit number. If the year is negative, a
            minus sign is prepended in addition.</para>
            <para></para>
            <para>All other input characters will be ignored. Any sequence of
            characters that are enclosed in single quotes will be treated as text and
            not be used as an expression. Two consecutive single quotes
            (&quot;''&quot;) are replaced by a singlequote in the output. Formats
            without separators (e.g. &quot;ddMM&quot;) are currently not
            supported.</para>
            <para>Example format strings (assuming that the QDate is the 20 July
            1969):</para>
            <para></para>
            <para> FormatResult</para>
            <para>dd.MM.yyyy	20.07.1969</para>
            <para>ddd MMMM d yy	Sun July 20 69</para>
            <para>'The day is' dddd	The day is Sunday</para>
            <para></para>
            <para>If the datetime is invalid, an empty string will be
            returned.</para>
            <para>See also QDateTime::toString(), QTime::toString(), and
            QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the date's year, month, and day. Returns true if the date is
            valid; otherwise returns false.</para>
            <para>If the specified date is invalid, the QDate object is set to be
            invalid.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.GetDate(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Extracts the date's year, month, and day, and assigns them to
            *year, *month, and *day. The pointers may be null.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also year(), month(), day(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.AddDays(System.Int64)">
            <summary>
            <para>Returns a QDate object containing a date ndays later than the
            date of this object (or earlier if ndays is negative).</para>
            <para>Returns a null date if the current date is invalid or the new
            date is out of range.</para>
            <para>See also addMonths(), addYears(), and daysTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.AddMonths(System.Int32)">
            <summary>
            <para>Returns a QDate object containing a date nmonths later than the
            date of this object (or earlier if nmonths is negative).</para>
            <para>Note: If the ending day/month combination does not exist in the
            resulting month/year, this function will return a date that is the latest
            valid date.</para>
            <para>See also addDays() and addYears().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.AddYears(System.Int32)">
            <summary>
            <para>Returns a QDate object containing a date nyears later than the
            date of this object (or earlier if nyears is negative).</para>
            <para>Note: If the ending day/month combination does not exist in the
            resulting year (i.e., if the date was Feb 29 and the final year is not a
            leap year), this function will return a date that is the latest valid date
            (that is, Feb 28).</para>
            <para>See also addDays() and addMonths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.DaysTo(QtCore.QDate)">
            <summary>
            <para>Returns the number of days from this date to d (which is negative
            if d is earlier than this date).</para>
            <para>Returns 0 if either date is invalid.</para>
            <para>Example:</para>
            <para>QDate d1(1995, 5, 17);  // May 17, 1995</para>
            <para>QDate d2(1995, 5, 20);  // May 20, 1995</para>
            <para>d1.daysTo(d2);          // returns 3</para>
            <para>d2.daysTo(d1);          // returns -3</para>
            <para>See also addDays().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_Equality(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is equal to d; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_Inequality(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is different from d; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_LessThan(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is earlier than d; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_LessThanOrEqual(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is earlier than or equal to d;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_GreaterThan(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is later than d; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.op_GreaterThanOrEqual(QtCore.QDate,QtCore.QDate)">
            <summary>
            <para>Returns true if this date is later than or equal to d; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.ToJulianDay">
            <summary>
            <para>Converts the date to a Julian day.</para>
            <para>See also fromJulianDay().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.WeekNumber">
            <summary>
            <para>Returns the week number (1 to 53), and stores the year in
            *yearNumber unless yearNumber is null (the default).</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>In accordance with ISO 8601, weeks start on Monday and the first
            Thursday of a year is always in week 1 of that year. Most years have 52
            weeks, but some have 53.</para>
            <para>*yearNumber is not always the same as year(). For example, 1
            January 2000 has week number 52 in the year 1999, and 31 December 2002 has
            week number 1 in the year 2003.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.ShortMonthName(System.Int32,QtCore.QDate.MonthNameType)">
            <summary>
            <para>Returns the short name of the month for the representation
            specified by type.</para>
            <para>The months are enumerated using the following convention:</para>
            <para></para>
            <para>1 = &quot;Jan&quot;</para>
            <para>2 = &quot;Feb&quot;</para>
            <para>3 = &quot;Mar&quot;</para>
            <para>4 = &quot;Apr&quot;</para>
            <para>5 = &quot;May&quot;</para>
            <para>6 = &quot;Jun&quot;</para>
            <para>7 = &quot;Jul&quot;</para>
            <para>8 = &quot;Aug&quot;</para>
            <para>9 = &quot;Sep&quot;</para>
            <para>10 = &quot;Oct&quot;</para>
            <para>11 = &quot;Nov&quot;</para>
            <para>12 = &quot;Dec&quot;</para>
            <para></para>
            <para>The month names will be localized according to the system's
            locale settings, i.e. using QLocale::system().</para>
            <para>Returns an empty string if the date is invalid.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also toString(), longMonthName(), shortDayName(), and
            longDayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.ShortDayName(System.Int32,QtCore.QDate.MonthNameType)">
            <summary>
            <para>Returns the short name of the weekday for the representation
            specified by type.</para>
            <para>The days are enumerated using the following convention:</para>
            <para></para>
            <para>1 = &quot;Mon&quot;</para>
            <para>2 = &quot;Tue&quot;</para>
            <para>3 = &quot;Wed&quot;</para>
            <para>4 = &quot;Thu&quot;</para>
            <para>5 = &quot;Fri&quot;</para>
            <para>6 = &quot;Sat&quot;</para>
            <para>7 = &quot;Sun&quot;</para>
            <para></para>
            <para>The day names will be localized according to the system's locale
            settings, i.e. using QLocale::system().</para>
            <para>Returns an empty string if the date is invalid.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also toString(), shortMonthName(), longMonthName(), and
            longDayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.LongMonthName(System.Int32,QtCore.QDate.MonthNameType)">
            <summary>
            <para>Returns the long name of the month for the representation
            specified by type.</para>
            <para>The months are enumerated using the following convention:</para>
            <para></para>
            <para>1 = &quot;January&quot;</para>
            <para>2 = &quot;February&quot;</para>
            <para>3 = &quot;March&quot;</para>
            <para>4 = &quot;April&quot;</para>
            <para>5 = &quot;May&quot;</para>
            <para>6 = &quot;June&quot;</para>
            <para>7 = &quot;July&quot;</para>
            <para>8 = &quot;August&quot;</para>
            <para>9 = &quot;September&quot;</para>
            <para>10 = &quot;October&quot;</para>
            <para>11 = &quot;November&quot;</para>
            <para>12 = &quot;December&quot;</para>
            <para></para>
            <para>The month names will be localized according to the system's
            locale settings, i.e. using QLocale::system().</para>
            <para>Returns an empty string if the date is invalid.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also toString(), shortMonthName(), shortDayName(), and
            longDayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.LongDayName(System.Int32,QtCore.QDate.MonthNameType)">
            <summary>
            <para>Returns the long name of the weekday for the representation
            specified by type.</para>
            <para>The days are enumerated using the following convention:</para>
            <para></para>
            <para>1 = &quot;Monday&quot;</para>
            <para>2 = &quot;Tuesday&quot;</para>
            <para>3 = &quot;Wednesday&quot;</para>
            <para>4 = &quot;Thursday&quot;</para>
            <para>5 = &quot;Friday&quot;</para>
            <para>6 = &quot;Saturday&quot;</para>
            <para>7 = &quot;Sunday&quot;</para>
            <para></para>
            <para>The day names will be localized according to the system's locale
            settings, i.e. using QLocale::system().</para>
            <para>Returns an empty string if the date is invalid.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also toString(), shortDayName(), shortMonthName(), and
            longMonthName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.FromString(System.String,QtCore.Qt.DateFormat)">
            <summary>
            <para>Returns the QDate represented by the string, using the format
            given, or an invalid date if the string cannot be parsed.</para>
            <para>Note for Qt::TextDate: It is recommended that you use the English
            short month names (e.g. &quot;Jan&quot;). Although localized month names
            can also be used, they depend on the user's locale settings.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.FromString(System.String,System.String)">
            <summary>
            <para>Returns the QDate represented by the string, using the format
            given, or an invalid date if the string cannot be parsed.</para>
            <para>These expressions may be used for the format:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>d	The day as a number without a leading zero (1 to 31)</para>
            <para>dd	The day as a number with a leading zero (01 to 31)</para>
            <para>ddd	The abbreviated localized day name (e.g. 'Mon' to 'Sun').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>dddd	The long localized day name (e.g. 'Monday' to 'Sunday').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>M	The month as a number without a leading zero (1 to 12)</para>
            <para>MM	The month as a number with a leading zero (01 to 12)</para>
            <para>MMM	The abbreviated localized month name (e.g. 'Jan' to 'Dec').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>MMMM	The long localized month name (e.g. 'January' to
            'December'). Uses the system locale to localize the name, i.e.
            QLocale::system().</para>
            <para>yy	The year as two digit number (00 to 99)</para>
            <para>yyyy	The year as four digit number. If the year is negative, a
            minus sign is prepended in addition.</para>
            <para></para>
            <para>All other input characters will be treated as text. Any sequence
            of characters that are enclosed in single quotes will also be treated as
            text and will not be used as an expression. For example:</para>
            <para>QDate date = QDate::fromString(&quot;1MM12car2003&quot;,
            &quot;d'MM'MMcaryyyy&quot;);</para>
            <para>// date is 1 December 2003</para>
            <para>If the format is not satisfied, an invalid QDate is returned. The
            expressions that don't expect leading zeroes (d, M) will be greedy. This
            means that they will use two digits even if this will put them outside the
            accepted range of values and leaves too few digits for other sections. For
            example, the following format string could have meant January 30 but the M
            will grab two digits, resulting in an invalid date:</para>
            <para>QDate date = QDate::fromString(&quot;130&quot;, &quot;Md&quot;);
            // invalid</para>
            <para>For any field that is not represented in the format the following
            defaults are used:</para>
            <para></para>
            <para> FieldDefault value</para>
            <para>Year	1900</para>
            <para>Month	1</para>
            <para>Day	1</para>
            <para></para>
            <para>The following examples demonstrate the default values:</para>
            <para>QDate::fromString(&quot;1.30&quot;, &quot;M.d&quot;);
            // January 30 1900</para>
            <para>QDate::fromString(&quot;20000110&quot;, &quot;yyyyMMdd&quot;);
            // January 10, 2000</para>
            <para>QDate::fromString(&quot;20000110&quot;, &quot;yyyyMd&quot;);
            // January 10, 2000</para>
            <para>See also QDateTime::fromString(), QTime::fromString(),
            QDate::toString(), QDateTime::toString(), and QTime::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.IsValid(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the specified date (year, month, and day) is
            valid; otherwise returns false.</para>
            <para>Example:</para>
            <para>QDate::isValid(2002, 5, 17);  // true</para>
            <para>QDate::isValid(2002, 2, 30);  // false (Feb 30 does not
            exist)</para>
            <para>QDate::isValid(2004, 2, 29);  // true (2004 is a leap
            year)</para>
            <para>QDate::isValid(2000, 2, 29);  // true (2000 is a leap
            year)</para>
            <para>QDate::isValid(2006, 2, 29);  // false (2006 is not a leap
            year)</para>
            <para>QDate::isValid(2100, 2, 29);  // false (2100 is not a leap
            year)</para>
            <para>QDate::isValid(1202, 6, 6);   // true (even though 1202 is
            pre-Gregorian)</para>
            <para>See also isNull() and setDate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.IsLeapYear(System.Int32)">
            <summary>
            <para>Returns true if the specified year is a leap year; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDate.FromJulianDay(System.Int64)">
            <summary>
            <para>Converts the Julian day jd to a QDate.</para>
            <para>See also toJulianDay().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.IsNull">
            <summary>
            <para>Returns true if the date is null; otherwise returns false. A null
            date is invalid.</para>
            <para>Note: The behavior of this function is equivalent to
            isValid().</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.Year">
            <summary>
            <para>Returns the year of this date. Negative numbers indicate years
            before 1 CE, such that year -44 is 44 BCE.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also month() and day().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.Month">
            <summary>
            <para>Returns the number corresponding to the month of this date, using
            the following convention:</para>
            <para></para>
            <para>1 = &quot;January&quot;</para>
            <para>2 = &quot;February&quot;</para>
            <para>3 = &quot;March&quot;</para>
            <para>4 = &quot;April&quot;</para>
            <para>5 = &quot;May&quot;</para>
            <para>6 = &quot;June&quot;</para>
            <para>7 = &quot;July&quot;</para>
            <para>8 = &quot;August&quot;</para>
            <para>9 = &quot;September&quot;</para>
            <para>10 = &quot;October&quot;</para>
            <para>11 = &quot;November&quot;</para>
            <para>12 = &quot;December&quot;</para>
            <para></para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also year() and day().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.Day">
            <summary>
            <para>Returns the day of the month (1 to 31) of this date.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also year(), month(), and dayOfWeek().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.DayOfWeek">
            <summary>
            <para>Returns the weekday (1 = Monday to 7 = Sunday) for this
            date.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also day(), dayOfYear(), and Qt::DayOfWeek.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.DayOfYear">
            <summary>
            <para>Returns the day of the year (1 to 365 or 366 on leap years) for
            this date.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also day() and dayOfWeek().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.DaysInMonth">
            <summary>
            <para>Returns the number of days in the month (28 to 31) for this
            date.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also day() and daysInYear().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.DaysInYear">
            <summary>
            <para>Returns the number of days in the year (365 or 366) for this
            date.</para>
            <para>Returns 0 if the date is invalid.</para>
            <para>See also day() and daysInMonth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDate.CurrentDate">
            <summary>
            <para>Returns the current date, as reported by the system clock.</para>
            <para>See also QTime::currentTime() and
            QDateTime::currentDateTime().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDate.MonthNameType">
            <summary>
            <para>This enum describes the types of the string representation used
            for the month name.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDate.MonthNameType.DateFormat">
            <summary>This type of name can be used for date-to-string formatting.</summary>
        </member>
        <member name="F:QtCore.QDate.MonthNameType.StandaloneFormat">
            <summary>This type is used when you need to enumerate months or weekdays. Usually standalone names are represented in singular forms with capitalized first letter.</summary>
        </member>
        <member name="T:QtCore.QTime">
            <summary>
            <para>The QTime class provides clock time functions.</para>
            </summary>
            <remarks>
            <para>A QTime object contains a clock time, i.e. the number of hours,
            minutes, seconds, and milliseconds since midnight. It can read the current
            time from the system clock and measure a span of elapsed time. It provides
            functions for comparing times and for manipulating a time by adding a
            number of milliseconds.</para>
            <para>QTime uses the 24-hour clock format; it has no concept of AM/PM.
            Unlike QDateTime, QTime knows nothing about time zones or daylight savings
            time (DST).</para>
            <para>A QTime object is typically created either by giving the number
            of hours, minutes, seconds, and milliseconds explicitly, or by using the
            static function currentTime(), which creates a QTime object that contains
            the system's local time. Note that the accuracy depends on the accuracy of
            the underlying operating system; not all systems provide 1-millisecond
            accuracy.</para>
            <para>The hour(), minute(), second(), and msec() functions provide
            access to the number of hours, minutes, seconds, and milliseconds of the
            time. The same information is provided in textual format by the toString()
            function.</para>
            <para>QTime provides a full set of operators to compare two QTime
            objects. QTime A is considered smaller than QTime B if A is earlier than
            B.</para>
            <para>The addSecs() and addMSecs() functions provide the time a given
            number of seconds or milliseconds later than a given time. Correspondingly,
            the number of seconds or milliseconds between two times can be found using
            secsTo() or msecsTo().</para>
            <para>QTime can be used to measure a span of elapsed time using the
            start(), restart(), and elapsed() functions.</para>
            <para></para>
            <para>See also QDate and QDateTime.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTime.#ctor">
            <summary>
            <para>Constructs a null time object. A null time can be a QTime(0, 0,
            0, 0) (i.e., midnight) object, except that isNull() returns true and
            isValid() returns false.</para>
            <para>See also isNull() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a time with hour h, minute m, seconds s and
            milliseconds ms.</para>
            <para>h must be in the range 0 to 23, m and s must be in the range 0 to
            59, and ms must be in the range 0 to 999.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.IsValid">
            <summary>
            <para>Returns true if the time is valid; otherwise returns false. For
            example, the time 23:30:55.746 is valid, but 24:12:30 is invalid.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.ToString(QtCore.Qt.DateFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the time as a string. The format parameter determines the
            format of the string.</para>
            <para>If format is Qt::TextDate, the string format is HH:mm:ss; e.g. 1
            second before midnight would be &quot;23:59:59&quot;.</para>
            <para>If format is Qt::ISODate, the string format corresponds to the
            ISO 8601 extended specification for representations of dates, which is also
            HH:mm:ss.</para>
            <para>If the format is Qt::SystemLocaleShortDate or
            Qt::SystemLocaleLongDate, the string format depends on the locale settings
            of the system. Identical to calling QLocale::system().toString(time,
            QLocale::ShortFormat) or QLocale::system().toString(time,
            QLocale::LongFormat).</para>
            <para>If the format is Qt::DefaultLocaleShortDate or
            Qt::DefaultLocaleLongDate, the string format depends on the default
            application locale. This is the locale set with QLocale::setDefault(), or
            the system locale if no default locale has been set. Identical to
            calling</para>
            <para>QLocale().toString(time, QLocale::ShortFormat) or
            QLocale().toString(time, QLocale::LongFormat).</para>
            <para>If the format is Qt::RFC2822Date, the string is formatted in an
            RFC 2822 compatible way. An example of this formatting is
            &quot;23:59:20&quot;.</para>
            <para>If the time is invalid, an empty string will be returned.</para>
            <para>See also QDate::toString() and QDateTime::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.ToString(System.String)">
            <summary>
            <para>Returns the time as a string. The format parameter determines the
            format of the result string.</para>
            <para>These expressions may be used:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>h	the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM
            display)</para>
            <para>hh	the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM
            display)</para>
            <para>H	the hour without a leading zero (0 to 23, even with AM/PM
            display)</para>
            <para>HH	the hour with a leading zero (00 to 23, even with AM/PM
            display)</para>
            <para>m	the minute without a leading zero (0 to 59)</para>
            <para>mm	the minute with a leading zero (00 to 59)</para>
            <para>s	the second without a leading zero (0 to 59)</para>
            <para>ss	the second with a leading zero (00 to 59)</para>
            <para>z	the milliseconds without leading zeroes (0 to 999)</para>
            <para>zzz	the milliseconds with leading zeroes (000 to 999)</para>
            <para>AP or A	use AM/PM display. A/AP will be replaced by either
            &quot;AM&quot; or &quot;PM&quot;.</para>
            <para>ap or a	use am/pm display. a/ap will be replaced by either
            &quot;am&quot; or &quot;pm&quot;.</para>
            <para>t	the timezone (for example &quot;CEST&quot;)</para>
            <para></para>
            <para>All other input characters will be ignored. Any sequence of
            characters that are enclosed in single quotes will be treated as text and
            not be used as an expression. Two consecutive single quotes
            (&quot;''&quot;) are replaced by a singlequote in the output. Formats
            without separators (e.g. &quot;HHmm&quot;) are currently not
            supported.</para>
            <para>Example format strings (assuming that the QTime is
            14:13:09.042)</para>
            <para></para>
            <para> FormatResult</para>
            <para>hh:mm:ss.zzz	14:13:09.042</para>
            <para>h:m:s ap	2:13:9 pm</para>
            <para>H:m:s a	14:13:9 pm</para>
            <para></para>
            <para>If the time is invalid, an empty string will be returned. If
            format is empty, the default format &quot;hh:mm:ss&quot; is used.</para>
            <para>See also QDate::toString(), QDateTime::toString(), and
            QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.SetHMS(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the time to hour h, minute m, seconds s and milliseconds
            ms.</para>
            <para>h must be in the range 0 to 23, m and s must be in the range 0 to
            59, and ms must be in the range 0 to 999. Returns true if the set time is
            valid; otherwise returns false.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.AddSecs(System.Int32)">
            <summary>
            <para>Returns a QTime object containing a time s seconds later than the
            time of this object (or earlier if s is negative).</para>
            <para>Note that the time will wrap if it passes midnight.</para>
            <para>Returns a null time if this time is invalid.</para>
            <para>Example:</para>
            <para>QTime n(14, 0, 0);                // n == 14:00:00</para>
            <para>QTime t;</para>
            <para>t = n.addSecs(70);                // t == 14:01:10</para>
            <para>t = n.addSecs(-70);               // t == 13:58:50</para>
            <para>t = n.addSecs(10 * 60 * 60 + 5);  // t == 00:00:05</para>
            <para>t = n.addSecs(-15 * 60 * 60);     // t == 23:00:00</para>
            <para>See also addMSecs(), secsTo(), and QDateTime::addSecs().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.SecsTo(QtCore.QTime)">
            <summary>
            <para>Returns the number of seconds from this time to t. If t is
            earlier than this time, the number of seconds returned is negative.</para>
            <para>Because QTime measures time within a day and there are 86400
            seconds in a day, the result is always between -86400 and 86400.</para>
            <para>secsTo() does not take into account any milliseconds.</para>
            <para>Returns 0 if either time is invalid.</para>
            <para>See also addSecs() and QDateTime::secsTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.AddMSecs(System.Int32)">
            <summary>
            <para>Returns a QTime object containing a time ms milliseconds later
            than the time of this object (or earlier if ms is negative).</para>
            <para>Note that the time will wrap if it passes midnight. See addSecs()
            for an example.</para>
            <para>Returns a null time if this time is invalid.</para>
            <para>See also addSecs(), msecsTo(), and QDateTime::addMSecs().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.MsecsTo(QtCore.QTime)">
            <summary>
            <para>Returns the number of milliseconds from this time to t. If t is
            earlier than this time, the number of milliseconds returned is
            negative.</para>
            <para>Because QTime measures time within a day and there are 86400
            seconds in a day, the result is always between -86400000 and 86400000
            ms.</para>
            <para>Returns 0 if either time is invalid.</para>
            <para>See also secsTo(), addMSecs(), and QDateTime::msecsTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_Equality(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is equal to t; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_Inequality(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is different from t; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_LessThan(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is earlier than t; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_LessThanOrEqual(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is earlier than or equal to t;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_GreaterThan(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is later than t; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.op_GreaterThanOrEqual(QtCore.QTime,QtCore.QTime)">
            <summary>
            <para>Returns true if this time is later than or equal to t; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.Start">
            <summary>
            <para>Sets this time to the current time. This is practical for
            timing:</para>
            <para>QTime t;</para>
            <para>t.start();</para>
            <para>some_lengthy_task();</para>
            <para>qDebug(&quot;Time elapsed: %d ms&quot;, t.elapsed());</para>
            <para>See also restart(), elapsed(), and currentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.Restart">
            <summary>
            <para>Sets this time to the current time and returns the number of
            milliseconds that have elapsed since the last time start() or restart() was
            called.</para>
            <para>This function is guaranteed to be atomic and is thus very handy
            for repeated measurements. Call start() to start the first measurement, and
            restart() for each later measurement.</para>
            <para>Note that the counter wraps to zero 24 hours after the last call
            to start() or restart().</para>
            <para>Warning: If the system's clock setting has been changed since the
            last time start() or restart() was called, the result is undefined. This
            can happen when daylight savings time is turned on or off.</para>
            <para>See also start(), elapsed(), and currentTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.FromMSecsSinceStartOfDay(System.Int32)">
            <summary>
            <para>Returns a new QTime instance with the time set to the number of
            msecs since the start of the day, i.e. since 00:00:00.</para>
            <para>If msecs falls outside the valid range an invalid QTime will be
            returned.</para>
            <para>See also msecsSinceStartOfDay().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.FromString(System.String,QtCore.Qt.DateFormat)">
            <summary>
            <para>Returns the time represented in the string as a QTime using the
            format given, or an invalid time if this is not possible.</para>
            <para>Note that fromString() uses a &quot;C&quot; locale encoded string
            to convert milliseconds to a float value. If the default locale is not
            &quot;C&quot;, this may result in two conversion attempts (if the
            conversion fails for the default locale). This should be considered an
            implementation detail.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.FromString(System.String,System.String)">
            <summary>
            <para>Returns the QTime represented by the string, using the format
            given, or an invalid time if the string cannot be parsed.</para>
            <para>These expressions may be used for the format:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>h	the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM
            display)</para>
            <para>hh	the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM
            display)</para>
            <para>m	the minute without a leading zero (0 to 59)</para>
            <para>mm	the minute with a leading zero (00 to 59)</para>
            <para>s	the second without a leading zero (0 to 59)</para>
            <para>ss	the second with a leading zero (00 to 59)</para>
            <para>z	the milliseconds without leading zeroes (0 to 999)</para>
            <para>zzz	the milliseconds with leading zeroes (000 to 999)</para>
            <para>AP	interpret as an AM/PM time. AP must be either &quot;AM&quot;
            or &quot;PM&quot;.</para>
            <para>ap	Interpret as an AM/PM time. ap must be either &quot;am&quot;
            or &quot;pm&quot;.</para>
            <para></para>
            <para>All other input characters will be treated as text. Any sequence
            of characters that are enclosed in single quotes will also be treated as
            text and not be used as an expression.</para>
            <para>QTime time = QTime::fromString(&quot;1mm12car00&quot;,
            &quot;m'mm'hcarss&quot;);</para>
            <para>// time is 12:01.00</para>
            <para>If the format is not satisfied, an invalid QTime is returned.
            Expressions that do not expect leading zeroes to be given (h, m, s and z)
            are greedy. This means that they will use two digits even if this puts them
            outside the range of accepted values and leaves too few digits for other
            sections. For example, the following string could have meant 00:07:10, but
            the m will grab two digits, resulting in an invalid time:</para>
            <para>QTime time = QTime::fromString(&quot;00:710&quot;,
            &quot;hh:ms&quot;); // invalid</para>
            <para>Any field that is not represented in the format will be set to
            zero. For example:</para>
            <para>QTime time = QTime::fromString(&quot;1.30&quot;,
            &quot;m.s&quot;);</para>
            <para>// time is 00:01:30.000</para>
            <para>See also QDateTime::fromString(), QDate::fromString(),
            QDate::toString(), QDateTime::toString(), and QTime::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTime.IsValid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the specified time is valid; otherwise returns
            false.</para>
            <para>The time is valid if h is in the range 0 to 23, m and s are in
            the range 0 to 59, and ms is in the range 0 to 999.</para>
            <para>Example:</para>
            <para>QTime::isValid(21, 10, 30); // returns true</para>
            <para>QTime::isValid(22, 5,  62); // returns false</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.IsNull">
            <summary>
            <para>Returns true if the time is null (i.e., the QTime object was
            constructed using the default constructor); otherwise returns false. A null
            time is also an invalid time.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.Hour">
            <summary>
            <para>Returns the hour part (0 to 23) of the time.</para>
            <para>Returns -1 if the time is invalid.</para>
            <para>See also minute(), second(), and msec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.Minute">
            <summary>
            <para>Returns the minute part (0 to 59) of the time.</para>
            <para>Returns -1 if the time is invalid.</para>
            <para>See also hour(), second(), and msec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.Second">
            <summary>
            <para>Returns the second part (0 to 59) of the time.</para>
            <para>Returns -1 if the time is invalid.</para>
            <para>See also hour(), minute(), and msec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.Msec">
            <summary>
            <para>Returns the millisecond part (0 to 999) of the time.</para>
            <para>Returns -1 if the time is invalid.</para>
            <para>See also hour(), minute(), and second().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.MsecsSinceStartOfDay">
            <summary>
            <para>Returns the number of msecs since the start of the day, i.e.
            since 00:00:00.</para>
            <para>See also fromMSecsSinceStartOfDay().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.CurrentTime">
            <summary>
            <para>Returns the current time as reported by the system clock.</para>
            <para>Note that the accuracy depends on the accuracy of the underlying
            operating system; not all systems provide 1-millisecond accuracy.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTime.Elapsed">
            <summary>
            <para>Returns the number of milliseconds that have elapsed since the
            last time start() or restart() was called.</para>
            <para>Note that the counter wraps to zero 24 hours after the last call
            to start() or restart.</para>
            <para>Note that the accuracy depends on the accuracy of the underlying
            operating system; not all systems provide 1-millisecond accuracy.</para>
            <para>Warning: If the system's clock setting has been changed since the
            last time start() or restart() was called, the result is undefined. This
            can happen when daylight savings time is turned on or off.</para>
            <para>See also start() and restart().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDateTime">
            <summary>
            <para>The QDateTime class provides date and time functions.</para>
            </summary>
            <remarks>
            <para>A QDateTime object contains a calendar date and a clock time (a
            &quot;datetime&quot;). It is a combination of the QDate and QTime classes.
            It can read the current datetime from the system clock. It provides
            functions for comparing datetimes and for manipulating a datetime by adding
            a number of seconds, days, months, or years.</para>
            <para>A QDateTime object is typically created either by giving a date
            and time explicitly in the constructor, or by using the static function
            currentDateTime() that returns a QDateTime object set to the system clock's
            time. The date and time can be changed with setDate() and setTime(). A
            datetime can also be set using the setTime_t() function that takes a
            POSIX-standard &quot;number of seconds since 00:00:00 on January 1,
            1970&quot; value. The fromString() function returns a QDateTime, given a
            string and a date format used to interpret the date within the
            string.</para>
            <para>The date() and time() functions provide access to the date and
            time parts of the datetime. The same information is provided in textual
            format by the toString() function.</para>
            <para>QDateTime provides a full set of operators to compare two
            QDateTime objects, where smaller means earlier and larger means
            later.</para>
            <para>You can increment (or decrement) a datetime by a given number of
            milliseconds using addMSecs(), seconds using addSecs(), or days using
            addDays(). Similarly, you can use addMonths() and addYears(). The daysTo()
            function returns the number of days between two datetimes, secsTo() returns
            the number of seconds between two datetimes, and msecsTo() returns the
            number of milliseconds between two datetimes.</para>
            <para>QDateTime can store datetimes as local time or as UTC.
            QDateTime::currentDateTime() returns a QDateTime expressed as local time;
            use toUTC() to convert it to UTC. You can also use timeSpec() to find out
            if a QDateTime object stores a UTC time or a local time. Operations such as
            addSecs() and secsTo() are aware of daylight saving time (DST).</para>
            <para>Note: QDateTime does not account for leap seconds.</para>
            <para></para>
            <para></para>
            <para>No Year 0</para>
            <para>There is no year 0. Dates in that year are considered invalid.
            The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before
            current era.&quot; The day before 1 January 1 CE is 31 December 1
            BCE.</para>
            <para></para>
            <para>Range of Valid Dates</para>
            <para>The range of valid values able to be stored in QDateTime is
            dependent on the internal storage implementation. QDateTime is currently
            stored in a qint64 as a serial msecs value encoding the date and time. This
            restricts the date range to about +/- 292 million years, compared to the
            QDate range of +/- 2 billion years. Care must be taken when creating a
            QDateTime with extreme values that you do not overflow the storage. The
            exact range of supported values varies depending on the Qt::TimeSpec and
            time zone.</para>
            <para></para>
            <para>Use of System Timezone</para>
            <para>QDateTime uses the system's time zone information to determine
            the offset of local time from UTC. If the system is not configured
            correctly or not up-to-date, QDateTime will give wrong results as
            well.</para>
            <para></para>
            <para>Daylight Savings Time (DST)</para>
            <para>QDateTime takes into account the system's time zone information
            when dealing with DST. On modern Unix systems, this means it applies the
            correct historical DST data whenever possible. On Windows and Windows CE,
            where the system doesn't support historical DST data, historical accuracy
            is not maintained with respect to DST.</para>
            <para>The range of valid dates taking DST into account is 1970-01-01 to
            the present, and rules are in place for handling DST correctly until
            2037-12-31, but these could change. For dates falling outside that range,
            QDateTime makes a best guess using the rules for year 1970 or 2037, but we
            can't guarantee accuracy. This means QDateTime doesn't take into account
            changes in a locale's time zone before 1970, even if the system's time zone
            database supports that information.</para>
            <para>QDateTime takes into consideration the Standard Time to Daylight
            Time transition. For example if the transition is at 2am and the clock goes
            forward to 3am, then there is a &quot;missing&quot; hour from 02:00:00 to
            02:59:59.999 which QDateTime considers to be invalid. Any date maths
            performed will take this missing hour into account and return a valid
            result.</para>
            <para></para>
            <para>Offset From UTC</para>
            <para>A Qt::TimeSpec of Qt::OffsetFromUTC is also supported. This
            allows you to define a QDateTime relative to UTC at a fixed offset of a
            given number of seconds from UTC. For example, an offset of +3600 seconds
            is one hour ahead of UTC and is usually written in ISO standard notation as
            &quot;UTC+01:00&quot;. Daylight Savings Time never applies with this
            TimeSpec.</para>
            <para>There is no explicit size restriction to the offset seconds, but
            there is an implicit limit imposed when using the toString() and
            fromString() methods which use a format of [+|-]hh:mm, effectively limiting
            the range to +/- 99 hours and 59 minutes and whole minutes only. Note that
            currently no time zone lies outside the range of +/- 14 hours.</para>
            <para></para>
            <para>Time Zone Support</para>
            <para>A Qt::TimeSpec of Qt::TimeZone is also supported in conjunction
            with the QTimeZone class. This allows you to define a datetime in a named
            time zone adhering to a consistent set of daylight savings transition
            rules. For example a time zone of &quot;Europe/Berlin&quot; will apply the
            daylight savings rules as used in Germany since 1970. Note that the
            transition rules applied depend on the platform support. See the QTimeZone
            documentation for more details.</para>
            <para></para>
            <para>See also QDate, QTime, QDateTimeEdit, and QTimeZone.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDateTime.#ctor">
            <summary>
            <para>Constructs a null datetime (i.e. null date and null time). A null
            datetime is invalid, since the date is invalid.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.#ctor(QtCore.QDate)">
            <summary>
            <para>Constructs a datetime with the given date, a valid
            time(00:00:00.000), and sets the timeSpec() to Qt::LocalTime.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.#ctor(QtCore.QDate,QtCore.QTime,QtCore.Qt.TimeSpec)">
            <summary>
            <para>Constructs a datetime with the given date and time, using the
            time specification defined by spec.</para>
            <para>If date is valid and time is not, the time will be set to
            midnight.</para>
            <para>If spec is Qt::OffsetFromUTC then it will be set to Qt::UTC, i.e.
            an offset of 0 seconds. To create a Qt::OffsetFromUTC datetime use the
            correct constructor.</para>
            <para>If spec is Qt::TimeZone then the spec will be set to
            Qt::LocalTime, i.e. the current system time zone. To create a Qt::TimeZone
            datetime use the correct constructor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.#ctor(QtCore.QDate,QtCore.QTime,QtCore.Qt.TimeSpec,System.Int32)">
            <summary>
            <para>Constructs a datetime with the given date and time, using the
            time specification defined by spec and offsetSeconds seconds.</para>
            <para>If date is valid and time is not, the time will be set to
            midnight.</para>
            <para>If the spec is not Qt::OffsetFromUTC then offsetSeconds will be
            ignored.</para>
            <para>If the spec is Qt::OffsetFromUTC and offsetSeconds is 0 then the
            timeSpec() will be set to Qt::UTC, i.e. an offset of 0 seconds.</para>
            <para>If spec is Qt::TimeZone then the spec will be set to
            Qt::LocalTime, i.e. the current system time zone. To create a Qt::TimeZone
            datetime use the correct constructor.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.#ctor(QtCore.QDate,QtCore.QTime,QtCore.QTimeZone)">
            <summary>
            <para>Constructs a datetime with the given date and time, using the
            Time Zone specified by timeZone.</para>
            <para>If date is valid and time is not, the time will be set to
            00:00:00.</para>
            <para>If timeZone is invalid then the datetime will be invalid.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.#ctor(QtCore.QDateTime)">
            <summary>
            <para>Constructs a copy of the other datetime.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.Swap(QtCore.QDateTime)">
            <summary>
            <para>Swaps this datetime with other. This operation is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToMSecsSinceEpoch">
            <summary>
            <para>Returns the datetime as the number of milliseconds that have
            passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
            (Qt::UTC).</para>
            <para>On systems that do not support time zones, this function will
            behave as if local time were Qt::UTC.</para>
            <para>The behavior for this function is undefined if the datetime
            stored in this object is not valid. However, for all valid dates, this
            function returns a unique value.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also toTime_t() and setMSecsSinceEpoch().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToTime_t">
            <summary>
            <para>Returns the datetime as the number of seconds that have passed
            since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC).</para>
            <para>On systems that do not support time zones, this function will
            behave as if local time were Qt::UTC.</para>
            <para>Note: This function returns a 32-bit unsigned integer, so it does
            not support dates before 1970, but it does support dates after
            2038-01-19T03:14:06, which may not be valid time_t values. Be careful when
            passing those time_t values to system functions, which could interpret them
            as negative dates.</para>
            <para>If the date is outside the range 1970-01-01T00:00:00 to
            2106-02-07T06:28:14, this function returns -1 cast to an unsigned integer
            (i.e., 0xFFFFFFFF).</para>
            <para>To get an extended range, use toMSecsSinceEpoch().</para>
            <para>See also toMSecsSinceEpoch() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.SetMSecsSinceEpoch(System.Int64)">
            <summary>
            <para>Sets the date and time given the number of milliseconds msecs
            that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time
            (Qt::UTC). On systems that do not support time zones this function will
            behave as if local time were Qt::UTC.</para>
            <para>Note that passing the minimum of qint64
            (std::numeric_limits&lt;qint64&gt;::min()) to msecs will result in
            undefined behavior.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also toMSecsSinceEpoch() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.SetTime_t(System.UInt32)">
            <summary>
            <para>Sets the date and time given the number of seconds that have
            passed since 1970-01-01T00:00:00, Coordinated Universal Time (Qt::UTC). On
            systems that do not support time zones this function will behave as if
            local time were Qt::UTC.</para>
            <para>See also toTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToString(QtCore.Qt.DateFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the datetime as a string in the format given.</para>
            <para>If the format is Qt::TextDate, the string is formatted in the
            default way. QDate::shortDayName(), QDate::shortMonthName(), and
            QTime::toString() are used to generate the string, so the day and month
            names will be localized names using the system locale, i.e.
            QLocale::system(). An example of this formatting is &quot;Wed May 20
            03:40:13 1998&quot;.</para>
            <para>If the format is Qt::ISODate, the string format corresponds to
            the ISO 8601 extended specification for representations of dates and times,
            taking the form YYYY-MM-DDTHH:mm:ss[Z|[+|-]HH:mm], depending on the
            timeSpec() of the QDateTime. If the timeSpec() is Qt::UTC, Z will be
            appended to the string; if the timeSpec() is Qt::OffsetFromUTC, the offset
            in hours and minutes from UTC will be appended to the string.</para>
            <para>If the format is Qt::SystemLocaleShortDate or
            Qt::SystemLocaleLongDate, the string format depends on the locale settings
            of the system. Identical to calling QLocale::system().toString(datetime,
            QLocale::ShortFormat) or QLocale::system().toString(datetime,
            QLocale::LongFormat).</para>
            <para>If the format is Qt::DefaultLocaleShortDate or
            Qt::DefaultLocaleLongDate, the string format depends on the default
            application locale. This is the locale set with QLocale::setDefault(), or
            the system locale if no default locale has been set. Identical to calling
            QLocale().toString(datetime, QLocale::ShortFormat) or
            QLocale().toString(datetime, QLocale::LongFormat).</para>
            <para>If the format is Qt::RFC2822Date, the string is formatted
            following RFC 2822.</para>
            <para>If the datetime is invalid, an empty string will be
            returned.</para>
            <para>Warning: The Qt::ISODate format is only valid for years in the
            range 0 to 9999. This restriction may apply to locale-aware formats as
            well, depending on the locale settings.</para>
            <para>See also QDate::toString(), QTime::toString(), and
            Qt::DateFormat.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToString(System.String)">
            <summary>
            <para>Returns the datetime as a string. The format parameter determines
            the format of the result string.</para>
            <para>These expressions may be used for the date:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>d	the day as number without a leading zero (1 to 31)</para>
            <para>dd	the day as number with a leading zero (01 to 31)</para>
            <para>ddd	the abbreviated localized day name (e.g. 'Mon' to 'Sun').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>dddd	the long localized day name (e.g. 'Monday' to 'Qt::Sunday').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>M	the month as number without a leading zero (1-12)</para>
            <para>MM	the month as number with a leading zero (01-12)</para>
            <para>MMM	the abbreviated localized month name (e.g. 'Jan' to 'Dec').
            Uses the system locale to localize the name, i.e. QLocale::system().</para>
            <para>MMMM	the long localized month name (e.g. 'January' to
            'December'). Uses the system locale to localize the name, i.e.
            QLocale::system().</para>
            <para>yy	the year as two digit number (00-99)</para>
            <para>yyyy	the year as four digit number</para>
            <para></para>
            <para>These expressions may be used for the time:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>h	the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM
            display)</para>
            <para>hh	the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM
            display)</para>
            <para>H	the hour without a leading zero (0 to 23, even with AM/PM
            display)</para>
            <para>HH	the hour with a leading zero (00 to 23, even with AM/PM
            display)</para>
            <para>m	the minute without a leading zero (0 to 59)</para>
            <para>mm	the minute with a leading zero (00 to 59)</para>
            <para>s	the second without a leading zero (0 to 59)</para>
            <para>ss	the second with a leading zero (00 to 59)</para>
            <para>z	the milliseconds without leading zeroes (0 to 999)</para>
            <para>zzz	the milliseconds with leading zeroes (000 to 999)</para>
            <para>AP or A	use AM/PM display. A/AP will be replaced by either
            &quot;AM&quot; or &quot;PM&quot;.</para>
            <para>ap or a	use am/pm display. a/ap will be replaced by either
            &quot;am&quot; or &quot;pm&quot;.</para>
            <para>t	the timezone (for example &quot;CEST&quot;)</para>
            <para></para>
            <para>All other input characters will be ignored. Any sequence of
            characters that are enclosed in single quotes will be treated as text and
            not be used as an expression. Two consecutive single quotes
            (&quot;''&quot;) are replaced by a singlequote in the output. Formats
            without separators (e.g. &quot;HHmm&quot;) are currently not
            supported.</para>
            <para>Example format strings (assumed that the QDateTime is 21 May 2001
            14:13:09):</para>
            <para></para>
            <para> FormatResult</para>
            <para>dd.MM.yyyy	21.05.2001</para>
            <para>ddd MMMM d yy	Tue May 21 01</para>
            <para>hh:mm:ss.zzz	14:13:09.042</para>
            <para>h:m:s ap	2:13:9 pm</para>
            <para></para>
            <para>If the datetime is invalid, an empty string will be
            returned.</para>
            <para>See also QDate::toString(), QTime::toString(), and
            QLocale::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.AddDays(System.Int64)">
            <summary>
            <para>Returns a QDateTime object containing a datetime ndays days later
            than the datetime of this object (or earlier if ndays is negative).</para>
            <para>If the timeSpec() is Qt::LocalTime and the resulting date and
            time fall in the Standard Time to Daylight Time transition hour then the
            result will be adjusted accordingly, i.e. if the transition is at 2am and
            the clock goes forward to 3am and the result falls between 2am and 3am then
            the result will be adjusted to fall after 3am.</para>
            <para>See also daysTo(), addMonths(), addYears(), and addSecs().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.AddMonths(System.Int32)">
            <summary>
            <para>Returns a QDateTime object containing a datetime nmonths months
            later than the datetime of this object (or earlier if nmonths is
            negative).</para>
            <para>If the timeSpec() is Qt::LocalTime and the resulting date and
            time fall in the Standard Time to Daylight Time transition hour then the
            result will be adjusted accordingly, i.e. if the transition is at 2am and
            the clock goes forward to 3am and the result falls between 2am and 3am then
            the result will be adjusted to fall after 3am.</para>
            <para>See also daysTo(), addDays(), addYears(), and addSecs().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.AddYears(System.Int32)">
            <summary>
            <para>Returns a QDateTime object containing a datetime nyears years
            later than the datetime of this object (or earlier if nyears is
            negative).</para>
            <para>If the timeSpec() is Qt::LocalTime and the resulting date and
            time fall in the Standard Time to Daylight Time transition hour then the
            result will be adjusted accordingly, i.e. if the transition is at 2am and
            the clock goes forward to 3am and the result falls between 2am and 3am then
            the result will be adjusted to fall after 3am.</para>
            <para>See also daysTo(), addDays(), addMonths(), and addSecs().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.AddSecs(System.Int64)">
            <summary>
            <para>Returns a QDateTime object containing a datetime s seconds later
            than the datetime of this object (or earlier if s is negative).</para>
            <para>If this datetime is invalid, an invalid datetime will be
            returned.</para>
            <para>See also addMSecs(), secsTo(), addDays(), addMonths(), and
            addYears().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.AddMSecs(System.Int64)">
            <summary>
            <para>Returns a QDateTime object containing a datetime msecs
            miliseconds later than the datetime of this object (or earlier if msecs is
            negative).</para>
            <para>If this datetime is invalid, an invalid datetime will be
            returned.</para>
            <para>See also addSecs(), msecsTo(), addDays(), addMonths(), and
            addYears().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToTimeSpec(QtCore.Qt.TimeSpec)">
            <summary>
            <para>Returns a copy of this datetime converted to the given time
            spec.</para>
            <para>If spec is Qt::OffsetFromUTC then it is set to Qt::UTC. To set to
            a spec of Qt::OffsetFromUTC use toOffsetFromUtc().</para>
            <para>If spec is Qt::TimeZone then it is set to Qt::LocalTime, i.e. the
            local Time Zone.</para>
            <para>Example:</para>
            <para>QDateTime local(QDateTime::currentDateTime());</para>
            <para>QDateTime UTC(local.toTimeSpec(Qt::UTC));</para>
            <para>qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt;
            local;</para>
            <para>qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;</para>
            <para>qDebug() &lt;&lt; &quot;No difference between times:&quot;
            &lt;&lt; local.secsTo(UTC);</para>
            <para>See also timeSpec(), toTimeZone(), toUTC(), and
            toLocalTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToLocalTime">
            <summary>
            <para>Returns a datetime containing the date and time information in
            this datetime, but specified using the Qt::LocalTime definition.</para>
            <para>Example:</para>
            <para>QDateTime UTC(QDateTime::currentDateTimeUtc());</para>
            <para>QDateTime local(UTC.toLocalTime());</para>
            <para>qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;</para>
            <para>qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt;
            local;</para>
            <para>qDebug() &lt;&lt; &quot;No difference between times:&quot;
            &lt;&lt; UTC.secsTo(local);</para>
            <para>See also toTimeSpec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToUTC">
            <summary>
            <para>Returns a datetime containing the date and time information in
            this datetime, but specified using the Qt::UTC definition.</para>
            <para>Example:</para>
            <para>QDateTime local(QDateTime::currentDateTime());</para>
            <para>QDateTime UTC(local.toUTC());</para>
            <para>qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt;
            local;</para>
            <para>qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;</para>
            <para>qDebug() &lt;&lt; &quot;No difference between times:&quot;
            &lt;&lt; local.secsTo(UTC);</para>
            <para>See also toTimeSpec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToOffsetFromUtc(System.Int32)">
            <summary>
            <para>Returns a copy of this datetime converted to a spec of
            Qt::OffsetFromUTC with the given offsetSeconds.</para>
            <para>If the offsetSeconds equals 0 then a UTC datetime will be
            returned</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setOffsetFromUtc(), offsetFromUtc(), and
            toTimeSpec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.ToTimeZone(QtCore.QTimeZone)">
            <summary>
            <para>Returns a copy of this datetime converted to the given
            timeZone</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also timeZone() and toTimeSpec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.DaysTo(QtCore.QDateTime)">
            <summary>
            <para>Returns the number of days from this datetime to the other
            datetime. The number of days is counted as the number of times midnight is
            reached between this datetime to the other datetime. This means that a 10
            minute difference from 23:55 to 0:05 the next day counts as one day.</para>
            <para>If the other datetime is earlier than this datetime, the value
            returned is negative.</para>
            <para>Example:</para>
            <para>QDateTime startDate(QDate(2012, 7, 6), QTime(8, 30, 0));</para>
            <para>QDateTime endDate(QDate(2012, 7, 7), QTime(16, 30, 0));</para>
            <para>qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot;
            &lt;&lt; startDate.daysTo(endDate);</para>
            <para></para>
            <para>startDate = QDateTime(QDate(2012, 7, 6), QTime(23, 55,
            0));</para>
            <para>endDate = QDateTime(QDate(2012, 7, 7), QTime(0, 5, 0));</para>
            <para>qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot;
            &lt;&lt; startDate.daysTo(endDate);</para>
            <para></para>
            <para>qSwap(startDate, endDate); // Make endDate before
            startDate.</para>
            <para>qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot;
            &lt;&lt; startDate.daysTo(endDate);</para>
            <para>See also addDays(), secsTo(), and msecsTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.SecsTo(QtCore.QDateTime)">
            <summary>
            <para>Returns the number of seconds from this datetime to the other
            datetime. If the other datetime is earlier than this datetime, the value
            returned is negative.</para>
            <para>Before performing the comparison, the two datetimes are converted
            to Qt::UTC to ensure that the result is correct if one of the two datetimes
            has daylight saving time (DST) and the other doesn't.</para>
            <para>Returns 0 if either datetime is invalid.</para>
            <para>Example:</para>
            <para>QDateTime now = QDateTime::currentDateTime();</para>
            <para>QDateTime xmas(QDate(now.date().year(), 12, 25), QTime(0,
            0));</para>
            <para>qDebug(&quot;There are %d seconds to Christmas&quot;,
            now.secsTo(xmas));</para>
            <para>See also addSecs(), daysTo(), and QTime::secsTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.MsecsTo(QtCore.QDateTime)">
            <summary>
            <para>Returns the number of milliseconds from this datetime to the
            other datetime. If the other datetime is earlier than this datetime, the
            value returned is negative.</para>
            <para>Before performing the comparison, the two datetimes are converted
            to Qt::UTC to ensure that the result is correct if one of the two datetimes
            has daylight saving time (DST) and the other doesn't.</para>
            <para>Returns 0 if either datetime is invalid.</para>
            <para>See also addMSecs(), daysTo(), and QTime::msecsTo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_Equality(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is equal to the other datetime;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_Inequality(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is different from the other
            datetime; otherwise returns false.</para>
            <para>Two datetimes are different if either the date, the time, or the
            time zone components are different.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_LessThan(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is earlier than the other datetime;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_LessThanOrEqual(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is earlier than or equal to the
            other datetime; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_GreaterThan(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is later than the other datetime;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.op_GreaterThanOrEqual(QtCore.QDateTime,QtCore.QDateTime)">
            <summary>
            <para>Returns true if this datetime is later than or equal to the other
            datetime; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromString(System.String,QtCore.Qt.DateFormat)">
            <summary>
            <para>Returns the QDateTime represented by the string, using the format
            given, or an invalid datetime if this is not possible.</para>
            <para>Note for Qt::TextDate: It is recommended that you use the English
            short month names (e.g. &quot;Jan&quot;). Although localized month names
            can also be used, they depend on the user's locale settings.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromString(System.String,System.String)">
            <summary>
            <para>Returns the QDateTime represented by the string, using the format
            given, or an invalid datetime if the string cannot be parsed.</para>
            <para>These expressions may be used for the date part of the format
            string:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>d	the day as number without a leading zero (1 to 31)</para>
            <para>dd	the day as number with a leading zero (01 to 31)</para>
            <para>ddd	the abbreviated localized day name (e.g. 'Mon' to 'Sun').
            Uses QDate::shortDayName().</para>
            <para>dddd	the long localized day name (e.g. 'Monday' to 'Sunday').
            Uses QDate::longDayName().</para>
            <para>M	the month as number without a leading zero (1-12)</para>
            <para>MM	the month as number with a leading zero (01-12)</para>
            <para>MMM	the abbreviated localized month name (e.g. 'Jan' to 'Dec').
            Uses QDate::shortMonthName().</para>
            <para>MMMM	the long localized month name (e.g. 'January' to
            'December'). Uses QDate::longMonthName().</para>
            <para>yy	the year as two digit number (00-99)</para>
            <para>yyyy	the year as four digit number</para>
            <para></para>
            <para>Note: Unlike the other version of this function, day and month
            names must be given in the user's local language. It is only possible to
            use the English names if the user's language is English.</para>
            <para>These expressions may be used for the time part of the format
            string:</para>
            <para></para>
            <para> ExpressionOutput</para>
            <para>h	the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM
            display)</para>
            <para>hh	the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM
            display)</para>
            <para>H	the hour without a leading zero (0 to 23, even with AM/PM
            display)</para>
            <para>HH	the hour with a leading zero (00 to 23, even with AM/PM
            display)</para>
            <para>m	the minute without a leading zero (0 to 59)</para>
            <para>mm	the minute with a leading zero (00 to 59)</para>
            <para>s	the second without a leading zero (0 to 59)</para>
            <para>ss	the second with a leading zero (00 to 59)</para>
            <para>z	the milliseconds without leading zeroes (0 to 999)</para>
            <para>zzz	the milliseconds with leading zeroes (000 to 999)</para>
            <para>AP or A	interpret as an AM/PM time. AP must be either
            &quot;AM&quot; or &quot;PM&quot;.</para>
            <para>ap or a	Interpret as an AM/PM time. ap must be either
            &quot;am&quot; or &quot;pm&quot;.</para>
            <para></para>
            <para>All other input characters will be treated as text. Any sequence
            of characters that are enclosed in single quotes will also be treated as
            text and not be used as an expression.</para>
            <para>QTime time1 = QTime::fromString(&quot;131&quot;,
            &quot;HHh&quot;);</para>
            <para>// time1 is 13:00:00</para>
            <para>QTime time1 = QTime::fromString(&quot;1apA&quot;,
            &quot;1amAM&quot;);</para>
            <para>// time1 is 01:00:00</para>
            <para></para>
            <para>QDateTime dateTime2 =
            QDateTime::fromString(&quot;M1d1y9800:01:02&quot;,</para>
            <para>
            &quot;'M'M'd'd'y'yyhh:mm:ss&quot;);</para>
            <para>// dateTime is 1 January 1998 00:01:02</para>
            <para>If the format is not satisfied, an invalid QDateTime is returned.
            The expressions that don't have leading zeroes (d, M, h, m, s, z) will be
            greedy. This means that they will use two digits even if this will put them
            outside the range and/or leave too few digits for other sections.</para>
            <para>QDateTime dateTime = QDateTime::fromString(&quot;130&quot;,
            &quot;Mm&quot;); // invalid</para>
            <para>This could have meant 1 January 00:30.00 but the M will grab two
            digits.</para>
            <para>Incorrectly specified fields of the string will cause an invalid
            QDateTime to be returned. For example, consider the following code, where
            the two digit year 12 is read as 1912 (see the table below for all field
            defaults); the resulting datetime is invalid because 23 April 1912 was a
            Tuesday, not a Monday:</para>
            <para>QString string = &quot;Monday, 23 April 12 22:51:41&quot;;</para>
            <para>QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;</para>
            <para>QDateTime invalid = QDateTime::fromString(string, format);</para>
            <para>The correct code is:</para>
            <para>QString string = &quot;Tuesday, 23 April 12
            22:51:41&quot;;</para>
            <para>QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;</para>
            <para>QDateTime valid = QDateTime::fromString(string, format);</para>
            <para>For any field that is not represented in the format, the
            following defaults are used:</para>
            <para></para>
            <para> FieldDefault value</para>
            <para>Year	1900</para>
            <para>Month	1 (January)</para>
            <para>Day	1</para>
            <para>Hour	0</para>
            <para>Minute	0</para>
            <para>Second	0</para>
            <para></para>
            <para>For example:</para>
            <para>QDateTime dateTime = QDateTime::fromString(&quot;1.30.1&quot;,
            &quot;M.d.s&quot;);</para>
            <para>// dateTime is January 30 in 1900 at 00:00:01.</para>
            <para>dateTime = QDateTime::fromString(&quot;12&quot;,
            &quot;yy&quot;);</para>
            <para>// dateTime is January 1 in 1912 at 00:00:00.</para>
            <para>See also QDate::fromString(), QTime::fromString(),
            QDate::toString(), QDateTime::toString(), and QTime::toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromTime_t(System.UInt32)">
            <summary>
            <para>Returns a datetime whose date and time are the number of seconds
            that have passed since 1970-01-01T00:00:00, Coordinated Universal Time
            (Qt::UTC) and converted to Qt::LocalTime. On systems that do not support
            time zones, the time will be set as if local time were Qt::UTC.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toTime_t() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromTime_t(System.UInt32,QtCore.Qt.TimeSpec,System.Int32)">
            <summary>
            <para>Returns a datetime whose date and time are the number of seconds
            that have passed since 1970-01-01T00:00:00, Coordinated Universal Time
            (Qt::UTC) and converted to the given spec.</para>
            <para>If the spec is not Qt::OffsetFromUTC then the offsetSeconds will
            be ignored. If the spec is Qt::OffsetFromUTC and the offsetSeconds is 0
            then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also toTime_t() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromTime_t(System.UInt32,QtCore.QTimeZone)">
            <summary>
            <para>Returns a datetime whose date and time are the number of seconds
            that have passed since 1970-01-01T00:00:00, Coordinated Universal Time
            (Qt::UTC) and with the given timeZone.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also toTime_t() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromMSecsSinceEpoch(System.Int64)">
            <summary>
            <para>Returns a datetime whose date and time are the number of
            milliseconds, msecs, that have passed since 1970-01-01T00:00:00.000,
            Coordinated Universal Time (Qt::UTC), and converted to Qt::LocalTime. On
            systems that do not support time zones, the time will be set as if local
            time were Qt::UTC.</para>
            <para>Note that there are possible values for msecs that lie outside
            the valid range of QDateTime, both negative and positive. The behavior of
            this function is undefined for those values.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also toTime_t() and setTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromMSecsSinceEpoch(System.Int64,QtCore.Qt.TimeSpec,System.Int32)">
            <summary>
            <para>Returns a datetime whose date and time are the number of
            milliseconds msecs that have passed since 1970-01-01T00:00:00.000,
            Coordinated Universal Time (Qt::UTC) and converted to the given
            spec.</para>
            <para>Note that there are possible values for msecs that lie outside
            the valid range of QDateTime, both negative and positive. The behavior of
            this function is undefined for those values.</para>
            <para>If the spec is not Qt::OffsetFromUTC then the offsetSeconds will
            be ignored. If the spec is Qt::OffsetFromUTC and the offsetSeconds is 0
            then the spec will be set to Qt::UTC, i.e. an offset of 0 seconds.</para>
            <para>If spec is Qt::TimeZone then the spec will be set to
            Qt::LocalTime, i.e. the current system time zone.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also fromTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.FromMSecsSinceEpoch(System.Int64,QtCore.QTimeZone)">
            <summary>
            <para>Returns a datetime whose date and time are the number of
            milliseconds msecs that have passed since 1970-01-01T00:00:00.000,
            Coordinated Universal Time (Qt::UTC) and with the given timeZone.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also fromTime_t().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.QHash(QtCore.QDateTime,System.UInt32)">
            <summary>
            <para>Returns the hash value for the key, using seed to seed the
            calculation.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.QHash(QtCore.QDate,System.UInt32)">
            <summary>
            <para>Returns the hash value for the key, using seed to seed the
            calculation.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDateTime.QHash(QtCore.QTime,System.UInt32)">
            <summary>
            <para>Returns the hash value for the key, using seed to seed the
            calculation.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.Date">
            <summary>
            <para>Returns the date part of the datetime.</para>
            <para>See also setDate(), time(), and timeSpec().</para>
            <para></para>
            <para>Sets the date part of this datetime to date. If no time is set
            yet, it is set to midnight. If date is invalid, this QDateTime becomes
            invalid.</para>
            <para>See also date(), setTime(), and setTimeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.Time">
            <summary>
            <para>Returns the time part of the datetime.</para>
            <para>See also setTime(), date(), and timeSpec().</para>
            <para></para>
            <para>Sets the time part of this datetime to time. If time is not
            valid, this function sets it to midnight. Therefore, it's possible to clear
            any set time in a QDateTime by setting it to a default QTime:</para>
            <para>QDateTime dt = QDateTime::currentDateTime();</para>
            <para>dt.setTime(QTime());</para>
            <para>See also time(), setDate(), and setTimeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.TimeSpec">
            <summary>
            <para>Returns the time specification of the datetime.</para>
            <para>See also setTimeSpec(), date(), time(), and Qt::TimeSpec.</para>
            <para></para>
            <para>Sets the time specification used in this datetime to spec. The
            datetime will refer to a different point in time.</para>
            <para>If spec is Qt::OffsetFromUTC then the timeSpec() will be set to
            Qt::UTC, i.e. an effective offset of 0.</para>
            <para>If spec is Qt::TimeZone then the spec will be set to
            Qt::LocalTime, i.e. the current system time zone.</para>
            <para>Example:</para>
            <para>QDateTime local(QDateTime::currentDateTime());</para>
            <para>qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt;
            local;</para>
            <para></para>
            <para>QDateTime UTC(local);</para>
            <para>UTC.setTimeSpec(Qt::UTC);</para>
            <para>qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;</para>
            <para></para>
            <para>qDebug() &lt;&lt; &quot;There are&quot; &lt;&lt;
            local.secsTo(UTC) &lt;&lt; &quot;seconds difference between the
            datetimes.&quot;;</para>
            <para>See also timeSpec(), setDate(), setTime(), setTimeZone(), and
            Qt::TimeSpec.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.OffsetFromUtc">
            <summary>
            <para>Returns the current Offset From UTC in seconds.</para>
            <para>If the timeSpec() is Qt::OffsetFromUTC this will be the value
            originally set.</para>
            <para>If the timeSpec() is Qt::TimeZone this will be the offset
            effective in the Time Zone including any Daylight Saving Offset.</para>
            <para>If the timeSpec() is Qt::LocalTime this will be the difference
            between the Local Time and UTC including any Daylight Saving Offset.</para>
            <para>If the timeSpec() is Qt::UTC this will be 0.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setOffsetFromUtc().</para>
            <para></para>
            <para>Sets the timeSpec() to Qt::OffsetFromUTC and the offset to
            offsetSeconds. The datetime will refer to a different point in time.</para>
            <para>The maximum and minimum offset is 14 positive or negative hours.
            If offsetSeconds is larger or smaller than that, then the result is
            undefined.</para>
            <para>If offsetSeconds is 0 then the timeSpec() will be set to
            Qt::UTC.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also isValid() and offsetFromUtc().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.TimeZone">
            <summary>
            <para>Returns the time zone of the datetime.</para>
            <para>If the timeSpec() is Qt::LocalTime then an instance of the
            current system time zone will be returned. Note however that if you copy
            this time zone the instance will not remain in sync if the system time zone
            changes.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setTimeZone() and Qt::TimeSpec.</para>
            <para></para>
            <para>Sets the time zone used in this datetime to toZone. The datetime
            will refer to a different point in time.</para>
            <para>If toZone is invalid then the datetime will be invalid.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also timeZone() and Qt::TimeSpec.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.IsNull">
            <summary>
            <para>Returns true if both the date and the time are null; otherwise
            returns false. A null datetime is invalid.</para>
            <para>See also QDate::isNull(), QTime::isNull(), and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.IsValid">
            <summary>
            <para>Returns true if both the date and the time are valid and they are
            valid in the current Qt::TimeSpec, otherwise returns false.</para>
            <para>If the timeSpec() is Qt::LocalTime or Qt::TimeZone then the date
            and time are checked to see if they fall in the Standard Time to Daylight
            Time transition hour, i.e. if the transition is at 2am and the clock goes
            forward to 3am then the time from 02:00:00 to 02:59:59.999 is considered to
            be invalid.</para>
            <para>See also QDate::isValid() and QTime::isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.TimeZoneAbbreviation">
            <summary>
            <para>Returns the Time Zone Abbreviation for the datetime.</para>
            <para>If the timeSpec() is Qt::UTC this will be &quot;UTC&quot;.</para>
            <para>If the timeSpec() is Qt::OffsetFromUTC this will be in the format
            &quot;UTC[+-]00:00&quot;.</para>
            <para>If the timeSpec() is Qt::LocalTime then the host system is
            queried for the correct abbreviation.</para>
            <para>Note that abbreviations may or may not be localized.</para>
            <para>Note too that the abbreviation is not guaranteed to be a unique
            value, i.e. different time zones may have the same abbreviation.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also timeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.IsDaylightTime">
            <summary>
            <para>Returns if this datetime falls in Daylight Savings Time.</para>
            <para>If the Qt::TimeSpec is not Qt::LocalTime or Qt::TimeZone then
            will always return false.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also timeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.CurrentDateTime">
            <summary>
            <para>Returns the current datetime, as reported by the system clock, in
            the local time zone.</para>
            <para>See also currentDateTimeUtc(), QDate::currentDate(),
            QTime::currentTime(), and toTimeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.CurrentDateTimeUtc">
            <summary>
            <para>Returns the current datetime, as reported by the system clock, in
            UTC.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also currentDateTime(), QDate::currentDate(),
            QTime::currentTime(), and toTimeSpec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDateTime.CurrentMSecsSinceEpoch">
            <summary>
            <para>Returns the number of milliseconds since 1970-01-01T00:00:00
            Universal Coordinated Time. This number is like the POSIX time_t variable,
            but expressed in milliseconds instead.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also currentDateTime(), currentDateTimeUtc(), toTime_t(), and
            toTimeSpec().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLibraryInfo">
            <summary>
            <para>The QLibraryInfo class provides information about the Qt
            library.</para>
            </summary>
            <remarks>
            <para>Many pieces of information are established when Qt is configured
            and built. This class provides an abstraction for accessing that
            information. By using the static functions of this class, an application
            can obtain information about the instance of the Qt library which the
            application is using at run-time.</para>
            <para>You can also use a qt.conf file to override the hard-coded paths
            that are compiled into the Qt library. For more information, see the Using
            qt.conf documentation.</para>
            <para></para>
            <para>See also QSysInfo and Using qt.conf.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLibraryInfo.BuildDate">
            <summary>
            <para>This function used to return the installation date for this build
            of Qt, but now returns a constant date.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibraryInfo.Location(QtCore.QLibraryInfo.LibraryLocation)">
            <summary>
            <para>Returns the location specified by loc.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibraryInfo.Licensee">
            <summary>
            <para>Returns the person to whom this build of Qt is licensed.</para>
            <para>See also licensedProducts().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibraryInfo.LicensedProducts">
            <summary>
            <para>Returns the products that the license for this build of Qt has
            access to.</para>
            <para>See also licensee().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibraryInfo.IsDebugBuild">
            <summary>
            <para>Returns true if this build of Qt was built with debugging
            enabled, or false if it was built in release mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtCore.QLibraryInfo.LibraryLocation">
            <summary>
            <para>This enum type is used to specify a specific location
            specifier:</para>
            <para>See also location().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.PrefixPath">
            <summary>The default prefix for all paths.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.DocumentationPath">
            <summary>The location for documentation upon install.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.HeadersPath">
            <summary>The location for all headers.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.LibrariesPath">
            <summary>The location of installed libraries.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.LibraryExecutablesPath">
            <summary>The location of installed executables required by libraries at runtime.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.BinariesPath">
            <summary>The location of installed Qt binaries (tools and applications).</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.PluginsPath">
            <summary>The location of installed Qt plugins.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.ImportsPath">
            <summary>The location of installed QML extensions to import (QML 1.x).</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.Qml2ImportsPath">
            <summary>The location of installed QML extensions to import (QML 2.x).</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.ArchDataPath">
            <summary>The location of general architecture-dependent Qt data.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.DataPath">
            <summary>The location of general architecture-independent Qt data.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.TranslationsPath">
            <summary>The location of translation information for Qt strings.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.ExamplesPath">
            <summary>The location for examples upon install.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.TestsPath">
            <summary>The location of installed Qt testcases.</summary>
        </member>
        <member name="F:QtCore.QLibraryInfo.LibraryLocation.SettingsPath">
            <summary>The location for Qt settings. Not applicable on Windows.</summary>
        </member>
        <member name="T:QtCore.QIODevice">
            <summary>
            <para>The QIODevice class is the base interface class of all I/O
            devices in Qt.</para>
            </summary>
            <remarks>
            <para>QIODevice provides both a common implementation and an abstract
            interface for devices that support reading and writing of blocks of data,
            such as QFile, QBuffer and QTcpSocket. QIODevice is abstract and can not be
            instantiated, but it is common to use the interface it defines to provide
            device-independent I/O features. For example, Qt's XML classes operate on a
            QIODevice pointer, allowing them to be used with various devices (such as
            files and buffers).</para>
            <para>Before accessing the device, open() must be called to set the
            correct OpenMode (such as ReadOnly or ReadWrite). You can then write to the
            device with write() or putChar(), and read by calling either read(),
            readLine(), or readAll(). Call close() when you are done with the
            device.</para>
            <para>QIODevice distinguishes between two types of devices:
            random-access devices and sequential devices.</para>
            <para></para>
            <para>Random-access devices support seeking to arbitrary positions
            using seek(). The current position in the file is available by calling
            pos(). QFile and QBuffer are examples of random-access devices.</para>
            <para>Sequential devices don't support seeking to arbitrary positions.
            The data must be read in one pass. The functions pos() and size() don't
            work for sequential devices. QTcpSocket and QProcess are examples of
            sequential devices.</para>
            <para></para>
            <para>You can use isSequential() to determine the type of
            device.</para>
            <para>QIODevice emits readyRead() when new data is available for
            reading; for example, if new data has arrived on the network or if
            additional data is appended to a file that you are reading from. You can
            call bytesAvailable() to determine the number of bytes that are currently
            available for reading. It's common to use bytesAvailable() together with
            the readyRead() signal when programming with asynchronous devices such as
            QTcpSocket, where fragments of data can arrive at arbitrary points in time.
            QIODevice emits the bytesWritten() signal every time a payload of data has
            been written to the device. Use bytesToWrite() to determine the current
            amount of data waiting to be written.</para>
            <para>Certain subclasses of QIODevice, such as QTcpSocket and QProcess,
            are asynchronous. This means that I/O functions such as write() or read()
            always return immediately, while communication with the device itself may
            happen when control goes back to the event loop. QIODevice provides
            functions that allow you to force these operations to be performed
            immediately, while blocking the calling thread and without entering the
            event loop. This allows QIODevice subclasses to be used without an event
            loop, or in a separate thread:</para>
            <para></para>
            <para>waitForReadyRead() - This function suspends operation in the
            calling thread until new data is available for reading.</para>
            <para>waitForBytesWritten() - This function suspends operation in the
            calling thread until one payload of data has been written to the
            device.</para>
            <para>waitFor....() - Subclasses of QIODevice implement blocking
            functions for device-specific operations. For example, QProcess has a
            function called waitForStarted() which suspends operation in the calling
            thread until the process has started.</para>
            <para></para>
            <para>Calling these functions from the main, GUI thread, may cause your
            user interface to freeze. Example:</para>
            <para>QProcess gzip;</para>
            <para>gzip.start(&quot;gzip&quot;, QStringList() &lt;&lt;
            &quot;-c&quot;);</para>
            <para>if (!gzip.waitForStarted())</para>
            <para>    return false;</para>
            <para></para>
            <para>gzip.write(&quot;uncompressed data&quot;);</para>
            <para></para>
            <para>QByteArray compressed;</para>
            <para>while (gzip.waitForReadyRead())</para>
            <para>    compressed += gzip.readAll();</para>
            <para>By subclassing QIODevice, you can provide the same interface to
            your own I/O devices. Subclasses of QIODevice are only required to
            implement the protected readData() and writeData() functions. QIODevice
            uses these functions to implement all its convenience functions, such as
            getChar(), readLine() and write(). QIODevice also handles access control
            for you, so you can safely assume that the device is opened in write mode
            if writeData() is called.</para>
            <para>Some subclasses, such as QFile and QTcpSocket, are implemented
            using a memory buffer for intermediate storing of data. This reduces the
            number of required device accessing calls, which are often very slow.
            Buffering makes functions like getChar() and putChar() fast, as they can
            operate on the memory buffer instead of directly on the device itself.
            Certain I/O operations, however, don't work well with a buffer. For
            example, if several users open the same device and read it character by
            character, they may end up reading the same data when they meant to read a
            separate chunk each. For this reason, QIODevice allows you to bypass any
            buffering by passing the Unbuffered flag to open(). When subclassing
            QIODevice, remember to bypass any buffer you may use when the device is
            open in Unbuffered mode.</para>
            <para></para>
            <para>See also QBuffer, QFile, and QTcpSocket.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QIODevice.#ctor">
            <summary>
            <para>Constructs a QIODevice object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QIODevice object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Opens the device and sets its OpenMode to mode. Returns true if
            successful; otherwise returns false. This function should be called from
            any reimplementations of open() or other functions that open the
            device.</para>
            <para>See also openMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Close">
            <summary>
            <para>First emits aboutToClose(), then closes the device and sets its
            OpenMode to NotOpen. The error string is also reset.</para>
            <para>See also setOpenMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Seek(System.Int64)">
            <summary>
            <para>For random-access devices, this function sets the current
            position to pos, returning true on success, or false if an error occurred.
            For sequential devices, the default behavior is to produce a warning and
            return false.</para>
            <para>When subclassing QIODevice, you must call QIODevice::seek() at
            the start of your function to ensure integrity with QIODevice's built-in
            buffer.</para>
            <para>See also pos() and isSequential().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Reset">
            <summary>
            <para>Seeks to the start of input for random-access devices. Returns
            true on success; otherwise returns false (for example, if the device is not
            open).</para>
            <para>Note that when using a QTextStream on a QFile, calling reset() on
            the QFile will not have the expected result because QTextStream buffers the
            file. Use the QTextStream::seek() function instead.</para>
            <para>See also seek().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Read(System.Char*,System.Int64)">
            <summary>
            <para>Reads at most maxSize bytes from the device into data, and
            returns the number of bytes read. If an error occurs, such as when
            attempting to read from a device opened in WriteOnly mode, this function
            returns -1.</para>
            <para>0 is returned when no more data is available for reading.
            However, reading past the end of the stream is considered an error, so this
            function returns -1 in those cases (that is, reading on a closed socket or
            after a process has died).</para>
            <para>See also readData(), readLine(), and write().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Read(System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Reads at most maxSize bytes from the device, and returns the data
            read as a QByteArray.</para>
            <para>This function has no way of reporting errors; returning an empty
            QByteArray can mean either that no data was currently available for
            reading, or that an error occurred.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.ReadAll">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Reads all available data from the device, and returns it as a
            byte array.</para>
            <para>This function has no way of reporting errors; returning an empty
            QByteArray can mean either that no data was currently available for
            reading, or that an error occurred.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.ReadLine(System.Char*,System.Int64)">
            <summary>
            <para>This function reads a line of ASCII characters from the device,
            up to a maximum of maxSize - 1 bytes, stores the characters in data, and
            returns the number of bytes read. If a line could not be read but no error
            ocurred, this function returns 0. If an error occurs, this function returns
            the length of what could be read, or -1 if nothing was read.</para>
            <para>A terminating '\0' byte is always appended to data, so maxSize
            must be larger than 1.</para>
            <para>Data is read until either of the following conditions are
            met:</para>
            <para></para>
            <para>The first '\n' character is read.</para>
            <para>maxSize - 1 bytes are read.</para>
            <para>The end of the device data is detected.</para>
            <para></para>
            <para>For example, the following code reads a line of characters from a
            file:</para>
            <para>QFile file(&quot;box.txt&quot;);</para>
            <para>if (file.open(QFile::ReadOnly)) {</para>
            <para>    char buf[1024];</para>
            <para>    qint64 lineLength = file.readLine(buf, sizeof(buf));</para>
            <para>    if (lineLength != -1) {</para>
            <para>        // the line is available in buf</para>
            <para>    }</para>
            <para>}</para>
            <para>The newline character ('\n') is included in the buffer. If a
            newline is not encountered before maxSize - 1 bytes are read, a newline
            will not be inserted into the buffer. On windows newline characters are
            replaced with '\n'.</para>
            <para>This function calls readLineData(), which is implemented using
            repeated calls to getChar(). You can provide a more efficient
            implementation by reimplementing readLineData() in your own
            subclass.</para>
            <para>See also getChar(), read(), and write().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.ReadLine(System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Reads a line from the device, but no more than maxSize
            characters, and returns the result as a byte array.</para>
            <para>This function has no way of reporting errors; returning an empty
            QByteArray can mean either that no data was currently available for
            reading, or that an error occurred.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.CanReadLine">
            <summary>
            <para>Returns true if a complete line of data can be read from the
            device; otherwise returns false.</para>
            <para>Note that unbuffered devices, which have no way of determining
            what can be read, always return false.</para>
            <para>This function is often called in conjunction with the readyRead()
            signal.</para>
            <para>Subclasses that reimplement this function must call the base
            implementation in order to include the contents of the QIODevice's buffer.
            Example:</para>
            <para>bool CustomDevice::canReadLine() const</para>
            <para>{</para>
            <para>    return buffer.contains('\n') ||
            QIODevice::canReadLine();</para>
            <para>}</para>
            <para>See also readyRead() and readLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Write(System.String,System.Int64)">
            <summary>
            <para>Writes at most maxSize bytes of data from data to the device.
            Returns the number of bytes that were actually written, or -1 if an error
            occurred.</para>
            <para>See also read() and writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Write(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes data from a zero-terminated string of 8-bit characters to
            the device. Returns the number of bytes that were actually written, or -1
            if an error occurred. This is equivalent to</para>
            <para>...</para>
            <para>QIODevice::write(data, qstrlen(data));</para>
            <para>...</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also read() and writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Write(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes the content of byteArray to the device. Returns the number
            of bytes that were actually written, or -1 if an error occurred.</para>
            <para>See also read() and writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Peek(System.Char*,System.Int64)">
            <summary>
            <para>Reads at most maxSize bytes from the device into data, without
            side effects (i.e., if you call read() after peek(), you will get the same
            data). Returns the number of bytes read. If an error occurs, such as when
            attempting to peek a device opened in WriteOnly mode, this function returns
            -1.</para>
            <para>0 is returned when no more data is available for reading.</para>
            <para>Example:</para>
            <para>bool isExeFile(QFile *file)</para>
            <para>{</para>
            <para>    char buf[2];</para>
            <para>    if (file-&gt;peek(buf, sizeof(buf)) == sizeof(buf))</para>
            <para>        return (buf[0] == 'M' &amp;&amp; buf[1] == 'Z');</para>
            <para>    return false;</para>
            <para>}</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.Peek(System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Peeks at most maxSize bytes from the device, returning the data
            peeked as a QByteArray.</para>
            <para>Example:</para>
            <para>bool isExeFile(QFile *file)</para>
            <para>{</para>
            <para>    return file-&gt;peek(2) == &quot;MZ&quot;;</para>
            <para>}</para>
            <para>This function has no way of reporting errors; returning an empty
            QByteArray can mean either that no data was currently available for
            peeking, or that an error occurred.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.WaitForReadyRead(System.Int32)">
            <summary>
            <para>Blocks until new data is available for reading and the
            readyRead() signal has been emitted, or until msecs milliseconds have
            passed. If msecs is -1, this function will not time out.</para>
            <para>Returns true if new data is available for reading; otherwise
            returns false (if the operation timed out or if an error occurred).</para>
            <para>This function can operate without an event loop. It is useful
            when writing non-GUI applications and when performing I/O operations in a
            non-GUI thread.</para>
            <para>If called from within a slot connected to the readyRead() signal,
            readyRead() will not be reemitted.</para>
            <para>Reimplement this function to provide a blocking API for a custom
            device. The default implementation does nothing, and returns false.</para>
            <para>Warning: Calling this function from the main (GUI) thread might
            cause your user interface to freeze.</para>
            <para>See also waitForBytesWritten().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.WaitForBytesWritten(System.Int32)">
            <summary>
            <para>For buffered devices, this function waits until a payload of
            buffered written data has been written to the device and the bytesWritten()
            signal has been emitted, or until msecs milliseconds have passed. If msecs
            is -1, this function will not time out. For unbuffered devices, it returns
            immediately.</para>
            <para>Returns true if a payload of data was written to the device;
            otherwise returns false (i.e. if the operation timed out, or if an error
            occurred).</para>
            <para>This function can operate without an event loop. It is useful
            when writing non-GUI applications and when performing I/O operations in a
            non-GUI thread.</para>
            <para>If called from within a slot connected to the bytesWritten()
            signal, bytesWritten() will not be reemitted.</para>
            <para>Reimplement this function to provide a blocking API for a custom
            device. The default implementation does nothing, and returns false.</para>
            <para>Warning: Calling this function from the main (GUI) thread might
            cause your user interface to freeze.</para>
            <para>See also waitForReadyRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.UngetChar(System.Char)">
            <summary>
            <para>Puts the character c back into the device, and decrements the
            current position unless the position is 0. This function is usually called
            to &quot;undo&quot; a getChar() operation, such as when writing a
            backtracking parser.</para>
            <para>If c was not previously read from the device, the behavior is
            undefined.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.PutChar(System.Char)">
            <summary>
            <para>Writes the character c to the device. Returns true on success;
            otherwise returns false.</para>
            <para>See also write(), getChar(), and ungetChar().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.GetChar(System.Char*)">
            <summary>
            <para>Reads one character from the device and stores it in c. If c is
            0, the character is discarded. Returns true on success; otherwise returns
            false.</para>
            <para>See also read(), putChar(), and ungetChar().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.ReadData(System.Char*,System.Int64)">
            <summary>
            <para>Reads up to maxSize bytes from the device into data, and returns
            the number of bytes read or -1 if an error occurred.</para>
            <para>If there are no bytes to be read and there can never be more
            bytes available (examples include socket closed, pipe closed, sub-process
            finished), this function returns -1.</para>
            <para>This function is called by QIODevice. Reimplement this function
            when creating a subclass of QIODevice.</para>
            <para>When reimplementing this function it is important that this
            function reads all the required data before returning. This is required in
            order for QDataStream to be able to operate on the class. QDataStream
            assumes all the requested information was read and therefore does not retry
            reading if there was a problem.</para>
            <para>This function might be called with a maxSize of 0, which can be
            used to perform post-reading operations.</para>
            <para>See also read(), readLine(), and writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.ReadLineData(System.Char*,System.Int64)">
            <summary>
            <para>Reads up to maxSize characters into data and returns the number
            of characters read.</para>
            <para>This function is called by readLine(), and provides its base
            implementation, using getChar(). Buffered devices can improve the
            performance of readLine() by reimplementing this function.</para>
            <para>readLine() appends a '\0' byte to data; readLineData() does not
            need to do this.</para>
            <para>If you reimplement this function, be careful to return the
            correct value: it should return the number of bytes read in this line,
            including the terminating newline, or 0 if there is no line to be read at
            this point. If an error occurs, it should return -1 if and only if no bytes
            were read. Reading past EOF is considered an error.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.WriteData(System.String,System.Int64)">
            <summary>
            <para>Writes up to maxSize bytes from data to the device. Returns the
            number of bytes written, or -1 if an error occurred.</para>
            <para>This function is called by QIODevice. Reimplement this function
            when creating a subclass of QIODevice.</para>
            <para>When reimplementing this function it is important that this
            function writes all the data available before returning. This is required
            in order for QDataStream to be able to operate on the class. QDataStream
            assumes all the information was written and therefore does not retry
            writing if there was a problem.</para>
            <para>See also read() and write().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIODevice.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QIODevice.ReadyRead">
            <summary>
            <para>This signal is emitted once every time new data is available for reading from the device. It will only be emitted again once new data is available, such as when a new payload of network data has arrived on your network socket, or when a new block of data has been appended to your device.</para>
            <para>readyRead() is not emitted recursively; if you reenter the event loop or call waitForReadyRead() inside a slot connected to the readyRead() signal, the signal will not be reemitted (although waitForReadyRead() may still return true).</para>
            <para>Note for developers implementing classes derived from QIODevice: you should always emit readyRead() when new data has arrived (do not emit it only because there's data still to be read in your buffers). Do not emit readyRead() in other conditions.</para>
            <para>See also bytesWritten().</para>
            </summary>
        </member>
        <member name="E:QtCore.QIODevice.BytesWritten">
            <summary>
            <para>This signal is emitted every time a payload of data has been written to the device. The bytes argument is set to the number of bytes that were written in this payload.</para>
            <para>bytesWritten() is not emitted recursively; if you reenter the event loop or call waitForBytesWritten() inside a slot connected to the bytesWritten() signal, the signal will not be reemitted (although waitForBytesWritten() may still return true).</para>
            <para>See also readyRead().</para>
            </summary>
        </member>
        <member name="E:QtCore.QIODevice.AboutToClose">
            <summary>
            <para>This signal is emitted when the device is about to close. Connect this signal if you have operations that need to be performed before the device closes (e.g., if you have data in a separate buffer that needs to be written to the device).</para>
            </summary>
        </member>
        <member name="E:QtCore.QIODevice.ReadChannelFinished">
            <summary>
            <para>This signal is emitted when the input (reading) stream is closed in this device. It is emitted as soon as the closing is detected, which means that there might still be data available for reading with read().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also atEnd() and read().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.TextModeEnabled">
            <summary>
            <para>Returns true if the Text flag is enabled; otherwise returns
            false.</para>
            <para>See also setTextModeEnabled().</para>
            <para></para>
            <para>If enabled is true, this function sets the Text flag on the
            device; otherwise the Text flag is removed. This feature is useful for
            classes that provide custom end-of-line handling on a QIODevice.</para>
            <para>The IO device should be opened before calling this
            function.</para>
            <para>See also isTextModeEnabled(), open(), and setOpenMode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.OpenMode">
            <summary>
            <para>Returns the mode in which the device has been opened; i.e.
            ReadOnly or WriteOnly.</para>
            <para>See also setOpenMode() and OpenMode.</para>
            <para></para>
            <para>Sets the OpenMode of the device to openMode. Call this function
            to set the open mode if the flags change after the device has been
            opened.</para>
            <para>See also openMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.ErrorString">
            <summary>
            <para>Returns a human-readable description of the last device error
            that occurred.</para>
            <para>See also setErrorString().</para>
            <para></para>
            <para>Sets the human readable description of the last device error that
            occurred to str.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.IsOpen">
            <summary>
            <para>Returns true if the device is open; otherwise returns false. A
            device is open if it can be read from and/or written to. By default, this
            function returns false if openMode() returns NotOpen.</para>
            <para>See also openMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.IsReadable">
            <summary>
            <para>Returns true if data can be read from the device; otherwise
            returns false. Use bytesAvailable() to determine how many bytes can be
            read.</para>
            <para>This is a convenience function which checks if the OpenMode of
            the device contains the ReadOnly flag.</para>
            <para>See also openMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.IsWritable">
            <summary>
            <para>Returns true if data can be written to the device; otherwise
            returns false.</para>
            <para>This is a convenience function which checks if the OpenMode of
            the device contains the WriteOnly flag.</para>
            <para>See also openMode() and OpenMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.IsSequential">
            <summary>
            <para>Returns true if this device is sequential; otherwise returns
            false.</para>
            <para>Sequential devices, as opposed to a random-access devices, have
            no concept of a start, an end, a size, or a current position, and they do
            not support seeking. You can only read from the device when it reports that
            data is available. The most common example of a sequential device is a
            network socket. On Unix, special files such as /dev/zero and fifo pipes are
            sequential.</para>
            <para>Regular files, on the other hand, do support random access. They
            have both a size and a current position, and they also support seeking
            backwards and forwards in the data stream. Regular files are
            non-sequential.</para>
            <para>See also bytesAvailable().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.Pos">
            <summary>
            <para>For random-access devices, this function returns the position
            that data is written to or read from. For sequential devices or closed
            devices, where there is no concept of a &quot;current position&quot;, 0 is
            returned.</para>
            <para>The current read/write position of the device is maintained
            internally by QIODevice, so reimplementing this function is not necessary.
            When subclassing QIODevice, use QIODevice::seek() to notify QIODevice about
            changes in the device position.</para>
            <para>See also isSequential() and seek().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.Size">
            <summary>
            <para>For open random-access devices, this function returns the size of
            the device. For open sequential devices, bytesAvailable() is
            returned.</para>
            <para>If the device is closed, the size returned will not reflect the
            actual size of the device.</para>
            <para>See also isSequential() and pos().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.AtEnd">
            <summary>
            <para>Returns true if the current read and write position is at the end
            of the device (i.e. there is no more data available for reading on the
            device); otherwise returns false.</para>
            <para>For some devices, atEnd() can return true even though there is
            more data to read. This special case only applies to devices that generate
            data in direct response to you calling read() (e.g., /dev or /proc files on
            Unix and OS X, or console input / stdin on all platforms).</para>
            <para>See also bytesAvailable(), read(), and isSequential().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.BytesAvailable">
            <summary>
            <para>Returns the number of bytes that are available for reading. This
            function is commonly used with sequential devices to determine the number
            of bytes to allocate in a buffer before reading.</para>
            <para>Subclasses that reimplement this function must call the base
            implementation in order to include the size of the buffer of QIODevice.
            Example:</para>
            <para>qint64 CustomDevice::bytesAvailable() const</para>
            <para>{</para>
            <para>    return buffer.size() + QIODevice::bytesAvailable();</para>
            <para>}</para>
            <para>See also bytesToWrite(), readyRead(), and isSequential().</para>
            </summary>
        </member>
        <member name="P:QtCore.QIODevice.BytesToWrite">
            <summary>
            <para>For buffered devices, this function returns the number of bytes
            waiting to be written. For devices with no buffer, this function returns
            0.</para>
            <para>See also bytesAvailable(), bytesWritten(), and
            isSequential().</para>
            </summary>
        </member>
        <member name="T:QtCore.QIODevice.OpenModeFlag">
            <summary>
            <para>This enum is used with open() to describe the mode in which a
            device is opened. It is also returned by openMode().</para>
            <para>Certain flags, such as Unbuffered and Truncate, are meaningless
            when used with some subclasses. Some of these restrictions are implied by
            the type of device that is represented by a subclass. In other cases, the
            restriction may be due to the implementation, or may be imposed by the
            underlying platform; for example, QTcpSocket does not support Unbuffered
            mode, and limitations in the native API prevent QFile from supporting
            Unbuffered on Windows.</para>
            <para>The OpenMode type is a typedef for QFlags&lt;OpenModeFlag&gt;. It
            stores an OR combination of OpenModeFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.NotOpen">
            <summary>The device is not open.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.ReadOnly">
            <summary>The device is open for reading.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.WriteOnly">
            <summary>The device is open for writing. Note that this mode implies Truncate.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.ReadWrite">
            <summary>The device is open for reading and writing.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.Append">
            <summary>The device is opened in append mode so that all data is written to the end of the file.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.Truncate">
            <summary>If possible, the device is truncated before it is opened. All earlier contents of the device are lost.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.Text">
            <summary>When reading, the end-of-line terminators are translated to '\n'. When writing, the end-of-line terminators are translated to the local encoding, for example '\r\n' for Win32.</summary>
        </member>
        <member name="F:QtCore.QIODevice.OpenModeFlag.Unbuffered">
            <summary>Any buffer in the device is bypassed.</summary>
        </member>
        <member name="T:QtCore.QBuffer">
            <summary>
            <para>The QBuffer class provides a QIODevice interface for a
            QByteArray.</para>
            </summary>
            <remarks>
            <para>QBuffer allows you to access a QByteArray using the QIODevice
            interface. The QByteArray is treated just as a standard random-accessed
            file. Example:</para>
            <para>    QBuffer buffer;</para>
            <para>    char ch;</para>
            <para></para>
            <para>    buffer.open(QBuffer::ReadWrite);</para>
            <para>    buffer.write(&quot;Qt rocks!&quot;);</para>
            <para>    buffer.seek(0);</para>
            <para>    buffer.getChar(&amp;ch);  // ch == 'Q'</para>
            <para>    buffer.getChar(&amp;ch);  // ch == 't'</para>
            <para>    buffer.getChar(&amp;ch);  // ch == ' '</para>
            <para>    buffer.getChar(&amp;ch);  // ch == 'r'</para>
            <para>By default, an internal QByteArray buffer is created for you when
            you create a QBuffer. You can access this buffer directly by calling
            buffer(). You can also use QBuffer with an existing QByteArray by calling
            setBuffer(), or by passing your array to QBuffer's constructor.</para>
            <para>Call open() to open the buffer. Then call write() or putChar() to
            write to the buffer, and read(), readLine(), readAll(), or getChar() to
            read from it. size() returns the current size of the buffer, and you can
            seek to arbitrary positions in the buffer by calling seek(). When you are
            done with accessing the buffer, call close().</para>
            <para>The following code snippet shows how to write data to a
            QByteArray using QDataStream and QBuffer:</para>
            <para>    QByteArray byteArray;</para>
            <para>    QBuffer buffer(&amp;byteArray);</para>
            <para>    buffer.open(QIODevice::WriteOnly);</para>
            <para></para>
            <para>    QDataStream out(&amp;buffer);</para>
            <para>    out &lt;&lt; QApplication::palette();</para>
            <para>Effectively, we convert the application's QPalette into a byte
            array. Here's how to read the data from the QByteArray:</para>
            <para>    QPalette palette;</para>
            <para>    QBuffer buffer(&amp;byteArray);</para>
            <para>    buffer.open(QIODevice::ReadOnly);</para>
            <para></para>
            <para>    QDataStream in(&amp;buffer);</para>
            <para>    in &gt;&gt; palette;</para>
            <para>QTextStream and QDataStream also provide convenience constructors
            that take a QByteArray and that create a QBuffer behind the scenes.</para>
            <para>QBuffer emits readyRead() when new data has arrived in the
            buffer. By connecting to this signal, you can use QBuffer to store
            temporary data before processing it. QBuffer also emits bytesWritten()
            every time new data has been written to the buffer.</para>
            <para></para>
            <para>See also QFile, QDataStream, QTextStream, and QByteArray.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QBuffer.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an empty buffer with the given parent. You can call
            setData() to fill the buffer with data, or you can open it in write mode
            and use write().</para>
            <para>See also open().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.#ctor(QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Constructs a QBuffer that uses the QByteArray pointed to by
            byteArray as its internal buffer, and with the given parent. The caller is
            responsible for ensuring that byteArray remains valid until the QBuffer is
            destroyed, or until setBuffer() is called to change the buffer. QBuffer
            doesn't take ownership of the QByteArray.</para>
            <para>If you open the buffer in write-only mode or read-write mode and
            write something into the QBuffer, byteArray will be modified.</para>
            <para>Example:</para>
            <para>    QByteArray byteArray(&quot;abc&quot;);</para>
            <para>    QBuffer buffer(&amp;byteArray);</para>
            <para>    buffer.open(QIODevice::WriteOnly);</para>
            <para>    buffer.seek(3);</para>
            <para>    buffer.write(&quot;def&quot;, 3);</para>
            <para>    buffer.close();</para>
            <para>    // byteArray == &quot;abcdef&quot;</para>
            <para>See also open(), setBuffer(), and setData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.SetData(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the contents of the internal buffer to be the first size
            bytes of data.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Reimplemented from QIODevice::open().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.Close">
            <summary>
            <para>Reimplemented from QIODevice::close().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.Seek(System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::seek().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.CanReadLine">
            <summary>
            <para>Reimplemented from QIODevice::canReadLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.ReadData(System.Char*,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::readData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.WriteData(System.String,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBuffer.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QBuffer.Buffer">
            <summary>
            <para>Returns a reference to the QBuffer's internal buffer. You can use
            it to modify the QByteArray behind the QBuffer's back.</para>
            <para>See also setBuffer() and data().</para>
            <para></para>
            <para>Makes QBuffer uses the QByteArray pointed to by byteArray as its
            internal buffer. The caller is responsible for ensuring that byteArray
            remains valid until the QBuffer is destroyed, or until setBuffer() is
            called to change the buffer. QBuffer doesn't take ownership of the
            QByteArray.</para>
            <para>Does nothing if isOpen() is true.</para>
            <para>If you open the buffer in write-only mode or read-write mode and
            write something into the QBuffer, byteArray will be modified.</para>
            <para>Example:</para>
            <para>    QByteArray byteArray(&quot;abc&quot;);</para>
            <para>    QBuffer buffer;</para>
            <para>    buffer.setBuffer(&amp;byteArray);</para>
            <para>    buffer.open(QIODevice::WriteOnly);</para>
            <para>    buffer.seek(3);</para>
            <para>    buffer.write(&quot;def&quot;, 3);</para>
            <para>    buffer.close();</para>
            <para>    // byteArray == &quot;abcdef&quot;</para>
            <para>If byteArray is 0, the buffer creates its own internal QByteArray
            to work on. This byte array is initially empty.</para>
            <para>See also buffer(), setData(), and open().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBuffer.Data">
            <summary>
            <para>Returns the data contained in the buffer.</para>
            <para>This is the same as buffer().</para>
            <para>See also setData() and setBuffer().</para>
            <para></para>
            <para>Sets the contents of the internal buffer to be data. This is the
            same as assigning data to buffer().</para>
            <para>Does nothing if isOpen() is true.</para>
            <para>See also data() and setBuffer().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBuffer.Size">
            <summary>
            <para>Reimplemented from QIODevice::size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBuffer.Pos">
            <summary>
            <para>Reimplemented from QIODevice::pos().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBuffer.AtEnd">
            <summary>
            <para>Reimplemented from QIODevice::atEnd().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDataStream">
            <summary>
            <para>The QDataStream class provides serialization of binary data to a
            QIODevice.</para>
            </summary>
            <remarks>
            <para>A data stream is a binary stream of encoded information which is
            100% independent of the host computer's operating system, CPU or byte
            order. For example, a data stream that is written by a PC under Windows can
            be read by a Sun SPARC running Solaris.</para>
            <para>You can also use a data stream to read/write raw unencoded binary
            data. If you want a &quot;parsing&quot; input stream, see
            QTextStream.</para>
            <para>The QDataStream class implements the serialization of C++'s basic
            data types, like char, short, int, char *, etc. Serialization of more
            complex data is accomplished by breaking up the data into primitive
            units.</para>
            <para>A data stream cooperates closely with a QIODevice. A QIODevice
            represents an input/output medium one can read data from and write data to.
            The QFile class is an example of an I/O device.</para>
            <para>Example (write binary data to a stream):</para>
            <para>QFile file(&quot;file.dat&quot;);</para>
            <para>file.open(QIODevice::WriteOnly);</para>
            <para>QDataStream out(&amp;file);   // we will serialize the data into
            the file</para>
            <para>out &lt;&lt; QString(&quot;the answer is&quot;);   // serialize a
            string</para>
            <para>out &lt;&lt; (qint32)42;        // serialize an integer</para>
            <para>Example (read binary data from a stream):</para>
            <para>QFile file(&quot;file.dat&quot;);</para>
            <para>file.open(QIODevice::ReadOnly);</para>
            <para>QDataStream in(&amp;file);    // read the data serialized from
            the file</para>
            <para>QString str;</para>
            <para>qint32 a;</para>
            <para>in &gt;&gt; str &gt;&gt; a;           // extract &quot;the answer
            is&quot; and 42</para>
            <para>Each item written to the stream is written in a predefined binary
            format that varies depending on the item's type. Supported Qt types include
            QBrush, QColor, QDateTime, QFont, QPixmap, QString, QVariant and many
            others. For the complete list of all Qt types supporting data streaming see
            Serializing Qt Data Types.</para>
            <para>For integers it is best to always cast to a Qt integer type for
            writing, and to read back into the same Qt integer type. This ensures that
            you get integers of the size you want and insulates you from compiler and
            platform differences.</para>
            <para>To take one example, a char * string is written as a 32-bit
            integer equal to the length of the string including the '\0' byte, followed
            by all the characters of the string including the '\0' byte. When reading a
            char * string, 4 bytes are read to create the 32-bit length value, then
            that many characters for the char * string including the '\0' terminator
            are read.</para>
            <para>The initial I/O device is usually set in the constructor, but can
            be changed with setDevice(). If you've reached the end of the data (or if
            there is no I/O device set) atEnd() will return true.</para>
            <para></para>
            <para>Versioning</para>
            <para>QDataStream's binary format has evolved since Qt 1.0, and is
            likely to continue evolving to reflect changes done in Qt. When inputting
            or outputting complex types, it's very important to make sure that the same
            version of the stream (version()) is used for reading and writing. If you
            need both forward and backward compatibility, you can hardcode the version
            number in the application:</para>
            <para>stream.setVersion(QDataStream::Qt_4_0);</para>
            <para>If you are producing a new binary data format, such as a file
            format for documents created by your application, you could use a
            QDataStream to write the data in a portable format. Typically, you would
            write a brief header containing a magic string and a version number to give
            yourself room for future expansion. For example:</para>
            <para>QFile file(&quot;file.xxx&quot;);</para>
            <para>file.open(QIODevice::WriteOnly);</para>
            <para>QDataStream out(&amp;file);</para>
            <para></para>
            <para>// Write a header with a &quot;magic number&quot; and a
            version</para>
            <para>out &lt;&lt; (quint32)0xA0B0C0D0;</para>
            <para>out &lt;&lt; (qint32)123;</para>
            <para></para>
            <para>out.setVersion(QDataStream::Qt_4_0);</para>
            <para></para>
            <para>// Write the data</para>
            <para>out &lt;&lt; lots_of_interesting_data;</para>
            <para>Then read it in with:</para>
            <para>QFile file(&quot;file.xxx&quot;);</para>
            <para>file.open(QIODevice::ReadOnly);</para>
            <para>QDataStream in(&amp;file);</para>
            <para></para>
            <para>// Read and check the header</para>
            <para>quint32 magic;</para>
            <para>in &gt;&gt; magic;</para>
            <para>if (magic != 0xA0B0C0D0)</para>
            <para>    return XXX_BAD_FILE_FORMAT;</para>
            <para></para>
            <para>// Read the version</para>
            <para>qint32 version;</para>
            <para>in &gt;&gt; version;</para>
            <para>if (version &lt; 100)</para>
            <para>    return XXX_BAD_FILE_TOO_OLD;</para>
            <para>if (version &gt; 123)</para>
            <para>    return XXX_BAD_FILE_TOO_NEW;</para>
            <para></para>
            <para>if (version &lt;= 110)</para>
            <para>    in.setVersion(QDataStream::Qt_3_2);</para>
            <para>else</para>
            <para>    in.setVersion(QDataStream::Qt_4_0);</para>
            <para></para>
            <para>// Read the data</para>
            <para>in &gt;&gt; lots_of_interesting_data;</para>
            <para>if (version &gt;= 120)</para>
            <para>    in &gt;&gt; data_new_in_XXX_version_1_2;</para>
            <para>in &gt;&gt; other_interesting_data;</para>
            <para>You can select which byte order to use when serializing data. The
            default setting is big endian (MSB first). Changing it to little endian
            breaks the portability (unless the reader also changes to little endian).
            We recommend keeping this setting unless you have special
            requirements.</para>
            <para></para>
            <para></para>
            <para>Reading and Writing Raw Binary Data</para>
            <para>You may wish to read/write your own raw binary data to/from the
            data stream directly. Data may be read from the stream into a preallocated
            char * using readRawData(). Similarly data can be written to the stream
            using writeRawData(). Note that any encoding/decoding of the data must be
            done by you.</para>
            <para>A similar pair of functions is readBytes() and writeBytes().
            These differ from their raw counterparts as follows: readBytes() reads a
            quint32 which is taken to be the length of the data to be read, then that
            number of bytes is read into the preallocated char *; writeBytes() writes a
            quint32 containing the length of the data, followed by the data. Note that
            any encoding/decoding of the data (apart from the length quint32) must be
            done by you.</para>
            <para></para>
            <para>Reading and Writing Qt Collection Classes</para>
            <para>The Qt container classes can also be serialized to a QDataStream.
            These include QList, QLinkedList, QVector, QSet, QHash, and QMap. The
            stream operators are declared as non-members of the classes.</para>
            <para></para>
            <para></para>
            <para>Reading and Writing Other Qt Classes</para>
            <para>In addition to the overloaded stream operators documented here,
            any Qt classes that you might want to serialize to a QDataStream will have
            appropriate stream operators declared as non-member of the class:</para>
            <para>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;, const QXxx
            &amp;);</para>
            <para>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;, QXxx
            &amp;);</para>
            <para>For example, here are the stream operators declared as
            non-members of the QImage class:</para>
            <para>QDataStream &amp; operator&lt;&lt; (QDataStream&amp; stream,
            const QImage&amp; image);</para>
            <para>QDataStream &amp; operator&gt;&gt; (QDataStream&amp; stream,
            QImage&amp; image);</para>
            <para>To see if your favorite Qt class has similar stream operators
            defined, check the Related Non-Members section of the class's documentation
            page.</para>
            <para></para>
            <para>See also QTextStream and QVariant.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDataStream.#ctor">
            <summary>
            <para>Constructs a data stream that has no I/O device.</para>
            <para>See also setDevice().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Constructs a data stream that uses the I/O device d.</para>
            <para>See also setDevice() and device().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.#ctor(QtCore.QByteArray,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Constructs a data stream that operates on a byte array, a. The
            mode describes how the device is to be used.</para>
            <para>Alternatively, you can use QDataStream(const QByteArray &amp;) if
            you just want to read from a byte array.</para>
            <para>Since QByteArray is not a QIODevice subclass, internally a
            QBuffer is created to wrap the byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a read-only data stream that operates on byte array a.
            Use QDataStream(QByteArray*, int) if you want to write to a byte
            array.</para>
            <para>Since QByteArray is not a QIODevice subclass, internally a
            QBuffer is created to wrap the byte array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.UnsetDevice">
            <summary>
            <para>Unsets the I/O device. Use setDevice(0) instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.ResetStatus">
            <summary>
            <para>Resets the status of the data stream.</para>
            <para>See also Status, status(), and setStatus().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.op_LeftShift(QtCore.QDataStream,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes a signed 32-bit integer, i, to the stream and returns a
            reference to the stream.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.ReadBytes(System.Char**,System.UInt32@)">
            <summary>
            <para>Reads the buffer s from the stream and returns a reference to the
            stream.</para>
            <para>The buffer s is allocated using new []. Destroy it with the
            delete [] operator.</para>
            <para>The l parameter is set to the length of the buffer. If the string
            read is empty, l is set to 0 and s is set to a null pointer.</para>
            <para>The serialization format is a quint32 length specifier first,
            then l bytes of data.</para>
            <para>See also readRawData() and writeBytes().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.ReadRawData(System.Char*,System.Int32)">
            <summary>
            <para>Reads at most len bytes from the stream into s and returns the
            number of bytes read. If an error occurs, this function returns -1.</para>
            <para>The buffer s must be preallocated. The data is not
            encoded.</para>
            <para>See also readBytes(), QIODevice::read(), and
            writeRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.WriteBytes(System.String,System.UInt32)">
            <summary>
            <para>Writes the length specifier len and the buffer s to the stream
            and returns a reference to the stream.</para>
            <para>The len is serialized as a quint32, followed by len bytes from s.
            Note that the data is not encoded.</para>
            <para>See also writeRawData() and readBytes().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.WriteRawData(System.String,System.Int32)">
            <summary>
            <para>Writes len bytes from s to the stream. Returns the number of
            bytes actually written, or -1 on error. The data is not encoded.</para>
            <para>See also writeBytes(), QIODevice::write(), and
            readRawData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDataStream.SkipRawData(System.Int32)">
            <summary>
            <para>Skips len bytes from the device. Returns the number of bytes
            actually skipped, or -1 on error.</para>
            <para>This is equivalent to calling readRawData() on a buffer of length
            len and ignoring the buffer.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QIODevice::seek().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.Device">
            <summary>
            <para>Returns the I/O device currently set, or 0 if no device is
            currently set.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>void QDataStream::setDevice(QIODevice *d)</para>
            <para>Sets the I/O device to d, which can be 0 to unset to current I/O
            device.</para>
            <para>See also device().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.status">
            <summary>
            <para>Returns the status of the data stream.</para>
            <para>See also Status, setStatus(), and resetStatus().</para>
            <para></para>
            <para>Sets the status of the data stream to the status given.</para>
            <para>Subsequent calls to setStatus() are ignored until resetStatus()
            is called.</para>
            <para>See also Status, status(), and resetStatus().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.floatingPointPrecision">
            <summary>
            <para>Returns the floating point precision of the data stream.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also FloatingPointPrecision and
            setFloatingPointPrecision().</para>
            <para></para>
            <para>Sets the floating point precision of the data stream to
            precision. If the floating point precision is DoublePrecision and the
            version of the data stream is Qt_4_6 or higher, all floating point numbers
            will be written and read with 64-bit precision. If the floating point
            precision is SinglePrecision and the version is Qt_4_6 or higher, all
            floating point numbers will be written and read with 32-bit
            precision.</para>
            <para>For versions prior to Qt_4_6, the precision of floating point
            numbers in the data stream depends on the stream operator called.</para>
            <para>The default is DoublePrecision.</para>
            <para>Warning: This property must be set to the same value on the
            object that writes and the object that reads the data stream.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also floatingPointPrecision().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.byteOrder">
            <summary>
            <para>Returns the current byte order setting -- either BigEndian or
            LittleEndian.</para>
            <para>See also setByteOrder().</para>
            <para></para>
            <para>Sets the serialization byte order to bo.</para>
            <para>The bo parameter can be QDataStream::BigEndian or
            QDataStream::LittleEndian.</para>
            <para>The default setting is big endian. We recommend leaving this
            setting unless you have special requirements.</para>
            <para>See also byteOrder().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.version">
            <summary>
            <para>Returns the version number of the data serialization
            format.</para>
            <para>See also setVersion() and Version.</para>
            <para></para>
            <para>Sets the version number of the data serialization format to v, a
            value of the Version enum.</para>
            <para>You don't have to set a version if you are using the current
            version of Qt, but for your own custom binary formats we recommend that you
            do; see Versioning in the Detailed Description.</para>
            <para>To accommodate new functionality, the datastream serialization
            format of some Qt classes has changed in some versions of Qt. If you want
            to read data that was created by an earlier version of Qt, or write data
            that can be read by a program that was compiled with an earlier version of
            Qt, use this function to modify the serialization format used by
            QDataStream.</para>
            <para>The Version enum provides symbolic constants for the different
            versions of Qt. For example:</para>
            <para>QDataStream out(file);</para>
            <para>out.setVersion(QDataStream::Qt_4_0);</para>
            <para>See also version() and Version.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDataStream.AtEnd">
            <summary>
            <para>Returns true if the I/O device has reached the end position (end
            of the stream or file) or if there is no I/O device set; otherwise returns
            false.</para>
            <para>See also QIODevice::atEnd().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDataStream.Version">
            <summary>
            <para>This enum provides symbolic synonyms for the data serialization
            format version numbers.</para>
            <para>See also setVersion() and version().</para>
            </summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_1_0">
            <summary>Version 1 (Qt 1.x)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_2_0">
            <summary>Version 2 (Qt 2.0)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_2_1">
            <summary>Version 3 (Qt 2.1, 2.2, 2.3)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_3_0">
            <summary>Version 4 (Qt 3.0)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_3_1">
            <summary>Version 5 (Qt 3.1, 3.2)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_3_3">
            <summary>Version 6 (Qt 3.3)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_0">
            <summary>Version 7 (Qt 4.0, Qt 4.1)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_1">
            <summary>Version 7 (Qt 4.0, Qt 4.1)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_2">
            <summary>Version 8 (Qt 4.2)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_3">
            <summary>Version 9 (Qt 4.3)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_4">
            <summary>Version 10 (Qt 4.4)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_5">
            <summary>Version 11 (Qt 4.5)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_6">
            <summary>Version 12 (Qt 4.6, Qt 4.7, Qt 4.8)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_7">
            <summary>Same as Qt_4_6.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_8">
            <summary>Same as Qt_4_6.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_4_9">
            <summary>Same as Qt_4_6.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_0">
            <summary>Version 13 (Qt 5.0)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_1">
            <summary>Version 14 (Qt 5.1)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_2">
            <summary>Version 15 (Qt 5.2)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_3">
            <summary>Same as Qt_5_2</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_4">
            <summary>Version 16 (Qt 5.4)</summary>
        </member>
        <member name="F:QtCore.QDataStream.Version.Qt_5_5">
            <summary>Same as Qt_5_4</summary>
        </member>
        <member name="T:QtCore.QDataStream.ByteOrder">
            <summary>
            <para>The byte order used for reading/writing the data.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDataStream.ByteOrder.BigEndian">
            <summary>Most significant byte first (the default)</summary>
        </member>
        <member name="F:QtCore.QDataStream.ByteOrder.LittleEndian">
            <summary>Least significant byte first</summary>
        </member>
        <member name="T:QtCore.QDataStream.Status">
            <summary>
            <para>This enum describes the current status of the data stream.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDataStream.Status.Ok">
            <summary>The data stream is operating normally.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Status.ReadPastEnd">
            <summary>The data stream has read past the end of the data in the underlying device.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Status.ReadCorruptData">
            <summary>The data stream has read corrupt data.</summary>
        </member>
        <member name="F:QtCore.QDataStream.Status.WriteFailed">
            <summary>The data stream cannot write to the underlying device.</summary>
        </member>
        <member name="T:QtCore.QDataStream.FloatingPointPrecision">
            <summary>
            <para>The precision of floating point numbers used for reading/writing
            the data. This will only have an effect if the version of the data stream
            is Qt_4_6 or higher.</para>
            <para>Warning: The floating point precision must be set to the same
            value on the object that writes and the object that reads the data
            stream.</para>
            <para>See also setFloatingPointPrecision() and
            floatingPointPrecision().</para>
            </summary>
        </member>
        <member name="F:QtCore.QDataStream.FloatingPointPrecision.SinglePrecision">
            <summary>All floating point numbers in the data stream have 32-bit precision.</summary>
        </member>
        <member name="F:QtCore.QDataStream.FloatingPointPrecision.DoublePrecision">
            <summary>All floating point numbers in the data stream have 64-bit precision.</summary>
        </member>
        <member name="T:QtCore.QLocale">
            <summary>
            <para>The QLocale class converts between numbers and their string
            representations in various languages.</para>
            </summary>
            <remarks>
            <para>QLocale is initialized with a language/country pair in its
            constructor and offers number-to-string and string-to-number conversion
            functions similar to those in QString.</para>
            <para>Example:</para>
            <para>QLocale egyptian(QLocale::Arabic, QLocale::Egypt);</para>
            <para>QString s1 = egyptian.toString(1.571429E+07, 'e');</para>
            <para>QString s2 = egyptian.toString(10);</para>
            <para></para>
            <para>double d = egyptian.toDouble(s1);</para>
            <para>int i = egyptian.toInt(s2);</para>
            <para>QLocale supports the concept of a default locale, which is
            determined from the system's locale settings at application startup. The
            default locale can be changed by calling the static member setDefault().
            Setting the default locale has the following effects:</para>
            <para></para>
            <para>If a QLocale object is constructed with the default constructor,
            it will use the default locale's settings.</para>
            <para>QString::toInt(), QString::toDouble(), etc., interpret the string
            according to the default locale. If this fails, it falls back on the
            &quot;C&quot; locale.</para>
            <para>QString::arg() uses the default locale to format a number when
            its position specifier in the format string contains an 'L', e.g.
            &quot;%L1&quot;.</para>
            <para></para>
            <para>The following example illustrates how to use QLocale
            directly:</para>
            <para>QLocale::setDefault(QLocale(QLocale::Hebrew,
            QLocale::Israel));</para>
            <para>QLocale hebrew; // Constructs a default QLocale</para>
            <para>QString s1 = hebrew.toString(15714.3, 'e');</para>
            <para></para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>QLocale::setDefault(QLocale::C);</para>
            <para>d = QString(&quot;1234,56&quot;).toDouble(&amp;ok);   // ok ==
            false</para>
            <para>d = QString(&quot;1234.56&quot;).toDouble(&amp;ok);   // ok ==
            true, d == 1234.56</para>
            <para></para>
            <para>QLocale::setDefault(QLocale::German);</para>
            <para>d = QString(&quot;1234,56&quot;).toDouble(&amp;ok);   // ok ==
            true, d == 1234.56</para>
            <para>d = QString(&quot;1234.56&quot;).toDouble(&amp;ok);   // ok ==
            true, d == 1234.56</para>
            <para></para>
            <para>QLocale::setDefault(QLocale(QLocale::English,
            QLocale::UnitedStates));</para>
            <para>str = QString(&quot;%1 %L2 %L3&quot;)</para>
            <para>      .arg(12345).arg(12345).arg(12345, 0, 16);</para>
            <para>// str == &quot;12345 12,345 3039&quot;</para>
            <para>When a language/country pair is specified in the constructor, one
            of three things can happen:</para>
            <para></para>
            <para>If the language/country pair is found in the database, it is
            used.</para>
            <para>If the language is found but the country is not, or if the
            country is AnyCountry, the language is used with the most appropriate
            available country (for example, Germany for German),</para>
            <para>If neither the language nor the country are found, QLocale
            defaults to the default locale (see setDefault()).</para>
            <para></para>
            <para>Use language() and country() to determine the actual language and
            country values used.</para>
            <para>An alternative method for constructing a QLocale object is by
            specifying the locale name.</para>
            <para>QLocale korean(&quot;ko&quot;);</para>
            <para>QLocale swiss(&quot;de_CH&quot;);</para>
            <para>This constructor converts the locale name to a language/country
            pair; it does not use the system locale database.</para>
            <para>Note: For the current keyboard input locale take a look at
            QInputMethod::locale().</para>
            <para>QLocale's data is based on Common Locale Data Repository
            v27.</para>
            <para>The double-to-string and string-to-double conversion functions
            are covered by the following licenses:</para>
            <para>Copyright (c) 1991 by AT&amp;T.</para>
            <para>Permission to use, copy, modify, and distribute this software for
            any purpose without fee is hereby granted, provided that this entire notice
            is included in all copies of any software which is or includes a copy or
            modification of this software and in all copies of the supporting
            documentation for such software.</para>
            <para>THIS SOFTWARE IS BEING PROVIDED &quot;AS IS&quot;, WITHOUT ANY
            EXPRESS OR IMPLIED WARRANTY. IN PARTICULAR, NEITHER THE AUTHOR NOR AT&amp;T
            MAKES ANY REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
            MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
            PURPOSE.</para>
            <para>This product includes software developed by the University of
            California, Berkeley and its contributors.</para>
            <para></para>
            <para></para>
            <para>See also QString::arg(), QString::toInt(), QString::toDouble(),
            and QInputMethod::locale().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLocale.#ctor(System.String)">
            <summary>
            <para>Constructs a QLocale object with the specified name, which has
            the format &quot;language[_script][_country][.codeset][@modifier]&quot; or
            &quot;C&quot;, where:</para>
            <para></para>
            <para>language is a lowercase, two-letter, ISO 639 language code (also
            some three-letter codes),</para>
            <para>script is a titlecase, four-letter, ISO 15924 script code,</para>
            <para>country is an uppercase, two-letter, ISO 3166 country code (also
            &quot;419&quot; as defined by United Nations),</para>
            <para>and codeset and modifier are ignored.</para>
            <para></para>
            <para>The separator can be either underscore or a minus sign.</para>
            <para>If the string violates the locale format, or language is not a
            valid ISO 639 code, the &quot;C&quot; locale is used instead. If country is
            not present, or is not a valid ISO 3166 code, the most appropriate country
            is chosen for the specified language.</para>
            <para>The language, script and country codes are converted to their
            respective Language, Script and Country enums. After this conversion is
            performed, the constructor behaves exactly like QLocale(Country, Script,
            Language).</para>
            <para>This constructor is much slower than QLocale(Country, Script,
            Language).</para>
            <para>See also bcp47Name().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.#ctor(QtCore.QLocale.Language,QtCore.QLocale.Country)">
            <summary>
            <para>Constructs a QLocale object with the specified language and
            country.</para>
            <para></para>
            <para>If the language/country pair is found in the database, it is
            used.</para>
            <para>If the language is found but the country is not, or if the
            country is AnyCountry, the language is used with the most appropriate
            available country (for example, Germany for German),</para>
            <para>If neither the language nor the country are found, QLocale
            defaults to the default locale (see setDefault()).</para>
            <para></para>
            <para>The language and country that are actually used can be queried
            using language() and country().</para>
            <para>See also setDefault(), language(), and country().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.#ctor(QtCore.QLocale.Language,QtCore.QLocale.Script,QtCore.QLocale.Country)">
            <summary>
            <para>Constructs a QLocale object with the specified language, script
            and country.</para>
            <para></para>
            <para>If the language/script/country is found in the database, it is
            used.</para>
            <para>If both script is AnyScript and country is AnyCountry, the
            language is used with the most appropriate available script and country
            (for example, Germany for German),</para>
            <para>If either script is AnyScript or country is AnyCountry, the
            language is used with the first locale that matches the given script and
            country.</para>
            <para>If neither the language nor the country are found, QLocale
            defaults to the default locale (see setDefault()).</para>
            <para></para>
            <para>The language, script and country that are actually used can be
            queried using language(), script() and country().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setDefault(), language(), script(), and
            country().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.#ctor(QtCore.QLocale)">
            <summary>
            <para>Constructs a QLocale object as a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToShort(System.String,System.Boolean@)">
            <summary>
            <para>Returns the short int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toUShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUShort(System.String,System.Boolean@)">
            <summary>
            <para>Returns the unsigned short int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToInt(System.String,System.Boolean@)">
            <summary>
            <para>Returns the int represented by the localized string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toUInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUInt(System.String,System.Boolean@)">
            <summary>
            <para>Returns the unsigned int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToLongLong(System.String,System.Boolean@)">
            <summary>
            <para>Returns the long long int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toInt(), toULongLong(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToULongLong(System.String,System.Boolean@)">
            <summary>
            <para>Returns the unsigned long long int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toLongLong(), toInt(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToFloat(System.String,System.Boolean@)">
            <summary>
            <para>Returns the float represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not 0, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toDouble(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDouble(System.String,System.Boolean@)">
            <summary>
            <para>Returns the double represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not 0, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>Unlike QString::toDouble(), this function does not fall back to
            the &quot;C&quot; locale if the string cannot be interpreted in this
            locale.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>QLocale c(QLocale::C);</para>
            <para>d = c.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1,234.56&quot;, &amp;ok ); // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>QLocale german(QLocale::German);</para>
            <para>d = german.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1.234,56&quot;, &amp;ok ); // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>d = german.toDouble( &quot;1.234&quot;, &amp;ok );    // ok ==
            true, d == 1234.0</para>
            <para>Notice that the last conversion returns 1234.0, because '.' is
            the thousands group separator in the German locale.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toFloat(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToShort(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the short int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toUShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUShort(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the unsigned short int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToInt(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the int represented by the localized string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toUInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUInt(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the unsigned int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToLongLong(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the long long int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toInt(), toULongLong(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToULongLong(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the unsigned long long int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toLongLong(), toInt(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToFloat(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the float represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not null, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toDouble(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDouble(QtCore.QStringRef,System.Boolean@)">
            <summary>
            <para>Returns the double represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not null, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>Unlike QString::toDouble(), this function does not fall back to
            the &quot;C&quot; locale if the string cannot be interpreted in this
            locale.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>QLocale c(QLocale::C);</para>
            <para>d = c.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1,234.56&quot;, &amp;ok ); // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>QLocale german(QLocale::German);</para>
            <para>d = german.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1.234,56&quot;, &amp;ok ); // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>d = german.toDouble( &quot;1.234&quot;, &amp;ok );    // ok ==
            true, d == 1234.0</para>
            <para>Notice that the last conversion returns 1234.0, because '.' is
            the thousands group separator in the German locale.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toFloat(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.Int64)">
            <summary>
            <para>Returns a localized string representation of i.</para>
            <para>See also toLongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.UInt64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toULongLong().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.Int16)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.UInt16)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toUShort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also toUInt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.Double,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>f and prec have the same meaning as in QString::number(double,
            char, int).</para>
            <para>See also toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(System.Single,System.Char,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>f and prec have the same meaning as in QString::number(double,
            char, int).</para>
            <para>See also toDouble().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QDate,System.String)">
            <summary>
            <para>Returns a localized string representation of the given date in
            the specified format. If format is an empty string, an empty string is
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QDate,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns a localized string representation of the given date
            according to the specified format.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QTime,System.String)">
            <summary>
            <para>Returns a localized string representation of the given time
            according to the specified format. If format is an empty string, an empty
            string is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QTime,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns a localized string representation of the given time in
            the specified format.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QDateTime,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns a localized string representation of the given dateTime
            according to the specified format.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToString(QtCore.QDateTime,System.String)">
            <summary>
            <para>Returns a localized string representation of the given dateTime
            according to the specified format. If format is an empty string, an empty
            string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.DateFormat(QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the date format used for the current locale.</para>
            <para>If format is LongFormat the format will be a long version.
            Otherwise it uses a shorter version.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QDate::toString() and QDate::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.TimeFormat(QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the time format used for the current locale.</para>
            <para>If format is LongFormat the format will be a long version.
            Otherwise it uses a shorter version.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QTime::toString() and QTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.DateTimeFormat(QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the date time format used for the current locale.</para>
            <para>If format is ShortFormat the format will be a short version.
            Otherwise it uses a longer version.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QDateTime::toString() and
            QDateTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDate(System.String,QtCore.QLocale.FormatType)">
            <summary>
            <para>Parses the date string given in string and returns the date. The
            format of the date string is chosen according to the format parameter (see
            dateFormat()).</para>
            <para>If the date could not be parsed, returns an invalid date.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also dateFormat(), toTime(), toDateTime(), and
            QDate::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToTime(System.String,QtCore.QLocale.FormatType)">
            <summary>
            <para>Parses the time string given in string and returns the time. The
            format of the time string is chosen according to the format parameter (see
            timeFormat()).</para>
            <para>If the time could not be parsed, returns an invalid time.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also timeFormat(), toDate(), toDateTime(), and
            QTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDateTime(System.String,QtCore.QLocale.FormatType)">
            <summary>
            <para>Parses the date/time string given in string and returns the time.
            The format of the date/time string is chosen according to the format
            parameter (see dateTimeFormat()).</para>
            <para>If the string could not be parsed, returns an invalid
            QDateTime.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also dateTimeFormat(), toTime(), toDate(), and
            QDateTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDate(System.String,System.String)">
            <summary>
            <para>Parses the date string given in string and returns the date. See
            QDate::fromString() for information on the expressions that can be used
            with this function.</para>
            <para>This function searches month names and the names of the days of
            the week in the current locale.</para>
            <para>If the date could not be parsed, returns an invalid date.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also dateFormat(), toTime(), toDateTime(), and
            QDate::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToTime(System.String,System.String)">
            <summary>
            <para>Parses the time string given in string and returns the time. See
            QTime::fromString() for information on what is a valid format
            string.</para>
            <para>If the time could not be parsed, returns an invalid time.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also timeFormat(), toDate(), toDateTime(), and
            QTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDateTime(System.String,System.String)">
            <summary>
            <para>Parses the date/time string given in string and returns the time.
            See QDateTime::fromString() for information on the expressions that can be
            used with this function.</para>
            <para>Note: The month and day names used must be given in the user's
            local language.</para>
            <para>If the string could not be parsed, returns an invalid
            QDateTime.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also dateTimeFormat(), toTime(), toDate(), and
            QDateTime::fromString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.MonthName(System.Int32,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the localized name of month, in the format specified by
            type.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also dayName() and standaloneMonthName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.StandaloneMonthName(System.Int32,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the localized name of month that is used as a standalone
            text, in the format specified by type.</para>
            <para>If the locale information doesn't specify the standalone month
            name then return value is the same as in monthName().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also monthName() and standaloneDayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.DayName(System.Int32,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the localized name of the day (where 1 represents Monday,
            2 represents Tuesday and so on), in the format specified by type.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also monthName() and standaloneDayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.StandaloneDayName(System.Int32,QtCore.QLocale.FormatType)">
            <summary>
            <para>Returns the localized name of the day (where 1 represents Monday,
            2 represents Tuesday and so on) that is used as a standalone text, in the
            format specified by type.</para>
            <para>If the locale information does not specify the standalone day
            name then return value is the same as in dayName().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also dayName() and standaloneMonthName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUpper(System.String)">
            <summary>
            <para>Returns an uppercase copy of str.</para>
            <para>If Qt Core is using the ICU libraries, they will be used to
            perform the transformation according to the rules of the current locale.
            Otherwise the conversion may be done in a platform-dependent manner, with
            QString::toUpper() as a generic fallback.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::toUpper().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToLower(System.String)">
            <summary>
            <para>Returns a lowercase copy of str.</para>
            <para>If Qt Core is using the ICU libraries, they will be used to
            perform the transformation according to the rules of the current locale.
            Otherwise the conversion may be done in a platform-dependent manner, with
            QString::toLower() as a generic fallback.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QString::toLower().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.CurrencySymbol(QtCore.QLocale.CurrencySymbolFormat)">
            <summary>
            <para>Returns a currency symbol according to the format.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.Int64,System.String)">
            <summary>
            <para>Returns a localized string representation of value as a currency.
            If the symbol is provided it is used instead of the default currency
            symbol.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also currencySymbol().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.UInt64,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.Int16,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.UInt16,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.UInt32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.Double,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToCurrencyString(System.Single,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.op_Equality(QtCore.QLocale,QtCore.QLocale)">
            <summary>
            <para>Returns true if the QLocale object is the same as the other
            locale specified; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.op_Inequality(QtCore.QLocale,QtCore.QLocale)">
            <summary>
            <para>Returns true if the QLocale object is not the same as the other
            locale specified; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.QuoteString(System.String,QtCore.QLocale.QuotationStyle)">
            <summary>
            <para>Returns str quoted according to the current locale using the
            given quotation style.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.QuoteString(QtCore.QStringRef,QtCore.QLocale.QuotationStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.CreateSeparatedList(QtCore.QStringList)">
            <summary>
            <para>Returns a string that represents a join of a given list of
            strings with a separator defined by the locale.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToShort(System.String)">
            <summary>
            <para>Returns the short int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toUShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUShort(System.String)">
            <summary>
            <para>Returns the unsigned short int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToInt(System.String)">
            <summary>
            <para>Returns the int represented by the localized string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toUInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUInt(System.String)">
            <summary>
            <para>Returns the unsigned int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToLongLong(System.String)">
            <summary>
            <para>Returns the long long int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toInt(), toULongLong(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToULongLong(System.String)">
            <summary>
            <para>Returns the unsigned long long int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not 0, failure is reported by setting *ok to false, and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toLongLong(), toInt(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToFloat(System.String)">
            <summary>
            <para>Returns the float represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not 0, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toDouble(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDouble(System.String)">
            <summary>
            <para>Returns the double represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not 0, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>Unlike QString::toDouble(), this function does not fall back to
            the &quot;C&quot; locale if the string cannot be interpreted in this
            locale.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>QLocale c(QLocale::C);</para>
            <para>d = c.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1,234.56&quot;, &amp;ok ); // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>QLocale german(QLocale::German);</para>
            <para>d = german.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1.234,56&quot;, &amp;ok ); // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>d = german.toDouble( &quot;1.234&quot;, &amp;ok );    // ok ==
            true, d == 1234.0</para>
            <para>Notice that the last conversion returns 1234.0, because '.' is
            the thousands group separator in the German locale.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>See also toFloat(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToShort(QtCore.QStringRef)">
            <summary>
            <para>Returns the short int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toUShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUShort(QtCore.QStringRef)">
            <summary>
            <para>Returns the unsigned short int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toShort() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToInt(QtCore.QStringRef)">
            <summary>
            <para>Returns the int represented by the localized string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toUInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToUInt(QtCore.QStringRef)">
            <summary>
            <para>Returns the unsigned int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toInt() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToLongLong(QtCore.QStringRef)">
            <summary>
            <para>Returns the long long int represented by the localized string
            s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toInt(), toULongLong(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToULongLong(QtCore.QStringRef)">
            <summary>
            <para>Returns the unsigned long long int represented by the localized
            string s.</para>
            <para>If the conversion fails the function returns 0.</para>
            <para>If ok is not null, failure is reported by setting *ok to false,
            and success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toLongLong(), toInt(), toDouble(), and
            toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToFloat(QtCore.QStringRef)">
            <summary>
            <para>Returns the float represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not null, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toDouble(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ToDouble(QtCore.QStringRef)">
            <summary>
            <para>Returns the double represented by the localized string s, or 0.0
            if the conversion failed.</para>
            <para>If ok is not null, reports failure by setting *ok to false and
            success by setting *ok to true.</para>
            <para>Unlike QString::toDouble(), this function does not fall back to
            the &quot;C&quot; locale if the string cannot be interpreted in this
            locale.</para>
            <para>bool ok;</para>
            <para>double d;</para>
            <para></para>
            <para>QLocale c(QLocale::C);</para>
            <para>d = c.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1,234.56&quot;, &amp;ok ); // ok == true, d
            == 1234.56</para>
            <para>d = c.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>QLocale german(QLocale::German);</para>
            <para>d = german.toDouble( &quot;1234,56&quot;, &amp;ok );  // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1.234,56&quot;, &amp;ok ); // ok ==
            true, d == 1234.56</para>
            <para>d = german.toDouble( &quot;1234.56&quot;, &amp;ok );  // ok ==
            false</para>
            <para></para>
            <para>d = german.toDouble( &quot;1.234&quot;, &amp;ok );    // ok ==
            true, d == 1234.0</para>
            <para>Notice that the last conversion returns 1234.0, because '.' is
            the thousands group separator in the German locale.</para>
            <para>This function ignores leading and trailing whitespace.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also toFloat(), toInt(), and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.LanguageToString(QtCore.QLocale.Language)">
            <summary>
            <para>Returns a QString containing the name of language.</para>
            <para>See also countryToString(), scriptToString(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.CountryToString(QtCore.QLocale.Country)">
            <summary>
            <para>Returns a QString containing the name of country.</para>
            <para>See also languageToString(), scriptToString(), country(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.ScriptToString(QtCore.QLocale.Script)">
            <summary>
            <para>Returns a QString containing the name of script.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also languageToString(), countryToString(), script(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLocale.SetDefault(QtCore.QLocale)">
            <summary>
            <para>Sets the global default locale to locale. These values are used
            when a QLocale object is constructed with no arguments. If this function is
            not called, the system's locale is used.</para>
            <para>Warning: In a multithreaded application, the default locale
            should be set at application startup, before any non-GUI threads are
            created.</para>
            <para>Warning: This function is not reentrant.</para>
            <para>See also system() and c().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.NumberOptions">
            <summary>
            <para>Returns the options related to number conversions for this
            QLocale instance.</para>
            <para>By default, no options are set for the standard locales.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setNumberOptions().</para>
            <para></para>
            <para>Sets the options related to number conversions for this QLocale
            instance.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also numberOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.language">
            <summary>
            <para>Returns the language of this locale.</para>
            <para>See also script(), country(), languageToString(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.script">
            <summary>
            <para>Returns the script of this locale.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also language(), country(), languageToString(),
            scriptToString(), and bcp47Name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.country">
            <summary>
            <para>Returns the country of this locale.</para>
            <para>See also language(), script(), countryToString(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.Name">
            <summary>
            <para>Returns the language and country of this locale as a string of
            the form &quot;language_country&quot;, where language is a lowercase,
            two-letter ISO 639 language code, and country is an uppercase, two- or
            three-letter ISO 3166 country code.</para>
            <para>Note that even if QLocale object was constructed with an explicit
            script, name() will not contain it for compatibility reasons. Use
            bcp47Name() instead if you need a full locale name.</para>
            <para>See also QLocale(), language(), script(), country(), and
            bcp47Name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.Bcp47Name">
            <summary>
            <para>Returns the dash-separated language, script and country (and
            possibly other BCP47 fields) of this locale as a string.</para>
            <para>Unlike the uiLanguages() the returned value of the bcp47Name()
            represents the locale name of the QLocale data but not the language the
            user-interface should be in.</para>
            <para>This function tries to conform the locale name to BCP47.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also language(), country(), script(), and
            uiLanguages().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.NativeLanguageName">
            <summary>
            <para>Returns a native name of the language for the locale. For example
            &quot;Schwiizert&#252;&#252;tsch&quot; for Swiss-German locale.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also nativeCountryName() and languageToString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.NativeCountryName">
            <summary>
            <para>Returns a native name of the country for the locale. For example
            &quot;Espa&#241;a&quot; for Spanish/Spain locale.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also nativeLanguageName() and countryToString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.DecimalPoint">
            <summary>
            <para>Returns the decimal point character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.GroupSeparator">
            <summary>
            <para>Returns the group separator character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.Percent">
            <summary>
            <para>Returns the percent character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.ZeroDigit">
            <summary>
            <para>Returns the zero digit character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.NegativeSign">
            <summary>
            <para>Returns the negative sign character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.PositiveSign">
            <summary>
            <para>Returns the positive sign character of this locale.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.Exponential">
            <summary>
            <para>Returns the exponential character of this locale.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.FirstDayOfWeek">
            <summary>
            <para>Returns the first day of the week according to the current
            locale.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.AmText">
            <summary>
            <para>Returns the localized name of the &quot;AM&quot; suffix for times
            specified using the conventions of the 12-hour clock.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also pmText().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.PmText">
            <summary>
            <para>Returns the localized name of the &quot;PM&quot; suffix for times
            specified using the conventions of the 12-hour clock.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also amText().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.measurementSystem">
            <summary>
            <para>Returns the measurement system for the locale.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.TextDirection">
            <summary>
            <para>Returns the text direction of the language.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.UiLanguages">
            <summary>
            <para>Returns an ordered list of locale names for translation purposes
            in preference order (like &quot;en&quot;, &quot;en-US&quot;,
            &quot;en-Latn-US&quot;).</para>
            <para>The return value represents locale names that the user expects to
            see the UI translation in.</para>
            <para>Most like you do not need to use this function directly, but just
            pass the QLocale object to the QTranslator::load() function.</para>
            <para>The first item in the list is the most preferred one.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QTranslator and bcp47Name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.C">
            <summary>
            <para>Returns a QLocale object initialized to the &quot;C&quot;
            locale.</para>
            <para>See also system().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLocale.System">
            <summary>
            <para>Returns a QLocale object initialized to the system locale.</para>
            <para>On Windows and Mac, this locale will use the decimal/grouping
            characters and date/time formats specified in the system configuration
            panel.</para>
            <para>See also c().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLocale.Language">
            <summary>
            <para>This enumerated type is used to specify a language.</para>
            <para>See also language() and languageToString().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.Language.C">
            <summary>The "C" locale is identical in behavior to English/UnitedStates.</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.WesternFrisian">
            <summary>same as Frisian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.NorwegianBokmal">
            <summary>same as Norwegian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Akoose">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Lakota">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.StandardMoroccanTamazight">
            <summary>Since Qt 5.3</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Mapuche">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.CentralKurdish">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.LowerSorbian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.UpperSorbian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Kenyang">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Mohawk">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Nko">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Prussian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Kiche">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.SouthernSami">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.LuleSami">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.InariSami">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.SkoltSami">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Warlpiri">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.ManichaeanMiddlePersian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Mende">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.AncientNorthArabian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.LinearA">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.HmongNjua">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Ho">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Lezghian">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Bassa">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Mono">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.TedimChin">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Maithili">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Norwegian">
            <summary>same as NorwegianBokmal</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Moldavian">
            <summary>Obsolete, please use Romanian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.SerboCroatian">
            <summary>Obsolete, please use Serbian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Tagalog">
            <summary>Obsolete, please use Filipino</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Twi">
            <summary>Obsolete, please use Akan</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Afan">
            <summary>Obsolete, please use Oromo</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Byelorussian">
            <summary>Obsolete, please use Belarusian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Bhutani">
            <summary>Obsolete, please use Dzongkha</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Cambodian">
            <summary>Obsolete, please use Khmer</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Kurundi">
            <summary>Obsolete, please use Rundi</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.RhaetoRomance">
            <summary>Obsolete, please use Romansh</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Chewa">
            <summary>Obsolete, please use Nyanja</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Frisian">
            <summary>same as WesternFrisian</summary>
        </member>
        <member name="F:QtCore.QLocale.Language.Uigur">
            <summary>Obsolete, please use Uighur</summary>
        </member>
        <member name="T:QtCore.QLocale.Script">
            <summary>
            <para>This enumerated type is used to specify a script.</para>
            <para>See also script(), scriptToString(), and
            languageToString().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.Script.SimplifiedHanScript">
            <summary>same as SimplifiedChineseScript</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.TraditionalHanScript">
            <summary>same as TraditionalChineseScript</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.CaucasianAlbanianScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.BassaVahScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.DuployanScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.ElbasanScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.GranthaScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.PahawhHmongScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.KhojkiScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.LinearAScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.MahajaniScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.ManichaeanScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.MendeKikakuiScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.ModiScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.MroScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.OldNorthArabianScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.NabataeanScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.PalmyreneScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.PauCinHauScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.OldPermicScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.PsalterPahlaviScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.SiddhamScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.KhudawadiScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.TirhutaScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.VarangKshitiScript">
            <summary>Since Qt 5.5</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.SimplifiedChineseScript">
            <summary>same as SimplifiedHanScript</summary>
        </member>
        <member name="F:QtCore.QLocale.Script.TraditionalChineseScript">
            <summary>same as TraditionalHanScript</summary>
        </member>
        <member name="T:QtCore.QLocale.Country">
            <summary>
            <para>This enumerated type is used to specify a country.</para>
            <para>See also country() and countryToString().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.Country.Russia">
            <summary>same as RussianFederation</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.DemocraticRepublicOfCongo">
            <summary>Obsolete, please use CongoKinshasa</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.PeoplesRepublicOfCongo">
            <summary>Obsolete, please use CongoBrazzaville</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.DemocraticRepublicOfKorea">
            <summary>Obsolete, please use NorthKorea</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.RepublicOfKorea">
            <summary>Obsolete, please use SouthKorea</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.RussianFederation">
            <summary>same as Russia</summary>
        </member>
        <member name="F:QtCore.QLocale.Country.SyrianArabRepublic">
            <summary>Obsolete, please use Syria</summary>
        </member>
        <member name="T:QtCore.QLocale.MeasurementSystem">
            <summary>
            <para>This enum defines which units are used for measurement.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.MeasurementSystem.MetricSystem">
            <summary>This value indicates metric units, such as meters, centimeters and millimeters.</summary>
        </member>
        <member name="F:QtCore.QLocale.MeasurementSystem.ImperialUSSystem">
            <summary>This value indicates imperial units, such as inches and miles as they are used in the United States.</summary>
        </member>
        <member name="F:QtCore.QLocale.MeasurementSystem.ImperialUKSystem">
            <summary>This value indicates imperial units, such as inches and miles as they are used in the United Kingdom.</summary>
        </member>
        <member name="F:QtCore.QLocale.MeasurementSystem.ImperialSystem">
            <summary>Provided for compatibility. Same as ImperialUSSystem</summary>
        </member>
        <member name="T:QtCore.QLocale.FormatType">
            <summary>
            <para>This enum describes the types of format that can be used when
            converting QDate and QTime objects to strings.</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.FormatType.LongFormat">
            <summary>The long version of day and month names; for example, returning "January" as a month name.</summary>
        </member>
        <member name="F:QtCore.QLocale.FormatType.ShortFormat">
            <summary>The short version of day and month names; for example, returning "Jan" as a month name.</summary>
        </member>
        <member name="F:QtCore.QLocale.FormatType.NarrowFormat">
            <summary>A special version of day and month names for use when space is limited; for example, returning "J" as a month name. Note that the narrow format might contain the same text for different months and days or it can even be an empty string if the locale doesn't support narrow names, so you should avoid using it for date formatting. Also, for the system locale this format is the same as ShortFormat.</summary>
        </member>
        <member name="T:QtCore.QLocale.NumberOption">
            <summary>
            <para>This enum defines a set of options for number-to-string and
            string-to-number conversions. They can be retrieved with numberOptions()
            and set with setNumberOptions().</para>
            <para>The NumberOptions type is a typedef for
            QFlags&lt;NumberOption&gt;. It stores an OR combination of NumberOption
            values.</para>
            <para>See also setNumberOptions() and numberOptions().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.NumberOption.OmitGroupSeparator">
            <summary>If this option is set, the number-to-string functions will not insert group separators in their return values. The default is to insert group separators.</summary>
        </member>
        <member name="F:QtCore.QLocale.NumberOption.RejectGroupSeparator">
            <summary>If this option is set, the string-to-number functions will fail if they encounter group separators in their input. The default is to accept numbers containing correctly placed group separators.</summary>
        </member>
        <member name="T:QtCore.QLocale.CurrencySymbolFormat">
            <summary>
            <para>Specifies the format of the currency symbol.</para>
            <para>This enum was introduced or modified in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.CurrencySymbolFormat.CurrencyIsoCode">
            <summary>a ISO-4217 code of the currency.</summary>
        </member>
        <member name="F:QtCore.QLocale.CurrencySymbolFormat.CurrencySymbol">
            <summary>a currency symbol.</summary>
        </member>
        <member name="F:QtCore.QLocale.CurrencySymbolFormat.CurrencyDisplayName">
            <summary>a user readable name of the currency.</summary>
        </member>
        <member name="T:QtCore.QLocale.QuotationStyle">
            <summary>
            <para>This enum defines a set of possible styles for locale specific
            quotation.</para>
            <para>This enum was introduced or modified in  Qt 4.8.</para>
            <para>See also quoteString().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLocale.QuotationStyle.StandardQuotation">
            <summary>If this option is set, the standard quotation marks will be used to quote strings.</summary>
        </member>
        <member name="F:QtCore.QLocale.QuotationStyle.AlternateQuotation">
            <summary>If this option is set, the alternate quotation marks will be used to quote strings.</summary>
        </member>
        <member name="T:QtCore.QTextStream">
            <summary>
            <para>The QTextStream class provides a convenient interface for reading
            and writing text.</para>
            </summary>
            <remarks>
            <para>QTextStream can operate on a QIODevice, a QByteArray or a
            QString. Using QTextStream's streaming operators, you can conveniently read
            and write words, lines and numbers. For generating text, QTextStream
            supports formatting options for field padding and alignment, and formatting
            of numbers. Example:</para>
            <para>QFile data(&quot;output.txt&quot;);</para>
            <para>if (data.open(QFile::WriteOnly | QFile::Truncate)) {</para>
            <para>    QTextStream out(&amp;data);</para>
            <para>    out &lt;&lt; &quot;Result: &quot; &lt;&lt; qSetFieldWidth(10)
            &lt;&lt; left &lt;&lt; 3.14 &lt;&lt; 2.7;</para>
            <para>    // writes &quot;Result: 3.14      2.7       &quot;</para>
            <para>}</para>
            <para>It's also common to use QTextStream to read console input and
            write console output. QTextStream is locale aware, and will automatically
            decode standard input using the correct codec. Example:</para>
            <para>QTextStream stream(stdin);</para>
            <para>QString line;</para>
            <para>while (stream.readLineInto(&amp;line)) {</para>
            <para>    ...</para>
            <para>}</para>
            <para>Besides using QTextStream's constructors, you can also set the
            device or string QTextStream operates on by calling setDevice() or
            setString(). You can seek to a position by calling seek(), and atEnd() will
            return true when there is no data left to be read. If you call flush(),
            QTextStream will empty all data from its write buffer into the device and
            call flush() on the device.</para>
            <para>Internally, QTextStream uses a Unicode based buffer, and
            QTextCodec is used by QTextStream to automatically support different
            character sets. By default, QTextCodec::codecForLocale() is used for
            reading and writing, but you can also set the codec by calling setCodec().
            Automatic Unicode detection is also supported. When this feature is enabled
            (the default behavior), QTextStream will detect the UTF-16 or the UTF-32
            BOM (Byte Order Mark) and switch to the appropriate UTF codec when reading.
            QTextStream does not write a BOM by default, but you can enable this by
            calling setGenerateByteOrderMark(true). When QTextStream operates on a
            QString directly, the codec is disabled.</para>
            <para>There are three general ways to use QTextStream when reading text
            files:</para>
            <para></para>
            <para>Chunk by chunk, by calling readLine() or readAll().</para>
            <para>Word by word. QTextStream supports streaming into QStrings,
            QByteArrays and char* buffers. Words are delimited by space, and leading
            white space is automatically skipped.</para>
            <para>Character by character, by streaming into QChar or char types.
            This method is often used for convenient input handling when parsing files,
            independent of character encoding and end-of-line semantics. To skip white
            space, call skipWhiteSpace().</para>
            <para></para>
            <para>Since the text stream uses a buffer, you should not read from the
            stream using the implementation of a superclass. For instance, if you have
            a QFile and read from it directly using QFile::readLine() instead of using
            the stream, the text stream's internal position will be out of sync with
            the file's position.</para>
            <para>By default, when reading numbers from a stream of text,
            QTextStream will automatically detect the number's base representation. For
            example, if the number starts with &quot;0x&quot;, it is assumed to be in
            hexadecimal form. If it starts with the digits 1-9, it is assumed to be in
            decimal form, and so on. You can set the integer base, thereby disabling
            the automatic detection, by calling setIntegerBase(). Example:</para>
            <para>QTextStream in(&quot;0x50 0x20&quot;);</para>
            <para>int firstNumber, secondNumber;</para>
            <para></para>
            <para>in &gt;&gt; firstNumber;             // firstNumber == 80</para>
            <para>in &gt;&gt; dec &gt;&gt; secondNumber;     // secondNumber ==
            0</para>
            <para></para>
            <para>char ch;</para>
            <para>in &gt;&gt; ch;                      // ch == 'x'</para>
            <para>QTextStream supports many formatting options for generating text.
            You can set the field width and pad character by calling setFieldWidth()
            and setPadChar(). Use setFieldAlignment() to set the alignment within each
            field. For real numbers, call setRealNumberNotation() and
            setRealNumberPrecision() to set the notation (SmartNotation,
            ScientificNotation, FixedNotation) and precision in digits of the generated
            number. Some extra number formatting options are also available through
            setNumberFlags().</para>
            <para>Like &lt;iostream&gt; in the standard C++ library, QTextStream
            also defines several global manipulator functions:</para>
            <para></para>
            <para> ManipulatorDescription</para>
            <para>bin	Same as setIntegerBase(2).</para>
            <para>oct	Same as setIntegerBase(8).</para>
            <para>dec	Same as setIntegerBase(10).</para>
            <para>hex	Same as setIntegerBase(16).</para>
            <para>showbase	Same as setNumberFlags(numberFlags() | ShowBase).</para>
            <para>forcesign	Same as setNumberFlags(numberFlags() |
            ForceSign).</para>
            <para>forcepoint	Same as setNumberFlags(numberFlags() |
            ForcePoint).</para>
            <para>noshowbase	Same as setNumberFlags(numberFlags() &amp;
            ~ShowBase).</para>
            <para>noforcesign	Same as setNumberFlags(numberFlags() &amp;
            ~ForceSign).</para>
            <para>noforcepoint	Same as setNumberFlags(numberFlags() &amp;
            ~ForcePoint).</para>
            <para>uppercasebase	Same as setNumberFlags(numberFlags() |
            UppercaseBase).</para>
            <para>uppercasedigits	Same as setNumberFlags(numberFlags() |
            UppercaseDigits).</para>
            <para>lowercasebase	Same as setNumberFlags(numberFlags() &amp;
            ~UppercaseBase).</para>
            <para>lowercasedigits	Same as setNumberFlags(numberFlags() &amp;
            ~UppercaseDigits).</para>
            <para>fixed	Same as setRealNumberNotation(FixedNotation).</para>
            <para>scientific	Same as
            setRealNumberNotation(ScientificNotation).</para>
            <para>left	Same as setFieldAlignment(AlignLeft).</para>
            <para>right	Same as setFieldAlignment(AlignRight).</para>
            <para>center	Same as setFieldAlignment(AlignCenter).</para>
            <para>endl	Same as operator&lt;&lt;('\n') and flush().</para>
            <para>flush	Same as flush().</para>
            <para>reset	Same as reset().</para>
            <para>ws	Same as skipWhiteSpace().</para>
            <para>bom	Same as setGenerateByteOrderMark(true).</para>
            <para></para>
            <para>In addition, Qt provides three global manipulators that take a
            parameter: qSetFieldWidth(), qSetPadChar(), and
            qSetRealNumberPrecision().</para>
            <para></para>
            <para>See also QDataStream, QIODevice, QFile, QBuffer, QTcpSocket, and
            Text Codecs Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTextStream.#ctor">
            <summary>
            <para>Constructs a QTextStream. Before you can use it for reading or
            writing, you must assign a device or a string.</para>
            <para>See also setDevice() and setString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Constructs a QTextStream that operates on device.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.#ctor(System.IntPtr,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Constructs a QTextStream that operates on fileHandle, using
            openMode to define the open mode. Internally, a QFile is created to handle
            the FILE pointer.</para>
            <para>This constructor is useful for working directly with the common
            FILE based input and output streams: stdin, stdout and stderr.
            Example:</para>
            <para>QString str;</para>
            <para>QTextStream in(stdin);</para>
            <para>in &gt;&gt; str;</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.#ctor(System.String,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Constructs a QTextStream that operates on string, using openMode
            to define the open mode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.#ctor(QtCore.QByteArray,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Constructs a QTextStream that operates on array, using openMode
            to define the open mode. Internally, the array is wrapped by a
            QBuffer.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.SetCodec(System.String)">
            <summary>
            <para>Sets the codec for this stream to the QTextCodec for the encoding
            specified by codecName. Common values for codecName include &quot;ISO
            8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding
            isn't recognized, nothing happens.</para>
            <para>Example:</para>
            <para>QTextStream out(&amp;file);</para>
            <para>out.setCodec(&quot;UTF-8&quot;);</para>
            <para>See also QTextCodec::codecForName() and setLocale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.SetString(System.String,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Sets the current string to string, using the given openMode. If a
            device has already been assigned, QTextStream will call flush() before
            replacing it.</para>
            <para>See also string() and setDevice().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.ResetStatus">
            <summary>
            <para>Resets the status of the text stream.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QTextStream::Status, status(), and setStatus().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Reset">
            <summary>
            <para>Resets QTextStream's formatting options, bringing it back to its
            original constructed state. The device, string and any buffered data is
            left untouched.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Flush">
            <summary>
            <para>Flushes any buffered data waiting to be written to the
            device.</para>
            <para>If QTextStream operates on a string, this function does
            nothing.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Seek(System.Int64)">
            <summary>
            <para>Seeks to the position pos in the device. Returns true on success;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.SkipWhiteSpace">
            <summary>
            <para>Reads and discards whitespace from the stream until either a
            non-space character is detected, or until atEnd() returns true. This
            function is useful when reading a stream character by character.</para>
            <para>Whitespace characters are all characters for which
            QChar::isSpace() returns true.</para>
            <para>See also operator&gt;&gt;().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.ReadLine(System.Int64)">
            <summary>
            <para>Reads one line of text from the stream, and returns it as a
            QString. The maximum allowed line length is set to maxlen. If the stream
            contains lines longer than this, then the lines will be split after maxlen
            characters and returned in parts.</para>
            <para>If maxlen is 0, the lines can be of any length.</para>
            <para>The returned line has no trailing end-of-line characters
            (&quot;\n&quot; or &quot;\r\n&quot;), so calling QString::trimmed() can be
            unnecessary.</para>
            <para>If the stream has read to the end of the file, readLine() will
            return a null QString. For strings, or for devices that support it, you can
            explicitly test for the end of the stream using atEnd().</para>
            <para>See also readAll() and QIODevice::readLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.ReadLineInto(System.String,System.Int64)">
            <summary>
            <para>Reads one line of text from the stream into line. If line is 0,
            the read line is not stored.</para>
            <para>The maximum allowed line length is set to maxlen. If the stream
            contains lines longer than this, then the lines will be split after maxlen
            characters and returned in parts.</para>
            <para>If maxlen is 0, the lines can be of any length.</para>
            <para>The resulting line has no trailing end-of-line characters
            (&quot;\n&quot; or &quot;\r\n&quot;), so calling QString::trimmed() can be
            unnecessary.</para>
            <para>If line has sufficient capacity for the data that is about to be
            read, this function may not need to allocate new memory. Because of this,
            it can be faster than readLine().</para>
            <para>Returns false if the stream has read to the end of the file or an
            error has occurred; otherwise returns true. The contents in line before the
            call are discarded in any case.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also readAll() and QIODevice::readLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.ReadAll">
            <summary>
            <para>Reads the entire content of the stream, and returns it as a
            QString. Avoid this function when working on large files, as it will
            consume a significant amount of memory.</para>
            <para>Calling readLine() is better if you do not know how much data is
            available.</para>
            <para>See also readLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Read(System.Int64)">
            <summary>
            <para>Reads at most maxlen characters from the stream, and returns the
            data read as a QString.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also readAll(), readLine(), and QIODevice::read().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.op_LeftShift(QtCore.QTextStream,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes the signed int i to the stream.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Bin(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setIntegerBase(2) on stream and returns
            stream.</para>
            <para>See also oct(), dec(), hex(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Oct(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setIntegerBase(8) on stream and returns
            stream.</para>
            <para>See also bin(), dec(), hex(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Dec(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setIntegerBase(10) on stream and returns
            stream.</para>
            <para>See also bin(), oct(), hex(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Hex(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setIntegerBase(16) on stream and returns
            stream.</para>
            <para>Note: The hex modifier can only be used for writing to
            streams.</para>
            <para>See also bin(), oct(), dec(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Showbase(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags() |
            QTextStream::ShowBase) on stream and returns stream.</para>
            <para>See also noshowbase(), forcesign(), forcepoint(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Forcesign(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags() |
            QTextStream::ForceSign) on stream and returns stream.</para>
            <para>See also noforcesign(), forcepoint(), showbase(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Forcepoint(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags() |
            QTextStream::ForcePoint) on stream and returns stream.</para>
            <para>See also noforcepoint(), forcesign(), showbase(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Noshowbase(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags()
            &amp; ~QTextStream::ShowBase) on stream and returns stream.</para>
            <para>See also showbase(), noforcesign(), noforcepoint(), and
            QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Noforcesign(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags()
            &amp; ~QTextStream::ForceSign) on stream and returns stream.</para>
            <para>See also forcesign(), noforcepoint(), noshowbase(), and
            QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Noforcepoint(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags()
            &amp; ~QTextStream::ForcePoint) on stream and returns stream.</para>
            <para>See also forcepoint(), noforcesign(), noshowbase(), and
            QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Uppercasebase(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags() |
            QTextStream::UppercaseBase) on stream and returns stream.</para>
            <para>See also lowercasebase(), uppercasedigits(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Uppercasedigits(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags() |
            QTextStream::UppercaseDigits) on stream and returns stream.</para>
            <para>See also lowercasedigits(), uppercasebase(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Lowercasebase(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags()
            &amp; ~QTextStream::UppercaseBase) on stream and returns stream.</para>
            <para>See also uppercasebase(), lowercasedigits(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Lowercasedigits(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setNumberFlags(QTextStream::numberFlags()
            &amp; ~QTextStream::UppercaseDigits) on stream and returns stream.</para>
            <para>See also uppercasedigits(), lowercasebase(), and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Fixed(QtCore.QTextStream)">
            <summary>
            <para>Calls
            QTextStream::setRealNumberNotation(QTextStream::FixedNotation) on stream
            and returns stream.</para>
            <para>See also scientific() and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Scientific(QtCore.QTextStream)">
            <summary>
            <para>Calls
            QTextStream::setRealNumberNotation(QTextStream::ScientificNotation) on
            stream and returns stream.</para>
            <para>See also fixed() and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Left(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setFieldAlignment(QTextStream::AlignLeft) on
            stream and returns stream.</para>
            <para>See also right(), center(), and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Right(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setFieldAlignment(QTextStream::AlignRight) on
            stream and returns stream.</para>
            <para>See also left(), center(), and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Center(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::setFieldAlignment(QTextStream::AlignCenter) on
            stream and returns stream.</para>
            <para>See also left(), right(), and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Endl(QtCore.QTextStream)">
            <summary>
            <para>Writes '\n' to the stream and flushes the stream.</para>
            <para>Equivalent to</para>
            <para>stream &lt;&lt; '\n' &lt;&lt; flush;</para>
            <para>Note: On Windows, all '\n' characters are written as '\r\n' if
            QTextStream's device or string is opened using the QIODevice::Text
            flag.</para>
            <para>See also flush(), reset(), and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Flush(QtCore.QTextStream)">
            <summary>
            <para>Calls flush() on stream and returns stream.</para>
            <para>See also endl(), reset(), and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Reset(QtCore.QTextStream)">
            <summary>
            <para>Calls QTextStream::reset() on stream and returns stream.</para>
            <para>See also flush() and QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Bom(QtCore.QTextStream)">
            <summary>
            <para>Toggles insertion of the Byte Order Mark on stream when
            QTextStream is used with a UTF codec.</para>
            <para>See also QTextStream::setGenerateByteOrderMark() and QTextStream
            manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.Ws(QtCore.QTextStream)">
            <summary>
            <para>Calls skipWhiteSpace() on stream and returns stream.</para>
            <para>See also QTextStream manipulators.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.QSetFieldWidth(System.Int32)">
            <summary>
            <para>Equivalent to QTextStream::setFieldWidth(width).</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.QSetPadChar(QtCore.QChar)">
            <summary>
            <para>Equivalent to QTextStream::setPadChar(ch).</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextStream.QSetRealNumberPrecision(System.Int32)">
            <summary>
            <para>Equivalent to
            QTextStream::setRealNumberPrecision(precision).</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.Codec">
            <summary>
            <para>Returns the codec that is current assigned to the stream.</para>
            <para>See also setCodec(), setAutoDetectUnicode(), and locale().</para>
            <para></para>
            <para>Sets the codec for this stream to codec. The codec is used for
            decoding any data that is read from the assigned device, and for encoding
            any data that is written. By default, QTextCodec::codecForLocale() is used,
            and automatic unicode detection is enabled.</para>
            <para>If QTextStream operates on a string, this function does
            nothing.</para>
            <para>Warning: If you call this function while the text stream is
            reading from an open sequential socket, the internal buffer may still
            contain text decoded using the old codec.</para>
            <para>See also codec(), setAutoDetectUnicode(), and setLocale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.AutoDetectUnicode">
            <summary>
            <para>Returns true if automatic Unicode detection is enabled, otherwise
            returns false. Automatic Unicode detection is enabled by default.</para>
            <para>See also setAutoDetectUnicode() and setCodec().</para>
            <para></para>
            <para>If enabled is true, QTextStream will attempt to detect Unicode
            encoding by peeking into the stream data to see if it can find the UTF-16
            or UTF-32 BOM (Byte Order Mark). If this mark is found, QTextStream will
            replace the current codec with the UTF codec.</para>
            <para>This function can be used together with setCodec(). It is common
            to set the codec to UTF-8, and then enable UTF-16 detection.</para>
            <para>See also autoDetectUnicode() and setCodec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.GenerateByteOrderMark">
            <summary>
            <para>Returns true if QTextStream is set to generate the UTF BOM (Byte
            Order Mark) when using a UTF codec; otherwise returns false. UTF BOM
            generation is set to false by default.</para>
            <para>See also setGenerateByteOrderMark().</para>
            <para></para>
            <para>If generate is true and a UTF codec is used, QTextStream will
            insert the BOM (Byte Order Mark) before any data has been written to the
            device. If generate is false, no BOM will be inserted. This function must
            be called before any data is written. Otherwise, it does nothing.</para>
            <para>See also generateByteOrderMark() and bom().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.Locale">
            <summary>
            <para>Returns the locale for this stream. The default locale is
            C.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale for this stream to locale. The specified locale
            is used for conversions between numbers and their string
            representations.</para>
            <para>The default locale is C and it is a special case - the thousands
            group separator is not used for backward compatibility reasons.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.Device">
            <summary>
            <para>Returns the current device associated with the QTextStream, or 0
            if no device has been assigned.</para>
            <para>See also setDevice() and string().</para>
            <para></para>
            <para>Sets the current device to device. If a device has already been
            assigned, QTextStream will call flush() before the old device is
            replaced.</para>
            <para>Note: This function resets locale to the default locale ('C') and
            codec to the default codec, QTextCodec::codecForLocale().</para>
            <para>See also device() and setString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.status">
            <summary>
            <para>Returns the status of the text stream.</para>
            <para>See also QTextStream::Status, setStatus(), and
            resetStatus().</para>
            <para></para>
            <para>Sets the status of the text stream to the status given.</para>
            <para>Subsequent calls to setStatus() are ignored until resetStatus()
            is called.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also Status, status(), and resetStatus().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.fieldAlignment">
            <summary>
            <para>Returns the current field alignment.</para>
            <para>See also setFieldAlignment() and fieldWidth().</para>
            <para></para>
            <para>Sets the field alignment to mode. When used together with
            setFieldWidth(), this function allows you to generate formatted output with
            text aligned to the left, to the right or center aligned.</para>
            <para>See also fieldAlignment() and setFieldWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.PadChar">
            <summary>
            <para>Returns the current pad character.</para>
            <para>See also setPadChar() and setFieldWidth().</para>
            <para></para>
            <para>Sets the pad character to ch. The default value is the ASCII
            space character (' '), or QChar(0x20). This character is used to fill in
            the space in fields when generating text.</para>
            <para>Example:</para>
            <para>QString s;</para>
            <para>QTextStream out(&amp;s);</para>
            <para>out.setFieldWidth(10);</para>
            <para>out.setFieldAlignment(QTextStream::AlignCenter);</para>
            <para>out.setPadChar('-');</para>
            <para>out &lt;&lt; &quot;Qt&quot; &lt;&lt; &quot;rocks!&quot;;</para>
            <para>The string s contains:</para>
            <para>----Qt------rocks!--</para>
            <para>See also padChar() and setFieldWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.FieldWidth">
            <summary>
            <para>Returns the current field width.</para>
            <para>See also setFieldWidth().</para>
            <para></para>
            <para>Sets the current field width to width. If width is 0 (the
            default), the field width is equal to the length of the generated
            text.</para>
            <para>Note: The field width applies to every element appended to this
            stream after this function has been called (e.g., it also pads endl). This
            behavior is different from similar classes in the STL, where the field
            width only applies to the next element.</para>
            <para>See also fieldWidth() and setPadChar().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.NumberFlags">
            <summary>
            <para>Returns the current number flags.</para>
            <para>See also setNumberFlags(), integerBase(), and
            realNumberNotation().</para>
            <para></para>
            <para>Sets the current number flags to flags. flags is a set of flags
            from the NumberFlag enum, and describes options for formatting generated
            code (e.g., whether or not to always write the base or sign of a
            number).</para>
            <para>See also numberFlags(), setIntegerBase(), and
            setRealNumberNotation().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.IntegerBase">
            <summary>
            <para>Returns the current base of integers. 0 means that the base is
            detected when reading, or 10 (decimal) when generating numbers.</para>
            <para>See also setIntegerBase(), QString::number(), and
            numberFlags().</para>
            <para></para>
            <para>Sets the base of integers to base, both for reading and for
            generating numbers. base can be either 2 (binary), 8 (octal), 10 (decimal)
            or 16 (hexadecimal). If base is 0, QTextStream will attempt to detect the
            base by inspecting the data on the stream. When generating numbers,
            QTextStream assumes base is 10 unless the base has been set
            explicitly.</para>
            <para>See also integerBase(), QString::number(), and
            setNumberFlags().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.realNumberNotation">
            <summary>
            <para>Returns the current real number notation.</para>
            <para>See also setRealNumberNotation(), realNumberPrecision(),
            numberFlags(), and integerBase().</para>
            <para></para>
            <para>Sets the real number notation to notation (SmartNotation,
            FixedNotation, ScientificNotation). When reading and generating numbers,
            QTextStream uses this value to detect the formatting of real
            numbers.</para>
            <para>See also realNumberNotation(), setRealNumberPrecision(),
            setNumberFlags(), and setIntegerBase().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.RealNumberPrecision">
            <summary>
            <para>Returns the current real number precision, or the number of
            fraction digits QTextStream will write when generating real numbers.</para>
            <para>See also setRealNumberPrecision(), setRealNumberNotation(),
            realNumberNotation(), numberFlags(), and integerBase().</para>
            <para></para>
            <para>Sets the precision of real numbers to precision. This value
            describes the number of fraction digits QTextStream should write when
            generating real numbers.</para>
            <para>The precision cannot be a negative value. The default value is
            6.</para>
            <para>See also realNumberPrecision() and
            setRealNumberNotation().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.String">
            <summary>
            <para>Returns the current string assigned to the QTextStream, or 0 if
            no string has been assigned.</para>
            <para>See also setString() and device().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.AtEnd">
            <summary>
            <para>Returns true if there is no more data to be read from the
            QTextStream; otherwise returns false. This is similar to, but not the same
            as calling QIODevice::atEnd(), as QTextStream also takes into account its
            internal Unicode buffer.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextStream.Pos">
            <summary>
            <para>Returns the device position corresponding to the current position
            of the stream, or -1 if an error occurs (e.g., if there is no device or
            string, or if there's a device error).</para>
            <para>Because QTextStream is buffered, this function may have to seek
            the device to reconstruct a valid device position. This operation can be
            expensive, so you may want to avoid calling this function in a tight
            loop.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also seek().</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextStream.RealNumberNotation">
            <summary>
            <para>This enum specifies which notations to use for expressing float
            and double as strings.</para>
            <para>See also setRealNumberNotation().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextStream.RealNumberNotation.SmartNotation">
            <summary>Scientific or fixed-point notation, depending on which makes most sense (printf()'s %g flag).</summary>
        </member>
        <member name="F:QtCore.QTextStream.RealNumberNotation.FixedNotation">
            <summary>Fixed-point notation (printf()'s %f flag).</summary>
        </member>
        <member name="F:QtCore.QTextStream.RealNumberNotation.ScientificNotation">
            <summary>Scientific notation (printf()'s %e flag).</summary>
        </member>
        <member name="T:QtCore.QTextStream.FieldAlignment">
            <summary>
            <para>This enum specifies how to align text in fields when the field is
            wider than the text that occupies it.</para>
            <para>See also setFieldAlignment().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextStream.FieldAlignment.AlignLeft">
            <summary>Pad on the right side of fields.</summary>
        </member>
        <member name="F:QtCore.QTextStream.FieldAlignment.AlignRight">
            <summary>Pad on the left side of fields.</summary>
        </member>
        <member name="F:QtCore.QTextStream.FieldAlignment.AlignCenter">
            <summary>Pad on both sides of field.</summary>
        </member>
        <member name="F:QtCore.QTextStream.FieldAlignment.AlignAccountingStyle">
            <summary>Same as AlignRight, except that the sign of a number is flush left.</summary>
        </member>
        <member name="T:QtCore.QTextStream.Status">
            <summary>
            <para>This enum describes the current status of the text stream.</para>
            <para>See also status().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextStream.Status.Ok">
            <summary>The text stream is operating normally.</summary>
        </member>
        <member name="F:QtCore.QTextStream.Status.ReadPastEnd">
            <summary>The text stream has read past the end of the data in the underlying device.</summary>
        </member>
        <member name="F:QtCore.QTextStream.Status.ReadCorruptData">
            <summary>The text stream has read corrupt data.</summary>
        </member>
        <member name="F:QtCore.QTextStream.Status.WriteFailed">
            <summary>The text stream cannot write to the underlying device.</summary>
        </member>
        <member name="T:QtCore.QTextStream.NumberFlag">
            <summary>
            <para>This enum specifies various flags that can be set to affect the
            output of integers, floats, and doubles.</para>
            <para>The NumberFlags type is a typedef for QFlags&lt;NumberFlag&gt;.
            It stores an OR combination of NumberFlag values.</para>
            <para>See also setNumberFlags().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextStream.NumberFlag.ShowBase">
            <summary>Show the base as a prefix if the base is 16 ("0x"), 8 ("0"), or 2 ("0b").</summary>
        </member>
        <member name="F:QtCore.QTextStream.NumberFlag.ForcePoint">
            <summary>Always put the decimal separator in numbers, even if there are no decimals.</summary>
        </member>
        <member name="F:QtCore.QTextStream.NumberFlag.ForceSign">
            <summary>Always put the sign in numbers, even for positive numbers.</summary>
        </member>
        <member name="F:QtCore.QTextStream.NumberFlag.UppercaseBase">
            <summary>Use uppercase versions of base prefixes ("0X", "0B").</summary>
        </member>
        <member name="F:QtCore.QTextStream.NumberFlag.UppercaseDigits">
            <summary>Use uppercase letters for expressing digits 10 to 35 instead of lowercase.</summary>
        </member>
        <member name="T:QtCore.QDebug">
            <summary>
            <para>The QDebug class provides an output stream for debugging
            information.</para>
            </summary>
            <remarks>
            <para>QDebug is used whenever the developer needs to write out
            debugging or tracing information to a device, file, string or
            console.</para>
            <para></para>
            <para>Basic Use</para>
            <para>In the common case, it is useful to call the qDebug() function to
            obtain a default QDebug object to use for writing debugging
            information.</para>
            <para>    qDebug() &lt;&lt; &quot;Date:&quot; &lt;&lt;
            QDate::currentDate();</para>
            <para>    qDebug() &lt;&lt; &quot;Types:&quot; &lt;&lt;
            QString(&quot;String&quot;) &lt;&lt; QChar('x') &lt;&lt; QRect(0, 10, 50,
            40);</para>
            <para>    qDebug() &lt;&lt; &quot;Custom coordinate type:&quot;
            &lt;&lt; coordinate;</para>
            <para>This constructs a QDebug object using the constructor that
            accepts a QtMsgType value of QtDebugMsg. Similarly, the qWarning(),
            qCritical() and qFatal() functions also return QDebug objects for the
            corresponding message types.</para>
            <para>The class also provides several constructors for other
            situations, including a constructor that accepts a QFile or any other
            QIODevice subclass that is used to write debugging information to files and
            other devices. The constructor that accepts a QString is used to write to a
            string for display or serialization.</para>
            <para></para>
            <para>Formatting Options</para>
            <para>QDebug formats output so that it's easily readable. It
            automatically adds spaces between arguments, and adds quotes around
            QString, QByteArray, QChar arguments.</para>
            <para>You can tweak these options through the space(), nospace() and
            quote(), noquote() methods. Furthermore, QTextStream manipulators can be
            piped into a QDebug stream.</para>
            <para>QDebugStateSaver limits changes to the formatting to the current
            scope. resetFormat() resets the options to the default ones.</para>
            <para></para>
            <para>Writing Custom Types to a Stream</para>
            <para>Many standard types can be written to QDebug objects, and Qt
            provides support for most Qt value types. To add support for custom types,
            you need to implement a streaming operator, as in the following
            example:</para>
            <para>QDebug operator&lt;&lt;(QDebug debug, const Coordinate
            &amp;c)</para>
            <para>{</para>
            <para>    QDebugStateSaver saver(debug);</para>
            <para>    debug.nospace() &lt;&lt; '(' &lt;&lt; c.x() &lt;&lt; &quot;,
            &quot; &lt;&lt; c.y() &lt;&lt; ')';</para>
            <para></para>
            <para>    return debug;</para>
            <para>}</para>
            <para>This is described in the Debugging Techniques and Creating Custom
            Qt Types documents.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDebug.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Constructs a debug stream that writes to the given device.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.#ctor(System.String)">
            <summary>
            <para>Constructs a debug stream that writes to the given string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.#ctor(QtCore.QtMsgType)">
            <summary>
            <para>Constructs a debug stream that writes to the handler for the
            message type specified by type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.#ctor(QtCore.QDebug)">
            <summary>
            <para>Constructs a copy of the other debug stream.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.Swap(QtCore.QDebug)">
            <summary>
            <para>Swaps this debug stream instance with other. This function is
            very fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.ResetFormat">
            <summary>
            <para>Resets the stream formatting options, bringing it back to its
            original constructed state.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also space() and quote().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.Quote">
            <summary>
            <para>Enables automatic insertion of quotation characters around QChar,
            QString and QByteArray contents and returns a reference to the
            stream.</para>
            <para>Quoting is enabled by default.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also noquote() and maybeQuote().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.MaybeQuote(System.Char)">
            <summary>
            <para>Writes a character c to the debug stream, depending on the
            current setting for automatic insertion of quotes, and returns a reference
            to the stream.</para>
            <para>The default character is a double quote &quot;.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also quote() and noquote().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDebug.op_LeftShift(QtCore.QDebug,System.Int32)">
            <summary>
            <para>Writes the signed integer, i, to the stream and returns a
            reference to the stream.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDebug.AutoInsertSpaces">
            <summary>
            <para>Returns true if this QDebug instance will automatically insert
            spaces between writes.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setAutoInsertSpaces() and QDebugStateSaver.</para>
            <para></para>
            <para>Enables automatic insertion of spaces between writes if b is
            true; otherwise automatic insertion of spaces is disabled.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also autoInsertSpaces() and QDebugStateSaver.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDebug.Space">
            <summary>
            <para>Writes a space character to the debug stream and returns a
            reference to the stream.</para>
            <para>The stream remembers that automatic insertion of spaces is
            enabled for future writes.</para>
            <para>See also nospace() and maybeSpace().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDebug.Nospace">
            <summary>
            <para>Disables automatic insertion of spaces and returns a reference to
            the stream.</para>
            <para>See also space() and maybeSpace().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDebug.MaybeSpace">
            <summary>
            <para>Writes a space character to the debug stream, depending on the
            current setting for automatic insertion of spaces, and returns a reference
            to the stream.</para>
            <para>See also space() and nospace().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDebug.Noquote">
            <summary>
            <para>Disables automatic insertion of quotation characters around
            QChar, QString and QByteArray contents and returns a reference to the
            stream.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also quote() and maybeQuote().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDebugStateSaver">
            <summary>
            <para>Convenience class for custom QDebug operators</para>
            </summary>
            <remarks>
            <para>Saves the settings used by QDebug, and restores them upon
            destruction, then calls maybeSpace(), to separate arguments with a space if
            autoInsertSpaces() was true at the time of constructing the
            QDebugStateSaver.</para>
            <para>The automatic insertion of spaces between writes is one of the
            settings that QDebugStateSaver stores for the duration of the current
            block.</para>
            <para>The settings of the internal QTextStream are also saved and
            restored, so that using &lt;&lt; hex in a QDebug operator doesn't affect
            other QDebug operators.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDebugStateSaver.#ctor(QtCore.QDebug)">
            <summary>
            <para>Creates a QDebugStateSaver instance, which saves the settings
            currently used by dbg.</para>
            <para>See also QDebug::setAutoInsertSpaces() and
            QDebug::autoInsertSpaces().</para>
            </summary>
        </member>
        <member name="T:QtCore.QFileDevice">
            <summary>
            <para>The QFileDevice class provides an interface for reading from and
            writing to open files.</para>
            </summary>
            <remarks>
            <para>QFileDevice is the base class for I/O devices that can read and
            write text and binary files and resources. QFile offers the main
            functionality, QFileDevice serves as a base class for sharing functionality
            with other file devices such as QTemporaryFile, by providing all the
            operations that can be done on files that have been opened by QFile or
            QTemporaryFile.</para>
            <para></para>
            <para>See also QFile and QTemporaryFile.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFileDevice.UnsetError">
            <summary>
            <para>Sets the file's error to QFileDevice::NoError.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.Close">
            <summary>
            <para>Reimplemented from QIODevice::close().</para>
            <para>Calls QFileDevice::flush() and closes the file. Errors from flush
            are ignored.</para>
            <para>See also QIODevice::close().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.Seek(System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::seek().</para>
            <para>For random-access devices, this function sets the current
            position to pos, returning true on success, or false if an error occurred.
            For sequential devices, the default behavior is to do nothing and return
            false.</para>
            <para>Seeking beyond the end of a file: If the position is beyond the
            end of a file, then seek() will not immediately extend the file. If a write
            is performed at this position, then the file will be extended. The content
            of the file between the previous end of file and the newly written data is
            UNDEFINED and varies between platforms and file systems.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.Resize(System.Int64)">
            <summary>
            <para>Sets the file size (in bytes) sz. Returns true if the resize
            succeeds; false otherwise. If sz is larger than the file currently is, the
            new bytes will be set to 0; if sz is smaller, the file is simply
            truncated.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.SetPermissions(QtCore.QFileDevice.Permission)">
            <summary>
            <para>Sets the permissions for the file to the permissions specified.
            Returns true if successful, or false if the permissions cannot be
            modified.</para>
            <para>Warning: This function does not manipulate ACLs, which may limit
            its effectiveness.</para>
            <para>See also permissions().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.Map(System.Int64,System.Int64,QtCore.QFileDevice.MemoryMapFlags)">
            <summary>
            <para>Maps size bytes of the file into memory starting at offset. A
            file should be open for a map to succeed but the file does not need to stay
            open after the memory has been mapped. When the QFile is destroyed or a new
            file is opened with this object, any maps that have not been unmapped will
            automatically be unmapped.</para>
            <para>The mapping will have the same open mode as the file (read and/or
            write), except when using MapPrivateOption, in which case it is always
            possible to write to the mapped memory.</para>
            <para>Any mapping options can be passed through flags.</para>
            <para>Returns a pointer to the memory or 0 if there is an error.</para>
            <para>Note: On Windows CE 5.0 the file will be closed before mapping
            occurs.</para>
            <para>See also unmap().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.Unmap(System.Byte*)">
            <summary>
            <para>Unmaps the memory address.</para>
            <para>Returns true if the unmap succeeds; false otherwise.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.ReadData(System.Char*,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::readData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.WriteData(System.String,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.ReadLineData(System.Char*,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::readLineData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileDevice.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.IsSequential">
            <summary>
            <para>Reimplemented from QIODevice::isSequential().</para>
            <para>Returns true if the file can only be manipulated sequentially;
            otherwise returns false.</para>
            <para>Most files support random-access, but some special files may
            not.</para>
            <para>See also QIODevice::isSequential().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Pos">
            <summary>
            <para>Reimplemented from QIODevice::pos().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.AtEnd">
            <summary>
            <para>Reimplemented from QIODevice::atEnd().</para>
            <para>Returns true if the end of the file has been reached; otherwise
            returns false.</para>
            <para>For regular empty files on Unix (e.g. those in /proc), this
            function returns true, since the file system reports that the size of such
            a file is 0. Therefore, you should not depend on atEnd() when reading data
            from such a file, but rather call read() until no more data can be
            read.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Size">
            <summary>
            <para>Reimplemented from QIODevice::size().</para>
            <para>Returns the size of the file.</para>
            <para>For regular empty files on Unix (e.g. those in /proc), this
            function returns 0; the contents of such a file are generated on demand in
            response to you calling read().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Error">
            <summary>
            <para>Returns the file error status.</para>
            <para>The I/O device status returns an error code. For example, if
            open() returns false, or a read/write operation returns -1, this function
            can be called to find out the reason why the operation failed.</para>
            <para>See also unsetError().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Handle">
            <summary>
            <para>Returns the file handle of the file.</para>
            <para>This is a small positive integer, suitable for use with C library
            functions such as fdopen() and fcntl(). On systems that use file
            descriptors for sockets (i.e. Unix systems, but not Windows) the handle can
            be used with QSocketNotifier as well.</para>
            <para>If the file is not open, or there is an error, handle() returns
            -1.</para>
            <para>This function is not supported on Windows CE.</para>
            <para>See also QSocketNotifier.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.FileName">
            <summary>
            <para>Returns the name of the file. The default implementation in
            QFileDevice returns a null string.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Flush">
            <summary>
            <para>Flushes any buffered data to the file. Returns true if
            successful; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileDevice.Permissions">
            <summary>
            <para>Returns the complete OR-ed together combination of
            QFile::Permission for the file.</para>
            <para>See also setPermissions().</para>
            </summary>
        </member>
        <member name="T:QtCore.QFileDevice.FileError">
            <summary>
            <para>This enum describes the errors that may be returned by the
            error() function.</para>
            </summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.ReadError">
            <summary>An error occurred when reading from the file.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.WriteError">
            <summary>An error occurred when writing to the file.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.FatalError">
            <summary>A fatal error occurred.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.ResourceError">
            <summary>Out of resources (e.g., too many open files, out of memory, etc.)</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.OpenError">
            <summary>The file could not be opened.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.AbortError">
            <summary>The operation was aborted.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.TimeOutError">
            <summary>A timeout occurred.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.UnspecifiedError">
            <summary>An unspecified error occurred.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.RemoveError">
            <summary>The file could not be removed.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.RenameError">
            <summary>The file could not be renamed.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.PositionError">
            <summary>The position in the file could not be changed.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.ResizeError">
            <summary>The file could not be resized.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.PermissionsError">
            <summary>The file could not be accessed.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileError.CopyError">
            <summary>The file could not be copied.</summary>
        </member>
        <member name="T:QtCore.QFileDevice.Permission">
            <summary>
            <para>This enum is used by the permission() function to report the
            permissions and ownership of a file. The values may be OR-ed together to
            test multiple permissions and ownership values.</para>
            <para>Warning: Because of differences in the platforms supported by Qt,
            the semantics of ReadUser, WriteUser and ExeUser are platform-dependent: On
            Unix, the rights of the owner of the file are returned and on Windows the
            rights of the current user are returned. This behavior might change in a
            future Qt version.</para>
            <para>Note: On NTFS file systems, ownership and permissions checking is
            disabled by default for performance reasons. To enable it, include the
            following line:</para>
            <para>extern Q_CORE_EXPORT int qt_ntfs_permission_lookup;</para>
            <para>Permission checking is then turned on and off by incrementing and
            decrementing qt_ntfs_permission_lookup by 1.</para>
            <para>qt_ntfs_permission_lookup++; // turn checking on</para>
            <para>qt_ntfs_permission_lookup--; // turn it off again</para>
            <para>The Permissions type is a typedef for QFlags&lt;Permission&gt;.
            It stores an OR combination of Permission values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ReadOwner">
            <summary>The file is readable by the owner of the file.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.WriteOwner">
            <summary>The file is writable by the owner of the file.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ExeOwner">
            <summary>The file is executable by the owner of the file.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ReadUser">
            <summary>The file is readable by the user.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.WriteUser">
            <summary>The file is writable by the user.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ExeUser">
            <summary>The file is executable by the user.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ReadGroup">
            <summary>The file is readable by the group.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.WriteGroup">
            <summary>The file is writable by the group.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ExeGroup">
            <summary>The file is executable by the group.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ReadOther">
            <summary>The file is readable by anyone.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.WriteOther">
            <summary>The file is writable by anyone.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.Permission.ExeOther">
            <summary>The file is executable by anyone.</summary>
        </member>
        <member name="T:QtCore.QFileDevice.FileHandleFlag">
            <summary>
            <para>This enum is used when opening a file to specify additional
            options which only apply to files and not to a generic QIODevice.</para>
            <para>The FileHandleFlags type is a typedef for
            QFlags&lt;FileHandleFlag&gt;. It stores an OR combination of FileHandleFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileHandleFlag.AutoCloseHandle">
            <summary>The file handle passed into open() should be closed by close(), the default behavior is that close just flushes the file and the application is responsible for closing the file handle. When opening a file by name, this flag is ignored as Qt always owns the file handle and must close it.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.FileHandleFlag.DontCloseHandle">
            <summary>If not explicitly closed, the underlying file handle is left open when the QFile object is destroyed.</summary>
        </member>
        <member name="T:QtCore.QFileDevice.MemoryMapFlags">
            <summary>
            <para>This enum describes special options that may be used by the map()
            function.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtCore.QFileDevice.MemoryMapFlags.NoOptions">
            <summary>No options.</summary>
        </member>
        <member name="F:QtCore.QFileDevice.MemoryMapFlags.MapPrivateOption">
            <summary>The mapped memory will be private, so any modifications will not be visible to other processes and will not be written to disk. Any such modifications will be lost when the memory is unmapped. It is unspecified whether modifications made to the file made after the mapping is created will be visible through the mapped memory. This flag is not supported on Windows CE. This enum value was introduced in Qt 5.4.</summary>
        </member>
        <member name="T:QtCore.QFile">
            <summary>
            <para>The QFile class provides an interface for reading from and
            writing to files.</para>
            </summary>
            <remarks>
            <para>QFile is an I/O device for reading and writing text and binary
            files and resources. A QFile may be used by itself or, more conveniently,
            with a QTextStream or QDataStream.</para>
            <para>The file name is usually passed in the constructor, but it can be
            set at any time using setFileName(). QFile expects the file separator to be
            '/' regardless of operating system. The use of other separators (e.g., '\')
            is not supported.</para>
            <para>You can check for a file's existence using exists(), and remove a
            file using remove(). (More advanced file system related operations are
            provided by QFileInfo and QDir.)</para>
            <para>The file is opened with open(), closed with close(), and flushed
            with flush(). Data is usually read and written using QDataStream or
            QTextStream, but you can also call the QIODevice-inherited functions
            read(), readLine(), readAll(), write(). QFile also inherits getChar(),
            putChar(), and ungetChar(), which work one character at a time.</para>
            <para>The size of the file is returned by size(). You can get the
            current file position using pos(), or move to a new file position using
            seek(). If you've reached the end of the file, atEnd() returns true.</para>
            <para></para>
            <para>Reading Files Directly</para>
            <para>The following example reads a text file line by line:</para>
            <para>    QFile file(&quot;in.txt&quot;);</para>
            <para>    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))</para>
            <para>        return;</para>
            <para></para>
            <para>    while (!file.atEnd()) {</para>
            <para>        QByteArray line = file.readLine();</para>
            <para>        process_line(line);</para>
            <para>    }</para>
            <para>The QIODevice::Text flag passed to open() tells Qt to convert
            Windows-style line terminators (&quot;\r\n&quot;) into C++-style
            terminators (&quot;\n&quot;). By default, QFile assumes binary, i.e. it
            doesn't perform any conversion on the bytes stored in the file.</para>
            <para></para>
            <para>Using Streams to Read Files</para>
            <para>The next example uses QTextStream to read a text file line by
            line:</para>
            <para>    QFile file(&quot;in.txt&quot;);</para>
            <para>    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))</para>
            <para>        return;</para>
            <para></para>
            <para>    QTextStream in(&amp;file);</para>
            <para>    while (!in.atEnd()) {</para>
            <para>        QString line = in.readLine();</para>
            <para>        process_line(line);</para>
            <para>    }</para>
            <para>QTextStream takes care of converting the 8-bit data stored on
            disk into a 16-bit Unicode QString. By default, it assumes that the user
            system's local 8-bit encoding is used (e.g., UTF-8 on most unix based
            operating systems; see QTextCodec::codecForLocale() for details). This can
            be changed using QTextStream::setCodec().</para>
            <para>To write text, we can use operator&lt;&lt;(), which is overloaded
            to take a QTextStream on the left and various data types (including
            QString) on the right:</para>
            <para>    QFile file(&quot;out.txt&quot;);</para>
            <para>    if (!file.open(QIODevice::WriteOnly |
            QIODevice::Text))</para>
            <para>        return;</para>
            <para></para>
            <para>    QTextStream out(&amp;file);</para>
            <para>    out &lt;&lt; &quot;The magic number is: &quot; &lt;&lt; 49
            &lt;&lt; &quot;\n&quot;;</para>
            <para>QDataStream is similar, in that you can use operator&lt;&lt;() to
            write data and operator&gt;&gt;() to read it back. See the class
            documentation for details.</para>
            <para>When you use QFile, QFileInfo, and QDir to access the file system
            with Qt, you can use Unicode file names. On Unix, these file names are
            converted to an 8-bit encoding. If you want to use standard C++ APIs
            (&lt;cstdio&gt; or &lt;iostream&gt;) or platform-specific APIs to access
            files instead of QFile, you can use the encodeName() and decodeName()
            functions to convert between Unicode file names and 8-bit file
            names.</para>
            <para>On Unix, there are some special system files (e.g. in /proc) for
            which size() will always return 0, yet you may still be able to read more
            data from such a file; the data is generated in direct response to you
            calling read(). In this case, however, you cannot use atEnd() to determine
            if there is more data to read (since atEnd() will return true for a file
            that claims to have size 0). Instead, you should either call readAll(), or
            call read() or readLine() repeatedly until no more data can be read. The
            next example uses QTextStream to read /proc/modules line by line:</para>
            <para>    QFile file(&quot;/proc/modules&quot;);</para>
            <para>    if (!file.open(QIODevice::ReadOnly | QIODevice::Text))</para>
            <para>        return;</para>
            <para></para>
            <para>    QTextStream in(&amp;file);</para>
            <para>    QString line = in.readLine();</para>
            <para>    while (!line.isNull()) {</para>
            <para>        process_line(line);</para>
            <para>        line = in.readLine();</para>
            <para>    }</para>
            <para></para>
            <para>Signals</para>
            <para>Unlike other QIODevice implementations, such as QTcpSocket, QFile
            does not emit the aboutToClose(), bytesWritten(), or readyRead() signals.
            This implementation detail means that QFile is not suitable for reading and
            writing certain types of files, such as device files on Unix
            platforms.</para>
            <para></para>
            <para>Platform Specific Issues</para>
            <para>File permissions are handled differently on Unix-like systems and
            Windows. In a non writable directory on Unix-like systems, files cannot be
            created. This is not always the case on Windows, where, for instance, the
            'My Documents' directory usually is not writable, but it is still possible
            to create files in it.</para>
            <para>Qt's understanding of file permissions is limited, which affects
            especially the QFile::setPermissions() function. On Windows, Qt will set
            only the legacy read-only flag, and that only when none of the Write* flags
            are passed. Qt does not manipulate access control lists (ACLs), which makes
            this function mostly useless for NTFS volumes. It may still be of use for
            USB sticks that use VFAT file systems. POSIX ACLs are not manipulated,
            either.</para>
            <para></para>
            <para>See also QTextStream, QDataStream, QFileInfo, QDir, and The Qt
            Resource System.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFile.#ctor(System.String)">
            <summary>
            <para>Constructs a new file object to represent the file with the given
            name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new file object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a new file object with the given parent to represent
            the file with the specified name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.SetFileName(System.String)">
            <summary>
            <para>Sets the name of the file. The name can have no path, a relative
            path, or an absolute path.</para>
            <para>Do not call this function if the file has already been
            opened.</para>
            <para>If the file name has no path or a relative path, the path used
            will be the application's current directory path at the time of the open()
            call.</para>
            <para>Example:</para>
            <para>QFile file;</para>
            <para>QDir::setCurrent(&quot;/tmp&quot;);</para>
            <para>file.setFileName(&quot;readme.txt&quot;);</para>
            <para>QDir::setCurrent(&quot;/home&quot;);</para>
            <para>file.open(QIODevice::ReadOnly);      // opens
            &quot;/home/readme.txt&quot; under Unix</para>
            <para>Note that the directory separator &quot;/&quot; works for all
            operating systems supported by Qt.</para>
            <para>See also fileName(), QFileInfo, and QDir.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Exists">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the file specified by fileName() exists;
            otherwise returns false.</para>
            <para>See also fileName() and setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.ReadLink">
            <summary>
            <para>Use symLinkTarget() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.SymLinkTarget">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the absolute path of the file or directory a symlink (or
            shortcut on Windows) points to, or a an empty string if the object isn't a
            symbolic link.</para>
            <para>This name may not represent an existing file; it is only a
            string. QFile::exists() returns true if the symlink points to an existing
            file.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also fileName() and setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Remove">
            <summary>
            <para>Removes the file specified by fileName(). Returns true if
            successful; otherwise returns false.</para>
            <para>The file is closed before it is removed.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Rename(System.String)">
            <summary>
            <para>Renames the file currently specified by fileName() to newName.
            Returns true if successful; otherwise returns false.</para>
            <para>If a file with the name newName already exists, rename() returns
            false (i.e., QFile will not overwrite it).</para>
            <para>The file is closed before it is renamed.</para>
            <para>If the rename operation fails, Qt will attempt to copy this
            file's contents to newName, and then remove this file, keeping only
            newName. If that copy operation fails or this file can't be removed, the
            destination file newName is removed to restore the old state.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Link(System.String)">
            <summary>
            <para>Creates a link named linkName that points to the file currently
            specified by fileName(). What a link is depends on the underlying
            filesystem (be it a shortcut on Windows or a symbolic link on Unix).
            Returns true if successful; otherwise returns false.</para>
            <para>This function will not overwrite an already existing entity in
            the file system; in this case, link() will return false and set error() to
            return RenameError.</para>
            <para>Note: To create a valid link on Windows, linkName must have a
            .lnk file extension.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Copy(System.String)">
            <summary>
            <para>Copies the file currently specified by fileName() to a file
            called newName. Returns true if successful; otherwise returns false.</para>
            <para>Note that if a file with the name newName already exists, copy()
            returns false (i.e. QFile will not overwrite it).</para>
            <para>The source file is closed before it is copied.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Reimplemented from QIODevice::open().</para>
            <para>Opens the file using OpenMode mode, returning true if successful;
            otherwise false.</para>
            <para>The mode must be QIODevice::ReadOnly, QIODevice::WriteOnly, or
            QIODevice::ReadWrite. It may also have additional flags, such as
            QIODevice::Text and QIODevice::Unbuffered.</para>
            <para>Note: In WriteOnly or ReadWrite mode, if the relevant file does
            not already exist, this function will try to create a new file before
            opening it.</para>
            <para>See also QIODevice::OpenMode and setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Open(System.IntPtr,QtCore.QIODevice.OpenModeFlag,QtCore.QFileDevice.FileHandleFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the existing file handle fh in the given mode. handleFlags
            may be used to specify additional options. Returns true if successful;
            otherwise returns false.</para>
            <para>Example:</para>
            <para>#include &lt;stdio.h&gt;</para>
            <para></para>
            <para>void printError(const char* msg)</para>
            <para>{</para>
            <para>    QFile file;</para>
            <para>    file.open(stderr, QIODevice::WriteOnly);</para>
            <para>    file.write(msg, qstrlen(msg));        // write to
            stderr</para>
            <para>    file.close();</para>
            <para>}</para>
            <para>When a QFile is opened using this function, behaviour of close()
            is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified,
            and this function succeeds, then calling close() closes the adopted handle.
            Otherwise, close() does not actually close the file, but only flushes
            it.</para>
            <para>Warning:</para>
            <para></para>
            <para>If fh does not refer to a regular file, e.g., it is stdin,
            stdout, or stderr, you may not be able to seek(). size() returns 0 in those
            cases. See QIODevice::isSequential() for more information.</para>
            <para>Since this function opens the file without specifying the file
            name, you cannot use this QFile with a QFileInfo.</para>
            <para></para>
            <para>Note: For Windows CE you may not be able to call resize().</para>
            <para>Note for the Windows Platform</para>
            <para>fh must be opened in binary mode (i.e., the mode string must
            contain 'b', as in &quot;rb&quot; or &quot;wb&quot;) when accessing files
            and other random-access devices. Qt will translate the end-of-line
            characters if you pass QIODevice::Text to mode. Sequential devices, such as
            stdin and stdout, are unaffected by this limitation.</para>
            <para>You need to enable support for console applications in order to
            use the stdin, stdout and stderr streams at the console. To do this, add
            the following declaration to your application's project file:</para>
            <para>CONFIG += console</para>
            <para>See also close().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Open(System.Int32,QtCore.QIODevice.OpenModeFlag,QtCore.QFileDevice.FileHandleFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the existing file descriptor fd in the given mode.
            handleFlags may be used to specify additional options. Returns true if
            successful; otherwise returns false.</para>
            <para>When a QFile is opened using this function, behaviour of close()
            is controlled by the AutoCloseHandle flag. If AutoCloseHandle is specified,
            and this function succeeds, then calling close() closes the adopted handle.
            Otherwise, close() does not actually close the file, but only flushes
            it.</para>
            <para>The QFile that is opened using this function is automatically set
            to be in raw mode; this means that the file input/output functions are
            slow. If you run into performance issues, you should try to use one of the
            other open functions.</para>
            <para>Warning: If fd is not a regular file, e.g, it is 0 (stdin), 1
            (stdout), or 2 (stderr), you may not be able to seek(). In those cases,
            size() returns 0. See QIODevice::isSequential() for more
            information.</para>
            <para>Warning: For Windows CE you may not be able to call seek(), and
            size() returns 0.</para>
            <para>Warning: Since this function opens the file without specifying
            the file name, you cannot use this QFile with a QFileInfo.</para>
            <para>See also close().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Resize(System.Int64)">
            <summary>
            <para>Reimplemented from QFileDevice::resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.SetPermissions(QtCore.QFileDevice.Permission)">
            <summary>
            <para>Reimplemented from QFileDevice::setPermissions().</para>
            <para>Sets the permissions for the file to the permissions specified.
            Returns true if successful, or false if the permissions cannot be
            modified.</para>
            <para>Warning: This function does not manipulate ACLs, which may limit
            its effectiveness.</para>
            <para>See also permissions() and setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.EncodeName(System.String)">
            <summary>
            <para>Converts fileName to the local 8-bit encoding determined by the
            user's locale. This is sufficient for file names that the user chooses.
            File names hard-coded into the application should only use 7-bit ASCII
            filename characters.</para>
            <para>See also decodeName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.DecodeName(QtCore.QByteArray)">
            <summary>
            <para>This does the reverse of QFile::encodeName() using
            localFileName.</para>
            <para>See also encodeName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.DecodeName(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the Unicode version of the given localFileName. See
            encodeName() for details.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Exists(System.String)">
            <summary>
            <para>Returns true if the file specified by fileName exists; otherwise
            returns false.</para>
            <para>Note: If fileName is a symlink that points to a non-existing
            file, false is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.ReadLink(System.String)">
            <summary>
            <para>Use symLinkTarget() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.SymLinkTarget(System.String)">
            <summary>
            <para>Returns the absolute path of the file or directory referred to by
            the symlink (or shortcut on Windows) specified by fileName, or returns an
            empty string if the fileName does not correspond to a symbolic link.</para>
            <para>This name may not represent an existing file; it is only a
            string. QFile::exists() returns true if the symlink points to an existing
            file.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Remove(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Removes the file specified by the fileName given.</para>
            <para>Returns true if successful; otherwise returns false.</para>
            <para>See also remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Rename(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Renames the file oldName to newName. Returns true if successful;
            otherwise returns false.</para>
            <para>If a file with the name newName already exists, rename() returns
            false (i.e., QFile will not overwrite it).</para>
            <para>See also rename().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Link(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a link named linkName that points to the file fileName.
            What a link is depends on the underlying filesystem (be it a shortcut on
            Windows or a symbolic link on Unix). Returns true if successful; otherwise
            returns false.</para>
            <para>See also link().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Copy(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Copies the file fileName to newName. Returns true if successful;
            otherwise returns false.</para>
            <para>If a file with the name newName already exists, copy() returns
            false (i.e., QFile will not overwrite it).</para>
            <para>See also rename().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.Resize(System.String,System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets fileName to size (in bytes) sz. Returns true if the file if
            the resize succeeds; false otherwise. If sz is larger than fileName
            currently is the new bytes will be set to 0, if sz is smaller the file is
            simply truncated.</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.permissions(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the complete OR-ed together combination of
            QFile::Permission for fileName.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFile.SetPermissions(System.String,QtCore.QFileDevice.Permission)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the permissions for fileName file to permissions.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFile.FileName">
            <summary>
            <para>Reimplemented from QFileDevice::fileName().</para>
            <para>Returns the name set by setFileName() or to the QFile
            constructors.</para>
            <para>See also setFileName() and QFileInfo::fileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFile.Size">
            <summary>
            <para>Reimplemented from QIODevice::size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFile.Permissions">
            <summary>
            <para>Reimplemented from QFileDevice::permissions().</para>
            <para>See also setPermissions().</para>
            </summary>
        </member>
        <member name="T:QtCore.QFileInfo">
            <summary>
            <para>The QFileInfo class provides system-independent file
            information.</para>
            </summary>
            <remarks>
            <para>QFileInfo provides information about a file's name and position
            (path) in the file system, its access rights and whether it is a directory
            or symbolic link, etc. The file's size and last modified/read times are
            also available. QFileInfo can also be used to obtain information about a Qt
            resource.</para>
            <para>A QFileInfo can point to a file with either a relative or an
            absolute file path. Absolute file paths begin with the directory separator
            &quot;/&quot; (or with a drive specification on Windows). Relative file
            names begin with a directory name or a file name and specify a path
            relative to the current working directory. An example of an absolute path
            is the string &quot;/tmp/quartz&quot;. A relative path might look like
            &quot;src/fatlib&quot;. You can use the function isRelative() to check
            whether a QFileInfo is using a relative or an absolute file path. You can
            call the function makeAbsolute() to convert a relative QFileInfo's path to
            an absolute path.</para>
            <para>The file that the QFileInfo works on is set in the constructor or
            later with setFile(). Use exists() to see if the file exists and size() to
            get its size.</para>
            <para>The file's type is obtained with isFile(), isDir() and
            isSymLink(). The symLinkTarget() function provides the name of the file the
            symlink points to.</para>
            <para>On Unix (including OS X and iOS), the symlink has the same size()
            has the file it points to, because Unix handles symlinks transparently;
            similarly, opening a symlink using QFile effectively opens the link's
            target. For example:</para>
            <para>#ifdef Q_OS_UNIX</para>
            <para></para>
            <para>QFileInfo info1(&quot;/home/bob/bin/untabify&quot;);</para>
            <para>info1.isSymLink();          // returns true</para>
            <para>info1.absoluteFilePath();   // returns
            &quot;/home/bob/bin/untabify&quot;</para>
            <para>info1.size();               // returns 56201</para>
            <para>info1.symLinkTarget();      // returns
            &quot;/opt/pretty++/bin/untabify&quot;</para>
            <para></para>
            <para>QFileInfo info2(info1.symLinkTarget());</para>
            <para>info2.isSymLink();          // returns false</para>
            <para>info2.absoluteFilePath();   // returns
            &quot;/opt/pretty++/bin/untabify&quot;</para>
            <para>info2.size();               // returns 56201</para>
            <para></para>
            <para>#endif</para>
            <para>On Windows, symlinks (shortcuts) are .lnk files. The reported
            size() is that of the symlink (not the link's target), and opening a
            symlink using QFile opens the .lnk file. For example:</para>
            <para>#ifdef Q_OS_WIN</para>
            <para></para>
            <para>QFileInfo info1(&quot;C:\\Documents and
            Settings\\Bob\\untabify.lnk&quot;);</para>
            <para>info1.isSymLink();          // returns true</para>
            <para>info1.absoluteFilePath();   // returns &quot;C:/Documents and
            Settings/Bob/untabify.lnk&quot;</para>
            <para>info1.size();               // returns 743</para>
            <para>info1.symLinkTarget();      // returns
            &quot;C:/Pretty++/untabify&quot;</para>
            <para></para>
            <para>QFileInfo info2(info1.symLinkTarget());</para>
            <para>info2.isSymLink();          // returns false</para>
            <para>info2.absoluteFilePath();   // returns
            &quot;C:/Pretty++/untabify&quot;</para>
            <para>info2.size();               // returns 63942</para>
            <para></para>
            <para>#endif</para>
            <para>Elements of the file's name can be extracted with path() and
            fileName(). The fileName()'s parts can be extracted with baseName(),
            suffix() or completeSuffix(). QFileInfo objects to directories created by
            Qt classes will not have a trailing file separator. If you wish to use
            trailing separators in your own file info objects, just append one to the
            file name given to the constructors or setFile().</para>
            <para>The file's dates are returned by created(), lastModified() and
            lastRead(). Information about the file's access permissions is obtained
            with isReadable(), isWritable() and isExecutable(). The file's ownership is
            available from owner(), ownerId(), group() and groupId(). You can examine a
            file's permissions and ownership in a single statement using the
            permission() function.</para>
            <para>Note: On NTFS file systems, ownership and permissions checking is
            disabled by default for performance reasons. To enable it, include the
            following line:</para>
            <para>extern Q_CORE_EXPORT int qt_ntfs_permission_lookup;</para>
            <para>Permission checking is then turned on and off by incrementing and
            decrementing qt_ntfs_permission_lookup by 1.</para>
            <para>qt_ntfs_permission_lookup++; // turn checking on</para>
            <para>qt_ntfs_permission_lookup--; // turn it off again</para>
            <para></para>
            <para>Performance Issues</para>
            <para>Some of QFileInfo's functions query the file system, but for
            performance reasons, some functions only operate on the file name itself.
            For example: To return the absolute path of a relative file name,
            absolutePath() has to query the file system. The path() function, however,
            can work on the file name directly, and so it is faster.</para>
            <para>Note: To speed up performance, QFileInfo caches information about
            the file.</para>
            <para>To speed up performance, QFileInfo caches information about the
            file. Because files can be changed by other users or programs, or even by
            other parts of the same program, there is a function that refreshes the
            file information: refresh(). If you want to switch off a QFileInfo's
            caching and force it to access the file system every time you request
            information from it call setCaching(false).</para>
            <para></para>
            <para>See also QDir and QFile.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFileInfo.#ctor">
            <summary>
            <para>Constructs an empty QFileInfo object.</para>
            <para>Note that an empty QFileInfo object contain no file
            reference.</para>
            <para>See also setFile().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.#ctor(System.String)">
            <summary>
            <para>Constructs a new QFileInfo that gives information about the given
            file. The file can also include an absolute or relative path.</para>
            <para>See also setFile(), isRelative(), QDir::setCurrent(), and
            QDir::isRelativePath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.#ctor(QtCore.QFile)">
            <summary>
            <para>Constructs a new QFileInfo that gives information about file
            file.</para>
            <para>If the file has a relative path, the QFileInfo will also have a
            relative path.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.#ctor(QtCore.QDir,System.String)">
            <summary>
            <para>Constructs a new QFileInfo that gives information about the given
            file in the directory dir.</para>
            <para>If dir has a relative path, the QFileInfo will also have a
            relative path.</para>
            <para>If file is an absolute path, then the directory specified by dir
            will be disregarded.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.#ctor(QtCore.QFileInfo)">
            <summary>
            <para>Constructs a new QFileInfo that is a copy of the given
            fileinfo.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.Swap(QtCore.QFileInfo)">
            <summary>
            <para>Swaps this file info with other. This function is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.op_Equality(QtCore.QFileInfo,QtCore.QFileInfo)">
            <summary>
            <para>Returns true if this QFileInfo object refers to a file in the
            same location as fileinfo; otherwise returns false.</para>
            <para>Note that the result of comparing two empty QFileInfo objects,
            containing no file references (file paths that do not exist or are empty),
            is undefined.</para>
            <para>Warning: This will not compare two different symbolic links
            pointing to the same file.</para>
            <para>Warning: Long and short file names that refer to the same file on
            Windows are treated as if they referred to different files.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.op_Inequality(QtCore.QFileInfo,QtCore.QFileInfo)">
            <summary>
            <para>Returns true if this QFileInfo object refers to a different file
            than the one specified by fileinfo; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.SetFile(System.String)">
            <summary>
            <para>Sets the file that the QFileInfo provides information about to
            file.</para>
            <para>The file can also include an absolute or relative file path.
            Absolute paths begin with the directory separator (e.g. &quot;/&quot; under
            Unix) or a drive specification (under Windows). Relative file names begin
            with a directory name or a file name and specify a path relative to the
            current directory.</para>
            <para>Example:</para>
            <para>QString absolute = &quot;/local/bin&quot;;</para>
            <para>QString relative = &quot;local/bin&quot;;</para>
            <para>QFileInfo absFile(absolute);</para>
            <para>QFileInfo relFile(relative);</para>
            <para></para>
            <para>QDir::setCurrent(QDir::rootPath());</para>
            <para>// absFile and relFile now point to the same file</para>
            <para></para>
            <para>QDir::setCurrent(&quot;/tmp&quot;);</para>
            <para>// absFile now points to &quot;/local/bin&quot;,</para>
            <para>// while relFile points to &quot;/tmp/local/bin&quot;</para>
            <para>See also isFile(), isRelative(), QDir::setCurrent(), and
            QDir::isRelativePath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.SetFile(QtCore.QFile)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the file that the QFileInfo provides information about to
            file.</para>
            <para>If file includes a relative path, the QFileInfo will also have a
            relative path.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.SetFile(QtCore.QDir,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the file that the QFileInfo provides information about to
            file in directory dir.</para>
            <para>If file includes a relative path, the QFileInfo will also have a
            relative path.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.Exists">
            <summary>
            <para>Returns true if the file exists; otherwise returns false.</para>
            <para>Note: If the file is a symlink that points to a non-existing
            file, false is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.Refresh">
            <summary>
            <para>Refreshes the information about the file, i.e. reads in
            information from the file system the next time a cached property is
            fetched.</para>
            <para>Note: On Windows CE, there might be a delay for the file system
            driver to detect changes on the file.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.CompleteBaseName">
            <summary>
            <para>Returns the complete base name of the file without the
            path.</para>
            <para>The complete base name consists of all characters in the file up
            to (but not including) the last '.' character.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>QString base = fi.completeBaseName();  // base =
            &quot;archive.tar&quot;</para>
            <para>See also fileName(), suffix(), completeSuffix(), and
            baseName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.CompleteSuffix">
            <summary>
            <para>Returns the complete suffix of the file.</para>
            <para>The complete suffix consists of all characters in the file after
            (but not including) the first '.'.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>QString ext = fi.completeSuffix();  // ext =
            &quot;tar.gz&quot;</para>
            <para>See also fileName(), suffix(), baseName(), and
            completeBaseName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.MakeAbsolute">
            <summary>
            <para>Converts the file's path to an absolute path if it is not already
            in that form. Returns true to indicate that the path was converted;
            otherwise returns false to indicate that the path was already
            absolute.</para>
            <para>See also filePath() and isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.ReadLink">
            <summary>
            <para>Use symLinkTarget() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.Permission(QtCore.QFileDevice.Permission)">
            <summary>
            <para>Tests for file permissions. The permissions argument can be
            several flags of type QFile::Permissions OR-ed together to check for
            permission combinations.</para>
            <para>On systems where files do not have permissions this function
            always returns true.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>if (fi.permission(QFile::WriteUser | QFile::ReadGroup))</para>
            <para>    qWarning(&quot;I can change the file; my group can read the
            file&quot;);</para>
            <para>if (fi.permission(QFile::WriteGroup | QFile::WriteOther))</para>
            <para>    qWarning(&quot;The group or others can change the
            file&quot;);</para>
            <para>See also isReadable(), isWritable(), and isExecutable().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileInfo.Exists(System.String)">
            <summary>
            <para>Returns true if the file exists; otherwise returns false.</para>
            <para>Note: If file is a symlink that points to a non-existing file,
            false is returned.</para>
            <para>Note: Using this function is faster than using
            QFileInfo(file).exists() for file system access.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Caching">
            <summary>
            <para>Returns true if caching is enabled; otherwise returns
            false.</para>
            <para>See also setCaching() and refresh().</para>
            <para></para>
            <para>If enable is true, enables caching of file information. If enable
            is false caching is disabled.</para>
            <para>When caching is enabled, QFileInfo reads the file information
            from the file system the first time it's needed, but generally not
            later.</para>
            <para>Caching is enabled by default.</para>
            <para>See also refresh() and caching().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.FilePath">
            <summary>
            <para>Returns the file name, including the path (which may be absolute
            or relative).</para>
            <para>See also absoluteFilePath(), canonicalFilePath(), and
            isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.AbsoluteFilePath">
            <summary>
            <para>Returns an absolute path including the file name.</para>
            <para>The absolute path name consists of the full path and the file
            name. On Unix this will always begin with the root, '/', directory. On
            Windows this will always begin 'D:/' where D is a drive letter, except for
            network shares that are not mapped to a drive letter, in which case the
            path will begin '//sharename/'. QFileInfo will uppercase drive letters.
            Note that QDir does not do this. The code snippet below shows this.</para>
            <para>    QFileInfo fi(&quot;c:/temp/foo&quot;); =&gt;
            fi.absoluteFilePath() =&gt; &quot;C:/temp/foo&quot;</para>
            <para>This function returns the same as filePath(), unless isRelative()
            is true. In contrast to canonicalFilePath(), symbolic links or redundant
            &quot;.&quot; or &quot;..&quot; elements are not necessarily
            removed.</para>
            <para>Warning: If filePath() is empty the behavior of this function is
            undefined.</para>
            <para>See also filePath(), canonicalFilePath(), and
            isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.CanonicalFilePath">
            <summary>
            <para>Returns the canonical path including the file name, i.e. an
            absolute path without symbolic links or redundant &quot;.&quot; or
            &quot;..&quot; elements.</para>
            <para>If the file does not exist, canonicalFilePath() returns an empty
            string.</para>
            <para>See also filePath(), absoluteFilePath(), and dir().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.FileName">
            <summary>
            <para>Returns the name of the file, excluding the path.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>QString name = fi.fileName();                // name =
            &quot;archive.tar.gz&quot;</para>
            <para>Note that, if this QFileInfo object is given a path ending in a
            slash, the name of the file is considered empty.</para>
            <para>See also isRelative(), filePath(), baseName(), and
            suffix().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.BaseName">
            <summary>
            <para>Returns the base name of the file without the path.</para>
            <para>The base name consists of all characters in the file up to (but
            not including) the first '.' character.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>QString base = fi.baseName();  // base =
            &quot;archive&quot;</para>
            <para>The base name of a file is computed equally on all platforms,
            independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix
            has an empty base name, and the suffix is &quot;bashrc&quot;).</para>
            <para>See also fileName(), suffix(), completeSuffix(), and
            completeBaseName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Suffix">
            <summary>
            <para>Returns the suffix of the file.</para>
            <para>The suffix consists of all characters in the file after (but not
            including) the last '.'.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/tmp/archive.tar.gz&quot;);</para>
            <para>QString ext = fi.suffix();  // ext = &quot;gz&quot;</para>
            <para>The suffix of a file is computed equally on all platforms,
            independent of file naming conventions (e.g., &quot;.bashrc&quot; on Unix
            has an empty base name, and the suffix is &quot;bashrc&quot;).</para>
            <para>See also fileName(), completeSuffix(), baseName(), and
            completeBaseName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.BundleName">
            <summary>
            <para>Returns the name of the bundle.</para>
            <para>On OS X and iOS this returns the proper localized name for a
            bundle if the path isBundle(). On all other platforms an empty QString is
            returned.</para>
            <para>Example:</para>
            <para>QFileInfo fi(&quot;/Applications/Safari.app&quot;);</para>
            <para>QString bundle = fi.bundleName();                // name =
            &quot;Safari&quot;</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isBundle(), filePath(), baseName(), and suffix().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Path">
            <summary>
            <para>Returns the file's path. This doesn't include the file
            name.</para>
            <para>Note that, if this QFileInfo object is given a path ending in a
            slash, the name of the file is considered empty and this function will
            return the entire path.</para>
            <para>See also filePath(), absolutePath(), canonicalPath(), dir(),
            fileName(), and isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.AbsolutePath">
            <summary>
            <para>Returns a file's path absolute path. This doesn't include the
            file name.</para>
            <para>On Unix the absolute path will always begin with the root, '/',
            directory. On Windows this will always begin 'D:/' where D is a drive
            letter, except for network shares that are not mapped to a drive letter, in
            which case the path will begin '//sharename/'.</para>
            <para>In contrast to canonicalPath() symbolic links or redundant
            &quot;.&quot; or &quot;..&quot; elements are not necessarily
            removed.</para>
            <para>Warning: If filePath() is empty the behavior of this function is
            undefined.</para>
            <para>See also absoluteFilePath(), path(), canonicalPath(), fileName(),
            and isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.CanonicalPath">
            <summary>
            <para>Returns the file's path canonical path (excluding the file name),
            i.e. an absolute path without symbolic links or redundant &quot;.&quot; or
            &quot;..&quot; elements.</para>
            <para>If the file does not exist, canonicalPath() returns an empty
            string.</para>
            <para>See also path() and absolutePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Dir">
            <summary>
            <para>Returns the path of the object's parent directory as a QDir
            object.</para>
            <para>Note: The QDir returned always corresponds to the object's parent
            directory, even if the QFileInfo represents a directory.</para>
            <para>For each of the following, dir() returns a QDir for
            &quot;~/examples/191697&quot;.</para>
            <para>    QFileInfo fileInfo1(&quot;~/examples/191697/.&quot;);</para>
            <para>    QFileInfo fileInfo2(&quot;~/examples/191697/..&quot;);</para>
            <para>    QFileInfo
            fileInfo3(&quot;~/examples/191697/main.cpp&quot;);</para>
            <para>For each of the following, dir() returns a QDir for
            &quot;.&quot;.</para>
            <para>    QFileInfo fileInfo4(&quot;.&quot;);</para>
            <para>    QFileInfo fileInfo5(&quot;..&quot;);</para>
            <para>    QFileInfo fileInfo6(&quot;main.cpp&quot;);</para>
            <para>See also absolutePath(), filePath(), fileName(), isRelative(),
            and absoluteDir().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.AbsoluteDir">
            <summary>
            <para>Returns the file's absolute path as a QDir object.</para>
            <para>See also dir(), filePath(), fileName(), and isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsReadable">
            <summary>
            <para>Returns true if the user can read the file; otherwise returns
            false.</para>
            <para>See also isWritable(), isExecutable(), and permission().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsWritable">
            <summary>
            <para>Returns true if the user can write to the file; otherwise returns
            false.</para>
            <para>See also isReadable(), isExecutable(), and permission().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsExecutable">
            <summary>
            <para>Returns true if the file is executable; otherwise returns
            false.</para>
            <para>See also isReadable(), isWritable(), and permission().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsHidden">
            <summary>
            <para>Returns true if this is a `hidden' file; otherwise returns
            false.</para>
            <para>Note: This function returns true for the special entries
            &quot;.&quot; and &quot;..&quot; on Unix, even though QDir::entryList
            threats them as shown.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsNativePath">
            <summary>
            <para>Returns true if the file path can be used directly with native
            APIs. Returns false if the file is otherwise supported by a virtual file
            system inside Qt, such as the Qt Resource System.</para>
            <para>Note: Native paths may still require conversion of path
            separators and character encoding, depending on platform and input
            requirements of the native API.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QDir::toNativeSeparators(), QFile::encodeName(),
            filePath(), absoluteFilePath(), and canonicalFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsRelative">
            <summary>
            <para>Returns true if the file path name is relative, otherwise returns
            false if the path is absolute (e.g. under Unix a path is absolute if it
            begins with a &quot;/&quot;).</para>
            <para>See also isAbsolute().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsAbsolute">
            <summary>
            <para>Returns true if the file path name is absolute, otherwise returns
            false if the path is relative.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsFile">
            <summary>
            <para>Returns true if this object points to a file or to a symbolic
            link to a file. Returns false if the object points to something which isn't
            a file, such as a directory.</para>
            <para>See also isDir(), isSymLink(), and isBundle().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsDir">
            <summary>
            <para>Returns true if this object points to a directory or to a
            symbolic link to a directory; otherwise returns false.</para>
            <para>See also isFile(), isSymLink(), and isBundle().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsSymLink">
            <summary>
            <para>Returns true if this object points to a symbolic link (or to a
            shortcut on Windows); otherwise returns false.</para>
            <para>On Unix (including OS X and iOS), opening a symlink effectively
            opens the link's target. On Windows, it opens the .lnk file itself.</para>
            <para>Example:</para>
            <para>QFileInfo info(fileName);</para>
            <para>if (info.isSymLink())</para>
            <para>    fileName = info.symLinkTarget();</para>
            <para>Note: If the symlink points to a non existing file, exists()
            returns false.</para>
            <para>See also isFile(), isDir(), and symLinkTarget().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsRoot">
            <summary>
            <para>Returns true if the object points to a directory or to a symbolic
            link to a directory, and that directory is the root directory; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.IsBundle">
            <summary>
            <para>Returns true if this object points to a bundle or to a symbolic
            link to a bundle on OS X and iOS; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also isDir(), isSymLink(), and isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.SymLinkTarget">
            <summary>
            <para>Returns the absolute path to the file or directory a symlink (or
            shortcut on Windows) points to, or a an empty string if the object isn't a
            symbolic link.</para>
            <para>This name may not represent an existing file; it is only a
            string. QFileInfo::exists() returns true if the symlink points to an
            existing file.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also exists(), isSymLink(), isDir(), and isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Owner">
            <summary>
            <para>Returns the owner of the file. On systems where files do not have
            owners, or if an error occurs, an empty string is returned.</para>
            <para>This function can be time consuming under Unix (in the order of
            milliseconds).</para>
            <para>See also ownerId(), group(), and groupId().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.OwnerId">
            <summary>
            <para>Returns the id of the owner of the file.</para>
            <para>On Windows and on systems where files do not have owners this
            function returns ((uint) -2).</para>
            <para>See also owner(), group(), and groupId().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Group">
            <summary>
            <para>Returns the group of the file. On Windows, on systems where files
            do not have groups, or if an error occurs, an empty string is
            returned.</para>
            <para>This function can be time consuming under Unix (in the order of
            milliseconds).</para>
            <para>See also groupId(), owner(), and ownerId().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.GroupId">
            <summary>
            <para>Returns the id of the group the file belongs to.</para>
            <para>On Windows and on systems where files do not have groups this
            function always returns (uint) -2.</para>
            <para>See also group(), owner(), and ownerId().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Permissions">
            <summary>
            <para>Returns the complete OR-ed together combination of
            QFile::Permissions for the file.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Size">
            <summary>
            <para>Returns the file size in bytes. If the file does not exist or
            cannot be fetched, 0 is returned.</para>
            <para>See also exists().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.Created">
            <summary>
            <para>Returns the date and time when the file was created.</para>
            <para>On most Unix systems, this function returns the time of the last
            status change. A status change occurs when the file is created, but it also
            occurs whenever the user writes or sets inode information (for example,
            changing the file permissions).</para>
            <para>If neither creation time nor &quot;last status change&quot; time
            are not available, returns the same as lastModified().</para>
            <para>See also lastModified() and lastRead().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.LastModified">
            <summary>
            <para>Returns the date and time when the file was last modified.</para>
            <para>See also created() and lastRead().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileInfo.LastRead">
            <summary>
            <para>Returns the date and time when the file was last read
            (accessed).</para>
            <para>On platforms where this information is not available, returns the
            same as lastModified().</para>
            <para>See also created() and lastModified().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDir">
            <summary>
            <para>The QDir class provides access to directory structures and their
            contents.</para>
            </summary>
            <remarks>
            <para>A QDir is used to manipulate path names, access information
            regarding paths and files, and manipulate the underlying file system. It
            can also be used to access Qt's resource system.</para>
            <para>Qt uses &quot;/&quot; as a universal directory separator in the
            same way that &quot;/&quot; is used as a path separator in URLs. If you
            always use &quot;/&quot; as a directory separator, Qt will translate your
            paths to conform to the underlying operating system.</para>
            <para>A QDir can point to a file using either a relative or an absolute
            path. Absolute paths begin with the directory separator (optionally
            preceded by a drive specification under Windows). Relative file names begin
            with a directory name or a file name and specify a path relative to the
            current directory.</para>
            <para>Examples of absolute paths:</para>
            <para>QDir(&quot;/home/user/Documents&quot;)</para>
            <para>QDir(&quot;C:/Documents and Settings&quot;)</para>
            <para>On Windows, the second example above will be translated to
            C:\Documents and Settings when used to access files.</para>
            <para>Examples of relative paths:</para>
            <para>QDir(&quot;images/landscape.png&quot;)</para>
            <para>You can use the isRelative() or isAbsolute() functions to check
            if a QDir is using a relative or an absolute file path. Call makeAbsolute()
            to convert a relative QDir to an absolute one.</para>
            <para></para>
            <para>Navigation and Directory Operations</para>
            <para>A directory's path can be obtained with the path() function, and
            a new path set with the setPath() function. The absolute path to a
            directory is found by calling absolutePath().</para>
            <para>The name of a directory is found using the dirName() function.
            This typically returns the last element in the absolute path that specifies
            the location of the directory. However, it can also return &quot;.&quot; if
            the QDir represents the current directory.</para>
            <para>QDir(&quot;Documents/Letters/Applications&quot;).dirName() //
            &quot;Applications&quot;</para>
            <para>QDir().dirName()                                 //
            &quot;.&quot;</para>
            <para>The path for a directory can also be changed with the cd() and
            cdUp() functions, both of which operate like familiar shell commands. When
            cd() is called with the name of an existing directory, the QDir object
            changes directory so that it represents that directory instead. The cdUp()
            function changes the directory of the QDir object so that it refers to its
            parent directory; i.e. cd(&quot;..&quot;) is equivalent to cdUp().</para>
            <para>Directories can be created with mkdir(), renamed with rename(),
            and removed with rmdir().</para>
            <para>You can test for the presence of a directory with a given name by
            using exists(), and the properties of a directory can be tested with
            isReadable(), isAbsolute(), isRelative(), and isRoot().</para>
            <para>The refresh() function re-reads the directory's data from
            disk.</para>
            <para></para>
            <para>Files and Directory Contents</para>
            <para>Directories contain a number of entries, representing files,
            directories, and symbolic links. The number of entries in a directory is
            returned by count(). A string list of the names of all the entries in a
            directory can be obtained with entryList(). If you need information about
            each entry, use entryInfoList() to obtain a list of QFileInfo
            objects.</para>
            <para>Paths to files and directories within a directory can be
            constructed using filePath() and absoluteFilePath(). The filePath()
            function returns a path to the specified file or directory relative to the
            path of the QDir object; absoluteFilePath() returns an absolute path to the
            specified file or directory. Neither of these functions checks for the
            existence of files or directory; they only construct paths.</para>
            <para>QDir directory(&quot;Documents/Letters&quot;);</para>
            <para>QString path =
            directory.filePath(&quot;contents.txt&quot;);</para>
            <para>QString absolutePath =
            directory.absoluteFilePath(&quot;contents.txt&quot;);</para>
            <para>Files can be removed by using the remove() function. Directories
            cannot be removed in the same way as files; use rmdir() to remove them
            instead.</para>
            <para>It is possible to reduce the number of entries returned by
            entryList() and entryInfoList() by applying filters to a QDir object. You
            can apply a name filter to specify a pattern with wildcards that file names
            need to match, an attribute filter that selects properties of entries and
            can distinguish between files and directories, and a sort order.</para>
            <para>Name filters are lists of strings that are passed to
            setNameFilters(). Attribute filters consist of a bitwise OR combination of
            Filters, and these are specified when calling setFilter(). The sort order
            is specified using setSorting() with a bitwise OR combination of
            SortFlags.</para>
            <para>You can test to see if a filename matches a filter using the
            match() function.</para>
            <para>Filter and sort order flags may also be specified when calling
            entryList() and entryInfoList() in order to override previously defined
            behavior.</para>
            <para></para>
            <para>The Current Directory and Other Special Paths</para>
            <para>Access to some common directories is provided with a number of
            static functions that return QDir objects. There are also corresponding
            functions for these that return strings:</para>
            <para></para>
            <para> QDirQStringReturn Value</para>
            <para>current()	currentPath()	The application's working
            directory</para>
            <para>home()	homePath()	The user's home directory</para>
            <para>root()	rootPath()	The root directory</para>
            <para>temp()	tempPath()	The system's temporary directory</para>
            <para></para>
            <para>The setCurrent() static function can also be used to set the
            application's working directory.</para>
            <para>If you want to find the directory containing the application's
            executable, see QCoreApplication::applicationDirPath().</para>
            <para>The drives() static function provides a list of root directories
            for each device that contains a filing system. On Unix systems this returns
            a list containing a single root directory &quot;/&quot;; on Windows the
            list will usually contain C:/, and possibly other drive letters such as
            D:/, depending on the configuration of the user's system.</para>
            <para></para>
            <para>Path Manipulation and Strings</para>
            <para>Paths containing &quot;.&quot; elements that reference the
            current directory at that point in the path, &quot;..&quot; elements that
            reference the parent directory, and symbolic links can be reduced to a
            canonical form using the canonicalPath() function.</para>
            <para>Paths can also be simplified by using cleanPath() to remove
            redundant &quot;/&quot; and &quot;..&quot; elements.</para>
            <para>It is sometimes necessary to be able to show a path in the native
            representation for the user's platform. The static toNativeSeparators()
            function returns a copy of the specified path in which each directory
            separator is replaced by the appropriate separator for the underlying
            operating system.</para>
            <para></para>
            <para>Examples</para>
            <para>Check if a directory exists:</para>
            <para>QDir dir(&quot;example&quot;);</para>
            <para>if (!dir.exists())</para>
            <para>    qWarning(&quot;Cannot find the example
            directory&quot;);</para>
            <para>(We could also use the static convenience function
            QFile::exists().)</para>
            <para>Traversing directories and reading a file:</para>
            <para>QDir dir = QDir::root();                 // &quot;/&quot;</para>
            <para>if (!dir.cd(&quot;tmp&quot;)) {                    //
            &quot;/tmp&quot;</para>
            <para>    qWarning(&quot;Cannot find the \&quot;/tmp\&quot;
            directory&quot;);</para>
            <para>} else {</para>
            <para>    QFile file(dir.filePath(&quot;ex1.txt&quot;)); //
            &quot;/tmp/ex1.txt&quot;</para>
            <para>    if (!file.open(QIODevice::ReadWrite))</para>
            <para>        qWarning(&quot;Cannot create the file %s&quot;,
            file.name());</para>
            <para>}</para>
            <para>A program that lists all the files in the current directory
            (excluding symbolic links), sorted by size, smallest first:</para>
            <para>#include &lt;QDir&gt;</para>
            <para>#include &lt;iostream&gt;</para>
            <para></para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QCoreApplication app(argc, argv);</para>
            <para>    QDir dir;</para>
            <para>    dir.setFilter(QDir::Files | QDir::Hidden |
            QDir::NoSymLinks);</para>
            <para>    dir.setSorting(QDir::Size | QDir::Reversed);</para>
            <para></para>
            <para>    QFileInfoList list = dir.entryInfoList();</para>
            <para>    std::cout &lt;&lt; &quot;     Bytes Filename&quot; &lt;&lt;
            std::endl;</para>
            <para>    for (int i = 0; i &lt; list.size(); ++i) {</para>
            <para>        QFileInfo fileInfo = list.at(i);</para>
            <para>        std::cout &lt;&lt; qPrintable(QString(&quot;%1
            %2&quot;).arg(fileInfo.size(), 10)</para>
            <para>
            .arg(fileInfo.fileName()));</para>
            <para>        std::cout &lt;&lt; std::endl;</para>
            <para>    }</para>
            <para>    return 0;</para>
            <para>}</para>
            <para></para>
            <para>See also QFileInfo, QFile, QFileDialog,
            QCoreApplication::applicationDirPath(), and Find Files Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDir.#ctor(QtCore.QDir)">
            <summary>
            <para>Constructs a QDir object that is a copy of the QDir object for
            directory dir.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.#ctor(System.String)">
            <summary>
            <para>Constructs a QDir pointing to the given directory path. If path
            is empty the program's working directory, (&quot;.&quot;), is used.</para>
            <para>See also currentPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.#ctor(System.String,System.String,QtCore.QDir.SortFlag,QtCore.QDir.Filter)">
            <summary>
            <para>Constructs a QDir with path path, that filters its entries by
            name using nameFilter and by attributes using filters. It also sorts the
            names using sort.</para>
            <para>The default nameFilter is an empty string, which excludes
            nothing; the default filters is AllEntries, which also means exclude
            nothing. The default sort is Name | IgnoreCase, i.e. sort by name
            case-insensitively.</para>
            <para>If path is an empty string, QDir uses &quot;.&quot; (the current
            directory). If nameFilter is an empty string, QDir uses the name filter
            &quot;*&quot; (all files).</para>
            <para>Note that path need not exist.</para>
            <para>See also exists(), setPath(), setNameFilters(), setFilter(), and
            setSorting().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Swap(QtCore.QDir)">
            <summary>
            <para>Swaps this QDir instance with other. This function is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.FilePath(System.String)">
            <summary>
            <para>Returns the path name of a file in the directory. Does not check
            if the file actually exists in the directory; but see exists(). If the QDir
            is relative the returned path name will also be relative. Redundant
            multiple separators or &quot;.&quot; and &quot;..&quot; directories in
            fileName are not removed (see cleanPath()).</para>
            <para>See also dirName(), absoluteFilePath(), isRelative(), and
            canonicalPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.AbsoluteFilePath(System.String)">
            <summary>
            <para>Returns the absolute path name of a file in the directory. Does
            not check if the file actually exists in the directory; but see exists().
            Redundant multiple separators or &quot;.&quot; and &quot;..&quot;
            directories in fileName are not removed (see cleanPath()).</para>
            <para>See also relativeFilePath(), filePath(), and
            canonicalPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.RelativeFilePath(System.String)">
            <summary>
            <para>Returns the path to fileName relative to the directory.</para>
            <para>QDir dir(&quot;/home/bob&quot;);</para>
            <para>QString s;</para>
            <para></para>
            <para>s = dir.relativeFilePath(&quot;images/file.jpg&quot;);     // s
            is &quot;images/file.jpg&quot;</para>
            <para>s = dir.relativeFilePath(&quot;/home/mary/file.txt&quot;); // s
            is &quot;../mary/file.txt&quot;</para>
            <para>See also absoluteFilePath(), filePath(), and
            canonicalPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Cd(System.String)">
            <summary>
            <para>Changes the QDir's directory to dirName.</para>
            <para>Returns true if the new directory exists; otherwise returns
            false. Note that the logical cd() operation is not performed if the new
            directory does not exist.</para>
            <para>Calling cd(&quot;..&quot;) is equivalent to calling
            cdUp().</para>
            <para>See also cdUp(), isReadable(), exists(), and path().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.EntryList(QtCore.QDir.Filter,QtCore.QDir.SortFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a list of the names of all the files and directories in
            the directory, ordered according to the name and attribute filters
            previously set with setNameFilters() and setFilter(), and sorted according
            to the flags set with setSorting().</para>
            <para>The attribute filter and sorting specifications can be overridden
            using the filters and sort arguments.</para>
            <para>Returns an empty list if the directory is unreadable, does not
            exist, or if nothing matches the specification.</para>
            <para>Note: To list symlinks that point to non existing files, System
            must be passed to the filter.</para>
            <para>See also entryInfoList(), setNameFilters(), setSorting(), and
            setFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.EntryList(QtCore.QStringList,QtCore.QDir.Filter,QtCore.QDir.SortFlag)">
            <summary>
            <para>Returns a list of the names of all the files and directories in
            the directory, ordered according to the name and attribute filters
            previously set with setNameFilters() and setFilter(), and sorted according
            to the flags set with setSorting().</para>
            <para>The name filter, file attribute filter, and sorting specification
            can be overridden using the nameFilters, filters, and sort
            arguments.</para>
            <para>Returns an empty list if the directory is unreadable, does not
            exist, or if nothing matches the specification.</para>
            <para>See also entryInfoList(), setNameFilters(), setSorting(), and
            setFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Mkdir(System.String)">
            <summary>
            <para>Creates a sub-directory called dirName.</para>
            <para>Returns true on success; otherwise returns false.</para>
            <para>If the directory already exists when this function is called, it
            will return false.</para>
            <para>See also rmdir().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Rmdir(System.String)">
            <summary>
            <para>Removes the directory specified by dirName.</para>
            <para>The directory must be empty for rmdir() to succeed.</para>
            <para>Returns true if successful; otherwise returns false.</para>
            <para>See also mkdir().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Mkpath(System.String)">
            <summary>
            <para>Creates the directory path dirPath.</para>
            <para>The function will create all parent directories necessary to
            create the directory.</para>
            <para>Returns true if successful; otherwise returns false.</para>
            <para>If the path already exists when this function is called, it will
            return true.</para>
            <para>See also rmpath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Rmpath(System.String)">
            <summary>
            <para>Removes the directory path dirPath.</para>
            <para>The function will remove all parent directories in dirPath,
            provided that they are empty. This is the opposite of
            mkpath(dirPath).</para>
            <para>Returns true if successful; otherwise returns false.</para>
            <para>See also mkpath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Exists">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the directory exists; otherwise returns false.
            (If a file with the same name is found this function will return
            false).</para>
            <para>The overload of this function that accepts an argument is used to
            test for the presence of files and directories within a directory.</para>
            <para>See also QFileInfo::exists() and QFile::exists().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.MakeAbsolute">
            <summary>
            <para>Converts the directory path to an absolute path. If it is already
            absolute nothing happens. Returns true if the conversion succeeded;
            otherwise returns false.</para>
            <para>See also isAbsolute(), isAbsolutePath(), isRelative(), and
            cleanPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.op_Equality(QtCore.QDir,QtCore.QDir)">
            <summary>
            <para>Returns true if directory dir and this directory have the same
            path and their sort and filter settings are the same; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>// The current directory is &quot;/usr/local&quot;</para>
            <para>QDir d1(&quot;/usr/local/bin&quot;);</para>
            <para>QDir d2(&quot;bin&quot;);</para>
            <para>if (d1 == d2)</para>
            <para>    qDebug(&quot;They're the same&quot;);</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.op_Inequality(QtCore.QDir,QtCore.QDir)">
            <summary>
            <para>Returns true if directory dir and this directory have different
            paths or different sort or filter settings; otherwise returns false.</para>
            <para>Example:</para>
            <para>// The current directory is &quot;/usr/local&quot;</para>
            <para>QDir d1(&quot;/usr/local/bin&quot;);</para>
            <para>d1.setFilter(QDir::Executable);</para>
            <para>QDir d2(&quot;bin&quot;);</para>
            <para>if (d1 != d2)</para>
            <para>    qDebug(&quot;They differ&quot;);</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Remove(System.String)">
            <summary>
            <para>Removes the file, fileName.</para>
            <para>Returns true if the file is removed successfully; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Rename(System.String,System.String)">
            <summary>
            <para>Renames a file or directory from oldName to newName, and returns
            true if successful; otherwise returns false.</para>
            <para>On most file systems, rename() fails only if oldName does not
            exist, or if a file with the new name already exists. However, there are
            also other reasons why rename() can fail. For example, on at least one file
            system rename() fails if newName points to an open file.</para>
            <para>If oldName is a file (not a directory) that can't be renamed
            right away, Qt will try to copy oldName to newName and remove
            oldName.</para>
            <para>See also QFile::rename().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Exists(System.String)">
            <summary>
            <para>Returns true if the file called name exists; otherwise returns
            false.</para>
            <para>Unless name contains an absolute file path, the file name is
            assumed to be relative to the directory itself, so this function is
            typically used to check for the presence of files within a
            directory.</para>
            <para>See also QFileInfo::exists() and QFile::exists().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Refresh">
            <summary>
            <para>Refreshes the directory information.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.AddResourceSearchPath(System.String)">
            <summary>
            <para>Use QDir::addSearchPath() with a prefix instead.</para>
            <para>Adds path to the search paths searched in to find resources that
            are not specified with an absolute path. The default search path is to
            search only in the root (:/).</para>
            <para>See also The Qt Resource System.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.SetSearchPaths(System.String,QtCore.QStringList)">
            <summary>
            <para>Sets or replaces Qt's search paths for file names with the prefix
            prefix to searchPaths.</para>
            <para>To specify a prefix for a file name, prepend the prefix followed
            by a single colon (e.g., &quot;images:undo.png&quot;,
            &quot;xmldocs:books.xml&quot;). prefix can only contain letters or numbers
            (e.g., it cannot contain a colon, nor a slash).</para>
            <para>Qt uses this search path to locate files with a known prefix. The
            search path entries are tested in order, starting with the first
            entry.</para>
            <para>QDir::setSearchPaths(&quot;icons&quot;,
            QStringList(QDir::homePath() + &quot;/images&quot;));</para>
            <para>QDir::setSearchPaths(&quot;docs&quot;,
            QStringList(&quot;:/embeddedDocuments&quot;));</para>
            <para>...</para>
            <para>QPixmap pixmap(&quot;icons:undo.png&quot;); // will look for
            undo.png in QDir::homePath() + &quot;/images&quot;</para>
            <para>QFile file(&quot;docs:design.odf&quot;); // will look in the
            :/embeddedDocuments resource path</para>
            <para>File name prefix must be at least 2 characters long to avoid
            conflicts with Windows drive letters.</para>
            <para>Search paths may contain paths to The Qt Resource System.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also searchPaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.AddSearchPath(System.String,System.String)">
            <summary>
            <para>Adds path to the search path for prefix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setSearchPaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.SearchPaths(System.String)">
            <summary>
            <para>Returns the search paths for prefix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setSearchPaths() and addSearchPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.ToNativeSeparators(System.String)">
            <summary>
            <para>Returns pathName with the '/' separators converted to separators
            that are appropriate for the underlying operating system.</para>
            <para>On Windows, toNativeSeparators(&quot;c:/winnt/system32&quot;)
            returns &quot;c:\winnt\system32&quot;.</para>
            <para>The returned string may be the same as the argument on some
            operating systems, for example on Unix.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also fromNativeSeparators() and separator().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.FromNativeSeparators(System.String)">
            <summary>
            <para>Returns pathName using '/' as file separator. On Windows, for
            instance, fromNativeSeparators(&quot;c:\\winnt\\system32&quot;) returns
            &quot;c:/winnt/system32&quot;.</para>
            <para>The returned string may be the same as the argument on some
            operating systems, for example on Unix.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toNativeSeparators() and separator().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.IsRelativePath(System.String)">
            <summary>
            <para>Returns true if path is relative; returns false if it is
            absolute.</para>
            <para>See also isRelative(), isAbsolutePath(), and
            makeAbsolute().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.IsAbsolutePath(System.String)">
            <summary>
            <para>Returns true if path is absolute; returns false if it is
            relative.</para>
            <para>See also isAbsolute(), isRelativePath(), makeAbsolute(), and
            cleanPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.SetCurrent(System.String)">
            <summary>
            <para>Sets the application's current working directory to path. Returns
            true if the directory was successfully changed; otherwise returns
            false.</para>
            <para>See also current(), currentPath(), home(), root(), and
            temp().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Match(QtCore.QStringList,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the fileName matches any of the wildcard (glob)
            patterns in the list of filters; otherwise returns false. The matching is
            case insensitive.</para>
            <para>See also QRegExp wildcard matching, QRegExp::exactMatch(),
            entryList(), and entryInfoList().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.Match(System.String,System.String)">
            <summary>
            <para>Returns true if the fileName matches the wildcard (glob) pattern
            filter; otherwise returns false. The filter may contain multiple patterns
            separated by spaces or semicolons. The matching is case insensitive.</para>
            <para>See also QRegExp wildcard matching, QRegExp::exactMatch(),
            entryList(), and entryInfoList().</para>
            </summary>
        </member>
        <member name="M:QtCore.QDir.CleanPath(System.String)">
            <summary>
            <para>Returns path with directory separators normalized (converted to
            &quot;/&quot;) and redundant ones removed, and &quot;.&quot;s and
            &quot;..&quot;s resolved (as far as possible).</para>
            <para>Symbolic links are kept. This function does not return the
            canonical path, but rather the simplest version of the input. For example,
            &quot;./local&quot; becomes &quot;local&quot;, &quot;local/../bin&quot;
            becomes &quot;bin&quot; and &quot;/local/usr/../bin&quot; becomes
            &quot;/local/bin&quot;.</para>
            <para>See also absolutePath() and canonicalPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Item(System.Int32)">
            <summary>
            <para>Returns the file name at position pos in the list of file names.
            Equivalent to entryList().at(index). pos must be a valid index position in
            the list (i.e., 0 &lt;= pos &lt; count()).</para>
            <para>See also count() and entryList().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Path">
            <summary>
            <para>Returns the path. This may contain symbolic links, but never
            contains redundant &quot;.&quot;, &quot;..&quot; or multiple
            separators.</para>
            <para>The returned path can be either absolute or relative (see
            setPath()).</para>
            <para>See also setPath(), absolutePath(), exists(), cleanPath(),
            dirName(), absoluteFilePath(), toNativeSeparators(), and
            makeAbsolute().</para>
            <para></para>
            <para>Sets the path of the directory to path. The path is cleaned of
            redundant &quot;.&quot;, &quot;..&quot; and of multiple separators. No
            check is made to see whether a directory with this path actually exists;
            but you can check for yourself using exists().</para>
            <para>The path can be either absolute or relative. Absolute paths begin
            with the directory separator &quot;/&quot; (optionally preceded by a drive
            specification under Windows). Relative file names begin with a directory
            name or a file name and specify a path relative to the current directory.
            An example of an absolute path is the string &quot;/tmp/quartz&quot;, a
            relative path might look like &quot;src/fatlib&quot;.</para>
            <para>See also path(), absolutePath(), exists(), cleanPath(),
            dirName(), absoluteFilePath(), isRelative(), and makeAbsolute().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.NameFilters">
            <summary>
            <para>Returns the string list set by setNameFilters()</para>
            <para>See also setNameFilters().</para>
            <para></para>
            <para>Sets the name filters used by entryList() and entryInfoList() to
            the list of filters specified by nameFilters.</para>
            <para>Each name filter is a wildcard (globbing) filter that understands
            * and ? wildcards. (See QRegExp wildcard matching.)</para>
            <para>For example, the following code sets three name filters on a QDir
            to ensure that only files with extensions typically used for C++ source
            files are listed:</para>
            <para>    QStringList filters;</para>
            <para>    filters &lt;&lt; &quot;*.cpp&quot; &lt;&lt; &quot;*.cxx&quot;
            &lt;&lt; &quot;*.cc&quot;;</para>
            <para>    dir.setNameFilters(filters);</para>
            <para>See also nameFilters() and setFilter().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.filter">
            <summary>
            <para>Returns the value set by setFilter()</para>
            <para>See also setFilter().</para>
            <para></para>
            <para>Sets the filter used by entryList() and entryInfoList() to
            filters. The filter is used to specify the kind of files that should be
            returned by entryList() and entryInfoList(). See QDir::Filter.</para>
            <para>See also filter() and setNameFilters().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Sorting">
            <summary>
            <para>Returns the value set by setSorting()</para>
            <para>See also setSorting() and SortFlag.</para>
            <para></para>
            <para>Sets the sort order used by entryList() and
            entryInfoList().</para>
            <para>The sort is specified by OR-ing values from the enum
            QDir::SortFlag.</para>
            <para>See also sorting() and SortFlag.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.AbsolutePath">
            <summary>
            <para>Returns the absolute path (a path that starts with &quot;/&quot;
            or with a drive specification), which may contain symbolic links, but never
            contains redundant &quot;.&quot;, &quot;..&quot; or multiple
            separators.</para>
            <para>See also setPath(), canonicalPath(), exists(), cleanPath(),
            dirName(), and absoluteFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.CanonicalPath">
            <summary>
            <para>Returns the canonical path, i.e. a path without symbolic links or
            redundant &quot;.&quot; or &quot;..&quot; elements.</para>
            <para>On systems that do not have symbolic links this function will
            always return the same string that absolutePath() returns. If the canonical
            path does not exist (normally due to dangling symbolic links)
            canonicalPath() returns an empty string.</para>
            <para>Example:</para>
            <para>QString bin = &quot;/local/bin&quot;;         // where /local/bin
            is a symlink to /usr/bin</para>
            <para>QDir binDir(bin);</para>
            <para>QString canonicalBin = binDir.canonicalPath();</para>
            <para>// canonicalBin now equals &quot;/usr/bin&quot;</para>
            <para></para>
            <para>QString ls = &quot;/local/bin/ls&quot;;       // where ls is the
            executable &quot;ls&quot;</para>
            <para>QDir lsDir(ls);</para>
            <para>QString canonicalLs = lsDir.canonicalPath();</para>
            <para>// canonicalLS now equals &quot;/usr/bin/ls&quot;.</para>
            <para>See also path(), absolutePath(), exists(), cleanPath(),
            dirName(), and absoluteFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.DirName">
            <summary>
            <para>Returns the name of the directory; this is not the same as the
            path, e.g. a directory with the name &quot;mail&quot;, might have the path
            &quot;/var/spool/mail&quot;. If the directory has no name (e.g. it is the
            root directory) an empty string is returned.</para>
            <para>No check is made to ensure that a directory with this name
            actually exists; but see exists().</para>
            <para>See also path(), filePath(), absolutePath(), and
            absoluteFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.CdUp">
            <summary>
            <para>Changes directory by moving one directory up from the QDir's
            current directory.</para>
            <para>Returns true if the new directory exists; otherwise returns
            false. Note that the logical cdUp() operation is not performed if the new
            directory does not exist.</para>
            <para>See also cd(), isReadable(), exists(), and path().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Count">
            <summary>
            <para>Returns the total number of directories and files in the
            directory.</para>
            <para>Equivalent to entryList().count().</para>
            <para>See also operator[]() and entryList().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.RemoveRecursively">
            <summary>
            <para>Removes the directory, including all its contents.</para>
            <para>Returns true if successful, otherwise false.</para>
            <para>If a file or directory cannot be removed, removeRecursively()
            keeps going and attempts to delete as many files and sub-directories as
            possible, then returns false.</para>
            <para>If the directory was already removed, the method returns true
            (expected result already reached).</para>
            <para>Note: this function is meant for removing a small
            application-internal directory (such as a temporary directory), but not
            user-visible directories. For user-visible operations, it is rather
            recommended to report errors more precisely to the user, to offer solutions
            in case of errors, to show progress during the deletion since it could take
            several minutes, etc.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.IsReadable">
            <summary>
            <para>Returns true if the directory is readable and we can open files
            by name; otherwise returns false.</para>
            <para>Warning: A false value from this function is not a guarantee that
            files in the directory are not accessible.</para>
            <para>See also QFileInfo::isReadable().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.IsRoot">
            <summary>
            <para>Returns true if the directory is the root directory; otherwise
            returns false.</para>
            <para>Note: If the directory is a symbolic link to the root directory
            this function returns false. If you want to test for this use
            canonicalPath(), e.g.</para>
            <para>QDir dir(&quot;/tmp/root_link&quot;);</para>
            <para>dir = dir.canonicalPath();</para>
            <para>if (dir.isRoot())</para>
            <para>    qWarning(&quot;It is a root link&quot;);</para>
            <para>See also root() and rootPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.IsRelative">
            <summary>
            <para>Returns true if the directory path is relative; otherwise returns
            false. (Under Unix a path is relative if it does not start with a
            &quot;/&quot;).</para>
            <para>See also makeAbsolute(), isAbsolute(), isAbsolutePath(), and
            cleanPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.IsAbsolute">
            <summary>
            <para>Returns true if the directory's path is absolute; otherwise
            returns false. See isAbsolutePath().</para>
            <para>See also isRelative(), makeAbsolute(), and cleanPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Separator">
            <summary>
            <para>Returns the native directory separator: &quot;/&quot; under Unix
            and &quot;\&quot; under Windows.</para>
            <para>You do not need to use this function to build file paths. If you
            always use &quot;/&quot;, Qt will translate your paths to conform to the
            underlying operating system. If you want to display paths to the user using
            their operating system's separator use toNativeSeparators().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Current">
            <summary>
            <para>Returns the application's current directory.</para>
            <para>The directory is constructed using the absolute path of the
            current directory, ensuring that its path() will be the same as its
            absolutePath().</para>
            <para>See also currentPath(), setCurrent(), home(), root(), and
            temp().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.CurrentPath">
            <summary>
            <para>Returns the absolute path of the application's current directory.
            The current directory is the last directory set with QDir::setCurrent() or,
            if that was never called, the directory at which this application was
            started at by the parent process.</para>
            <para>See also current(), setCurrent(), homePath(), rootPath(),
            tempPath(), and QCoreApplication::applicationDirPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Home">
            <summary>
            <para>Returns the user's home directory.</para>
            <para>The directory is constructed using the absolute path of the home
            directory, ensuring that its path() will be the same as its
            absolutePath().</para>
            <para>See homePath() for details.</para>
            <para>See also drives(), current(), root(), and temp().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.HomePath">
            <summary>
            <para>Returns the absolute path of the user's home directory.</para>
            <para>Under Windows this function will return the directory of the
            current user's profile. Typically, this is:</para>
            <para>C:/Documents and Settings/Username</para>
            <para>Use the toNativeSeparators() function to convert the separators
            to the ones that are appropriate for the underlying operating
            system.</para>
            <para>If the directory of the current user's profile does not exist or
            cannot be retrieved, the following alternatives will be checked (in the
            given order) until an existing and available path is found:</para>
            <para></para>
            <para>The path specified by the USERPROFILE environment
            variable.</para>
            <para>The path formed by concatenating the HOMEDRIVE and HOMEPATH
            environment variables.</para>
            <para>The path specified by the HOME environment variable.</para>
            <para>The path returned by the rootPath() function (which uses the
            SystemDrive environment variable)</para>
            <para>The C:/ directory.</para>
            <para></para>
            <para>Under non-Windows operating systems the HOME environment variable
            is used if it exists, otherwise the path returned by the rootPath().</para>
            <para>See also home(), currentPath(), rootPath(), and
            tempPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Root">
            <summary>
            <para>Returns the root directory.</para>
            <para>The directory is constructed using the absolute path of the root
            directory, ensuring that its path() will be the same as its
            absolutePath().</para>
            <para>See rootPath() for details.</para>
            <para>See also drives(), current(), home(), and temp().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.RootPath">
            <summary>
            <para>Returns the absolute path of the root directory.</para>
            <para>For Unix operating systems this returns &quot;/&quot;. For
            Windows file systems this normally returns &quot;c:/&quot;.</para>
            <para>See also root(), drives(), currentPath(), homePath(), and
            tempPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.Temp">
            <summary>
            <para>Returns the system's temporary directory.</para>
            <para>The directory is constructed using the absolute path of the
            temporary directory, ensuring that its path() will be the same as its
            absolutePath().</para>
            <para>See tempPath() for details.</para>
            <para>See also drives(), current(), home(), and root().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDir.TempPath">
            <summary>
            <para>Returns the absolute path of the system's temporary
            directory.</para>
            <para>On Unix/Linux systems this is the path in the TMPDIR environment
            variable or /tmp if TMPDIR is not defined. On Windows this is usually the
            path in the TEMP or TMP environment variable. The path returned by this
            method doesn't end with a directory separator unless it is the root
            directory (of a drive).</para>
            <para>See also temp(), currentPath(), homePath(), and
            rootPath().</para>
            </summary>
        </member>
        <member name="T:QtCore.QDir.Filter">
            <summary>
            <para>This enum describes the filtering options available to QDir; e.g.
            for entryList() and entryInfoList(). The filter value is specified by
            combining values from the following list using the bitwise OR
            operator:</para>
            <para>Functions that use Filter enum values to filter lists of files
            and directories will include symbolic links to files and directories unless
            you set the NoSymLinks value.</para>
            <para>A default constructed QDir will not filter out files based on
            their permissions, so entryList() and entryInfoList() will return all files
            that are readable, writable, executable, or any combination of the three.
            This makes the default easy to write, and at the same time useful.</para>
            <para>For example, setting the Readable, Writable, and Files flags
            allows all files to be listed for which the application has read access,
            write access or both. If the Dirs and Drives flags are also included in
            this combination then all drives, directories, all files that the
            application can read, write, or execute, and symlinks to such
            files/directories can be listed.</para>
            <para>To retrieve the permissons for a directory, use the
            entryInfoList() function to get the associated QFileInfo objects and then
            use the QFileInfo::permissons() to obtain the permissions and ownership for
            each file.</para>
            <para>The Filters type is a typedef for QFlags&lt;Filter&gt;. It stores
            an OR combination of Filter values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Dirs">
            <summary>List directories that match the filters.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Files">
            <summary>List files.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Drives">
            <summary>List disk drives (ignored under Unix).</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.NoSymLinks">
            <summary>Do not list symbolic links (ignored by operating systems that don't support symbolic links).</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.AllEntries">
            <summary>List directories, files, drives and symlinks (this does not list broken symlinks unless you specify System).</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Readable">
            <summary>List files for which the application has read access. The Readable value needs to be combined with Dirs or Files.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Writable">
            <summary>List files for which the application has write access. The Writable value needs to be combined with Dirs or Files.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Executable">
            <summary>List files for which the application has execute access. The Executable value needs to be combined with Dirs or Files.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Modified">
            <summary>Only list files that have been modified (ignored on Unix).</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.Hidden">
            <summary>List hidden files (on Unix, files starting with a ".").</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.System">
            <summary>List system files (on Unix, FIFOs, sockets and device files are included; on Windows, .lnk files are included)</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.AllDirs">
            <summary>List all directories; i.e. don't apply the filters to directory names.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.CaseSensitive">
            <summary>The filter should be case sensitive.</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.NoDot">
            <summary>Do not list the special entry ".".</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.NoDotDot">
            <summary>Do not list the special entry "..".</summary>
        </member>
        <member name="F:QtCore.QDir.Filter.NoDotAndDotDot">
            <summary>Do not list the special entries "." and "..".</summary>
        </member>
        <member name="T:QtCore.QDir.SortFlag">
            <summary>
            <para>This enum describes the sort options available to QDir, e.g. for
            entryList() and entryInfoList(). The sort value is specified by OR-ing
            together values from the following list:</para>
            <para>You can only specify one of the first four.</para>
            <para>If you specify both DirsFirst and Reversed, directories are still
            put first, but in reverse order; the files will be listed after the
            directories, again in reverse order.</para>
            <para>The SortFlags type is a typedef for QFlags&lt;SortFlag&gt;. It
            stores an OR combination of SortFlag values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Name">
            <summary>Sort by name.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Time">
            <summary>Sort by time (modification time).</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Size">
            <summary>Sort by file size.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Unsorted">
            <summary>Do not sort.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.DirsFirst">
            <summary>Put the directories first, then the files.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Reversed">
            <summary>Reverse the sort order.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.IgnoreCase">
            <summary>Sort case-insensitively.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.DirsLast">
            <summary>Put the files first, then the directories.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.LocaleAware">
            <summary>Sort items appropriately using the current locale settings.</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.Type">
            <summary>Sort by file type (extension).</summary>
        </member>
        <member name="F:QtCore.QDir.SortFlag.NoSort">
            <summary>Not sorted by default.</summary>
        </member>
        <member name="T:QtCore.QDirIterator">
            <summary>
            <para>The QDirIterator class provides an iterator for directory
            entrylists.</para>
            </summary>
            <remarks>
            <para>You can use QDirIterator to navigate entries of a directory one
            at a time. It is similar to QDir::entryList() and QDir::entryInfoList(),
            but because it lists entries one at a time instead of all at once, it
            scales better and is more suitable for large directories. It also supports
            listing directory contents recursively, and following symbolic links.
            Unlike QDir::entryList(), QDirIterator does not support sorting.</para>
            <para>The QDirIterator constructor takes a QDir or a directory as
            argument. After construction, the iterator is located before the first
            directory entry. Here's how to iterate over all the entries
            sequentially:</para>
            <para>QDirIterator it(&quot;/etc&quot;,
            QDirIterator::Subdirectories);</para>
            <para>while (it.hasNext()) {</para>
            <para>    qDebug() &lt;&lt; it.next();</para>
            <para></para>
            <para>    // /etc/.</para>
            <para>    // /etc/..</para>
            <para>    // /etc/X11</para>
            <para>    // /etc/X11/fs</para>
            <para>    // ...</para>
            <para>}</para>
            <para>The next() function returns the path to the next directory entry
            and advances the iterator. You can also call filePath() to get the current
            file path without advancing the iterator. The fileName() function returns
            only the name of the file, similar to how QDir::entryList() works. You can
            also call fileInfo() to get a QFileInfo for the current entry.</para>
            <para>Unlike Qt's container iterators, QDirIterator is uni-directional
            (i.e., you cannot iterate directories in reverse order) and does not allow
            random access.</para>
            <para></para>
            <para>See also QDir and QDir::entryList().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDirIterator.#ctor(QtCore.QDir,QtCore.QDirIterator.IteratorFlag)">
            <summary>
            <para>Constructs a QDirIterator that can iterate over dir's entrylist,
            using dir's name filters and regular filters. You can pass options via
            flags to decide how the directory should be iterated.</para>
            <para>By default, flags is NoIteratorFlags, which provides the same
            behavior as in QDir::entryList().</para>
            <para>The sorting in dir is ignored.</para>
            <para>Note: To list symlinks that point to non existing files,
            QDir::System must be passed to the flags.</para>
            <para>See also hasNext(), next(), and IteratorFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDirIterator.#ctor(System.String,QtCore.QDirIterator.IteratorFlag)">
            <summary>
            <para>Constructs a QDirIterator that can iterate over path. You can
            pass options via flags to decide how the directory should be
            iterated.</para>
            <para>By default, flags is NoIteratorFlags, which provides the same
            behavior as in QDir::entryList().</para>
            <para>Note: To list symlinks that point to non existing files,
            QDir::System must be passed to the flags.</para>
            <para>See also hasNext(), next(), and IteratorFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDirIterator.#ctor(System.String,QtCore.QDir.Filter,QtCore.QDirIterator.IteratorFlag)">
            <summary>
            <para>Constructs a QDirIterator that can iterate over path, with no
            name filtering and filters for entry filtering. You can pass options via
            flags to decide how the directory should be iterated.</para>
            <para>By default, filters is QDir::NoFilter, and flags is
            NoIteratorFlags, which provides the same behavior as in
            QDir::entryList().</para>
            <para>Note: To list symlinks that point to non existing files,
            QDir::System must be passed to the flags.</para>
            <para>See also hasNext(), next(), and IteratorFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QDirIterator.#ctor(System.String,QtCore.QStringList,QtCore.QDir.Filter,QtCore.QDirIterator.IteratorFlag)">
            <summary>
            <para>Constructs a QDirIterator that can iterate over path, using
            nameFilters and filters. You can pass options via flags to decide how the
            directory should be iterated.</para>
            <para>By default, flags is NoIteratorFlags, which provides the same
            behavior as QDir::entryList().</para>
            <para>Note: To list symlinks that point to non existing files,
            QDir::System must be passed to the flags.</para>
            <para>See also hasNext(), next(), and IteratorFlags.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.Next">
            <summary>
            <para>Advances the iterator to the next entry, and returns the file
            path of this new entry. If hasNext() returns false, this function does
            nothing, and returns an empty QString.</para>
            <para>You can call fileName() or filePath() to get the current entry
            file name or path, or fileInfo() to get a QFileInfo for the current
            entry.</para>
            <para>See also hasNext(), fileName(), filePath(), and
            fileInfo().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.HasNext">
            <summary>
            <para>Returns true if there is at least one more entry in the
            directory; otherwise, false is returned.</para>
            <para>See also next(), fileName(), filePath(), and fileInfo().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.FileName">
            <summary>
            <para>Returns the file name for the current directory entry, without
            the path prepended.</para>
            <para>This function is convenient when iterating a single directory.
            When using the QDirIterator::Subdirectories flag, you can use filePath() to
            get the full path.</para>
            <para>See also filePath() and fileInfo().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.FilePath">
            <summary>
            <para>Returns the full file path for the current directory
            entry.</para>
            <para>See also fileInfo() and fileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.FileInfo">
            <summary>
            <para>Returns a QFileInfo for the current directory entry.</para>
            <para>See also filePath() and fileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QDirIterator.Path">
            <summary>
            <para>Returns the base directory of the iterator.</para>
            </summary>
        </member>
        <member name="T:QtCore.QDirIterator.IteratorFlag">
            <summary>
            <para>This enum describes flags that you can combine to configure the
            behavior of QDirIterator.</para>
            <para>The IteratorFlags type is a typedef for
            QFlags&lt;IteratorFlag&gt;. It stores an OR combination of IteratorFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QDirIterator.IteratorFlag.NoIteratorFlags">
            <summary>The default value, representing no flags. The iterator will return entries for the assigned path.</summary>
        </member>
        <member name="F:QtCore.QDirIterator.IteratorFlag.FollowSymlinks">
            <summary>When combined with Subdirectories, this flag enables iterating through all subdirectories of the assigned path, following all symbolic links. Symbolic link loops (e.g., "link" => "." or "link" => "..") are automatically detected and ignored.</summary>
        </member>
        <member name="F:QtCore.QDirIterator.IteratorFlag.Subdirectories">
            <summary>List entries inside all subdirectories as well.</summary>
        </member>
        <member name="T:QtCore.QFileSelector">
            <summary>
            <para>QFileSelector provides a convenient way of selecting file
            variants.</para>
            </summary>
            <remarks>
            <para>QFileSelector is a convenience for selecting file variants based
            on platform or device characteristics. This allows you to develop and
            deploy one codebase containing all the different variants more easily in
            some circumstances, such as when the correct variant cannot be determined
            during the deploy step.</para>
            <para></para>
            <para>Using QFileSelector</para>
            <para>If you always use the same file you do not need to use
            QFileSelector.</para>
            <para>Consider the following example usage, where you want to use
            different settings files on different locales. You might select code
            between locales like this:</para>
            <para>QString defaultsBasePath = &quot;data/&quot;;</para>
            <para>QString defaultsPath = defaultsBasePath +
            &quot;defaults.conf&quot;;</para>
            <para>QString localizedPath = defaultsBasePath</para>
            <para>        +
            QString(&quot;%1/defaults.conf&quot;).arg(QLocale::system().name());</para>
            <para>if (QFile::exists(localizedPath))</para>
            <para>    defaultsPath = localizedPath;</para>
            <para>QFile defaults(defaultsPath);</para>
            <para>Similarly, if you want to pick a different data file based on
            target platform, your code might look something like this:</para>
            <para>    QString defaultsPath = &quot;data/defaults.conf&quot;;</para>
            <para>#if defined(Q_OS_ANDROID)</para>
            <para>    defaultsPath = &quot;data/android/defaults.conf&quot;;</para>
            <para>#elif defined(Q_OS_BLACKBERRY)</para>
            <para>    defaultsPath =
            &quot;data/blackberry/defaults.conf&quot;;</para>
            <para>#elif defined(Q_OS_IOS)</para>
            <para>    defaultsPath = &quot;data/ios/defaults.conf&quot;;</para>
            <para>#endif</para>
            <para>    QFile defaults(defaultsPath);</para>
            <para>QFileSelector provides a convenient alternative to writing such
            boilerplate code, and in the latter case it allows you to start using an
            platform-specific configuration without a recompile. QFileSelector also
            allows for chaining of multiple selectors in a convenient way, for example
            selecting a different file only on certain combinations of platform and
            locale. For example, to select based on platform and/or locale, the code is
            as follows:</para>
            <para>    QFileSelector selector;</para>
            <para>    QFile
            defaultsFile(selector.select(&quot;data/defaults.conf&quot;));</para>
            <para>The files to be selected are placed in directories named with a
            '+' and a selector name. In the above example you could have the platform
            configurations selected by placing them in the following locations:</para>
            <para>    data/defaults.conf</para>
            <para>    data/+android/defaults.conf</para>
            <para>    data/+blackberry/defaults.conf</para>
            <para>    data/+ios/+en_GB/defaults.conf</para>
            <para>To find selected files, QFileSelector looks in the same directory
            as the base file. If there are any directories of the form
            +&lt;selector&gt; with an active selector, QFileSelector will prefer a file
            with the same file name from that directory over the base file. These
            directories can be nested to check against multiple selectors, for
            example:</para>
            <para>    images/background.png</para>
            <para>    images/+android/+en_GB/background.png</para>
            <para>    images/+blackberry/+en_GB/background.png</para>
            <para>With those files available, you would select a different file on
            android and blackberry platforms, but only if the locale was en_GB.</para>
            <para>QFileSelector will not attempt to select if the base file does
            not exist. For error handling in the case no valid selectors are present,
            it is recommended to have a default or error-handling file in the base file
            location even if you expect selectors to be present for all
            deployments.</para>
            <para>In a future version, some may be marked as deploy-time static and
            be moved during the deployment step as an optimization. As selectors come
            with a performance cost, it is recommended to avoid their use in
            circumstances involving performance-critical code.</para>
            <para></para>
            <para>Adding Selectors</para>
            <para>Selectors normally available are</para>
            <para></para>
            <para>platform, any of the following strings which match the platform
            the application is running on (list not exhaustive): android, blackberry,
            ios, osx, darwin, mac, linux, wince, unix, windows. On Linux, if it can be
            determined, the name of the distribution too, like debian, fedora or
            opensuse.</para>
            <para>locale, same as QLocale::system().name().</para>
            <para></para>
            <para>Further selectors will be added from the QT_FILE_SELECTORS
            environment variable, which when set should be a set of comma separated
            selectors. Note that this variable will only be read once; selectors may
            not update if the variable changes while the application is running. The
            initial set of selectors are evaluated only once, on first use.</para>
            <para>You can also add extra selectors at runtime for custom behavior.
            These will be used in any future calls to select(). If the extra selectors
            list has been changed, calls to select() will use the new list and may
            return differently.</para>
            <para></para>
            <para>Conflict Resolution when Multiple Selectors Apply</para>
            <para>When multiple selectors could be applied to the same file, the
            first matching selector is chosen. The order selectors are checked in
            are:</para>
            <para></para>
            <para>Selectors set via setExtraSelectors(), in the order they are in
            the list</para>
            <para>Selectors in the QT_FILE_SELECTORS environment variable, from
            left to right</para>
            <para>Locale</para>
            <para>Platform</para>
            <para></para>
            <para>Here is an example involving multiple selectors matching at the
            same time. It uses platform selectors, plus an extra selector named
            &quot;admin&quot; is set by the application based on user credentials. The
            example is sorted so that the lowest matching file would be chosen if all
            selectors were present:</para>
            <para>    images/background.png</para>
            <para>    images/+linux/background.png</para>
            <para>    images/+windows/background.png</para>
            <para>    images/+admin/background.png</para>
            <para>    images/+admin/+linux/background.png</para>
            <para>Because extra selectors are checked before platform the
            +admin/background.png will be chosen on Windows when the admin selector is
            set, and +windows/background.png will be chosen on Windows when the admin
            selector is not set. On Linux, the +admin/+linux/background.png will be
            chosen when admin is set, and the +linux/background.png when it is
            not.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFileSelector.#ctor(QtCore.QObject)">
            <summary>
            <para>Create a QFileSelector instance. This instance will have the same
            static selectors as other QFileSelector instances, but its own set of extra
            selectors.</para>
            <para>If supplied, it will have the given QObject parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSelector.Select(System.String)">
            <summary>
            <para>This function returns the selected version of the path, based on
            the conditions at runtime. If no selectable files are present, returns the
            original filePath.</para>
            <para>If the original file does not exist, the original filePath is
            returned. This means that you must have a base file to fall back on, you
            cannot have only files in selectable sub-directories.</para>
            <para>See the class overview for the selection algorithm.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSelector.Select(QtCore.QUrl)">
            <summary>
            <para>This is a convenience version of select operating on QUrl
            objects. If the scheme is not file or qrc, filePath is returned
            immediately. Otherwise selection is applied to the path of filePath and a
            QUrl is returned with the selected path and other QUrl parts the same as
            filePath.</para>
            <para>See the class overview for the selection algorithm.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSelector.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileSelector.ExtraSelectors">
            <summary>
            <para>Returns the list of extra selectors which have been added
            programmatically to this instance.</para>
            <para>See also setExtraSelectors().</para>
            <para></para>
            <para>Sets the list of extra selectors which have been added
            programmatically to this instance.</para>
            <para>These selectors have priority over any which have been
            automatically picked up.</para>
            <para>See also extraSelectors().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileSelector.AllSelectors">
            <summary>
            <para>Returns the complete, ordered list of selectors used by this
            instance</para>
            </summary>
        </member>
        <member name="T:QtCore.QFileSystemWatcher">
            <summary>
            <para>The QFileSystemWatcher class provides an interface for monitoring
            files and directories for modifications.</para>
            </summary>
            <remarks>
            <para>QFileSystemWatcher monitors the file system for changes to files
            and directories by watching a list of specified paths.</para>
            <para>Call addPath() to watch a particular file or directory. Multiple
            paths can be added using the addPaths() function. Existing paths can be
            removed by using the removePath() and removePaths() functions.</para>
            <para>QFileSystemWatcher examines each path added to it. Files that
            have been added to the QFileSystemWatcher can be accessed using the files()
            function, and directories using the directories() function.</para>
            <para>The fileChanged() signal is emitted when a file has been
            modified, renamed or removed from disk. Similarly, the directoryChanged()
            signal is emitted when a directory or its contents is modified or removed.
            Note that QFileSystemWatcher stops monitoring files once they have been
            renamed or removed from disk, and directories once they have been removed
            from disk.</para>
            <para>Note: On systems running a Linux kernel without inotify support,
            file systems that contain watched paths cannot be unmounted.</para>
            <para>Note: Windows CE does not support directory monitoring by default
            as this depends on the file system driver installed.</para>
            <para>Note: The act of monitoring files and directories for
            modifications consumes system resources. This implies there is a limit to
            the number of files and directories your process can monitor
            simultaneously. On Mac OS X 10.4 and all BSD variants, for example, an open
            file descriptor is required for each monitored file. Some system limits the
            number of open file descriptors to 256 by default. This means that
            addPath() and addPaths() will fail if your process tries to add more than
            256 files or directories to the file system monitor. Also note that your
            process may have other file descriptors open in addition to the ones for
            files being monitored, and these other open descriptors also count in the
            total. OS X 10.5 and up use a different backend and do not suffer from this
            issue.</para>
            <para></para>
            <para>See also QFile and QDir.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new file system watcher object with the given
            parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.#ctor(QtCore.QStringList,QtCore.QObject)">
            <summary>
            <para>Constructs a new file system watcher object with the given parent
            which monitors the specified paths list.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.AddPath(System.String)">
            <summary>
            <para>Adds path to the file system watcher if path exists. The path is
            not added if it does not exist, or if it is already being monitored by the
            file system watcher.</para>
            <para>If path specifies a directory, the directoryChanged() signal will
            be emitted when path is modified or removed from disk; otherwise the
            fileChanged() signal is emitted when path is modified, renamed or
            removed.</para>
            <para>If the watch was successful, true is returned.</para>
            <para>Reasons for a watch failure are generally system-dependent, but
            may include the resource not existing, access failures, or the total watch
            count limit, if the platform has one.</para>
            <para>Note: There may be a system dependent limit to the number of
            files and directories that can be monitored simultaneously. If this limit
            is been reached, path will not be monitored, and false is returned.</para>
            <para>See also addPaths() and removePath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.AddPaths(QtCore.QStringList)">
            <summary>
            <para>Adds each path in paths to the file system watcher. Paths are not
            added if they not exist, or if they are already being monitored by the file
            system watcher.</para>
            <para>If a path specifies a directory, the directoryChanged() signal
            will be emitted when the path is modified or removed from disk; otherwise
            the fileChanged() signal is emitted when the path is modified, renamed, or
            removed.</para>
            <para>The return value is a list of paths that could not be
            watched.</para>
            <para>Reasons for a watch failure are generally system-dependent, but
            may include the resource not existing, access failures, or the total watch
            count limit, if the platform has one.</para>
            <para>Note: There may be a system dependent limit to the number of
            files and directories that can be monitored simultaneously. If this limit
            has been reached, the excess paths will not be monitored, and they will be
            added to the returned QStringList.</para>
            <para>See also addPath() and removePaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.RemovePath(System.String)">
            <summary>
            <para>Removes the specified path from the file system watcher.</para>
            <para>If the watch is successfully removed, true is returned.</para>
            <para>Reasons for watch removal failing are generally system-dependent,
            but may be due to the path having already been deleted, for example.</para>
            <para>See also removePaths() and addPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.RemovePaths(QtCore.QStringList)">
            <summary>
            <para>Removes the specified paths from the file system watcher.</para>
            <para>The return value is a list of paths which were not able to be
            unwatched successfully.</para>
            <para>Reasons for watch removal failing are generally system-dependent,
            but may be due to the path having already been deleted, for example.</para>
            <para>See also removePath() and addPaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFileSystemWatcher.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QFileSystemWatcher.FileChanged">
            <summary>
            <para>This signal is emitted when the file at the specified path is modified, renamed or removed from disk.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also directoryChanged().</para>
            </summary>
        </member>
        <member name="E:QtCore.QFileSystemWatcher.DirectoryChanged">
            <summary>
            <para>This signal is emitted when the directory at a specified path is modified (e.g., when a file is added or deleted) or removed from disk. Note that if there are several changes during a short period of time, some of the changes might not emit this signal. However, the last change in the sequence of changes will always generate this signal.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also fileChanged().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileSystemWatcher.Files">
            <summary>
            <para>Returns a list of paths to files that are being watched.</para>
            <para>See also directories().</para>
            </summary>
        </member>
        <member name="P:QtCore.QFileSystemWatcher.Directories">
            <summary>
            <para>Returns a list of paths to directories that are being
            watched.</para>
            <para>See also files().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLockFile">
            <summary>
            <para>The QLockFile class provides locking between processes using a
            file.</para>
            </summary>
            <remarks>
            <para>A lock file can be used to prevent multiple processes from
            accessing concurrently the same resource. For instance, a configuration
            file on disk, or a socket, a port, a region of shared memory...</para>
            <para>Serialization is only guaranteed if all processes that access the
            shared resource use QLockFile, with the same file path.</para>
            <para>QLockFile supports two use cases: to protect a resource for a
            short-term operation (e.g. verifying if a configuration file has changed
            before saving new settings), and for long-lived protection of a resource
            (e.g. a document opened by a user in an editor) for an indefinite amount of
            time.</para>
            <para>When protecting for a short-term operation, it is acceptable to
            call lock() and wait until any running operation finishes. When protecting
            a resource over a long time, however, the application should always call
            setStaleLockTime(0) and then tryLock() with a short timeout, in order to
            warn the user that the resource is locked.</para>
            <para>If the process holding the lock crashes, the lock file stays on
            disk and can prevent any other process from accessing the shared resource,
            ever. For this reason, QLockFile tries to detect such a &quot;stale&quot;
            lock file, based on the process ID written into the file. To cover the
            situation that the process ID got reused meanwhile, the current process
            name is compared to the name of the process that corresponds to the process
            ID from the lock file. If the process names differ, the lock file is
            considered stale. Additionally, the last modification time of the lock file
            (30s by default, for the use case of a short-lived operation) is taken into
            account. If the lock file is found to be stale, it will be deleted.</para>
            <para>For the use case of protecting a resource over a long time, you
            should therefore call setStaleLockTime(0), and when tryLock() returns
            LockFailedError, inform the user that the document is locked, possibly
            using getLockInfo() for more details.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLockFile.#ctor(System.String)">
            <summary>
            <para>Constructs a new lock file object. The object is created in an
            unlocked state. When calling lock() or tryLock(), a lock file named
            fileName will be created, if it doesn't already exist.</para>
            <para>See also lock() and unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLockFile.TryLock(System.Int32)">
            <summary>
            <para>Attempts to create the lock file. This function returns true if
            the lock was obtained; otherwise it returns false. If another process (or
            another thread) has created the lock file already, this function will wait
            for at most timeout milliseconds for the lock file to become
            available.</para>
            <para>Note: Passing a negative number as the timeout is equivalent to
            calling lock(), i.e. this function will wait forever until the lock file
            can be locked if timeout is negative.</para>
            <para>If the lock was obtained, it must be released with unlock()
            before another process (or thread) can successfully lock it.</para>
            <para>Calling this function multiple times on the same lock from the
            same thread without unlocking first is not allowed, this function will
            always return false when attempting to lock the file recursively.</para>
            <para>See also lock() and unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLockFile.Unlock">
            <summary>
            <para>Releases the lock, by deleting the lock file.</para>
            <para>Calling unlock() without locking the file first, does
            nothing.</para>
            <para>See also lock() and tryLock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLockFile.GetLockInfo(System.Int64@,System.String,System.String)">
            <summary>
            <para>Retrieves information about the current owner of the lock
            file.</para>
            <para>If tryLock() returns false, and error() returns LockFailedError,
            this function can be called to find out more information about the existing
            lock file:</para>
            <para></para>
            <para>the PID of the application (returned in pid)</para>
            <para>the hostname it's running on (useful in case of networked
            filesystems),</para>
            <para>the name of the application which created it (returned in
            appname),</para>
            <para></para>
            <para>Note that tryLock() automatically deleted the file if there is no
            running application with this PID, so LockFailedError can only happen if
            there is an application with this PID (it could be unrelated
            though).</para>
            <para>This can be used to inform users about the existing lock file and
            give them the choice to delete it. After removing the file using
            removeStaleLockFile(), the application can call tryLock() again.</para>
            <para>This function returns true if the information could be
            successfully retrieved, false if the lock file doesn't exist or doesn't
            contain the expected data. This can happen if the lock file was deleted
            between the time where tryLock() failed and the call to this function.
            Simply call tryLock() again if this happens.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLockFile.StaleLockTime">
            <summary>
            <para>Returns the time in milliseconds after which a lock file is
            considered stale.</para>
            <para>See also setStaleLockTime().</para>
            <para></para>
            <para>Sets staleLockTime to be the time in milliseconds after which a
            lock file is considered stale. The default value is 30000, i.e. 30 seconds.
            If your application typically keeps the file locked for more than 30
            seconds (for instance while saving megabytes of data for 2 minutes), you
            should set a bigger value using setStaleLockTime().</para>
            <para>The value of staleLockTime is used by lock() and tryLock() in
            order to determine when an existing lock file is considered stale, i.e.
            left over by a crashed process. This is useful for the case where the PID
            got reused meanwhile, so one way to detect a stale lock file is by the fact
            that it has been around for a long time.</para>
            <para>See also staleLockTime().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLockFile.Lock">
            <summary>
            <para>Creates the lock file.</para>
            <para>If another process (or another thread) has created the lock file
            already, this function will block until that process (or thread) releases
            it.</para>
            <para>Calling this function multiple times on the same lock from the
            same thread without unlocking first is not allowed. This function will
            dead-lock when the file is locked recursively.</para>
            <para>Returns true if the lock was acquired, false if it could not be
            acquired due to an unrecoverable error, such as no permissions in the
            parent directory.</para>
            <para>See also unlock() and tryLock().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLockFile.IsLocked">
            <summary>
            <para>Returns true if the lock was acquired by this QLockFile instance,
            otherwise returns false.</para>
            <para>See also lock(), unlock(), and tryLock().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLockFile.RemoveStaleLockFile">
            <summary>
            <para>Attempts to forcefully remove an existing lock file.</para>
            <para>Calling this is not recommended when protecting a short-lived
            operation: QLockFile already takes care of removing lock files after they
            are older than staleLockTime().</para>
            <para>This method should only be called when protecting a resource for
            a long time, i.e. with staleLockTime(0), and after tryLock() returned
            LockFailedError, and the user agreed on removing the lock file.</para>
            <para>Returns true on success, false if the lock file couldn't be
            removed. This happens on Windows, when the application owning the lock is
            still running.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLockFile.Error">
            <summary>
            <para>Returns the lock file error status.</para>
            <para>If tryLock() returns false, this function can be called to find
            out the reason why the locking failed.</para>
            </summary>
        </member>
        <member name="T:QtCore.QLockFile.LockError">
            <summary>
            <para>This enum describes the result of the last call to lock() or
            tryLock().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLockFile.LockError.NoError">
            <summary>The lock was acquired successfully.</summary>
        </member>
        <member name="F:QtCore.QLockFile.LockError.LockFailedError">
            <summary>The lock could not be acquired because another process holds it.</summary>
        </member>
        <member name="F:QtCore.QLockFile.LockError.PermissionError">
            <summary>The lock file could not be created, for lack of permissions in the parent directory.</summary>
        </member>
        <member name="F:QtCore.QLockFile.LockError.UnknownError">
            <summary>Another error happened, for instance a full partition prevented writing out the lock file.</summary>
        </member>
        <member name="T:QtCore.QLoggingCategory">
            <summary>
            <para>The QLoggingCategory class represents a category, or 'area' in
            the logging infrastructure.</para>
            </summary>
            <remarks>
            <para>QLoggingCategory represents a certain logging category -
            identified by a string - at runtime. A category can be configured to enable
            or disable logging of messages per message type. Whether a message type is
            enabled or not can be checked with the isDebugEnabled(), isInfoEnabled(),
            isWarningEnabled(), and isCriticalEnabled() methods.</para>
            <para>All objects are meant to be configured by a common registry (see
            also Configuring Categories). Different objects can also represent the same
            category. It is therefore not recommended to export objects across module
            boundaries, nor to manipulate the objects directly, nor to inherit from
            QLoggingCategory.</para>
            <para></para>
            <para>Creating Category Objects</para>
            <para>The Q_DECLARE_LOGGING_CATEGORY() and Q_LOGGING_CATEGORY() macros
            conveniently declare and create QLoggingCategory objects:</para>
            <para>// in a header</para>
            <para>Q_DECLARE_LOGGING_CATEGORY(driverUsb)</para>
            <para></para>
            <para>// in one source file</para>
            <para>Q_LOGGING_CATEGORY(driverUsb, &quot;driver.usb&quot;)</para>
            <para></para>
            <para>Checking Category Configuration</para>
            <para>QLoggingCategory provides isDebugEnabled(), isInfoEnabled(),
            isWarningEnabled(), isCriticalEnabled(), as well as isEnabled() to check
            whether messages for the given message type should be logged.</para>
            <para>Note: The qCDebug(), qCWarning(), qCCritical() macros prevent
            arguments from being evaluated if the respective message types are not
            enabled for the category, so explicit checking is not needed:</para>
            <para>    // usbEntries() will only be called if driverUsb category is
            enabled</para>
            <para>    qCDebug(driverUsb) &lt;&lt; &quot;devices: &quot; &lt;&lt;
            usbEntries();</para>
            <para></para>
            <para>Default Category Configuration</para>
            <para>Both the QLoggingCategory constructor and the
            Q_LOGGING_CATEGORY() macro accept an optional QtMsgType argument, which
            disables all message types with a lower severity. That is, a category
            declared with</para>
            <para>Q_LOGGING_CATEGORY(driverUsbEvents,
            &quot;driver.usb.events&quot;, QtWarningMsg)</para>
            <para>will log messages of type QtWarningMsg, QtCriticalMsg,
            QtFatalMsg, but will ignore messages of type QtDebugMsg and
            QtInfoMsg.</para>
            <para>If no argument is passed, all messages will be logged.</para>
            <para></para>
            <para>Configuring Categories</para>
            <para>The default configuration of categories can be overridden either
            by setting logging rules, or by installing a custom filter.</para>
            <para></para>
            <para>Logging Rules</para>
            <para>Logging rules allow logging for categories to be enabled or
            disabled in a flexible way. Rules are specified in text, where every line
            must have the format</para>
            <para>&lt;category&gt;[.&lt;type&gt;] = true|false</para>
            <para>&lt;category&gt; is the name of the category, potentially with *
            as a wildcard symbol as the first or last character (or at both positions).
            The optional &lt;type&gt; must be either debug, info, warning, or critical.
            Lines that do not fit this scheme are ignored.</para>
            <para>Rules are evaluated in text order, from first to last. That is,
            if two rules apply to a category/type, the rule that comes later is
            applied.</para>
            <para>Rules can be set via setFilterRules(). Since Qt 5.3, logging
            rules can also be set in the QT_LOGGING_RULES environment variable, and are
            automatically loaded from the [Rules] section of a logging configuration
            file. Such configuration files are looked up in the QtProject configuration
            directory, or explicitly set in a QT_LOGGING_CONF environment
            variable:</para>
            <para>[Rules]</para>
            <para>*.debug=false</para>
            <para>driver.usb.debug=true</para>
            <para>Rules set by setFilterRules() take precedence over rules
            specified in the QtProject configuration directory, and can, in turn, be
            overwritten by rules from the configuration file specified by
            QT_LOGGING_CONF, and rules set by QT_LOGGING_RULES.</para>
            <para>Order of evaluation:</para>
            <para></para>
            <para>QtProject/qtlogging.ini</para>
            <para>setFilterRules()</para>
            <para>QT_LOGGING_CONF</para>
            <para>QT_LOGGING_RULES</para>
            <para></para>
            <para>The QtProject/qtlogging.ini file is looked up in all directories
            returned by QStandardPaths::GenericConfigLocation, e.g.</para>
            <para></para>
            <para>on OS X and iOS: ~/Library/Preferences</para>
            <para>on Unix: ~/.config, /etc/xdg</para>
            <para>on Windows: %LOCALAPPDATA%, %ProgramData%,
            QCoreApplication::applicationDirPath(),
            QCoreApplication::applicationDirPath() + &quot;/data&quot;</para>
            <para></para>
            <para>Set the QT_LOGGING_DEBUG environment variable to see from where
            logging rules are loaded.</para>
            <para></para>
            <para>Installing a Custom Filter</para>
            <para>As a lower-level alternative to the text rules, you can also
            implement a custom filter via installFilter(). All filter rules are ignored
            in this case.</para>
            <para></para>
            <para>Printing the Category</para>
            <para>Use the %{category} placeholder to print the category in the
            default message handler:</para>
            <para>    qSetMessagePattern(&quot;%{category}
            %{message}&quot;);</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLoggingCategory.#ctor(System.String)">
            <summary>
            <para>Constructs a QLoggingCategory object with the provided category
            name. All message types for this category are enabled by default.</para>
            <para>If category is 0, the category name is changed to
            &quot;default&quot;.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLoggingCategory.#ctor(System.String,QtCore.QtMsgType)">
            <summary>
            <para>Constructs a QLoggingCategory object with the provided category
            name, and enables all messages with types more severe or equal than
            enableForLevel.</para>
            <para>If category is 0, the category name is changed to
            &quot;default&quot;.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLoggingCategory.IsEnabled(QtCore.QtMsgType)">
            <summary>
            <para>Returns true if a message of type msgtype for the category should
            be shown. Returns false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLoggingCategory.SetEnabled(QtCore.QtMsgType,System.Boolean)">
            <summary>
            <para>Changes the message type type for the category to enable.</para>
            <para>Note: Changes only affect the current QLoggingCategory object,
            and won't change the settings of other objects for the same category name.
            Use either setFilterRules() or installFilter() to change the configuration
            globally.</para>
            <para>Note: QtFatalMsg cannot be changed. It will always return
            true.</para>
            <para>See also isEnabled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLoggingCategory.InstallFilter(QtCore.QLoggingCategory.CategoryFilter)">
            <summary>
            <para>Installs a function filter that is used to determine which
            categories and message types should be enabled. Returns a pointer to the
            previous installed filter.</para>
            <para>Every QLoggingCategory object created is passed to the filter,
            and the filter is free to change the respective category configuration with
            setEnabled().</para>
            <para>The filter might be called concurrently from different threads,
            and therefore has to be reentrant.</para>
            <para>Example:</para>
            <para>QLoggingCategory::CategoryFilter oldCategoryFilter;</para>
            <para></para>
            <para>void myCategoryFilter(QLoggingCategory *category)</para>
            <para>{</para>
            <para>    // configure driver.usb category here, otherwise forward to
            to default filter.</para>
            <para>    if (qstrcmp(category-&gt;categoryName(),
            &quot;driver.usb&quot;) == 0)</para>
            <para>        category-&gt;setEnabled(QtDebugMsg, true);</para>
            <para>    else</para>
            <para>        oldCategoryFilter(category);</para>
            <para>}</para>
            <para>An alternative way of configuring the default filter is via
            setFilterRules().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLoggingCategory.SetFilterRules(System.String)">
            <summary>
            <para>Configures which categories and message types should be enabled
            through a a set of rules.</para>
            <para>Example:</para>
            <para>
            QLoggingCategory::setFilterRules(QStringLiteral(&quot;driver.usb.debug=true
            &quot;));</para>
            <para>Note: The rules might be ignored if a custom category filter is
            installed with installFilter(), or if the user defined QT_LOGGING_CONF or
            QT_LOGGING_RULES environment variable.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.IsDebugEnabled">
            <summary>
            <para>Returns true if debug messages should be shown for this category.
            Returns false otherwise.</para>
            <para>Note: The qCDebug() macro already does this check before
            executing any code. However, calling this method may be useful to avoid
            expensive generation of data that is only used for debug output.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.IsInfoEnabled">
            <summary>
            <para>Returns true if informational messages should be shown for this
            category. Returns false otherwise.</para>
            <para>Note: The qCInfo() macro already does this check before executing
            any code. However, calling this method may be useful to avoid expensive
            generation of data that is only used for debug output.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.IsWarningEnabled">
            <summary>
            <para>Returns true if warning messages should be shown for this
            category. Returns false otherwise.</para>
            <para>Note: The qCWarning() macro already does this check before
            executing any code. However, calling this method may be useful to avoid
            expensive generation of data that is only used for debug output.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.IsCriticalEnabled">
            <summary>
            <para>Returns true if critical messages should be shown for this
            category. Returns false otherwise.</para>
            <para>Note: The qCCritical() macro already does this check before
            executing any code. However, calling this method may be useful to avoid
            expensive generation of data that is only used for debug output.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.CategoryName">
            <summary>
            <para>Returns the name of the category.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLoggingCategory.DefaultCategory">
            <summary>
            <para>Returns a pointer to the global category &quot;default&quot; that
            is used e.g. by qDebug(), qInfo(), qWarning(), qCritical(),
            qFatal().</para>
            <para>Note: The returned pointer may be null during destruction of
            static objects.</para>
            <para>Note: Ownership of the category is not transferred, do not delete
            the returned pointer.</para>
            </summary>
        </member>
        <member name="T:QtCore.QProcessEnvironment">
            <summary>
            <para>The QProcessEnvironment class holds the environment variables
            that can be passed to a program.</para>
            </summary>
            <remarks>
            <para>A process's environment is composed of a set of key=value pairs
            known as environment variables. The QProcessEnvironment class wraps that
            concept and allows easy manipulation of those variables. It's meant to be
            used along with QProcess, to set the environment for child processes. It
            cannot be used to change the current process's environment.</para>
            <para>The environment of the calling process can be obtained using
            QProcessEnvironment::systemEnvironment().</para>
            <para>On Unix systems, the variable names are case-sensitive. Note that
            the Unix environment allows both variable names and contents to contain
            arbitrary binary data (except for the NUL character). QProcessEnvironment
            will preserve such variables, but does not support manipulating variables
            whose names or values are not encodable by the current locale settings (see
            QTextCodec::codecForLocale).</para>
            <para>On Windows, the variable names are case-insensitive, but
            case-preserving. QProcessEnvironment behaves accordingly.</para>
            <para>On Windows CE, the concept of environment does not exist. This
            class will keep the values set for compatibility with other platforms, but
            the values set will have no effect on the processes being created.</para>
            <para></para>
            <para>See also QProcess, QProcess::systemEnvironment(), and
            QProcess::setProcessEnvironment().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QProcessEnvironment.#ctor">
            <summary>
            <para>Creates a new QProcessEnvironment object. This constructor
            creates an empty environment. If set on a QProcess, this will cause the
            current environment variables to be removed.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.#ctor(QtCore.QProcessEnvironment)">
            <summary>
            <para>Creates a QProcessEnvironment object that is a copy of
            other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Swap(QtCore.QProcessEnvironment)">
            <summary>
            <para>Swaps this process environment instance with other. This function
            is very fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.op_Equality(QtCore.QProcessEnvironment,QtCore.QProcessEnvironment)">
            <summary>
            <para>Returns true if this and the other QProcessEnvironment objects
            are equal.</para>
            <para>Two QProcessEnvironment objects are considered equal if they have
            the same set of key=value pairs. The comparison of keys is done
            case-sensitive on platforms where the environment is case-sensitive.</para>
            <para>See also operator!=() and contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.op_Inequality(QtCore.QProcessEnvironment,QtCore.QProcessEnvironment)">
            <summary>
            <para>Returns true if this and the other QProcessEnvironment objects
            are different.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Clear">
            <summary>
            <para>Removes all key=value pairs from this QProcessEnvironment object,
            making it empty.</para>
            <para>See also isEmpty() and systemEnvironment().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Contains(System.String)">
            <summary>
            <para>Returns true if the environment variable of name name is found in
            this QProcessEnvironment object.</para>
            <para>See also insert() and value().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Insert(System.String,System.String)">
            <summary>
            <para>Inserts the environment variable of name name and contents value
            into this QProcessEnvironment object. If that variable already existed, it
            is replaced by the new value.</para>
            <para>On most systems, inserting a variable with no contents will have
            the same effect for applications as if the variable had not been set at
            all. However, to guarantee that there are no incompatibilities, to remove a
            variable, please use the remove() function.</para>
            <para>See also contains(), remove(), and value().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Remove(System.String)">
            <summary>
            <para>Removes the environment variable identified by name from this
            QProcessEnvironment object. If that variable did not exist before, nothing
            happens.</para>
            <para>See also contains(), insert(), and value().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Value(System.String,System.String)">
            <summary>
            <para>Searches this QProcessEnvironment object for a variable
            identified by name and returns its value. If the variable is not found in
            this object, then defaultValue is returned instead.</para>
            <para>See also contains(), insert(), and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.ToStringList">
            <summary>
            <para>Converts this QProcessEnvironment object into a list of strings,
            one for each environment variable that is set. The environment variable's
            name and its value are separated by an equal character ('=').</para>
            <para>The QStringList contents returned by this function are suitable
            for presentation. Use with the QProcess::setEnvironment function is not
            recommended due to potential encoding problems under Unix, and worse
            performance.</para>
            <para>See also systemEnvironment(), QProcess::systemEnvironment(),
            QProcess::environment(), and QProcess::setEnvironment().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcessEnvironment.Insert(QtCore.QProcessEnvironment)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the contents of e in this QProcessEnvironment object.
            Variables in this object that also exist in e will be overwritten.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcessEnvironment.IsEmpty">
            <summary>
            <para>Returns true if this QProcessEnvironment object is empty: that is
            there are no key=value pairs set.</para>
            <para>See also clear(), systemEnvironment(), and insert().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcessEnvironment.Keys">
            <summary>
            <para>Returns a list containing all the variable names in this
            QProcessEnvironment object.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcessEnvironment.SystemEnvironment">
            <summary>
            <para>The systemEnvironment function returns the environment of the
            calling process.</para>
            <para>It is returned as a QProcessEnvironment. This function does not
            cache the system environment. Therefore, it's possible to obtain an updated
            version of the environment if low-level C library functions like setenv ot
            putenv have been called.</para>
            <para>However, note that repeated calls to this function will recreate
            the QProcessEnvironment object, which is a non-trivial operation.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QProcess::systemEnvironment().</para>
            </summary>
        </member>
        <member name="T:QtCore.QProcess">
            <summary>
            <para>The QProcess class is used to start external programs and to
            communicate with them.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Running a Process</para>
            <para>To start a process, pass the name and command line arguments of
            the program you want to run as arguments to start(). Arguments are supplied
            as individual strings in a QStringList.</para>
            <para>Alternatively, you can set the program to run with setProgram()
            and setArguments(), and then call start() or open().</para>
            <para>For example, the following code snippet runs the analog clock
            example in the Fusion style on X11 platforms by passing strings containing
            &quot;-style&quot; and &quot;fusion&quot; as two items in the list of
            arguments:</para>
            <para>    QObject *parent;</para>
            <para>    ...</para>
            <para>    QString program =
            &quot;./path/to/Qt/examples/widgets/analogclock&quot;;</para>
            <para>    QStringList arguments;</para>
            <para>    arguments &lt;&lt; &quot;-style&quot; &lt;&lt;
            &quot;fusion&quot;;</para>
            <para></para>
            <para>    QProcess *myProcess = new QProcess(parent);</para>
            <para>    myProcess-&gt;start(program, arguments);</para>
            <para>QProcess then enters the Starting state, and when the program has
            started, QProcess enters the Running state and emits started().</para>
            <para>QProcess allows you to treat a process as a sequential I/O
            device. You can write to and read from the process just as you would access
            a network connection using QTcpSocket. You can then write to the process's
            standard input by calling write(), and read the standard output by calling
            read(), readLine(), and getChar(). Because it inherits QIODevice, QProcess
            can also be used as an input source for QXmlReader, or for generating data
            to be uploaded using QNetworkAccessManager.</para>
            <para>Note: On Windows CE, reading and writing to a process is not
            supported.</para>
            <para>When the process exits, QProcess reenters the NotRunning state
            (the initial state), and emits finished().</para>
            <para>The finished() signal provides the exit code and exit status of
            the process as arguments, and you can also call exitCode() to obtain the
            exit code of the last process that finished, and exitStatus() to obtain its
            exit status. If an error occurs at any point in time, QProcess will emit
            the error() signal. You can also call error() to find the type of error
            that occurred last, and state() to find the current process state.</para>
            <para></para>
            <para>Communicating via Channels</para>
            <para>Processes have two predefined output channels: The standard
            output channel (stdout) supplies regular console output, and the standard
            error channel (stderr) usually supplies the errors that are printed by the
            process. These channels represent two separate streams of data. You can
            toggle between them by calling setReadChannel(). QProcess emits readyRead()
            when data is available on the current read channel. It also emits
            readyReadStandardOutput() when new standard output data is available, and
            when new standard error data is available, readyReadStandardError() is
            emitted. Instead of calling read(), readLine(), or getChar(), you can
            explicitly read all data from either of the two channels by calling
            readAllStandardOutput() or readAllStandardError().</para>
            <para>The terminology for the channels can be misleading. Be aware that
            the process's output channels correspond to QProcess's read channels,
            whereas the process's input channels correspond to QProcess's write
            channels. This is because what we read using QProcess is the process's
            output, and what we write becomes the process's input.</para>
            <para>QProcess can merge the two output channels, so that standard
            output and standard error data from the running process both use the
            standard output channel. Call setProcessChannelMode() with MergedChannels
            before starting the process to activative this feature. You also have the
            option of forwarding the output of the running process to the calling, main
            process, by passing ForwardedChannels as the argument. It is also possible
            to forward only one of the output channels - typically one would use
            ForwardedErrorChannel, but ForwardedOutputChannel also exists. Note that
            using channel forwarding is typically a bad idea in GUI applications - you
            should present errors graphically instead.</para>
            <para>Certain processes need special environment settings in order to
            operate. You can set environment variables for your process by calling
            setEnvironment(). To set a working directory, call setWorkingDirectory().
            By default, processes are run in the current working directory of the
            calling process.</para>
            <para>The positioning and the screen Z-order of windows belonging to
            GUI applications started with QProcess are controlled by the underlying
            windowing system. For Qt 5 applications, the positioning can be specified
            using the -qwindowgeometry command line option; X11 applications generally
            accept a -geometry command line option.</para>
            <para>Note: On QNX, setting the working directory may cause all
            application threads, with the exception of the QProcess caller thread, to
            temporarily freeze during the spawning process, owing to a limitation in
            the operating system.</para>
            <para></para>
            <para>Synchronous Process API</para>
            <para>QProcess provides a set of functions which allow it to be used
            without an event loop, by suspending the calling thread until certain
            signals are emitted:</para>
            <para></para>
            <para>waitForStarted() blocks until the process has started.</para>
            <para>waitForReadyRead() blocks until new data is available for reading
            on the current read channel.</para>
            <para>waitForBytesWritten() blocks until one payload of data has been
            written to the process.</para>
            <para>waitForFinished() blocks until the process has finished.</para>
            <para></para>
            <para>Calling these functions from the main thread (the thread that
            calls QApplication::exec()) may cause your user interface to freeze.</para>
            <para>The following example runs gzip to compress the string &quot;Qt
            rocks!&quot;, without an event loop:</para>
            <para>    QProcess gzip;</para>
            <para>    gzip.start(&quot;gzip&quot;, QStringList() &lt;&lt;
            &quot;-c&quot;);</para>
            <para>    if (!gzip.waitForStarted())</para>
            <para>        return false;</para>
            <para></para>
            <para>    gzip.write(&quot;Qt rocks!&quot;);</para>
            <para>    gzip.closeWriteChannel();</para>
            <para></para>
            <para>    if (!gzip.waitForFinished())</para>
            <para>        return false;</para>
            <para></para>
            <para>    QByteArray result = gzip.readAll();</para>
            <para></para>
            <para>Notes for Windows Users</para>
            <para>Some Windows commands (for example, dir) are not provided by
            separate applications, but by the command interpreter itself. If you
            attempt to use QProcess to execute these commands directly, it won't work.
            One possible solution is to execute the command interpreter itself (cmd.exe
            on some Windows systems), and ask the interpreter to execute the desired
            command.</para>
            <para></para>
            <para>See also QBuffer, QFile, and QTcpSocket.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QProcess.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QProcess object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Start(System.String,QtCore.QStringList,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Starts the given program in a new process, passing the command
            line arguments in arguments.</para>
            <para>The QProcess object will immediately enter the Starting state. If
            the process starts successfully, QProcess will emit started(); otherwise,
            error() will be emitted.</para>
            <para>Note: Processes are started asynchronously, which means the
            started() and error() signals may be delayed. Call waitForStarted() to make
            sure the process has started (or has failed to start) and those signals
            have been emitted.</para>
            <para>Note: No further splitting of the arguments is performed.</para>
            <para>Windows: The arguments are quoted and joined into a command line
            that is compatible with the CommandLineToArgvW() Windows function. For
            programs that have different command line quoting requirements, you need to
            use setNativeArguments().</para>
            <para>The OpenMode is set to mode.</para>
            <para>If the QProcess object is already running a process, a warning
            may be printed at the console, and the existing process will continue
            running unaffected.</para>
            <para>See also processId(), started(), waitForStarted(), and
            setNativeArguments().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Start(System.String,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts the command command in a new process. The OpenMode is set
            to mode.</para>
            <para>command is a single string of text containing both the program
            name and its arguments. The arguments are separated by one or more spaces.
            For example:</para>
            <para>QProcess process;</para>
            <para>process.start(&quot;del /s *.txt&quot;);</para>
            <para>// same as process.start(&quot;del&quot;, QStringList() &lt;&lt;
            &quot;/s&quot; &lt;&lt; &quot;*.txt&quot;);</para>
            <para>...</para>
            <para>Arguments containing spaces must be quoted to be correctly
            supplied to the new process. For example:</para>
            <para>QProcess process;</para>
            <para>process.start(&quot;dir \&quot;My Documents\&quot;&quot;);</para>
            <para>Literal quotes in the command string are represented by triple
            quotes. For example:</para>
            <para>QProcess process;</para>
            <para>process.start(&quot;dir \&quot;Epic 12\&quot;\&quot;\&quot;
            Singles\&quot;&quot;);</para>
            <para>After the command string has been split and unquoted, this
            function behaves like the overload which takes the arguments as a string
            list.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Start(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts the program set by setProgram() with arguments set by
            setArguments(). The OpenMode is set to mode.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also open(), setProgram(), and setArguments().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Reimplemented from QIODevice::open().</para>
            <para>Starts the program set by setProgram() with arguments set by
            setArguments(). The OpenMode is set to mode.</para>
            <para>This method is an alias for start(), and exists only to fully
            implement the interface defined by QIODevice.</para>
            <para>See also start(), setProgram(), and setArguments().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.CloseReadChannel(QtCore.QProcess.ProcessChannel)">
            <summary>
            <para>Closes the read channel channel. After calling this function,
            QProcess will no longer receive data on the channel. Any data that has
            already been received is still available for reading.</para>
            <para>Call this function to save memory, if you are not interested in
            the output of the process.</para>
            <para>See also closeWriteChannel() and setReadChannel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.CloseWriteChannel">
            <summary>
            <para>Schedules the write channel of QProcess to be closed. The channel
            will close once all data has been written to the process. After calling
            this function, any attempts to write to the process will fail.</para>
            <para>Closing the write channel is necessary for programs that read
            input data until the channel has been closed. For example, the program
            &quot;more&quot; is used to display text data in a console on both Unix and
            Windows. But it will not display the text data until QProcess's write
            channel has been closed. Example:</para>
            <para>QProcess more;</para>
            <para>more.start(&quot;more&quot;);</para>
            <para>more.write(&quot;Text to display&quot;);</para>
            <para>more.closeWriteChannel();</para>
            <para>// QProcess will emit readyRead() once &quot;more&quot; starts
            printing</para>
            <para>The write channel is implicitly opened when start() is
            called.</para>
            <para>See also closeReadChannel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetStandardInputFile(System.String)">
            <summary>
            <para>Redirects the process' standard input to the file indicated by
            fileName. When an input redirection is in place, the QProcess object will
            be in read-only mode (calling write() will result in error).</para>
            <para>To make the process read EOF right away, pass nullDevice() here.
            This is cleaner than using closeWriteChannel() before writing any data,
            because it can be set up prior to starting the process.</para>
            <para>If the file fileName does not exist at the moment start() is
            called or is not readable, starting the process will fail.</para>
            <para>Calling setStandardInputFile() after the process has started has
            no effect.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setStandardOutputFile(), setStandardErrorFile(), and
            setStandardOutputProcess().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetStandardOutputFile(System.String,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Redirects the process' standard output to the file fileName. When
            the redirection is in place, the standard output read channel is closed:
            reading from it using read() will always fail, as will
            readAllStandardOutput().</para>
            <para>To discard all standard output from the process, pass
            nullDevice() here. This is more efficient than simply never reading the
            standard output, as no QProcess buffers are filled.</para>
            <para>If the file fileName doesn't exist at the moment start() is
            called, it will be created. If it cannot be created, the starting will
            fail.</para>
            <para>If the file exists and mode is QIODevice::Truncate, the file will
            be truncated. Otherwise (if mode is QIODevice::Append), the file will be
            appended to.</para>
            <para>Calling setStandardOutputFile() after the process has started has
            no effect.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setStandardInputFile(), setStandardErrorFile(), and
            setStandardOutputProcess().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetStandardErrorFile(System.String,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Redirects the process' standard error to the file fileName. When
            the redirection is in place, the standard error read channel is closed:
            reading from it using read() will always fail, as will
            readAllStandardError(). The file will be appended to if mode is Append,
            otherwise, it will be truncated.</para>
            <para>See setStandardOutputFile() for more information on how the file
            is opened.</para>
            <para>Note: if setProcessChannelMode() was called with an argument of
            QProcess::MergedChannels, this function has no effect.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setStandardInputFile(), setStandardOutputFile(), and
            setStandardOutputProcess().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetStandardOutputProcess(QtCore.QProcess)">
            <summary>
            <para>Pipes the standard output stream of this process to the
            destination process' standard input.</para>
            <para>The following shell command:</para>
            <para>command1 | command2</para>
            <para>Can be accomplished with QProcess with the following code:</para>
            <para>QProcess process1;</para>
            <para>QProcess process2;</para>
            <para></para>
            <para>process1.setStandardOutputProcess(&amp;process2);</para>
            <para></para>
            <para>process1.start(&quot;command1&quot;);</para>
            <para>process2.start(&quot;command2&quot;);</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.WaitForStarted(System.Int32)">
            <summary>
            <para>Blocks until the process has started and the started() signal has
            been emitted, or until msecs milliseconds have passed.</para>
            <para>Returns true if the process was started successfully; otherwise
            returns false (if the operation timed out or if an error occurred).</para>
            <para>This function can operate without an event loop. It is useful
            when writing non-GUI applications and when performing I/O operations in a
            non-GUI thread.</para>
            <para>Warning: Calling this function from the main (GUI) thread might
            cause your user interface to freeze.</para>
            <para>If msecs is -1, this function will not time out.</para>
            <para>Note: On some UNIX operating systems, this function may return
            true but the process may later report a QProcess::FailedToStart
            error.</para>
            <para>See also started(), waitForReadyRead(), waitForBytesWritten(),
            and waitForFinished().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.WaitForReadyRead(System.Int32)">
            <summary>
            <para>Reimplemented from QIODevice::waitForReadyRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.WaitForBytesWritten(System.Int32)">
            <summary>
            <para>Reimplemented from QIODevice::waitForBytesWritten().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.WaitForFinished(System.Int32)">
            <summary>
            <para>Blocks until the process has finished and the finished() signal
            has been emitted, or until msecs milliseconds have passed.</para>
            <para>Returns true if the process finished; otherwise returns false (if
            the operation timed out, if an error occurred, or if this QProcess is
            already finished).</para>
            <para>This function can operate without an event loop. It is useful
            when writing non-GUI applications and when performing I/O operations in a
            non-GUI thread.</para>
            <para>Warning: Calling this function from the main (GUI) thread might
            cause your user interface to freeze.</para>
            <para>If msecs is -1, this function will not time out.</para>
            <para>See also finished(), waitForStarted(), waitForReadyRead(), and
            waitForBytesWritten().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.ReadAllStandardOutput">
            <summary>
            <para>Regardless of the current read channel, this function returns all
            data available from the standard output of the process as a
            QByteArray.</para>
            <para>See also readyReadStandardOutput(), readAllStandardError(),
            readChannel(), and setReadChannel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.ReadAllStandardError">
            <summary>
            <para>Regardless of the current read channel, this function returns all
            data available from the standard error of the process as a
            QByteArray.</para>
            <para>See also readyReadStandardError(), readAllStandardOutput(),
            readChannel(), and setReadChannel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.ExitCode">
            <summary>
            <para>Returns the exit code of the last process that finished.</para>
            <para>This value is not valid unless exitStatus() returns
            NormalExit.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.exitStatus">
            <summary>
            <para>Returns the exit status of the last process that finished.</para>
            <para>On Windows, if the process was terminated with TerminateProcess()
            from another application, this function will still return NormalExit unless
            the exit code is less than 0.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.CanReadLine">
            <summary>
            <para>Reimplemented from QIODevice::canReadLine().</para>
            <para>This function operates on the current read channel.</para>
            <para>See also readChannel() and setReadChannel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Close">
            <summary>
            <para>Reimplemented from QIODevice::close().</para>
            <para>Closes all communication with the process and kills it. After
            calling this function, QProcess will no longer emit readyRead(), and data
            can no longer be read or written.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Terminate">
            <summary>
            <para>Attempts to terminate the process.</para>
            <para>The process may not exit as a result of calling this function (it
            is given the chance to prompt the user for any unsaved files, etc).</para>
            <para>On Windows, terminate() posts a WM_CLOSE message to all toplevel
            windows of the process and then to the main thread of the process itself.
            On Unix and OS X the SIGTERM signal is sent.</para>
            <para>Console applications on Windows that do not run an event loop, or
            whose event loop does not handle the WM_CLOSE message, can only be
            terminated by calling kill().</para>
            <para>See also kill().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Kill">
            <summary>
            <para>Kills the current process, causing it to exit immediately.</para>
            <para>On Windows, kill() uses TerminateProcess, and on Unix and OS X,
            the SIGKILL signal is sent to the process.</para>
            <para>See also terminate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetProcessState(QtCore.QProcess.ProcessState)">
            <summary>
            <para>Sets the current state of the QProcess to the state
            specified.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.SetupChildProcess">
            <summary>
            <para>This function is called in the child process context just before
            the program is executed on Unix or OS X (i.e., after fork(), but before
            execve()). Reimplement this function to do last minute initialization of
            the child process. Example:</para>
            <para>class SandboxProcess : public QProcess</para>
            <para>{</para>
            <para>    ...</para>
            <para> protected:</para>
            <para>     void setupChildProcess();</para>
            <para>    ...</para>
            <para>};</para>
            <para></para>
            <para>void SandboxProcess::setupChildProcess()</para>
            <para>{</para>
            <para>    // Drop all privileges in the child process, and enter</para>
            <para>    // a chroot jail.</para>
            <para>#if defined Q_OS_UNIX</para>
            <para>    ::setgroups(0, 0);</para>
            <para>    ::chroot(&quot;/etc/safe&quot;);</para>
            <para>    ::chdir(&quot;/&quot;);</para>
            <para>    ::setgid(safeGid);</para>
            <para>    ::setuid(safeUid);</para>
            <para>    ::umask(0);</para>
            <para>#endif</para>
            <para>}</para>
            <para>You cannot exit the process (by calling exit(), for instance)
            from this function. If you need to stop the program before it starts
            execution, your workaround is to emit finished() and then call
            exit().</para>
            <para>Warning: This function is called by QProcess on Unix and OS X
            only. On Windows and QNX, it is not called.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.ReadData(System.Char*,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::readData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.WriteData(System.String,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Execute(System.String,QtCore.QStringList)">
            <summary>
            <para>Starts the program program with the arguments arguments in a new
            process, waits for it to finish, and then returns the exit code of the
            process. Any data the new process writes to the console is forwarded to the
            calling process.</para>
            <para>The environment and working directory are inherited from the
            calling process.</para>
            <para>Argument handling is identical to the respective start()
            overload.</para>
            <para>If the process cannot be started, -2 is returned. If the process
            crashes, -1 is returned. Otherwise, the process' exit code is
            returned.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.Execute(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts the program command in a new process, waits for it to
            finish, and then returns the exit code.</para>
            <para>Argument handling is identical to the respective start()
            overload.</para>
            <para>After the command string has been split and unquoted, this
            function behaves like the overload which takes the arguments as a string
            list.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.StartDetached(System.String,QtCore.QStringList,System.String,System.Int64@)">
            <summary>
            <para>Starts the program program with the arguments arguments in a new
            process, and detaches from it. Returns true on success; otherwise returns
            false. If the calling process exits, the detached process will continue to
            run unaffected.</para>
            <para>Argument handling is identical to the respective start()
            overload.</para>
            <para>Unix: The started process will run in its own session and act
            like a daemon.</para>
            <para>The process will be started in the directory workingDirectory. If
            workingDirectory is empty, the working directory is inherited from the
            calling process.</para>
            <para>Note: On QNX, this may cause all application threads to
            temporarily freeze.</para>
            <para>If the function is successful then *pid is set to the process
            identifier of the started process.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.StartDetached(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts the command command in a new process, and detaches from
            it. Returns true on success; otherwise returns false.</para>
            <para>Argument handling is identical to the respective start()
            overload.</para>
            <para>After the command string has been split and unquoted, this
            function behaves like the overload which takes the arguments as a string
            list.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QProcess.StartDetached(System.String,QtCore.QStringList,System.String)">
            <summary>
            <para>Starts the program program with the arguments arguments in a new
            process, and detaches from it. Returns true on success; otherwise returns
            false. If the calling process exits, the detached process will continue to
            run unaffected.</para>
            <para>Argument handling is identical to the respective start()
            overload.</para>
            <para>Unix: The started process will run in its own session and act
            like a daemon.</para>
            <para>The process will be started in the directory workingDirectory. If
            workingDirectory is empty, the working directory is inherited from the
            calling process.</para>
            <para>Note: On QNX, this may cause all application threads to
            temporarily freeze.</para>
            <para>If the function is successful then *pid is set to the process
            identifier of the started process.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.Started">
            <summary>
            <para>This signal is emitted by QProcess when the process has started, and state() returns Running.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.Finished">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Use finished(int exitCode, QProcess::ExitStatus status) instead.</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.FinishedExitStatus">
            <summary>
            <para>This signal is emitted when the process finishes. exitCode is the exit code of the process (only valid for normal exits), and exitStatus is the exit status. After the process has finished, the buffers in QProcess are still intact. You can still read any data that the process may have written before it finished.</para>
            <para>See also exitStatus().</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.ErrorError">
            <summary>
            <para>This signal is emitted when an error occurs with the process. The specified error describes the type of error that occurred.</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.StateChanged">
            <summary>
            <para>This signal is emitted whenever the state of QProcess changes. The newState argument is the state QProcess changed to.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.ReadyReadStandardOutput">
            <summary>
            <para>This signal is emitted when the process has made new data available through its standard output channel (stdout). It is emitted regardless of the current read channel.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also readAllStandardOutput() and readChannel().</para>
            </summary>
        </member>
        <member name="E:QtCore.QProcess.ReadyReadStandardError">
            <summary>
            <para>This signal is emitted when the process has made new data available through its standard error channel (stderr). It is emitted regardless of the current read channel.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also readAllStandardError() and readChannel().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.Program">
            <summary>
            <para>Returns the program the process was last started with.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setProgram() and start().</para>
            <para></para>
            <para>Set the program to use when starting the process. This function
            must be called before start().</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also start(), setArguments(), and program().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.Arguments">
            <summary>
            <para>Returns the command line arguments the process was last started
            with.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setArguments() and start().</para>
            <para></para>
            <para>Set the arguments to pass to the called program when starting the
            process. This function must be called before start().</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also start(), setProgram(), and arguments().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.ReadChannelMode">
            <summary>
            <para>Returns the read channel mode of the QProcess. This function is
            equivalent to processChannelMode()</para>
            <para>See also setReadChannelMode() and processChannelMode().</para>
            <para></para>
            <para>Use setProcessChannelMode(mode) instead.</para>
            <para>See also readChannelMode() and setProcessChannelMode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.processChannelMode">
            <summary>
            <para>Returns the channel mode of the QProcess standard output and
            standard error channels.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setProcessChannelMode(), ProcessChannelMode, and
            setReadChannel().</para>
            <para></para>
            <para>Sets the channel mode of the QProcess standard output and
            standard error channels to the mode specified. This mode will be used the
            next time start() is called. For example:</para>
            <para>QProcess builder;</para>
            <para>builder.setProcessChannelMode(QProcess::MergedChannels);</para>
            <para>builder.start(&quot;make&quot;, QStringList() &lt;&lt;
            &quot;-j2&quot;);</para>
            <para></para>
            <para>if (!builder.waitForFinished())</para>
            <para>    qDebug() &lt;&lt; &quot;Make failed:&quot; &lt;&lt;
            builder.errorString();</para>
            <para>else</para>
            <para>    qDebug() &lt;&lt; &quot;Make output:&quot; &lt;&lt;
            builder.readAll();</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also processChannelMode(), ProcessChannelMode, and
            setReadChannel().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.inputChannelMode">
            <summary>
            <para>Returns the channel mode of the QProcess standard input
            channel.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setInputChannelMode() and InputChannelMode.</para>
            <para></para>
            <para>Sets the channel mode of the QProcess standard intput channel to
            the mode specified. This mode will be used the next time start() is
            called.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also inputChannelMode() and InputChannelMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.ReadChannel">
            <summary>
            <para>Returns the current read channel of the QProcess.</para>
            <para>See also setReadChannel().</para>
            <para></para>
            <para>Sets the current read channel of the QProcess to the given
            channel. The current input channel is used by the functions read(),
            readAll(), readLine(), and getChar(). It also determines which channel
            triggers QProcess to emit readyRead().</para>
            <para>See also readChannel().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.NativeArguments">
            <summary>
            <para>Returns the additional native command line arguments for the
            program.</para>
            <para>Note: This function is available only on the Windows
            platform.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setNativeArguments().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Sets additional native command line arguments for the
            program.</para>
            <para>On operating systems where the system API for passing command
            line arguments to a subprocess natively uses a single string, one can
            conceive command lines which cannot be passed via QProcess's portable
            list-based API. In such cases this function must be used to set a string
            which is appended to the string composed from the usual argument list, with
            a delimiting space.</para>
            <para>Note: This function is available only on the Windows
            platform.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also nativeArguments().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.WorkingDirectory">
            <summary>
            <para>If QProcess has been assigned a working directory, this function
            returns the working directory that the QProcess will enter before the
            program has started. Otherwise, (i.e., no directory has been assigned,) an
            empty string is returned, and QProcess will use the application's current
            working directory instead.</para>
            <para>See also setWorkingDirectory().</para>
            <para></para>
            <para>Sets the working directory to dir. QProcess will start the
            process in this directory. The default behavior is to start the process in
            the working directory of the calling process.</para>
            <para>Note: On QNX, this may cause all application threads to
            temporarily freeze.</para>
            <para>See also workingDirectory() and start().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.Environment">
            <summary>
            <para>Returns the environment that QProcess will pass to its child
            process, or an empty QStringList if no environment has been set using
            setEnvironment(). If no environment has been set, the environment of the
            calling process will be used.</para>
            <para>Note: The environment settings are ignored on Windows CE, as
            there is no concept of an environment.</para>
            <para>See also processEnvironment(), setEnvironment(), and
            systemEnvironment().</para>
            <para></para>
            <para>Sets the environment that QProcess will pass to the child
            process. The parameter environment is a list of key=value pairs.</para>
            <para>For example, the following code adds the environment variable
            TMPDIR:</para>
            <para>QProcess process;</para>
            <para>QStringList env = QProcess::systemEnvironment();</para>
            <para>env &lt;&lt; &quot;TMPDIR=C:\\MyApp\\temp&quot;; // Add an
            environment variable</para>
            <para>process.setEnvironment(env);</para>
            <para>process.start(&quot;myapp&quot;);</para>
            <para>Note: This function is less efficient than the
            setProcessEnvironment() function.</para>
            <para>See also environment(), setProcessEnvironment(), and
            systemEnvironment().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.ProcessEnvironment">
            <summary>
            <para>Returns the environment that QProcess will pass to its child
            process, or an empty object if no environment has been set using
            setEnvironment() or setProcessEnvironment(). If no environment has been
            set, the environment of the calling process will be used.</para>
            <para>Note: The environment settings are ignored on Windows CE, as
            there is no concept of an environment.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setProcessEnvironment(), setEnvironment(), and
            QProcessEnvironment::isEmpty().</para>
            <para></para>
            <para>Sets the environment that QProcess will pass to the child
            process.</para>
            <para>For example, the following code adds the environment variable
            TMPDIR:</para>
            <para>QProcess process;</para>
            <para>QProcessEnvironment env =
            QProcessEnvironment::systemEnvironment();</para>
            <para>env.insert(&quot;TMPDIR&quot;, &quot;C:\\MyApp\\temp&quot;); //
            Add an environment variable</para>
            <para>process.setProcessEnvironment(env);</para>
            <para>process.start(&quot;myapp&quot;);</para>
            <para>Note how, on Windows, environment variable names are
            case-insensitive.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also processEnvironment(),
            QProcessEnvironment::systemEnvironment(), and setEnvironment().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.BytesAvailable">
            <summary>
            <para>Reimplemented from QIODevice::bytesAvailable().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.BytesToWrite">
            <summary>
            <para>Reimplemented from QIODevice::bytesToWrite().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.IsSequential">
            <summary>
            <para>Reimplemented from QIODevice::isSequential().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.AtEnd">
            <summary>
            <para>Reimplemented from QIODevice::atEnd().</para>
            <para>Returns true if the process is not running, and no more data is
            available for reading; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.Error">
            <summary>
            <para>Returns the type of error that occurred last.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.State">
            <summary>
            <para>Returns the current state of the process.</para>
            <para>See also stateChanged() and error().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.ProcessId">
            <summary>
            <para>Returns the native process identifier for the running process, if
            available. If no process is currently running, 0 is returned.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.SystemEnvironment">
            <summary>
            <para>Returns the environment of the calling process as a list of
            key=value pairs. Example:</para>
            <para>QStringList environment = QProcess::systemEnvironment();</para>
            <para>// environment =
            {&quot;PATH=/usr/bin:/usr/local/bin&quot;,</para>
            <para>//                &quot;USER=greg&quot;,
            &quot;HOME=/home/greg&quot;}</para>
            <para>This function does not cache the system environment. Therefore,
            it's possible to obtain an updated version of the environment if low-level
            C library functions like setenv ot putenv have been called.</para>
            <para>However, note that repeated calls to this function will recreate
            the list of environment variables, which is a non-trivial operation.</para>
            <para>Note: For new code, it is recommended to use
            QProcessEnvironment::systemEnvironment()</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QProcessEnvironment::systemEnvironment(), environment(),
            and setEnvironment().</para>
            </summary>
        </member>
        <member name="P:QtCore.QProcess.NullDevice">
            <summary>
            <para>The null device of the operating system.</para>
            <para>The returned file path uses native directory separators.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also QProcess::setStandardInputFile(),
            QProcess::setStandardOutputFile(), and
            QProcess::setStandardErrorFile().</para>
            </summary>
        </member>
        <member name="T:QtCore.QProcess.ProcessError">
            <summary>
            <para>This enum describes the different types of errors that are
            reported by QProcess.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.FailedToStart">
            <summary>The process failed to start. Either the invoked program is missing, or you may have insufficient permissions to invoke the program.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.Crashed">
            <summary>The process crashed some time after starting successfully.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.Timedout">
            <summary>The last waitFor...() function timed out. The state of QProcess is unchanged, and you can try calling waitFor...() again.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.ReadError">
            <summary>An error occurred when attempting to read from the process. For example, the process may not be running.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.WriteError">
            <summary>An error occurred when attempting to write to the process. For example, the process may not be running, or it may have closed its input channel.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessError.UnknownError">
            <summary>An unknown error occurred. This is the default return value of error().</summary>
        </member>
        <member name="T:QtCore.QProcess.ProcessState">
            <summary>
            <para>This enum describes the different states of QProcess.</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessState.NotRunning">
            <summary>The process is not running.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessState.Starting">
            <summary>The process is starting, but the program has not yet been invoked.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessState.Running">
            <summary>The process is running and is ready for reading and writing.</summary>
        </member>
        <member name="T:QtCore.QProcess.ProcessChannel">
            <summary>
            <para>This enum describes the process channels used by the running
            process. Pass one of these values to setReadChannel() to set the current
            read channel of QProcess.</para>
            <para>See also setReadChannel().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannel.StandardOutput">
            <summary>The standard output (stdout) of the running process.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannel.StandardError">
            <summary>The standard error (stderr) of the running process.</summary>
        </member>
        <member name="T:QtCore.QProcess.ProcessChannelMode">
            <summary>
            <para>This enum describes the process output channel modes of QProcess.
            Pass one of these values to setProcessChannelMode() to set the current read
            channel mode.</para>
            <para>Note: Windows intentionally suppresses output from GUI-only
            applications to inherited consoles. This does not apply to output
            redirected to files or pipes. To forward the output of GUI-only
            applications on the console nonetheless, you must use SeparateChannels and
            do the forwarding yourself by reading the output and writing it to the
            appropriate output channels.</para>
            <para>See also setProcessChannelMode().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannelMode.SeparateChannels">
            <summary>QProcess manages the output of the running process, keeping standard output and standard error data in separate internal buffers. You can select the QProcess's current read channel by calling setReadChannel(). This is the default channel mode of QProcess.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannelMode.MergedChannels">
            <summary>QProcess merges the output of the running process into the standard output channel (stdout). The standard error channel (stderr) will not receive any data. The standard output and standard error data of the running process are interleaved.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannelMode.ForwardedChannels">
            <summary>QProcess forwards the output of the running process onto the main process. Anything the child process writes to its standard output and standard error will be written to the standard output and standard error of the main process.</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannelMode.ForwardedOutputChannel">
            <summary>Complementary to ForwardedErrorChannel. (This value was introduced in Qt 5.2.)</summary>
        </member>
        <member name="F:QtCore.QProcess.ProcessChannelMode.ForwardedErrorChannel">
            <summary>QProcess manages the standard output of the running process, but forwards its standard error onto the main process. This reflects the typical use of command line tools as filters, where the standard output is redirected to another process or a file, while standard error is printed to the console for diagnostic purposes. (This value was introduced in Qt 5.2.)</summary>
        </member>
        <member name="T:QtCore.QProcess.InputChannelMode">
            <summary>
            <para>This enum describes the process input channel modes of QProcess.
            Pass one of these values to setInputChannelMode() to set the current write
            channel mode.</para>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            <para>See also setInputChannelMode().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.InputChannelMode.ManagedInputChannel">
            <summary>QProcess manages the input of the running process. This is the default input channel mode of QProcess.</summary>
        </member>
        <member name="F:QtCore.QProcess.InputChannelMode.ForwardedInputChannel">
            <summary>QProcess forwards the input of the main process onto the running process. The child process reads its standard input from the same source as the main process. Note that the main process must not try to read its standard input while the child process is running.</summary>
        </member>
        <member name="T:QtCore.QProcess.ExitStatus">
            <summary>
            <para>This enum describes the different exit statuses of
            QProcess.</para>
            <para>See also exitStatus().</para>
            </summary>
        </member>
        <member name="F:QtCore.QProcess.ExitStatus.NormalExit">
            <summary>The process exited normally.</summary>
        </member>
        <member name="F:QtCore.QProcess.ExitStatus.CrashExit">
            <summary>The process crashed.</summary>
        </member>
        <member name="T:QtCore.QResource">
            <summary>
            <para>The QResource class provides an interface for reading directly
            from resources.</para>
            </summary>
            <remarks>
            <para>QResource is an object that represents a set of data (and
            possibly children) relating to a single resource entity. QResource gives
            direct access to the bytes in their raw format. In this way direct access
            allows reading data without buffer copying or indirection. Indirection is
            often useful when interacting with the resource entity as if it is a file,
            this can be achieved with QFile. The data and children behind a QResource
            are normally compiled into an application/library, but it is also possible
            to load a resource at runtime. When loaded at run time the resource file
            will be loaded as one big set of data and then given out in pieces via
            references into the resource tree.</para>
            <para>A QResource can either be loaded with an absolute path, either
            treated as a file system rooted with a / character, or in resource notation
            rooted with a : character. A relative resource can also be opened which
            will be found in the list of paths returned by QDir::searchPaths().</para>
            <para>A QResource that is representing a file will have data backing
            it, this data can possibly be compressed, in which case qUncompress() must
            be used to access the real data; this happens implicitly when accessed
            through a QFile. A QResource that is representing a directory will have
            only children and no data.</para>
            <para></para>
            <para>Dynamic Resource Loading</para>
            <para>A resource can be left out of an application's binary and loaded
            when it is needed at run-time by using the registerResource() function. The
            resource file passed into registerResource() must be a binary resource as
            created by rcc. Further information about binary resources can be found in
            The Qt Resource System documentation.</para>
            <para>This can often be useful when loading a large set of application
            icons that may change based on a setting, or that can be edited by a user
            and later recreated. The resource is immediately loaded into memory, either
            as a result of a single file read operation, or as a memory mapped
            file.</para>
            <para>This approach can prove to be a significant performance gain as
            only a single file will be loaded, and pieces of data will be given out via
            the path requested in setFileName().</para>
            <para>The unregisterResource() function removes a reference to a
            particular file. If there are QResource objects that currently reference
            resources related to the unregistered file, they will continue to be valid
            but the resource file itself will be removed from the resource roots, and
            thus no further QResource can be created pointing into this resource data.
            The resource itself will be unmapped from memory when the last QResource
            that points to it is destroyed.</para>
            <para></para>
            <para>See also The Qt Resource System, QFile, QDir, and
            QFileInfo.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QResource.#ctor(System.String,QtCore.QLocale)">
            <summary>
            <para>Constructs a QResource pointing to file. locale is used to load a
            specific localization of a resource data.</para>
            <para>See also QFileInfo, QDir::searchPaths(), setFileName(), and
            setLocale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QResource.AddSearchPath(System.String)">
            <summary>
            <para>Use QDir::addSearchPath() with a prefix instead.</para>
            <para>Adds path to the search paths searched in to find resources that
            are not specified with an absolute path. The path must be an absolute path
            (start with /).</para>
            <para>The default search path is to search only in the root (:/). The
            last path added will be consulted first upon next QResource
            creation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QResource.RegisterResource(System.String,System.String)">
            <summary>
            <para>Registers the resource with the given rccFileName at the location
            in the resource tree specified by mapRoot, and returns true if the file is
            successfully opened; otherwise returns false.</para>
            <para>See also unregisterResource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QResource.UnregisterResource(System.String,System.String)">
            <summary>
            <para>Unregisters the resource with the given rccFileName at the
            location in the resource tree specified by mapRoot, and returns true if the
            resource is successfully unloaded and no references exist for the resource;
            otherwise returns false.</para>
            <para>See also registerResource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QResource.RegisterResource(System.Byte*,System.String)">
            <summary>
            <para>Registers the resource with the given rccData at the location in
            the resource tree specified by mapRoot, and returns true if the file is
            successfully opened; otherwise returns false.</para>
            <para>Warning: The data must remain valid throughout the life of any
            QFile that may reference the resource data.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also unregisterResource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QResource.UnregisterResource(System.Byte*,System.String)">
            <summary>
            <para>Unregisters the resource with the given rccData at the location
            in the resource tree specified by mapRoot, and returns true if the resource
            is successfully unloaded and no references exist into the resource;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also registerResource().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.FileName">
            <summary>
            <para>Returns the full path to the file that this QResource represents
            as it was passed.</para>
            <para>See also setFileName() and absoluteFilePath().</para>
            <para></para>
            <para>Sets a QResource to point to file. file can either be absolute,
            in which case it is opened directly, if relative then the file will be
            tried to be found in QDir::searchPaths().</para>
            <para>See also fileName() and absoluteFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.Locale">
            <summary>
            <para>Returns the locale used to locate the data for the
            QResource.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets a QResource to only load the localization of resource to for
            locale. If a resource for the specific locale is not found then the C
            locale is used.</para>
            <para>See also locale() and setFileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.AbsoluteFilePath">
            <summary>
            <para>Returns the real path that this QResource represents, if the
            resource was found via the QDir::searchPaths() it will be indicated in the
            path.</para>
            <para>See also fileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.IsValid">
            <summary>
            <para>Returns true if the resource really exists in the resource
            hierarchy, false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.IsCompressed">
            <summary>
            <para>Returns true if the resource represents a file and the data
            backing it is in a compressed format, false otherwise.</para>
            <para>See also data() and isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.Size">
            <summary>
            <para>Returns the size of the data backing the resource.</para>
            <para>See also data() and isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.Data">
            <summary>
            <para>Returns direct access to a read only segment of data that this
            resource represents. If the resource is compressed the data returns is
            compressed and qUncompress() must be used to access the data. If the
            resource is a directory 0 is returned.</para>
            <para>See also size(), isCompressed(), and isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.SearchPaths">
            <summary>
            <para>Use QDir::searchPaths() instead.</para>
            <para>Returns the current search path list. This list is consulted when
            creating a relative resource.</para>
            <para>See also QDir::addSearchPath() and QDir::setSearchPaths().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.IsDir">
            <summary>
            <para>Returns true if the resource represents a directory and thus may
            have children() in it, false if it represents a file.</para>
            <para>See also isFile().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.IsFile">
            <summary>
            <para>Returns true if the resource represents a file and thus has data
            backing it, false if it represents a directory.</para>
            <para>See also isDir().</para>
            </summary>
        </member>
        <member name="P:QtCore.QResource.Children">
            <summary>
            <para>Returns a list of all resources in this directory, if the
            resource represents a file the list will be empty.</para>
            <para>See also isDir().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSaveFile">
            <summary>
            <para>The QSaveFile class provides an interface for safely writing to
            files.</para>
            </summary>
            <remarks>
            <para>QSaveFile is an I/O device for writing text and binary files,
            without losing existing data if the writing operation fails.</para>
            <para>While writing, the contents will be written to a temporary file,
            and if no error happened, commit() will move it to the final file. This
            ensures that no data at the final file is lost in case an error happens
            while writing, and no partially-written file is ever present at the final
            location. Always use QSaveFile when saving entire documents to disk.</para>
            <para>QSaveFile automatically detects errors while writing, such as the
            full partition situation, where write() cannot write all the bytes. It will
            remember that an error happened, and will discard the temporary file in
            commit().</para>
            <para>Much like with QFile, the file is opened with open(). Data is
            usually read and written using QDataStream or QTextStream, but you can also
            call the QIODevice-inherited functions read(), readLine(), readAll(),
            write().</para>
            <para>Unlike QFile, calling close() is not allowed. commit() replaces
            it. If commit() was not called and the QSaveFile instance is destroyed, the
            temporary file is discarded.</para>
            <para>To abort saving due to an application error, call
            cancelWriting(), so that even a call to commit() later on will not
            save.</para>
            <para></para>
            <para>See also QTextStream, QDataStream, QFileInfo, QDir, QFile, and
            QTemporaryFile.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSaveFile.#ctor(System.String)">
            <summary>
            <para>Constructs a new file object to represent the file with the given
            name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new file object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a new file object with the given parent to represent
            the file with the specified name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.SetFileName(System.String)">
            <summary>
            <para>Sets the name of the file. The name can have no path, a relative
            path, or an absolute path.</para>
            <para>See also QFile::setFileName() and fileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Reimplemented from QIODevice::open().</para>
            <para>Opens the file using OpenMode mode, returning true if successful;
            otherwise false.</para>
            <para>Important: the mode must include QIODevice::WriteOnly. It may
            also have additional flags, such as QIODevice::Text and
            QIODevice::Unbuffered.</para>
            <para>QIODevice::ReadWrite and QIODevice::Append are not supported at
            the moment.</para>
            <para>See also QIODevice::OpenMode and setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.Commit">
            <summary>
            <para>Commits the changes to disk, if all previous writes were
            successful.</para>
            <para>It is mandatory to call this at the end of the saving operation,
            otherwise the file will be discarded.</para>
            <para>If an error happened during writing, deletes the temporary file
            and returns false. Otherwise, renames it to the final fileName and returns
            true on success. Finally, closes the device.</para>
            <para>See also cancelWriting().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.CancelWriting">
            <summary>
            <para>Cancels writing the new file.</para>
            <para>If the application changes its mind while saving, it can call
            cancelWriting(), which sets an error code so that commit() will discard the
            temporary file.</para>
            <para>Alternatively, it can simply make sure not to call
            commit().</para>
            <para>Further write operations are possible after calling this method,
            but none of it will have any effect, the written file will be
            discarded.</para>
            <para>This method has no effect when direct write fallback is used.
            This is the case when saving over an existing file in a readonly directory:
            no temporary file can be created, so the existing file is overwritten no
            matter what, and cancelWriting() cannot do anything about that, the
            contents of the existing file will be lost.</para>
            <para>See also commit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.WriteData(System.String,System.Int64)">
            <summary>
            <para>Reimplemented from QIODevice::writeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSaveFile.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSaveFile.FileName">
            <summary>
            <para>Reimplemented from QFileDevice::fileName().</para>
            <para>Returns the name set by setFileName() or to the QSaveFile
            constructor.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSaveFile.DirectWriteFallback">
            <summary>
            <para>Returns true if the fallback solution for saving files in
            read-only directories is enabled.</para>
            <para>See also setDirectWriteFallback().</para>
            <para></para>
            <para>Allows writing over the existing file if necessary.</para>
            <para>QSaveFile creates a temporary file in the same directory as the
            final file and atomically renames it. However this is not possible if the
            directory permissions do not allow creating new files. In order to preserve
            atomicity guarantees, open() fails when it cannot create the temporary
            file.</para>
            <para>In order to allow users to edit files with write permissions in a
            directory with restricted permissions, call setDirectWriteFallback() with
            enabled set to true, and the following calls to open() will fallback to
            opening the existing file directly and writing into it, without the use of
            a temporary file. This does not have atomicity guarantees, i.e. an
            application crash or for instance a power failure could lead to a
            partially-written file on disk. It also means cancelWriting() has no
            effect, in such a case.</para>
            <para>Typically, to save documents edited by the user, call
            setDirectWriteFallback(true), and to save application internal files
            (configuration files, data files, ...), keep the default setting which
            ensures atomicity.</para>
            <para>See also directWriteFallback().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSettings">
             <summary>
             <para>The QSettings class provides persistent platform-independent
             application settings.</para>
             </summary>
             <remarks>
             <para>Users normally expect an application to remember its settings
             (window sizes and positions, options, etc.) across sessions. This
             information is often stored in the system registry on Windows, and in
             property list files on OS X and iOS. On Unix systems, in the absence of a
             standard, many applications (including the KDE applications) use INI text
             files.</para>
             <para>QSettings is an abstraction around these technologies, enabling
             you to save and restore application settings in a portable manner. It also
             supports custom storage formats.</para>
             <para>QSettings's API is based on QVariant, allowing you to save most
             value-based types, such as QString, QRect, and QImage, with the minimum of
             effort.</para>
             <para>If all you need is a non-persistent memory-based structure,
             consider using QMap&lt;QString, QVariant&gt; instead.</para>
             <para></para>
             <para>Basic Usage</para>
             <para>When creating a QSettings object, you must pass the name of your
             company or organization as well as the name of your application. For
             example, if your product is called Star Runner and your company is called
             MySoft, you would construct the QSettings object as follows:</para>
             <para>    QSettings settings(&quot;MySoft&quot;, &quot;Star
             Runner&quot;);</para>
             <para>QSettings objects can be created either on the stack or on the
             heap (i.e. using new). Constructing and destroying a QSettings object is
             very fast.</para>
             <para>If you use QSettings from many places in your application, you
             might want to specify the organization name and the application name using
             QCoreApplication::setOrganizationName() and
             QCoreApplication::setApplicationName(), and then use the default QSettings
             constructor:</para>
             <para>
             QCoreApplication::setOrganizationName(&quot;MySoft&quot;);</para>
             <para>
             QCoreApplication::setOrganizationDomain(&quot;mysoft.com&quot;);</para>
             <para>    QCoreApplication::setApplicationName(&quot;Star
             Runner&quot;);</para>
             <para>    ...</para>
             <para>    QSettings settings;</para>
             <para>(Here, we also specify the organization's Internet domain. When
             the Internet domain is set, it is used on OS X and iOS instead of the
             organization name, since OS X and iOS applications conventionally use
             Internet domains to identify themselves. If no domain is set, a fake domain
             is derived from the organization name. See the Platform-Specific Notes
             below for details.)</para>
             <para>QSettings stores settings. Each setting consists of a QString
             that specifies the setting's name (the key) and a QVariant that stores the
             data associated with the key. To write a setting, use setValue(). For
             example:</para>
             <para>    settings.setValue(&quot;editor/wrapMargin&quot;, 68);</para>
             <para>If there already exists a setting with the same key, the existing
             value is overwritten by the new value. For efficiency, the changes may not
             be saved to permanent storage immediately. (You can always call sync() to
             commit your changes.)</para>
             <para>You can get a setting's value back using value():</para>
             <para>    int margin =
             settings.value(&quot;editor/wrapMargin&quot;).toInt();</para>
             <para>If there is no setting with the specified name, QSettings returns
             a null QVariant (which can be converted to the integer 0). You can specify
             another default value by passing a second argument to value():</para>
             <para>    int margin = settings.value(&quot;editor/wrapMargin&quot;,
             80).toInt();</para>
             <para>To test whether a given key exists, call contains(). To remove
             the setting associated with a key, call remove(). To obtain the list of all
             keys, call allKeys(). To remove all keys, call clear().</para>
             <para></para>
             <para>QVariant and GUI Types</para>
             <para>Because QVariant is part of the Qt Core module, it cannot provide
             conversion functions to data types such as QColor, QImage, and QPixmap,
             which are part of Qt GUI. In other words, there is no toColor(), toImage(),
             or toPixmap() functions in QVariant.</para>
             <para>Instead, you can use the QVariant::value() or the qVariantValue()
             template function. For example:</para>
             <para>QSettings settings(&quot;MySoft&quot;, &quot;Star
             Runner&quot;);</para>
             <para>QColor color =
             settings.value(&quot;DataPump/bgcolor&quot;).value&lt;QColor&gt;();</para>
             <para>The inverse conversion (e.g., from QColor to QVariant) is
             automatic for all data types supported by QVariant, including GUI-related
             types:</para>
             <para>QSettings settings(&quot;MySoft&quot;, &quot;Star
             Runner&quot;);</para>
             <para>QColor color = palette().background().color();</para>
             <para>settings.setValue(&quot;DataPump/bgcolor&quot;, color);</para>
             <para>Custom types registered using qRegisterMetaType() and
             qRegisterMetaTypeStreamOperators() can be stored using QSettings.</para>
             <para></para>
             <para>Section and Key Syntax</para>
             <para>Setting keys can contain any Unicode characters. The Windows
             registry and INI files use case-insensitive keys, whereas the CFPreferences
             API on OS X and iOS uses case-sensitive keys. To avoid portability
             problems, follow these simple rules:</para>
             <para></para>
             <para>Always refer to the same key using the same case. For example, if
             you refer to a key as &quot;text fonts&quot; in one place in your code,
             don't refer to it as &quot;Text Fonts&quot; somewhere else.</para>
             <para>Avoid key names that are identical except for the case. For
             example, if you have a key called &quot;MainWindow&quot;, don't try to save
             another key as &quot;mainwindow&quot;.</para>
             <para>Do not use slashes ('/' and '\') in section or key names; the
             backslash character is used to separate sub keys (see below). On windows
             '\' are converted by QSettings to '/', which makes them identical.</para>
             <para></para>
             <para>You can form hierarchical keys using the '/' character as a
             separator, similar to Unix file paths. For example:</para>
             <para>    settings.setValue(&quot;mainwindow/size&quot;,
             win-&gt;size());</para>
             <para>    settings.setValue(&quot;mainwindow/fullScreen&quot;,
             win-&gt;isFullScreen());</para>
             <para>    settings.setValue(&quot;outputpanel/visible&quot;,
             panel-&gt;isVisible());</para>
             <para>If you want to save or restore many settings with the same
             prefix, you can specify the prefix using beginGroup() and call endGroup()
             at the end. Here's the same example again, but this time using the group
             mechanism:</para>
             <para>    settings.beginGroup(&quot;mainwindow&quot;);</para>
             <para>    settings.setValue(&quot;size&quot;, win-&gt;size());</para>
             <para>    settings.setValue(&quot;fullScreen&quot;,
             win-&gt;isFullScreen());</para>
             <para>    settings.endGroup();</para>
             <para></para>
             <para>    settings.beginGroup(&quot;outputpanel&quot;);</para>
             <para>    settings.setValue(&quot;visible&quot;,
             panel-&gt;isVisible());</para>
             <para>    settings.endGroup();</para>
             <para>If a group is set using beginGroup(), the behavior of most
             functions changes consequently. Groups can be set recursively.</para>
             <para>In addition to groups, QSettings also supports an
             &quot;array&quot; concept. See beginReadArray() and beginWriteArray() for
             details.</para>
             <para></para>
             <para>Fallback Mechanism</para>
             <para>Let's assume that you have created a QSettings object with the
             organization name MySoft and the application name Star Runner. When you
             look up a value, up to four locations are searched in that order:</para>
             <para></para>
             <para>a user-specific location for the Star Runner application</para>
             <para>a user-specific location for all applications by MySoft</para>
             <para>a system-wide location for the Star Runner application</para>
             <para>a system-wide location for all applications by MySoft</para>
             <para></para>
             <para>(See Platform-Specific Notes below for information on what these
             locations are on the different platforms supported by Qt.)</para>
             <para>If a key cannot be found in the first location, the search goes
             on in the second location, and so on. This enables you to store system-wide
             or organization-wide settings and to override them on a per-user or
             per-application basis. To turn off this mechanism, call
             setFallbacksEnabled(false).</para>
             <para>Although keys from all four locations are available for reading,
             only the first file (the user-specific location for the application at
             hand) is accessible for writing. To write to any of the other files, omit
             the application name and/or specify QSettings::SystemScope (as opposed to
             QSettings::UserScope, the default).</para>
             <para>Let's see with an example:</para>
             <para>    QSettings obj1(&quot;MySoft&quot;, &quot;Star
             Runner&quot;);</para>
             <para>    QSettings obj2(&quot;MySoft&quot;);</para>
             <para>    QSettings obj3(QSettings::SystemScope, &quot;MySoft&quot;,
             &quot;Star Runner&quot;);</para>
             <para>    QSettings obj4(QSettings::SystemScope,
             &quot;MySoft&quot;);</para>
             <para>The table below summarizes which QSettings objects access which
             location. &quot;X&quot; means that the location is the main location
             associated to the QSettings object and is used both for reading and for
             writing; &quot;o&quot; means that the location is used as a fallback when
             reading.</para>
             <para></para>
             <para> Locationsobj1obj2obj3obj4</para>
             <para>1. User, Application	X	</para>
             <para>2. User, Organization	o	X	</para>
             <para>3. System, Application	o	X	</para>
             <para>4. System, Organization	o	o	o	X</para>
             <para></para>
             <para>The beauty of this mechanism is that it works on all platforms
             supported by Qt and that it still gives you a lot of flexibility, without
             requiring you to specify any file names or registry paths.</para>
             <para>If you want to use INI files on all platforms instead of the
             native API, you can pass QSettings::IniFormat as the first argument to the
             QSettings constructor, followed by the scope, the organization name, and
             the application name:</para>
             <para>    QSettings settings(QSettings::IniFormat,
             QSettings::UserScope,</para>
             <para>                       &quot;MySoft&quot;, &quot;Star
             Runner&quot;);</para>
             <para>The Settings Editor example lets you experiment with different
             settings location and with fallbacks turned on or off.</para>
             <para></para>
             <para>Restoring the State of a GUI Application</para>
             <para>QSettings is often used to store the state of a GUI application.
             The following example illustrates how to use QSettings to save and restore
             the geometry of an application's main window.</para>
             <para>void MainWindow::writeSettings()</para>
             <para>{</para>
             <para>    QSettings settings(&quot;Moose Soft&quot;,
             &quot;Clipper&quot;);</para>
             <para></para>
             <para>    settings.beginGroup(&quot;MainWindow&quot;);</para>
             <para>    settings.setValue(&quot;size&quot;, size());</para>
             <para>    settings.setValue(&quot;pos&quot;, pos());</para>
             <para>    settings.endGroup();</para>
             <para>}</para>
             <para></para>
             <para>void MainWindow::readSettings()</para>
             <para>{</para>
             <para>    QSettings settings(&quot;Moose Soft&quot;,
             &quot;Clipper&quot;);</para>
             <para></para>
             <para>    settings.beginGroup(&quot;MainWindow&quot;);</para>
             <para>    resize(settings.value(&quot;size&quot;, QSize(400,
             400)).toSize());</para>
             <para>    move(settings.value(&quot;pos&quot;, QPoint(200,
             200)).toPoint());</para>
             <para>    settings.endGroup();</para>
             <para>}</para>
             <para>See Window Geometry for a discussion on why it is better to call
             QWidget::resize() and QWidget::move() rather than QWidget::setGeometry() to
             restore a window's geometry.</para>
             <para>The readSettings() and writeSettings() functions must be called
             from the main window's constructor and close event handler as
             follows:</para>
             <para>MainWindow::MainWindow()</para>
             <para>{</para>
             <para>    ...</para>
             <para>    readSettings();</para>
             <para>}</para>
             <para></para>
             <para>void MainWindow::closeEvent(QCloseEvent *event)</para>
             <para>{</para>
             <para>    if (userReallyWantsToQuit()) {</para>
             <para>        writeSettings();</para>
             <para>        event-&gt;accept();</para>
             <para>    } else {</para>
             <para>        event-&gt;ignore();</para>
             <para>    }</para>
             <para>}</para>
             <para>See the Application example for a self-contained example that
             uses QSettings.</para>
             <para></para>
             <para>Accessing Settings from Multiple Threads or Processes
             Simultaneously</para>
             <para>QSettings is reentrant. This means that you can use distinct
             QSettings object in different threads simultaneously. This guarantee stands
             even when the QSettings objects refer to the same files on disk (or to the
             same entries in the system registry). If a setting is modified through one
             QSettings object, the change will immediately be visible in any other
             QSettings objects that operate on the same location and that live in the
             same process.</para>
             <para>QSettings can safely be used from different processes (which can
             be different instances of your application running at the same time or
             different applications altogether) to read and write to the same system
             locations. It uses advisory file locking and a smart merging algorithm to
             ensure data integrity. Note that sync() imports changes made by other
             processes (in addition to writing the changes from this QSettings).</para>
             <para></para>
             <para>Platform-Specific Notes</para>
             <para></para>
             <para>Locations Where Application Settings Are Stored</para>
             <para>As mentioned in the Fallback Mechanism section, QSettings stores
             settings for an application in up to four locations, depending on whether
             the settings are user-specific or system-wide and whether the settings are
             application-specific or organization-wide. For simplicity, we're assuming
             the organization is called MySoft and the application is called Star
             Runner.</para>
             <para>On Unix systems, if the file format is NativeFormat, the
             following files are used by default:</para>
             <para></para>
             <para>$HOME/.config/MySoft/Star Runner.conf (Qt for Embedded Linux:
             $HOME/Settings/MySoft/Star Runner.conf)</para>
             <para>$HOME/.config/MySoft.conf (Qt for Embedded Linux:
             $HOME/Settings/MySoft.conf)</para>
             <para>/etc/xdg/MySoft/Star Runner.conf</para>
             <para>/etc/xdg/MySoft.conf</para>
             <para></para>
             <para>On Mac OS X versions 10.2 and 10.3, these files are used by
             default:</para>
             <para></para>
             <para>$HOME/Library/Preferences/com.MySoft.Star Runner.plist</para>
             <para>$HOME/Library/Preferences/com.MySoft.plist</para>
             <para>/Library/Preferences/com.MySoft.Star Runner.plist</para>
             <para>/Library/Preferences/com.MySoft.plist</para>
             <para></para>
             <para>On Windows, NativeFormat settings are stored in the following
             registry paths:</para>
             <para></para>
             <para>HKEY_CURRENT_USER\Software\MySoft\Star Runner</para>
             <para>HKEY_CURRENT_USER\Software\MySoft\OrganizationDefaults</para>
             <para>HKEY_LOCAL_MACHINE\Software\MySoft\Star Runner</para>
             <para>HKEY_LOCAL_MACHINE\Software\MySoft\OrganizationDefaults</para>
             <para></para>
             <para>Note: On Windows, for 32-bit programs running in WOW64 mode,
             settings are stored in the following registry path:
             HKEY_LOCAL_MACHINE\Software\WOW6432node.</para>
             <para>On BlackBerry only a single file is used (see Platform
             Limitations). If the file format is NativeFormat, this is
             &quot;Settings/MySoft/Star Runner.conf&quot; in the application's home
             directory.</para>
             <para>If the file format is IniFormat, the following files are used on
             Unix, OS X, and iOS:</para>
             <para></para>
             <para>$HOME/.config/MySoft/Star Runner.ini (Qt for Embedded Linux:
             $HOME/Settings/MySoft/Star Runner.ini)</para>
             <para>$HOME/.config/MySoft.ini (Qt for Embedded Linux:
             $HOME/Settings/MySoft.ini)</para>
             <para>/etc/xdg/MySoft/Star Runner.ini</para>
             <para>/etc/xdg/MySoft.ini</para>
             <para></para>
             <para>On Windows, the following files are used:</para>
             <para></para>
             <para>%APPDATA%\MySoft\Star Runner.ini</para>
             <para>%APPDATA%\MySoft.ini</para>
             <para>%COMMON_APPDATA%\MySoft\Star Runner.ini</para>
             <para>%COMMON_APPDATA%\MySoft.ini</para>
             <para></para>
             <para>The %APPDATA% path is usually C:\Documents and Settings\User
             Name\Application Data; the %COMMON_APPDATA% path is usually C:\Documents
             and Settings\All Users\Application Data.</para>
             <para>On BlackBerry only a single file is used (see Platform
             Limitations). If the file format is IniFormat, this is
             &quot;Settings/MySoft/Star Runner.ini&quot; in the application's home
             directory.</para>
             <para>The paths for the .ini and .conf files can be changed using
             setPath(). On Unix, OS X, and iOS the user can override them by setting the
             XDG_CONFIG_HOME environment variable; see setPath() for details.</para>
             <para></para>
             <para>Accessing INI and .plist Files Directly</para>
             <para>Sometimes you do want to access settings stored in a specific
             file or registry path. On all platforms, if you want to read an INI file
             directly, you can use the QSettings constructor that takes a file name as
             first argument and pass QSettings::IniFormat as second argument. For
             example:</para>
             <para>QSettings settings(&quot;/home/petra/misc/myapp.ini&quot;,</para>
             <para>                   QSettings::IniFormat);</para>
             <para>You can then use the QSettings object to read and write settings
             in the file.</para>
             <para>On OS X and iOS, you can access property list .plist files by
             passing QSettings::NativeFormat as second argument. For example:</para>
             <para>QSettings
             settings(&quot;/Users/petra/misc/myapp.plist&quot;,</para>
             <para>                   QSettings::NativeFormat);</para>
             <para></para>
             <para>Accessing the Windows Registry Directly</para>
             <para>On Windows, QSettings lets you access settings that have been
             written with QSettings (or settings in a supported format, e.g., string
             data) in the system registry. This is done by constructing a QSettings
             object with a path in the registry and QSettings::NativeFormat.</para>
             <para>For example:</para>
             <para>QSettings
             settings(&quot;HKEY_CURRENT_USER\\Software\\Microsoft\\Office&quot;,</para>
             <para>                   QSettings::NativeFormat);</para>
             <para>All the registry entries that appear under the specified path can
             be read or written through the QSettings object as usual (using forward
             slashes instead of backslashes). For example:</para>
            
             <para>settings.setValue(&quot;11.0/Outlook/Security/DontTrustInstalledFiles
             &quot;, 0);</para>
             <para>Note that the backslash character is, as mentioned, used by
             QSettings to separate subkeys. As a result, you cannot read or write
             windows registry entries that contain slashes or backslashes; you should
             use a native windows API if you need to do so.</para>
             <para></para>
             <para>Accessing Common Registry Settings on Windows</para>
             <para>On Windows, it is possible for a key to have both a value and
             subkeys. Its default value is accessed by using &quot;Default&quot; or
             &quot;.&quot; in place of a subkey:</para>
             <para>settings.setValue(&quot;HKEY_CURRENT_USER\\MySoft\\Star
             Runner\\Galaxy&quot;, &quot;Milkyway&quot;);</para>
             <para>settings.setValue(&quot;HKEY_CURRENT_USER\\MySoft\\Star
             Runner\\Galaxy\\Sun&quot;, &quot;OurStar&quot;);</para>
             <para>settings.value(&quot;HKEY_CURRENT_USER\\MySoft\\Star
             Runner\\Galaxy\\Default&quot;); // returns &quot;Milkyway&quot;</para>
             <para>On other platforms than Windows, &quot;Default&quot; and
             &quot;.&quot; would be treated as regular subkeys.</para>
             <para></para>
             <para>Platform Limitations</para>
             <para>While QSettings attempts to smooth over the differences between
             the different supported platforms, there are still a few differences that
             you should be aware of when porting your application:</para>
             <para></para>
             <para>The Windows system registry has the following limitations: A
             subkey may not exceed 255 characters, an entry's value may not exceed
             16,383 characters, and all the values of a key may not exceed 65,535
             characters. One way to work around these limitations is to store the
             settings using the IniFormat instead of the NativeFormat.</para>
             <para>On OS X and iOS, allKeys() will return some extra keys for global
             settings that apply to all applications. These keys can be read using
             value() but cannot be changed, only shadowed. Calling
             setFallbacksEnabled(false) will hide these global settings.</para>
             <para>On OS X and iOS, the CFPreferences API used by QSettings expects
             Internet domain names rather than organization names. To provide a uniform
             API, QSettings derives a fake domain name from the organization name
             (unless the organization name already is a domain name, e.g.
             OpenOffice.org). The algorithm appends &quot;.com&quot; to the company name
             and replaces spaces and other illegal characters with hyphens. If you want
             to specify a different domain name, call
             QCoreApplication::setOrganizationDomain(),
             QCoreApplication::setOrganizationName(), and
             QCoreApplication::setApplicationName() in your main() function and then use
             the default QSettings constructor. Another solution is to use preprocessor
             directives, for example:#ifdef Q_OS_MAC</para>
             <para>    QSettings settings(&quot;grenoullelogique.fr&quot;,
             &quot;Squash&quot;);</para>
             <para>#else</para>
             <para>    QSettings settings(&quot;Grenoulle Logique&quot;,
             &quot;Squash&quot;);</para>
             <para>#endif</para>
             <para></para>
             <para>On OS X, permissions to access settings not belonging to the
             current user (i.e. SystemScope) have changed with 10.7 (Lion). Prior to
             that version, users having admin rights could access these. For 10.7 and
             10.8 (Mountain Lion), only root can. However, 10.9 (Mavericks) changes that
             rule again but only for the native format (plist files).</para>
             <para>On the BlackBerry platform, applications run in a sandbox. They
             are not allowed to read or write outside of this sandbox. This involves the
             following limitations:</para>
             <para>As there is only a single scope the scope is simply ignored, i.e.
             there is no difference between SystemScope and UserScope.</para>
             <para>The Fallback Mechanism is not applied, i.e. only a single
             location is considered.</para>
             <para>It is advised against setting and using custom file paths.</para>
             <para></para>
             <para></para>
             <para></para>
             <para></para>
             <para>See also QVariant, QSessionManager, Settings Editor Example, and
             Application Example.</para>
             </remarks>
        </member>
        <member name="M:QtCore.QSettings.#ctor(System.String,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QSettings object for accessing settings of the
            application called application from the organization called organization,
            and with parent parent.</para>
            <para>Example:</para>
            <para>QSettings settings(&quot;Moose Tech&quot;,
            &quot;Facturo-Pro&quot;);</para>
            <para>The scope is set to QSettings::UserScope, and the format is set
            to QSettings::NativeFormat (i.e. calling setDefaultFormat() before calling
            this constructor has no effect).</para>
            <para>See also setDefaultFormat() and Fallback Mechanism.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.#ctor(QtCore.QSettings.Scope,System.String,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QSettings object for accessing settings of the
            application called application from the organization called organization,
            and with parent parent.</para>
            <para>If scope is QSettings::UserScope, the QSettings object searches
            user-specific settings first, before it searches system-wide settings as a
            fallback. If scope is QSettings::SystemScope, the QSettings object ignores
            user-specific settings and provides access to system-wide settings.</para>
            <para>The storage format is set to QSettings::NativeFormat (i.e.
            calling setDefaultFormat() before calling this constructor has no
            effect).</para>
            <para>If no application name is given, the QSettings object will only
            access the organization-wide locations.</para>
            <para>See also setDefaultFormat().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.#ctor(QtCore.QSettings.Format,QtCore.QSettings.Scope,System.String,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QSettings object for accessing settings of the
            application called application from the organization called organization,
            and with parent parent.</para>
            <para>If scope is QSettings::UserScope, the QSettings object searches
            user-specific settings first, before it searches system-wide settings as a
            fallback. If scope is QSettings::SystemScope, the QSettings object ignores
            user-specific settings and provides access to system-wide settings.</para>
            <para>If format is QSettings::NativeFormat, the native API is used for
            storing settings. If format is QSettings::IniFormat, the INI format is
            used.</para>
            <para>If no application name is given, the QSettings object will only
            access the organization-wide locations.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.#ctor(System.String,QtCore.QSettings.Format,QtCore.QObject)">
            <summary>
            <para>Constructs a QSettings object for accessing the settings stored
            in the file called fileName, with parent parent. If the file doesn't
            already exist, it is created.</para>
            <para>If format is QSettings::NativeFormat, the meaning of fileName
            depends on the platform. On Unix, fileName is the name of an INI file. On
            OS X and iOS, fileName is the name of a .plist file. On Windows, fileName
            is a path in the system registry.</para>
            <para>If format is QSettings::IniFormat, fileName is the name of an INI
            file.</para>
            <para>Warning: This function is provided for convenience. It works well
            for accessing INI or .plist files generated by Qt, but might fail on some
            syntaxes found in such files originated by other programs. In particular,
            be aware of the following limitations:</para>
            <para></para>
            <para>QSettings provides no way of reading INI &quot;path&quot;
            entries, i.e., entries with unescaped slash characters. (This is because
            these entries are ambiguous and cannot be resolved automatically.)</para>
            <para>In INI files, QSettings uses the @ character as a metacharacter
            in some contexts, to encode Qt-specific data types (e.g., @Rect), and might
            therefore misinterpret it when it occurs in pure INI files.</para>
            <para></para>
            <para>See also fileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.#ctor(QtCore.QObject)">
             <summary>
             <para>Constructs a QSettings object for accessing settings of the
             application and organization set previously with a call to
             QCoreApplication::setOrganizationName(),
             QCoreApplication::setOrganizationDomain(), and
             QCoreApplication::setApplicationName().</para>
             <para>The scope is QSettings::UserScope and the format is
             defaultFormat() (QSettings::NativeFormat by default). Use
             setDefaultFormat() before calling this constructor to change the default
             format used by this constructor.</para>
             <para>The code</para>
             <para>QSettings settings(&quot;Moose Soft&quot;,
             &quot;Facturo-Pro&quot;);</para>
             <para>is equivalent to</para>
             <para>QCoreApplication::setOrganizationName(&quot;Moose
             Soft&quot;);</para>
            
             <para>QCoreApplication::setApplicationName(&quot;Facturo-Pro&quot;);</para>
             <para>QSettings settings;</para>
             <para>If QCoreApplication::setOrganizationName() and
             QCoreApplication::setApplicationName() has not been previously called, the
             QSettings object will not be able to read or write any settings, and
             status() will return AccessError.</para>
             <para>On OS X and iOS, if both a name and an Internet domain are
             specified for the organization, the domain is preferred over the name. On
             other platforms, the name is preferred over the domain.</para>
             <para>See also QCoreApplication::setOrganizationName(),
             QCoreApplication::setOrganizationDomain(),
             QCoreApplication::setApplicationName(), and setDefaultFormat().</para>
             </summary>
        </member>
        <member name="M:QtCore.QSettings.Clear">
            <summary>
            <para>Removes all entries in the primary location associated to this
            QSettings object.</para>
            <para>Entries in fallback locations are not removed.</para>
            <para>If you only want to remove the entries in the current group(),
            use remove(&quot;&quot;) instead.</para>
            <para>See also remove() and setFallbacksEnabled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.Sync">
            <summary>
            <para>Writes any unsaved changes to permanent storage, and reloads any
            settings that have been changed in the meantime by another
            application.</para>
            <para>This function is called automatically from QSettings's destructor
            and by the event loop at regular intervals, so you normally don't need to
            call it yourself.</para>
            <para>See also status().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.BeginGroup(System.String)">
            <summary>
            <para>Appends prefix to the current group.</para>
            <para>The current group is automatically prepended to all keys
            specified to QSettings. In addition, query functions such as childGroups(),
            childKeys(), and allKeys() are based on the group. By default, no group is
            set.</para>
            <para>Groups are useful to avoid typing in the same setting paths over
            and over. For example:</para>
            <para>settings.beginGroup(&quot;mainwindow&quot;);</para>
            <para>settings.setValue(&quot;size&quot;, win-&gt;size());</para>
            <para>settings.setValue(&quot;fullScreen&quot;,
            win-&gt;isFullScreen());</para>
            <para>settings.endGroup();</para>
            <para></para>
            <para>settings.beginGroup(&quot;outputpanel&quot;);</para>
            <para>settings.setValue(&quot;visible&quot;,
            panel-&gt;isVisible());</para>
            <para>settings.endGroup();</para>
            <para>This will set the value of three settings:</para>
            <para></para>
            <para>mainwindow/size</para>
            <para>mainwindow/fullScreen</para>
            <para>outputpanel/visible</para>
            <para></para>
            <para>Call endGroup() to reset the current group to what it was before
            the corresponding beginGroup() call. Groups can be nested.</para>
            <para>See also endGroup() and group().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.EndGroup">
            <summary>
            <para>Resets the group to what it was before the corresponding
            beginGroup() call.</para>
            <para>Example:</para>
            <para>settings.beginGroup(&quot;alpha&quot;);</para>
            <para>// settings.group() == &quot;alpha&quot;</para>
            <para></para>
            <para>settings.beginGroup(&quot;beta&quot;);</para>
            <para>// settings.group() == &quot;alpha/beta&quot;</para>
            <para></para>
            <para>settings.endGroup();</para>
            <para>// settings.group() == &quot;alpha&quot;</para>
            <para></para>
            <para>settings.endGroup();</para>
            <para>// settings.group() == &quot;&quot;</para>
            <para>See also beginGroup() and group().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.BeginReadArray(System.String)">
            <summary>
            <para>Adds prefix to the current group and starts reading from an
            array. Returns the size of the array.</para>
            <para>Example:</para>
            <para>struct Login {</para>
            <para>    QString userName;</para>
            <para>    QString password;</para>
            <para>};</para>
            <para>QList&lt;Login&gt; logins;</para>
            <para>...</para>
            <para></para>
            <para>QSettings settings;</para>
            <para>int size = settings.beginReadArray(&quot;logins&quot;);</para>
            <para>for (int i = 0; i &lt; size; ++i) {</para>
            <para>    settings.setArrayIndex(i);</para>
            <para>    Login login;</para>
            <para>    login.userName =
            settings.value(&quot;userName&quot;).toString();</para>
            <para>    login.password =
            settings.value(&quot;password&quot;).toString();</para>
            <para>    logins.append(login);</para>
            <para>}</para>
            <para>settings.endArray();</para>
            <para>Use beginWriteArray() to write the array in the first
            place.</para>
            <para>See also beginWriteArray(), endArray(), and
            setArrayIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.BeginWriteArray(System.String,System.Int32)">
            <summary>
            <para>Adds prefix to the current group and starts writing an array of
            size size. If size is -1 (the default), it is automatically determined
            based on the indexes of the entries written.</para>
            <para>If you have many occurrences of a certain set of keys, you can
            use arrays to make your life easier. For example, let's suppose that you
            want to save a variable-length list of user names and passwords. You could
            then write:</para>
            <para>struct Login {</para>
            <para>    QString userName;</para>
            <para>    QString password;</para>
            <para>};</para>
            <para>QList&lt;Login&gt; logins;</para>
            <para>...</para>
            <para></para>
            <para>QSettings settings;</para>
            <para>settings.beginWriteArray(&quot;logins&quot;);</para>
            <para>for (int i = 0; i &lt; logins.size(); ++i) {</para>
            <para>    settings.setArrayIndex(i);</para>
            <para>    settings.setValue(&quot;userName&quot;,
            list.at(i).userName);</para>
            <para>    settings.setValue(&quot;password&quot;,
            list.at(i).password);</para>
            <para>}</para>
            <para>settings.endArray();</para>
            <para>The generated keys will have the form</para>
            <para></para>
            <para>logins/size</para>
            <para>logins/1/userName</para>
            <para>logins/1/password</para>
            <para>logins/2/userName</para>
            <para>logins/2/password</para>
            <para>logins/3/userName</para>
            <para>logins/3/password</para>
            <para>...</para>
            <para></para>
            <para>To read back an array, use beginReadArray().</para>
            <para>See also beginReadArray(), endArray(), and
            setArrayIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.EndArray">
            <summary>
            <para>Closes the array that was started using beginReadArray() or
            beginWriteArray().</para>
            <para>See also beginReadArray() and beginWriteArray().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetArrayIndex(System.Int32)">
            <summary>
            <para>Sets the current array index to i. Calls to functions such as
            setValue(), value(), remove(), and contains() will operate on the array
            entry at that index.</para>
            <para>You must call beginReadArray() or beginWriteArray() before you
            can call this function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetValue(System.String,QtCore.QVariant)">
            <summary>
            <para>Sets the value of setting key to value. If the key already
            exists, the previous value is overwritten.</para>
            <para>Note that the Windows registry and INI files use case-insensitive
            keys, whereas the CFPreferences API on OS X and iOS uses case-sensitive
            keys. To avoid portability problems, see the Section and Key Syntax
            rules.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;interval&quot;, 30);</para>
            <para>settings.value(&quot;interval&quot;).toInt();     // returns
            30</para>
            <para></para>
            <para>settings.setValue(&quot;interval&quot;, 6.55);</para>
            <para>settings.value(&quot;interval&quot;).toDouble();  // returns
            6.55</para>
            <para>See also value(), remove(), and contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.Value(System.String,QtCore.QVariant)">
            <summary>
            <para>Returns the value for setting key. If the setting doesn't exist,
            returns defaultValue.</para>
            <para>If no default value is specified, a default QVariant is
            returned.</para>
            <para>Note that the Windows registry and INI files use case-insensitive
            keys, whereas the CFPreferences API on OS X and iOS uses case-sensitive
            keys. To avoid portability problems, see the Section and Key Syntax
            rules.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;animal/snake&quot;, 58);</para>
            <para>settings.value(&quot;animal/snake&quot;, 1024).toInt();   //
            returns 58</para>
            <para>settings.value(&quot;animal/zebra&quot;, 1024).toInt();   //
            returns 1024</para>
            <para>settings.value(&quot;animal/zebra&quot;).toInt();         //
            returns 0</para>
            <para>See also setValue(), contains(), and remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.Remove(System.String)">
            <summary>
            <para>Removes the setting key and any sub-settings of key.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;ape&quot;);</para>
            <para>settings.setValue(&quot;monkey&quot;, 1);</para>
            <para>settings.setValue(&quot;monkey/sea&quot;, 2);</para>
            <para>settings.setValue(&quot;monkey/doe&quot;, 4);</para>
            <para></para>
            <para>settings.remove(&quot;monkey&quot;);</para>
            <para>QStringList keys = settings.allKeys();</para>
            <para>// keys: [&quot;ape&quot;]</para>
            <para>Be aware that if one of the fallback locations contains a setting
            with the same key, that setting will be visible after calling
            remove().</para>
            <para>If key is an empty string, all keys in the current group() are
            removed. For example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;ape&quot;);</para>
            <para>settings.setValue(&quot;monkey&quot;, 1);</para>
            <para>settings.setValue(&quot;monkey/sea&quot;, 2);</para>
            <para>settings.setValue(&quot;monkey/doe&quot;, 4);</para>
            <para></para>
            <para>settings.beginGroup(&quot;monkey&quot;);</para>
            <para>settings.remove(&quot;&quot;);</para>
            <para>settings.endGroup();</para>
            <para></para>
            <para>QStringList keys = settings.allKeys();</para>
            <para>// keys: [&quot;ape&quot;]</para>
            <para>Note that the Windows registry and INI files use case-insensitive
            keys, whereas the CFPreferences API on OS X and iOS uses case-sensitive
            keys. To avoid portability problems, see the Section and Key Syntax
            rules.</para>
            <para>See also setValue(), value(), and contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.Contains(System.String)">
            <summary>
            <para>Returns true if there exists a setting called key; returns false
            otherwise.</para>
            <para>If a group is set using beginGroup(), key is taken to be relative
            to that group.</para>
            <para>Note that the Windows registry and INI files use case-insensitive
            keys, whereas the CFPreferences API on OS X and iOS uses case-sensitive
            keys. To avoid portability problems, see the Section and Key Syntax
            rules.</para>
            <para>See also value() and setValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetIniCodec(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the codec for accessing INI files (including .conf files on
            Unix) to the QTextCodec for the encoding specified by codecName. Common
            values for codecName include &quot;ISO 8859-1&quot;, &quot;UTF-8&quot;, and
            &quot;UTF-16&quot;. If the encoding isn't recognized, nothing
            happens.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QTextCodec::codecForName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetSystemIniPath(System.String)">
            <summary>
            <para>Use setPath() instead.</para>
            <para>For example, if you have code like</para>
            <para>setSystemIniPath(path);</para>
            <para>you can rewrite it as</para>
            <para>setPath(QSettings::NativeFormat, QSettings::SystemScope,
            path);</para>
            <para>setPath(QSettings::IniFormat, QSettings::SystemScope,
            path);</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetUserIniPath(System.String)">
            <summary>
            <para>Use setPath() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSettings.SetPath(QtCore.QSettings.Format,QtCore.QSettings.Scope,System.String)">
            <summary>
            <para>Sets the path used for storing settings for the given format and
            scope, to path. The format can be a custom format.</para>
            <para>The table below summarizes the default values:</para>
            <para></para>
            <para> PlatformFormatScopePath</para>
            <para>Windows	IniFormat	UserScope	%APPDATA%</para>
            <para>SystemScope	%COMMON_APPDATA%</para>
            <para>Unix	NativeFormat, IniFormat	UserScope	$HOME/.config</para>
            <para>SystemScope	/etc/xdg</para>
            <para>Qt for Embedded Linux	NativeFormat, IniFormat	UserScope
            $HOME/Settings</para>
            <para>SystemScope	/etc/xdg</para>
            <para>OS X and iOS	IniFormat	UserScope	$HOME/.config</para>
            <para>SystemScope	/etc/xdg</para>
            <para></para>
            <para>The default UserScope paths on Unix, OS X, and iOS ($HOME/.config
            or $HOME/Settings) can be overridden by the user by setting the
            XDG_CONFIG_HOME environment variable. The default SystemScope paths on
            Unix, OS X, and iOS (/etc/xdg) can be overridden when building the Qt
            library using the configure script's -sysconfdir flag (see QLibraryInfo for
            details).</para>
            <para>Setting the NativeFormat paths on Windows, OS X, and iOS has no
            effect.</para>
            <para>Warning: This function doesn't affect existing QSettings
            objects.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also registerFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.FallbacksEnabled">
            <summary>
            <para>Returns true if fallbacks are enabled; returns false
            otherwise.</para>
            <para>By default, fallbacks are enabled.</para>
            <para>See also setFallbacksEnabled().</para>
            <para></para>
            <para>Sets whether fallbacks are enabled to b.</para>
            <para>By default, fallbacks are enabled.</para>
            <para>See also fallbacksEnabled().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.IniCodec">
            <summary>
            <para>Returns the codec that is used for accessing INI files. By
            default, no codec is used, so a null pointer is returned.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setIniCodec().</para>
            <para></para>
            <para>Sets the codec for accessing INI files (including .conf files on
            Unix) to codec. The codec is used for decoding any data that is read from
            the INI file, and for encoding any data that is written to the file. By
            default, no codec is used, and non-ASCII characters are encoded using
            standard INI escape sequences.</para>
            <para>Warning: The codec must be set immediately after creating the
            QSettings object, before accessing any data.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also iniCodec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.DefaultFormat">
            <summary>
            <para>Returns default file format used for storing settings for the
            QSettings(QObject *) constructor. If no default format is set,
            QSettings::NativeFormat is used.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setDefaultFormat() and format().</para>
            <para></para>
            <para>Sets the default file format to the given format, which is used
            for storing settings for the QSettings(QObject *) constructor.</para>
            <para>If no default format is set, QSettings::NativeFormat is used. See
            the documentation for the QSettings constructor you are using to see if
            that constructor will ignore this function.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also defaultFormat() and format().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.status">
            <summary>
            <para>Returns a status code indicating the first error that was met by
            QSettings, or QSettings::NoError if no error occurred.</para>
            <para>Be aware that QSettings delays performing some operations. For
            this reason, you might want to call sync() to ensure that the data stored
            in QSettings is written to disk before calling status().</para>
            <para>See also sync().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.Group">
            <summary>
            <para>Returns the current group.</para>
            <para>See also beginGroup() and endGroup().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.AllKeys">
            <summary>
            <para>Returns a list of all keys, including subkeys, that can be read
            using the QSettings object.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;fridge/color&quot;,
            QColor(Qt::white));</para>
            <para>settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));</para>
            <para>settings.setValue(&quot;sofa&quot;, true);</para>
            <para>settings.setValue(&quot;tv&quot;, false);</para>
            <para></para>
            <para>QStringList keys = settings.allKeys();</para>
            <para>// keys: [&quot;fridge/color&quot;, &quot;fridge/size&quot;,
            &quot;sofa&quot;, &quot;tv&quot;]</para>
            <para>If a group is set using beginGroup(), only the keys in the group
            are returned, without the group prefix:</para>
            <para>settings.beginGroup(&quot;fridge&quot;);</para>
            <para>keys = settings.allKeys();</para>
            <para>// keys: [&quot;color&quot;, &quot;size&quot;]</para>
            <para>See also childGroups() and childKeys().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.ChildKeys">
            <summary>
            <para>Returns a list of all top-level keys that can be read using the
            QSettings object.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;fridge/color&quot;,
            QColor(Qt::white));</para>
            <para>settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));</para>
            <para>settings.setValue(&quot;sofa&quot;, true);</para>
            <para>settings.setValue(&quot;tv&quot;, false);</para>
            <para></para>
            <para>QStringList keys = settings.childKeys();</para>
            <para>// keys: [&quot;sofa&quot;, &quot;tv&quot;]</para>
            <para>If a group is set using beginGroup(), the top-level keys in that
            group are returned, without the group prefix:</para>
            <para>settings.beginGroup(&quot;fridge&quot;);</para>
            <para>keys = settings.childKeys();</para>
            <para>// keys: [&quot;color&quot;, &quot;size&quot;]</para>
            <para>You can navigate through the entire setting hierarchy using
            childKeys() and childGroups() recursively.</para>
            <para>See also childGroups() and allKeys().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.ChildGroups">
            <summary>
            <para>Returns a list of all key top-level groups that contain keys that
            can be read using the QSettings object.</para>
            <para>Example:</para>
            <para>QSettings settings;</para>
            <para>settings.setValue(&quot;fridge/color&quot;,
            QColor(Qt::white));</para>
            <para>settings.setValue(&quot;fridge/size&quot;, QSize(32, 96));</para>
            <para>settings.setValue(&quot;sofa&quot;, true);</para>
            <para>settings.setValue(&quot;tv&quot;, false);</para>
            <para></para>
            <para>QStringList groups = settings.childGroups();</para>
            <para>// groups: [&quot;fridge&quot;]</para>
            <para>If a group is set using beginGroup(), the first-level keys in
            that group are returned, without the group prefix.</para>
            <para>settings.beginGroup(&quot;fridge&quot;);</para>
            <para>groups = settings.childGroups();</para>
            <para>// groups: []</para>
            <para>You can navigate through the entire setting hierarchy using
            childKeys() and childGroups() recursively.</para>
            <para>See also childKeys() and allKeys().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.IsWritable">
            <summary>
            <para>Returns true if settings can be written using this QSettings
            object; returns false otherwise.</para>
            <para>One reason why isWritable() might return false is if QSettings
            operates on a read-only file.</para>
            <para>Warning: This function is not perfectly reliable, because the
            file permissions can change at any time.</para>
            <para>See also fileName(), status(), and sync().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.FileName">
            <summary>
            <para>Returns the path where settings written using this QSettings
            object are stored.</para>
            <para>On Windows, if the format is QSettings::NativeFormat, the return
            value is a system registry path, not a file path.</para>
            <para>See also isWritable() and format().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.format">
            <summary>
            <para>Returns the format used for storing the settings.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also defaultFormat(), fileName(), scope(),
            organizationName(), and applicationName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.scope">
            <summary>
            <para>Returns the scope used for storing the settings.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also format(), organizationName(), and
            applicationName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.OrganizationName">
            <summary>
            <para>Returns the organization name used for storing the
            settings.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QCoreApplication::organizationName(), format(), scope(),
            and applicationName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSettings.ApplicationName">
            <summary>
            <para>Returns the application name used for storing the
            settings.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QCoreApplication::applicationName(), format(), scope(),
            and organizationName().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSettings.Status">
            <summary>
            <para>The following status values are possible:</para>
            <para>See also status().</para>
            </summary>
        </member>
        <member name="F:QtCore.QSettings.Status.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:QtCore.QSettings.Status.AccessError">
            <summary>An access error occurred (e.g. trying to write to a read-only file).</summary>
        </member>
        <member name="F:QtCore.QSettings.Status.FormatError">
            <summary>A format error occurred (e.g. loading a malformed INI file).</summary>
        </member>
        <member name="T:QtCore.QSettings.Format">
            <summary>
            <para>This enum type specifies the storage format used by
            QSettings.</para>
            <para>On Unix, NativeFormat and IniFormat mean the same thing, except
            that the file extension is different (.conf for NativeFormat, .ini for
            IniFormat).</para>
            <para>The INI file format is a Windows file format that Qt supports on
            all platforms. In the absence of an INI standard, we try to follow what
            Microsoft does, with the following exceptions:</para>
            <para></para>
            <para>If you store types that QVariant can't convert to QString (e.g.,
            QPoint, QRect, and QSize), Qt uses an @-based syntax to encode the type.
            For example:pos = @Point(100 100)</para>
            <para>To minimize compatibility issues, any @ that doesn't appear at
            the first position in the value or that isn't followed by a Qt type (Point,
            Rect, Size, etc.) is treated as a normal character.</para>
            <para></para>
            <para>Although backslash is a special character in INI files, most
            Windows applications don't escape backslashes (\) in file paths:windir =
            C:\Windows</para>
            <para>QSettings always treats backslash as a special character and
            provides no API for reading or writing such entries.</para>
            <para></para>
            <para>The INI file format has severe restrictions on the syntax of a
            key. Qt works around this by using % as an escape character in keys. In
            addition, if you save a top-level setting (a key with no slashes in it,
            e.g., &quot;someKey&quot;), it will appear in the INI file's
            &quot;General&quot; section. To avoid overwriting other keys, if you save
            something using a key such as &quot;General/someKey&quot;, the key will be
            located in the &quot;%General&quot; section, not in the &quot;General&quot;
            section.</para>
            <para>Following the philosophy that we should be liberal in what we
            accept and conservative in what we generate, QSettings will accept Latin-1
            encoded INI files, but generate pure ASCII files, where non-ASCII values
            are encoded using standard INI escape sequences. To make the INI files more
            readable (but potentially less compatible), call setIniCodec().</para>
            <para></para>
            <para>See also registerFormat() and setPath().</para>
            </summary>
        </member>
        <member name="F:QtCore.QSettings.Format.NativeFormat">
            <summary>Store the settings using the most appropriate storage format for the platform. On Windows, this means the system registry; on OS X and iOS, this means the CFPreferences API; on Unix, this means textual configuration files in INI format.</summary>
        </member>
        <member name="F:QtCore.QSettings.Format.IniFormat">
            <summary>Store the settings in INI files.</summary>
        </member>
        <member name="F:QtCore.QSettings.Format.InvalidFormat">
            <summary>Special value returned by registerFormat().</summary>
        </member>
        <member name="T:QtCore.QSettings.Scope">
            <summary>
            <para>This enum specifies whether settings are user-specific or shared
            by all users of the same system.</para>
            <para>See also setPath().</para>
            </summary>
        </member>
        <member name="F:QtCore.QSettings.Scope.UserScope">
            <summary>Store settings in a location specific to the current user (e.g., in the user's home directory).</summary>
        </member>
        <member name="F:QtCore.QSettings.Scope.SystemScope">
            <summary>Store settings in a global location, so that all users on the same machine access the same set of settings.</summary>
        </member>
        <member name="T:QtCore.QStandardPaths">
            <summary>
            <para>The QStandardPaths class provides methods for accessing standard
            paths.</para>
            </summary>
            <remarks>
            <para>This class contains functions to query standard locations on the
            local filesystem, for common tasks such as user-specific directories or
            system-wide configuration directories.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStandardPaths.WritableLocation(QtCore.QStandardPaths.StandardLocation)">
            <summary>
            <para>Returns the directory where files of type should be written to,
            or an empty string if the location cannot be determined.</para>
            <para>Note: The storage location returned can be a directory that does
            not exist; i.e., it may need to be created by the system or the
            user.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.StandardLocations(QtCore.QStandardPaths.StandardLocation)">
            <summary>
            <para>Returns all the directories where files of type belong.</para>
            <para>The list of directories is sorted from high to low priority,
            starting with writableLocation() if it can be determined. This list is
            empty if no locations for type are defined.</para>
            <para>See also writableLocation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.Locate(QtCore.QStandardPaths.StandardLocation,System.String,QtCore.QStandardPaths.LocateOption)">
            <summary>
            <para>Tries to find a file or directory called fileName in the standard
            locations for type.</para>
            <para>The full path to the first file or directory (depending on
            options) found is returned. If no such file or directory can be found, an
            empty string is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.LocateAll(QtCore.QStandardPaths.StandardLocation,System.String,QtCore.QStandardPaths.LocateOption)">
            <summary>
            <para>Tries to find all files or directories called fileName in the
            standard locations for type.</para>
            <para>The options flag allows to specify whether to look for files or
            directories.</para>
            <para>Returns the list of all the files that were found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.DisplayName(QtCore.QStandardPaths.StandardLocation)">
            <summary>
            <para>Returns a localized display name for the given location type or
            an empty QString if no relevant location can be found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.FindExecutable(System.String,QtCore.QStringList)">
            <summary>
            <para>Finds the executable named executableName in the paths specified
            by paths, or the system paths if paths is empty.</para>
            <para>On most operating systems the system path is determined by the
            PATH environment variable.</para>
            <para>The directories where to search for the executable can be set in
            the paths argument. To search in both your own paths and the system paths,
            call findExecutable twice, once with paths set and once with paths
            empty.</para>
            <para>Symlinks are not resolved, in order to preserve behavior for the
            case of executables whose behavior depends on the name they are invoked
            with.</para>
            <para>Note: On Windows, the usual executable extensions (from the
            PATHEXT environment variable) are automatically appended, so that for
            instance findExecutable(&quot;foo&quot;) will find foo.exe or foo.bat if
            present.</para>
            <para>Returns the absolute file path to the executable, or an empty
            string if not found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStandardPaths.FindExecutable(System.String)">
            <summary>
            <para>Finds the executable named executableName in the paths specified
            by paths, or the system paths if paths is empty.</para>
            <para>On most operating systems the system path is determined by the
            PATH environment variable.</para>
            <para>The directories where to search for the executable can be set in
            the paths argument. To search in both your own paths and the system paths,
            call findExecutable twice, once with paths set and once with paths
            empty.</para>
            <para>Symlinks are not resolved, in order to preserve behavior for the
            case of executables whose behavior depends on the name they are invoked
            with.</para>
            <para>Note: On Windows, the usual executable extensions (from the
            PATHEXT environment variable) are automatically appended, so that for
            instance findExecutable(&quot;foo&quot;) will find foo.exe or foo.bat if
            present.</para>
            <para>Returns the absolute file path to the executable, or an empty
            string if not found.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStandardPaths.TestModeEnabled">
            <summary>
            <para>If testMode is true, this enables a special &quot;test mode&quot;
            in QStandardPaths, which changes writable locations to point to test
            directories, in order to prevent auto tests from reading from or writing to
            the current user's configuration.</para>
            <para>This affects the locations into which test programs might write
            files: GenericDataLocation, DataLocation, ConfigLocation,
            GenericConfigLocation, AppConfigLocation, GenericCacheLocation,
            CacheLocation. Other locations are not affected.</para>
            <para>On Unix, XDG_DATA_HOME is set to ~/.qttest/share, XDG_CONFIG_HOME
            is set to ~/.qttest/config, and XDG_CACHE_HOME is set to
            ~/.qttest/cache.</para>
            <para>On OS X, data goes to ~/.qttest/Application Support, cache goes
            to ~/.qttest/Cache, and config goes to ~/.qttest/Preferences.</para>
            <para>On Windows, everything goes to a &quot;qttest&quot; directory
            under Application Data.</para>
            </summary>
        </member>
        <member name="T:QtCore.QStandardPaths.StandardLocation">
            <summary>
            <para>This enum describes the different locations that can be queried
            using methods such as QStandardPaths::writableLocation,
            QStandardPaths::standardLocations, and QStandardPaths::displayName.</para>
            <para>Some of the values in this enum represent a user configuration.
            Such enum values will return the same paths in different applications, so
            they could be used to share data with other applications. Other values are
            specific to this application. Each enum value in the table below describes
            whether it's application-specific or generic.</para>
            <para>Application-specific directories should be assumed to be
            unreachable by other applications. Therefore, files placed there might not
            be readable by other applications, even if run by the same user. On the
            other hand, generic directories should be assumed to be accessible by all
            applications run by this user, but should still be assumed to be
            unreachable by applications by other users.</para>
            <para>Data interchange with other users is out of the scope of
            QStandardPaths.</para>
            <para>The following table gives examples of paths on different
            operating systems. The first path is the writable path (unless noted).
            Other, additional paths, if any, represent non-writable locations.</para>
            <para></para>
            <para> Path typeOS XWindows</para>
            <para>DesktopLocation	&quot;~/Desktop&quot;
            &quot;C:/Users/&lt;USER&gt;/Desktop&quot;</para>
            <para>DocumentsLocation	&quot;~/Documents&quot;
            &quot;C:/Users/&lt;USER&gt;/Documents&quot;</para>
            <para>FontsLocation	&quot;/System/Library/Fonts&quot; (not writable)
            &quot;C:/Windows/Fonts&quot; (not writable)</para>
            <para>ApplicationsLocation	&quot;/Applications&quot; (not writable)
            &quot;C:/Users/&lt;USER&gt;/AppData/Roaming/Microsoft/Windows/Start
            Menu/Programs&quot;</para>
            <para>MusicLocation	&quot;~/Music&quot;
            &quot;C:/Users/&lt;USER&gt;/Music&quot;</para>
            <para>MoviesLocation	&quot;~/Movies&quot;
            &quot;C:/Users/&lt;USER&gt;/Videos&quot;</para>
            <para>PicturesLocation	&quot;~/Pictures&quot;
            &quot;C:/Users/&lt;USER&gt;/Pictures&quot;</para>
            <para>TempLocation	randomly generated by the OS
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/Temp&quot;</para>
            <para>HomeLocation	&quot;~&quot;
            &quot;C:/Users/&lt;USER&gt;&quot;</para>
            <para>DataLocation	&quot;~/Library/Application
            Support/&lt;APPNAME&gt;&quot;, &quot;/Library/Application
            Support/&lt;APPNAME&gt;&quot;. &quot;&lt;APPDIR&gt;/../Resources&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;,
            &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;, &quot;&lt;APPDIR&gt;&quot;,
            &quot;&lt;APPDIR&gt;/data&quot;</para>
            <para>CacheLocation	&quot;~/Library/Caches/&lt;APPNAME&gt;&quot;,
            &quot;/Library/Caches/&lt;APPNAME&gt;&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;/cache&quot;</para
            >
            <para>GenericDataLocation	&quot;~/Library/Application Support&quot;,
            &quot;/Library/Application Support&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local&quot;,
            &quot;C:/ProgramData&quot;</para>
            <para>RuntimeLocation	&quot;~/Library/Application Support&quot;
            &quot;C:/Users/&lt;USER&gt;&quot;</para>
            <para>ConfigLocation	&quot;~/Library/Preferences&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;,
            &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;</para>
            <para>GenericConfigLocation	&quot;~/Library/Preferences&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local&quot;,
            &quot;C:/ProgramData&quot;</para>
            <para>DownloadLocation	&quot;~/Downloads&quot;
            &quot;C:/Users/&lt;USER&gt;/Documents&quot;</para>
            <para>GenericCacheLocation	&quot;~/Library/Caches&quot;,
            &quot;/Library/Caches&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/cache&quot;</para>
            <para>AppDataLocation	&quot;~/Library/Application
            Support/&lt;APPNAME&gt;&quot;, &quot;/Library/Application
            Support/&lt;APPNAME&gt;&quot;. &quot;&lt;APPDIR&gt;/../Resources&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Roaming/&lt;APPNAME&gt;&quot;,
            &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;, &quot;&lt;APPDIR&gt;&quot;,
            &quot;&lt;APPDIR&gt;/data&quot;</para>
            <para>AppLocalDataLocation	&quot;~/Library/Application
            Support/&lt;APPNAME&gt;&quot;, &quot;/Library/Application
            Support/&lt;APPNAME&gt;&quot;. &quot;&lt;APPDIR&gt;/../Resources&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;,
            &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;, &quot;&lt;APPDIR&gt;&quot;,
            &quot;&lt;APPDIR&gt;/data&quot;</para>
            <para>AppConfigLocation
            &quot;~/Library/Preferences/&lt;APPNAME&gt;&quot;
            &quot;C:/Users/&lt;USER&gt;/AppData/Local/&lt;APPNAME&gt;&quot;,
            &quot;C:/ProgramData/&lt;APPNAME&gt;&quot;</para>
            <para></para>
            <para></para>
            <para> Path typeBlackberryLinux</para>
            <para>DesktopLocation	&quot;&lt;APPROOT&gt;/data&quot;
            &quot;~/Desktop&quot;</para>
            <para>DocumentsLocation	&quot;&lt;APPROOT&gt;/shared/documents&quot;
            &quot;~/Documents&quot;</para>
            <para>FontsLocation	&quot;/base/usr/fonts&quot; (not writable)
            &quot;~/.fonts&quot;</para>
            <para>ApplicationsLocation	not supported (directory not readable)
            &quot;~/.local/share/applications&quot;,
            &quot;/usr/local/share/applications&quot;,
            &quot;/usr/share/applications&quot;</para>
            <para>MusicLocation	&quot;&lt;APPROOT&gt;/shared/music&quot;
            &quot;~/Music&quot;</para>
            <para>MoviesLocation	&quot;&lt;APPROOT&gt;/shared/videos&quot;
            &quot;~/Videos&quot;</para>
            <para>PicturesLocation	&quot;&lt;APPROOT&gt;/shared/photos&quot;
            &quot;~/Pictures&quot;</para>
            <para>TempLocation	&quot;/var/tmp&quot;	&quot;/tmp&quot;</para>
            <para>HomeLocation	&quot;&lt;APPROOT&gt;/data&quot;
            &quot;~&quot;</para>
            <para>DataLocation	&quot;&lt;APPROOT&gt;/data&quot;,
            &quot;&lt;APPROOT&gt;/app/native/assets&quot;
            &quot;~/.local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/share/&lt;APPNAME&gt;&quot;</para>
            <para>CacheLocation	&quot;&lt;APPROOT&gt;/data/Cache&quot;
            &quot;~/.cache/&lt;APPNAME&gt;&quot;</para>
            <para>GenericDataLocation	&quot;&lt;APPROOT&gt;/shared/misc&quot;
            &quot;~/.local/share&quot;, &quot;/usr/local/share&quot;,
            &quot;/usr/share&quot;</para>
            <para>RuntimeLocation	&quot;/var/tmp&quot;
            &quot;/run/user/&lt;USER&gt;&quot;</para>
            <para>ConfigLocation	&quot;&lt;APPROOT&gt;/data/Settings&quot;
            &quot;~/.config&quot;, &quot;/etc/xdg&quot;</para>
            <para>GenericConfigLocation	&quot;&lt;APPROOT&gt;/data/Settings&quot;
            &quot;~/.config&quot;, &quot;/etc/xdg&quot;</para>
            <para>DownloadLocation	&quot;&lt;APPROOT&gt;/shared/downloads&quot;
            &quot;~/Downloads&quot;</para>
            <para>GenericCacheLocation	&quot;&lt;APPROOT&gt;/data/Cache&quot;
            (there is no shared cache)	&quot;~/.cache&quot;</para>
            <para>AppDataLocation	&quot;&lt;APPROOT&gt;/data&quot;,
            &quot;&lt;APPROOT&gt;/app/native/assets&quot;
            &quot;~/.local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/share/&lt;APPNAME&gt;&quot;</para>
            <para>AppLocalDataLocation	&quot;&lt;APPROOT&gt;/data&quot;,
            &quot;&lt;APPROOT&gt;/app/native/assets&quot;
            &quot;~/.local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/local/share/&lt;APPNAME&gt;&quot;,
            &quot;/usr/share/&lt;APPNAME&gt;&quot;</para>
            <para>AppConfigLocation	&quot;&lt;APPROOT&gt;/data/Settings&quot;
            &quot;~/.config/&lt;APPNAME&gt;&quot;,
            &quot;/etc/xdg/&lt;APPNAME&gt;&quot;</para>
            <para></para>
            <para></para>
            <para> Path typeAndroidiOS</para>
            <para>DesktopLocation	&quot;&lt;APPROOT&gt;/files&quot;
            &quot;&lt;APPROOT&gt;/&lt;APPDIR&gt;&quot; (not writable)</para>
            <para>DocumentsLocation	&quot;&lt;USER&gt;/Documents&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Documents&quot;
            &quot;&lt;APPROOT&gt;/Documents&quot;</para>
            <para>FontsLocation	&quot;/system/fonts&quot; (not writable)
            &quot;&lt;APPROOT&gt;/Documents/.fonts&quot;</para>
            <para>ApplicationsLocation	not supported (directory not readable)	not
            supported</para>
            <para>MusicLocation	&quot;&lt;USER&gt;/Music&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Music&quot;
            &quot;&lt;APPROOT&gt;/Documents/Music&quot;</para>
            <para>MoviesLocation	&quot;&lt;USER&gt;/Movies&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Movies&quot;
            &quot;&lt;APPROOT&gt;/Documents/Movies&quot;</para>
            <para>PicturesLocation	&quot;&lt;USER&gt;/Pictures&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Pictures&quot;
            &quot;&lt;APPROOT&gt;/Documents/Pictures&quot;,
            &quot;assets-library://&quot;</para>
            <para>TempLocation	&quot;&lt;APPROOT&gt;/cache&quot;
            &quot;&lt;APPROOT&gt;/tmp&quot;</para>
            <para>HomeLocation	&quot;&lt;APPROOT&gt;/files&quot;
            &quot;&lt;APPROOT&gt;/&lt;APPDIR&gt;&quot; (not writable)</para>
            <para>DataLocation	&quot;&lt;APPROOT&gt;/files&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;
            &quot;&lt;APPROOT&gt;/Library/Application Support&quot;</para>
            <para>CacheLocation	&quot;&lt;APPROOT&gt;/cache&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/cache&quot;
            &quot;&lt;APPROOT&gt;/Library/Caches&quot;</para>
            <para>GenericDataLocation	&quot;&lt;USER&gt;&quot;
            &quot;&lt;APPROOT&gt;/Documents&quot;</para>
            <para>RuntimeLocation	&quot;&lt;APPROOT&gt;/cache&quot;	not
            supported</para>
            <para>ConfigLocation	&quot;&lt;APPROOT&gt;/files/settings&quot;
            &quot;&lt;APPROOT&gt;/Documents&quot;</para>
            <para>GenericConfigLocation	&quot;&lt;APPROOT&gt;/files/settings&quot;
            (there is no shared settings)	&quot;&lt;APPROOT&gt;/Documents&quot;</para>
            <para>DownloadLocation	&quot;&lt;USER&gt;/Downloads&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/Downloads&quot;
            &quot;&lt;APPROOT&gt;/Documents/Download&quot;</para>
            <para>GenericCacheLocation	&quot;&lt;APPROOT&gt;/cache&quot; (there is
            no shared cache)	&quot;&lt;APPROOT&gt;/Library/Caches&quot;</para>
            <para>AppDataLocation	&quot;&lt;APPROOT&gt;/files&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;
            &quot;&lt;APPROOT&gt;/Library/Application Support&quot;</para>
            <para>AppConfigLocation	&quot;&lt;APPROOT&gt;/files/settings&quot;
            &quot;&lt;APPROOT&gt;/Documents&quot;</para>
            <para>AppLocalDataLocation	&quot;&lt;APPROOT&gt;/files&quot;,
            &quot;&lt;USER&gt;/&lt;APPNAME&gt;/files&quot;
            &quot;&lt;APPROOT&gt;/Library/Application Support&quot;</para>
            <para></para>
            <para>In the table above, &lt;APPNAME&gt; is usually the organization
            name, the application name, or both, or a unique name generated at
            packaging. Similarly, &lt;APPROOT&gt; is the location where this
            application is installed (often a sandbox). &lt;APPDIR&gt; is the directory
            containing the application executable.</para>
            <para>The paths above should not be relied upon, as they may change
            according to OS configuration, locale, or they may change in future Qt
            versions.</para>
            <para>Note: On Android, applications with open files on the external
            storage (&lt;USER&gt; locations), will be killed if the external storage is
            unmounted.</para>
            <para>Note: On iOS, if you do pass
            QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).last()
            as argument to QFileDialog::setDirectory(), a native image picker dialog
            will be used for accessing the user's photo album. The filename returned
            can be loaded using QFile and related APIs. This feature was added in Qt
            5.5.</para>
            <para>See also writableLocation(), standardLocations(), displayName(),
            locate(), and locateAll().</para>
            </summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.DesktopLocation">
            <summary>Returns the user's desktop directory. This is a generic value. On systems with no concept of a desktop.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.DocumentsLocation">
            <summary>Returns the directory containing user document files. This is a generic value. The returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.FontsLocation">
            <summary>Returns the directory containing user's fonts. This is a generic value. Note that installing fonts may require additional, platform-specific operations.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.ApplicationsLocation">
            <summary>Returns the directory containing the user applications (either executables, application bundles, or shortcuts to them). This is a generic value. Note that installing applications may require additional, platform-specific operations. Files, folders or shortcuts in this directory are platform-specific.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.MusicLocation">
            <summary>Returns the directory containing the user's music or other audio files. This is a generic value. If no directory specific for music files exists, a sensible fallback for storing user documents is returned.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.MoviesLocation">
            <summary>Returns the directory containing the user's movies and videos. This is a generic value. If no directory specific for movie files exists, a sensible fallback for storing user documents is returned.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.PicturesLocation">
            <summary>Returns the directory containing the user's pictures or photos. This is a generic value. If no directory specific for picture files exists, a sensible fallback for storing user documents is returned.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.TempLocation">
            <summary>Returns a directory where temporary files can be stored. The returned value might be application-specific, shared among other applications for this user, or even system-wide. The returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.HomeLocation">
            <summary>Returns the user's home directory (the same as QDir::homePath()). On Unix systems, this is equal to the HOME environment variable. This value might be generic or application-specific, but the returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.DataLocation">
            <summary>Returns the same value as AppLocalDataLocation. This enumeration value is deprecated. Using AppDataLocation is preferable since on Windows, the roaming path is recommended.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.CacheLocation">
            <summary>Returns a directory location where user-specific non-essential (cached) data should be written. This is an application-specific directory. The returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.GenericDataLocation">
            <summary>Returns a directory location where persistent data shared across applications can be stored. This is a generic value. The returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.RuntimeLocation">
            <summary>Returns a directory location where runtime communication files should be written, like Unix local sockets. This is a generic value. The returned path may be empty on some systems.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.ConfigLocation">
            <summary>Returns a directory location where user-specific configuration files should be written. This may be either a generic value or application-specific, and the returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.DownloadLocation">
            <summary>Returns a directory for user's downloaded files. This is a generic value. If no directory specific for downloads exists, a sensible fallback for storing user documents is returned.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.GenericCacheLocation">
            <summary>Returns a directory location where user-specific non-essential (cached) data, shared across applications, should be written. This is a generic value. Note that the returned path may be empty if the system has no concept of shared cache.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.GenericConfigLocation">
            <summary>Returns a directory location where user-specific configuration files shared between multiple applications should be written. This is a generic value and the returned path is never empty.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.AppDataLocation">
            <summary>Returns a directory location where persistent application data can be stored. This is an application-specific directory. To obtain a path to store data to be shared with other applications, use QStandardPaths::GenericDataLocation. The returned path is never empty. On the Windows operating system, this returns the roaming path. This enum value was added in Qt 5.4.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.AppConfigLocation">
            <summary>Returns a directory location where user-specific configuration files should be written. This is an application-specific directory, and the returned path is never empty. This enum value was added in Qt 5.5.</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.StandardLocation.AppLocalDataLocation">
            <summary>Returns the local settings path on the Windows operating system. On all other platforms, it returns the same value as AppDataLocation. This enum value was added in Qt 5.4.</summary>
        </member>
        <member name="T:QtCore.QStandardPaths.LocateOption">
            <summary>
            <para>This enum describes the different flags that can be used for
            controlling the behavior of QStandardPaths::locate and
            QStandardPaths::locateAll.</para>
            <para>The LocateOptions type is a typedef for
            QFlags&lt;LocateOption&gt;. It stores an OR combination of LocateOption
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QStandardPaths.LocateOption.LocateFile">
            <summary>return only files</summary>
        </member>
        <member name="F:QtCore.QStandardPaths.LocateOption.LocateDirectory">
            <summary>return only directories</summary>
        </member>
        <member name="T:QtCore.QStorageInfo">
            <summary>
            <para>Provides information about currently mounted storage and
            drives.</para>
            </summary>
            <remarks>
            <para>Allows retrieving information about the volume's space, its mount
            point, label, and filesystem name.</para>
            <para>You can create an instance of QStorageInfo by passing the path to
            the volume's mount point as a constructor parameter, or you can set it
            using the setPath() method. The static mountedVolumes() method can be used
            to get the list of all mounted filesystems.</para>
            <para>QStorageInfo always caches the retrieved information, but you can
            call refresh() to invalidate the cache.</para>
            <para>The following example retrieves the most common information about
            the root volume of the system, and prints information about it.</para>
            <para>    QStorageInfo storage = QStorageInfo::root();</para>
            <para></para>
            <para>    qDebug() &lt;&lt; storage.rootPath();</para>
            <para>    if (storage.isReadOnly())</para>
            <para>        qDebug() &lt;&lt; &quot;isReadOnly:&quot; &lt;&lt;
            storage.isReadOnly();</para>
            <para></para>
            <para>    qDebug() &lt;&lt; &quot;name:&quot; &lt;&lt;
            storage.name();</para>
            <para>    qDebug() &lt;&lt; &quot;fileSystemType:&quot; &lt;&lt;
            storage.fileSystemType();</para>
            <para>    qDebug() &lt;&lt; &quot;size:&quot; &lt;&lt;
            storage.bytesTotal()/1000/1000 &lt;&lt; &quot;MB&quot;;</para>
            <para>    qDebug() &lt;&lt; &quot;availableSize:&quot; &lt;&lt;
            storage.bytesAvailable()/1000/1000 &lt;&lt; &quot;MB&quot;;</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStorageInfo.#ctor">
            <summary>
            <para>Constructs an empty QStorageInfo object.</para>
            <para>Objects created with the default constructor will be invalid and
            therefore not ready for use.</para>
            <para>See also setPath(), isReady(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.#ctor(System.String)">
            <summary>
            <para>Constructs a new QStorageInfo object that gives information about
            the volume mounted at path.</para>
            <para>If you pass a directory or file, the QStorageInfo object will
            refer to the volume where this directory or file is located. You can check
            if the created object is correct using the isValid() method.</para>
            <para>The following example shows how to get the volume on which the
            application is located. It is recommended to always check that the volume
            is ready and valid.</para>
            <para>    QStorageInfo storage(qApp-&gt;applicationDirPath());</para>
            <para>    if (storage.isValid() &amp;&amp; storage.isReady()) {</para>
            <para>        // ...</para>
            <para>    }</para>
            <para>See also setPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.#ctor(QtCore.QDir)">
            <summary>
            <para>Constructs a new QStorageInfo object that gives information about
            the volume containing the dir folder.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.#ctor(QtCore.QStorageInfo)">
            <summary>
            <para>Constructs a new QStorageInfo object that is a copy of the other
            QStorageInfo object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.Swap(QtCore.QStorageInfo)">
            <summary>
            <para>Swaps this volume info with other. This function is very fast and
            never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.SetPath(System.String)">
            <summary>
            <para>Sets this QStorageInfo object to the filesystem mounted where
            path is located.</para>
            <para>path can either be a root path of the filesystem, a directory, or
            a file within that filesystem.</para>
            <para>See also rootPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.Refresh">
            <summary>
            <para>Resets QStorageInfo's internal cache.</para>
            <para>QStorageInfo caches information about storage to speed up
            performance. QStorageInfo retrieves information during object construction
            and/or when calling the setPath() method. You have to manually reset the
            cache by calling this function to update storage information.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.op_Equality(QtCore.QStorageInfo,QtCore.QStorageInfo)">
            <summary>
            <para>Returns true if the first QStorageInfo object refers to the same
            drive or volume as the second; otherwise it returns false.</para>
            <para>Note that the result of comparing two invalid QStorageInfo
            objects is always positive.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStorageInfo.op_Inequality(QtCore.QStorageInfo,QtCore.QStorageInfo)">
            <summary>
            <para>Returns true if the first QStorageInfo object refers to a
            different drive or volume than the second; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.RootPath">
            <summary>
            <para>Returns the mount point of the filesystem this QStorageInfo
            object represents.</para>
            <para>On Windows, it returns the volume letter in case the volume is
            not mounted to a directory.</para>
            <para>Note that the value returned by rootPath() is the real mount
            point of a volume, and may not be equal to the value passed to the
            constructor or setPath() method. For example, if you have only the root
            volume in the system, and pass '/directory' to setPath(), then this method
            will return '/'.</para>
            <para>See also setPath() and device().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.Device">
            <summary>
            <para>Returns the device for this volume.</para>
            <para>For example, on Unix filesystems (including OS X), this returns
            the devpath like /dev/sda0 for local storages. On Windows, it returns the
            UNC path starting with \\\\?\\ for local storages (in other words, the
            volume GUID).</para>
            <para>See also rootPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.FileSystemType">
            <summary>
            <para>Returns the type name of the filesystem.</para>
            <para>This is a platform-dependent function, and filesystem names can
            vary between different operating systems. For example, on Windows
            filesystems they can be named NTFS, and on Linux they can be named ntfs-3g
            or fuseblk.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.Name">
            <summary>
            <para>Returns the human-readable name of a filesystem, usually called
            label.</para>
            <para>Not all filesystems support this feature. In this case, the value
            returned by this method could be empty. An empty string is returned if the
            file system does not support labels, or if no label is set.</para>
            <para>On Linux, retrieving the volume's label requires udev to be
            present in the system.</para>
            <para>See also fileSystemType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.DisplayName">
            <summary>
            <para>Returns the volume's name, if available, or the root path if
            not.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.BytesTotal">
            <summary>
            <para>Returns the total volume size in bytes.</para>
            <para>Returns -1 if QStorageInfo object is not valid.</para>
            <para>See also bytesFree() and bytesAvailable().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.BytesFree">
            <summary>
            <para>Returns the number of free bytes in a volume. Note that if there
            are quotas on the filesystem, this value can be larger than the value
            returned by bytesAvailable().</para>
            <para>Returns -1 if QStorageInfo object is not valid.</para>
            <para>See also bytesTotal() and bytesAvailable().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.BytesAvailable">
            <summary>
            <para>Returns the size (in bytes) available for the current user. It
            returns the total size available if the user is the root user or a system
            administrator.</para>
            <para>This size can be less than or equal to the free size returned by
            bytesFree() function.</para>
            <para>Returns -1 if QStorageInfo object is not valid.</para>
            <para>See also bytesTotal() and bytesFree().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.IsRoot">
            <summary>
            <para>Returns true if this QStorageInfo represents the system root
            volume; false otherwise.</para>
            <para>On Unix filesystems, the root volume is a volume mounted on /. On
            Windows, the root volume is the volume where the OS is installed.</para>
            <para>See also root().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.IsReadOnly">
            <summary>
            <para>Returns true if the current filesystem is protected from writing;
            false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.IsReady">
            <summary>
            <para>Returns true if the current filesystem is ready to work; false
            otherwise. For example, false is returned if the CD volume is not
            inserted.</para>
            <para>Note that fileSystemType(), name(), bytesTotal(), bytesFree(),
            and bytesAvailable() will return invalid data until the volume is
            ready.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.IsValid">
            <summary>
            <para>Returns true if the QStorageInfo specified by rootPath exists and
            is mounted correctly.</para>
            <para>See also isReady().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStorageInfo.Root">
            <summary>
            <para>Returns a QStorageInfo object that represents the system root
            volume.</para>
            <para>On Unix systems this call returns the root ('/') volume; in
            Windows the volume where the operating system is installed.</para>
            <para>See also isRoot().</para>
            </summary>
        </member>
        <member name="T:QtCore.QTemporaryDir">
            <summary>
            <para>The QTemporaryDir class creates a unique directory for temporary
            use.</para>
            </summary>
            <remarks>
            <para>QTemporaryDir is used to create unique temporary dirs safely. The
            dir itself is created by the constructor. The name of the temporary
            directory is guaranteed to be unique (i.e., you are guaranteed to not
            overwrite an existing dir), and the directory will subsequently be removed
            upon destruction of the QTemporaryDir object. The directory name is either
            auto-generated, or created based on a template, which is passed to
            QTemporaryDir's constructor.</para>
            <para>Example:</para>
            <para>    // Within a function/method...</para>
            <para></para>
            <para>    QTemporaryDir dir;</para>
            <para>    if (dir.isValid()) {</para>
            <para>        // dir.path() returns the unique directory path</para>
            <para>    }</para>
            <para></para>
            <para>    // The QTemporaryDir destructor removes the temporary
            directory</para>
            <para>    // as it goes out of scope.</para>
            <para>It is very important to test that the temporary directory could
            be created, using isValid(). Do not use exists(), since a
            default-constructed QDir represents the current directory, which
            exists.</para>
            <para>The path to the temporary dir can be found by calling
            path().</para>
            <para>A temporary directory will have some static part of the name and
            some part that is calculated to be unique. The default path will be
            determined from QCoreApplication::applicationName() (otherwise qt_temp) and
            will be placed into the temporary path as returned by QDir::tempPath(). If
            you specify your own path, a relative path will not be placed in the
            temporary directory by default, but be relative to the current working
            directory. In all cases, a random string will be appended to the path in
            order to make it unique.</para>
            <para></para>
            <para>See also QDir::tempPath(), QDir, and QTemporaryFile.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTemporaryDir.#ctor">
            <summary>
            <para>Constructs a QTemporaryDir using as template the application name
            returned by QCoreApplication::applicationName() (otherwise qt_temp). The
            directory is stored in the system's temporary directory,
            QDir::tempPath().</para>
            <para>See also QDir::tempPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryDir.#ctor(System.String)">
            <summary>
            <para>Constructs a QTemporaryDir with a template of
            templatePath.</para>
            <para>If templatePath is a relative path, the path will be relative to
            the current working directory. You can use QDir::tempPath() to construct
            templatePath if you want use the system's temporary directory.</para>
            <para>If the templatePath ends with XXXXXX it will be used as the
            dynamic portion of the directory name, otherwise it will be appended.
            Unlike QTemporaryFile, XXXXXX in the middle of the template string is not
            supported.</para>
            <para>See also QDir::tempPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryDir.AutoRemove">
            <summary>
            <para>Returns true if the QTemporaryDir is in auto remove mode.
            Auto-remove mode will automatically delete the directory from disk upon
            destruction. This makes it very easy to create your QTemporaryDir object on
            the stack, fill it with files, do something with the files, and finally on
            function return it will automatically clean up after itself.</para>
            <para>Auto-remove is on by default.</para>
            <para>See also setAutoRemove() and remove().</para>
            <para></para>
            <para>Sets the QTemporaryDir into auto-remove mode if b is true.</para>
            <para>Auto-remove is on by default.</para>
            <para>See also autoRemove() and remove().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryDir.IsValid">
            <summary>
            <para>Returns true if the QTemporaryDir was created
            successfully.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryDir.Remove">
            <summary>
            <para>Removes the temporary directory, including all its
            contents.</para>
            <para>Returns true if removing was successful.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryDir.Path">
            <summary>
            <para>Returns the path to the temporary directory. Empty if the
            QTemporaryDir could not be created.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTemporaryFile">
            <summary>
            <para>The QTemporaryFile class is an I/O device that operates on
            temporary files.</para>
            </summary>
            <remarks>
            <para>QTemporaryFile is used to create unique temporary files safely.
            The file itself is created by calling open(). The name of the temporary
            file is guaranteed to be unique (i.e., you are guaranteed to not overwrite
            an existing file), and the file will subsequently be removed upon
            destruction of the QTemporaryFile object. This is an important technique
            that avoids data corruption for applications that store data in temporary
            files. The file name is either auto-generated, or created based on a
            template, which is passed to QTemporaryFile's constructor.</para>
            <para>Example:</para>
            <para>    // Within a function/method...</para>
            <para></para>
            <para>    QTemporaryFile file;</para>
            <para>    if (file.open()) {</para>
            <para>        // file.fileName() returns the unique file name</para>
            <para>    }</para>
            <para></para>
            <para>    // The QTemporaryFile destructor removes the temporary
            file</para>
            <para>    // as it goes out of scope.</para>
            <para>Reopening a QTemporaryFile after calling close() is safe. For as
            long as the QTemporaryFile object itself is not destroyed, the unique
            temporary file will exist and be kept open internally by
            QTemporaryFile.</para>
            <para>The file name of the temporary file can be found by calling
            fileName(). Note that this is only defined after the file is first opened;
            the function returns an empty string before this.</para>
            <para>A temporary file will have some static part of the name and some
            part that is calculated to be unique. The default filename will be
            determined from QCoreApplication::applicationName() (otherwise qt_temp) and
            will be placed into the temporary path as returned by QDir::tempPath(). If
            you specify your own filename, a relative file path will not be placed in
            the temporary directory by default, but be relative to the current working
            directory.</para>
            <para>Specified filenames can contain the following template XXXXXX
            (six upper case &quot;X&quot; characters), which will be replaced by the
            auto-generated portion of the filename. Note that the template is case
            sensitive. If the template is not present in the filename, QTemporaryFile
            appends the generated part to the filename given.</para>
            <para></para>
            <para>See also QDir::tempPath() and QFile.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTemporaryFile.#ctor">
            <summary>
            <para>Constructs a QTemporaryFile using as file template the
            application name returned by QCoreApplication::applicationName() (otherwise
            qt_temp) followed by &quot;.XXXXXX&quot;. The file is stored in the
            system's temporary directory, QDir::tempPath().</para>
            <para>See also setFileTemplate() and QDir::tempPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.#ctor(System.String)">
            <summary>
            <para>Constructs a QTemporaryFile with a template filename of
            templateName. Upon opening the temporary file this will be used to create a
            unique filename.</para>
            <para>If the templateName does not contain XXXXXX it will automatically
            be appended and used as the dynamic portion of the filename.</para>
            <para>If templateName is a relative path, the path will be relative to
            the current working directory. You can use QDir::tempPath() to construct
            templateName if you want use the system's temporary directory.</para>
            <para>See also open() and fileTemplate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QTemporaryFile (with the given parent) using as file
            template the application name returned by
            QCoreApplication::applicationName() (otherwise qt_temp) followed by
            &quot;.XXXXXX&quot;. The file is stored in the system's temporary
            directory, QDir::tempPath().</para>
            <para>See also setFileTemplate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QTemporaryFile with a template filename of
            templateName and the specified parent. Upon opening the temporary file this
            will be used to create a unique filename.</para>
            <para>If the templateName does not contain XXXXXX it will automatically
            be appended and used as the dynamic portion of the filename.</para>
            <para>If templateName is a relative path, the path will be relative to
            the current working directory. You can use QDir::tempPath() to construct
            templateName if you want use the system's temporary directory.</para>
            <para>See also open() and fileTemplate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.Open">
            <summary>
            <para>A QTemporaryFile will always be opened in QIODevice::ReadWrite
            mode, this allows easy access to the data in the file. This function will
            return true upon success and will set the fileName() to the unique filename
            used.</para>
            <para>See also fileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.Open(QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Reimplemented from QIODevice::open().</para>
            <para>Creates a unique file name for the temporary file, and opens it.
            You can get the unique name later by calling fileName(). The file is
            guaranteed to have been created by this function (i.e., it has never
            existed before).</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.CreateLocalFile(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Use QTemporaryFile::createNativeFile(const QString &amp;fileName)
            instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.CreateLocalFile(QtCore.QFile)">
            <summary>
            <para>Use QTemporaryFile::createNativeFile(QFile &amp;file)
            instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.CreateNativeFile(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Works on the given fileName rather than an existing QFile
            object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTemporaryFile.CreateNativeFile(QtCore.QFile)">
            <summary>
            <para>If file is not already a native file, then a QTemporaryFile is
            created in QDir::tempPath(), the contents of file is copied into it, and a
            pointer to the temporary file is returned. Does nothing and returns 0 if
            file is already a native file.</para>
            <para>For example:</para>
            <para>QFile f(&quot;:/resources/file.txt&quot;);</para>
            <para>QTemporaryFile::createNativeFile(f); // Returns a pointer to a
            temporary file</para>
            <para></para>
            <para>QFile f(&quot;/users/qt/file.txt&quot;);</para>
            <para>QTemporaryFile::createNativeFile(f); // Returns 0</para>
            <para>See also QFileInfo::isNativePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryFile.AutoRemove">
            <summary>
            <para>Returns true if the QTemporaryFile is in auto remove mode.
            Auto-remove mode will automatically delete the filename from disk upon
            destruction. This makes it very easy to create your QTemporaryFile object
            on the stack, fill it with data, read from it, and finally on function
            return it will automatically clean up after itself.</para>
            <para>Auto-remove is on by default.</para>
            <para>See also setAutoRemove() and remove().</para>
            <para></para>
            <para>Sets the QTemporaryFile into auto-remove mode if b is
            true.</para>
            <para>Auto-remove is on by default.</para>
            <para>See also autoRemove() and remove().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryFile.FileTemplate">
            <summary>
            <para>Returns the set file template. The default file template will be
            called qcoreappname.XXXXXX and be placed in QDir::tempPath().</para>
            <para>See also setFileTemplate().</para>
            <para></para>
            <para>Sets the static portion of the file name to name. If the file
            template ends in XXXXXX that will automatically be replaced with the unique
            part of the filename, otherwise a filename will be determined automatically
            based on the static portion specified.</para>
            <para>If name contains a relative file path, the path will be relative
            to the current working directory. You can use QDir::tempPath() to construct
            name if you want use the system's temporary directory.</para>
            <para>See also fileTemplate().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTemporaryFile.FileName">
            <summary>
            <para>Reimplemented from QFileDevice::fileName().</para>
            <para>Returns the complete unique filename backing the QTemporaryFile
            object. This string is null before the QTemporaryFile is opened, afterwards
            it will contain the fileTemplate() plus additional characters to make it
            unique.</para>
            <para>See also fileTemplate().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtCore.QUrl" -->
        <member name="M:QtCore.QUrl.#ctor">
            <summary>
            <para>Constructs an empty QUrl object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.#ctor(QtCore.QUrl)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QUrl.#ctor(System.String,QtCore.QUrl.ParsingMode)" -->
        <member name="M:QtCore.QUrl.Swap(QtCore.QUrl)">
            <summary>
            <para>Swaps URL other with this URL. This operation is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetUrl(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Parses url and sets this object to that value. QUrl will
            automatically percent encode all characters that are not allowed in a URL
            and decode the percent-encoded sequences that represent an unreserved
            character (letters, digits, hyphens, undercores, dots and tildes). All
            other characters are left in their original forms.</para>
            <para>Parses the url using the parser mode parsingMode. In TolerantMode
            (the default), QUrl will correct certain mistakes, notably the presence of
            a percent character ('%') not followed by two hexadecimal digits, and it
            will accept any character in any position. In StrictMode, encoding mistakes
            will not be tolerated and QUrl will also check that certain forbidden
            characters are not present in unencoded form. If an error is detected in
            StrictMode, isValid() will return false. The parsing mode DecodedMode is
            not permitted in this context and will produce a run-time warning.</para>
            <para>See also url() and toString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Clear">
            <summary>
            <para>Resets the content of the QUrl. After calling this function, the
            QUrl is equal to one that has been constructed with the default empty
            constructor.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetAuthority(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the authority of the URL to authority.</para>
            <para>The authority of a URL is the combination of user info, a host
            name and a port. All of these elements are optional; an empty authority is
            therefore valid.</para>
            <para>The user info and host are separated by a '@', and the host and
            port are separated by a ':'. If the user info is empty, the '@' must be
            omitted; although a stray ':' is permitted if the port is empty.</para>
            <para>The following example shows a valid authority string:</para>
            <para></para>
            <para>The authority data is interpreted according to mode: in
            StrictMode, any '%' characters must be followed by exactly two hexadecimal
            characters and some characters (including space) are not allowed in
            undecoded form. In TolerantMode (the default), all characters are accepted
            in undecoded form and the tolerant parser will correct stray '%' not
            followed by two hex characters.</para>
            <para>This function does not allow mode to be QUrl::DecodedMode. To set
            fully decoded data, call setUserName(), setPassword(), setHost() and
            setPort() individually.</para>
            <para>See also authority(), setUserInfo(), setHost(), and
            setPort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Authority(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the authority of the URL if it is defined; otherwise an
            empty string is returned.</para>
            <para>This function returns an unambiguous value, which may contain
            that characters still percent-encoded, plus some control sequences not
            representable in decoded form in QString.</para>
            <para>The options argument controls how to format the user info
            component. The value of QUrl::FullyDecoded is not permitted in this
            function. If you need to obtain fully decoded data, call userName(),
            password(), host() and port() individually.</para>
            <para>See also setAuthority(), userInfo(), userName(), password(),
            host(), and port().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetUserInfo(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the user info of the URL to userInfo. The user info is an
            optional part of the authority of the URL, as described in
            setAuthority().</para>
            <para>The user info consists of a user name and optionally a password,
            separated by a ':'. If the password is empty, the colon must be omitted.
            The following example shows a valid user info string:</para>
            <para></para>
            <para>The userInfo data is interpreted according to mode: in
            StrictMode, any '%' characters must be followed by exactly two hexadecimal
            characters and some characters (including space) are not allowed in
            undecoded form. In TolerantMode (the default), all characters are accepted
            in undecoded form and the tolerant parser will correct stray '%' not
            followed by two hex characters.</para>
            <para>This function does not allow mode to be QUrl::DecodedMode. To set
            fully decoded data, call setUserName() and setPassword()
            individually.</para>
            <para>See also userInfo(), setUserName(), setPassword(), and
            setAuthority().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.UserInfo(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the user info of the URL, or an empty string if the user
            info is undefined.</para>
            <para>This function returns an unambiguous value, which may contain
            that characters still percent-encoded, plus some control sequences not
            representable in decoded form in QString.</para>
            <para>The options argument controls how to format the user info
            component. The value of QUrl::FullyDecoded is not permitted in this
            function. If you need to obtain fully decoded data, call userName() and
            password() individually.</para>
            <para>See also setUserInfo(), userName(), password(), and
            authority().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetUserName(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the URL's user name to userName. The userName is part of the
            user info element in the authority of the URL, as described in
            setUserInfo().</para>
            <para>The userName data is interpreted according to mode: in
            StrictMode, any '%' characters must be followed by exactly two hexadecimal
            characters and some characters (including space) are not allowed in
            undecoded form. In TolerantMode (the default), all characters are accepted
            in undecoded form and the tolerant parser will correct stray '%' not
            followed by two hex characters. In DecodedMode, '%' stand for themselves
            and encoded characters are not possible.</para>
            <para>QUrl::DecodedMode should be used when setting the user name from
            a data source which is not a URL, such as a password dialog shown to the
            user or with a user name obtained by calling userName() with the
            QUrl::FullyDecoded formatting option.</para>
            <para>See also userName() and setUserInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.UserName(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the user name of the URL if it is defined; otherwise an
            empty string is returned.</para>
            <para>The options argument controls how to format the user name
            component. All values produce an unambiguous result. With
            QUrl::FullyDecoded, all percent-encoded sequences are decoded; otherwise,
            the returned value may contain some percent-encoded sequences for some
            control sequences not representable in decoded form in QString.</para>
            <para>Note that QUrl::FullyDecoded may cause data loss if those
            non-representable sequences are present. It is recommended to use that
            value when the result will be used in a non-URL context, such as setting in
            QAuthenticator or negotiating a login.</para>
            <para>See also setUserName() and userInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetPassword(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the URL's password to password. The password is part of the
            user info element in the authority of the URL, as described in
            setUserInfo().</para>
            <para>The password data is interpreted according to mode: in
            StrictMode, any '%' characters must be followed by exactly two hexadecimal
            characters and some characters (including space) are not allowed in
            undecoded form. In TolerantMode, all characters are accepted in undecoded
            form and the tolerant parser will correct stray '%' not followed by two hex
            characters. In DecodedMode, '%' stand for themselves and encoded characters
            are not possible.</para>
            <para>QUrl::DecodedMode should be used when setting the password from a
            data source which is not a URL, such as a password dialog shown to the user
            or with a password obtained by calling password() with the
            QUrl::FullyDecoded formatting option.</para>
            <para>See also password() and setUserInfo().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Password(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the password of the URL if it is defined; otherwise an
            empty string is returned.</para>
            <para>The options argument controls how to format the user name
            component. All values produce an unambiguous result. With
            QUrl::FullyDecoded, all percent-encoded sequences are decoded; otherwise,
            the returned value may contain some percent-encoded sequences for some
            control sequences not representable in decoded form in QString.</para>
            <para>Note that QUrl::FullyDecoded may cause data loss if those
            non-representable sequences are present. It is recommended to use that
            value when the result will be used in a non-URL context, such as setting in
            QAuthenticator or negotiating a login.</para>
            <para>See also setPassword().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetHost(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the host of the URL to host. The host is part of the
            authority.</para>
            <para>The host data is interpreted according to mode: in StrictMode,
            any '%' characters must be followed by exactly two hexadecimal characters
            and some characters (including space) are not allowed in undecoded form. In
            TolerantMode, all characters are accepted in undecoded form and the
            tolerant parser will correct stray '%' not followed by two hex characters.
            In DecodedMode, '%' stand for themselves and encoded characters are not
            possible.</para>
            <para>Note that, in all cases, the result of the parsing must be a
            valid hostname according to STD 3 rules, as modified by the
            Internationalized Resource Identifiers specification (RFC 3987). Invalid
            hostnames are not permitted and will cause isValid() to become
            false.</para>
            <para>See also host() and setAuthority().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Host(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the host of the URL if it is defined; otherwise an empty
            string is returned.</para>
            <para>The options argument controls how the hostname will be formatted.
            The QUrl::EncodeUnicode option will cause this function to return the
            hostname in the ASCII-Compatible Encoding (ACE) form, which is suitable for
            use in channels that are not 8-bit clean or that require the legacy
            hostname (such as DNS requests or in HTTP request headers). If that flag is
            not present, this function returns the International Domain Name (IDN) in
            Unicode form, according to the list of permissible top-level domains (see
            idnWhitelist()).</para>
            <para>All other flags are ignored. Host names cannot contain control or
            percent characters, so the returned value can be considered fully
            decoded.</para>
            <para>See also setHost(), idnWhitelist(), setIdnWhitelist(), and
            authority().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.TopLevelDomain(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the TLD (Top-Level Domain) of the URL, (e.g. .co.uk,
            .net). Note that the return value is prefixed with a '.' unless the URL
            does not contain a valid TLD, in which case the function returns an empty
            string.</para>
            <para>Note that this function considers a TLD to be any domain that
            allows users to register subdomains under, including many home, dynamic DNS
            websites and blogging providers. This is useful for determining whether two
            websites belong to the same infrastructure and communication should be
            allowed, such as browser cookies: two domains should be considered part of
            the same website if they share at least one label in addition to the value
            returned by this function.</para>
            <para></para>
            <para>foo.co.uk and foo.com do not share a top-level domain</para>
            <para>foo.co.uk and bar.co.uk share the .co.uk domain, but the next
            label is different</para>
            <para>www.foo.co.uk and ftp.foo.co.uk share the same top-level domain
            and one more label, so they are considered part of the same site</para>
            <para></para>
            <para>If options includes EncodeUnicode, the returned string will be in
            ASCII Compatible Encoding.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetPort(System.Int32)">
            <summary>
            <para>Sets the port of the URL to port. The port is part of the
            authority of the URL, as described in setAuthority().</para>
            <para>port must be between 0 and 65535 inclusive. Setting the port to
            -1 indicates that the port is unspecified.</para>
            <para>See also port().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Port(System.Int32)">
            <summary>
            <para>Returns the port of the URL, or defaultPort if the port is
            unspecified.</para>
            <para>Example:</para>
            <para>QTcpSocket sock;</para>
            <para>sock.connectToHost(url.host(), url.port(80));</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setPort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetPath(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the path of the URL to path. The path is the part of the URL
            that comes after the authority but before the query string.</para>
            <para></para>
            <para>For non-hierarchical schemes, the path will be everything
            following the scheme declaration, as in the following example:</para>
            <para></para>
            <para>The path data is interpreted according to mode: in StrictMode,
            any '%' characters must be followed by exactly two hexadecimal characters
            and some characters (including space) are not allowed in undecoded form. In
            TolerantMode (the default), all characters are accepted in undecoded form
            and the tolerant parser will correct stray '%' not followed by two hex
            characters. In DecodedMode, '%' stand for themselves and encoded characters
            are not possible.</para>
            <para>QUrl::DecodedMode should be used when setting the path from a
            data source which is not a URL, such as a dialog shown to the user or with
            a path obtained by calling path() with the QUrl::FullyDecoded formatting
            option.</para>
            <para>See also path().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Path(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the path of the URL.</para>
            <para>The options argument controls how to format the path component.
            All values produce an unambiguous result. With QUrl::FullyDecoded, all
            percent-encoded sequences are decoded; otherwise, the returned value may
            contain some percent-encoded sequences for some control sequences not
            representable in decoded form in QString.</para>
            <para>Note that QUrl::FullyDecoded may cause data loss if those
            non-representable sequences are present. It is recommended to use that
            value when the result will be used in a non-URL context, such as sending to
            an FTP server.</para>
            <para>See also setPath().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FileName(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the name of the file, excluding the directory
            path.</para>
            <para>Note that, if this QUrl object is given a path ending in a slash,
            the name of the file is considered empty.</para>
            <para>If the path doesn't contain any slash, it is fully returned as
            the fileName.</para>
            <para>Example:</para>
            <para>QUrl
            url(&quot;http://qt-project.org/support/file.html&quot;);</para>
            <para>// url.adjusted(RemoveFilename) ==
            &quot;http://qt-project.org/support/&quot;</para>
            <para>// url.fileName() == &quot;file.html&quot;</para>
            <para>The options argument controls how to format the file name
            component. All values produce an unambiguous result. With
            QUrl::FullyDecoded, all percent-encoded sequences are decoded; otherwise,
            the returned value may contain some percent-encoded sequences for some
            control sequences not representable in decoded form in QString.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also path().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetQuery(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the query string of the URL to query.</para>
            <para>This function is useful if you need to pass a query string that
            does not fit into the key-value pattern, or that uses a different scheme
            for encoding special characters than what is suggested by QUrl.</para>
            <para>Passing a value of QString() to query (a null QString) unsets the
            query completely. However, passing a value of QString(&quot;&quot;) will
            set the query to an empty value, as if the original URL had a lone
            &quot;?&quot;.</para>
            <para>The query data is interpreted according to mode: in StrictMode,
            any '%' characters must be followed by exactly two hexadecimal characters
            and some characters (including space) are not allowed in undecoded form. In
            TolerantMode, all characters are accepted in undecoded form and the
            tolerant parser will correct stray '%' not followed by two hex characters.
            In DecodedMode, '%' stand for themselves and encoded characters are not
            possible.</para>
            <para>Query strings often contain percent-encoded sequences, so use of
            DecodedMode is discouraged. One special sequence to be aware of is that of
            the plus character ('+'). QUrl does not convert spaces to plus characters,
            even though HTML forms posted by web browsers do. In order to represent an
            actual plus character in a query, the sequence &quot;%2B&quot; is usually
            used. This function will leave &quot;%2B&quot; sequences untouched in
            TolerantMode or StrictMode.</para>
            <para>See also query() and hasQuery().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetQuery(QtCore.QUrlQuery)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the query string of the URL to query.</para>
            <para>This function reconstructs the query string from the QUrlQuery
            object and sets on this QUrl object. This function does not have parsing
            parameters because the QUrlQuery contains data that is already
            parsed.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also query() and hasQuery().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Query(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the query string of the URL if there's a query string, or
            an empty result if not. To determine if the parsed URL contained a query
            string, use hasQuery().</para>
            <para>The options argument controls how to format the query component.
            All values produce an unambiguous result. With QUrl::FullyDecoded, all
            percent-encoded sequences are decoded; otherwise, the returned value may
            contain some percent-encoded sequences for some control sequences not
            representable in decoded form in QString.</para>
            <para>Note that use of QUrl::FullyDecoded in queries is discouraged, as
            queries often contain data that is supposed to remain percent-encoded,
            including the use of the &quot;%2B&quot; sequence to represent a plus
            character ('+').</para>
            <para>See also setQuery() and hasQuery().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Fragment(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the fragment of the URL. To determine if the parsed URL
            contained a fragment, use hasFragment().</para>
            <para>The options argument controls how to format the fragment
            component. All values produce an unambiguous result. With
            QUrl::FullyDecoded, all percent-encoded sequences are decoded; otherwise,
            the returned value may contain some percent-encoded sequences for some
            control sequences not representable in decoded form in QString.</para>
            <para>Note that QUrl::FullyDecoded may cause data loss if those
            non-representable sequences are present. It is recommended to use that
            value when the result will be used in a non-URL context.</para>
            <para>See also setFragment() and hasFragment().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.SetFragment(System.String,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Sets the fragment of the URL to fragment. The fragment is the
            last part of the URL, represented by a '#' followed by a string of
            characters. It is typically used in HTTP for referring to a certain link or
            point on a page:</para>
            <para></para>
            <para>The fragment is sometimes also referred to as the URL
            &quot;reference&quot;.</para>
            <para>Passing an argument of QString() (a null QString) will unset the
            fragment. Passing an argument of QString(&quot;&quot;) (an empty but not
            null QString) will set the fragment to an empty string (as if the original
            URL had a lone &quot;#&quot;).</para>
            <para>The fragment data is interpreted according to mode: in
            StrictMode, any '%' characters must be followed by exactly two hexadecimal
            characters and some characters (including space) are not allowed in
            undecoded form. In TolerantMode, all characters are accepted in undecoded
            form and the tolerant parser will correct stray '%' not followed by two hex
            characters. In DecodedMode, '%' stand for themselves and encoded characters
            are not possible.</para>
            <para>QUrl::DecodedMode should be used when setting the fragment from a
            data source which is not a URL or with a fragment obtained by calling
            fragment() with the QUrl::FullyDecoded formatting option.</para>
            <para>See also fragment() and hasFragment().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.Resolved(QtCore.QUrl)">
            <summary>
            <para>Returns the result of the merge of this URL with relative. This
            URL is used as a base to convert relative to an absolute URL.</para>
            <para>If relative is not a relative URL, this function will return
            relative directly. Otherwise, the paths of the two URLs are merged, and the
            new URL returned has the scheme and authority of the base URL, but with the
            merged path, as in the following example:</para>
            <para>QUrl baseUrl(&quot;http://qt.digia.com/Support/&quot;);</para>
            <para>QUrl relativeUrl(&quot;../Product/Library/&quot;);</para>
            <para>qDebug(baseUrl.resolved(relativeUrl).toString());</para>
            <para>// prints &quot;http://qt.digia.com/Product/Library/&quot;</para>
            <para>Calling resolved() with &quot;..&quot; returns a QUrl whose
            directory is one level higher than the original. Similarly, calling
            resolved() with &quot;../..&quot; removes two levels from the path. If
            relative is &quot;/&quot;, the path becomes &quot;/&quot;.</para>
            <para>See also isRelative().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.IsParentOf(QtCore.QUrl)">
            <summary>
            <para>Returns true if this URL is a parent of childUrl. childUrl is a
            child of this URL if the two URLs share the same scheme and authority, and
            this URL's path is a parent of the path of childUrl.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.ToLocalFile">
            <summary>
            <para>Returns the path of this URL formatted as a local file path. The
            path returned will use forward slashes, even if it was originally created
            from one with backslashes.</para>
            <para>If this URL contains a non-empty hostname, it will be encoded in
            the returned value in the form found on SMB networks (for example,
            &quot;//servername/path/to/file.txt&quot;).</para>
            <para>Note: if the path component of this URL contains a non-UTF-8
            binary sequence (such as %80), the behaviour of this function is
            undefined.</para>
            <para>See also fromLocalFile() and isLocalFile().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.op_Equality(QtCore.QUrl,QtCore.QUrl)">
            <summary>
            <para>Returns true if this URL and the given url are equal; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.op_Inequality(QtCore.QUrl,QtCore.QUrl)">
            <summary>
            <para>Returns true if this URL and the given url are not equal;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromEncoded(QtCore.QByteArray,QtCore.QUrl.ParsingMode)">
            <summary>
            <para>Parses input and returns the corresponding QUrl. input is assumed
            to be in encoded form, containing only ASCII characters.</para>
            <para>Parses the URL using parsingMode. See setUrl() for more
            information on this parameter. QUrl::DecodedMode is not permitted in this
            context.</para>
            <para>See also toEncoded() and setUrl().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromUserInput(System.String)">
            <summary>
            <para>Returns a valid URL from a user supplied userInput string if one
            can be deducted. In the case that is not possible, an invalid QUrl() is
            returned.</para>
            <para>Most applications that can browse the web, allow the user to
            input a URL in the form of a plain string. This string can be manually
            typed into a location bar, obtained from the clipboard, or passed in via
            command line arguments.</para>
            <para>When the string is not already a valid URL, a best guess is
            performed, making various web related assumptions.</para>
            <para>In the case the string corresponds to a valid file path on the
            system, a file:// URL is constructed, using QUrl::fromLocalFile().</para>
            <para>If that is not the case, an attempt is made to turn the string
            into a http:// or ftp:// URL. The latter in the case the string starts with
            'ftp'. The result is then passed through QUrl's tolerant parser, and in the
            case or success, a valid QUrl is returned, or else a QUrl().</para>
            <para></para>
            <para>Examples:</para>
            <para></para>
            <para>qt-project.org becomes http://qt-project.org</para>
            <para>ftp.qt-project.org becomes ftp://ftp.qt-project.org</para>
            <para>hostname becomes http://hostname</para>
            <para>/home/user/test.html becomes file:///home/user/test.html</para>
            <para></para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromUserInput(System.String,System.String,QtCore.QUrl.UserInputResolutionOption)">
            <summary>
            <para>Returns a valid URL from a user supplied userInput string if one
            can be deducted. In the case that is not possible, an invalid QUrl() is
            returned.</para>
            <para>This overload takes a workingDirectory path, in order to be able
            to handle relative paths. This is especially useful when handling command
            line arguments. If workingDirectory is empty, no handling of relative paths
            will be done, so this method will behave like its one argument
            overload.</para>
            <para>By default, an input string that looks like a relative path will
            only be treated as such if the file actually exists in the given working
            directory.</para>
            <para>If the application can handle files that don't exist yet, it
            should pass the flag AssumeLocalFile in options.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromLocalFile(System.String)">
            <summary>
            <para>Returns a QUrl representation of localFile, interpreted as a
            local file. This function accepts paths separated by slashes as well as the
            native separator for this platform.</para>
            <para>This function also accepts paths with a doubled leading slash (or
            backslash) to indicate a remote file, as in
            &quot;//servername/path/to/file.txt&quot;. Note that only certain platforms
            can actually open this file using QFile::open().</para>
            <para>An empty localFile leads to an empty URL (since Qt 5.4).</para>
            <para>See also toLocalFile(), isLocalFile(), and
            QDir::toNativeSeparators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromPercentEncoding(QtCore.QByteArray)">
            <summary>
            <para>Returns a decoded copy of input. input is first decoded from
            percent encoding, then converted from UTF-8 to unicode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.ToPercentEncoding(System.String,QtCore.QByteArray,QtCore.QByteArray)">
            <summary>
            <para>Returns an encoded copy of input. input is first converted to
            UTF-8, and all ASCII-characters that are not in the unreserved group are
            percent encoded. To prevent characters from being percent encoded pass them
            to exclude. To force characters to be percent encoded pass them to
            include.</para>
            <para>Unreserved is defined as: ALPHA / DIGIT / &quot;-&quot; /
            &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</para>
            <para>QByteArray ba = QUrl::toPercentEncoding(&quot;{a fishy
            string?}&quot;, &quot;{}&quot;, &quot;s&quot;);</para>
            <para>qDebug(ba.constData());</para>
            <para>// prints &quot;{a fi%73hy %73tring%3F}&quot;</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.FromAce(QtCore.QByteArray)">
            <summary>
            <para>Returns the Unicode form of the given domain name domain, which
            is encoded in the ASCII Compatible Encoding (ACE). The result of this
            function is considered equivalent to domain.</para>
            <para>If the value in domain cannot be encoded, it will be converted to
            QString and returned.</para>
            <para>The ASCII Compatible Encoding (ACE) is defined by RFC 3490, RFC
            3491 and RFC 3492. It is part of the Internationalizing Domain Names in
            Applications (IDNA) specification, which allows for domain names (like
            &quot;example.com&quot;) to be written using international
            characters.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.ToAce(System.String)">
            <summary>
            <para>Returns the ASCII Compatible Encoding of the given domain name
            domain. The result of this function is considered equivalent to
            domain.</para>
            <para>The ASCII-Compatible Encoding (ACE) is defined by RFC 3490, RFC
            3491 and RFC 3492. It is part of the Internationalizing Domain Names in
            Applications (IDNA) specification, which allows for domain names (like
            &quot;example.com&quot;) to be written using international
            characters.</para>
            <para>This function returns an empty QByteArray if domain is not a
            valid hostname. Note, in particular, that IPv6 literals are not valid
            domain names.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrl.QHash(QtCore.QUrl,System.UInt32)">
            <summary>
            <para>Returns the hash value for the url. If specified, seed is used to
            initialize the hash.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.Scheme">
            <summary>
            <para>Returns the scheme of the URL. If an empty string is returned,
            this means the scheme is undefined and the URL is then relative.</para>
            <para>The scheme can only contain US-ASCII letters or digits, which
            means it cannot contain any character that would otherwise require
            encoding. Additionally, schemes are always returned in lowercase
            form.</para>
            <para>See also setScheme() and isRelative().</para>
            <para></para>
            <para>Sets the scheme of the URL to scheme. As a scheme can only
            contain ASCII characters, no conversion or decoding is done on the input.
            It must also start with an ASCII letter.</para>
            <para>The scheme describes the type (or protocol) of the URL. It's
            represented by one or more ASCII characters at the start the URL.</para>
            <para>A scheme is strictly RFC 3986-compliant: scheme = ALPHA *( ALPHA
            / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )</para>
            <para>The following example shows a URL where the scheme is
            &quot;ftp&quot;:</para>
            <para></para>
            <para>To set the scheme, the following call is used:</para>
            <para>QUrl url;</para>
            <para>url.setScheme(&quot;ftp&quot;);</para>
            <para>The scheme can also be empty, in which case the URL is
            interpreted as relative.</para>
            <para>See also scheme() and isRelative().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.IdnWhitelist">
            <summary>
            <para>Returns the current whitelist of top-level domains that are
            allowed to have non-ASCII characters in their compositions.</para>
            <para>See setIdnWhitelist() for the rationale of this list.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setIdnWhitelist().</para>
            <para></para>
            <para>Sets the whitelist of Top-Level Domains (TLDs) that are allowed
            to have non-ASCII characters in domains to the value of list.</para>
            <para>Note that if you call this function, you need to do so before you
            start any threads that might access idnWhitelist().</para>
            <para>Qt comes with a default list that contains the Internet top-level
            domains that have published support for Internationalized Domain Names
            (IDNs) and rules to guarantee that no deception can happen between
            similarly-looking characters (such as the Latin lowercase letter 'a' and
            the Cyrillic equivalent, which in most fonts are visually
            identical).</para>
            <para>This list is periodically maintained, as registrars publish new
            rules.</para>
            <para>This function is provided for those who need to manipulate the
            list, in order to add or remove a TLD. It is not recommended to change its
            value for purposes other than testing, as it may expose users to security
            risks.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also idnWhitelist().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.IsValid">
            <summary>
            <para>Returns true if the URL is non-empty and valid; otherwise returns
            false.</para>
            <para>The URL is run through a conformance test. Every part of the URL
            must conform to the standard encoding rules of the URI standard for the URL
            to be reported as valid.</para>
            <para>bool checkUrl(const QUrl &amp;url) {</para>
            <para>    if (!url.isValid()) {</para>
            <para>        qDebug(QString(&quot;Invalid URL:
            %1&quot;).arg(url.toString()));</para>
            <para>        return false;</para>
            <para>    }</para>
            <para></para>
            <para>    return true;</para>
            <para>}</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.ErrorString">
            <summary>
            <para>Returns an error message if the last operation that modified this
            QUrl object ran into a parsing error. If no error was detected, this
            function returns an empty string and isValid() returns true.</para>
            <para>The error message returned by this function is technical in
            nature and may not be understood by end users. It is mostly useful to
            developers trying to understand why QUrl will not accept some input.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QUrl::ParsingMode.</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.IsEmpty">
            <summary>
            <para>Returns true if the URL has no data; otherwise returns
            false.</para>
            <para>See also clear().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.HasQuery">
            <summary>
            <para>Returns true if this URL contains a Query (i.e., if ? was seen on
            it).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setQuery(), query(), and hasFragment().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.HasFragment">
            <summary>
            <para>Returns true if this URL contains a fragment (i.e., if # was seen
            on it).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also fragment() and setFragment().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.IsRelative">
            <summary>
            <para>Returns true if the URL is relative; otherwise returns false. A
            URL is relative reference if its scheme is undefined; this function is
            therefore equivalent to calling scheme().isEmpty().</para>
            <para>Relative references are defined in RFC 3986 section 4.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrl.IsLocalFile">
            <summary>
            <para>Returns true if this URL is pointing to a local file path. A URL
            is a local file path if the scheme is &quot;file&quot;.</para>
            <para>Note that this function considers URLs with hostnames to be local
            file paths, even if the eventual file path cannot be opened with
            QFile::open().</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also fromLocalFile() and toLocalFile().</para>
            </summary>
        </member>
        <member name="T:QtCore.QUrl.ParsingMode">
            <summary>
            <para>The parsing mode controls the way QUrl parses strings.</para>
            <para>In TolerantMode, the parser has the following behaviour:</para>
            <para></para>
            <para>Spaces and &quot;%20&quot;: unencoded space characters will be
            accepted and will be treated as equivalent to &quot;%20&quot;.</para>
            <para>Single &quot;%&quot; characters: Any occurrences of a percent
            character &quot;%&quot; not followed by exactly two hexadecimal characters
            (e.g., &quot;13% coverage.html&quot;) will be replaced by &quot;%25&quot;.
            Note that one lone &quot;%&quot; character will trigger the correction mode
            for all percent characters.</para>
            <para>Reserved and unreserved characters: An encoded URL should only
            contain a few characters as literals; all other characters should be
            percent-encoded. In TolerantMode, these characters will be accepted if they
            are found in the URL: space / double-quote / &quot;&lt;&quot; /
            &quot;&gt;&quot; / &quot;&quot; / &quot;^&quot; / &quot;`&quot; /
            &quot;{&quot; / &quot;|&quot; / &quot;}&quot; Those same characters can be
            decoded again by passing QUrl::DecodeReserved to toString() or toEncoded().
            In the getters of individual components, those characters are often
            returned in decoded form.</para>
            <para></para>
            <para>When in StrictMode, if a parsing error is found, isValid() will
            return false and errorString() will return a message describing the error.
            If more than one error is detected, it is undefined which error gets
            reported.</para>
            <para>Note that TolerantMode is not usually enough for parsing user
            input, which often contains more errors and expectations than the parser
            can deal with. When dealing with data coming directly from the user -- as
            opposed to data coming from data-transfer sources, such as other programs
            -- it is recommended to use fromUserInput().</para>
            <para>See also fromUserInput(), setUrl(), toString(), toEncoded(), and
            QUrl::FormattingOptions.</para>
            </summary>
        </member>
        <member name="F:QtCore.QUrl.ParsingMode.TolerantMode">
            <summary>QUrl will try to correct some common errors in URLs. This mode is useful for parsing URLs coming from sources not known to be strictly standards-conforming.</summary>
        </member>
        <member name="F:QtCore.QUrl.ParsingMode.StrictMode">
            <summary>Only valid URLs are accepted. This mode is useful for general URL validation.</summary>
        </member>
        <member name="F:QtCore.QUrl.ParsingMode.DecodedMode">
            <summary>QUrl will interpret the URL component in the fully-decoded form, where percent characters stand for themselves, not as the beginning of a percent-encoded sequence. This mode is only valid for the setters setting components of a URL; it is not permitted in the QUrl constructor, in fromEncoded() or in setUrl(). For more information on this mode, see the documentation for QUrl::FullyDecoded.</summary>
        </member>
        <member name="T:QtCore.QUrl.UrlFormattingOption">
            <summary>
            <para>The formatting options define how the URL is formatted when
            written out as text.</para>
            <para>Note that the case folding rules in Nameprep, which QUrl conforms
            to, require host names to always be converted to lower case, regardless of
            the Qt::FormattingOptions used.</para>
            <para>The options from QUrl::ComponentFormattingOptions are also
            possible.</para>
            <para>The FormattingOptions type is a typedef for
            QFlags&lt;UrlFormattingOption&gt;. It stores an OR combination of
            UrlFormattingOption values.</para>
            <para>See also QUrl::ComponentFormattingOptions.</para>
            </summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.None">
            <summary>The format of the URL is unchanged.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemoveScheme">
            <summary>The scheme is removed from the URL.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemovePassword">
            <summary>Any password in the URL is removed.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemoveUserInfo">
            <summary>Any user information in the URL is removed.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemovePort">
            <summary>Any specified port is removed from the URL.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemovePath">
            <summary>The URL's path is removed, leaving only the scheme, host address, and port (if present).</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemoveQuery">
            <summary>The query part of the URL (following a '?' character) is removed.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.PreferLocalFile">
            <summary>If the URL is a local file according to isLocalFile() and contains no query or fragment, a local file path is returned.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.StripTrailingSlash">
            <summary>The trailing slash is removed if one is present.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.RemoveFilename">
            <summary>The filename (i.e. everything after the last '/' in the path) is removed. The trailing '/' is kept, unless StripTrailingSlash is set. Only valid if RemovePath is not set.</summary>
        </member>
        <member name="F:QtCore.QUrl.UrlFormattingOption.NormalizePathSegments">
            <summary>Modifies the path to remove redundant directory separators, and to resolve "."s and ".."s (as far as possible).</summary>
        </member>
        <member name="T:QtCore.QUrl.ComponentFormattingOption">
            <summary>
            <para>The component formatting options define how the components of an
            URL will be formatted when written out as text. They can be combined with
            the options from QUrl::FormattingOptions when used in toString() and
            toEncoded().</para>
            <para>The values of EncodeReserved and DecodeReserved should not be
            used together in one call. The behavior is undefined if that happens. They
            are provided as separate values because the behavior of the &quot;pretty
            mode&quot; with regards to reserved characters is different on certain
            components and specially on the full URL.</para>
            <para></para>
            <para>Full decoding</para>
            <para>The FullyDecoded mode is similar to the behavior of the functions
            returning QString in Qt 4.x, in that every character represents itself and
            never has any special meaning. This is true even for the percent character
            ('%'), which should be interpreted to mean a literal percent, not the
            beginning of a percent-encoded sequence. The same actual character, in all
            other decoding modes, is represented by the sequence
            &quot;%25&quot;.</para>
            <para>Whenever re-applying data obtained with QUrl::FullyDecoded into a
            QUrl, care must be taken to use the QUrl::DecodedMode parameter to the
            setters (like setPath() and setUserName()). Failure to do so may cause
            re-interpretation of the percent character ('%') as the beginning of a
            percent-encoded sequence.</para>
            <para>This mode is quite useful when portions of a URL are used in a
            non-URL context. For example, to extract the username, password or file
            paths in an FTP client application, the FullyDecoded mode should be
            used.</para>
            <para>This mode should be used with care, since there are two
            conditions that cannot be reliably represented in the returned QString.
            They are:</para>
            <para></para>
            <para>Non-UTF-8 sequences: URLs may contain sequences of
            percent-encoded characters that do not form valid UTF-8 sequences. Since
            URLs need to be decoded using UTF-8, any decoder failure will result in the
            QString containing one or more replacement characters where the sequence
            existed.</para>
            <para>Encoded delimiters: URLs are also allowed to make a distinction
            between a delimiter found in its literal form and its equivalent in
            percent-encoded form. This is most commonly found in the query, but is
            permitted in most parts of the URL.</para>
            <para></para>
            <para>The following example illustrates the problem:</para>
            <para>QUrl
            original(&quot;http://example.com/?q=a%2B%3Db%26c&quot;);</para>
            <para>QUrl copy(original);</para>
            <para>copy.setQuery(copy.query(QUrl::FullyDecoded),
            QUrl::DecodedMode);</para>
            <para></para>
            <para>qDebug() &lt;&lt; original.toString();   // prints:
            http://example.com/?q=a%2B%3Db%26c</para>
            <para>qDebug() &lt;&lt; copy.toString();       // prints:
            http://example.com/?q=a+=b&amp;c</para>
            <para>If the two URLs were used via HTTP GET, the interpretation by the
            web server would probably be different. In the first case, it would
            interpret as one parameter, with a key of &quot;q&quot; and value
            &quot;a+=b&amp;c&quot;. In the second case, it would probably interpret as
            two parameters, one with a key of &quot;q&quot; and value &quot;a =b&quot;,
            and the second with a key &quot;c&quot; and no value.</para>
            <para>This enum was introduced or modified in  Qt 5.0.</para>
            <para>The ComponentFormattingOptions type is a typedef for
            QFlags&lt;ComponentFormattingOption&gt;. It stores an OR combination of
            ComponentFormattingOption values.</para>
            <para>See also QUrl::FormattingOptions.</para>
            </summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.PrettyDecoded">
            <summary>The component is returned in a "pretty form", with most percent-encoded characters decoded. The exact behavior of PrettyDecoded varies from component to component and may also change from Qt release to Qt release. This is the default.</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.EncodeSpaces">
            <summary>Leave space characters in their encoded form ("%20").</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.EncodeUnicode">
            <summary>Leave non-US-ASCII characters encoded in their UTF-8 percent-encoded form (e.g., "%C3%A9" for the U+00E9 codepoint, LATIN SMALL LETTER E WITH ACUTE).</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.EncodeDelimiters">
            <summary>Leave certain delimiters in their encoded form, as would appear in the URL when the full URL is represented as text. The delimiters are affected by this option change from component to component. This flag has no effect in toString() or toEncoded().</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.EncodeReserved">
            <summary>Leave US-ASCII characters not permitted in the URL by the specification in their encoded form. This is the default on toString() and toEncoded().</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.DecodeReserved">
            <summary>Decode the US-ASCII characters that the URL specification does not allow to appear in the URL. This is the default on the getters of individual components.</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.FullyEncoded">
            <summary>Leave all characters in their properly-encoded form, as this component would appear as part of a URL. When used with toString(), this produces a fully-compliant URL in QString form, exactly equal to the result of toEncoded()</summary>
        </member>
        <member name="F:QtCore.QUrl.ComponentFormattingOption.FullyDecoded">
            <summary>Attempt to decode as much as possible. For individual components of the URL, this decodes every percent encoding sequence, including control characters (U+0000 to U+001F) and UTF-8 sequences found in percent-encoded form. Use of this mode may cause data loss, see below for more information.</summary>
        </member>
        <member name="T:QtCore.QUrl.UserInputResolutionOption">
            <summary>
            <para>The user input resolution options define how fromUserInput()
            should interpret strings that could either be a relative path or the short
            form of a HTTP URL. For instance file.pl can be either a local file or the
            URL http://file.pl.</para>
            <para>This enum was introduced or modified in  Qt 5.4.</para>
            <para>The UserInputResolutionOptions type is a typedef for
            QFlags&lt;UserInputResolutionOption&gt;. It stores an OR combination of
            UserInputResolutionOption values.</para>
            <para>See also fromUserInput().</para>
            </summary>
        </member>
        <member name="F:QtCore.QUrl.UserInputResolutionOption.DefaultResolution">
            <summary>The default resolution mechanism is to check whether a local file exists, in the working directory given to fromUserInput, and only return a local path in that case. Otherwise a URL is assumed.</summary>
        </member>
        <member name="F:QtCore.QUrl.UserInputResolutionOption.AssumeLocalFile">
            <summary>This option makes fromUserInput() always return a local path unless the input contains a scheme, such as http://file.pl. This is useful for applications such as text editors, which are able to create the file if it doesn't exist.</summary>
        </member>
        <member name="T:QtCore.QUrlQuery">
            <summary>
            <para>The QUrlQuery class provides a way to manipulate a key-value
            pairs in a URL's query.</para>
            </summary>
            <remarks>
            <para>It is used to parse the query strings found in URLs like the
            following:</para>
            <para></para>
            <para>Query strings like the above are used to transmit options in the
            URL and are usually decoded into multiple key-value pairs. The one above
            would contain two entries in its list, with keys &quot;type&quot; and
            &quot;color&quot;. QUrlQuery can also be used to create a query string
            suitable for use in QUrl::setQuery() from the individual components of the
            query.</para>
            <para>The most common way of parsing a query string is to initialize it
            in the constructor by passing it the query string. Otherwise, the
            setQuery() method can be used to set the query to be parsed. That method
            can also be used to parse a query with non-standard delimiters, after
            having set them using the setQueryDelimiters() function.</para>
            <para>The encoded query string can be obtained again using query().
            This will take all the internally-stored items and encode the string using
            the delimiters.</para>
            <para></para>
            <para>Encoding</para>
            <para>All of the getter methods in QUrlQuery support an optional
            parameter of type QUrl::ComponentFormattingOptions, including query(),
            which dictate how to encode the data in question. Except for
            QUrl::FullyDecoded, the returned value must still be considered a
            percent-encoded string, as there are certain values which cannot be
            expressed in decoded form (like control characters, byte sequences not
            decodable to UTF-8). For that reason, the percent character is always
            represented by the string &quot;%25&quot;.</para>
            <para></para>
            <para>Handling of spaces and plus (&quot;+&quot;)</para>
            <para>Web browsers usually encode spaces found in HTML FORM elements to
            a plus sign (&quot;+&quot;) and plus signs to its percent-encoded form
            (%2B). However, the Internet specifications governing URLs do not consider
            spaces and the plus character equivalent.</para>
            <para>For that reason, QUrlQuery never encodes the space character to
            &quot;+&quot; and will never decode &quot;+&quot; to a space character.
            Instead, space characters will be rendered &quot;%20&quot; in encoded
            form.</para>
            <para>To support encoding like that of HTML forms, QUrlQuery also never
            decodes the &quot;%2B&quot; sequence to a plus sign nor encode a plus sign.
            In fact, any &quot;%2B&quot; or &quot;+&quot; sequences found in the keys,
            values, or query string are left exactly like written (except for the
            uppercasing of &quot;%2b&quot; to &quot;%2B&quot;).</para>
            <para></para>
            <para>Full decoding</para>
            <para>With QUrl::FullyDecoded formatting, all percent-encoded sequences
            will be decoded fully and the '%' character is used to represent itself.
            QUrl::FullyDecoded should be used with care, since it may cause data loss.
            See the documentation of QUrl::FullyDecoded for information on what data
            may be lost.</para>
            <para>This formatting mode should be used only when dealing with text
            presented to the user in contexts where percent-encoding is not desired.
            Note that QUrlQuery setters and query methods do not support the
            counterpart QUrl::DecodedMode parsing, so using QUrl::FullyDecoded to
            obtain a listing of keys may result in keys not found in the object.</para>
            <para></para>
            <para>Non-standard delimiters</para>
            <para>By default, QUrlQuery uses an equal sign (&quot;=&quot;) to
            separate a key from its value, and an ampersand (&quot;&amp;&quot;) to
            separate key-value pairs from each other. It is possible to change the
            delimiters that QUrlQuery uses for parsing and for reconstructing the query
            by calling setQueryDelimiters().</para>
            <para>Non-standard delimiters should be chosen from among what RFC 3986
            calls &quot;sub-delimiters&quot;. They are:</para>
            <para>sub-delims    = &quot;!&quot; / &quot;$&quot; / &quot;&amp;&quot;
            / &quot;'&quot; / &quot;(&quot; / &quot;)&quot;</para>
            <para>              / &quot;*&quot; / &quot;+&quot; / &quot;,&quot; /
            &quot;;&quot; / &quot;=&quot;</para>
            <para>Use of other characters is not supported and may result in
            unexpected behaviour. QUrlQuery does not verify that you passed a valid
            delimiter.</para>
            <para></para>
            <para>See also QUrl.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QUrlQuery.#ctor">
            <summary>
            <para>Constructs an empty QUrlQuery object. A query can be set
            afterwards by calling setQuery() or items can be added by using
            addQueryItem().</para>
            <para>See also setQuery() and addQueryItem().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.#ctor(QtCore.QUrl)">
            <summary>
            <para>Constructs a QUrlQuery object and parses the query string found
            in the url URL, using the default query delimiters. To parse a query string
            using other delimiters, you should first set them using
            setQueryDelimiters() and then set the query with setQuery().</para>
            <para>See also QUrl::query().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.#ctor(System.String)">
            <summary>
            <para>Constructs a QUrlQuery object and parses the queryString query
            string, using the default query delimiters. To parse a query string using
            other delimiters, you should first set them using setQueryDelimiters() and
            then set the query with setQuery().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.#ctor(QtCore.QUrlQuery)">
            <summary>
            <para>Copies the contents of the other QUrlQuery object, including the
            query delimiters.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.op_Equality(QtCore.QUrlQuery,QtCore.QUrlQuery)">
            <summary>
            <para>Returns true if this object and the other object contain the same
            contents, in the same order, and use the same query delimiters.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.op_Inequality(QtCore.QUrlQuery,QtCore.QUrlQuery)">
            <summary>
            <para>Returns true if other is not equal to this QUrlQuery. Otherwise,
            returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.Swap(QtCore.QUrlQuery)">
            <summary>
            <para>Swaps this URL query instance with other. This function is very
            fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.Clear">
            <summary>
            <para>Clears this QUrlQuery object by removing all of the key-value
            pairs currently stored. If the query delimiters have been changed, this
            function will leave them with their changed values.</para>
            <para>See also isEmpty() and setQueryDelimiters().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.Query(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the reconstructed query string, formed from the key-value
            pairs currently stored in this QUrlQuery object and separated by the query
            delimiters chosen for this object. The keys and values are encoded using
            the options given by the encoding parameter.</para>
            <para>For this function, the only ambiguous delimiter is the hash
            (&quot;#&quot;), as in URLs it is used to separate the query string from
            the fragment that may follow.</para>
            <para>The order of the key-value pairs in the returned string is
            exactly the same as in the original query.</para>
            <para>See also setQuery(), QUrl::setQuery(), QUrl::fragment(), and
            Encoding.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.SetQuery(System.String)">
            <summary>
            <para>Parses the query string in queryString and sets the internal
            items to the values found there. If any delimiters have been specified with
            setQueryDelimiters(), this function will use them instead of the default
            delimiters to parse the string.</para>
            <para>See also query().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.ToString(QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns this QUrlQuery as a QString. encoding can be used to
            specify the URL string encoding of the return value.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QUrlQuery.SetQueryDelimiters(QtCore.QChar,QtCore.QChar)" -->
        <member name="M:QtCore.QUrlQuery.HasQueryItem(System.String)">
            <summary>
            <para>Returns true if there is a query string pair whose key is equal
            to key from the URL.</para>
            <para>See also addQueryItem() and queryItemValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.AddQueryItem(System.String,System.String)">
            <summary>
            <para>Appends the pair key = value to the end of the query string of
            the URL. This method does not overwrite existing items that might exist
            with the same key.</para>
            <para>Note: This method does not treat spaces (ASCII 0x20) and plus
            (&quot;+&quot;) signs as the same, like HTML forms do. If you need spaces
            to be represented as plus signs, use actual plus signs.</para>
            <para>See also hasQueryItem() and queryItemValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.RemoveQueryItem(System.String)">
            <summary>
            <para>Removes the query string pair whose key is equal to key from the
            URL. If there are multiple items with a key equal to key, it removes the
            first item in the order they were present in the query string or added with
            addQueryItem().</para>
            <para>See also removeAllQueryItems().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.QueryItemValue(System.String,QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the query value associated with key key from the URL,
            using the options specified in encoding to encode the return value. If the
            key key is not found, this function returns an empty string. If you need to
            distinguish between an empty value and a non-existent key, you should check
            for the key's presence first using hasQueryItem().</para>
            <para>If the key key is multiply defined, this function will return the
            first one found, in the order they were present in the query string or
            added using addQueryItem().</para>
            <para>See also addQueryItem(), allQueryItemValues(), and
            Encoding.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.AllQueryItemValues(System.String,QtCore.QUrl.ComponentFormattingOption)">
            <summary>
            <para>Returns the a list of query string values whose key is equal to
            key from the URL, using the options specified in encoding to encode the
            return value. If the key key is not found, this function returns an empty
            list.</para>
            <para>See also queryItemValue() and addQueryItem().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUrlQuery.RemoveAllQueryItems(System.String)">
            <summary>
            <para>Removes all the query string pairs whose key is equal to key from
            the URL.</para>
            <para>See also removeQueryItem().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrlQuery.IsEmpty">
            <summary>
            <para>Returns true if this QUrlQuery object contains no key-value
            pairs, such as after being default-constructed or after parsing an empty
            query string.</para>
            <para>See also setQuery() and clear().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrlQuery.QueryValueDelimiter">
            <summary>
            <para>Returns the character used to delimit between keys and values
            when reconstructing the query string in query() or when parsing in
            setQuery().</para>
            <para>See also setQueryDelimiters() and queryPairDelimiter().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrlQuery.QueryPairDelimiter">
            <summary>
            <para>Returns the character used to delimit between keys-value pairs
            when reconstructing the query string in query() or when parsing in
            setQuery().</para>
            <para>See also setQueryDelimiters() and queryValueDelimiter().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrlQuery.DefaultQueryValueDelimiter">
            <summary>
            <para>Returns the default character for separating keys from values in
            the query, an equal sign (&quot;=&quot;).</para>
            <para>See also setQueryDelimiters(), queryValueDelimiter(), and
            defaultQueryPairDelimiter().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUrlQuery.DefaultQueryPairDelimiter">
            <summary>
            <para>Returns the default character for separating keys-value pairs
            from each other, an ampersand (&quot;&amp;&quot;).</para>
            <para>See also setQueryDelimiters(), queryPairDelimiter(), and
            defaultQueryValueDelimiter().</para>
            </summary>
        </member>
        <member name="T:QtCore.QModelIndex">
            <summary>
            <para>The QModelIndex class is used to locate data in a data
            model.</para>
            </summary>
            <remarks>
            <para>This class is used as an index into item models derived from
            QAbstractItemModel. The index is used by item views, delegates, and
            selection models to locate an item in the model.</para>
            <para>New QModelIndex objects are created by the model using the
            QAbstractItemModel::createIndex() function. An invalid model index can be
            constructed with the QModelIndex constructor. Invalid indexes are often
            used as parent indexes when referring to top-level items in a model.</para>
            <para>Model indexes refer to items in models, and contain all the
            information required to specify their locations in those models. Each index
            is located in a given row and column, and may have a parent index; use
            row(), column(), and parent() to obtain this information. Each top-level
            item in a model is represented by a model index that does not have a parent
            index - in this case, parent() will return an invalid model index,
            equivalent to an index constructed with the zero argument form of the
            QModelIndex() constructor.</para>
            <para>To obtain a model index that refers to an existing item in a
            model, call QAbstractItemModel::index() with the required row and column
            values, and the model index of the parent. When referring to top-level
            items in a model, supply QModelIndex() as the parent index.</para>
            <para>The model() function returns the model that the index references
            as a QAbstractItemModel. The child() function is used to examine items held
            under the index in the model. The sibling() function allows you to traverse
            items in the model on the same level as the index.</para>
            <para>Note: Model indexes should be used immediately and then
            discarded. You should not rely on indexes to remain valid after calling
            model functions that change the structure of the model or delete items. If
            you need to keep a model index over time use a
            QPersistentModelIndex.</para>
            <para></para>
            <para>See also Model/View Programming, QPersistentModelIndex, and
            QAbstractItemModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QModelIndex.Sibling(System.Int32,System.Int32)">
            <summary>
            <para>Returns the sibling at row and column. If there is no sibling at
            this position, an invalid QModelIndex is returned.</para>
            <para>See also parent() and child().</para>
            </summary>
        </member>
        <member name="M:QtCore.QModelIndex.Child(System.Int32,System.Int32)">
            <summary>
            <para>Returns the child of the model index that is stored in the given
            row and column.</para>
            <para>Note: This function does not work for an invalid model index
            which is often used as the root index.</para>
            <para>See also parent() and sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QModelIndex.Data(System.Int32)">
            <summary>
            <para>Returns the data for the given role for the item referred to by
            the index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QModelIndex.op_Equality(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if this model index refers to the same location as
            the other model index; otherwise returns false.</para>
            <para>All values in the model index are used when comparing with
            another model index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QModelIndex.op_Inequality(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if this model index does not refer to the same
            location as the other model index; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QModelIndex.op_LessThan(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if this model index is smaller than the other model
            index; otherwise returns false.</para>
            <para>The less than calculation is not directly useful to developers -
            the way that indexes with different parents compare is not defined. This
            operator only exists so that the class can be used with QMap.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.Row">
            <summary>
            <para>Returns the row this model index refers to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.Column">
            <summary>
            <para>Returns the column this model index refers to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.InternalId">
            <summary>
            <para>Returns a quintptr used by the model to associate the index with
            the internal data structure.</para>
            <para>See also QAbstractItemModel::createIndex().</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.InternalPointer">
            <summary>
            <para>Returns a void * pointer used by the model to associate the index
            with the internal data structure.</para>
            <para>See also QAbstractItemModel::createIndex().</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.Parent">
            <summary>
            <para>Returns the parent of the model index, or QModelIndex() if it has
            no parent.</para>
            <para>See also child(), sibling(), and model().</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.Flags">
            <summary>
            <para>Returns the flags for the item referred to by the index.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.Model">
            <summary>
            <para>Returns a pointer to the model containing the item that this
            index refers to.</para>
            <para>A const pointer to the model is returned because calls to
            non-const functions of the model might invalidate the model index and
            possibly crash your application.</para>
            </summary>
        </member>
        <member name="P:QtCore.QModelIndex.IsValid">
            <summary>
            <para>Returns true if this model index is valid; otherwise returns
            false.</para>
            <para>A valid index belongs to a model, and has non-negative row and
            column numbers.</para>
            <para>See also model(), row(), and column().</para>
            </summary>
        </member>
        <member name="T:QtCore.QPersistentModelIndex">
            <summary>
            <para>The QPersistentModelIndex class is used to locate data in a data
            model.</para>
            </summary>
            <remarks>
            <para>A QPersistentModelIndex is a model index that can be stored by an
            application, and later used to access information in a model. Unlike the
            QModelIndex class, it is safe to store a QPersistentModelIndex since the
            model will ensure that references to items will continue to be valid as
            long as they can be accessed by the model.</para>
            <para>It is good practice to check that persistent model indexes are
            valid before using them.</para>
            <para></para>
            <para>See also Model/View Programming, QModelIndex, and
            QAbstractItemModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.#ctor(QtCore.QModelIndex)">
            <summary>
            <para>Creates a new QPersistentModelIndex that is a copy of the model
            index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.#ctor(QtCore.QPersistentModelIndex)">
            <summary>
            <para>Creates a new QPersistentModelIndex that is a copy of the other
            persistent model index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_LessThan(QtCore.QPersistentModelIndex,QtCore.QPersistentModelIndex)">
            <summary>
            <para>Returns true if this persistent model index is smaller than the
            other persistent model index; otherwise returns false.</para>
            <para>All values in the persistent model index are used when comparing
            with another persistent model index.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_Equality(QtCore.QPersistentModelIndex,QtCore.QPersistentModelIndex)">
            <summary>
            <para>Returns true if this persistent model index is equal to the other
            persistent model index; otherwise returns false.</para>
            <para>All values in the persistent model index are used when comparing
            with another persistent model index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_Inequality(QtCore.QPersistentModelIndex,QtCore.QPersistentModelIndex)">
            <summary>
            <para>Returns true if this persistent model index is not equal to the
            other persistent model index; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.Swap(QtCore.QPersistentModelIndex)">
            <summary>
            <para>Swaps this persistent modelindex with other. This function is
            very fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_Equality(QtCore.QPersistentModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if this persistent model index refers to the same
            location as the other model index; otherwise returns false.</para>
            <para>All values in the persistent model index are used when comparing
            with another model index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_Inequality(QtCore.QPersistentModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if this persistent model index does not refer to the
            same location as the other model index; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.op_Implicit(QtCore.QPersistentModelIndex)~QtCore.QModelIndex">
            <summary>
            <para>Cast operator that returns a const QModelIndex&amp;.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.Sibling(System.Int32,System.Int32)">
            <summary>
            <para>Returns the sibling at row and column or an invalid QModelIndex
            if there is no sibling at this position.</para>
            <para>See also parent() and child().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.Child(System.Int32,System.Int32)">
            <summary>
            <para>Returns the child of the model index that is stored in the given
            row and column.</para>
            <para>See also parent() and sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPersistentModelIndex.Data(System.Int32)">
            <summary>
            <para>Returns the data for the given role for the item referred to by
            the index.</para>
            <para>See also Qt::ItemDataRole and
            QAbstractItemModel::setData().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.Row">
            <summary>
            <para>Returns the row this persistent model index refers to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.Column">
            <summary>
            <para>Returns the column this persistent model index refers to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.Parent">
            <summary>
            <para>Returns the parent QModelIndex for this persistent index, or an
            invalid QModelIndex if it has no parent.</para>
            <para>See also child(), sibling(), and model().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.Flags">
            <summary>
            <para>Returns the flags for the item referred to by the index.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.Model">
            <summary>
            <para>Returns the model that the index belongs to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPersistentModelIndex.IsValid">
            <summary>
            <para>Returns true if this persistent model index is valid; otherwise
            returns false.</para>
            <para>A valid index belongs to a model, and has non-negative row and
            column numbers.</para>
            <para>See also model(), row(), and column().</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractItemModel">
            <summary>
            <para>The QAbstractItemModel class provides the abstract interface for
            item model classes.</para>
            </summary>
            <remarks>
            <para>The QAbstractItemModel class defines the standard interface that
            item models must use to be able to interoperate with other components in
            the model/view architecture. It is not supposed to be instantiated
            directly. Instead, you should subclass it to create new models.</para>
            <para>The QAbstractItemModel class is one of the Model/View Classes and
            is part of Qt's model/view framework. It can be used as the underlying data
            model for the item view elements in QML or the item view classes in the Qt
            Widgets module.</para>
            <para>If you need a model to use with an item view such as QML's List
            View element or the C++ widgets QListView or QTableView, you should
            consider subclassing QAbstractListModel or QAbstractTableModel instead of
            this class.</para>
            <para>The underlying data model is exposed to views and delegates as a
            hierarchy of tables. If you do not make use of the hierarchy, then the
            model is a simple table of rows and columns. Each item has a unique index
            specified by a QModelIndex.</para>
            <para></para>
            <para>Every item of data that can be accessed via a model has an
            associated model index. You can obtain this model index using the index()
            function. Each index may have a sibling() index; child items have a
            parent() index.</para>
            <para>Each item has a number of data elements associated with it and
            they can be retrieved by specifying a role (see Qt::ItemDataRole) to the
            model's data() function. Data for all available roles can be obtained at
            the same time using the itemData() function.</para>
            <para>Data for each role is set using a particular Qt::ItemDataRole.
            Data for individual roles are set individually with setData(), or they can
            be set for all roles with setItemData().</para>
            <para>Items can be queried with flags() (see Qt::ItemFlag) to see if
            they can be selected, dragged, or manipulated in other ways.</para>
            <para>If an item has child objects, hasChildren() returns true for the
            corresponding index.</para>
            <para>The model has a rowCount() and a columnCount() for each level of
            the hierarchy. Rows and columns can be inserted and removed with
            insertRows(), insertColumns(), removeRows(), and removeColumns().</para>
            <para>The model emits signals to indicate changes. For example,
            dataChanged() is emitted whenever items of data made available by the model
            are changed. Changes to the headers supplied by the model cause
            headerDataChanged() to be emitted. If the structure of the underlying data
            changes, the model can emit layoutChanged() to indicate to any attached
            views that they should redisplay any items shown, taking the new structure
            into account.</para>
            <para>The items available through the model can be searched for
            particular data using the match() function.</para>
            <para>To sort the model, you can use sort().</para>
            <para></para>
            <para>Subclassing</para>
            <para>Note: Some general guidelines for subclassing models are
            available in the Model Subclassing Reference.</para>
            <para>When subclassing QAbstractItemModel, at the very least you must
            implement index(), parent(), rowCount(), columnCount(), and data(). These
            functions are used in all read-only models, and form the basis of editable
            models.</para>
            <para>You can also reimplement hasChildren() to provide special
            behavior for models where the implementation of rowCount() is expensive.
            This makes it possible for models to restrict the amount of data requested
            by views, and can be used as a way to implement lazy population of model
            data.</para>
            <para>To enable editing in your model, you must also implement
            setData(), and reimplement flags() to ensure that ItemIsEditable is
            returned. You can also reimplement headerData() and setHeaderData() to
            control the way the headers for your model are presented.</para>
            <para>The dataChanged() and headerDataChanged() signals must be emitted
            explicitly when reimplementing the setData() and setHeaderData() functions,
            respectively.</para>
            <para>Custom models need to create model indexes for other components
            to use. To do this, call createIndex() with suitable row and column numbers
            for the item, and an identifier for it, either as a pointer or as an
            integer value. The combination of these values must be unique for each
            item. Custom models typically use these unique identifiers in other
            reimplemented functions to retrieve item data and access information about
            the item's parents and children. See the Simple Tree Model Example for more
            information about unique identifiers.</para>
            <para>It is not necessary to support every role defined in
            Qt::ItemDataRole. Depending on the type of data contained within a model,
            it may only be useful to implement the data() function to return valid
            information for some of the more common roles. Most models provide at least
            a textual representation of item data for the Qt::DisplayRole, and
            well-behaved models should also provide valid information for the
            Qt::ToolTipRole and Qt::WhatsThisRole. Supporting these roles enables
            models to be used with standard Qt views. However, for some models that
            handle highly-specialized data, it may be appropriate to provide data only
            for user-defined roles.</para>
            <para>Models that provide interfaces to resizable data structures can
            provide implementations of insertRows(), removeRows(), insertColumns(),and
            removeColumns(). When implementing these functions, it is important to
            notify any connected views about changes to the model's dimensions both
            before and after they occur:</para>
            <para></para>
            <para>An insertRows() implementation must call beginInsertRows() before
            inserting new rows into the data structure, and endInsertRows() immediately
            afterwards.</para>
            <para>An insertColumns() implementation must call beginInsertColumns()
            before inserting new columns into the data structure, and
            endInsertColumns() immediately afterwards.</para>
            <para>A removeRows() implementation must call beginRemoveRows() before
            the rows are removed from the data structure, and endRemoveRows()
            immediately afterwards.</para>
            <para>A removeColumns() implementation must call beginRemoveColumns()
            before the columns are removed from the data structure, and
            endRemoveColumns() immediately afterwards.</para>
            <para></para>
            <para>The private signals that these functions emit give attached
            components the chance to take action before any data becomes unavailable.
            The encapsulation of the insert and remove operations with these begin and
            end functions also enables the model to manage persistent model indexes
            correctly. If you want selections to be handled properly, you must ensure
            that you call these functions. If you insert or remove an item with
            children, you do not need to call these functions for the child items. In
            other words, the parent item will take care of its child items.</para>
            <para>To create models that populate incrementally, you can reimplement
            fetchMore() and canFetchMore(). If the reimplementation of fetchMore() adds
            rows to the model, beginInsertRows() and endInsertRows() must be
            called.</para>
            <para></para>
            <para>See also Model Classes, Model Subclassing Reference, QModelIndex,
            QAbstractItemView, Using drag and drop with item views, Simple DOM Model
            Example, Simple Tree Model Example, Editable Tree Model Example, and Fetch
            More Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractItemModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an abstract item model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.HasIndex(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the model returns a valid QModelIndex for row and
            column with parent, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns the index of the item in the model specified by the given
            row, column and parent index.</para>
            <para>When reimplementing this function in a subclass, call
            createIndex() to generate model indexes that other components can use to
            refer to items in your model.</para>
            <para>See also createIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Returns the parent of the model item with the given index. If the
            item has no parent, an invalid QModelIndex is returned.</para>
            <para>A common convention used in models that expose tree data
            structures is that only items in the first column have children. For that
            case, when reimplementing this function in a subclass the column of the
            returned QModelIndex would be 0.</para>
            <para>When reimplementing this function in a subclass, be careful to
            avoid calling QModelIndex member functions, such as QModelIndex::parent(),
            since indexes belonging to your model will simply call your implementation,
            leading to infinite recursion.</para>
            <para>See also createIndex().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns the sibling at row and column for the item at index, or
            an invalid QModelIndex if there is no sibling at that location.</para>
            <para>sibling() is just a convenience function that finds the item's
            parent, and uses it to retrieve the index of the child item in the
            specified row and column.</para>
            <para>This method can optionally be overridden for
            implementation-specific optimization.</para>
            <para>See also index(), QModelIndex::row(), and
            QModelIndex::column().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Returns the number of rows under the given parent. When the
            parent is valid it means that rowCount is returning the number of children
            of parent.</para>
            <para>Note: When implementing a table based model, rowCount() should
            return 0 when the parent is valid.</para>
            <para>See also columnCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Returns the number of columns for the children of the given
            parent.</para>
            <para>In most subclasses, the number of columns is independent of the
            parent.</para>
            <para>For example:</para>
            <para>int DomModel::columnCount(const QModelIndex &amp;/*parent*/)
            const</para>
            <para>{</para>
            <para>    return 3;</para>
            <para>}</para>
            <para>Note: When implementing a table based model, columnCount() should
            return 0 when the parent is valid.</para>
            <para>See also rowCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if parent has any children; otherwise returns
            false.</para>
            <para>Use rowCount() on the parent to find out the number of
            children.</para>
            <para>Note that it is undefined behavior to report that a particular
            index hasChildren with this method if the same index has the flag
            Qt::ItemNeverHasChildren set.</para>
            <para>See also parent() and index().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Returns the data stored under the given role for the item
            referred to by the index.</para>
            <para>Note: If you do not have a value to return, return an invalid
            QVariant instead of returning 0.</para>
            <para>See also Qt::ItemDataRole, setData(), and headerData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Sets the role data for the item at index to value.</para>
            <para>Returns true if successful; otherwise returns false.</para>
            <para>The dataChanged() signal should be emitted if the data was
            successfully set.</para>
            <para>The base class implementation returns false. This function and
            data() must be reimplemented for editable models.</para>
            <para>See also Qt::ItemDataRole, data(), and itemData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Returns the data for the given role and section in the header
            with the specified orientation.</para>
            <para>For horizontal headers, the section number corresponds to the
            column number. Similarly, for vertical headers, the section number
            corresponds to the row number.</para>
            <para>See also Qt::ItemDataRole, setHeaderData(), and
            QHeaderView.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.SetHeaderData(System.Int32,QtCore.Qt.Orientation,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Sets the data for the given role and section in the header with
            the specified orientation to the value supplied.</para>
            <para>Returns true if the header's data was updated; otherwise returns
            false.</para>
            <para>When reimplementing this function, the headerDataChanged() signal
            must be emitted explicitly.</para>
            <para>See also Qt::ItemDataRole and headerData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.CanDropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if a model can accept a drop of the data. This
            default implementation only checks if data has at least one format in the
            list of mimeTypes() and if action is among the model's
            supportedDropActions().</para>
            <para>Reimplement this function in your custom model, if you want to
            test whether the data can be dropped at row, column, parent with action. If
            you don't need that test, it is not necessary to reimplement this
            function.</para>
            <para>See also dropMimeData() and Using drag and drop with item
            views.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Handles the data supplied by a drag and drop operation that ended
            with the given action.</para>
            <para>Returns true if the data and action were handled by the model;
            otherwise returns false.</para>
            <para>The specified row, column and parent indicate the location of an
            item in the model where the operation ended. It is the responsibility of
            the model to complete the action at the correct location.</para>
            <para>For instance, a drop action on an item in a QTreeView can result
            in new items either being inserted as children of the item specified by
            row, column, and parent, or as siblings of the item.</para>
            <para>When row and column are -1 it means that the dropped data should
            be considered as dropped directly on parent. Usually this will mean
            appending the data as child items of parent. If row and column are greater
            than or equal zero, it means that the drop occurred just before the
            specified row and column in the specified parent.</para>
            <para>The mimeTypes() member is called to get the list of acceptable
            MIME types. This default implementation assumes the default implementation
            of mimeTypes(), which returns a single default MIME type. If you
            reimplement mimeTypes() in your custom model to return multiple MIME types,
            you must reimplement this function to make use of them.</para>
            <para>See also supportedDropActions(), canDropMimeData(), and Using
            drag and drop with item views.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.InsertRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Note: The base class implementation of this function does nothing
            and returns false.</para>
            <para>On models that support this, inserts count rows into the model
            before the given row. Items in the new row will be children of the item
            represented by the parent model index.</para>
            <para>If row is 0, the rows are prepended to any existing rows in the
            parent.</para>
            <para>If row is rowCount(), the rows are appended to any existing rows
            in the parent.</para>
            <para>If parent has no children, a single column with count rows is
            inserted.</para>
            <para>Returns true if the rows were successfully inserted; otherwise
            returns false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support insertions. Alternatively, you can provide
            your own API for altering the data. In either case, you will need to call
            beginInsertRows() and endInsertRows() to notify other components that the
            model has changed.</para>
            <para>See also insertColumns(), removeRows(), beginInsertRows(), and
            endInsertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.InsertColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>On models that support this, inserts count new columns into the
            model before the given column. The items in each new column will be
            children of the item represented by the parent model index.</para>
            <para>If column is 0, the columns are prepended to any existing
            columns.</para>
            <para>If column is columnCount(), the columns are appended to any
            existing columns.</para>
            <para>If parent has no children, a single row with count columns is
            inserted.</para>
            <para>Returns true if the columns were successfully inserted; otherwise
            returns false.</para>
            <para>The base class implementation does nothing and returns
            false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support insertions. Alternatively, you can provide
            your own API for altering the data.</para>
            <para>See also insertRows(), removeColumns(), beginInsertColumns(), and
            endInsertColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.RemoveRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>On models that support this, removes count rows starting with the
            given row under parent parent from the model.</para>
            <para>Returns true if the rows were successfully removed; otherwise
            returns false.</para>
            <para>The base class implementation does nothing and returns
            false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support removing. Alternatively, you can provide
            your own API for altering the data.</para>
            <para>See also removeRow(), removeColumns(), insertColumns(),
            beginRemoveRows(), and endRemoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.RemoveColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>On models that support this, removes count columns starting with
            the given column under parent parent from the model.</para>
            <para>Returns true if the columns were successfully removed; otherwise
            returns false.</para>
            <para>The base class implementation does nothing and returns
            false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support removing. Alternatively, you can provide
            your own API for altering the data.</para>
            <para>See also removeColumn(), removeRows(), insertColumns(),
            beginRemoveColumns(), and endRemoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.MoveRows(QtCore.QModelIndex,System.Int32,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>On models that support this, moves count rows starting with the
            given sourceRow under parent sourceParent to row destinationChild under
            parent destinationParent.</para>
            <para>Returns true if the rows were successfully moved; otherwise
            returns false.</para>
            <para>The base class implementation does nothing and returns
            false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support moving. Alternatively, you can provide your
            own API for altering the data.</para>
            <para>See also beginMoveRows() and endMoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.MoveColumns(QtCore.QModelIndex,System.Int32,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>On models that support this, moves count columns starting with
            the given sourceColumn under parent sourceParent to column destinationChild
            under parent destinationParent.</para>
            <para>Returns true if the columns were successfully moved; otherwise
            returns false.</para>
            <para>The base class implementation does nothing and returns
            false.</para>
            <para>If you implement your own model, you can reimplement this
            function if you want to support moving. Alternatively, you can provide your
            own API for altering the data.</para>
            <para>See also beginMoveColumns() and endMoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.InsertRow(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Inserts a single row before the given row in the child items of
            the parent specified.</para>
            <para>Note: This function calls the virtual method insertRows.</para>
            <para>Returns true if the row is inserted; otherwise returns
            false.</para>
            <para>See also insertRows(), insertColumn(), and removeRow().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.InsertColumn(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Inserts a single column before the given column in the child
            items of the parent specified.</para>
            <para>Returns true if the column is inserted; otherwise returns
            false.</para>
            <para>See also insertColumns(), insertRow(), and removeColumn().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.RemoveRow(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Removes the given row from the child items of the parent
            specified.</para>
            <para>Returns true if the row is removed; otherwise returns
            false.</para>
            <para>This is a convenience function that calls removeRows(). The
            QAbstractItemModel implementation of removeRows() does nothing.</para>
            <para>See also removeRows(), removeColumn(), and insertRow().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.RemoveColumn(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Removes the given column from the child items of the parent
            specified.</para>
            <para>Returns true if the column is removed; otherwise returns
            false.</para>
            <para>See also removeColumns(), removeRow(), and insertColumn().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.MoveRow(QtCore.QModelIndex,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>On models that support this, moves sourceRow from sourceParent to
            destinationChild under destinationParent.</para>
            <para>Returns true if the rows were successfully moved; otherwise
            returns false.</para>
            <para>See also moveRows() and moveColumn().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.MoveColumn(QtCore.QModelIndex,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>On models that support this, moves sourceColumn from sourceParent
            to destinationChild under destinationParent.</para>
            <para>Returns true if the columns were successfully moved; otherwise
            returns false.</para>
            <para>See also moveColumns() and moveRow().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.FetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Fetches any available data for the items with the parent
            specified by the parent index.</para>
            <para>Reimplement this if you are populating your model
            incrementally.</para>
            <para>The default implementation does nothing.</para>
            <para>See also canFetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.CanFetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if there is more data available for parent;
            otherwise returns false.</para>
            <para>The default implementation always returns false.</para>
            <para>If canFetchMore() returns true, the fetchMore() function should
            be called. This is the behavior of QAbstractItemView, for example.</para>
            <para>See also fetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Returns the item flags for the given index.</para>
            <para>The base class implementation returns a combination of flags that
            enables the item (ItemIsEnabled) and allows it to be selected
            (ItemIsSelectable).</para>
            <para>See also Qt::ItemFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts the model by column in the given order.</para>
            <para>The base class implementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Buddy(QtCore.QModelIndex)">
            <summary>
            <para>Returns a model index for the buddy of the item represented by
            index. When the user wants to edit an item, the view will call this
            function to check whether another item in the model should be edited
            instead. Then, the view will construct a delegate using the model index
            returned by the buddy item.</para>
            <para>The default implementation of this function has each item as its
            own buddy.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Span(QtCore.QModelIndex)">
            <summary>
            <para>Returns the row and column span of the item represented by
            index.</para>
            <para>Note: Currently, span is not used.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Submit">
            <summary>
            <para>Lets the model know that it should submit cached information to
            permanent storage. This function is typically used for row editing.</para>
            <para>Returns true if there is no error; otherwise returns
            false.</para>
            <para>See also revert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.Revert">
            <summary>
            <para>Lets the model know that it should discard cached information.
            This function is typically used for row editing.</para>
            <para>See also submit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.ResetInternalData">
            <summary>
            <para>This slot is called just after the internal data of a model is
            cleared while it is being reset.</para>
            <para>This slot is provided the convenience of subclasses of concrete
            proxy models, such as subclasses of QSortFilterProxyModel which maintain
            extra data.</para>
            <para>class CustomDataProxy : public QSortFilterProxyModel</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>public:</para>
            <para>    CustomDataProxy(QObject *parent)</para>
            <para>      : QSortFilterProxyModel(parent)</para>
            <para>    {</para>
            <para>    }</para>
            <para></para>
            <para>    ...</para>
            <para></para>
            <para>    QVariant data(const QModelIndex &amp;index, int role)</para>
            <para>    {</para>
            <para>        if (role != Qt::BackgroundRole)</para>
            <para>            return QSortFilterProxyModel::data(index,
            role);</para>
            <para></para>
            <para>        if (m_customData.contains(index.row()))</para>
            <para>            return m_customData.value(index.row());</para>
            <para>        return QSortFilterProxyModel::data(index, role);</para>
            <para>    }</para>
            <para></para>
            <para>private slots:</para>
            <para>    void resetInternalData()</para>
            <para>    {</para>
            <para>        m_customData.clear();</para>
            <para>    }</para>
            <para></para>
            <para>private:</para>
            <para>  QHash&lt;int, QVariant&gt; m_customData;</para>
            <para>};</para>
            <para>Note: Due to a mistake, this slot is missing in Qt 5.0.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also modelAboutToBeReset() and modelReset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.CreateIndex(System.Int32,System.Int32,System.IntPtr)">
            <summary>
            <para>Creates a model index for the given row and column with the
            internal pointer ptr.</para>
            <para>When using a QSortFilterProxyModel, its indexes have their own
            internal pointer. It is not advisable to access this internal pointer
            outside of the model. Use the data() function instead.</para>
            <para>This function provides a consistent interface that model
            subclasses must use to create model indexes.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.CreateIndex(System.Int32,System.Int32,System.UInt32)">
            <summary>
            <para>Creates a model index for the given row and column with the
            internal identifier, id.</para>
            <para>This function provides a consistent interface that model
            subclasses must use to create model indexes.</para>
            <para>See also QModelIndex::internalId().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginInsertRows(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Begins a row insertion operation.</para>
            <para>When reimplementing insertRows() in a subclass, you must call
            this function before inserting data into the model's underlying data
            store.</para>
            <para>The parent index corresponds to the parent into which the new
            rows are inserted; first and last are the row numbers that the new rows
            will have after they have been inserted.</para>
            <para></para>
            <para> 	Specify the first and last row numbers for the span of rows you
            want to insert into an item in a model.For example, as shown in the
            diagram, we insert three rows before row 2, so first is 2 and last is
            4:</para>
            <para>beginInsertRows(parent, 2, 4);</para>
            <para>This inserts the three new rows as rows 2, 3, and 4.</para>
            <para></para>
            <para>	To append rows, insert them after the last row.For example, as
            shown in the diagram, we append two rows to a collection of 4 existing rows
            (ending in row 3), so first is 4 and last is 5:</para>
            <para>beginInsertRows(parent, 4, 5);</para>
            <para>This appends the two new rows as rows 4 and 5.</para>
            <para></para>
            <para></para>
            <para>Note: This function emits the rowsAboutToBeInserted() signal
            which connected views (or proxies) must handle before the data is inserted.
            Otherwise, the views may end up in an invalid state.</para>
            <para>See also endInsertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndInsertRows">
            <summary>
            <para>Ends a row insertion operation.</para>
            <para>When reimplementing insertRows() in a subclass, you must call
            this function after inserting data into the model's underlying data
            store.</para>
            <para>See also beginInsertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginRemoveRows(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Begins a row removal operation.</para>
            <para>When reimplementing removeRows() in a subclass, you must call
            this function before removing data from the model's underlying data
            store.</para>
            <para>The parent index corresponds to the parent from which the new
            rows are removed; first and last are the row numbers of the rows to be
            removed.</para>
            <para></para>
            <para> 	Specify the first and last row numbers for the span of rows you
            want to remove from an item in a model.For example, as shown in the
            diagram, we remove the two rows from row 2 to row 3, so first is 2 and last
            is 3:</para>
            <para>beginRemoveRows(parent, 2, 3);</para>
            <para></para>
            <para></para>
            <para>Note: This function emits the rowsAboutToBeRemoved() signal which
            connected views (or proxies) must handle before the data is removed.
            Otherwise, the views may end up in an invalid state.</para>
            <para>See also endRemoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndRemoveRows">
            <summary>
            <para>Ends a row removal operation.</para>
            <para>When reimplementing removeRows() in a subclass, you must call
            this function after removing data from the model's underlying data
            store.</para>
            <para>See also beginRemoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginMoveRows(QtCore.QModelIndex,System.Int32,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Begins a row move operation.</para>
            <para>When reimplementing a subclass, this method simplifies moving
            entities in your model. This method is responsible for moving persistent
            indexes in the model, which you would otherwise be required to do yourself.
            Using beginMoveRows and endMoveRows is an alternative to emitting
            layoutAboutToBeChanged and layoutChanged directly along with
            changePersistentIndex.</para>
            <para>The sourceParent index corresponds to the parent from which the
            rows are moved; sourceFirst and sourceLast are the first and last row
            numbers of the rows to be moved. The destinationParent index corresponds to
            the parent into which those rows are moved. The destinationChild is the row
            to which the rows will be moved. That is, the index at row sourceFirst in
            sourceParent will become row destinationChild in destinationParent,
            followed by all other rows up to sourceLast.</para>
            <para>However, when moving rows down in the same parent (sourceParent
            and destinationParent are equal), the rows will be placed before the
            destinationChild index. That is, if you wish to move rows 0 and 1 so they
            will become rows 1 and 2, destinationChild should be 3. In this case, the
            new index for the source row i (which is between sourceFirst and
            sourceLast) is equal to (destinationChild-sourceLast-1+i).</para>
            <para>Note that if sourceParent and destinationParent are the same, you
            must ensure that the destinationChild is not within the range of
            sourceFirst and sourceLast + 1. You must also ensure that you do not
            attempt to move a row to one of its own children or ancestors. This method
            returns false if either condition is true, in which case you should abort
            your move operation.</para>
            <para></para>
            <para> 	Specify the first and last row numbers for the span of rows in
            the source parent you want to move in the model. Also specify the row in
            the destination parent to move the span to.For example, as shown in the
            diagram, we move three rows from row 2 to 4 in the source, so sourceFirst
            is 2 and sourceLast is 4. We move those items to above row 2 in the
            destination, so destinationChild is 2.</para>
            <para>beginMoveRows(sourceParent, 2, 4, destinationParent, 2);</para>
            <para>This moves the three rows rows 2, 3, and 4 in the source to
            become 2, 3 and 4 in the destination. Other affected siblings are displaced
            accordingly.</para>
            <para></para>
            <para>	To append rows to another parent, move them to after the last
            row.For example, as shown in the diagram, we move three rows to a
            collection of 6 existing rows (ending in row 5), so destinationChild is
            6:</para>
            <para>beginMoveRows(sourceParent, 2, 4, destinationParent, 6);</para>
            <para>This moves the target rows to the end of the target parent as 6,
            7 and 8.</para>
            <para></para>
            <para>	To move rows within the same parent, specify the row to move
            them to.For example, as shown in the diagram, we move one item from row 2
            to row 0, so sourceFirst and sourceLast are 2 and destinationChild is
            0.</para>
            <para>beginMoveRows(parent, 2, 2, parent, 0);</para>
            <para>Note that other rows may be displaced accordingly. Note also that
            when moving items within the same parent you should not attempt invalid or
            no-op moves. In the above example, item 2 is at row 2 before the move, so
            it can not be moved to row 2 (where it is already) or row 3 (no-op as row 3
            means above row 3, where it is already)</para>
            <para></para>
            <para>	To move rows within the same parent, specify the row to move
            them to.For example, as shown in the diagram, we move one item from row 2
            to row 4, so sourceFirst and sourceLast are 2 and destinationChild is
            4.</para>
            <para>beginMoveRows(parent, 2, 2, parent, 4);</para>
            <para>Note that other rows may be displaced accordingly.</para>
            <para></para>
            <para></para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also endMoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndMoveRows">
            <summary>
            <para>Ends a row move operation.</para>
            <para>When implementing a subclass, you must call this function after
            moving data within the model's underlying data store.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also beginMoveRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginInsertColumns(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Begins a column insertion operation.</para>
            <para>When reimplementing insertColumns() in a subclass, you must call
            this function before inserting data into the model's underlying data
            store.</para>
            <para>The parent index corresponds to the parent into which the new
            columns are inserted; first and last are the column numbers of the new
            columns will have after they have been inserted.</para>
            <para></para>
            <para> 	Specify the first and last column numbers for the span of
            columns you want to insert into an item in a model.For example, as shown in
            the diagram, we insert three columns before column 4, so first is 4 and
            last is 6:</para>
            <para>beginInsertColumns(parent, 4, 6);</para>
            <para>This inserts the three new columns as columns 4, 5, and 6.</para>
            <para></para>
            <para>	To append columns, insert them after the last column.For
            example, as shown in the diagram, we append three columns to a collection
            of six existing columns (ending in column 5), so first is 6 and last is
            8:</para>
            <para>beginInsertColumns(parent, 6, 8);</para>
            <para>This appends the two new columns as columns 6, 7, and 8.</para>
            <para></para>
            <para></para>
            <para>Note: This function emits the columnsAboutToBeInserted() signal
            which connected views (or proxies) must handle before the data is inserted.
            Otherwise, the views may end up in an invalid state.</para>
            <para>See also endInsertColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndInsertColumns">
            <summary>
            <para>Ends a column insertion operation.</para>
            <para>When reimplementing insertColumns() in a subclass, you must call
            this function after inserting data into the model's underlying data
            store.</para>
            <para>See also beginInsertColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginRemoveColumns(QtCore.QModelIndex,System.Int32,System.Int32)">
            <summary>
            <para>Begins a column removal operation.</para>
            <para>When reimplementing removeColumns() in a subclass, you must call
            this function before removing data from the model's underlying data
            store.</para>
            <para>The parent index corresponds to the parent from which the new
            columns are removed; first and last are the column numbers of the first and
            last columns to be removed.</para>
            <para></para>
            <para> 	Specify the first and last column numbers for the span of
            columns you want to remove from an item in a model.For example, as shown in
            the diagram, we remove the three columns from column 4 to column 6, so
            first is 4 and last is 6:</para>
            <para>beginRemoveColumns(parent, 4, 6);</para>
            <para></para>
            <para></para>
            <para>Note: This function emits the columnsAboutToBeRemoved() signal
            which connected views (or proxies) must handle before the data is removed.
            Otherwise, the views may end up in an invalid state.</para>
            <para>See also endRemoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndRemoveColumns">
            <summary>
            <para>Ends a column removal operation.</para>
            <para>When reimplementing removeColumns() in a subclass, you must call
            this function after removing data from the model's underlying data
            store.</para>
            <para>See also beginRemoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginMoveColumns(QtCore.QModelIndex,System.Int32,System.Int32,QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Begins a column move operation.</para>
            <para>When reimplementing a subclass, this method simplifies moving
            entities in your model. This method is responsible for moving persistent
            indexes in the model, which you would otherwise be required to do yourself.
            Using beginMoveRows and endMoveRows is an alternative to emitting
            layoutAboutToBeChanged and layoutChanged directly along with
            changePersistentIndex.</para>
            <para>The sourceParent index corresponds to the parent from which the
            columns are moved; sourceFirst and sourceLast are the first and last column
            numbers of the columns to be moved. The destinationParent index corresponds
            to the parent into which those columns are moved. The destinationChild is
            the column to which the columns will be moved. That is, the index at column
            sourceFirst in sourceParent will become column destinationChild in
            destinationParent, followed by all other columns up to sourceLast.</para>
            <para>However, when moving columns down in the same parent
            (sourceParent and destinationParent are equal), the columns will be placed
            before the destinationChild index. That is, if you wish to move columns 0
            and 1 so they will become columns 1 and 2, destinationChild should be 3. In
            this case, the new index for the source column i (which is between
            sourceFirst and sourceLast) is equal to
            (destinationChild-sourceLast-1+i).</para>
            <para>Note that if sourceParent and destinationParent are the same, you
            must ensure that the destinationChild is not within the range of
            sourceFirst and sourceLast + 1. You must also ensure that you do not
            attempt to move a column to one of its own children or ancestors. This
            method returns false if either condition is true, in which case you should
            abort your move operation.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also endMoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndMoveColumns">
            <summary>
            <para>Ends a column move operation.</para>
            <para>When implementing a subclass, you must call this function after
            moving data within the model's underlying data store.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also beginMoveColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.BeginResetModel">
            <summary>
            <para>Begins a model reset operation.</para>
            <para>A reset operation resets the model to its current state in any
            attached views.</para>
            <para>Note: Any views attached to this model will be reset as
            well.</para>
            <para>When a model is reset it means that any previous data reported
            from the model is now invalid and has to be queried for again. This also
            means that the current item and any selected items will become
            invalid.</para>
            <para>When a model radically changes its data it can sometimes be
            easier to just call this function rather than emit dataChanged() to inform
            other components when the underlying data source, or its structure, has
            changed.</para>
            <para>You must call this function before resetting any internal data
            structures in your model or proxy model.</para>
            <para>This function emits the signal modelAboutToBeReset().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also modelAboutToBeReset(), modelReset(), and
            endResetModel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.EndResetModel">
            <summary>
            <para>Completes a model reset operation.</para>
            <para>You must call this function after resetting any internal data
            structure in your model or proxy model.</para>
            <para>This function emits the signal modelReset().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also beginResetModel().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.ChangePersistentIndex(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Changes the QPersistentModelIndex that is equal to the given from
            model index to the given to model index.</para>
            <para>If no persistent model index equal to the given from model index
            was found, nothing is changed.</para>
            <para>See also persistentIndexList() and
            changePersistentIndexList().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractItemModel.QHash(QtCore.QPersistentModelIndex,System.UInt32)">
            <summary>
            <para>Returns a hash of the QPersistentModelIndex index, using seed to
            seed the calculation.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.HeaderDataChanged">
            <summary>
            <para>This signal is emitted whenever a header is changed. The orientation indicates whether the horizontal or vertical header has changed. The sections in the header from the first to the last need to be updated.</para>
            <para>When reimplementing the setHeaderData() function, this signal must be emitted explicitly.</para>
            <para>If you are changing the number of columns or rows you do not need to emit this signal, but use the begin/end functions (refer to the section on subclassing in the QAbstractItemModel class description for details).</para>
            <para>See also headerData(), setHeaderData(), and dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsAboutToBeInserted">
            <summary>
            <para>This signal is emitted just before rows are inserted into the model. The new items will be positioned between start and end inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also insertRows() and beginInsertRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsInserted">
            <summary>
            <para>This signal is emitted after rows have been inserted into the model. The new items are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also insertRows() and beginInsertRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsAboutToBeRemoved">
            <summary>
            <para>This signal is emitted just before rows are removed from the model. The items that will be removed are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also removeRows() and beginRemoveRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsRemoved">
            <summary>
            <para>This signal is emitted after rows have been removed from the model. The removed items are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also removeRows() and beginRemoveRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsAboutToBeInserted">
            <summary>
            <para>This signal is emitted just before columns are inserted into the model. The new items will be positioned between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also insertColumns() and beginInsertColumns().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsInserted">
            <summary>
            <para>This signal is emitted after columns have been inserted into the model. The new items are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also insertColumns() and beginInsertColumns().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsAboutToBeRemoved">
            <summary>
            <para>This signal is emitted just before columns are removed from the model. The items to be removed are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also removeColumns() and beginRemoveColumns().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsRemoved">
            <summary>
            <para>This signal is emitted after columns have been removed from the model. The removed items are those between first and last inclusive, under the given parent item.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also removeColumns() and beginRemoveColumns().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ModelAboutToBeReset">
            <summary>
            <para>This signal is emitted when reset() is called, before the model's internal state (e.g. persistent model indexes) has been invalidated.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also beginResetModel() and modelReset().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ModelReset">
            <summary>
            <para>This signal is emitted when reset() or endResetModel() is called, after the model's internal state (e.g. persistent model indexes) has been invalidated.</para>
            <para>Note that if a model is reset it should be considered that all information previously retrieved from it is invalid. This includes but is not limited to the rowCount() and columnCount(), flags(), data retrieved through data(), and roleNames().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also endResetModel() and modelAboutToBeReset().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsAboutToBeMoved">
            <summary>
            <para>This signal is emitted just before rows are moved within the model. The items that will be moved are those between sourceStart and sourceEnd inclusive, under the given sourceParent item. They will be moved to destinationParent starting at the row destinationRow.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also beginMoveRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.RowsMoved">
            <summary>
            <para>This signal is emitted after rows have been moved within the model. The items between start and end inclusive, under the given parent item have been moved to destination starting at the row row.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also beginMoveRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsAboutToBeMoved">
            <summary>
            <para>This signal is emitted just before columns are moved within the model. The items that will be moved are those between sourceStart and sourceEnd inclusive, under the given sourceParent item. They will be moved to destinationParent starting at the column destinationColumn.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also beginMoveRows().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractItemModel.ColumnsMoved">
            <summary>
            <para>This signal is emitted after columns have been moved within the model. The items between start and end inclusive, under the given parent item have been moved to destination starting at the column column.</para>
            <para>Note: Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the QAbstractItemModel implementation, and cannot be explicitly emitted in subclass code.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also beginMoveRows().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractItemModel.MimeTypes">
            <summary>
            <para>Returns the list of allowed MIME types. By default, the built-in
            models and views use an internal MIME type:
            application/x-qabstractitemmodeldatalist.</para>
            <para>When implementing drag and drop support in a custom model, if you
            will return data in formats other than the default internal MIME type,
            reimplement this function to return your list of MIME types.</para>
            <para>If you reimplement this function in your custom model, you must
            also reimplement the member functions that call it: mimeData() and
            dropMimeData().</para>
            <para>See also mimeData() and dropMimeData().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractItemModel.SupportedDropActions">
            <summary>
            <para>Returns the drop actions supported by this model.</para>
            <para>The default implementation returns Qt::CopyAction. Reimplement
            this function if you wish to support additional actions. You must also
            reimplement the dropMimeData() function to handle the additional
            operations.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also dropMimeData(), Qt::DropActions, and Using drag and drop
            with item views.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractItemModel.SupportedDragActions">
            <summary>
            <para>Returns the actions supported by the data in this model.</para>
            <para>The default implementation returns supportedDropActions().
            Reimplement this function if you wish to support additional actions.</para>
            <para>supportedDragActions() is used by QAbstractItemView::startDrag()
            as the default values when a drag occurs.</para>
            <para>See also setSupportedDragActions(), Qt::DropActions, and Using
            drag and drop with item views.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractItemModel.LayoutChangeHint">
            <summary>
            <para>This enum describes the way the model changes layout.</para>
            <para>Note that VerticalSortHint and HorizontalSortHint carry the
            meaning that items are being moved within the same parent, not moved to a
            different parent in the model, and not filtered out or in.</para>
            </summary>
        </member>
        <member name="F:QtCore.QAbstractItemModel.LayoutChangeHint.NoLayoutChangeHint">
            <summary>No hint is available.</summary>
        </member>
        <member name="F:QtCore.QAbstractItemModel.LayoutChangeHint.VerticalSortHint">
            <summary>Rows are being sorted.</summary>
        </member>
        <member name="F:QtCore.QAbstractItemModel.LayoutChangeHint.HorizontalSortHint">
            <summary>Columns are being sorted.</summary>
        </member>
        <member name="T:QtCore.QAbstractTableModel">
            <summary>
            <para>The QAbstractTableModel class provides an abstract model that can
            be subclassed to create table models.</para>
            </summary>
            <remarks>
            <para>QAbstractTableModel provides a standard interface for models that
            represent their data as a two-dimensional array of items. It is not used
            directly, but must be subclassed.</para>
            <para>Since the model provides a more specialized interface than
            QAbstractItemModel, it is not suitable for use with tree views, although it
            can be used to provide data to a QListView. If you need to represent a
            simple list of items, and only need a model to contain a single column of
            data, subclassing the QAbstractListModel may be more appropriate.</para>
            <para>The rowCount() and columnCount() functions return the dimensions
            of the table. To retrieve a model index corresponding to an item in the
            model, use index() and provide only the row and column numbers.</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QAbstractTableModel, you must implement
            rowCount(), columnCount(), and data(). Default implementations of the
            index() and parent() functions are provided by QAbstractTableModel. Well
            behaved models will also implement headerData().</para>
            <para>Editable models need to implement setData(), and implement
            flags() to return a value containing Qt::ItemIsEditable.</para>
            <para>Models that provide interfaces to resizable data structures can
            provide implementations of insertRows(), removeRows(), insertColumns(), and
            removeColumns(). When implementing these functions, it is important to call
            the appropriate functions so that all connected views are aware of any
            changes:</para>
            <para></para>
            <para>An insertRows() implementation must call beginInsertRows() before
            inserting new rows into the data structure, and it must call
            endInsertRows() immediately afterwards.</para>
            <para>An insertColumns() implementation must call beginInsertColumns()
            before inserting new columns into the data structure, and it must call
            endInsertColumns() immediately afterwards.</para>
            <para>A removeRows() implementation must call beginRemoveRows() before
            the rows are removed from the data structure, and it must call
            endRemoveRows() immediately afterwards.</para>
            <para>A removeColumns() implementation must call beginRemoveColumns()
            before the columns are removed from the data structure, and it must call
            endRemoveColumns() immediately afterwards.</para>
            <para></para>
            <para>Note: Some general guidelines for subclassing models are
            available in the Model Subclassing Reference.</para>
            <para></para>
            <para>See also Model Classes, QAbstractItemModel, QAbstractListModel,
            and Pixelator Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractTableModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an abstract table model for the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTableModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            <para>Returns the index of the data in row and column with
            parent.</para>
            <para>See also parent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTableModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTableModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTableModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTableModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractListModel">
            <summary>
            <para>The QAbstractListModel class provides an abstract model that can
            be subclassed to create one-dimensional list models.</para>
            </summary>
            <remarks>
            <para>QAbstractListModel provides a standard interface for models that
            represent their data as a simple non-hierarchical sequence of items. It is
            not used directly, but must be subclassed.</para>
            <para>Since the model provides a more specialized interface than
            QAbstractItemModel, it is not suitable for use with tree views; you will
            need to subclass QAbstractItemModel if you want to provide a model for that
            purpose. If you need to use a number of list models to manage data, it may
            be more appropriate to subclass QAbstractTableModel instead.</para>
            <para>Simple models can be created by subclassing this class and
            implementing the minimum number of required functions. For example, we
            could implement a simple read-only QStringList-based model that provides a
            list of strings to a QListView widget. In such a case, we only need to
            implement the rowCount() function to return the number of items in the
            list, and the data() function to retrieve items from the list.</para>
            <para>Since the model represents a one-dimensional structure, the
            rowCount() function returns the total number of items in the model. The
            columnCount() function is implemented for interoperability with all kinds
            of views, but by default informs views that the model contains only one
            column.</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QAbstractListModel, you must provide
            implementations of the rowCount() and data() functions. Well behaved models
            also provide a headerData() implementation.</para>
            <para>If your model is used within QML and requires roles other than
            the default ones provided by the roleNames() function, you must override
            it.</para>
            <para>For editable list models, you must also provide an implementation
            of setData(), and implement the flags() function so that it returns a value
            containing Qt::ItemIsEditable.</para>
            <para>Note that QAbstractListModel provides a default implementation of
            columnCount() that informs views that there is only a single column of
            items in this model.</para>
            <para>Models that provide interfaces to resizable list-like data
            structures can provide implementations of insertRows() and removeRows().
            When implementing these functions, it is important to call the appropriate
            functions so that all connected views are aware of any changes:</para>
            <para></para>
            <para>An insertRows() implementation must call beginInsertRows() before
            inserting new rows into the data structure, and it must call
            endInsertRows() immediately afterwards.</para>
            <para>A removeRows() implementation must call beginRemoveRows() before
            the rows are removed from the data structure, and it must call
            endRemoveRows() immediately afterwards.</para>
            <para></para>
            <para>Note: Some general guidelines for subclassing models are
            available in the Model Subclassing Reference.</para>
            <para></para>
            <para>See also Model Classes, Model Subclassing Reference,
            QAbstractItemView, QAbstractTableModel, and Item Views Puzzle
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractListModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an abstract list model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractListModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            <para>Returns the index of the data in row and column with
            parent.</para>
            <para>See also parent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractListModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractListModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractListModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractListModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractProxyModel">
            <summary>
            <para>The QAbstractProxyModel class provides a base class for proxy
            item models that can do sorting, filtering or other data processing
            tasks.</para>
            </summary>
            <remarks>
            <para>This class defines the standard interface that proxy models must
            use to be able to interoperate correctly with other model/view components.
            It is not supposed to be instantiated directly.</para>
            <para>All standard proxy models are derived from the
            QAbstractProxyModel class. If you need to create a new proxy model class,
            it is usually better to subclass an existing class that provides the
            closest behavior to the one you want to provide.</para>
            <para>Proxy models that filter or sort items of data from a source
            model should be created by using or subclassing
            QSortFilterProxyModel.</para>
            <para>To subclass QAbstractProxyModel, you need to implement
            mapFromSource() and mapToSource(). The mapSelectionFromSource() and
            mapSelectionToSource() functions only need to be reimplemented if you need
            a behavior different from the default behavior.</para>
            <para>Note: If the source model is deleted or no source model is
            specified, the proxy model operates on a empty placeholder model.</para>
            <para></para>
            <para>See also QSortFilterProxyModel, QAbstractItemModel, and
            Model/View Programming.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a proxy model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.MapToSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplement this function to return the model index in the source
            model that corresponds to the proxyIndex in the proxy model.</para>
            <para>See also mapFromSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.MapFromSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplement this function to return the model index in the proxy
            model that corresponds to the sourceIndex from the source model.</para>
            <para>See also mapToSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.MapSelectionToSource(QtCore.QItemSelection)">
            <summary>
            <para>Returns a source selection mapped from the specified
            proxySelection.</para>
            <para>Reimplement this method to map proxy selections to source
            selections.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.MapSelectionFromSource(QtCore.QItemSelection)">
            <summary>
            <para>Returns a proxy selection mapped from the specified
            sourceSelection.</para>
            <para>Reimplement this method to map source selections to proxy
            selections.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Submit">
            <summary>
            <para>Reimplemented from QAbstractItemModel::submit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Revert">
            <summary>
            <para>Reimplemented from QAbstractItemModel::revert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            <para>See also setHeaderData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.SetHeaderData(System.Int32,QtCore.Qt.Orientation,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setHeaderData().</para>
            <para>See also headerData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Buddy(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::buddy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.CanFetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::canFetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.FetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::fetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Span(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::span().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::hasChildren().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.CanDropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::canDropMimeData().</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.ResetInternalData">
            <summary>
            <para>Clears the roleNames of this proxy model.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractProxyModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractProxyModel.SourceModelChanged">
            <summary>
            <para>This property holds the source model this proxy model.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractItemModel * 	sourceModel() const</para>
            <para> virtual void 	setSourceModel(QAbstractItemModel * sourceModel)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	sourceModelChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractProxyModel.SourceModel">
            <summary>
            <para>This property holds the source model this proxy model.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractProxyModel.MimeTypes">
            <summary>
            <para>Reimplemented from QAbstractItemModel::mimeTypes().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractProxyModel.SupportedDragActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDragActions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractProxyModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            </summary>
        </member>
        <member name="T:QtCore.QIdentityProxyModel">
            <summary>
            <para>The QIdentityProxyModel class proxies its source model
            unmodified</para>
            </summary>
            <remarks>
            <para>QIdentityProxyModel can be used to forward the structure of a
            source model exactly, with no sorting, filtering or other transformation.
            This is similar in concept to an identity matrix where A.I = A.</para>
            <para>Because it does no sorting or filtering, this class is most
            suitable to proxy models which transform the data() of the source model.
            For example, a proxy model could be created to define the font used, or the
            background colour, or the tooltip etc. This removes the need to implement
            all data handling in the same class that creates the structure of the
            model, and can also be used to create re-usable components.</para>
            <para>This also provides a way to change the data in the case where a
            source model is supplied by a third party which can not be modified.</para>
            <para>class DateFormatProxyModel : public QIdentityProxyModel</para>
            <para>{</para>
            <para>  // ...</para>
            <para></para>
            <para>  void setDateFormatString(const QString
            &amp;formatString)</para>
            <para>  {</para>
            <para>    m_formatString = formatString;</para>
            <para>  }</para>
            <para></para>
            <para>  QVariant data(const QModelIndex &amp;index, int role)
            const</para>
            <para>  {</para>
            <para>    if (role != Qt::DisplayRole)</para>
            <para>      return QIdentityProxyModel::data(index, role);</para>
            <para></para>
            <para>    const QDateTime dateTime =
            sourceModel()-&gt;data(SourceClass::DateRole).toDateTime();</para>
            <para></para>
            <para>    return dateTime.toString(m_formatString);</para>
            <para>  }</para>
            <para></para>
            <para>private:</para>
            <para>  QString m_formatString;</para>
            <para>};</para>
            <para></para>
            <para>See also QAbstractProxyModel, Model/View Programming, and
            QAbstractItemModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an identity model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::columnCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.MapFromSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractProxyModel::mapFromSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.MapToSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractProxyModel::mapToSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::parent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.MapSelectionFromSource(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractProxyModel::mapSelectionFromSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.MapSelectionToSource(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractProxyModel::mapSelectionToSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.InsertColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.InsertRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.RemoveColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.RemoveRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QIdentityProxyModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QIdentityProxyModel.SourceModel">
            <summary>
            <para>This property holds the source model this proxy model.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            <para></para>
            <para>Reimplemented from QAbstractProxyModel::setSourceModel().</para>
            </summary>
        </member>
        <member name="T:QtCore.QItemSelectionRange">
            <summary>
            <para>The QItemSelectionRange class manages information about a range
            of selected items in a model.</para>
            </summary>
            <remarks>
            <para>A QItemSelectionRange contains information about a range of
            selected items in a model. A range of items is a contiguous array of model
            items, extending to cover a number of adjacent rows and columns with a
            common parent item; this can be visualized as a two-dimensional block of
            cells in a table. A selection range has a top(), left() a bottom(), right()
            and a parent().</para>
            <para>The QItemSelectionRange class is one of the Model/View Classes
            and is part of Qt's model/view framework.</para>
            <para>The model items contained in the selection range can be obtained
            using the indexes() function. Use QItemSelectionModel::selectedIndexes() to
            get a list of all selected items for a view.</para>
            <para>You can determine whether a given model item lies within a
            particular range by using the contains() function. Ranges can also be
            compared using the overloaded operators for equality and inequality, and
            the intersects() function allows you to determine whether two ranges
            overlap.</para>
            <para></para>
            <para>See also Model/View Programming, QAbstractItemModel,
            QItemSelection, and QItemSelectionModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QItemSelectionRange.#ctor">
            <summary>
            <para>Constructs an empty selection range.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.#ctor(QtCore.QItemSelectionRange)">
            <summary>
            <para>Copy constructor. Constructs a new selection range with the same
            contents as the other range given.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.#ctor(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Constructs a new selection range containing only the index
            specified by the topLeft and the index bottomRight.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.#ctor(QtCore.QModelIndex)">
            <summary>
            <para>Constructs a new selection range containing only the model item
            specified by the model index index.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.Right">
            <summary>
            <para>Returns the column index corresponding to the rightmost selected
            column in the selection range.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.Contains(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the model item specified by the index lies within
            the range of selected items; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.Contains(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the model item specified by (row, column) and
            with parentIndex as the parent item lies within the range of selected
            items; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.Intersects(QtCore.QItemSelectionRange)">
            <summary>
            <para>Returns true if this selection range intersects (overlaps with)
            the other range given; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.Intersected(QtCore.QItemSelectionRange)">
            <summary>
            <para>Returns a new selection range containing only the items that are
            found in both the selection range and the other selection range.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.op_Equality(QtCore.QItemSelectionRange,QtCore.QItemSelectionRange)">
            <summary>
            <para>Returns true if the selection range is exactly the same as the
            other range given; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.op_Inequality(QtCore.QItemSelectionRange,QtCore.QItemSelectionRange)">
            <summary>
            <para>Returns true if the selection range differs from the other range
            given; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionRange.op_LessThan(QtCore.QItemSelectionRange,QtCore.QItemSelectionRange)">
            <summary>
            <para>Returns true if the selection range is less than the other range
            given; otherwise returns false.</para>
            <para>The less than calculation is not directly useful to developers -
            the way that ranges with different parents compare is not defined. This
            operator only exists so that the class can be used with QMap.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Top">
            <summary>
            <para>Returns the row index corresponding to the uppermost selected row
            in the selection range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Left">
            <summary>
            <para>Returns the column index corresponding to the leftmost selected
            column in the selection range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Bottom">
            <summary>
            <para>Returns the row index corresponding to the lowermost selected row
            in the selection range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Width">
            <summary>
            <para>Returns the number of selected columns in the selection
            range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Height">
            <summary>
            <para>Returns the number of selected rows in the selection
            range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.TopLeft">
            <summary>
            <para>Returns the index for the item located at the top-left corner of
            the selection range.</para>
            <para>See also top(), left(), and bottomRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.BottomRight">
            <summary>
            <para>Returns the index for the item located at the bottom-right corner
            of the selection range.</para>
            <para>See also bottom(), right(), and topLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Parent">
            <summary>
            <para>Returns the parent model item index of the items in the selection
            range.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.Model">
            <summary>
            <para>Returns the model that the items in the selection range belong
            to.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.IsValid">
            <summary>
            <para>Returns true if the selection range is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionRange.IsEmpty">
            <summary>
            <para>Returns true if the selection range contains no selectable
            item</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="T:QtCore.QItemSelectionModel">
            <summary>
            <para>The QItemSelectionModel class keeps track of a view's selected
            items.</para>
            </summary>
            <remarks>
            <para>A QItemSelectionModel keeps track of the selected items in a
            view, or in several views onto the same model. It also keeps track of the
            currently selected item in a view.</para>
            <para>The QItemSelectionModel class is one of the Model/View Classes
            and is part of Qt's model/view framework.</para>
            <para>The selected items are stored using ranges. Whenever you want to
            modify the selected items use select() and provide either a QItemSelection,
            or a QModelIndex and a QItemSelectionModel::SelectionFlag.</para>
            <para>The QItemSelectionModel takes a two layer approach to selection
            management, dealing with both selected items that have been committed and
            items that are part of the current selection. The current selected items
            are part of the current interactive selection (for example with rubber-band
            selection or keyboard-shift selections).</para>
            <para>To update the currently selected items, use the bitwise OR of
            QItemSelectionModel::Current and any of the other SelectionFlags. If you
            omit the QItemSelectionModel::Current command, a new current selection will
            be created, and the previous one added to the whole selection. All
            functions operate on both layers; for example, selecteditems() will return
            items from both layers.</para>
            <para>Note: Since 5.5, model, hasSelection, and currentIndex are
            meta-object properties.</para>
            <para></para>
            <para>See also Model/View Programming, QAbstractItemModel, and Chart
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QItemSelectionModel.#ctor(QtCore.QAbstractItemModel)">
            <summary>
            <para>Constructs a selection model that operates on the specified item
            model.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.#ctor(QtCore.QAbstractItemModel,QtCore.QObject)">
            <summary>
            <para>Constructs a selection model that operates on the specified item
            model with parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.IsSelected(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the given model item index is selected.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.IsRowSelected(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if all items are selected in the row with the given
            parent.</para>
            <para>Note that this function is usually faster than calling
            isSelected() on all items in the same row and that unselectable items are
            ignored.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.IsColumnSelected(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if all items are selected in the column with the
            given parent.</para>
            <para>Note that this function is usually faster than calling
            isSelected() on all items in the same column and that unselectable items
            are ignored.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.RowIntersectsSelection(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if there are any items selected in the row with the
            given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.ColumnIntersectsSelection(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if there are any items selected in the column with
            the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.SetCurrentIndex(QtCore.QModelIndex,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Sets the model item index to be the current item, and emits
            currentChanged(). The current item is used for keyboard navigation and
            focus indication; it is independent of any selected items, although a
            selected item can also be the current item.</para>
            <para>Depending on the specified command, the index can also become
            part of the current selection.</para>
            <para>See also currentIndex() and select().</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.Select(QtCore.QModelIndex,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Selects the model item index using the specified command, and
            emits selectionChanged().</para>
            <para>See also QItemSelectionModel::SelectionFlags.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.Select(QtCore.QItemSelection,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Selects the item selection using the specified command, and emits
            selectionChanged().</para>
            <para>See also QItemSelectionModel::SelectionFlag.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.Clear">
            <summary>
            <para>Clears the selection model. Emits selectionChanged() and
            currentChanged().</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.Reset">
            <summary>
            <para>Clears the selection model. Does not emit any signals.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.ClearSelection">
            <summary>
            <para>Clears the selection in the selection model. Emits
            selectionChanged().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.ClearCurrentIndex">
            <summary>
            <para>Clears the current index. Emits currentChanged().</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.EmitSelectionChanged(QtCore.QItemSelection,QtCore.QItemSelection)">
            <summary>
            <para>Compares the two selections newSelection and oldSelection and
            emits selectionChanged() with the deselected and selected items.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelectionModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QItemSelectionModel.SelectionChanged">
            <summary>
            <para>This property was introduced in  Qt 5.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QModelIndexList 	selectedIndexes() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	selectionChanged(const QItemSelection &amp; selected, const QItemSelection &amp; deselected)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtCore.QItemSelectionModel.CurrentChanged">
            <summary>
            <para>This signal is emitted whenever the current item changes. The previous model item index is replaced by the current index as the selection's current item.</para>
            <para>Note that this signal will not be emitted when the item model is reset.</para>
            <para>See also currentIndex(), setCurrentIndex(), and selectionChanged().</para>
            </summary>
        </member>
        <member name="E:QtCore.QItemSelectionModel.CurrentRowChanged">
            <summary>
            <para>This signal is emitted if the current item changes and its row is different to the row of the previous current item.</para>
            <para>Note that this signal will not be emitted when the item model is reset.</para>
            <para>See also currentChanged(), currentColumnChanged(), currentIndex(), and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="E:QtCore.QItemSelectionModel.CurrentColumnChanged">
            <summary>
            <para>This signal is emitted if the current item changes and its column is different to the column of the previous current item.</para>
            <para>Note that this signal will not be emitted when the item model is reset.</para>
            <para>See also currentChanged(), currentRowChanged(), currentIndex(), and setCurrentIndex().</para>
            </summary>
        </member>
        <member name="E:QtCore.QItemSelectionModel.ModelChanged">
            <summary>
            <para>This signal is emitted when the model is successfully set with setModel().</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also model() and setModel().</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionModel.Model">
            <summary>
            <para>Returns the item model operated on by the selection model.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para></para>
            <para>Sets the model. The modelChanged() signal will be emitted.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also model() and modelChanged().</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionModel.CurrentIndex">
            <summary>
            <para>Returns the model item index for the current item, or an invalid
            index if there is no current item.</para>
            <para>See also setCurrentIndex().</para>
            </summary>
        </member>
        <member name="P:QtCore.QItemSelectionModel.HasSelection">
            <summary>
            <para>Returns true if the selection model contains any selection
            ranges; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtCore.QItemSelectionModel.SelectionFlag">
            <summary>
            <para>This enum describes the way the selection model will be
            updated.</para>
            <para>The SelectionFlags type is a typedef for
            QFlags&lt;SelectionFlag&gt;. It stores an OR combination of SelectionFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.NoUpdate">
            <summary>No selection will be made.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Clear">
            <summary>The complete selection will be cleared.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Select">
            <summary>All specified indexes will be selected.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Deselect">
            <summary>All specified indexes will be deselected.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Toggle">
            <summary>All specified indexes will be selected or deselected depending on their current state.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Current">
            <summary>The current selection will be updated.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Rows">
            <summary>All indexes will be expanded to span rows.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.Columns">
            <summary>All indexes will be expanded to span columns.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.SelectCurrent">
            <summary>A combination of Select and Current, provided for convenience.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.ToggleCurrent">
            <summary>A combination of Toggle and Current, provided for convenience.</summary>
        </member>
        <member name="F:QtCore.QItemSelectionModel.SelectionFlag.ClearAndSelect">
            <summary>A combination of Clear and Select, provided for convenience.</summary>
        </member>
        <member name="T:QtCore.QItemSelection">
            <summary>
            <para>The QItemSelection class manages information about selected items
            in a model.</para>
            </summary>
            <remarks>
            <para>A QItemSelection describes the items in a model that have been
            selected by the user. A QItemSelection is basically a list of selection
            ranges, see QItemSelectionRange. It provides functions for creating and
            manipulating selections, and selecting a range of items from a
            model.</para>
            <para>The QItemSelection class is one of the Model/View Classes and is
            part of Qt's model/view framework.</para>
            <para>An item selection can be constructed and initialized to contain a
            range of items from an existing model. The following example constructs a
            selection that contains a range of items from the given model, beginning at
            the topLeft, and ending at the bottomRight.</para>
            <para>QItemSelection *selection = new QItemSelection(topLeft,
            bottomRight);</para>
            <para>An empty item selection can be constructed, and later populated
            as required. So, if the model is going to be unavailable when we construct
            the item selection, we can rewrite the above code in the following
            way:</para>
            <para>QItemSelection *selection = new QItemSelection();</para>
            <para>...</para>
            <para>selection-&gt;select(topLeft, bottomRight);</para>
            <para>QItemSelection saves memory, and avoids unnecessary work, by
            working with selection ranges rather than recording the model item index
            for each item in the selection. Generally, an instance of this class will
            contain a list of non-overlapping selection ranges.</para>
            <para>Use merge() to merge one item selection into another without
            making overlapping ranges. Use split() to split one selection range into
            smaller ranges based on a another selection range.</para>
            <para></para>
            <para>See also Model/View Programming and QItemSelectionModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QItemSelection.#ctor">
            <summary>
            <para>Constructs an empty selection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelection.#ctor(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Constructs an item selection that extends from the top-left model
            item, specified by the topLeft index, to the bottom-right item, specified
            by bottomRight.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelection.Select(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Adds the items in the range that extends from the top-left model
            item, specified by the topLeft index, to the bottom-right item, specified
            by bottomRight to the list.</para>
            <para>Note: topLeft and bottomRight must have the same parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelection.Contains(QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the selection contains the given index; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelection.Merge(QtCore.QItemSelection,QtCore.QItemSelectionModel.SelectionFlag)">
            <summary>
            <para>Merges the other selection with this QItemSelection using the
            command given. This method guarantees that no ranges are
            overlapping.</para>
            <para>Note that only QItemSelectionModel::Select,
            QItemSelectionModel::Deselect, and QItemSelectionModel::Toggle are
            supported.</para>
            <para>See also split().</para>
            </summary>
        </member>
        <member name="M:QtCore.QItemSelection.Split(QtCore.QItemSelectionRange,QtCore.QItemSelectionRange,QtCore.QItemSelection)">
            <summary>
            <para>Splits the selection range using the selection other range.
            Removes all items in other from range and puts the result in result. This
            can be compared with the semantics of the subtract operation of a
            set.</para>
            <para>See also merge().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSortFilterProxyModel">
            <summary>
            <para>The QSortFilterProxyModel class provides support for sorting and
            filtering data passed between another model and a view.</para>
            </summary>
            <remarks>
            <para>QSortFilterProxyModel can be used for sorting items, filtering
            out items, or both. The model transforms the structure of a source model by
            mapping the model indexes it supplies to new indexes, corresponding to
            different locations, for views to use. This approach allows a given source
            model to be restructured as far as views are concerned without requiring
            any transformations on the underlying data, and without duplicating the
            data in memory.</para>
            <para>Let's assume that we want to sort and filter the items provided
            by a custom model. The code to set up the model and the view, without
            sorting and filtering, would look like this:</para>
            <para>        QTreeView *treeView = new QTreeView;</para>
            <para>        MyItemModel *model = new MyItemModel(this);</para>
            <para></para>
            <para>        treeView-&gt;setModel(model);</para>
            <para>To add sorting and filtering support to MyItemModel, we need to
            create a QSortFilterProxyModel, call setSourceModel() with the MyItemModel
            as argument, and install the QSortFilterProxyModel on the view:</para>
            <para>        QTreeView *treeView = new QTreeView;</para>
            <para>        MyItemModel *sourceModel = new MyItemModel(this);</para>
            <para>        QSortFilterProxyModel *proxyModel = new
            QSortFilterProxyModel(this);</para>
            <para></para>
            <para>        proxyModel-&gt;setSourceModel(sourceModel);</para>
            <para>        treeView-&gt;setModel(proxyModel);</para>
            <para>At this point, neither sorting nor filtering is enabled; the
            original data is displayed in the view. Any changes made through the
            QSortFilterProxyModel are applied to the original model.</para>
            <para>The QSortFilterProxyModel acts as a wrapper for the original
            model. If you need to convert source QModelIndexes to sorted/filtered model
            indexes or vice versa, use mapToSource(), mapFromSource(),
            mapSelectionToSource(), and mapSelectionFromSource().</para>
            <para>Note: By default, the model dynamically re-sorts and re-filters
            data whenever the original model changes. This behavior can be changed by
            setting the dynamicSortFilter property.</para>
            <para>The Basic Sort/Filter Model and Custom Sort/Filter Model examples
            illustrate how to use QSortFilterProxyModel to perform basic sorting and
            filtering and how to subclass it to implement custom behavior.</para>
            <para></para>
            <para>Sorting</para>
            <para>QTableView and QTreeView have a sortingEnabled property that
            controls whether the user can sort the view by clicking the view's
            horizontal header. For example:</para>
            <para>        treeView-&gt;setSortingEnabled(true);</para>
            <para>When this feature is on (the default is off), clicking on a
            header section sorts the items according to that column. By clicking
            repeatedly, the user can alternate between ascending and descending
            order.</para>
            <para></para>
            <para>Behind the scene, the view calls the sort() virtual function on
            the model to reorder the data in the model. To make your data sortable, you
            can either implement sort() in your model, or use a QSortFilterProxyModel
            to wrap your model -- QSortFilterProxyModel provides a generic sort()
            reimplementation that operates on the sortRole() (Qt::DisplayRole by
            default) of the items and that understands several data types, including
            int, QString, and QDateTime. For hierarchical models, sorting is applied
            recursively to all child items. String comparisons are case sensitive by
            default; this can be changed by setting the sortCaseSensitivity
            property.</para>
            <para>Custom sorting behavior is achieved by subclassing
            QSortFilterProxyModel and reimplementing lessThan(), which is used to
            compare items. For example:</para>
            <para>bool MySortFilterProxyModel::lessThan(const QModelIndex
            &amp;left,</para>
            <para>                                      const QModelIndex
            &amp;right) const</para>
            <para>{</para>
            <para>    QVariant leftData = sourceModel()-&gt;data(left);</para>
            <para>    QVariant rightData = sourceModel()-&gt;data(right);</para>
            <para></para>
            <para>    if (leftData.type() == QVariant::DateTime) {</para>
            <para>        return leftData.toDateTime() &lt;
            rightData.toDateTime();</para>
            <para>    } else {</para>
            <para>        static QRegExp
            emailPattern(&quot;[\\w\\.]*@[\\w\\.]*)&quot;);</para>
            <para></para>
            <para>        QString leftString = leftData.toString();</para>
            <para>        if(left.column() == 1 &amp;&amp;
            emailPattern.indexIn(leftString) != -1)</para>
            <para>            leftString = emailPattern.cap(1);</para>
            <para></para>
            <para>        QString rightString = rightData.toString();</para>
            <para>        if(right.column() == 1 &amp;&amp;
            emailPattern.indexIn(rightString) != -1)</para>
            <para>            rightString = emailPattern.cap(1);</para>
            <para></para>
            <para>        return QString::localeAwareCompare(leftString,
            rightString) &lt; 0;</para>
            <para>    }</para>
            <para>}</para>
            <para>(This code snippet comes from the Custom Sort/Filter Model
            example.)</para>
            <para>An alternative approach to sorting is to disable sorting on the
            view and to impose a certain order to the user. This is done by explicitly
            calling sort() with the desired column and order as arguments on the
            QSortFilterProxyModel (or on the original model if it implements sort()).
            For example:</para>
            <para>        proxyModel-&gt;sort(2, Qt::AscendingOrder);</para>
            <para>QSortFilterProxyModel can be sorted by column -1, in which case
            it returns to the sort order of the underlying source model.</para>
            <para></para>
            <para>Filtering</para>
            <para>In addition to sorting, QSortFilterProxyModel can be used to hide
            items that do not match a certain filter. The filter is specified using a
            QRegExp object and is applied to the filterRole() (Qt::DisplayRole by
            default) of each item, for a given column. The QRegExp object can be used
            to match a regular expression, a wildcard pattern, or a fixed string. For
            example:</para>
            <para>        proxyModel-&gt;setFilterRegExp(QRegExp(&quot;.png&quot;,
            Qt::CaseInsensitive,</para>
            <para>
            QRegExp::FixedString));</para>
            <para>        proxyModel-&gt;setFilterKeyColumn(1);</para>
            <para>For hierarchical models, the filter is applied recursively to all
            children. If a parent item doesn't match the filter, none of its children
            will be shown.</para>
            <para>A common use case is to let the user specify the filter regexp,
            wildcard pattern, or fixed string in a QLineEdit and to connect the
            textChanged() signal to setFilterRegExp(), setFilterWildcard(), or
            setFilterFixedString() to reapply the filter.</para>
            <para>Custom filtering behavior can be achieved by reimplementing the
            filterAcceptsRow() and filterAcceptsColumn() functions. For example (from
            the Custom Sort/Filter Model example), the following implementation ignores
            the filterKeyColumn property and performs filtering on columns 0, 1, and
            2:</para>
            <para>bool MySortFilterProxyModel::filterAcceptsRow(int
            sourceRow,</para>
            <para>        const QModelIndex &amp;sourceParent) const</para>
            <para>{</para>
            <para>    QModelIndex index0 = sourceModel()-&gt;index(sourceRow, 0,
            sourceParent);</para>
            <para>    QModelIndex index1 = sourceModel()-&gt;index(sourceRow, 1,
            sourceParent);</para>
            <para>    QModelIndex index2 = sourceModel()-&gt;index(sourceRow, 2,
            sourceParent);</para>
            <para></para>
            <para>    return
            (sourceModel()-&gt;data(index0).toString().contains(filterRegExp())</para>
            <para>            ||
            sourceModel()-&gt;data(index1).toString().contains(filterRegExp()))</para>
            <para>            &amp;&amp;
            dateInRange(sourceModel()-&gt;data(index2).toDate());</para>
            <para>}</para>
            <para>(This code snippet comes from the Custom Sort/Filter Model
            example.)</para>
            <para>If you are working with large amounts of filtering and have to
            invoke invalidateFilter() repeatedly, using reset() may be more efficient,
            depending on the implementation of your model. However, reset() returns the
            proxy model to its original state, losing selection information, and will
            cause the proxy model to be repopulated.</para>
            <para></para>
            <para>Subclassing</para>
            <para>Since QAbstractProxyModel and its subclasses are derived from
            QAbstractItemModel, much of the same advice about subclassing normal models
            also applies to proxy models. In addition, it is worth noting that many of
            the default implementations of functions in this class are written so that
            they call the equivalent functions in the relevant source model. This
            simple proxying mechanism may need to be overridden for source models with
            more complex behavior; for example, if the source model provides a custom
            hasChildren() implementation, you should also provide one in the proxy
            model.</para>
            <para>Note: Some general guidelines for subclassing models are
            available in the Model Subclassing Reference.</para>
            <para></para>
            <para>See also QAbstractProxyModel, QAbstractItemModel, Model/View
            Programming, Basic Sort/Filter Model Example, Custom Sort/Filter Model
            Example, and QIdentityProxyModel.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a sorting filter model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.MapToSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractProxyModel::mapToSource().</para>
            <para>Returns the source model index corresponding to the given
            proxyIndex from the sorting filter model.</para>
            <para>See also mapFromSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.MapFromSource(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractProxyModel::mapFromSource().</para>
            <para>Returns the model index in the QSortFilterProxyModel given the
            sourceIndex from the source model.</para>
            <para>See also mapToSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.MapSelectionToSource(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractProxyModel::mapSelectionToSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.MapSelectionFromSource(QtCore.QItemSelection)">
            <summary>
            <para>Reimplemented from
            QAbstractProxyModel::mapSelectionFromSource().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.SetFilterRegExp(System.String)">
            <summary>
            <para>This property holds the QRegExp used to filter the contents of
            the source model.</para>
            <para>Setting this property overwrites the current
            filterCaseSensitivity. By default, the QRegExp is an empty string matching
            all contents.</para>
            <para>If no QRegExp or an empty string is set, everything in the source
            model will be accepted.</para>
            <para>See also filterCaseSensitivity, setFilterWildcard(), and
            setFilterFixedString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.SetFilterWildcard(System.String)">
            <summary>
            <para>Sets the wildcard expression used to filter the contents of the
            source model to the given pattern.</para>
            <para>See also setFilterCaseSensitivity(), setFilterRegExp(),
            setFilterFixedString(), and filterRegExp().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.SetFilterFixedString(System.String)">
            <summary>
            <para>Sets the fixed string used to filter the contents of the source
            model to the given pattern.</para>
            <para>See also setFilterCaseSensitivity(), setFilterRegExp(),
            setFilterWildcard(), and filterRegExp().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Clear">
            <summary>
            <para>This function is obsolete. Use invalidate() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Invalidate">
            <summary>
            <para>Invalidates the current sorting and filtering.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also invalidateFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.FilterAcceptsRow(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the item in the row indicated by the given
            source_row and source_parent should be included in the model; otherwise
            returns false.</para>
            <para>The default implementation returns true if the value held by the
            relevant item matches the filter string, wildcard string or regular
            expression.</para>
            <para>Note: By default, the Qt::DisplayRole is used to determine if the
            row should be accepted or not. This can be changed by setting the
            filterRole property.</para>
            <para>See also filterAcceptsColumn(), setFilterFixedString(),
            setFilterRegExp(), and setFilterWildcard().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.FilterAcceptsColumn(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the item in the column indicated by the given
            source_column and source_parent should be included in the model; otherwise
            returns false.</para>
            <para>The default implementation returns true if the value held by the
            relevant item matches the filter string, wildcard string or regular
            expression.</para>
            <para>Note: By default, the Qt::DisplayRole is used to determine if the
            row should be accepted or not. This can be changed by setting the
            filterRole property.</para>
            <para>See also filterAcceptsRow(), setFilterFixedString(),
            setFilterRegExp(), and setFilterWildcard().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.LessThan(QtCore.QModelIndex,QtCore.QModelIndex)">
            <summary>
            <para>Returns true if the value of the item referred to by the given
            index source_left is less than the value of the item referred to by the
            given index source_right, otherwise returns false.</para>
            <para>This function is used as the &lt; operator when sorting, and
            handles the following QVariant types:</para>
            <para></para>
            <para>QMetaType::Int</para>
            <para>QMetaType::UInt</para>
            <para>QMetaType::LongLong</para>
            <para>QMetaType::ULongLong</para>
            <para>QMetaType::Float</para>
            <para>QMetaType::Double</para>
            <para>QMetaType::QChar</para>
            <para>QMetaType::QDate</para>
            <para>QMetaType::QTime</para>
            <para>QMetaType::QDateTime</para>
            <para>QMetaType::QString</para>
            <para></para>
            <para>Any other type will be converted to a QString using
            QVariant::toString().</para>
            <para>Comparison of QStrings is case sensitive by default; this can be
            changed using the sortCaseSensitivity property.</para>
            <para>By default, the Qt::DisplayRole associated with the QModelIndexes
            is used for comparisons. This can be changed by setting the sortRole
            property.</para>
            <para>Note: The indices passed in correspond to the source
            model.</para>
            <para>See also sortRole, sortCaseSensitivity, and
            dynamicSortFilter.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.FilterChanged">
            <summary>
            <para>This function is obsolete. Use invalidateFilter() instead.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.InvalidateFilter">
            <summary>
            <para>Invalidates the current filtering.</para>
            <para>This function should be called if you are implementing custom
            filtering (e.g. filterAcceptsRow()), and your filter parameters have
            changed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also invalidate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::parent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::columnCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::hasChildren().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            <para>See also setHeaderData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.SetHeaderData(System.Int32,QtCore.Qt.Orientation,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setHeaderData().</para>
            <para>See also headerData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.InsertRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.InsertColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.RemoveRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.RemoveColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeColumns().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.FetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::fetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.CanFetchMore(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::canFetchMore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Buddy(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::buddy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Span(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::span().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSortFilterProxyModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SourceModel">
            <summary>
            <para>This property holds the source model this proxy model.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            <para></para>
            <para>Reimplemented from QAbstractProxyModel::setSourceModel().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.FilterRegExp">
            <summary>
            <para>This property holds the QRegExp used to filter the contents of
            the source model.</para>
            <para>Setting this property overwrites the current
            filterCaseSensitivity. By default, the QRegExp is an empty string matching
            all contents.</para>
            <para>If no QRegExp or an empty string is set, everything in the source
            model will be accepted.</para>
            <para>See also filterCaseSensitivity, setFilterWildcard(), and
            setFilterFixedString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.FilterKeyColumn">
            <summary>
            <para>This property holds the column where the key used to filter the
            contents of the source model is read from.</para>
            <para>The default value is 0. If the value is -1, the keys will be read
            from all columns.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.FilterCaseSensitivity">
            <summary>
            <para>This property holds the case sensitivity of the QRegExp pattern
            used to filter the contents of the source model.</para>
            <para>By default, the filter is case sensitive.</para>
            <para>See also filterRegExp and sortCaseSensitivity.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SortCaseSensitivity">
            <summary>
            <para>This property holds the case sensitivity setting used for
            comparing strings when sorting.</para>
            <para>By default, sorting is case sensitive.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also filterCaseSensitivity and lessThan().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.IsSortLocaleAware">
            <summary>
            <para>This property holds the local aware setting used for comparing
            strings when sorting.</para>
            <para>By default, sorting is not local aware.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also sortCaseSensitivity and lessThan().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.DynamicSortFilter">
            <summary>
            <para>This property holds whether the proxy model is dynamically sorted
            and filtered whenever the contents of the source model change.</para>
            <para>Note that you should not update the source model through the
            proxy model when dynamicSortFilter is true. For instance, if you set the
            proxy model on a QComboBox, then using functions that update the model,
            e.g., addItem(), will not work as expected. An alternative is to set
            dynamicSortFilter to false and call sort() after adding items to the
            QComboBox.</para>
            <para>The default value is true.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SortRole">
            <summary>
            <para>This property holds the item role that is used to query the
            source model's data when sorting items.</para>
            <para>The default value is Qt::DisplayRole.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also lessThan().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.FilterRole">
            <summary>
            <para>This property holds the item role that is used to query the
            source model's data when filtering items.</para>
            <para>The default value is Qt::DisplayRole.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also filterAcceptsRow().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.MimeTypes">
            <summary>
            <para>Reimplemented from QAbstractItemModel::mimeTypes().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SortColumn">
            <summary>
            <para>the column currently used for sorting</para>
            <para>This returns the most recently used sort column.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSortFilterProxyModel.SortOrder">
            <summary>
            <para>the order currently used for sorting</para>
            <para>This returns the most recently used sort order.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="T:QtCore.QStringListModel">
            <summary>
            <para>The QStringListModel class provides a model that supplies strings
            to views.</para>
            </summary>
            <remarks>
            <para>QStringListModel is an editable model that can be used for simple
            cases where you need to display a number of strings in a view widget, such
            as a QListView or a QComboBox.</para>
            <para>The model provides all the standard functions of an editable
            model, representing the data in the string list as a model with one column
            and a number of rows equal to the number of items in the list.</para>
            <para>Model indexes corresponding to items are obtained with the
            index() function, and item flags are obtained with flags(). Item data is
            read with the data() function and written with setData(). The number of
            rows (and number of items in the string list) can be found with the
            rowCount() function.</para>
            <para>The model can be constructed with an existing string list, or
            strings can be set later with the setStringList() convenience function.
            Strings can also be inserted in the usual way with the insertRows()
            function, and removed with removeRows(). The contents of the string list
            can be retrieved with the stringList() convenience function.</para>
            <para>An example usage of QStringListModel:</para>
            <para>    QStringListModel *model = new QStringListModel();</para>
            <para>    QStringList list;</para>
            <para>    list &lt;&lt; &quot;a&quot; &lt;&lt; &quot;b&quot; &lt;&lt;
            &quot;c&quot;;</para>
            <para>    model-&gt;setStringList(list);</para>
            <para></para>
            <para>See also QAbstractListModel, QAbstractItemModel, and Model
            Classes.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStringListModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a string list model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.#ctor(QtCore.QStringList,QtCore.QObject)">
            <summary>
            <para>Constructs a string list model containing the specified strings
            with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            <para>Returns the number of rows in the model. This value corresponds
            to the number of items in the model's internal string list.</para>
            <para>The optional parent argument is in most models used to specify
            the parent of the rows to be counted. Because this is a list if a valid
            parent is specified, the result will always be 0.</para>
            <para>See also insertRows(), removeRows(), and
            QAbstractItemModel::rowCount().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>Returns data for the specified role, from the item with the given
            index.</para>
            <para>If the view requests an invalid index, an invalid variant is
            returned.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>Sets the data for the specified role in the item with the given
            index in the model, to the provided value.</para>
            <para>The dataChanged() signal is emitted if the item is
            changed.</para>
            <para>See also Qt::ItemDataRole and data().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            <para>Returns the flags for the item with the given index.</para>
            <para>Valid items are enabled, selectable, editable, drag enabled and
            drop enabled.</para>
            <para>See also QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.InsertRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertRows().</para>
            <para>Inserts count rows into the model, beginning at the given
            row.</para>
            <para>The parent index of the rows is optional and is only used for
            consistency with QAbstractItemModel. By default, a null index is specified,
            indicating that the rows are inserted in the top level of the model.</para>
            <para>See also QAbstractItemModel::insertRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.RemoveRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeRows().</para>
            <para>Removes count rows from the model, beginning at the given
            row.</para>
            <para>The parent index of the rows is optional and is only used for
            consistency with QAbstractItemModel. By default, a null index is specified,
            indicating that the rows are removed in the top level of the model.</para>
            <para>See also QAbstractItemModel::removeRows().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStringListModel.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringListModel.StringList">
            <summary>
            <para>Returns the string list used by the model to store data.</para>
            <para>See also setStringList().</para>
            <para></para>
            <para>Sets the model's internal string list to strings. The model will
            notify any attached views that its underlying data has changed.</para>
            <para>See also stringList() and dataChanged().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStringListModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonValue">
            <summary>
            <para>The QJsonValue class encapsulates a value in JSON.</para>
            </summary>
            <remarks>
            <para>A value in JSON can be one of 6 basic types:</para>
            <para>JSON is a format to store structured data. It has 6 basic data
            types:</para>
            <para></para>
            <para>bool QJsonValue::Bool</para>
            <para>double QJsonValue::Double</para>
            <para>string QJsonValue::String</para>
            <para>array QJsonValue::Array</para>
            <para>object QJsonValue::Object</para>
            <para>null QJsonValue::Null</para>
            <para></para>
            <para>A value can represent any of the above data types. In addition,
            QJsonValue has one special flag to represent undefined values. This can be
            queried with isUndefined().</para>
            <para>The type of the value can be queried with type() or accessors
            like isBool(), isString(), and so on. Likewise, the value can be converted
            to the type stored in it using the toBool(), toString() and so on.</para>
            <para>Values are strictly typed internally and contrary to QVariant
            will not attempt to do any implicit type conversions. This implies that
            converting to a type that is not stored in the value will return a default
            constructed return value.</para>
            <para></para>
            <para>QJsonValueRef</para>
            <para>QJsonValueRef is a helper class for QJsonArray and QJsonObject.
            When you get an object of type QJsonValueRef, you can use it as if it were
            a reference to a QJsonValue. If you assign to it, the assignment will apply
            to the element in the QJsonArray or QJsonObject from which you got the
            reference.</para>
            <para>The following methods return QJsonValueRef:</para>
            <para></para>
            <para>QJsonArray::operator[](int i)</para>
            <para>QJsonObject::operator[](const QString &amp; key) const</para>
            <para></para>
            <para></para>
            <para>See also JSON Support in Qt and JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(QtCore.QJsonValue.Type)">
            <summary>
            <para>Creates a QJsonValue of type type.</para>
            <para>The default is to create a Null value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(System.Boolean)">
            <summary>
            <para>Creates a value of type Bool, with value b.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(System.Double)">
            <summary>
            <para>Creates a value of type Double, with value n.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a value of type Double, with value n.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a value of type Double, with value n. NOTE: the integer
            limits for IEEE 754 double precision data is 2^53 (-9007199254740992 to
            +9007199254740992). If you pass in values outside this range expect a loss
            of precision to occur.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(System.String)">
            <summary>
            <para>Creates a value of type String, with value s.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(QtCore.QLatin1String)">
            <summary>
            <para>Creates a value of type String, with value s.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(QtCore.QJsonArray)">
            <summary>
            <para>Creates a value of type Array, with value a.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(QtCore.QJsonObject)">
            <summary>
            <para>Creates a value of type Object, with value o.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.#ctor(QtCore.QJsonValue)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToVariant">
            <summary>
            <para>Converts the value to a QVariant().</para>
            <para>The QJsonValue types will be converted as follows:</para>
            <para>ConstantDescription</para>
            <para>Null	QVariant()</para>
            <para>Bool	QMetaType::Bool</para>
            <para>Double	QMetaType::Double</para>
            <para>String	QString</para>
            <para>Array	QVariantList</para>
            <para>Object	QVariantMap</para>
            <para>Undefined	QVariant()</para>
            <para></para>
            <para>See also fromVariant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToBool(System.Boolean)">
            <summary>
            <para>Converts the value to a bool and returns it.</para>
            <para>If type() is not bool, the defaultValue will be returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToInt(System.Int32)">
            <summary>
            <para>Converts the value to an int and returns it.</para>
            <para>If type() is not Double or the value is not a whole number, the
            defaultValue will be returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToDouble(System.Double)">
            <summary>
            <para>Converts the value to a double and returns it.</para>
            <para>If type() is not Double, the defaultValue will be
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToString(System.String)">
            <summary>
            <para>Converts the value to a QString and returns it.</para>
            <para>If type() is not String, the defaultValue will be
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToArray">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts the value to an array and returns it.</para>
            <para>If type() is not Array, a QJsonArray() will be returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToArray(QtCore.QJsonArray)">
            <summary>
            <para>Converts the value to an array and returns it.</para>
            <para>If type() is not Array, the defaultValue will be returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToObject">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts the value to an object and returns it.</para>
            <para>If type() is not Object, the QJsonObject() will be
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.ToObject(QtCore.QJsonObject)">
            <summary>
            <para>Converts the value to an object and returns it.</para>
            <para>If type() is not Object, the defaultValue will be
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.op_Equality(QtCore.QJsonValue,QtCore.QJsonValue)">
            <summary>
            <para>Returns true if the value is equal to other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.op_Inequality(QtCore.QJsonValue,QtCore.QJsonValue)">
            <summary>
            <para>Returns true if the value is not equal to other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonValue.FromVariant(QtCore.QVariant)">
            <summary>
            <para>Converts variant to a QJsonValue and returns it.</para>
            <para>The conversion will convert QVariant types as follows:</para>
            <para></para>
            <para> Source typeDestination type</para>
            <para></para>
            <para>QMetaType::Bool</para>
            <para></para>
            <para>	QJsonValue::Bool</para>
            <para></para>
            <para>QMetaType::Int</para>
            <para>QMetaType::UInt</para>
            <para>QMetaType::LongLong</para>
            <para>QMetaType::ULongLong</para>
            <para>QMetaType::Float</para>
            <para>QMetaType::Double</para>
            <para></para>
            <para>	QJsonValue::Double</para>
            <para></para>
            <para>QMetaType::QString</para>
            <para></para>
            <para>	QJsonValue::String</para>
            <para></para>
            <para>QMetaType::QStringList</para>
            <para>QMetaType::QVariantList</para>
            <para></para>
            <para>	QJsonValue::Array</para>
            <para></para>
            <para>QMetaType::QVariantMap</para>
            <para>QMetaType::QVariantHash</para>
            <para></para>
            <para>	QJsonValue::Object</para>
            <para></para>
            <para>For all other QVariant types a conversion to a QString will be
            attempted. If the returned string is empty, a Null QJsonValue will be
            stored, otherwise a String value using the returned QString.</para>
            <para>See also toVariant().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.type">
            <summary>
            <para>Returns the type of the value.</para>
            <para>See also QJsonValue::Type.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsNull">
            <summary>
            <para>Returns true if the value is null.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsBool">
            <summary>
            <para>Returns true if the value contains a boolean.</para>
            <para>See also toBool().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsDouble">
            <summary>
            <para>Returns true if the value contains a double.</para>
            <para>See also toDouble().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsString">
            <summary>
            <para>Returns true if the value contains a string.</para>
            <para>See also toString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsArray">
            <summary>
            <para>Returns true if the value contains an array.</para>
            <para>See also toArray().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsObject">
            <summary>
            <para>Returns true if the value contains an object.</para>
            <para>See also toObject().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonValue.IsUndefined">
            <summary>
            <para>Returns true if the value is undefined. This can happen in
            certain error cases as e.g. accessing a non existing key in a
            QJsonObject.</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonValue.Type">
            <summary>
            <para>This enum describes the type of the JSON value.</para>
            </summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Null">
            <summary>A Null value</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Bool">
            <summary>A boolean value. Use toBool() to convert to a bool.</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Double">
            <summary>A double. Use toDouble() to convert to a double.</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.String">
            <summary>A string. Use toString() to convert to a QString.</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Array">
            <summary>An array. Use toArray() to convert to a QJsonArray.</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Object">
            <summary>An object. Use toObject() to convert to a QJsonObject.</summary>
        </member>
        <member name="F:QtCore.QJsonValue.Type.Undefined">
            <summary>The value is undefined. This is usually returned as an error condition, when trying to read an out of bounds value in an array or a non existent key in an object.</summary>
        </member>
        <member name="T:QtCore.QJsonArray">
            <summary>
            <para>The QJsonArray class encapsulates a JSON array.</para>
            </summary>
            <remarks>
            <para>A JSON array is a list of values. The list can be manipulated by
            inserting and removing QJsonValue's from the array.</para>
            <para>A QJsonArray can be converted to and from a QVariantList. You can
            query the number of entries with size(), insert(), and removeAt() entries
            from it and iterate over its content using the standard C++ iterator
            pattern.</para>
            <para>QJsonArray is an implicitly shared class and shares the data with
            the document it has been created from as long as it is not being
            modified.</para>
            <para>You can convert the array to and from text based JSON through
            QJsonDocument.</para>
            <para></para>
            <para>See also JSON Support in Qt and JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonArray.#ctor">
            <summary>
            <para>Creates an empty array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.#ctor(QtCore.QJsonArray)">
            <summary>
            <para>Creates a copy of other.</para>
            <para>Since QJsonArray is implicitly shared, the copy is shallow as
            long as the object doesn't get modified.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.At(System.Int32)">
            <summary>
            <para>Returns a QJsonValue representing the value for index i.</para>
            <para>The returned QJsonValue is Undefined, if i is out of
            bounds.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Prepend(QtCore.QJsonValue)">
            <summary>
            <para>Inserts value at the beginning of the array.</para>
            <para>This is the same as insert(0, value) and will prepend value to
            the array.</para>
            <para>See also append() and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Append(QtCore.QJsonValue)">
            <summary>
            <para>Inserts value at the end of the array.</para>
            <para>See also prepend() and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.RemoveAt(System.Int32)">
            <summary>
            <para>Removes the value at index position i. i must be a valid index
            position in the array (i.e., 0 &lt;= i &lt; size()).</para>
            <para>See also insert() and replace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.TakeAt(System.Int32)">
            <summary>
            <para>Removes the item at index position i and returns it. i must be a
            valid index position in the array (i.e., 0 &lt;= i &lt; size()).</para>
            <para>If you don't use the return value, removeAt() is more
            efficient.</para>
            <para>See also removeAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.RemoveFirst">
            <summary>
            <para>Removes the first item in the array. Calling this function is
            equivalent to calling removeAt(0). The array must not be empty. If the
            array can be empty, call isEmpty() before calling this function.</para>
            <para>See also removeAt() and removeLast().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.RemoveLast">
            <summary>
            <para>Removes the last item in the array. Calling this function is
            equivalent to calling removeAt(size() - 1). The array must not be empty. If
            the array can be empty, call isEmpty() before calling this function.</para>
            <para>See also removeAt() and removeFirst().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Insert(System.Int32,QtCore.QJsonValue)">
            <summary>
            <para>Inserts value at index position i in the array. If i is 0, the
            value is prepended to the array. If i is size(), the value is appended to
            the array.</para>
            <para>See also append(), prepend(), replace(), and removeAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Replace(System.Int32,QtCore.QJsonValue)">
            <summary>
            <para>Replaces the item at index position i with value. i must be a
            valid index position in the array (i.e., 0 &lt;= i &lt; size()).</para>
            <para>See also operator[]() and removeAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Contains(QtCore.QJsonValue)">
            <summary>
            <para>Returns true if the array contains an occurrence of value,
            otherwise false.</para>
            <para>See also count().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.op_Equality(QtCore.QJsonArray,QtCore.QJsonArray)">
            <summary>
            <para>Returns true if this array is equal to other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.op_Inequality(QtCore.QJsonArray,QtCore.QJsonArray)">
            <summary>
            <para>Returns true if this array is not equal to other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Begin">
            <summary>
            <para>Returns an STL-style iterator pointing to the first item in the
            array.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.End">
            <summary>
            <para>Returns an STL-style iterator pointing to the imaginary item
            after the last item in the array.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Insert(QtCore.QJsonArray.Iterator,QtCore.QJsonValue)">
            <summary>
            <para>Inserts value before the position pointed to by before, and
            returns an iterator pointing to the newly inserted item.</para>
            <para>See also erase() and insert().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Erase(QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Removes the item pointed to by it, and returns an iterator
            pointing to the next item.</para>
            <para>See also removeAt().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.op_Addition(QtCore.QJsonArray,QtCore.QJsonValue)">
            <summary>
            <para>Returns an array that contains all the items in this array
            followed by the provided value.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Push_back(QtCore.QJsonValue)">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to append(value) and will append value to the array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Push_front(QtCore.QJsonValue)">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to prepend(value) and will prepend value to the array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Pop_front">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to removeFirst(). The array must not be empty. If the array can be empty,
            call isEmpty() before calling this function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Pop_back">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to removeLast(). The array must not be empty. If the array can be empty,
            call isEmpty() before calling this function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.FromStringList(QtCore.QStringList)">
            <summary>
            <para>Converts the string list list to a QJsonArray.</para>
            <para>The values in list will be converted to JSON values.</para>
            <para>See also toVariantList() and QJsonValue::fromVariant().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Item(System.Int32)">
            <summary>
            <para>Returns the value at index position i as a modifiable reference.
            i must be a valid index position in the array (i.e., 0 &lt;= i &lt;
            size()).</para>
            <para>The return value is of type  and QJsonObject. When you get an
            object of type  use it as if it were a reference to a QJsonValue. If you
            assign to it, the assignment will apply to the character in the QJsonArray
            of QJsonObject from which you got the reference.</para>
            <para>See also at().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Size">
            <summary>
            <para>Returns the number of values stored in the array.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Count">
            <summary>
            <para>Same as size().</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.IsEmpty">
            <summary>
            <para>Returns true if the object is empty. This is the same as size()
            == 0.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.First">
            <summary>
            <para>Returns the first value stored in the array.</para>
            <para>Same as at(0).</para>
            <para>See also at().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Last">
            <summary>
            <para>Returns the last value stored in the array.</para>
            <para>Same as at(size() - 1).</para>
            <para>See also at().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.ConstBegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first item in
            the array.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.ConstEnd">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary item
            after the last item in the array.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Empty">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to isEmpty() and returns true if the array is empty.</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonArray.Const_iterator">
            <summary>
            <para>The QJsonArray::const_iterator class provides an STL-style const
            iterator for QJsonArray.</para>
            </summary>
            <remarks>
            <para>QJsonArray::const_iterator allows you to iterate over a
            QJsonArray. If you want to modify the QJsonArray as you iterate over it,
            use QJsonArray::iterator instead. It is generally a good practice to use
            QJsonArray::const_iterator on a non-const QJsonArray as well, unless you
            need to change the QJsonArray through the iterator. Const iterators are
            slightly faster and improves code readability.</para>
            <para>The default QJsonArray::const_iterator constructor creates an
            uninitialized iterator. You must initialize it using a QJsonArray function
            like QJsonArray::constBegin(), QJsonArray::constEnd(), or
            QJsonArray::insert() before you can start iterating.</para>
            <para>Most QJsonArray functions accept an integer index rather than an
            iterator. For that reason, iterators are rarely useful in connection with
            QJsonArray. One place where STL-style iterators do make sense is as
            arguments to generic algorithms.</para>
            <para>Multiple iterators can be used on the same array. However, be
            aware that any non-const function call performed on the QJsonArray will
            render all existing iterators undefined.</para>
            <para></para>
            <para>See also QJsonArray::iterator.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.#ctor">
            <summary>
            <para>Constructs an uninitialized iterator.</para>
            <para>Functions like operator*() and operator++() should not be called
            on an uninitialized iterator. Use operator=() to assign a value to it
            before using it.</para>
            <para>See also QJsonArray::constBegin() and
            QJsonArray::constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.#ctor(QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.#ctor(QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Equality(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Inequality(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_LessThan(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_LessThanOrEqual(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_GreaterThan(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_GreaterThanOrEqual(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Increment(QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>The prefix ++ operator, ++it, advances the iterator to the next
            item in the array and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonArray::end() leads to undefined
            results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Decrement(QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>The prefix -- operator, --it, makes the preceding item current
            and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonArray::begin() leads to undefined
            results.</para>
            <para>See also operator++().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Addition(QtCore.QJsonArray.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator. If j is negative, the iterator goes backward.</para>
            <para>See also operator-() and operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Subtraction(QtCore.QJsonArray.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator. If j is negative, the iterator goes forward.</para>
            <para>See also operator+() and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Const_iterator.op_Subtraction(QtCore.QJsonArray.Const_iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns the number of items between the item pointed to by other
            and the item pointed to by this iterator.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Const_iterator.Item(System.Int32)">
            <summary>
            <para>Returns the item at offset j from the item pointed to by this
            iterator (the item at position *this + j).</para>
            <para>This function is provided to make QJsonArray iterators behave
            like C++ pointers.</para>
            <para>See also operator+().</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonArray.Iterator">
            <summary>
            <para>The QJsonArray::iterator class provides an STL-style non-const
            iterator for QJsonArray.</para>
            </summary>
            <remarks>
            <para>QJsonArray::iterator allows you to iterate over a QJsonArray and
            to modify the array item associated with the iterator. If you want to
            iterate over a const QJsonArray, use QJsonArray::const_iterator instead. It
            is generally a good practice to use QJsonArray::const_iterator on a
            non-const QJsonArray as well, unless you need to change the QJsonArray
            through the iterator. Const iterators are slightly faster and improves code
            readability.</para>
            <para>The default QJsonArray::iterator constructor creates an
            uninitialized iterator. You must initialize it using a QJsonArray function
            like QJsonArray::begin(), QJsonArray::end(), or QJsonArray::insert() before
            you can start iterating.</para>
            <para>Most QJsonArray functions accept an integer index rather than an
            iterator. For that reason, iterators are rarely useful in connection with
            QJsonArray. One place where STL-style iterators do make sense is as
            arguments to generic algorithms.</para>
            <para>Multiple iterators can be used on the same array. However, be
            aware that any non-const function call performed on the QJsonArray will
            render all existing iterators undefined.</para>
            <para></para>
            <para>See also QJsonArray::const_iterator.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.#ctor">
            <summary>
            <para>Constructs an uninitialized iterator.</para>
            <para>Functions like operator*() and operator++() should not be called
            on an uninitialized iterator. Use operator=() to assign a value to it
            before using it.</para>
            <para>See also QJsonArray::begin() and QJsonArray::end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Equality(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Inequality(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_LessThan(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_LessThanOrEqual(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_GreaterThan(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_GreaterThanOrEqual(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Equality(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Inequality(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_LessThan(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_LessThanOrEqual(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is less than
            or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_GreaterThan(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_GreaterThanOrEqual(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Const_iterator)">
            <summary>
            <para>Returns true if the item pointed to by this iterator is greater
            than or equal to the item pointed to by the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Increment(QtCore.QJsonArray.Iterator)">
            <summary>
            <para>The prefix ++ operator, ++it, advances the iterator to the next
            item in the array and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonArray::end() leads to undefined
            results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Decrement(QtCore.QJsonArray.Iterator)">
            <summary>
            <para>The prefix -- operator, --it, makes the preceding item current
            and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonArray::begin() leads to undefined
            results.</para>
            <para>See also operator++().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Addition(QtCore.QJsonArray.Iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator. If j is negative, the iterator goes backward.</para>
            <para>See also operator-() and operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Subtraction(QtCore.QJsonArray.Iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator. If j is negative, the iterator goes forward.</para>
            <para>See also operator+() and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonArray.Iterator.op_Subtraction(QtCore.QJsonArray.Iterator,QtCore.QJsonArray.Iterator)">
            <summary>
            <para>Returns the number of items between the item pointed to by other
            and the item pointed to by this iterator.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonArray.Iterator.Item(System.Int32)">
            <summary>
            <para>Returns a modifiable reference to the item at offset j from the
            item pointed to by this iterator (the item at position *this + j).</para>
            <para>This function is provided to make QJsonArray iterators behave
            like C++ pointers.</para>
            <para>The return value is of type  and QJsonObject. When you get an
            object of type  use it as if it were a reference to a QJsonValue. If you
            assign to it, the assignment will apply to the character in the QJsonArray
            of QJsonObject from which you got the reference.</para>
            <para>See also operator+().</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonParseError">
            <summary>
            <para>The QJsonParseError class is used to report errors during JSON
            parsing.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also JSON Support in Qt and JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="P:QtCore.QJsonParseError.Offset">
            <summary>
            <para>Contains the offset in the input string where the parse error
            occurred.</para>
            <para>See also error and errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonParseError.Error">
            <summary>
            <para>Contains the type of the parse error. Is equal to
            QJsonParseError::NoError if the document was parsed correctly.</para>
            <para>See also ParseError and errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonParseError.ErrorString">
            <summary>
            <para>Returns the human-readable message appropriate to the reported
            JSON parsing error.</para>
            <para>See also error.</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonParseError.ParseError">
            <summary>
            <para>This enum describes the type of error that occurred during the
            parsing of a JSON document.</para>
            </summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.NoError">
            <summary>No error occurred</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.UnterminatedObject">
            <summary>An object is not correctly terminated with a closing curly bracket</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.MissingNameSeparator">
            <summary>A comma separating different items is missing</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.UnterminatedArray">
            <summary>The array is not correctly terminated with a closing square bracket</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.MissingValueSeparator">
            <summary>A colon separating keys from values inside objects is missing</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.IllegalValue">
            <summary>The value is illegal</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.TerminationByNumber">
            <summary>The input stream ended while parsing a number</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.IllegalNumber">
            <summary>The number is not well formed</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.IllegalEscapeSequence">
            <summary>An illegal escape sequence occurred in the input</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.IllegalUTF8String">
            <summary>An illegal UTF8 sequence occurred in the input</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.UnterminatedString">
            <summary>A string wasn't terminated with a quote</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.MissingObject">
            <summary>An object was expected but couldn't be found</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.DeepNesting">
            <summary>The JSON document is too deeply nested for the parser to parse it</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.DocumentTooLarge">
            <summary>The JSON document is too large for the parser to parse it</summary>
        </member>
        <member name="F:QtCore.QJsonParseError.ParseError.GarbageAtEnd">
            <summary>The parsed document contains additional garbage characters at the end</summary>
        </member>
        <member name="T:QtCore.QJsonDocument">
            <summary>
            <para>The QJsonDocument class provides a way to read and write JSON
            documents.</para>
            </summary>
            <remarks>
            <para>QJsonDocument is a class that wraps a complete JSON document and
            can read and write this document both from a UTF-8 encoded text based
            representation as well as Qt's own binary format.</para>
            <para>A JSON document can be converted from its text-based
            representation to a QJsonDocument using QJsonDocument::fromJson(). toJson()
            converts it back to text. The parser is very fast and efficient and
            converts the JSON to the binary representation used by Qt.</para>
            <para>Validity of the parsed document can be queried with
            !isNull()</para>
            <para>A document can be queried as to whether it contains an array or
            an object using isArray() and isObject(). The array or object contained in
            the document can be retrieved using array() or object() and then read or
            manipulated.</para>
            <para>A document can also be created from a stored binary
            representation using fromBinaryData() or fromRawData().</para>
            <para></para>
            <para>See also JSON Support in Qt and JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonDocument.#ctor">
            <summary>
            <para>Constructs an empty and invalid document.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.#ctor(QtCore.QJsonObject)">
            <summary>
            <para>Creates a QJsonDocument from object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.#ctor(QtCore.QJsonArray)">
            <summary>
            <para>Constructs a QJsonDocument from array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.#ctor(QtCore.QJsonDocument)">
            <summary>
            <para>Creates a copy of the other document.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.RawData(System.Int32@)">
            <summary>
            <para>Returns the raw binary representation of the data size will
            contain the size of the returned data.</para>
            <para>This method is useful to e.g. stream the JSON document in it's
            binary form to a file.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.ToBinaryData">
            <summary>
            <para>Returns a binary representation of the document.</para>
            <para>The binary representation is also the native format used
            internally in Qt, and is very efficient and fast to convert to and
            from.</para>
            <para>The binary format can be stored on disk and interchanged with
            other applications or computers. fromBinaryData() can be used to convert it
            back into a JSON document.</para>
            <para>See also fromBinaryData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.ToVariant">
            <summary>
            <para>Returns a QVariant representing the Json document.</para>
            <para>The returned variant will be a QVariantList if the document is a
            QJsonArray and a QVariantMap if the document is a QJsonObject.</para>
            <para>See also fromVariant() and QJsonValue::toVariant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.ToJson(QtCore.QJsonDocument.JsonFormat)">
            <summary>
            <para>Converts the QJsonDocument to a UTF-8 encoded JSON document in
            the provided format.</para>
            <para>See also fromJson() and JsonFormat.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.SetObject(QtCore.QJsonObject)">
            <summary>
            <para>Sets object as the main object of this document.</para>
            <para>See also setArray() and object().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.op_Equality(QtCore.QJsonDocument,QtCore.QJsonDocument)">
            <summary>
            <para>Returns true if the other document is equal to this
            document.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.op_Inequality(QtCore.QJsonDocument,QtCore.QJsonDocument)">
            <summary>
            <para>returns true if other is not equal to this document</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.FromRawData(System.String,System.Int32,QtCore.QJsonDocument.DataValidation)">
            <summary>
            <para>Creates a QJsonDocument that uses the first size bytes from data.
            It assumes data contains a binary encoded JSON document. The created
            document does not take ownership of data and the caller has to guarantee
            that data will not be deleted or modified as long as any QJsonDocument,
            QJsonObject or QJsonArray still references the data.</para>
            <para>data has to be aligned to a 4 byte boundary.</para>
            <para>validation decides whether the data is checked for validity
            before being used. By default the data is validated. If the data is not
            valid, the method returns a null document.</para>
            <para>Returns a QJsonDocument representing the data.</para>
            <para>See also rawData(), fromBinaryData(), isNull(), and
            DataValidation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.FromBinaryData(QtCore.QByteArray,QtCore.QJsonDocument.DataValidation)">
            <summary>
            <para>Creates a QJsonDocument from data.</para>
            <para>validation decides whether the data is checked for validity
            before being used. By default the data is validated. If the data is not
            valid, the method returns a null document.</para>
            <para>See also toBinaryData(), fromRawData(), isNull(), and
            DataValidation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.FromVariant(QtCore.QVariant)">
            <summary>
            <para>Creates a QJsonDocument from the QVariant variant.</para>
            <para>If the variant contains any other type than a QVariantMap,
            QVariantList or QStringList, the returned document document is
            invalid.</para>
            <para>See also toVariant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonDocument.FromJson(QtCore.QByteArray,QtCore.QJsonParseError)">
            <summary>
            <para>Parses a UTF-8 encoded JSON document and creates a QJsonDocument
            from it.</para>
            <para>json contains the json document to be parsed.</para>
            <para>The optional error variable can be used to pass in a
            QJsonParseError data structure that will contain information about possible
            errors encountered during parsing.</para>
            <para>See also toJson() and QJsonParseError.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.Array">
            <summary>
            <para>Returns the QJsonArray contained in the document.</para>
            <para>Returns an empty array if the document contains an object.</para>
            <para>See also isArray(), object(), and setArray().</para>
            <para></para>
            <para>Sets array as the main object of this document.</para>
            <para>See also setObject() and array().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.IsEmpty">
            <summary>
            <para>Returns true if the document doesn't contain any data.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.IsArray">
            <summary>
            <para>Returns true if the document contains an array.</para>
            <para>See also array() and isObject().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.IsObject">
            <summary>
            <para>Returns true if the document contains an object.</para>
            <para>See also object() and isArray().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.Object">
            <summary>
            <para>Returns the QJsonObject contained in the document.</para>
            <para>Returns an empty object if the document contains an array.</para>
            <para>See also isObject(), array(), and setObject().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonDocument.IsNull">
            <summary>
            <para>returns true if this document is null.</para>
            <para>Null documents are documents created through the default
            constructor.</para>
            <para>Documents created from UTF-8 encoded text or the binary format
            are validated during parsing. If validation fails, the returned document
            will also be null.</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonDocument.DataValidation">
            <summary>
            <para>This value is used to tell QJsonDocument whether to validate the
            binary data when converting to a QJsonDocument using fromBinaryData() or
            fromRawData().</para>
            </summary>
        </member>
        <member name="F:QtCore.QJsonDocument.DataValidation.Validate">
            <summary>Validate the data before using it. This is the default.</summary>
        </member>
        <member name="F:QtCore.QJsonDocument.DataValidation.BypassValidation">
            <summary>Bypasses data validation. Only use if you received the data from a trusted place and know it's valid, as using of invalid data can crash the application.</summary>
        </member>
        <member name="T:QtCore.QJsonDocument.JsonFormat">
            <summary>
            <para>This value defines the format of the JSON byte array produced
            when converting to a QJsonDocument using toJson().</para>
            </summary>
        </member>
        <member name="F:QtCore.QJsonDocument.JsonFormat.Indented">
            <summary>
            <para>Defines human readable output as follows:{</para>
            <para>    &quot;Array&quot;: [</para>
            <para>        true,</para>
            <para>        999,</para>
            <para>        &quot;string&quot;</para>
            <para>    ],</para>
            <para>    &quot;Key&quot;: &quot;Value&quot;,</para>
            <para>    &quot;null&quot;: null</para>
            <para>}</para>
            </summary>
        </member>
        <member name="F:QtCore.QJsonDocument.JsonFormat.Compact">
            <summary>Defines a compact output as follows:{"Array":[true,999,"string"],"Key":"Value","null":null}</summary>
        </member>
        <member name="T:QtCore.QJsonObject">
            <summary>
            <para>The QJsonObject class encapsulates a JSON object.</para>
            </summary>
            <remarks>
            <para>A JSON object is a list of key value pairs, where the keys are
            unique strings and the values are represented by a QJsonValue.</para>
            <para>A QJsonObject can be converted to and from a QVariantMap. You can
            query the number of (key, value) pairs with size(), insert(), and remove()
            entries from it and iterate over its content using the standard C++
            iterator pattern.</para>
            <para>QJsonObject is an implicitly shared class, and shares the data
            with the document it has been created from as long as it is not being
            modified.</para>
            <para>You can convert the object to and from text based JSON through
            QJsonDocument.</para>
            <para></para>
            <para>See also JSON Support in Qt and JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonObject.#ctor">
            <summary>
            <para>Constructs an empty JSON object.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.#ctor(QtCore.QJsonObject)">
            <summary>
            <para>Creates a copy of other.</para>
            <para>Since QJsonObject is implicitly shared, the copy is shallow as
            long as the object does not get modified.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Value(System.String)">
            <summary>
            <para>Returns a QJsonValue representing the value for the key
            key.</para>
            <para>The returned QJsonValue is QJsonValue::Undefined if the key does
            not exist.</para>
            <para>See also QJsonValue and QJsonValue::isUndefined().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Remove(System.String)">
            <summary>
            <para>Removes key from the object.</para>
            <para>See also insert() and take().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Take(System.String)">
            <summary>
            <para>Removes key from the object.</para>
            <para>Returns a QJsonValue containing the value referenced by key. If
            key was not contained in the object, the returned QJsonValue is
            QJsonValue::Undefined.</para>
            <para>See also insert(), remove(), and QJsonValue.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Contains(System.String)">
            <summary>
            <para>Returns true if the object contains key key.</para>
            <para>See also insert(), remove(), and take().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.op_Equality(QtCore.QJsonObject,QtCore.QJsonObject)">
            <summary>
            <para>Returns true if other is equal to this object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.op_Inequality(QtCore.QJsonObject,QtCore.QJsonObject)">
            <summary>
            <para>Returns true if other is not equal to this object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Begin">
            <summary>
            <para>Returns an STL-style iterator pointing to the first item in the
            object.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.End">
            <summary>
            <para>Returns an STL-style iterator pointing to the imaginary item
            after the last item in the object.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Erase(QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Removes the (key, value) pair pointed to by the iterator it from
            the map, and returns an iterator to the next item in the map.</para>
            <para>See also remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Find(System.String)">
            <summary>
            <para>Returns an iterator pointing to the item with key key in the
            map.</para>
            <para>If the map contains no item with key key, the function returns
            end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.ConstFind(System.String)">
            <summary>
            <para>Returns a const iterator pointing to the item with key key in the
            map.</para>
            <para>If the map contains no item with key key, the function returns
            constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Insert(System.String,QtCore.QJsonValue)">
            <summary>
            <para>Inserts a new item with the key key and a value of value.</para>
            <para>If there is already an item with the key key, then that item's
            value is replaced with value.</para>
            <para>Returns an iterator pointing to the inserted item.</para>
            <para>If the value is QJsonValue::Undefined, it will cause the key to
            get removed from the object. The returned iterator will then point to
            end().</para>
            <para>See also remove(), take(), QJsonObject::iterator, and
            end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Item(System.String)">
            <summary>
            <para>Returns a reference to the value for key.</para>
            <para>The return value is of type QJsonValueRef, a helper class for
            QJsonArray and QJsonObject. When you get an object of type QJsonValueRef,
            you can use it as if it were a reference to a QJsonValue. If you assign to
            it, the assignment will apply to the element in the QJsonArray or
            QJsonObject from which you got the reference.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Keys">
            <summary>
            <para>Returns a list of all keys in this object.</para>
            <para>The list is sorted lexographically.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Size">
            <summary>
            <para>Returns the number of (key, value) pairs stored in the
            object.</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Count">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Length">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.IsEmpty">
            <summary>
            <para>Returns true if the object is empty. This is the same as size()
            == 0.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.ConstBegin">
            <summary>
            <para>Returns a const STL-style iterator pointing to the first item in
            the object.</para>
            <para>See also begin() and constEnd().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.ConstEnd">
            <summary>
            <para>Returns a const STL-style iterator pointing to the imaginary item
            after the last item in the object.</para>
            <para>See also constBegin() and end().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Empty">
            <summary>
            <para>This function is provided for STL compatibility. It is equivalent
            to isEmpty(), returning true if the object is empty; otherwise returning
            false.</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonObject.Const_iterator">
            <summary>
            <para>The QJsonObject::const_iterator class provides an STL-style const
            iterator for QJsonObject.</para>
            </summary>
            <remarks>
            <para>QJsonObject::const_iterator allows you to iterate over a
            QJsonObject. If you want to modify the QJsonObject as you iterate over it,
            you must use QJsonObject::iterator instead. It is generally good practice
            to use QJsonObject::const_iterator on a non-const QJsonObject as well,
            unless you need to change the QJsonObject through the iterator. Const
            iterators are slightly faster and improve code readability.</para>
            <para>The default QJsonObject::const_iterator constructor creates an
            uninitialized iterator. You must initialize it using a QJsonObject function
            like QJsonObject::constBegin(), QJsonObject::constEnd(), or
            QJsonObject::find() before you can start iterating.</para>
            <para>Multiple iterators can be used on the same object. Existing
            iterators will however become dangling if the object gets modified.</para>
            <para></para>
            <para>See also QJsonObject::iterator, JSON Support in Qt, and JSON Save
            Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.#ctor">
            <summary>
            <para>Constructs an uninitialized iterator.</para>
            <para>Functions like key(), value(), and operator++() must not be
            called on an uninitialized iterator. Use operator=() to assign a value to
            it before using it.</para>
            <para>See also QJsonObject::constBegin() and
            QJsonObject::constEnd().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.#ctor(QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Equality(QtCore.QJsonObject.Const_iterator,QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Inequality(QtCore.QJsonObject.Const_iterator,QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Increment(QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>The prefix ++ operator, ++i, advances the iterator to the next
            item in the object and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonObject::end() leads to undefined
            results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Decrement(QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>The prefix -- operator, --i, makes the preceding item current and
            returns an iterator pointing to the new current item.</para>
            <para>Calling this function on QJsonObject::begin() leads to undefined
            results.</para>
            <para>See also operator++().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Addition(QtCore.QJsonObject.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator. If j is negative, the iterator goes backward.</para>
            <para>This operation can be slow for large j values.</para>
            <para>See also operator-().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Subtraction(QtCore.QJsonObject.Const_iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator. If j is negative, the iterator goes forward.</para>
            <para>This operation can be slow for large j values.</para>
            <para>See also operator+().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Equality(QtCore.QJsonObject.Const_iterator,QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Const_iterator.op_Inequality(QtCore.QJsonObject.Const_iterator,QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Const_iterator.Key">
            <summary>
            <para>Returns the current item's key.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Const_iterator.Value">
            <summary>
            <para>Returns the current item's value.</para>
            <para>See also key() and operator*().</para>
            </summary>
        </member>
        <member name="T:QtCore.QJsonObject.Iterator">
            <summary>
            <para>The QJsonObject::iterator class provides an STL-style non-const
            iterator for QJsonObject.</para>
            </summary>
            <remarks>
            <para>QJsonObject::iterator allows you to iterate over a QJsonObject
            and to modify the value (but not the key) stored under a particular key. If
            you want to iterate over a const QJsonObject, you should use
            QJsonObject::const_iterator. It is generally good practice to use
            QJsonObject::const_iterator on a non-const QJsonObject as well, unless you
            need to change the QJsonObject through the iterator. Const iterators are
            slightly faster, and improve code readability.</para>
            <para>The default QJsonObject::iterator constructor creates an
            uninitialized iterator. You must initialize it using a QJsonObject function
            like QJsonObject::begin(), QJsonObject::end(), or QJsonObject::find()
            before you can start iterating.</para>
            <para>Multiple iterators can be used on the same object. Existing
            iterators will however become dangling once the object gets
            modified.</para>
            <para></para>
            <para>See also QJsonObject::const_iterator, JSON Support in Qt, and
            JSON Save Game Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.#ctor">
            <summary>
            <para>Constructs an uninitialized iterator.</para>
            <para>Functions like key(), value(), and operator++() must not be
            called on an uninitialized iterator. Use operator=() to assign a value to
            it before using it.</para>
            <para>See also QJsonObject::begin() and QJsonObject::end().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Equality(QtCore.QJsonObject.Iterator,QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Inequality(QtCore.QJsonObject.Iterator,QtCore.QJsonObject.Iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Increment(QtCore.QJsonObject.Iterator)">
            <summary>
            <para>The prefix ++ operator, ++i, advances the iterator to the next
            item in the object and returns an iterator to the new current item.</para>
            <para>Calling this function on QJsonObject::end() leads to undefined
            results.</para>
            <para>See also operator--().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Decrement(QtCore.QJsonObject.Iterator)">
            <summary>
            <para>The prefix -- operator, --i, makes the preceding item current and
            returns an iterator pointing to the new current item.</para>
            <para>Calling this function on QJsonObject::begin() leads to undefined
            results.</para>
            <para>See also operator++().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Addition(QtCore.QJsonObject.Iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions forward from this
            iterator. If j is negative, the iterator goes backward.</para>
            <para>See also operator-().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Subtraction(QtCore.QJsonObject.Iterator,System.Int32)">
            <summary>
            <para>Returns an iterator to the item at j positions backward from this
            iterator. If j is negative, the iterator goes forward.</para>
            <para>See also operator+().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Equality(QtCore.QJsonObject.Iterator,QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>Returns true if other points to the same item as this iterator;
            otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QJsonObject.Iterator.op_Inequality(QtCore.QJsonObject.Iterator,QtCore.QJsonObject.Const_iterator)">
            <summary>
            <para>Returns true if other points to a different item than this
            iterator; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Iterator.Key">
            <summary>
            <para>Returns the current item's key.</para>
            <para>There is no direct way of changing an item's key through an
            iterator, although it can be done by calling QJsonObject::erase() followed
            by QJsonObject::insert().</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtCore.QJsonObject.Iterator.Value">
            <summary>
            <para>Returns a modifiable reference to the current item's
            value.</para>
            <para>You can change the value of an item by using value() on the left
            side of an assignment.</para>
            <para>The return value is of type QJsonValueRef, a helper class for
            QJsonArray and QJsonObject. When you get an object of type QJsonValueRef,
            you can use it as if it were a reference to a QJsonValue. If you assign to
            it, the assignment will apply to the element in the QJsonArray or
            QJsonObject from which you got the reference.</para>
            <para>See also key() and operator*().</para>
            </summary>
        </member>
        <member name="T:QtCore.QEventLoop">
            <summary>
            <para>The QEventLoop class provides a means of entering and leaving an
            event loop.</para>
            </summary>
            <remarks>
            <para>At any time, you can create a QEventLoop object and call exec()
            on it to start a local event loop. From within the event loop, calling
            exit() will force exec() to return.</para>
            <para></para>
            <para>See also QAbstractEventDispatcher.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QEventLoop.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an event loop object with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.ProcessEvents(QtCore.QEventLoop.ProcessEventsFlag)">
            <summary>
            <para>Processes pending events that match flags until there are no more
            events to process. Returns true if pending events were handled; otherwise
            returns false.</para>
            <para>This function is especially useful if you have a long running
            operation and want to show its progress without allowing user input; i.e.
            by using the ExcludeUserInputEvents flag.</para>
            <para>This function is simply a wrapper for
            QAbstractEventDispatcher::processEvents(). See the documentation for that
            function for details.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.ProcessEvents(QtCore.QEventLoop.ProcessEventsFlag,System.Int32)">
            <summary>
            <para>Process pending events that match flags for a maximum of maxTime
            milliseconds, or until there are no more events to process, whichever is
            shorter. This function is especially useful if you have a long running
            operation and want to show its progress without allowing user input, i.e.
            by using the ExcludeUserInputEvents flag.</para>
            <para>Notes:</para>
            <para></para>
            <para>This function does not process events continuously; it returns
            after all available events are processed.</para>
            <para>Specifying the WaitForMoreEvents flag makes no sense and will be
            ignored.</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.Exec(QtCore.QEventLoop.ProcessEventsFlag)">
            <summary>
            <para>Enters the main event loop and waits until exit() is called.
            Returns the value that was passed to exit().</para>
            <para>If flags are specified, only events of the types allowed by the
            flags will be processed.</para>
            <para>It is necessary to call this function to start event handling.
            The main event loop receives events from the window system and dispatches
            these to the application widgets.</para>
            <para>Generally speaking, no user interaction can take place before
            calling exec(). As a special case, modal widgets like QMessageBox can be
            used before calling exec(), because modal widgets use their own local event
            loop.</para>
            <para>To make your application perform idle processing (i.e. executing
            a special function whenever there are no pending events), use a QTimer with
            0 timeout. More sophisticated idle processing schemes can be achieved using
            processEvents().</para>
            <para>See also QCoreApplication::quit(), exit(), and
            processEvents().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.Exit(System.Int32)">
            <summary>
            <para>Tells the event loop to exit with a return code.</para>
            <para>After this function has been called, the event loop returns from
            the call to exec(). The exec() function returns returnCode.</para>
            <para>By convention, a returnCode of 0 means success, and any non-zero
            value indicates an error.</para>
            <para>Note that unlike the C library function of the same name, this
            function does return to the caller -- it is event processing that
            stops.</para>
            <para>See also QCoreApplication::quit(), quit(), and exec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.WakeUp">
            <summary>
            <para>Wakes up the event loop.</para>
            <para>See also QAbstractEventDispatcher::wakeUp().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.Quit">
            <summary>
            <para>Tells the event loop to exit normally.</para>
            <para>Same as exit(0).</para>
            <para>See also QCoreApplication::quit() and exit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoop.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEventLoop.IsRunning">
            <summary>
            <para>Returns true if the event loop is running; otherwise returns
            false. The event loop is considered running from the time when exec() is
            called until exit() is called.</para>
            <para>See also exec() and exit().</para>
            </summary>
        </member>
        <member name="T:QtCore.QEventLoop.ProcessEventsFlag">
            <summary>
            <para>This enum controls the types of events processed by the
            processEvents() functions.</para>
            <para>The ProcessEventsFlags type is a typedef for
            QFlags&lt;ProcessEventsFlag&gt;. It stores an OR combination of
            ProcessEventsFlag values.</para>
            <para>See also processEvents().</para>
            </summary>
        </member>
        <member name="F:QtCore.QEventLoop.ProcessEventsFlag.AllEvents">
            <summary>All events. Note that DeferredDelete events are processed specially. See QObject::deleteLater() for more details.</summary>
        </member>
        <member name="F:QtCore.QEventLoop.ProcessEventsFlag.ExcludeUserInputEvents">
            <summary>Do not process user input events, such as ButtonPress and KeyPress. Note that the events are not discarded; they will be delivered the next time processEvents() is called without the ExcludeUserInputEvents flag.</summary>
        </member>
        <member name="F:QtCore.QEventLoop.ProcessEventsFlag.ExcludeSocketNotifiers">
            <summary>Do not process socket notifier events. Note that the events are not discarded; they will be delivered the next time processEvents() is called without the ExcludeSocketNotifiers flag.</summary>
        </member>
        <member name="F:QtCore.QEventLoop.ProcessEventsFlag.WaitForMoreEvents">
            <summary>Wait for events if no pending events are available.</summary>
        </member>
        <member name="T:QtCore.QEventLoopLocker">
            <summary>
            <para>The QEventLoopLocker class provides a means to quit an event loop
            when it is no longer needed.</para>
            </summary>
            <remarks>
            <para>The QEventLoopLocker operates on particular objects - either a
            QCoreApplication instance, a QEventLoop instance or a QThread
            instance.</para>
            <para>This makes it possible to, for example, run a batch of jobs with
            an event loop and exit that event loop after the last job is finished. That
            is accomplished by keeping a QEventLoopLocker with each job
            instance.</para>
            <para>The variant which operates on QCoreApplication makes it possible
            to finish asynchronously running jobs after the last gui window has been
            closed. This can be useful for example for running a job which uploads data
            to a network.</para>
            <para></para>
            <para>See also QEventLoop and QCoreApplication.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QEventLoopLocker.#ctor">
            <summary>
            <para>Creates an event locker operating on the QCoreApplication.</para>
            <para>The application will quit when there are no more
            QEventLoopLockers operating on it.</para>
            <para>See also QCoreApplication::quit() and
            QCoreApplication::isQuitLockEnabled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoopLocker.#ctor(QtCore.QEventLoop)">
            <summary>
            <para>Creates an event locker operating on the loop.</para>
            <para>This particular QEventLoop will quit when there are no more
            QEventLoopLockers operating on it.</para>
            <para>See also QEventLoop::quit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventLoopLocker.#ctor(QtCore.QThread)">
            <summary>
            <para>Creates an event locker operating on the thread.</para>
            <para>This particular QThread will quit when there are no more
            QEventLoopLockers operating on it.</para>
            <para>See also QThread::quit().</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractEventDispatcher">
            <summary>
            <para>The QAbstractEventDispatcher class provides an interface to
            manage Qt's event queue.</para>
            </summary>
            <remarks>
            <para>An event dispatcher receives events from the window system and
            other sources. It then sends them to the QCoreApplication or QApplication
            instance for processing and delivery. QAbstractEventDispatcher provides
            fine-grained control over event delivery.</para>
            <para>For simple control of event processing use
            QCoreApplication::processEvents().</para>
            <para>For finer control of the application's event loop, call
            instance() and call functions on the QAbstractEventDispatcher object that
            is returned. If you want to use your own instance of
            QAbstractEventDispatcher or of a QAbstractEventDispatcher subclass, you
            must install it with QCoreApplication::setEventDispatcher() or
            QThread::setEventDispatcher() before a default event dispatcher has been
            installed.</para>
            <para>The main event loop is started by calling
            QCoreApplication::exec(), and stopped by calling QCoreApplication::exit().
            Local event loops can be created using QEventLoop.</para>
            <para>Programs that perform long operations can call processEvents()
            with a bitwise OR combination of various QEventLoop::ProcessEventsFlag
            values to control which events should be delivered.</para>
            <para>QAbstractEventDispatcher also allows the integration of an
            external event loop with the Qt event loop.</para>
            <para></para>
            <para>See also QEventLoop, QCoreApplication, and QThread.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new event dispatcher with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.ProcessEvents(QtCore.QEventLoop.ProcessEventsFlag)">
            <summary>
            <para>Processes pending events that match flags until there are no more
            events to process. Returns true if an event was processed; otherwise
            returns false.</para>
            <para>This function is especially useful if you have a long running
            operation, and want to show its progress without allowing user input by
            using the QEventLoop::ExcludeUserInputEvents flag.</para>
            <para>If the QEventLoop::WaitForMoreEvents flag is set in flags, the
            behavior of this function is as follows:</para>
            <para></para>
            <para>If events are available, this function returns after processing
            them.</para>
            <para>If no events are available, this function will wait until more
            are available and return after processing newly available events.</para>
            <para></para>
            <para>If the QEventLoop::WaitForMoreEvents flag is not set in flags,
            and no events are available, this function will return immediately.</para>
            <para>Note: This function does not process events continuously; it
            returns after all available events are processed.</para>
            <para>See also hasPendingEvents().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RegisterSocketNotifier(QtCore.QSocketNotifier)">
            <summary>
            <para>Registers notifier with the event loop. Subclasses must implement
            this method to tie a socket notifier into another event loop.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.UnregisterSocketNotifier(QtCore.QSocketNotifier)">
            <summary>
            <para>Unregisters notifier from the event dispatcher. Subclasses must
            reimplement this method to tie a socket notifier into another event loop.
            Reimplementations must call the base implementation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RegisterTimer(System.Int32,QtCore.Qt.TimerType,QtCore.QObject)">
            <summary>
            <para>Registers a timer with the specified interval and timerType for
            the given object and returns the timer id.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RegisterTimer(System.Int32,System.Int32,QtCore.Qt.TimerType,QtCore.QObject)">
            <summary>
            <para>Register a timer with the specified timerId, interval, and
            timerType for the given object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.UnregisterTimer(System.Int32)">
            <summary>
            <para>Unregisters the timer with the given timerId. Returns true if
            successful; otherwise returns false.</para>
            <para>See also registerTimer() and unregisterTimers().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.UnregisterTimers(QtCore.QObject)">
            <summary>
            <para>Unregisters all the timers associated with the given object.
            Returns true if all timers were successful removed; otherwise returns
            false.</para>
            <para>See also unregisterTimer() and registeredTimers().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RemainingTime(System.Int32)">
            <summary>
            <para>Returns the remaining time in milliseconds with the given
            timerId. If the timer is inactive, the returned value will be -1. If the
            timer is overdue, the returned value will be 0.</para>
            <para>See also Qt::TimerType.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RegisterEventNotifier(QtCore.QWinEventNotifier)">
            <summary>
            <para>This pure virtual method exists on windows only and has to be
            reimplemented by a Windows specific event dispatcher implementation.
            notifier is the QWinEventNotifier instance to be registered.</para>
            <para>The method should return true if the registration of notifier was
            sucessful, otherwise false.</para>
            <para>QWinEventNotifier calls this method in it's constructor and there
            should never be a need to call this method directly.</para>
            <para>See also QWinEventNotifier and unregisterEventNotifier().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.UnregisterEventNotifier(QtCore.QWinEventNotifier)">
            <summary>
            <para>This pure virtual method exists on windows only and has to be
            reimplemented by a Windows specific event dispatcher implementation.
            notifier is the QWinEventNotifier instance to be unregistered.</para>
            <para>QWinEventNotifier calls this method in it's destructor and there
            should never be a need to call this method directly.</para>
            <para>See also QWinEventNotifier and registerEventNotifier().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.WakeUp">
            <summary>
            <para>Wakes up the event loop.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also awake().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.Interrupt">
            <summary>
            <para>Interrupts event dispatching. The event dispatcher will return
            from processEvents() as soon as possible.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.Flush">
            <summary>
            <para>Flushes the event queue. This normally returns almost
            immediately. Does nothing on platforms other than X11.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.InstallNativeEventFilter(QtCore.QAbstractNativeEventFilter)">
            <summary>
            <para>Installs an event filter filterObj for all native event filters
            received by the application.</para>
            <para>The event filter filterObj receives events via its
            nativeEventFilter() function, which is called for all events received by
            all threads.</para>
            <para>The nativeEventFilter() function should return true if the event
            should be filtered, (in this case, stopped). It should return false to
            allow normal Qt processing to continue: the native event can then be
            translated into a QEvent and handled by the standard Qt event filtering,
            e.g. QObject::installEventFilter().</para>
            <para>If multiple event filters are installed, the filter that was
            installed last is activated first.</para>
            <para>Note: The filter function set here receives native messages, that
            is, MSG or XEvent structs.</para>
            <para>For maximum portability, you should always try to use QEvent
            objects and QObject::installEventFilter() whenever possible.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QObject::installEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.RemoveNativeEventFilter(QtCore.QAbstractNativeEventFilter)">
            <summary>
            <para>Removes the event filter filter from this object. The request is
            ignored if such an event filter has not been installed.</para>
            <para>All event filters for this object are automatically removed when
            this object is destroyed.</para>
            <para>It is always safe to remove an event filter, even during event
            filter filter activation (that is, even from within the nativeEventFilter()
            function).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also installNativeEventFilter() and
            QAbstractNativeEventFilter.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.FilterNativeEvent(QtCore.QByteArray,System.IntPtr,System.Int32@)">
            <summary>
            <para>Sends message through the event filters that were set by
            installNativeEventFilter(). This function returns true as soon as an event
            filter returns true, and false otherwise to indicate that the processing of
            the event should continue.</para>
            <para>Subclasses of QAbstractEventDispatcher must call this function
            for all messages received from the system to ensure compatibility with any
            extensions that may be used in the application. The type of event eventType
            is specific to the platform plugin chosen at run-time, and can be used to
            cast message to the right type. The result pointer is only used on Windows,
            and corresponds to the LRESULT pointer.</para>
            <para>Note that the type of message is platform dependent. See
            QAbstractNativeEventFilter for details.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also installNativeEventFilter() and
            QAbstractNativeEventFilter::nativeEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.Instance(QtCore.QThread)">
            <summary>
            <para>Returns a pointer to the event dispatcher object for the
            specified thread. If thread is zero, the current thread is used. If no
            event dispatcher exists for the specified thread, this function returns
            0.</para>
            <para>Note: If Qt is built without thread support, the thread argument
            is ignored.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractEventDispatcher.AboutToBlock">
            <summary>
            <para>This signal is emitted before the event loop calls a function that could block.</para>
            <para>See also awake().</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractEventDispatcher.Awake">
            <summary>
            <para>This signal is emitted after the event loop returns from a function that could block.</para>
            <para>See also wakeUp() and aboutToBlock().</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractEventDispatcher.HasPendingEvents">
            <summary>
            <para>Returns true if there is an event waiting; otherwise returns
            false. This function is an implementation detail for
            QCoreApplication::hasPendingEvents() and must not be called
            directly.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractEventDispatcher.TimerInfo">
            <summary>
            <para>This struct represents information about a timer: timerId,
            interval, and timerType.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also registeredTimers().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractEventDispatcher.TimerInfo.#ctor(System.Int32,System.Int32,QtCore.Qt.TimerType)">
            <summary>
            <para>Constructs a TimerInfo struct with the given timerId, interval,
            and timerType.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractEventDispatcher.TimerInfo.TimerId">
            <summary>
            <para>The timer's unique id.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractEventDispatcher.TimerInfo.Interval">
            <summary>
            <para>The timer's interval.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractEventDispatcher.TimerInfo.TimerType">
            <summary>
            <para>The timer's type</para>
            <para>See also Qt::TimerType.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractNativeEventFilter">
            <summary>
            <para>The QAbstractNativeEventFilter class provides an interface for
            receiving native events, such as MSG or XCB event structs.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractNativeEventFilter.#ctor">
            <summary>
            <para>Creates a native event filter.</para>
            <para>By default this doesn't do anything. Remember to install it on
            the application object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractNativeEventFilter.NativeEventFilter(QtCore.QByteArray,System.IntPtr,System.Int32@)">
            <summary>
            <para>This method is called for every native event.</para>
            <para>Note: The filter function here receives native messages, for
            example, MSG or XCB event structs.</para>
            <para>It is called by the QPA platform plugin. On Windows, it is called
            by the event dispatcher.</para>
            <para>The type of event eventType is specific to the platform plugin
            chosen at run-time, and can be used to cast message to the right
            type.</para>
            <para>On X11, eventType is set to &quot;xcb_generic_event_t&quot;, and
            the message can be casted to a xcb_generic_event_t pointer.</para>
            <para>On Windows, eventType is set to &quot;windows_generic_MSG&quot;
            for messages sent to toplevel windows, and
            &quot;windows_dispatcher_MSG&quot; for system-wide messages such as
            messages from a registered hot key. In both cases, the message can be
            casted to a MSG pointer. The result pointer is only used on Windows, and
            corresponds to the LRESULT pointer.</para>
            <para>On Mac, eventType is set to &quot;mac_generic_NSEvent&quot;, and
            the message can be casted to an EventRef.</para>
            <para>On Blackberry (not plain QNX) eventType is set to
            &quot;bps_event_t&quot;, and the message can be casted to a bps_event_t
            pointer.</para>
            <para>In your reimplementation of this function, if you want to filter
            the message out, i.e. stop it being handled further, return true; otherwise
            return false.</para>
            <para>Example:</para>
            <para>class MyXcbEventFilter : public QAbstractNativeEventFilter</para>
            <para>{</para>
            <para>public:</para>
            <para>    virtual bool nativeEventFilter(const QByteArray
            &amp;eventType, void *message, long *) Q_DECL_OVERRIDE</para>
            <para>    {</para>
            <para>        if (eventType == &quot;xcb_generic_event_t&quot;)
            {</para>
            <para>            xcb_generic_event_t* ev =
            static_cast&lt;xcb_generic_event_t *&gt;(message);</para>
            <para>            // ...</para>
            <para>        }</para>
            <para>        return false;</para>
            <para>    }</para>
            <para>};</para>
            </summary>
        </member>
        <member name="T:QtCore.QBasicTimer">
            <summary>
            <para>The QBasicTimer class provides timer events for objects.</para>
            </summary>
            <remarks>
            <para>This is a fast, lightweight, and low-level class used by Qt
            internally. We recommend using the higher-level QTimer class rather than
            this class if you want to use timers in your applications. Note that this
            timer is a repeating timer that will send subsequent timer events unless
            the stop() function is called.</para>
            <para>To use this class, create a QBasicTimer, and call its start()
            function with a timeout interval and with a pointer to a QObject subclass.
            When the timer times out it will send a timer event to the QObject
            subclass. The timer can be stopped at any time using stop(). isActive()
            returns true for a timer that is running; i.e. it has been started, has not
            reached the timeout time, and has not been stopped. The timer's ID can be
            retrieved using timerId().</para>
            <para>The Wiggly example uses QBasicTimer to repaint a widget at
            regular intervals.</para>
            <para></para>
            <para>See also QTimer, QTimerEvent, QObject::timerEvent(), Timers, and
            Wiggly Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QBasicTimer.#ctor">
            <summary>
            <para>Contructs a basic timer.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBasicTimer.Start(System.Int32,QtCore.QObject)">
            <summary>
            <para>Starts (or restarts) the timer with a msec milliseconds timeout.
            The timer will be a Qt::CoarseTimer. See Qt::TimerType for information on
            the different timer types.</para>
            <para>The given object will receive timer events.</para>
            <para>See also stop(), isActive(), QObject::timerEvent(), and
            Qt::CoarseTimer.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBasicTimer.Start(System.Int32,QtCore.Qt.TimerType,QtCore.QObject)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Starts (or restarts) the timer with a msec milliseconds timeout
            and the given timerType. See Qt::TimerType for information on the different
            timer types.</para>
            <para>obj will receive timer events.</para>
            <para>See also stop(), isActive(), QObject::timerEvent(), and
            Qt::TimerType.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBasicTimer.Stop">
            <summary>
            <para>Stops the timer.</para>
            <para>See also start() and isActive().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBasicTimer.IsActive">
            <summary>
            <para>Returns true if the timer is running and has not been stopped;
            otherwise returns false.</para>
            <para>See also start() and stop().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBasicTimer.TimerId">
            <summary>
            <para>Returns the timer's ID.</para>
            <para>See also QTimerEvent::timerId().</para>
            </summary>
        </member>
        <member name="T:QtCore.QEvent">
            <summary>
            <para>The QEvent class is the base class of all event classes. Event
            objects contain event parameters.</para>
            </summary>
            <remarks>
            <para>Qt's main event loop (QCoreApplication::exec()) fetches native
            window system events from the event queue, translates them into QEvents,
            and sends the translated events to QObjects.</para>
            <para>In general, events come from the underlying window system
            (spontaneous() returns true), but it is also possible to manually send
            events using QCoreApplication::sendEvent() and
            QCoreApplication::postEvent() (spontaneous() returns false).</para>
            <para>QObjects receive events by having their QObject::event() function
            called. The function can be reimplemented in subclasses to customize event
            handling and add additional event types; QWidget::event() is a notable
            example. By default, events are dispatched to event handlers like
            QObject::timerEvent() and QWidget::mouseMoveEvent().
            QObject::installEventFilter() allows an object to intercept events destined
            for another object.</para>
            <para>The basic QEvent contains only an event type parameter and an
            &quot;accept&quot; flag. The accept flag set with accept(), and cleared
            with ignore(). It is set by default, but don't rely on this as subclasses
            may choose to clear it in their constructor.</para>
            <para>Subclasses of QEvent contain additional parameters that describe
            the particular event.</para>
            <para></para>
            <para>See also QObject::event(), QObject::installEventFilter(),
            QCoreApplication::sendEvent(), QCoreApplication::postEvent(), and
            QCoreApplication::processEvents().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QEvent.#ctor(QtCore.QEvent.Type)">
            <summary>
            <para>Contructs an event object of type type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEvent.Accept">
            <summary>
            <para>Sets the accept flag of the event object, the equivalent of
            calling setAccepted(true).</para>
            <para>Setting the accept parameter indicates that the event receiver
            wants the event. Unwanted events might be propagated to the parent
            widget.</para>
            <para>See also ignore().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEvent.Ignore">
            <summary>
            <para>Clears the accept flag parameter of the event object, the
            equivalent of calling setAccepted(false).</para>
            <para>Clearing the accept parameter indicates that the event receiver
            does not want the event. Unwanted events might be propagated to the parent
            widget.</para>
            <para>See also accept().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEvent.RegisterEventType(System.Int32)">
            <summary>
            <para>Registers and returns a custom event type. The hint provided will
            be used if it is available, otherwise it will return a value between
            QEvent::User and QEvent::MaxUser that has not yet been registered. The hint
            is ignored if its value is not between QEvent::User and
            QEvent::MaxUser.</para>
            <para>Returns -1 if all available values are already taken or the
            program is shutting down.</para>
            <para>Note: This function is thread-safe.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEvent.Accepted">
            <summary>
            <para>the accept flag of the event object</para>
            <para>Setting the accept parameter indicates that the event receiver
            wants the event. Unwanted events might be propagated to the parent widget.
            By default, isAccepted() is set to true, but don't rely on this as
            subclasses may choose to clear it in their constructor.</para>
            <para>For convenience, the accept flag can also be set with accept(),
            and cleared with ignore().</para>
            </summary>
        </member>
        <member name="P:QtCore.QEvent.type">
            <summary>
            <para>Returns the event type.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEvent.Spontaneous">
            <summary>
            <para>Returns true if the event originated outside the application (a
            system event); otherwise returns false.</para>
            <para>The return value of this function is not defined for paint
            events.</para>
            </summary>
        </member>
        <member name="T:QtCore.QEvent.Type">
            <summary>
            <para>This enum type defines the valid event types in Qt. The event
            types and the specialized classes for each type are as follows:</para>
            <para>User events should have values between User and MaxUser:</para>
            <para>For convenience, you can use the registerEventType() function to
            register and reserve a custom event type for your application. Doing so
            will allow you to avoid accidentally re-using a custom event type already
            in use elsewhere in your application.</para>
            </summary>
        </member>
        <member name="F:QtCore.QEvent.Type.None">
            <summary>Not an event.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Timer">
            <summary>Regular timer events (QTimerEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MouseButtonPress">
            <summary>Mouse press (QMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MouseButtonRelease">
            <summary>Mouse release (QMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MouseButtonDblClick">
            <summary>Mouse press again (QMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MouseMove">
            <summary>Mouse move (QMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.KeyPress">
            <summary>Key press (QKeyEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.KeyRelease">
            <summary>Key release (QKeyEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.FocusIn">
            <summary>Widget or Window gains keyboard focus (QFocusEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.FocusOut">
            <summary>Widget or Window loses keyboard focus (QFocusEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.FocusAboutToChange">
            <summary>Widget or Window focus is about to change (QFocusEvent)</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Enter">
            <summary>Mouse enters widget's boundaries (QEnterEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Leave">
            <summary>Mouse leaves widget's boundaries.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Paint">
            <summary>Screen update necessary (QPaintEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Move">
            <summary>Widget's position changed (QMoveEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Resize">
            <summary>Widget's size changed (QResizeEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Show">
            <summary>Widget was shown on screen (QShowEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Hide">
            <summary>Widget was hidden (QHideEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Close">
            <summary>Widget was closed (QCloseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ParentChange">
            <summary>The widget parent has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ParentAboutToChange">
            <summary>The widget parent is about to change.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ThreadChange">
            <summary>The object is moved to another thread. This is the last event sent to this object in the previous thread. See QObject::moveToThread().</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowActivate">
            <summary>Window was activated.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowDeactivate">
            <summary>Window was deactivated.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ShowToParent">
            <summary>A child widget has been shown.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.HideToParent">
            <summary>A child widget has been hidden.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Wheel">
            <summary>Mouse wheel rolled (QWheelEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowTitleChange">
            <summary>The window title has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowIconChange">
            <summary>The window's icon has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationWindowIconChange">
            <summary>The application's icon has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationFontChange">
            <summary>The default application font has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationLayoutDirectionChange">
            <summary>The default application layout direction has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationPaletteChange">
            <summary>The default application palette has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.PaletteChange">
            <summary>Palette of the widget changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Clipboard">
            <summary>The clipboard contents have changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MetaCall">
            <summary>An asynchronous method invocation via QMetaObject::invokeMethod().</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.SockAct">
            <summary>Socket activated, used to implement QSocketNotifier.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WinEventAct">
            <summary>A Windows-specific activation event has occurred.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.DeferredDelete">
            <summary>The object will be deleted after it has cleaned up (QDeferredDeleteEvent)</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.DragEnter">
            <summary>The cursor enters a widget during a drag and drop operation (QDragEnterEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.DragMove">
            <summary>A drag and drop operation is in progress (QDragMoveEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.DragLeave">
            <summary>The cursor leaves a widget during a drag and drop operation (QDragLeaveEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Drop">
            <summary>A drag and drop operation is completed (QDropEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ChildAdded">
            <summary>An object gets a child (QChildEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ChildPolished">
            <summary>A widget child gets polished (QChildEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ChildRemoved">
            <summary>An object loses a child (QChildEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.PolishRequest">
            <summary>The widget should be polished.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Polish">
            <summary>The widget is polished.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.LayoutRequest">
            <summary>Widget layout needs to be redone.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.UpdateRequest">
            <summary>The widget should be repainted.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.UpdateLater">
            <summary>The widget should be queued to be repainted at a later time.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ContextMenu">
            <summary>Context popup menu (QContextMenuEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.InputMethod">
            <summary>An input method is being used (QInputMethodEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TabletMove">
            <summary>Wacom tablet move (QTabletEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.LocaleChange">
            <summary>The system locale has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.LanguageChange">
            <summary>The application translation changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.LayoutDirectionChange">
            <summary>The direction of layouts changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TabletPress">
            <summary>Wacom tablet press (QTabletEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TabletRelease">
            <summary>Wacom tablet release (QTabletEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.OkRequest">
            <summary>Ok button in decoration pressed. Supported only for Windows CE.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.IconDrag">
            <summary>The main icon of a window has been dragged away (QIconDragEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.FontChange">
            <summary>Widget's font has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.EnabledChange">
            <summary>Widget's enabled state has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ActivationChange">
            <summary>A widget's top-level window activation state has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.StyleChange">
            <summary>Widget's style has been changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.IconTextChange">
            <summary>Widget's icon text has been changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ModifiedChange">
            <summary>Widgets modification state has been changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MouseTrackingChange">
            <summary>The mouse tracking state has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowBlocked">
            <summary>The window is blocked by a modal dialog.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowUnblocked">
            <summary>The window is unblocked after a modal dialog exited.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WindowStateChange">
            <summary>The window's state (minimized, maximized or full-screen) has changed (QWindowStateChangeEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ReadOnlyChange">
            <summary>Widget's read-only state has changed (since Qt 5.4).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ToolTip">
            <summary>A tooltip was requested (QHelpEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WhatsThis">
            <summary>The widget should reveal "What's This?" help (QHelpEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.StatusTip">
            <summary>A status tip is requested (QStatusTipEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ActionChanged">
            <summary>An action has been changed (QActionEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ActionAdded">
            <summary>A new action has been added (QActionEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ActionRemoved">
            <summary>An action has been removed (QActionEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.FileOpen">
            <summary>File open request (QFileOpenEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Shortcut">
            <summary>Key press in child for shortcut key handling (QShortcutEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ShortcutOverride">
            <summary>Key press in child, for overriding shortcut key handling (QKeyEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WhatsThisClicked">
            <summary>A link in a widget's "What's This?" help was clicked.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ToolBarChange">
            <summary>The toolbar button is toggled on OS X.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationActivate">
            <summary>This enum has been deprecated. Use ApplicationStateChange instead.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationActivated">
            <summary>This enum has been deprecated. Use ApplicationStateChange instead.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationDeactivate">
            <summary>This enum has been deprecated. Use ApplicationStateChange instead.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.QueryWhatsThis">
            <summary>The widget should accept the event if it has "What's This?" help.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.EnterWhatsThisMode">
            <summary>Send to toplevel widgets when the application enters "What's This?" mode.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.LeaveWhatsThisMode">
            <summary>Send to toplevel widgets when the application leaves "What's This?" mode.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ZOrderChange">
            <summary>The widget's z-order has changed. This event is never sent to top level windows.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.HoverEnter">
            <summary>The mouse cursor enters a hover widget (QHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.HoverLeave">
            <summary>The mouse cursor leaves a hover widget (QHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.HoverMove">
            <summary>The mouse cursor moves inside a hover widget (QHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneMouseMove">
            <summary>Move mouse in a graphics scene (QGraphicsSceneMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneMousePress">
            <summary>Mouse press in a graphics scene (QGraphicsSceneMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneMouseRelease">
            <summary>Mouse release in a graphics scene (QGraphicsSceneMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneMouseDoubleClick">
            <summary>Mouse press again (double click) in a graphics scene (QGraphicsSceneMouseEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneContextMenu">
            <summary>Context popup menu over a graphics scene (QGraphicsSceneContextMenuEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneHoverEnter">
            <summary>The mouse cursor enters a hover item in a graphics scene (QGraphicsSceneHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneHoverMove">
            <summary>The mouse cursor moves inside a hover item in a graphics scene (QGraphicsSceneHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneHoverLeave">
            <summary>The mouse cursor leaves a hover item in a graphics scene (QGraphicsSceneHoverEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneHelp">
            <summary>The user requests help for a graphics scene (QHelpEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneDragEnter">
            <summary>The cursor enters a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneDragMove">
            <summary>A drag and drop operation is in progress over a scene (QGraphicsSceneDragDropEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneDragLeave">
            <summary>The cursor leaves a graphics scene during a drag and drop operation (QGraphicsSceneDragDropEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneDrop">
            <summary>A drag and drop operation is completed over a scene (QGraphicsSceneDragDropEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneWheel">
            <summary>Mouse wheel rolled in a graphics scene (QGraphicsSceneWheelEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.KeyboardLayoutChange">
            <summary>The keyboard layout has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.DynamicPropertyChange">
            <summary>A dynamic property was added, changed, or removed from the object.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TabletEnterProximity">
            <summary>Wacom tablet enter proximity event (QTabletEvent), sent to QApplication.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TabletLeaveProximity">
            <summary>Wacom tablet leave proximity event (QTabletEvent), sent to QApplication.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.NonClientAreaMouseMove">
            <summary>A mouse move occurred outside the client area.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.NonClientAreaMouseButtonPress">
            <summary>A mouse button press occurred outside the client area.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.NonClientAreaMouseButtonRelease">
            <summary>A mouse button release occurred outside the client area.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.NonClientAreaMouseButtonDblClick">
            <summary>A mouse double click occurred outside the client area.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MacSizeChange">
            <summary>The user changed his widget sizes (OS X only).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ContentsRectChange">
            <summary>The margins of the widget's content rect changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneResize">
            <summary>Widget was resized (QGraphicsSceneResizeEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GraphicsSceneMove">
            <summary>Widget was moved (QGraphicsSceneMoveEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.CursorChange">
            <summary>The widget's cursor has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ToolTipChange">
            <summary>The widget's tooltip has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GrabMouse">
            <summary>Item gains mouse grab (QGraphicsItem only).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.UngrabMouse">
            <summary>Item loses mouse grab (QGraphicsItem only).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GrabKeyboard">
            <summary>Item gains keyboard grab (QGraphicsItem only).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.UngrabKeyboard">
            <summary>Item loses keyboard grab (QGraphicsItem only).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.StateMachineSignal">
            <summary>A signal delivered to a state machine (QStateMachine::SignalEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.StateMachineWrapped">
            <summary>The event is a wrapper for, i.e., contains, another event (QStateMachine::WrappedEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TouchBegin">
            <summary>Beginning of a sequence of touch-screen or track-pad events (QTouchEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TouchUpdate">
            <summary>Touch-screen event (QTouchEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TouchEnd">
            <summary>End of touch-event sequence (QTouchEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.NativeGesture">
            <summary>The system has detected a gesture (QNativeGestureEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.RequestSoftwareInputPanel">
            <summary>A widget wants to open a software input panel (SIP).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.CloseSoftwareInputPanel">
            <summary>A widget wants to close the software input panel (SIP).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.WinIdChange">
            <summary>The window system identifer for this native widget has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Gesture">
            <summary>A gesture was triggered (QGestureEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.GestureOverride">
            <summary>A gesture override was triggered (QGestureEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ScrollPrepare">
            <summary>The object needs to fill in its geometry information (QScrollPrepareEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Scroll">
            <summary>The object needs to scroll to the supplied position (QScrollEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.Expose">
            <summary>Sent to a window when its on-screen contents are invalidated and need to be flushed from the backing store.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.InputMethodQuery">
            <summary>A input method query event (QInputMethodQueryEvent)</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.OrientationChange">
            <summary>The screens orientation has changes (QScreenOrientationChangeEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.TouchCancel">
            <summary>Cancellation of touch-event sequence (QTouchEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.PlatformPanel">
            <summary>A platform specific panel has been requested.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.ApplicationStateChange">
            <summary>The state of the application has changed.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.PlatformSurface">
            <summary>A native platform surface has been created or is about to be destroyed (QPlatformSurfaceEvent).</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.User">
            <summary>User-defined event.</summary>
        </member>
        <member name="F:QtCore.QEvent.Type.MaxUser">
            <summary>Last user event ID.</summary>
        </member>
        <member name="T:QtCore.QTimerEvent">
            <summary>
            <para>The QTimerEvent class contains parameters that describe a timer
            event.</para>
            </summary>
            <remarks>
            <para>Timer events are sent at regular intervals to objects that have
            started one or more timers. Each timer has a unique identifier. A timer is
            started with QObject::startTimer().</para>
            <para>The QTimer class provides a high-level programming interface that
            uses signals instead of events. It also provides single-shot timers.</para>
            <para>The event handler QObject::timerEvent() receives timer
            events.</para>
            <para></para>
            <para>See also QTimer, QObject::timerEvent(), QObject::startTimer(),
            and QObject::killTimer().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTimerEvent.#ctor(System.Int32)">
            <summary>
            <para>Constructs a timer event object with the timer identifier set to
            timerId.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimerEvent.TimerId">
            <summary>
            <para>Returns the unique timer identifier, which is the same identifier
            as returned from QObject::startTimer().</para>
            </summary>
        </member>
        <member name="T:QtCore.QChildEvent">
            <summary>
            <para>The QChildEvent class contains event parameters for child object
            events.</para>
            </summary>
            <remarks>
            <para>Child events are sent immediately to objects when children are
            added or removed.</para>
            <para>In both cases you can only rely on the child being a QObject (or,
            if QObject::isWidgetType() returns true, a QWidget). This is because in the
            QEvent::ChildAdded case the child is not yet fully constructed; in the
            QEvent::ChildRemoved case it might have already been destructed.</para>
            <para>The handler for these events is QObject::childEvent().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QChildEvent.#ctor(QtCore.QEvent.Type,QtCore.QObject)">
            <summary>
            <para>Constructs a child event object of a particular type for the
            child.</para>
            <para>type can be QEvent::ChildAdded, QEvent::ChildRemoved, or
            QEvent::ChildPolished.</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="P:QtCore.QChildEvent.Child">
            <summary>
            <para>Returns the child object that was added or removed.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChildEvent.Added">
            <summary>
            <para>Returns true if type() is QEvent::ChildAdded; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChildEvent.Polished">
            <summary>
            <para>Returns true if type() is QEvent::ChildPolished; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QChildEvent.Removed">
            <summary>
            <para>Returns true if type() is QEvent::ChildRemoved; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtCore.QDynamicPropertyChangeEvent">
            <summary>
            <para>The QDynamicPropertyChangeEvent class contains event parameters
            for dynamic property change events.</para>
            </summary>
            <remarks>
            <para>Dynamic property change events are sent to objects when
            properties are dynamically added, changed or removed using
            QObject::setProperty().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QDynamicPropertyChangeEvent.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a dynamic property change event object with the
            property name set to name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QDynamicPropertyChangeEvent.PropertyName">
            <summary>
            <para>Returns the name of the dynamic property that was added, changed
            or removed.</para>
            <para>See also QObject::setProperty() and
            QObject::dynamicPropertyNames().</para>
            </summary>
        </member>
        <member name="T:QtCore.QCoreApplication">
            <summary>
            <para>The QCoreApplication class provides an event loop for Qt
            applications without UI.</para>
            </summary>
            <remarks>
            <para>This class is used by non-GUI applications to provide their event
            loop. For non-GUI application that uses Qt, there should be exactly one
            QCoreApplication object. For GUI applications, see QApplication.</para>
            <para>QCoreApplication contains the main event loop, where all events
            from the operating system (e.g., timer and network events) and other
            sources are processed and dispatched. It also handles the application's
            initialization and finalization, as well as system-wide and
            application-wide settings.</para>
            <para></para>
            <para>The Event Loop and Event Handling</para>
            <para>The event loop is started with a call to exec(). Long running
            operations can call processEvents() to keep the application
            responsive.</para>
            <para>In general, we recommend that you create a QCoreApplication or a
            QApplication object in your main() function as early as possible. exec()
            will not return until the event loop exits; e.g., when quit() is
            called.</para>
            <para>Several static convenience functions are also provided. The
            QCoreApplication object is available from instance(). Events can be sent or
            posted using sendEvent(), postEvent(), and sendPostedEvents(). Pending
            events can be removed with removePostedEvents() or flushed with
            flush().</para>
            <para>The class provides a quit() slot and an aboutToQuit()
            signal.</para>
            <para></para>
            <para>Application and Library Paths</para>
            <para>An application has an applicationDirPath() and an
            applicationFilePath(). Library paths (see QLibrary) can be retrieved with
            libraryPaths() and manipulated by setLibraryPaths(), addLibraryPath(), and
            removeLibraryPath().</para>
            <para></para>
            <para>Internationalization and Translations</para>
            <para>Translation files can be added or removed using
            installTranslator() and removeTranslator(). Application strings can be
            translated using translate(). The QObject::tr() and QObject::trUtf8()
            functions are implemented in terms of translate().</para>
            <para></para>
            <para>Accessing Command Line Arguments</para>
            <para>The command line arguments which are passed to QCoreApplication's
            constructor should be accessed using the arguments() function. Note that
            some arguments supplied by the user may have been processed and removed by
            QCoreApplication.</para>
            <para>For more advanced command line option handling, create a
            QCommandLineParser.</para>
            <para></para>
            <para>Locale Settings</para>
            <para>On Unix/Linux Qt is configured to use the system locale settings
            by default. This can cause a conflict when using POSIX functions, for
            instance, when converting between data types such as floats and strings,
            since the notation may differ between locales. To get around this problem,
            call the POSIX function setlocale(LC_NUMERIC,&quot;C&quot;) right after
            initializing QApplication or QCoreApplication to reset the locale that is
            used for number formatting to &quot;C&quot;-locale.</para>
            <para></para>
            <para>See also QGuiApplication, QAbstractEventDispatcher, QEventLoop,
            Semaphores Example, and Wait Conditions Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCoreApplication.#ctor(System.Int32@,System.Char**,System.Int32)">
            <summary>
            <para>Constructs a Qt kernel application. Kernel applications are
            applications without a graphical user interface. These type of applications
            are used at the console or as server processes.</para>
            <para>The argc and argv arguments are processed by the application, and
            made available in a more convenient form by the arguments()
            function.</para>
            <para>Warning: The data referred to by argc and argv must stay valid
            for the entire lifetime of the QCoreApplication object. In addition, argc
            must be greater than zero and argv must contain at least one valid
            character string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Notify(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Sends event to receiver: receiver-&gt;event(event). Returns the
            value that is returned from the receiver's event handler. Note that this
            function is called for all events sent to any object in any thread.</para>
            <para>For certain types of events (e.g. mouse and key events), the
            event will be propagated to the receiver's parent and so on up to the
            top-level object if the receiver is not interested in the event (i.e., it
            returns false).</para>
            <para>There are five different ways that events can be processed;
            reimplementing this virtual function is just one of them. All five
            approaches are listed below:</para>
            <para></para>
            <para>Reimplementing paintEvent(), mousePressEvent() and so on. This is
            the commonest, easiest, and least powerful way.</para>
            <para>Reimplementing this function. This is very powerful, providing
            complete control; but only one subclass can be active at a time.</para>
            <para>Installing an event filter on QCoreApplication::instance(). Such
            an event filter is able to process all events for all widgets, so it's just
            as powerful as reimplementing notify(); furthermore, it's possible to have
            more than one application-global event filter. Global event filters even
            see mouse events for disabled widgets. Note that application event filters
            are only called for objects that live in the main thread.</para>
            <para>Reimplementing QObject::event() (as QWidget does). If you do this
            you get Tab key presses, and you get to see the events before any
            widget-specific event filters.</para>
            <para>Installing an event filter on the object. Such an event filter
            gets all the events, including Tab and Shift+Tab key press events, as long
            as they do not change the focus widget.</para>
            <para></para>
            <para>Future direction: This function will not be called for objects
            that live outside the main thread in Qt 6. Applications that need that
            functionality should find other solutions for their event inspection needs
            in the meantime. The change may be extended to the main thread, causing
            this function to be deprecated.</para>
            <para>Warning: If you override this function, you must ensure all
            threads that process events stop doing so before your application object
            begins destruction. This includes threads started by other libraries that
            you may be using, but does not apply to Qt's own threads.</para>
            <para>See also QObject::event() and installNativeEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.InstallNativeEventFilter(QtCore.QAbstractNativeEventFilter)">
            <summary>
            <para>Installs an event filter filterObj for all native events received
            by the application in the main thread.</para>
            <para>The event filter filterObj receives events via its
            nativeEventFilter() function, which is called for all native events
            received in the main thread.</para>
            <para>The QAbstractNativeEventFilter::nativeEventFilter() function
            should return true if the event should be filtered, (i.e. stopped). It
            should return false to allow normal Qt processing to continue: the native
            event can then be translated into a QEvent and handled by the standard Qt
            event filtering, e.g. QObject::installEventFilter().</para>
            <para>If multiple event filters are installed, the filter that was
            installed last is activated first.</para>
            <para>Note: The filter function set here receives native messages, i.e.
            MSG or XCB event structs.</para>
            <para>Note: Native event filters will be disabled when the application
            the Qt::AA_MacPluginApplication attribute is set.</para>
            <para>For maximum portability, you should always try to use QEvent and
            QObject::installEventFilter() whenever possible.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QObject::installEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.RemoveNativeEventFilter(QtCore.QAbstractNativeEventFilter)">
            <summary>
            <para>Removes an event filterObject from this object. The request is
            ignored if such an event filter has not been installed.</para>
            <para>All event filters for this object are automatically removed when
            this object is destroyed.</para>
            <para>It is always safe to remove an event filter, even during event
            filter activation (i.e. from the nativeEventFilter() function).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also installNativeEventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.SetAttribute(QtCore.Qt.ApplicationAttribute,System.Boolean)">
            <summary>
            <para>Sets the attribute attribute if on is true; otherwise clears the
            attribute.</para>
            <para>See also testAttribute().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.TestAttribute(QtCore.Qt.ApplicationAttribute)">
            <summary>
            <para>Returns true if attribute attribute is set; otherwise returns
            false.</para>
            <para>See also setAttribute().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Exec">
            <summary>
            <para>Enters the main event loop and waits until exit() is called.
            Returns the value that was set to exit() (which is 0 if exit() is called
            via quit()).</para>
            <para>It is necessary to call this function to start event handling.
            The main event loop receives events from the window system and dispatches
            these to the application widgets.</para>
            <para>To make your application perform idle processing (by executing a
            special function whenever there are no pending events), use a QTimer with 0
            timeout. More advanced idle processing schemes can be achieved using
            processEvents().</para>
            <para>We recommend that you connect clean-up code to the aboutToQuit()
            signal, instead of putting it in your application's main() function because
            on some platforms the exec() call may not return. For example, on Windows
            when the user logs off, the system terminates the process after Qt closes
            all top-level windows. Hence, there is no guarantee that the application
            will have time to exit its event loop and execute code at the end of the
            main() function after the exec() call.</para>
            <para>See also quit(), exit(), processEvents(), and
            QApplication::exec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.ProcessEvents(QtCore.QEventLoop.ProcessEventsFlag)">
            <summary>
            <para>Processes all pending events for the calling thread according to
            the specified flags until there are no more events to process.</para>
            <para>You can call this function occasionally when your program is busy
            performing a long operation (e.g. copying a file).</para>
            <para>In the event that you are running a local loop which calls this
            function continuously, without an event loop, the DeferredDelete events
            will not be processed. This can affect the behaviour of widgets, e.g.
            QToolTip, that rely on DeferredDelete events to function properly. An
            alternative would be to call sendPostedEvents() from within that local
            loop.</para>
            <para>Calling this function processes events only for the calling
            thread.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also exec(), QTimer, QEventLoop::processEvents(), flush(),
            and sendPostedEvents().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.ProcessEvents(QtCore.QEventLoop.ProcessEventsFlag,System.Int32)">
            <summary>
            <para>This function overloads processEvents().</para>
            <para>Processes pending events for the calling thread for maxtime
            milliseconds or until there are no more events to process, whichever is
            shorter.</para>
            <para>You can call this function occasionally when you program is busy
            doing a long operation (e.g. copying a file).</para>
            <para>Calling this function processes events only for the calling
            thread.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also exec(), QTimer, and QEventLoop::processEvents().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Exit(System.Int32)">
            <summary>
            <para>Tells the application to exit with a return code.</para>
            <para>After this function has been called, the application leaves the
            main event loop and returns from the call to exec(). The exec() function
            returns returnCode. If the event loop is not running, this function does
            nothing.</para>
            <para>By convention, a returnCode of 0 means success, and any non-zero
            value indicates an error.</para>
            <para>Note that unlike the C library function of the same name, this
            function does return to the caller -- it is event processing that
            stops.</para>
            <para>See also quit() and exec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.SendEvent(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Sends event event directly to receiver receiver, using the
            notify() function. Returns the value that was returned from the event
            handler.</para>
            <para>The event is not deleted when the event has been sent. The normal
            approach is to create the event on the stack, for example:</para>
            <para>QMouseEvent event(QEvent::MouseButtonPress, pos, 0, 0, 0);</para>
            <para>QApplication::sendEvent(mainWindow, &amp;event);</para>
            <para>See also postEvent() and notify().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.PostEvent(QtCore.QObject,QtCore.QEvent,System.Int32)">
            <summary>
            <para>Adds the event event, with the object receiver as the receiver of
            the event, to an event queue and returns immediately.</para>
            <para>The event must be allocated on the heap since the post event
            queue will take ownership of the event and delete it once it has been
            posted. It is not safe to access the event after it has been posted.</para>
            <para>When control returns to the main event loop, all events that are
            stored in the queue will be sent using the notify() function.</para>
            <para>Events are sorted in descending priority order, i.e. events with
            a high priority are queued before events with a lower priority. The
            priority can be any integer value, i.e. between INT_MAX and INT_MIN,
            inclusive; see Qt::EventPriority for more details. Events with equal
            priority will be processed in the order posted.</para>
            <para>Note: This function is thread-safe.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also sendEvent(), notify(), sendPostedEvents(), and
            Qt::EventPriority.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.SendPostedEvents(QtCore.QObject,System.Int32)">
            <summary>
            <para>Immediately dispatches all events which have been previously
            queued with QCoreApplication::postEvent() and which are for the object
            receiver and have the event type event_type.</para>
            <para>Events from the window system are not dispatched by this
            function, but by processEvents().</para>
            <para>If receiver is null, the events of event_type are sent for all
            objects. If event_type is 0, all the events are sent for receiver.</para>
            <para>Note: This method must be called from the same thread as its
            QObject parameter, receiver.</para>
            <para>See also flush() and postEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.RemovePostedEvents(QtCore.QObject,System.Int32)">
            <summary>
            <para>Removes all events of the given eventType that were posted using
            postEvent() for receiver.</para>
            <para>The events are not dispatched, instead they are removed from the
            queue. You should never need to call this function. If you do call it, be
            aware that killing events may cause receiver to break one or more
            invariants.</para>
            <para>If receiver is null, the events of eventType are removed for all
            objects. If eventType is 0, all the events are removed for receiver. You
            should never call this function with eventType of 0. If you do call it in
            this way, be aware that killing events may cause receiver to break one or
            more invariants.</para>
            <para>Note: This function is thread-safe.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.AddLibraryPath(System.String)">
            <summary>
            <para>Prepends path to the beginning of the library path list, ensuring
            that it is searched for libraries first. If path is empty or already in the
            path list, the path list is not changed.</para>
            <para>The default path list consists of a single entry, the
            installation directory for plugins. The default installation directory for
            plugins is INSTALL/plugins, where INSTALL is the directory where Qt was
            installed.</para>
            <para>See also removeLibraryPath(), libraryPaths(), and
            setLibraryPaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.RemoveLibraryPath(System.String)">
            <summary>
            <para>Removes path from the library path list. If path is empty or not
            in the path list, the list is not changed.</para>
            <para>See also addLibraryPath(), libraryPaths(), and
            setLibraryPaths().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.InstallTranslator(QtCore.QTranslator)">
            <summary>
            <para>Adds the translation file translationFile to the list of
            translation files to be used for translations.</para>
            <para>Multiple translation files can be installed. Translations are
            searched for in the reverse order in which they were installed, so the most
            recently installed translation file is searched first and the first
            translation file installed is searched last. The search stops as soon as a
            translation containing a matching string is found.</para>
            <para>Installing or removing a QTranslator, or changing an installed
            QTranslator generates a LanguageChange event for the QCoreApplication
            instance. A QApplication instance will propagate the event to all toplevel
            windows, where a reimplementation of changeEvent can re-translate the user
            interface by passing user-visible strings via the tr() function to the
            respective property setters. User-interface classes generated by Qt
            Designer provide a retranslateUi() function that can be called.</para>
            <para>The function returns true on success and false on failure.</para>
            <para>See also removeTranslator(), translate(), QTranslator::load(),
            and Dynamic Translation.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.RemoveTranslator(QtCore.QTranslator)">
            <summary>
            <para>Removes the translation file translationFile from the list of
            translation files used by this application. (It does not delete the
            translation file from the file system.)</para>
            <para>The function returns true on success and false on failure.</para>
            <para>See also installTranslator(), translate(), and
            QObject::tr().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Translate(System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Returns the translation text for sourceText, by querying the
            installed translation files. The translation files are searched from the
            most recently installed file back to the first installed file.</para>
            <para>QObject::tr() provides this functionality more
            conveniently.</para>
            <para>context is typically a class name (e.g., &quot;MyDialog&quot;)
            and sourceText is either English text or a short identifying text.</para>
            <para>disambiguation is an identifying string, for when the same
            sourceText is used in different roles within the same context. By default,
            it is null.</para>
            <para>See the QTranslator and QObject::tr() documentation for more
            information about contexts, disambiguations and comments.</para>
            <para>n is used in conjunction with %n to support plural forms. See
            QObject::tr() for details.</para>
            <para>If none of the translation files contain a translation for
            sourceText in context, this function returns a QString equivalent of
            sourceText.</para>
            <para>This function is not virtual. You can use alternative translation
            techniques by subclassing QTranslator.</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will most likely
            result in crashes or other undesirable behavior.</para>
            <para>Note: This function is reentrant.</para>
            <para>See also QObject::tr() and installTranslator().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Flush">
            <summary>
            <para>Flushes the platform specific event queues.</para>
            <para>If you are doing graphical changes inside a loop that does not
            return to the event loop on asynchronous window systems like X11 or double
            buffered window systems like Quartz (OS X and iOS), and you want to
            visualize these changes immediately (e.g. Splash Screens), call this
            function.</para>
            <para>See also sendPostedEvents().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.Quit">
            <summary>
            <para>Tells the application to exit with return code 0 (success).
            Equivalent to calling QCoreApplication::exit(0).</para>
            <para>It's common to connect the QApplication::lastWindowClosed()
            signal to quit(), and you also often connect e.g.
            QAbstractButton::clicked() or signals in QAction, QMenu, or QMenuBar to
            it.</para>
            <para>Example:</para>
            <para>QPushButton *quitButton = new
            QPushButton(&quot;Quit&quot;);</para>
            <para>connect(quitButton, SIGNAL(clicked()), &amp;app,
            SLOT(quit()));</para>
            <para>See also exit(), aboutToQuit(), and
            QApplication::lastWindowClosed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.QAddPostRoutine(QtCore.QtCleanUpFunction)">
            <summary>
            <para>Adds a global routine that will be called from the
            QCoreApplication destructor. This function is normally used to add cleanup
            routines for program-wide functionality.</para>
            <para>The cleanup routines are called in the reverse order of their
            addition.</para>
            <para>The function specified by ptr should take no arguments and should
            return nothing. For example:</para>
            <para>static int *global_ptr = 0;</para>
            <para></para>
            <para>static void cleanup_ptr()</para>
            <para>{</para>
            <para>    delete [] global_ptr;</para>
            <para>    global_ptr = 0;</para>
            <para>}</para>
            <para></para>
            <para>void init_ptr()</para>
            <para>{</para>
            <para>    global_ptr = new int[100];      // allocate data</para>
            <para>    qAddPostRoutine(cleanup_ptr);   // delete later</para>
            <para>}</para>
            <para>Note that for an application- or module-wide cleanup,
            qaddPostRoutine() is often not suitable. For example, if the program is
            split into dynamically loaded modules, the relevant module may be unloaded
            long before the QCoreApplication destructor is called. In such cases, if
            using qaddPostRoutine() is still desirable, qRemovePostRoutine() can be
            used to prevent a routine from being called by the QCoreApplication
            destructor. For example, if that routine was called before the module was
            unloaded.</para>
            <para>For modules and libraries, using a reference-counted
            initialization manager or Qt's parent-child deletion mechanism may be
            better. Here is an example of a private class that uses the parent-child
            mechanism to call a cleanup function at the right time:</para>
            <para>class MyPrivateInitStuff : public QObject</para>
            <para>{</para>
            <para>public:</para>
            <para>    static MyPrivateInitStuff *initStuff(QObject *parent)</para>
            <para>    {</para>
            <para>        if (!p)</para>
            <para>            p = new MyPrivateInitStuff(parent);</para>
            <para>        return p;</para>
            <para>    }</para>
            <para></para>
            <para>    ~MyPrivateInitStuff()</para>
            <para>    {</para>
            <para>        // cleanup goes here</para>
            <para>    }</para>
            <para></para>
            <para>private:</para>
            <para>    MyPrivateInitStuff(QObject *parent)</para>
            <para>        : QObject(parent)</para>
            <para>    {</para>
            <para>        // initialization goes here</para>
            <para>    }</para>
            <para></para>
            <para>    MyPrivateInitStuff *p;</para>
            <para>};</para>
            <para>By selecting the right parent object, this can often be made to
            clean up the module's data at the right moment.</para>
            <para>See also qRemovePostRoutine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCoreApplication.QRemovePostRoutine(QtCore.QtCleanUpFunction)">
            <summary>
            <para>Removes the cleanup routine specified by ptr from the list of
            routines called by the QCoreApplication destructor. The routine must have
            been previously added to the list by a call to qAddPostRoutine(), otherwise
            this function has no effect.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qAddPostRoutine().</para>
            </summary>
        </member>
        <member name="E:QtCore.QCoreApplication.AboutToQuit">
            <summary>
            <para>This signal is emitted when the application is about to quit the main event loop, e.g. when the event loop level drops to zero. This may happen either after a call to quit() from inside the application or when the users shuts down the entire desktop session.</para>
            <para>The signal is particularly useful if your application has to do some last-second cleanup. Note that no user interaction is possible in this state.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also quit().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.OrganizationDomain">
            <summary>
            <para>This property holds the Internet domain of the organization that
            wrote this application.</para>
            <para>The value is used by the QSettings class when it is constructed
            using the empty constructor. This saves having to repeat this information
            each time a QSettings object is created.</para>
            <para>On Mac, QSettings uses organizationDomain() as the organization
            if it's not an empty string; otherwise it uses organizationName(). On all
            other platforms, QSettings uses organizationName() as the
            organization.</para>
            <para>See also organizationName, applicationName, and
            applicationVersion.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.OrganizationName">
            <summary>
            <para>This property holds the name of the organization that wrote this
            application.</para>
            <para>The value is used by the QSettings class when it is constructed
            using the empty constructor. This saves having to repeat this information
            each time a QSettings object is created.</para>
            <para>On Mac, QSettings uses organizationDomain() as the organization
            if it's not an empty string; otherwise it uses organizationName(). On all
            other platforms, QSettings uses organizationName() as the
            organization.</para>
            <para>On BlackBerry this property is read-only. It is obtained from the
            BAR application descriptor file.</para>
            <para>See also organizationDomain and applicationName.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ApplicationName">
            <summary>
            <para>This property holds the name of this application.</para>
            <para>The value is used by the QSettings class when it is constructed
            using the empty constructor. This saves having to repeat this information
            each time a QSettings object is created.</para>
            <para>If not set, the application name defaults to the executable name
            (since 5.0).</para>
            <para>On BlackBerry this property is read-only. It is obtained from the
            BAR application descriptor file.</para>
            <para>See also organizationName, organizationDomain,
            applicationVersion, and applicationFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ApplicationVersion">
            <summary>
            <para>This property holds the version of this application.</para>
            <para>On BlackBerry this property is read-only. It is obtained from the
            BAR application descriptor file.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also applicationName, organizationName, and
            organizationDomain.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.SetuidAllowed">
            <summary>
            <para>Returns true if the application is allowed to run setuid on UNIX
            platforms.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also QCoreApplication::setSetuidAllowed().</para>
            <para></para>
            <para>Allows the application to run setuid on UNIX platforms if allow
            is true.</para>
            <para>If allow is false (the default) and Qt detects the application is
            running with an effective user id different than the real user id, the
            application will be aborted when a QCoreApplication instance is
            created.</para>
            <para>Qt is not an appropriate solution for setuid programs due to its
            large attack surface. However some applications may be required to run in
            this manner for historical reasons. This flag will prevent Qt from aborting
            the application when this is detected, and must be set before a
            QCoreApplication instance is created.</para>
            <para>Note: It is strongly recommended not to enable this option since
            it introduces security risks.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also isSetuidAllowed().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.EventDispatcher">
            <summary>
            <para>Returns a pointer to the event dispatcher object for the main
            thread. If no event dispatcher exists for the thread, this function returns
            0.</para>
            <para>See also setEventDispatcher().</para>
            <para></para>
            <para>Sets the event dispatcher for the main thread to eventDispatcher.
            This is only possible as long as there is no event dispatcher installed
            yet. That is, before QCoreApplication has been instantiated. This method
            takes ownership of the object.</para>
            <para>See also eventDispatcher().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.LibraryPaths">
            <summary>
            <para>Returns a list of paths that the application will search when
            dynamically loading libraries.</para>
            <para>The return value of this function may change when a
            QCoreApplication is created. It is not recommended to call it before
            creating a QCoreApplication. The directory of the application executable
            (not the working directory) is part of the list if it is known. In order to
            make it known a QCoreApplication has to be constructed as it will use
            argv[0] to find it.</para>
            <para>Qt provides default library paths, but they can also be set using
            a qt.conf file. Paths specified in this file will override default values.
            Note that if the qt.conf file is in the directory of the application
            executable, it may not be found until a QCoreApplication is created. If it
            is not found when calling this function, the default library paths will be
            used.</para>
            <para>The list will include the installation directory for plugins if
            it exists (the default installation directory for plugins is
            INSTALL/plugins, where INSTALL is the directory where Qt was installed).
            The colon separated entries of the QT_PLUGIN_PATH environment variable are
            always added. The plugin installation directory (and its existence) may
            change when the directory of the application executable becomes
            known.</para>
            <para>If you want to iterate over the list, you can use the foreach
            pseudo-keyword:</para>
            <para>foreach (const QString &amp;path, app.libraryPaths())</para>
            <para>    do_something(path);</para>
            <para>See also setLibraryPaths(), addLibraryPath(),
            removeLibraryPath(), QLibrary, and How to Create Qt Plugins.</para>
            <para></para>
            <para>Sets the list of directories to search when loading libraries to
            paths. All existing paths will be deleted and the path list will consist of
            the paths given in paths.</para>
            <para>See also libraryPaths(), addLibraryPath(), removeLibraryPath(),
            and QLibrary.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.QuitLockEnabled">
            <summary>
            <para>Returns true if the use of the QEventLoopLocker feature can cause
            the application to quit, otherwise returns false.</para>
            <para>See also QEventLoopLocker.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.Arguments">
            <summary>
            <para>Returns the list of command-line arguments.</para>
            <para>Usually arguments().at(0) is the program name, arguments().at(1)
            is the first argument, and arguments().last() is the last argument. See the
            note below about Windows.</para>
            <para>Calling this function is slow - you should store the result in a
            variable when parsing the command line.</para>
            <para>Warning: On Unix, this list is built from the argc and argv
            parameters passed to the constructor in the main() function. The
            string-data in argv is interpreted using QString::fromLocal8Bit(); hence it
            is not possible to pass, for example, Japanese command line arguments on a
            system that runs in a Latin1 locale. Most modern Unix systems do not have
            this limitation, as they are Unicode-based.</para>
            <para>On Windows, the list is built from the argc and argv parameters
            only if modified argv/argc parameters are passed to the constructor. In
            that case, encoding problems might occur.</para>
            <para>Otherwise, the arguments() are constructed from the return value
            of GetCommandLine(). As a result of this, the string given by
            arguments().at(0) might not be the program name on Windows, depending on
            how the application was started.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also applicationFilePath() and QCommandLineParser.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.Instance">
            <summary>
            <para>Returns a pointer to the application's QCoreApplication (or
            QApplication) instance.</para>
            <para>If no instance has been allocated, null is returned.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.HasPendingEvents">
            <summary>
            <para>This function returns true if there are pending events; otherwise
            returns false. Pending events can be either from the window system or
            posted events using postEvent().</para>
            <para>Note: this function is not thread-safe. It may only be called in
            the main thread and only if there are no other threads running in the
            application (including threads Qt starts for its own purposes).</para>
            <para>See also QAbstractEventDispatcher::hasPendingEvents().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.StartingUp">
            <summary>
            <para>Returns true if an application object has not been created yet;
            otherwise returns false.</para>
            <para>See also closingDown().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ClosingDown">
            <summary>
            <para>Returns true if the application objects are being destroyed;
            otherwise returns false.</para>
            <para>See also startingUp().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ApplicationDirPath">
            <summary>
            <para>Returns the directory that contains the application
            executable.</para>
            <para>For example, if you have installed Qt in the C:\Qt directory, and
            you run the regexp example, this function will return
            &quot;C:/Qt/examples/tools/regexp&quot;.</para>
            <para>On OS X and iOS this will point to the directory actually
            containing the executable, which may be inside of an application bundle (if
            the application is bundled).</para>
            <para>Warning: On Linux, this function will try to get the path from
            the /proc file system. If that fails, it assumes that argv[0] contains the
            absolute file name of the executable. The function also assumes that the
            current directory has not been changed by the application.</para>
            <para>See also applicationFilePath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ApplicationFilePath">
            <summary>
            <para>Returns the file path of the application executable.</para>
            <para>For example, if you have installed Qt in the /usr/local/qt
            directory, and you run the regexp example, this function will return
            &quot;/usr/local/qt/examples/tools/regexp/regexp&quot;.</para>
            <para>Warning: On Linux, this function will try to get the path from
            the /proc file system. If that fails, it assumes that argv[0] contains the
            absolute file name of the executable. The function also assumes that the
            current directory has not been changed by the application.</para>
            <para>See also applicationDirPath().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCoreApplication.ApplicationPid">
            <summary>
            <para>Returns the current process ID for the application.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QCeil(System.Double)">
            <summary>
            <para>Return the ceiling of the value v.</para>
            <para>The ceiling is the smallest integer that is not less than v. For
            example, if v is 41.2, then the ceiling is 42.</para>
            <para>See also qFloor().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QFloor(System.Double)">
            <summary>
            <para>Return the floor of the value v.</para>
            <para>The floor is the largest integer that is not greater than v. For
            example, if v is 41.2, then the floor is 41.</para>
            <para>See also qCeil().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QFabs(System.Double)">
            <summary>
            <para>Returns the absolute value of v as a qreal.</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QSin(System.Double)">
            <summary>
            <para>Returns the sine of the angle v in radians.</para>
            <para>See also qCos() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QCos(System.Double)">
            <summary>
            <para>Returns the cosine of an angle v in radians.</para>
            <para>See also qSin() and qTan().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QTan(System.Double)">
            <summary>
            <para>Returns the tangent of an angle v in radians.</para>
            <para>See also qSin() and qCos().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QAcos(System.Double)">
            <summary>
            <para>Returns the arccosine of v as an angle in radians. Arccosine is
            the inverse operation of cosine.</para>
            <para>See also qAtan(), qAsin(), and qCos().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QAsin(System.Double)">
            <summary>
            <para>Returns the arcsine of v as an angle in radians. Arcsine is the
            inverse operation of sine.</para>
            <para>See also qSin(), qAtan(), and qAcos().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QAtan(System.Double)">
            <summary>
            <para>Returns the arctangent of v as an angle in radians. Arctangent is
            the inverse operation of tangent.</para>
            <para>See also qTan(), qAcos(), and qAsin().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QAtan2(System.Double,System.Double)">
            <summary>
            <para>Returns the arctangent of a point specified by the coordinates y
            and x. This function will return the angle (argument) of that point.</para>
            <para>See also qAtan().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QSqrt(System.Double)">
            <summary>
            <para>Returns the square root of v. This function returns a NaN if v is
            a negative number.</para>
            <para>See also qPow().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QLn(System.Double)">
            <summary>
            <para>Returns the natural logarithm of v. Natural logarithm uses base
            e.</para>
            <para>See also qExp().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QExp(System.Double)">
            <summary>
            <para>Returns the exponential function of e to the power of v.</para>
            <para>See also qLn().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QPow(System.Double,System.Double)">
            <summary>
            <para>Returns the value of x raised to the power of y. That is, x is
            the base and y is the exponent.</para>
            <para>See also qSqrt().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QDegreesToRadians(System.Single)">
            <summary>
            <para>This function converts the degrees in float to radians.</para>
            <para>Example:</para>
            <para>float degrees = 180.0f</para>
            <para>float radians = qDegreesToRadians(degrees)</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qRadiansToDegrees().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QDegreesToRadians(System.Double)">
            <summary>
            <para>This function converts the degrees in double to radians.</para>
            <para>Example:</para>
            <para>double degrees = 180.0</para>
            <para>double radians = qDegreesToRadians(degrees)</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qRadiansToDegrees().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QRadiansToDegrees(System.Single)">
            <summary>
            <para>This function converts the radians in float to degrees.</para>
            <para>Example:</para>
            <para>float radians = float(M_PI)</para>
            <para>float degrees = qRadiansToDegrees(radians)</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qDegreesToRadians().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QRadiansToDegrees(System.Double)">
            <summary>
            <para>This function converts the radians in double to degrees.</para>
            <para>Example:</para>
            <para>double radians = M_PI</para>
            <para>double degrees = qRadiansToDegrees(radians)</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also qDegreesToRadians().</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QNextPowerOfTwo(System.UInt32)">
            <summary>
            <para>This function returns the nearest power of two greater than
            value. For 0 it returns 1, and for values larger than or equal to 2^31 it
            returns 0.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QNextPowerOfTwo(System.UInt64)">
            <summary>
            <para>This function returns the nearest power of two greater than
            value. For 0 it returns 1, and for values larger than or equal to 2^63 it
            returns 0.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QNextPowerOfTwo(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function returns the nearest power of two greater than
            value. For negative values it returns 0.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.qmath.QNextPowerOfTwo(System.Int64)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function returns the nearest power of two greater than
            value. For negative values it returns 0.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaMethod">
            <summary>
            <para>The QMetaMethod class provides meta-data about a member
            function.</para>
            </summary>
            <remarks>
            <para>A QMetaMethod has a methodType(), a methodSignature(), a list of
            parameterTypes() and parameterNames(), a return typeName(), a tag(), and an
            access() specifier. You can use invoke() to invoke the method on an
            arbitrary QObject.</para>
            <para></para>
            <para>See also QMetaObject, QMetaEnum, QMetaProperty, and Qt's Property
            System.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMetaMethod.ReturnType">
            <summary>
            <para>Returns the return type of this method.</para>
            <para>The return value is one of the types that are registered with
            QMetaType, or QMetaType::UnknownType if the type is not registered.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also parameterType(), QMetaType, and typeName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.ParameterType(System.Int32)">
            <summary>
            <para>Returns the type of the parameter at the given index.</para>
            <para>The return value is one of the types that are registered with
            QMetaType, or QMetaType::UnknownType if the type is not registered.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also parameterCount(), returnType(), and QMetaType.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <!-- Badly formed XML comment ignored for member "M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)" -->
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload always invokes this method using the connection
            type Qt::AutoConnection.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.Qt.ConnectionType,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload can be used if the return value of the member is of
            no interest.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.Invoke(QtCore.QObject,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This function overloads invoke().</para>
            <para>This overload invokes this method using the connection type
            Qt::AutoConnection and ignores return values.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericReturnArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>Invokes this method on a Q_GADGET. Returns true if the member
            could be invoked. Returns false if there is no such member or the
            parameters did not match.</para>
            <para>The pointer gadget must point to an instance of the gadget
            class.</para>
            <para>The invocation is always synchronous.</para>
            <para>The return value of this method call is placed in returnValue.
            You can pass up to ten arguments (val0, val1, val2, val3, val4, val5, val6,
            val7, val8, and val9) to this method call.</para>
            <para>Warning: this method will not test the validity of the arguments:
            gadget must be an instance of the class of the QMetaObject of which this
            QMetaMethod has been constructed with. The arguments must have the same
            type as the ones expected by the method, else, the behavior is
            undefined.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Q_ARG(), Q_RETURN_ARG(), qRegisterMetaType(), and
            QMetaObject::invokeMethod().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.InvokeOnGadget(System.IntPtr,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument,QtCore.QGenericArgument)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This overload invokes this method for a gadget and ignores return
            values.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.op_Equality(QtCore.QMetaMethod,QtCore.QMetaMethod)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if method m1 is equal to method m2, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaMethod.op_Inequality(QtCore.QMetaMethod,QtCore.QMetaMethod)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if method m1 is not equal to method m2, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.MethodSignature">
            <summary>
            <para>Returns the signature of this method (e.g.,
            setValue(double)).</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also parameterTypes() and parameterNames().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.Name">
            <summary>
            <para>Returns the name of this method.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also methodSignature() and parameterCount().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.TypeName">
            <summary>
            <para>Returns the return type name of this method.</para>
            <para>See also returnType() and QMetaType::type().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.ParameterCount">
            <summary>
            <para>Returns the number of parameters of this method.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also parameterType() and parameterNames().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.Tag">
            <summary>
            <para>Returns the tag associated with this method.</para>
            <para>Tags are special macros recognized by moc that make it possible
            to add extra information about a method.</para>
            <para>Tag information can be added in the following way in the function
            declaration:</para>
            <para>#ifndef Q_MOC_RUN</para>
            <para>// define the tag text</para>
            <para>#  define THISISTESTTAG</para>
            <para>#endif</para>
            <para>...</para>
            <para>private slots:</para>
            <para>    THISISTESTTAG void testFunc();</para>
            <para>and the information can be accessed by using:</para>
            <para>MainWindow win;</para>
            <para>win.show();</para>
            <para></para>
            <para>int functionIndex =
            win.metaObject()-&gt;indexOfSlot(&quot;testFunc()&quot;);</para>
            <para>QMetaMethod mm = metaObject()-&gt;method(functionIndex);</para>
            <para>qDebug() &lt;&lt; mm.tag(); // prints THISISTESTTAG</para>
            <para>For the moment, moc will extract and record all tags, but it will
            not handle any of them specially.</para>
            <para>Note: Since Qt 5.0, moc expands preprocessor macros, so it is
            necessary to surround the definition with #ifndef Q_MOC_RUN, as shown in
            the example above. This was not required in Qt 4. The code as shown above
            works with Qt 4 too.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.access">
            <summary>
            <para>Returns the access specification of this method (private,
            protected, or public).</para>
            <para>Signals are always protected, meaning that you can only emit them
            from the class or from a subclass.</para>
            <para>See also methodType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.methodType">
            <summary>
            <para>Returns the type of this method (signal, slot, or method).</para>
            <para>See also access().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.MethodIndex">
            <summary>
            <para>Returns this method's index.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.Revision">
            <summary>
            <para>Returns the method revision if one was specified by Q_REVISION,
            otherwise returns 0.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaMethod.IsValid">
            <summary>
            <para>Returns true if this method is valid (can be introspected and
            invoked), otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaMethod.Access">
            <summary>
            <para>This enum describes the access level of a method, following the
            conventions used in C++.</para>
            </summary>
        </member>
        <member name="F:QtCore.QMetaMethod.MethodType.Method">
            <summary>The function is a plain member function.</summary>
        </member>
        <member name="F:QtCore.QMetaMethod.MethodType.Signal">
            <summary>The function is a signal.</summary>
        </member>
        <member name="F:QtCore.QMetaMethod.MethodType.Slot">
            <summary>The function is a slot.</summary>
        </member>
        <member name="F:QtCore.QMetaMethod.MethodType.Constructor">
            <summary>The function is a constructor.</summary>
        </member>
        <member name="T:QtCore.QMetaEnum">
            <summary>
            <para>The QMetaEnum class provides meta-data about an
            enumerator.</para>
            </summary>
            <remarks>
            <para>Use name() for the enumerator's name. The enumerator's keys
            (names of each enumerated item) are returned by key(); use keyCount() to
            find the number of keys. isFlag() returns whether the enumerator is meant
            to be used as a flag, meaning that its values can be combined using the OR
            operator.</para>
            <para>The conversion functions keyToValue(), valueToKey(),
            keysToValue(), and valueToKeys() allow conversion between the integer
            representation of an enumeration or set value and its literal
            representation. The scope() function returns the class scope this
            enumerator was declared in.</para>
            <para></para>
            <para>See also QMetaObject, QMetaMethod, and QMetaProperty.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMetaEnum.Key(System.Int32)">
            <summary>
            <para>Returns the key with the given index, or 0 if no such key
            exists.</para>
            <para>See also keyCount(), value(), and valueToKey().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.Value(System.Int32)">
            <summary>
            <para>Returns the value with the given index; or returns -1 if there is
            no such value.</para>
            <para>See also keyCount(), key(), and keyToValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.KeyToValue(System.String,System.Boolean@)">
            <summary>
            <para>Returns the integer value of the given enumeration key, or -1 if
            key is not defined.</para>
            <para>If key is not defined, *ok is set to false; otherwise *ok is set
            to true.</para>
            <para>For flag types, use keysToValue().</para>
            <para>See also valueToKey(), isFlag(), and keysToValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.ValueToKey(System.Int32)">
            <summary>
            <para>Returns the string that is used as the name of the given
            enumeration value, or 0 if value is not defined.</para>
            <para>For flag types, use valueToKeys().</para>
            <para>See also isFlag() and valueToKeys().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.KeysToValue(System.String,System.Boolean@)">
            <summary>
            <para>Returns the value derived from combining together the values of
            the keys using the OR operator, or -1 if keys is not defined. Note that the
            strings in keys must be '|'-separated.</para>
            <para>If keys is not defined, *ok is set to false; otherwise *ok is set
            to true.</para>
            <para>See also isFlag(), valueToKey(), and valueToKeys().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.ValueToKeys(System.Int32)">
            <summary>
            <para>Returns a byte array of '|'-separated keys that represents the
            given value.</para>
            <para>See also isFlag(), valueToKey(), and keysToValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.KeyToValue(System.String)">
            <summary>
            <para>Returns the integer value of the given enumeration key, or -1 if
            key is not defined.</para>
            <para>If key is not defined, *ok is set to false; otherwise *ok is set
            to true.</para>
            <para>For flag types, use keysToValue().</para>
            <para>See also valueToKey(), isFlag(), and keysToValue().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaEnum.KeysToValue(System.String)">
            <summary>
            <para>Returns the value derived from combining together the values of
            the keys using the OR operator, or -1 if keys is not defined. Note that the
            strings in keys must be '|'-separated.</para>
            <para>If keys is not defined, *ok is set to false; otherwise *ok is set
            to true.</para>
            <para>See also isFlag(), valueToKey(), and valueToKeys().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaEnum.Name">
            <summary>
            <para>Returns the name of the enumerator (without the scope).</para>
            <para>For example, the Qt::AlignmentFlag enumeration has AlignmentFlag
            as the name and Qt as the scope.</para>
            <para>See also isValid() and scope().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaEnum.IsFlag">
            <summary>
            <para>Returns true if this enumerator is used as a flag; otherwise
            returns false.</para>
            <para>When used as flags, enumerators can be combined using the OR
            operator.</para>
            <para>See also keysToValue() and valueToKeys().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaEnum.KeyCount">
            <summary>
            <para>Returns the number of keys.</para>
            <para>See also key().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaEnum.Scope">
            <summary>
            <para>Returns the scope this enumerator was declared in.</para>
            <para>For example, the Qt::AlignmentFlag enumeration has Qt as the
            scope and AlignmentFlag as the name.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaEnum.IsValid">
            <summary>
            <para>Returns true if this enum is valid (has a name); otherwise
            returns false.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaProperty">
            <summary>
            <para>The QMetaProperty class provides meta-data about a
            property.</para>
            </summary>
            <remarks>
            <para>Property meta-data is obtained from an object's meta-object. See
            QMetaObject::property() and QMetaObject::propertyCount() for
            details.</para>
            <para></para>
            <para>Property Meta-Data</para>
            <para>A property has a name() and a type(), as well as various
            attributes that specify its behavior: isReadable(), isWritable(),
            isDesignable(), isScriptable(), revision(), and isStored().</para>
            <para>If the property is an enumeration, isEnumType() returns true; if
            the property is an enumeration that is also a flag (i.e. its values can be
            combined using the OR operator), isEnumType() and isFlagType() both return
            true. The enumerator for these types is available from enumerator().</para>
            <para>The property's values are set and retrieved with read(), write(),
            and reset(); they can also be changed through QObject's set and get
            functions. See QObject::setProperty() and QObject::property() for
            details.</para>
            <para></para>
            <para>Copying and Assignment</para>
            <para>QMetaProperty objects can be copied by value. However, each copy
            will refer to the same underlying property meta-data.</para>
            <para></para>
            <para>See also QMetaObject, QMetaEnum, QMetaMethod, and Qt's Property
            System.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMetaProperty.IsDesignable(QtCore.QObject)">
            <summary>
            <para>Returns true if this property is designable for the given object;
            otherwise returns false.</para>
            <para>If no object is given, the function returns false if the
            Q_PROPERTY()'s DESIGNABLE attribute is false; otherwise returns true (if
            the attribute is true or is a function or expression).</para>
            <para>See also isScriptable() and isStored().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.IsScriptable(QtCore.QObject)">
            <summary>
            <para>Returns true if the property is scriptable for the given object;
            otherwise returns false.</para>
            <para>If no object is given, the function returns false if the
            Q_PROPERTY()'s SCRIPTABLE attribute is false; otherwise returns true (if
            the attribute is true or is a function or expression).</para>
            <para>See also isDesignable() and isStored().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.IsStored(QtCore.QObject)">
            <summary>
            <para>Returns true if the property is stored for object; otherwise
            returns false.</para>
            <para>If no object is given, the function returns false if the
            Q_PROPERTY()'s STORED attribute is false; otherwise returns true (if the
            attribute is true or is a function or expression).</para>
            <para>See also isDesignable() and isScriptable().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.IsEditable(QtCore.QObject)">
            <summary>
            <para>Returns true if the property is editable for the given object;
            otherwise returns false.</para>
            <para>If no object is given, the function returns false if the
            Q_PROPERTY()'s EDITABLE attribute is false; otherwise returns true (if the
            attribute is true or is a function or expression).</para>
            <para>See also isDesignable(), isScriptable(), and isStored().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.IsUser(QtCore.QObject)">
            <summary>
            <para>Returns true if this property is designated as the USER property,
            i.e., the one that the user can edit for object or that is significant in
            some other way. Otherwise it returns false. e.g., the text property is the
            USER editable property of a QLineEdit.</para>
            <para>If object is null, the function returns false if the
            Q_PROPERTY()'s USER attribute is false. Otherwise it returns true.</para>
            <para>See also QMetaObject::userProperty(), isDesignable(), and
            isScriptable().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.NotifySignal">
            <summary>
            <para>Returns the QMetaMethod instance of the property change notifying
            signal if one was specified, otherwise returns an invalid
            QMetaMethod.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also hasNotifySignal().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.NotifySignalIndex">
            <summary>
            <para>Returns the index of the property change notifying signal if one
            was specified, otherwise returns -1.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also hasNotifySignal().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.Read(QtCore.QObject)">
            <summary>
            <para>Reads the property's value from the given object. Returns the
            value if it was able to read it; otherwise returns an invalid
            variant.</para>
            <para>See also write(), reset(), and isReadable().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.Write(QtCore.QObject,QtCore.QVariant)">
            <summary>
            <para>Writes value as the property's value to the given object. Returns
            true if the write succeeded; otherwise returns false.</para>
            <para>See also read(), reset(), and isWritable().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.Reset(QtCore.QObject)">
            <summary>
            <para>Resets the property for the given object with a reset method.
            Returns true if the reset worked; otherwise returns false.</para>
            <para>Reset methods are optional; only a few properties support
            them.</para>
            <para>See also read() and write().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.ReadOnGadget(System.IntPtr)">
            <summary>
            <para>Reads the property's value from the given gadget. Returns the
            value if it was able to read it; otherwise returns an invalid
            variant.</para>
            <para>This function should only be used if this is a property of a
            Q_GADGET</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.WriteOnGadget(System.IntPtr,QtCore.QVariant)">
            <summary>
            <para>Writes value as the property's value to the given gadget. Returns
            true if the write succeeded; otherwise returns false.</para>
            <para>This function should only be used if this is a property of a
            Q_GADGET</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMetaProperty.ResetOnGadget(System.IntPtr)">
            <summary>
            <para>Resets the property for the given gadget with a reset method.
            Returns true if the reset worked; otherwise returns false.</para>
            <para>Reset methods are optional; only a few properties support
            them.</para>
            <para>This function should only be used if this is a property of a
            Q_GADGET</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.Name">
            <summary>
            <para>Returns this property's name.</para>
            <para>See also type() and typeName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.TypeName">
            <summary>
            <para>Returns the name of this property's type.</para>
            <para>See also type() and name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.Type">
            <summary>
            <para>Returns this property's type. The return value is one of the
            values of the QVariant::Type enumeration.</para>
            <para>See also userType(), typeName(), and name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.UserType">
            <summary>
            <para>Returns this property's user type. The return value is one of the
            values that are registered with QMetaType, or QMetaType::UnknownType if the
            type is not registered.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also type(), QMetaType, and typeName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.PropertyIndex">
            <summary>
            <para>Returns this property's index.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsReadable">
            <summary>
            <para>Returns true if this property is readable; otherwise returns
            false.</para>
            <para>See also isWritable(), read(), and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsWritable">
            <summary>
            <para>Returns true if this property is writable; otherwise returns
            false.</para>
            <para>See also isReadable() and write().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsResettable">
            <summary>
            <para>Returns true if this property can be reset to a default value;
            otherwise returns false.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsConstant">
            <summary>
            <para>Returns true if the property is constant; otherwise returns
            false.</para>
            <para>A property is constant if the Q_PROPERTY()'s CONSTANT attribute
            is set.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsFinal">
            <summary>
            <para>Returns true if the property is final; otherwise returns
            false.</para>
            <para>A property is final if the Q_PROPERTY()'s FINAL attribute is
            set.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsFlagType">
            <summary>
            <para>Returns true if the property's type is an enumeration value that
            is used as a flag; otherwise returns false.</para>
            <para>Flags can be combined using the OR operator. A flag type is
            implicitly also an enum type.</para>
            <para>See also isEnumType(), enumerator(), and
            QMetaEnum::isFlag().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsEnumType">
            <summary>
            <para>Returns true if the property's type is an enumeration value;
            otherwise returns false.</para>
            <para>See also enumerator() and isFlagType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.Enumerator">
            <summary>
            <para>Returns the enumerator if this property's type is an enumerator
            type; otherwise the returned value is undefined.</para>
            <para>See also isEnumType() and isFlagType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.HasNotifySignal">
            <summary>
            <para>Returns true if this property has a corresponding change notify
            signal; otherwise returns false.</para>
            <para>See also notifySignal().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.Revision">
            <summary>
            <para>Returns the property revision if one was specified by REVISION,
            otherwise returns 0.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaProperty.IsValid">
            <summary>
            <para>Returns true if this property is valid (readable); otherwise
            returns false.</para>
            <para>See also isReadable().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMetaClassInfo">
            <summary>
            <para>The QMetaClassInfo class provides additional information about a
            class.</para>
            </summary>
            <remarks>
            <para>Class information items are simple name--value pairs that are
            specified using Q_CLASSINFO() in the source code. The information can be
            retrieved using name() and value(). For example:</para>
            <para>class MyClass</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    Q_CLASSINFO(&quot;author&quot;, &quot;Sabrina
            Schweinsteiger&quot;)</para>
            <para>    Q_CLASSINFO(&quot;url&quot;,
            &quot;http://doc.moosesoft.co.uk/1.0/&quot;)</para>
            <para></para>
            <para>public:</para>
            <para>    ...</para>
            <para>};</para>
            <para>This mechanism is free for you to use in your Qt applications. Qt
            doesn't use it for any of its classes.</para>
            <para></para>
            <para>See also QMetaObject.</para>
            </remarks>
        </member>
        <member name="P:QtCore.QMetaClassInfo.Name">
            <summary>
            <para>Returns the name of this item.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMetaClassInfo.Value">
            <summary>
            <para>Returns the value of this item.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtCore.QMimeData" -->
        <member name="M:QtCore.QMimeData.#ctor">
            <summary>
            <para>Constructs a new MIME data object with no data in it.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.Data(System.String)">
            <summary>
            <para>Returns the data stored in the object in the format described by
            the MIME type specified by mimeType.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.SetData(System.String,QtCore.QByteArray)">
            <summary>
            <para>Sets the data associated with the MIME type given by mimeType to
            the specified data.</para>
            <para>For the most common types of data, you can call the higher-level
            functions setText(), setHtml(), setUrls(), setImageData(), and
            setColorData() instead.</para>
            <para>Note that if you want to use a custom data type in an item view
            drag and drop operation, you must register it as a Qt meta type, using the
            Q_DECLARE_METATYPE() macro, and implement stream operators for it. The
            stream operators must then be registered with the
            qRegisterMetaTypeStreamOperators() function.</para>
            <para>See also data(), hasFormat(), QMetaType, and
            qRegisterMetaTypeStreamOperators().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.RemoveFormat(System.String)">
            <summary>
            <para>Removes the data entry for mimeType in the object.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.HasFormat(System.String)">
            <summary>
            <para>Returns true if the object can return data for the MIME type
            specified by mimeType; otherwise returns false.</para>
            <para>For the most common types of data, you can call the higher-level
            functions hasText(), hasHtml(), hasUrls(), hasImage(), and hasColor()
            instead.</para>
            <para>See also formats(), setData(), and data().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.Clear">
            <summary>
            <para>Removes all the MIME type and data entries in the object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.RetrieveData(System.String,QtCore.QVariant.Type)">
            <summary>
            <para>Returns a variant with the given type containing data for the
            MIME type specified by mimeType. If the object does not support the MIME
            type or variant type given, a null variant is returned instead.</para>
            <para>This function is called by the general data() getter and by the
            convenience getters (text(), html(), urls(), imageData(), and colorData()).
            You can reimplement it if you want to store your data using a custom data
            structure (instead of a QByteArray, which is what setData() provides). You
            would then also need to reimplement hasFormat() and formats().</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeData.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.Text">
            <summary>
            <para>Returns a plain text (MIME type text/plain) representation of the
            data.</para>
            <para>See also setText(), hasText(), html(), and data().</para>
            <para></para>
            <para>Sets text as the plain text (MIME type text/plain) used to
            represent the data.</para>
            <para>See also text(), hasText(), setHtml(), and setData().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.Html">
            <summary>
            <para>Returns a string if the data stored in the object is HTML (MIME
            type text/html); otherwise returns an empty string.</para>
            <para>See also setHtml(), hasHtml(), and setData().</para>
            <para></para>
            <para>Sets html as the HTML (MIME type text/html) used to represent the
            data.</para>
            <para>See also html(), hasHtml(), setText(), and setData().</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QtCore.QMimeData.ImageData" -->
        <member name="P:QtCore.QMimeData.ColorData">
            <summary>
            <para>Returns a color if the data stored in the object represents a
            color (MIME type application/x-color); otherwise returns a null
            variant.</para>
            <para>A QVariant is used because QMimeData belongs to the Qt Core
            module, whereas QColor belongs to Qt GUI. To convert the QVariant to a
            QColor, simply use qvariant_cast(). For example:</para>
            <para>if (event-&gt;mimeData()-&gt;hasColor()) {</para>
            <para>    QColor color =
            qvariant_cast&lt;QColor&gt;(event-&gt;mimeData()-&gt;colorData());</para>
            <para>    ...</para>
            <para>}</para>
            <para>See also hasColor(), setColorData(), and data().</para>
            <para></para>
            <para>Sets the color data in the object to the given color.</para>
            <para>Colors correspond to the MIME type application/x-color.</para>
            <para>See also colorData(), hasColor(), and setData().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.HasUrls">
            <summary>
            <para>Returns true if the object can return a list of urls; otherwise
            returns false.</para>
            <para>URLs correspond to the MIME type text/uri-list.</para>
            <para>See also setUrls(), urls(), and hasFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.HasText">
            <summary>
            <para>Returns true if the object can return plain text (MIME type
            text/plain); otherwise returns false.</para>
            <para>See also setText(), text(), hasHtml(), and hasFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.HasHtml">
            <summary>
            <para>Returns true if the object can return HTML (MIME type text/html);
            otherwise returns false.</para>
            <para>See also setHtml(), html(), and hasFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.HasImage">
            <summary>
            <para>Returns true if the object can return an image; otherwise returns
            false.</para>
            <para>See also setImageData(), imageData(), and hasFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.HasColor">
            <summary>
            <para>Returns true if the object can return a color (MIME type
            application/x-color); otherwise returns false.</para>
            <para>See also setColorData(), colorData(), and hasFormat().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeData.Formats">
            <summary>
            <para>Returns a list of formats supported by the object. This is a list
            of MIME types for which the object can return suitable data. The formats in
            the list are in a priority order.</para>
            <para>For the most common types of data, you can call the higher-level
            functions hasText(), hasHtml(), hasUrls(), hasImage(), and hasColor()
            instead.</para>
            <para>See also hasFormat(), setData(), and data().</para>
            </summary>
        </member>
        <member name="T:QtCore.QObjectCleanupHandler">
            <summary>
            <para>The QObjectCleanupHandler class watches the lifetime of multiple
            QObjects.</para>
            </summary>
            <remarks>
            <para>A QObjectCleanupHandler is useful whenever you need to know when
            a number of QObjects that are owned by someone else have been deleted. This
            is important, for example, when referencing memory in an application that
            has been allocated in a shared library.</para>
            <para>To keep track of some QObjects, create a QObjectCleanupHandler,
            and add() the objects you are interested in. If you are no longer
            interested in tracking a particular object, use remove() to remove it from
            the cleanup handler. If an object being tracked by the cleanup handler gets
            deleted by someone else it will automatically be removed from the cleanup
            handler. You can delete all the objects in the cleanup handler with
            clear(), or by destroying the cleanup handler. isEmpty() returns true if
            the QObjectCleanupHandler has no objects to keep track of.</para>
            <para></para>
            <para>See also QPointer.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QObjectCleanupHandler.#ctor">
            <summary>
            <para>Constructs an empty QObjectCleanupHandler.</para>
            </summary>
        </member>
        <member name="M:QtCore.QObjectCleanupHandler.Add(QtCore.QObject)">
            <summary>
            <para>Adds object to this cleanup handler and returns the pointer to
            the object.</para>
            <para>See also remove().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObjectCleanupHandler.Remove(QtCore.QObject)">
            <summary>
            <para>Removes the object from this cleanup handler. The object will not
            be destroyed.</para>
            <para>See also add().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObjectCleanupHandler.Clear">
            <summary>
            <para>Deletes all objects in this cleanup handler. The cleanup handler
            becomes empty.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QObjectCleanupHandler.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QObjectCleanupHandler.IsEmpty">
            <summary>
            <para>Returns true if this cleanup handler is empty or if all objects
            in this cleanup handler have been destroyed; otherwise return false.</para>
            <para>See also add(), remove(), and clear().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSharedMemory">
            <summary>
            <para>The QSharedMemory class provides access to a shared memory
            segment.</para>
            </summary>
            <remarks>
            <para>QSharedMemory provides access to a shared memory segment by
            multiple threads and processes. It also provides a way for a single thread
            or process to lock the memory for exclusive access.</para>
            <para>When using this class, be aware of the following platform
            differences:</para>
            <para></para>
            <para>Windows: QSharedMemory does not &quot;own&quot; the shared memory
            segment. When all threads or processes that have an instance of
            QSharedMemory attached to a particular shared memory segment have either
            destroyed their instance of QSharedMemory or exited, the Windows kernel
            releases the shared memory segment automatically.</para>
            <para>Unix: QSharedMemory &quot;owns&quot; the shared memory segment.
            When the last thread or process that has an instance of QSharedMemory
            attached to a particular shared memory segment detaches from the segment by
            destroying its instance of QSharedMemory, the Unix kernel release the
            shared memory segment. But if that last thread or process crashes without
            running the QSharedMemory destructor, the shared memory segment survives
            the crash.</para>
            <para>HP-UX: Only one attach to a shared memory segment is allowed per
            process. This means that QSharedMemory should not be used across multiple
            threads in the same process in HP-UX.</para>
            <para></para>
            <para>Remember to lock the shared memory with lock() before reading
            from or writing to the shared memory, and remember to release the lock with
            unlock() after you are done.</para>
            <para>QSharedMemory automatically destroys the shared memory segment
            when the last instance of QSharedMemory is detached from the segment, and
            no references to the segment remain.</para>
            <para>Warning: QSharedMemory changes the key in a Qt-specific way,
            unless otherwise specified. Interoperation with non-Qt applications is
            achieved by first creating a default shared memory with QSharedMemory() and
            then setting a native key with setNativeKey(). When using native keys,
            shared memory is not protected against multiple accesses on it (e.g. unable
            to lock()) and a user-defined mechanism should be used to achieve a such
            protection.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSharedMemory.#ctor(QtCore.QObject)">
            <summary>
            <para>This function overloads QSharedMemory().</para>
            <para>Constructs a shared memory object with the given parent. The
            shared memory object's key is not set by the constructor, so the shared
            memory object does not have an underlying shared memory segment attached.
            The key must be set with setKey() or setNativeKey() before create() or
            attach() can be used.</para>
            <para>See also setKey().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a shared memory object with the given parent and with
            its key set to key. Because its key is set, its create() and attach()
            functions can be called.</para>
            <para>See also setKey(), create(), and attach().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.Create(System.Int32,QtCore.QSharedMemory.AccessMode)">
            <summary>
            <para>Creates a shared memory segment of size bytes with the key passed
            to the constructor, set with setKey() or set with setNativeKey(), then
            attaches to the new shared memory segment with the given access mode and
            returns true. If a shared memory segment identified by the key already
            exists, the attach operation is not performed and false is returned. When
            the return value is false, call error() to determine which error
            occurred.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.Attach(QtCore.QSharedMemory.AccessMode)">
            <summary>
            <para>Attempts to attach the process to the shared memory segment
            identified by the key that was passed to the constructor or to a call to
            setKey() or setNativeKey(). The access mode is ReadWrite by default. It can
            also be ReadOnly. Returns true if the attach operation is successful. If
            false is returned, call error() to determine which error occurred. After
            attaching the shared memory segment, a pointer to the shared memory can be
            obtained by calling data().</para>
            <para>See also isAttached(), detach(), and create().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.Detach">
            <summary>
            <para>Detaches the process from the shared memory segment. If this was
            the last process attached to the shared memory segment, then the shared
            memory segment is released by the system, i.e., the contents are destroyed.
            The function returns true if it detaches the shared memory segment. If it
            returns false, it usually means the segment either isn't attached, or it is
            locked by another process.</para>
            <para>See also attach() and isAttached().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.Unlock">
            <summary>
            <para>Releases the lock on the shared memory segment and returns true,
            if the lock is currently held by this process. If the segment is not
            locked, or if the lock is held by another process, nothing happens and
            false is returned.</para>
            <para>See also lock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSharedMemory.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.Key">
            <summary>
            <para>Returns the key assigned with setKey() to this shared memory, or
            a null key if no key has been assigned, or if the segment is using a
            nativeKey(). The key is the identifier used by Qt applications to identify
            the shared memory segment.</para>
            <para>You can find the native, platform specific, key used by the
            operating system by calling nativeKey().</para>
            <para>See also setKey() and setNativeKey().</para>
            <para></para>
            <para>Sets the platform independent key for this shared memory object.
            If key is the same as the current key, the function returns without doing
            anything.</para>
            <para>You can call key() to retrieve the platform independent key.
            Internally, QSharedMemory converts this key into a platform specific key.
            If you instead call nativeKey(), you will get the platform specific,
            converted key.</para>
            <para>If the shared memory object is attached to an underlying shared
            memory segment, it will detach from it before setting the new key. This
            function does not do an attach().</para>
            <para>See also key(), nativeKey(), and isAttached().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.NativeKey">
            <summary>
            <para>Returns the native, platform specific, key for this shared memory
            object. The native key is the identifier used by the operating system to
            identify the shared memory segment.</para>
            <para>You can use the native key to access shared memory segments that
            have not been created by Qt, or to grant shared memory access to non-Qt
            applications.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setKey() and setNativeKey().</para>
            <para></para>
            <para>Sets the native, platform specific, key for this shared memory
            object. If key is the same as the current native key, the function returns
            without doing anything. If all you want is to assign a key to a segment,
            you should call setKey() instead.</para>
            <para>You can call nativeKey() to retrieve the native key. If a native
            key has been assigned, calling key() will return a null string.</para>
            <para>If the shared memory object is attached to an underlying shared
            memory segment, it will detach from it before setting the new key. This
            function does not do an attach().</para>
            <para>The application will not be portable if you set a native
            key.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also nativeKey(), key(), and isAttached().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.Size">
            <summary>
            <para>Returns the size of the attached shared memory segment. If no
            shared memory segment is attached, 0 is returned.</para>
            <para>See also create() and attach().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.IsAttached">
            <summary>
            <para>Returns true if this process is attached to the shared memory
            segment.</para>
            <para>See also attach() and detach().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.Data">
            <summary>
            <para>Returns a pointer to the contents of the shared memory segment,
            if one is attached. Otherwise it returns null. Remember to lock the shared
            memory with lock() before reading from or writing to the shared memory, and
            remember to release the lock with unlock() after you are done.</para>
            <para>See also attach().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.ConstData">
            <summary>
            <para>Returns a const pointer to the contents of the shared memory
            segment, if one is attached. Otherwise it returns null. Remember to lock
            the shared memory with lock() before reading from or writing to the shared
            memory, and remember to release the lock with unlock() after you are
            done.</para>
            <para>See also attach() and create().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.Lock">
            <summary>
            <para>This is a semaphore that locks the shared memory segment for
            access by this process and returns true. If another process has locked the
            segment, this function blocks until the lock is released. Then it acquires
            the lock and returns true. If this function returns false, it means that
            you have ignored a false return from create() or attach(), that you have
            set the key with setNativeKey() or that QSystemSemaphore::acquire() failed
            due to an unknown system error.</para>
            <para>See also unlock(), data(), and
            QSystemSemaphore::acquire().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.Error">
            <summary>
            <para>Returns a value indicating whether an error occurred, and, if so,
            which error it was.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSharedMemory.ErrorString">
            <summary>
            <para>Returns a text description of the last error that occurred. If
            error() returns an error value, call this function to get a text string
            that describes the error.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="F:QtCore.QSharedMemory.AccessMode.ReadOnly">
            <summary>The shared memory segment is read-only. Writing to the shared memory segment is not allowed. An attempt to write to a shared memory segment created with ReadOnly causes the program to abort.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.AccessMode.ReadWrite">
            <summary>Reading and writing the shared memory segment are both allowed.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.PermissionDenied">
            <summary>The operation failed because the caller didn't have the required permissions.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.InvalidSize">
            <summary>A create operation failed because the requested size was invalid.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.KeyError">
            <summary>The operation failed because of an invalid key.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.AlreadyExists">
            <summary>A create() operation failed because a shared memory segment with the specified key already existed.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.NotFound">
            <summary>An attach() failed because a shared memory segment with the specified key could not be found.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.LockError">
            <summary>The attempt to lock() the shared memory segment failed because create() or attach() failed and returned false, or because a system error occurred in QSystemSemaphore::acquire().</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.OutOfResources">
            <summary>A create() operation failed because there was not enough memory available to fill the request.</summary>
        </member>
        <member name="F:QtCore.QSharedMemory.SharedMemoryError.UnknownError">
            <summary>Something else happened and it was bad.</summary>
        </member>
        <member name="T:QtCore.QSignalMapper">
            <summary>
            <para>The QSignalMapper class bundles signals from identifiable
            senders.</para>
            </summary>
            <remarks>
            <para>This class collects a set of parameterless signals, and re-emits
            them with integer, string or widget parameters corresponding to the object
            that sent the signal.</para>
            <para>The class supports the mapping of particular strings or integers
            with particular objects using setMapping(). The objects' signals can then
            be connected to the map() slot which will emit the mapped() signal with the
            string or integer associated with the original signalling object. Mappings
            can be removed later using removeMappings().</para>
            <para>Example: Suppose we want to create a custom widget that contains
            a group of buttons (like a tool palette). One approach is to connect each
            button's clicked() signal to its own custom slot; but in this example we
            want to connect all the buttons to a single slot and parameterize the slot
            by the button that was clicked.</para>
            <para>Here's the definition of a simple custom widget that has a single
            signal, clicked(), which is emitted with the text of the button that was
            clicked:</para>
            <para>class ButtonWidget : public QWidget</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para></para>
            <para>public:</para>
            <para>    ButtonWidget(const QStringList &amp;texts, QWidget *parent =
            0);</para>
            <para></para>
            <para>signals:</para>
            <para>    void clicked(const QString &amp;text);</para>
            <para></para>
            <para>private:</para>
            <para>    QSignalMapper *signalMapper;</para>
            <para>};</para>
            <para>The only function that we need to implement is the
            constructor:</para>
            <para>ButtonWidget::ButtonWidget(const QStringList &amp;texts, QWidget
            *parent)</para>
            <para>    : QWidget(parent)</para>
            <para>{</para>
            <para>    signalMapper = new QSignalMapper(this);</para>
            <para></para>
            <para>    QGridLayout *gridLayout = new QGridLayout;</para>
            <para>    for (int i = 0; i &lt; texts.size(); ++i) {</para>
            <para>        QPushButton *button = new QPushButton(texts[i]);</para>
            <para>        connect(button, SIGNAL(clicked()), signalMapper,
            SLOT(map()));</para>
            <para>        signalMapper-&gt;setMapping(button, texts[i]);</para>
            <para>        gridLayout-&gt;addWidget(button, i / 3, i % 3);</para>
            <para>    }</para>
            <para></para>
            <para>    connect(signalMapper, SIGNAL(mapped(QString)),</para>
            <para>            this, SIGNAL(clicked(QString)));</para>
            <para></para>
            <para>    setLayout(gridLayout);</para>
            <para>}</para>
            <para>A list of texts is passed to the constructor. A signal mapper is
            constructed and for each text in the list a QPushButton is created. We
            connect each button's clicked() signal to the signal mapper's map() slot,
            and create a mapping in the signal mapper from each button to the button's
            text. Finally we connect the signal mapper's mapped() signal to the custom
            widget's clicked() signal. When the user clicks a button, the custom widget
            will emit a single clicked() signal whose argument is the text of the
            button the user clicked.</para>
            <para></para>
            <para>See also QObject, QButtonGroup, and QActionGroup.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSignalMapper.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QSignalMapper with parent parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.SetMapping(QtCore.QObject,System.Int32)">
            <summary>
            <para>Adds a mapping so that when map() is signalled from the given
            sender, the signal mapped(id) is emitted.</para>
            <para>There may be at most one integer ID for each sender.</para>
            <para>See also mapping().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.SetMapping(QtCore.QObject,System.String)">
            <summary>
            <para>Adds a mapping so that when map() is signalled from the sender,
            the signal mapped(text ) is emitted.</para>
            <para>There may be at most one text for each sender.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.SetMapping(QtCore.QObject,QtCore.QObject)">
            <summary>
            <para>Adds a mapping so that when map() is signalled from the sender,
            the signal mapped(object ) is emitted.</para>
            <para>There may be at most one object for each sender.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.RemoveMappings(QtCore.QObject)">
            <summary>
            <para>Removes all mappings for sender.</para>
            <para>This is done automatically when mapped objects are
            destroyed.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.Mapping(System.Int32)">
            <summary>
            <para>Returns the sender QObject that is associated with the id.</para>
            <para>See also setMapping().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.Mapping(System.String)">
            <summary>
            <para>This function overloads mapping().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.Mapping(QtCore.QObject)">
            <summary>
            <para>This function overloads mapping().</para>
            <para>Returns the sender QObject that is associated with the
            object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.Map">
            <summary>
            <para>This slot emits signals based on which object sends signals to
            it.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.Map(QtCore.QObject)">
            <summary>
            <para>This slot emits signals based on the sender object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalMapper.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QSignalMapper.Mapped">
            <summary>
            <para>This signal is emitted when map() is signalled from an object that has an integer mapping set. The object's mapped integer is passed in i.</para>
            <para>See also setMapping().</para>
            </summary>
        </member>
        <member name="E:QtCore.QSignalMapper.MappedText">
            <summary>
            <para>This signal is emitted when map() is signalled from an object that has a string mapping set. The object's mapped string is passed in text.</para>
            <para>See also setMapping().</para>
            </summary>
        </member>
        <member name="E:QtCore.QSignalMapper.MappedObject">
            <summary>
            <para>This signal is emitted when map() is signalled from an object that has an object mapping set. The object provided by the map is passed in object.</para>
            <para>See also setMapping().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSocketNotifier">
            <summary>
            <para>The QSocketNotifier class provides support for monitoring
            activity on a file descriptor.</para>
            </summary>
            <remarks>
            <para>The QSocketNotifier makes it possible to integrate Qt's event
            loop with other event loops based on file descriptors. File descriptor
            action is detected in Qt's main event loop
            (QCoreApplication::exec()).</para>
            <para></para>
            <para>Once you have opened a device using a low-level (usually
            platform-specific) API, you can create a socket notifier to monitor the
            file descriptor. The socket notifier is enabled by default, i.e. it emits
            the activated() signal whenever a socket event corresponding to its type
            occurs. Connect the activated() signal to the slot you want to be called
            when an event corresponding to your socket notifier's type occurs.</para>
            <para>There are three types of socket notifiers: read, write, and
            exception. The type is described by the Type enum, and must be specified
            when constructing the socket notifier. After construction it can be
            determined using the type() function. Note that if you need to monitor both
            reads and writes for the same file descriptor, you must create two socket
            notifiers. Note also that it is not possible to install two socket
            notifiers of the same type (Read, Write, Exception) on the same
            socket.</para>
            <para>The setEnabled() function allows you to disable as well as enable
            the socket notifier. It is generally advisable to explicitly enable or
            disable the socket notifier, especially for write notifiers. A disabled
            notifier ignores socket events (the same effect as not creating the socket
            notifier). Use the isEnabled() function to determine the notifier's current
            status.</para>
            <para>Finally, you can use the socket() function to retrieve the socket
            identifier. Although the class is called QSocketNotifier, it is normally
            used for other types of devices than sockets. QTcpSocket and QUdpSocket
            provide notification through signals, so there is normally no need to use a
            QSocketNotifier on them.</para>
            <para></para>
            <para>Notes for Windows Users</para>
            <para>The socket passed to QSocketNotifier will become non-blocking,
            even if it was created as a blocking socket. The activated() signal is
            sometimes triggered by high general activity on the host, even if there is
            nothing to read. A subsequent read from the socket can then fail, the error
            indicating that there is no data available (e.g., WSAEWOULDBLOCK). This is
            an operating system limitation, and not a bug in QSocketNotifier.</para>
            <para>To ensure that the socket notifier handles read notifications
            correctly, follow these steps when you receive a notification:</para>
            <para></para>
            <para>Disable the notifier.</para>
            <para>Read data from the socket.</para>
            <para>Re-enable the notifier if you are interested in more data (such
            as after having written a new command to a remote server).</para>
            <para></para>
            <para>To ensure that the socket notifier handles write notifications
            correctly, follow these steps when you receive a notification:</para>
            <para></para>
            <para>Disable the notifier.</para>
            <para>Write as much data as you can (before EWOULDBLOCK is
            returned).</para>
            <para>Re-enable notifier if you have more data to write.</para>
            <para></para>
            <para>Further information: On Windows, Qt always disables the notifier
            after getting a notification, and only re-enables it if more data is
            expected. For example, if data is read from the socket and it can be used
            to read more, or if reading or writing is not possible because the socket
            would block, in which case it is necessary to wait before attempting to
            read or write again.</para>
            <para></para>
            <para>See also QFile, QProcess, QTcpSocket, and QUdpSocket.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSocketNotifier.#ctor(System.Int32,QtCore.QSocketNotifier.Type,QtCore.QObject)">
            <summary>
            <para>Constructs a socket notifier with the given parent. It enables
            the socket, and watches for events of the given type.</para>
            <para>It is generally advisable to explicitly enable or disable the
            socket notifier, especially for write notifiers.</para>
            <para>Note for Windows users: The socket passed to QSocketNotifier will
            become non-blocking, even if it was created as a blocking socket.</para>
            <para>See also setEnabled() and isEnabled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSocketNotifier.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSocketNotifier.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QSocketNotifier.Activated">
            <summary>
            <para>This signal is emitted whenever the socket notifier is enabled and a socket event corresponding to its type occurs.</para>
            <para>The socket identifier is passed in the socket parameter.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also type() and socket().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSocketNotifier.Enabled">
            <summary>
            <para>Returns true if the notifier is enabled; otherwise returns
            false.</para>
            <para>See also setEnabled().</para>
            <para></para>
            <para>If enable is true, the notifier is enabled; otherwise the
            notifier is disabled.</para>
            <para>The notifier is enabled by default, i.e. it emits the activated()
            signal whenever a socket event corresponding to its type occurs. If it is
            disabled, it ignores socket events (the same effect as not creating the
            socket notifier).</para>
            <para>Write notifiers should normally be disabled immediately after the
            activated() signal has been emitted</para>
            <para>See also isEnabled() and activated().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSocketNotifier.Socket">
            <summary>
            <para>Returns the socket identifier specified to the
            constructor.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSocketNotifier.type">
            <summary>
            <para>Returns the socket event type specified to the
            constructor.</para>
            <para>See also socket().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSocketNotifier.Type">
            <summary>
            <para>This enum describes the various types of events that a socket
            notifier can recognize. The type must be specified when constructing the
            socket notifier.</para>
            <para>Note that if you need to monitor both reads and writes for the
            same file descriptor, you must create two socket notifiers. Note also that
            it is not possible to install two socket notifiers of the same type (Read,
            Write, Exception) on the same socket.</para>
            <para>See also QSocketNotifier() and type().</para>
            </summary>
        </member>
        <member name="F:QtCore.QSocketNotifier.Type.Read">
            <summary>There is data to be read.</summary>
        </member>
        <member name="F:QtCore.QSocketNotifier.Type.Write">
            <summary>Data can be written.</summary>
        </member>
        <member name="F:QtCore.QSocketNotifier.Type.Exception">
            <summary>An exception has occurred. We recommend against using this.</summary>
        </member>
        <member name="T:QtCore.QSystemSemaphore">
            <summary>
            <para>The QSystemSemaphore class provides a general counting system
            semaphore.</para>
            </summary>
            <remarks>
            <para>A semaphore is a generalization of a mutex. While a mutex can be
            locked only once, a semaphore can be acquired multiple times. Typically, a
            semaphore is used to protect a certain number of identical
            resources.</para>
            <para>Like its lighter counterpart QSemaphore, a QSystemSemaphore can
            be accessed from multiple threads. Unlike QSemaphore, a QSystemSemaphore
            can also be accessed from multiple processes. This means QSystemSemaphore
            is a much heavier class, so if your application doesn't need to access your
            semaphores across multiple processes, you will probably want to use
            QSemaphore.</para>
            <para>Semaphores support two fundamental operations, acquire() and
            release():</para>
            <para>acquire() tries to acquire one resource. If there isn't a
            resource available, the call blocks until a resource becomes available.
            Then the resource is acquired and the call returns.</para>
            <para>release() releases one resource so it can be acquired by another
            process. The function can also be called with a parameter n &gt; 1, which
            releases n resources.</para>
            <para>A system semaphore is created with a string key that other
            processes can use to use the same semaphore.</para>
            <para>Example: Create a system semaphore</para>
            <para>QSystemSemaphore sem(&quot;market&quot;, 3,
            QSystemSemaphore::Create);</para>
            <para>                             // resources available == 3</para>
            <para>sem.acquire();               // resources available == 2</para>
            <para>sem.acquire();               // resources available == 1</para>
            <para>sem.acquire();               // resources available == 0</para>
            <para>sem.release();               // resources available == 1</para>
            <para>sem.release(2);              // resources available == 3</para>
            <para>A typical application of system semaphores is for controlling
            access to a circular buffer shared by a producer process and a consumer
            processes.</para>
            <para></para>
            <para>Platform-Specific Behavior</para>
            <para>When using this class, be aware of the following platform
            differences:</para>
            <para>Windows: QSystemSemaphore does not own its underlying system
            semaphore. Windows owns it. This means that when all instances of
            QSystemSemaphore for a particular key have been destroyed, either by having
            their destructors called, or because one or more processes crash, Windows
            removes the underlying system semaphore.</para>
            <para>Unix:</para>
            <para></para>
            <para>QSystemSemaphore owns the underlying system semaphore in Unix
            systems. This means that the last process having an instance of
            QSystemSemaphore for a particular key must remove the underlying system
            semaphore in its destructor. If the last process crashes without running
            the QSystemSemaphore destructor, Unix does not automatically remove the
            underlying system semaphore, and the semaphore survives the crash. A
            subsequent process that constructs a QSystemSemaphore with the same key
            will then be given the existing system semaphore. In that case, if the
            QSystemSemaphore constructor has specified its access mode as Open, its
            initial resource count will not be reset to the one provided but remain set
            to the value it received in the crashed process. To protect against this,
            the first process to create a semaphore for a particular key (usually a
            server), must pass its access mode as Create, which will force Unix to
            reset the resource count in the underlying system semaphore.</para>
            <para>When a process using QSystemSemaphore terminates for any reason,
            Unix automatically reverses the effect of all acquire operations that were
            not released. Thus if the process acquires a resource and then exits
            without releasing it, Unix will release that resource.</para>
            <para></para>
            <para></para>
            <para>See also QSharedMemory and QSemaphore.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSystemSemaphore.#ctor(System.String,System.Int32,QtCore.QSystemSemaphore.AccessMode)">
            <summary>
            <para>Requests a system semaphore for the specified key. The parameters
            initialValue and mode are used according to the following rules, which are
            system dependent.</para>
            <para>In Unix, if the mode is Open and the system already has a
            semaphore identified by key, that semaphore is used, and the semaphore's
            resource count is not changed, i.e., initialValue is ignored. But if the
            system does not already have a semaphore identified by key, it creates a
            new semaphore for that key and sets its resource count to
            initialValue.</para>
            <para>In Unix, if the mode is Create and the system already has a
            semaphore identified by key, that semaphore is used, and its resource count
            is set to initialValue. If the system does not already have a semaphore
            identified by key, it creates a new semaphore for that key and sets its
            resource count to initialValue.</para>
            <para>In Windows, mode is ignored, and the system always tries to
            create a semaphore for the specified key. If the system does not already
            have a semaphore identified as key, it creates the semaphore and sets its
            resource count to initialValue. But if the system already has a semaphore
            identified as key it uses that semaphore and ignores initialValue.</para>
            <para>The mode parameter is only used in Unix systems to handle the
            case where a semaphore survives a process crash. In that case, the next
            process to allocate a semaphore with the same key will get the semaphore
            that survived the crash, and unless mode is Create, the resource count will
            not be reset to initialValue but will retain the initial value it had been
            given by the crashed process.</para>
            <para>See also acquire() and key().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSystemSemaphore.SetKey(System.String,System.Int32,QtCore.QSystemSemaphore.AccessMode)">
            <summary>
            <para>This function works the same as the constructor. It reconstructs
            this QSystemSemaphore object. If the new key is different from the old key,
            calling this function is like calling the destructor of the semaphore with
            the old key, then calling the constructor to create a new semaphore with
            the new key. The initialValue and mode parameters are as defined for the
            constructor.</para>
            <para>See also QSystemSemaphore() and key().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSystemSemaphore.Acquire">
            <summary>
            <para>Acquires one of the resources guarded by this semaphore, if there
            is one available, and returns true. If all the resources guarded by this
            semaphore have already been acquired, the call blocks until one of them is
            released by another process or thread having a semaphore with the same
            key.</para>
            <para>If false is returned, a system error has occurred. Call error()
            to get a value of QSystemSemaphore::SystemSemaphoreError that indicates
            which error occurred.</para>
            <para>See also release().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSystemSemaphore.Release(System.Int32)">
            <summary>
            <para>Releases n resources guarded by the semaphore. Returns true
            unless there is a system error.</para>
            <para>Example: Create a system semaphore having five resources; acquire
            them all and then release them all.</para>
            <para>QSystemSemaphore sem(&quot;market&quot;, 5,
            QSystemSemaphore::Create);</para>
            <para>for (int i = 0; i &lt; 5; ++i)  // acquire all 5 resources</para>
            <para>    sem.acquire();</para>
            <para>sem.release(5);              // release the 5 resources</para>
            <para>This function can also &quot;create&quot; resources. For example,
            immediately following the sequence of statements above, suppose we add the
            statement:</para>
            <para>sem.release(10);          // &quot;create&quot; 10 new
            resources</para>
            <para>Ten new resources are now guarded by the semaphore, in addition
            to the five that already existed. You would not normally use this function
            to create more resources.</para>
            <para>See also acquire().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSystemSemaphore.Key">
            <summary>
            <para>Returns the key assigned to this system semaphore. The key is the
            name by which the semaphore can be accessed from other processes.</para>
            <para>See also setKey().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSystemSemaphore.Error">
            <summary>
            <para>Returns a value indicating whether an error occurred, and, if so,
            which error it was.</para>
            <para>See also errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSystemSemaphore.ErrorString">
            <summary>
            <para>Returns a text description of the last error that occurred. If
            error() returns an error value, call this function to get a text string
            that describes the error.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSystemSemaphore.AccessMode">
            <summary>
            <para>This enum is used by the constructor and setKey(). Its purpose is
            to enable handling the problem in Unix implementations of semaphores that
            survive a crash. In Unix, when a semaphore survives a crash, we need a way
            to force it to reset its resource count, when the system reuses the
            semaphore. In Windows, where semaphores can't survive a crash, this enum
            has no effect.</para>
            </summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.AccessMode.Open">
            <summary>If the semaphore already exists, its initial resource count is not reset. If the semaphore does not already exist, it is created and its initial resource count set.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.AccessMode.Create">
            <summary>QSystemSemaphore takes ownership of the semaphore and sets its resource count to the requested value, regardless of whether the semaphore already exists by having survived a crash. This value should be passed to the constructor, when the first semaphore for a particular key is constructed and you know that if the semaphore already exists it could only be because of a crash. In Windows, where a semaphore can't survive a crash, Create and Open have the same behavior.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.NoError">
            <summary>No error occurred.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.PermissionDenied">
            <summary>The operation failed because the caller didn't have the required permissions.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.KeyError">
            <summary>The operation failed because of an invalid key.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.AlreadyExists">
            <summary>The operation failed because a system semaphore with the specified key already existed.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.NotFound">
            <summary>The operation failed because a system semaphore with the specified key could not be found.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.OutOfResources">
            <summary>The operation failed because there was not enough memory available to fill the request.</summary>
        </member>
        <member name="F:QtCore.QSystemSemaphore.SystemSemaphoreError.UnknownError">
            <summary>Something else happened and it was bad.</summary>
        </member>
        <member name="T:QtCore.QTimer">
            <summary>
            <para>The QTimer class provides repetitive and single-shot
            timers.</para>
            </summary>
            <remarks>
            <para>The QTimer class provides a high-level programming interface for
            timers. To use it, create a QTimer, connect its timeout() signal to the
            appropriate slots, and call start(). From then on, it will emit the
            timeout() signal at constant intervals.</para>
            <para>Example for a one second (1000 millisecond) timer (from the
            Analog Clock example):</para>
            <para>    QTimer *timer = new QTimer(this);</para>
            <para>    connect(timer, SIGNAL(timeout()), this,
            SLOT(update()));</para>
            <para>    timer-&gt;start(1000);</para>
            <para>From then on, the update() slot is called every second.</para>
            <para>You can set a timer to time out only once by calling
            setSingleShot(true). You can also use the static QTimer::singleShot()
            function to call a slot after a specified interval:</para>
            <para>    QTimer::singleShot(200, this, SLOT(updateCaption()));</para>
            <para>In multithreaded applications, you can use QTimer in any thread
            that has an event loop. To start an event loop from a non-GUI thread, use
            QThread::exec(). Qt uses the timer's thread affinity to determine which
            thread will emit the timeout() signal. Because of this, you must start and
            stop the timer in its thread; it is not possible to start a timer from
            another thread.</para>
            <para>As a special case, a QTimer with a timeout of 0 will time out as
            soon as all the events in the window system's event queue have been
            processed. This can be used to do heavy work while providing a snappy user
            interface:</para>
            <para>    QTimer *timer = new QTimer(this);</para>
            <para>    connect(timer, SIGNAL(timeout()), this,
            SLOT(processOneThing()));</para>
            <para>    timer-&gt;start();</para>
            <para>From then on, processOneThing() will be called repeatedly. It
            should be written in such a way that it always returns quickly (typically
            after processing one data item) so that Qt can deliver events to the user
            interface and stop the timer as soon as it has done all its work. This is
            the traditional way of implementing heavy work in GUI applications, but as
            multithreading is nowadays becoming available on more and more platforms,
            we expect that zero-millisecond QTimer objects will gradually be replaced
            by QThreads.</para>
            <para></para>
            <para>Accuracy and Timer Resolution</para>
            <para>The accuracy of timers depends on the underlying operating system
            and hardware. Most platforms support a resolution of 1 millisecond, though
            the accuracy of the timer will not equal this resolution in many real-world
            situations.</para>
            <para>The accuracy also depends on the timer type. For
            Qt::PreciseTimer, QTimer will try to keep the accurance at 1 millisecond.
            Precise timers will also never time out earlier than expected.</para>
            <para>For Qt::CoarseTimer and Qt::VeryCoarseTimer types, QTimer may
            wake up earlier than expected, within the margins for those types: 5% of
            the interval for Qt::CoarseTimer and 500 ms for Qt::VeryCoarseTimer.</para>
            <para>All timer types may time out later than expected if the system is
            busy or unable to provide the requested accuracy. In such a case of timeout
            overrun, Qt will emit activated() only once, even if multiple timeouts have
            expired, and then will resume the original interval.</para>
            <para></para>
            <para>Alternatives to QTimer</para>
            <para>An alternative to using QTimer is to call QObject::startTimer()
            for your object and reimplement the QObject::timerEvent() event handler in
            your class (which must inherit QObject). The disadvantage is that
            timerEvent() does not support such high-level features as single-shot
            timers or signals.</para>
            <para>Another alternative is QBasicTimer. It is typically less
            cumbersome than using QObject::startTimer() directly. See Timers for an
            overview of all three approaches.</para>
            <para>Some operating systems limit the number of timers that may be
            used; Qt tries to work around these limitations.</para>
            <para></para>
            <para>See also QBasicTimer, QTimerEvent, QObject::timerEvent(), Timers,
            Analog Clock Example, and Wiggly Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTimer.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a timer with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.Start(System.Int32)">
            <summary>
            <para>Starts or restarts the timer with a timeout interval of msec
            milliseconds.</para>
            <para>If the timer is already running, it will be stopped and
            restarted.</para>
            <para>If singleShot is true, the timer will be activated only
            once.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.Start">
            <summary>
            <para>This function overloads start().</para>
            <para>Starts or restarts the timer with the timeout specified in
            interval.</para>
            <para>If the timer is already running, it will be stopped and
            restarted.</para>
            <para>If singleShot is true, the timer will be activated only
            once.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.Stop">
            <summary>
            <para>Stops the timer.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.GetSingleShot(System.Int32,QtCore.QObject,System.String)">
            <summary>
            <para>This static function calls a slot after a given time
            interval.</para>
            <para>It is very convenient to use this function because you do not
            need to bother with a timerEvent or create a local QTimer object.</para>
            <para>Example:</para>
            <para>#include &lt;QApplication&gt;</para>
            <para>#include &lt;QTimer&gt;</para>
            <para></para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    QTimer::singleShot(600000, &amp;app, SLOT(quit()));</para>
            <para>    ...</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>This sample program automatically terminates after 10 minutes
            (600,000 milliseconds).</para>
            <para>The receiver is the receiving object and the member is the slot.
            The time interval is msec milliseconds.</para>
            <para>Note: This function is reentrant.</para>
            <para>See also setSingleShot() and start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimer.GetSingleShot(System.Int32,QtCore.Qt.TimerType,QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This static function calls a slot after a given time
            interval.</para>
            <para>It is very convenient to use this function because you do not
            need to bother with a timerEvent or create a local QTimer object.</para>
            <para>The receiver is the receiving object and the member is the slot.
            The time interval is msec milliseconds. The timerType affects the accuracy
            of the timer.</para>
            <para>Note: This function is reentrant.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="E:QtCore.QTimer.Timeout">
            <summary>
            <para>This signal is emitted when the timer times out.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also interval, start(), and stop().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.Interval">
            <summary>
            <para>This property holds the timeout interval in milliseconds.</para>
            <para>The default value for this property is 0. A QTimer with a timeout
            interval of 0 will time out as soon as all the events in the window
            system's event queue have been processed.</para>
            <para>Setting the interval of an active timer changes its
            timerId().</para>
            <para>See also singleShot.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.TimerType">
            <summary>
            <para>This property holds controls the accuracy of the timer.</para>
            <para>The default value for this property is Qt::CoarseTimer.</para>
            <para>See also Qt::TimerType.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.SingleShot">
            <summary>
            <para>This property holds whether the timer is a single-shot
            timer.</para>
            <para>A single-shot timer fires only once, non-single-shot timers fire
            every interval milliseconds.</para>
            <para>See also interval and singleShot().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.IsActive">
            <summary>
            <para>This boolean property is true if the timer is running; otherwise
            false.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isActive() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.TimerId">
            <summary>
            <para>Returns the ID of the timer if the timer is running; otherwise
            returns -1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimer.RemainingTime">
            <summary>
            <para>This property holds the remaining time in milliseconds.</para>
            <para>Returns the timer's remaining value in milliseconds left until
            the timeout. If the timer is inactive, the returned value will be -1. If
            the timer is overdue, the returned value will be 0.</para>
            <para>This property was introduced in  Qt 5.0.</para>
            <para>See also interval.</para>
            </summary>
        </member>
        <member name="T:QtCore.QTranslator">
            <summary>
            <para>The QTranslator class provides internationalization support for
            text output.</para>
            </summary>
            <remarks>
            <para>An object of this class contains a set of translations from a
            source language to a target language. QTranslator provides functions to
            look up translations in a translation file. Translation files are created
            using Qt Linguist.</para>
            <para>The most common use of QTranslator is to: load a translation
            file, install it using QCoreApplication::installTranslator(), and use it
            via QObject::tr(). Here's an example main() function using the
            QTranslator:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication app(argc, argv);</para>
            <para></para>
            <para>    QTranslator translator;</para>
            <para>    translator.load(&quot;hellotr_la&quot;);</para>
            <para>    app.installTranslator(&amp;translator);</para>
            <para></para>
            <para>    QPushButton hello(QPushButton::tr(&quot;Hello
            world!&quot;));</para>
            <para>    hello.resize(100, 30);</para>
            <para></para>
            <para>    hello.show();</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>Note that the translator must be created before the application's
            widgets.</para>
            <para>Most applications will never need to do anything else with this
            class. The other functions provided by this class are useful for
            applications that work on translator files.</para>
            <para></para>
            <para>Looking up Translations</para>
            <para>It is possible to look up a translation using translate() (as
            tr() and QCoreApplication::translate() do). The translate() function takes
            up to three parameters:</para>
            <para></para>
            <para>The context - usually the class name for the tr() caller.</para>
            <para>The source text - usually the argument to tr().</para>
            <para>The disambiguation - an optional string that helps disambiguate
            different uses of the same text in the same context.</para>
            <para></para>
            <para>For example, the &quot;Cancel&quot; in a dialog might have
            &quot;Anuluj&quot; when the program runs in Polish (in this case the source
            text would be &quot;Cancel&quot;). The context would (normally) be the
            dialog's class name; there would normally be no comment, and the translated
            text would be &quot;Anuluj&quot;.</para>
            <para>But it's not always so simple. The Spanish version of a printer
            dialog with settings for two-sided printing and binding would probably
            require both &quot;Activado&quot; and &quot;Activada&quot; as translations
            for &quot;Enabled&quot;. In this case the source text would be
            &quot;Enabled&quot; in both cases, and the context would be the dialog's
            class name, but the two items would have disambiguations such as
            &quot;two-sided printing&quot; for one and &quot;binding&quot; for the
            other. The disambiguation enables the translator to choose the appropriate
            gender for the Spanish version, and enables Qt to distinguish between
            translations.</para>
            <para></para>
            <para>Using Multiple Translations</para>
            <para>Multiple translation files can be installed in an application.
            Translations are searched for in the reverse order in which they were
            installed, so the most recently installed translation file is searched for
            translations first and the earliest translation file is searched last. The
            search stops as soon as a translation containing a matching string is
            found.</para>
            <para>This mechanism makes it possible for a specific translation to be
            &quot;selected&quot; or given priority over the others; simply uninstall
            the translator from the application by passing it to the
            QCoreApplication::removeTranslator() function and reinstall it with
            QCoreApplication::installTranslator(). It will then be the first
            translation to be searched for matching strings.</para>
            <para></para>
            <para>See also QCoreApplication::installTranslator(),
            QCoreApplication::removeTranslator(), QObject::tr(),
            QCoreApplication::translate(), I18N Example, Hello tr() Example, Arrow Pad
            Example, and Troll Print Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTranslator.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an empty message file object with parent parent that
            is not connected to any file.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTranslator.Translate(System.String,System.String,System.String,System.Int32)">
            <summary>
            <para>Returns the translation for the key (context, sourceText,
            disambiguation). If none is found, also tries (context, sourceText,
            &quot;&quot;). If that still fails, returns a null string.</para>
            <para>Note: Incomplete translations may result in unexpected behavior:
            If no translation for (context, sourceText, &quot;&quot;) is provided, the
            method might in this case actually return a translation for a different
            disambiguation.</para>
            <para>If n is not -1, it is used to choose an appropriate form for the
            translation (e.g. &quot;%n file found&quot; vs. &quot;%n files
            found&quot;).</para>
            <para>If you need to programatically insert translations into a
            QTranslator, this function can be reimplemented.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTranslator.Load(System.String,System.String,System.String,System.String)">
            <summary>
            <para>Loads filename + suffix (&quot;.qm&quot; if the suffix is not
            specified), which may be an absolute file name or relative to directory.
            Returns true if the translation is successfully loaded; otherwise returns
            false.</para>
            <para>If directory is not specified, the current directory is used
            (i.e., as currentPath()).</para>
            <para>The previous contents of this translator object are
            discarded.</para>
            <para>If the file name does not exist, other file names are tried in
            the following order:</para>
            <para></para>
            <para>File name without suffix appended.</para>
            <para>File name with text after a character in search_delimiters
            stripped (&quot;_.&quot; is the default for search_delimiters if it is an
            empty string) and suffix.</para>
            <para>File name stripped without suffix appended.</para>
            <para>File name stripped further, etc.</para>
            <para></para>
            <para>For example, an application running in the fr_CA locale
            (French-speaking Canada) might call load(&quot;foo.fr_ca&quot;,
            &quot;/opt/foolib&quot;). load() would then try to open the first existing
            readable file from this list:</para>
            <para></para>
            <para>/opt/foolib/foo.fr_ca.qm</para>
            <para>/opt/foolib/foo.fr_ca</para>
            <para>/opt/foolib/foo.fr.qm</para>
            <para>/opt/foolib/foo.fr</para>
            <para>/opt/foolib/foo.qm</para>
            <para>/opt/foolib/foo</para>
            <para></para>
            <para>Usually, it is better to use the QTranslator::load(const QLocale
            &amp;, const QString &amp;, const QString &amp;, const QString &amp;, const
            QString &amp;) function instead, because it uses QLocale::uiLanguages() and
            not simply the locale name, which refers to the formatting of dates and
            numbers and not necessarily the UI language.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTranslator.Load(QtCore.QLocale,System.String,System.String,System.String,System.String)">
            <summary>
            <para>Loads filename + prefix + ui language name + suffix
            (&quot;.qm&quot; if the suffix is not specified), which may be an absolute
            file name or relative to directory. Returns true if the translation is
            successfully loaded; otherwise returns false.</para>
            <para>The previous contents of this translator object are
            discarded.</para>
            <para>If the file name does not exist, other file names are tried in
            the following order:</para>
            <para></para>
            <para>File name without suffix appended.</para>
            <para>File name with ui language part after a &quot;_&quot; character
            stripped and suffix.</para>
            <para>File name with ui language part stripped without suffix
            appended.</para>
            <para>File name with ui language part stripped further, etc.</para>
            <para></para>
            <para>For example, an application running in the locale with the
            following ui languages - &quot;es&quot;, &quot;fr-CA&quot;, &quot;de&quot;
            might call load(QLocale::system(), &quot;foo&quot;, &quot;.&quot;,
            &quot;/opt/foolib&quot;, &quot;.qm&quot;). load() would replace '-' (dash)
            with '_' (underscore) in the ui language and then try to open the first
            existing readable file from this list:</para>
            <para></para>
            <para>/opt/foolib/foo.es.qm</para>
            <para>/opt/foolib/foo.es</para>
            <para>/opt/foolib/foo.fr_CA.qm</para>
            <para>/opt/foolib/foo.fr_CA</para>
            <para>/opt/foolib/foo.de.qm</para>
            <para>/opt/foolib/foo.de</para>
            <para>/opt/foolib/foo.fr.qm</para>
            <para>/opt/foolib/foo.fr</para>
            <para>/opt/foolib/foo.qm</para>
            <para>/opt/foolib/foo.</para>
            <para>/opt/foolib/foo</para>
            <para></para>
            <para>On operating systems where file system is case sensitive,
            QTranslator also tries to load a lower-cased version of the locale
            name.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTranslator.Load(System.Byte*,System.Int32,System.String)">
            <summary>
            <para>This function overloads load().</para>
            <para>Loads the QM file data data of length len into the
            translator.</para>
            <para>The data is not copied. The caller must be able to guarantee that
            data will not be deleted or modified.</para>
            <para>directory is only used to specify the base directory when loading
            the dependencies of a QM file. If the file does not have dependencies, this
            argument is ignored.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTranslator.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTranslator.IsEmpty">
            <summary>
            <para>Returns true if this translator is empty, otherwise returns
            false. This function works with stripped and unstripped translation
            files.</para>
            </summary>
        </member>
        <member name="T:QtCore.QWinEventNotifier">
            <summary>
            <para>The QWinEventNotifier class provides support for the Windows Wait
            functions.</para>
            </summary>
            <remarks>
            <para>The QWinEventNotifier class makes it possible to use the wait
            functions on windows in a asynchronous manner. With this class, you can
            register a HANDLE to an event and get notification when that event becomes
            signalled. The state of the event is not modified in the process so if it
            is a manual reset event you will need to reset it after the
            notification.</para>
            <para>Once you have created a event object using Windows API such as
            CreateEvent() or OpenEvent(), you can create an event notifier to monitor
            the event handle. If the event notifier is enabled, it will emit the
            activated() signal whenever the corresponding event object is
            signalled.</para>
            <para>The setEnabled() function allows you to disable as well as enable
            the event notifier. It is generally advisable to explicitly enable or
            disable the event notifier. A disabled notifier does nothing when the event
            object is signalled (the same effect as not creating the event notifier).
            Use the isEnabled() function to determine the notifier's current
            status.</para>
            <para>Finally, you can use the setHandle() function to register a new
            event object, and the handle() function to retrieve the event
            handle.</para>
            <para>Further information: Although the class is called
            QWinEventNotifier, it can be used for certain other objects which are
            so-called synchronization objects, such as Processes, Threads, Waitable
            timers.</para>
            <para>Warning: This class is only available on Windows.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QWinEventNotifier.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an event notifier with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QWinEventNotifier.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWinEventNotifier.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QWinEventNotifier.Enabled">
            <summary>
            <para>Returns true if the notifier is enabled; otherwise returns
            false.</para>
            <para>See also setEnabled().</para>
            <para></para>
            <para>If enable is true, the notifier is enabled; otherwise the
            notifier is disabled.</para>
            <para>See also isEnabled() and activated().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMimeType">
            <summary>
            <para>The QMimeType class describes types of file or data, represented
            by a MIME type string.</para>
            </summary>
            <remarks>
            <para>For instance a file named &quot;readme.txt&quot; has the MIME
            type &quot;text/plain&quot;. The MIME type can be determined from the file
            name, or from the file contents, or from both. MIME type determination can
            also be done on buffers of data not coming from files.</para>
            <para>Determining the MIME type of a file can be useful to make sure
            your application supports it. It is also useful in file-manager-like
            applications or widgets, in order to display an appropriate icon for the
            file, or even the descriptive comment in detailed views.</para>
            <para>To check if a file has the expected MIME type, you should use
            inherits() rather than a simple string comparison based on the name(). This
            is because MIME types can inherit from each other: for instance a C source
            file is a specific type of plain text file, so text/x-csrc inherits
            text/plain.</para>
            <para></para>
            <para>See also QMimeDatabase.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMimeType.#ctor">
            <summary>
            <para>Constructs this QMimeType object initialized with default
            property values that indicate an invalid MIME type.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeType.#ctor(QtCore.QMimeType)">
            <summary>
            <para>Constructs this QMimeType object as a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeType.Swap(QtCore.QMimeType)">
            <summary>
            <para>Swaps QMimeType other with this QMimeType object.</para>
            <para>This operation is very fast and never fails.</para>
            <para>The swap() method helps with the implementation of assignment
            operators in an exception-safe way. For more information consult More C++
            Idioms - Copy-and-swap.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeType.op_Equality(QtCore.QMimeType,QtCore.QMimeType)">
            <summary>
            <para>Returns true if other equals this QMimeType object, otherwise
            returns false. The name is the unique identifier for a mimetype, so two
            mimetypes with the same name, are equal.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeType.op_Inequality(QtCore.QMimeType,QtCore.QMimeType)">
            <summary>
            <para>Returns true if other does not equal this QMimeType object,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeType.Inherits(System.String)">
            <summary>
            <para>Returns true if this mimetype is mimeTypeName, or inherits
            mimeTypeName (see parentMimeTypes()), or mimeTypeName is an alias for this
            mimetype.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.IsValid">
            <summary>
            <para>Returns true if the QMimeType object contains valid data,
            otherwise returns false. A valid MIME type has a non-empty name(). The
            invalid MIME type is the default-constructed QMimeType.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.IsDefault">
            <summary>
            <para>Returns true if this MIME type is the default MIME type which
            applies to all files: application/octet-stream.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.Name">
            <summary>
            <para>Returns the name of the MIME type.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.Comment">
            <summary>
            <para>Returns the description of the MIME type to be displayed on user
            interfaces.</para>
            <para>The system language (QLocale::system().name()) is used to select
            the appropriate translation.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.GenericIconName">
            <summary>
            <para>Returns the file name of a generic icon that represents the MIME
            type.</para>
            <para>This should be used if the icon returned by iconName() cannot be
            found on the system. It is used for categories of similar types (like
            spreadsheets or archives) that can use a common icon. The freedesktop.org
            Icon Naming Specification lists a set of such icon names.</para>
            <para>The icon name can be given to QIcon::fromTheme() in order to load
            the icon.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.IconName">
            <summary>
            <para>Returns the file name of an icon image that represents the MIME
            type.</para>
            <para>The icon name can be given to QIcon::fromTheme() in order to load
            the icon.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.GlobPatterns">
            <summary>
            <para>Returns the list of glob matching patterns.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.ParentMimeTypes">
            <summary>
            <para>A type is a subclass of another type if any instance of the first
            type is also an instance of the second. For example, all image/svg+xml
            files are also text/xml, text/plain and application/octet-stream files.
            Subclassing is about the format, rather than the category of the data (for
            example, there is no 'generic spreadsheet' class that all spreadsheets
            inherit from). Conversely, the parent mimetype of image/svg+xml is
            text/xml.</para>
            <para>A mimetype can have multiple parents. For instance
            application/x-perl has two parents: application/x-executable and
            text/plain. This makes it possible to both execute perl scripts, and to
            open them in text editors.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.AllAncestors">
            <summary>
            <para>Return all the parent mimetypes of this mimetype, direct and
            indirect. This includes the parent(s) of its parent(s), etc.</para>
            <para>For instance, for image/svg+xml the list would be:
            application/xml, text/plain, application/octet-stream.</para>
            <para>Note that application/octet-stream is the ultimate parent for all
            types of files (but not directories).</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.Aliases">
            <summary>
            <para>Return the list of aliases of this mimetype.</para>
            <para>For instance, for text/csv, the returned list would be:
            text/x-csv, text/x-comma-separated-values.</para>
            <para>Note that all QMimeType instances refer to proper mimetypes,
            never to aliases directly.</para>
            <para>The order of the aliases in the list is undefined.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.Suffixes">
            <summary>
            <para>Returns the known suffixes for the MIME type. No leading dot is
            included, so for instance this would return &quot;jpg&quot;,
            &quot;jpeg&quot; for image/jpeg.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.PreferredSuffix">
            <summary>
            <para>Returns the preferred suffix for the MIME type. No leading dot is
            included, so for instance this would return &quot;pdf&quot; for
            application/pdf. The return value can be empty, for mime types which do not
            have any suffixes associated.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMimeType.FilterString">
            <summary>
            <para>Returns a filter string usable for a file dialog.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMimeDatabase">
            <summary>
            <para>The QMimeDatabase class maintains a database of MIME
            types.</para>
            </summary>
            <remarks>
            <para>The MIME type database is provided by the freedesktop.org
            shared-mime-info project. If the MIME type database cannot be found on the
            system, as is the case on most Windows, OS X, and iOS systems, Qt will use
            its own copy of it.</para>
            <para>Applications which want to define custom MIME types need to
            install an XML file into the locations searched for MIME definitions. These
            locations can be queried with</para>
            <para>QStandardPaths::locateAll(QStandardPaths::GenericDataLocation,
            QLatin1String(&quot;mime/packages&quot;),</para>
            <para>
            QStandardPaths::LocateDirectory);</para>
            <para>On a typical Unix system, this will be /usr/share/mime/packages/,
            but it is also possible to extend the list of directories by setting the
            environment variable XDG_DATA_DIRS. For instance adding /opt/myapp/share to
            XDG_DATA_DIRS will result in /opt/myapp/share/mime/packages/ being searched
            for MIME definitions.</para>
            <para>Here is an example of MIME XML:</para>
            <para>&lt;?xml version=&quot;1.0&quot;
            encoding=&quot;UTF-8&quot;?&gt;</para>
            <para>&lt;mime-info
            xmlns=&quot;http://www.freedesktop.org/standards/shared-mime-info&quot;&gt;
            </para>
            <para>  &lt;mime-type
            type=&quot;application/vnd.nokia.qt.qmakeprofile&quot;&gt;</para>
            <para>    &lt;comment xml:lang=&quot;en&quot;&gt;Qt qmake
            Profile&lt;/comment&gt;</para>
            <para>    &lt;glob pattern=&quot;*.pro&quot;
            weight=&quot;50&quot;/&gt;</para>
            <para>  &lt;/mime-type&gt;</para>
            <para>&lt;/mime-info&gt;</para>
            <para>For more details about the syntax of XML MIME definitions,
            including defining &quot;magic&quot; in order to detect MIME types based on
            data as well, read the Shared Mime Info specification at
            http://standards.freedesktop.org/shared-mime-info-spec/shared-mime-info-spe
            c-latest.html</para>
            <para>On Unix systems, a binary cache is used for more performance.
            This cache is generated by the command &quot;update-mime-database
            path&quot;, where path would be /opt/myapp/share/mime in the above example.
            Make sure to run this command when installing the MIME type definition
            file.</para>
            <para>QMimeDatabase db;</para>
            <para>QMimeType mime = db.mimeTypeForFile(fileName);</para>
            <para>if (mime.inherits(&quot;text/plain&quot;)) {</para>
            <para>    // The file is plain text, we can display it in a
            QTextEdit</para>
            <para>}</para>
            <para></para>
            <para>See also QMimeType.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMimeDatabase.#ctor">
            <summary>
            <para>Constructs a QMimeDatabase object.</para>
            <para>It is perfectly OK to create an instance of QMimeDatabase every
            time you need to perform a lookup. The parsing of mimetypes is done on
            demand (when shared-mime-info is installed) or when the very first instance
            is constructed (when parsing XML files directly).</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForName(System.String)">
            <summary>
            <para>Returns a MIME type for nameOrAlias or an invalid one if none
            found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForFile(System.String,QtCore.QMimeDatabase.MatchMode)">
            <summary>
            <para>Returns a MIME type for the file named fileName using
            mode.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForFile(QtCore.QFileInfo,QtCore.QMimeDatabase.MatchMode)">
            <summary>
            <para>Returns a MIME type for fileInfo.</para>
            <para>A valid MIME type is always returned.</para>
            <para>The default matching algorithm looks at both the file name and
            the file contents, if necessary. The file extension has priority over the
            contents, but the contents will be used if the file extension is unknown,
            or matches multiple MIME types. If fileInfo is a Unix symbolic link, the
            file that it refers to will be used instead. If the file doesn't match any
            known pattern or data, the default MIME type (application/octet-stream) is
            returned.</para>
            <para>When mode is set to MatchExtension, only the file name is used,
            not the file contents. The file doesn't even have to exist. If the file
            name doesn't match any known pattern, the default MIME type
            (application/octet-stream) is returned. If multiple MIME types match this
            file, the first one (alphabetically) is returned.</para>
            <para>When mode is set to MatchContent, and the file is readable, only
            the file contents are used to determine the MIME type. This is equivalent
            to calling mimeTypeForData with a QFile as input device.</para>
            <para>fileInfo may refer to an absolute or relative path.</para>
            <para>See also QMimeType::isDefault() and mimeTypeForData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForData(QtCore.QByteArray)">
            <summary>
            <para>Returns a MIME type for data.</para>
            <para>A valid MIME type is always returned. If data doesn't match any
            known MIME type data, the default MIME type (application/octet-stream) is
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForData(QtCore.QIODevice)">
            <summary>
            <para>Returns a MIME type for the data in device.</para>
            <para>A valid MIME type is always returned. If the data in device
            doesn't match any known MIME type data, the default MIME type
            (application/octet-stream) is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForUrl(QtCore.QUrl)">
            <summary>
            <para>Returns a MIME type for url.</para>
            <para>If the URL is a local file, this calls mimeTypeForFile.</para>
            <para>Otherwise the matching is done based on the file name only,
            except for schemes where file names don't mean much, like HTTP. This method
            always returns the default mimetype for HTTP URLs, use
            QNetworkAccessManager to handle HTTP URLs properly.</para>
            <para>A valid MIME type is always returned. If url doesn't match any
            known MIME type data, the default MIME type (application/octet-stream) is
            returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForFileNameAndData(System.String,QtCore.QIODevice)">
            <summary>
            <para>Returns a MIME type for the given fileName and device
            data.</para>
            <para>This overload can be useful when the file is remote, and we
            started to download some of its data in a device. This allows to do full
            MIME type matching for remote files as well.</para>
            <para>If the device is not open, it will be opened by this function,
            and closed after the MIME type detection is completed.</para>
            <para>A valid MIME type is always returned. If device data doesn't
            match any known MIME type data, the default MIME type
            (application/octet-stream) is returned.</para>
            <para>This method looks at both the file name and the file contents, if
            necessary. The file extension has priority over the contents, but the
            contents will be used if the file extension is unknown, or matches multiple
            MIME types.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.MimeTypeForFileNameAndData(System.String,QtCore.QByteArray)">
            <summary>
            <para>Returns a MIME type for the given fileName and device
            data.</para>
            <para>This overload can be useful when the file is remote, and we
            started to download some of its data. This allows to do full MIME type
            matching for remote files as well.</para>
            <para>A valid MIME type is always returned. If data doesn't match any
            known MIME type data, the default MIME type (application/octet-stream) is
            returned.</para>
            <para>This method looks at both the file name and the file contents, if
            necessary. The file extension has priority over the contents, but the
            contents will be used if the file extension is unknown, or matches multiple
            MIME types.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMimeDatabase.SuffixForFileName(System.String)">
            <summary>
            <para>Returns the suffix for the file fileName, as known by the MIME
            database.</para>
            <para>This allows to pre-select &quot;tar.bz2&quot; for foo.tar.bz2,
            but still only &quot;txt&quot; for my.file.with.dots.txt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMimeDatabase.MatchMode">
            <summary>
            <para>This enum specifies how matching a file to a MIME type is
            performed.</para>
            </summary>
        </member>
        <member name="F:QtCore.QMimeDatabase.MatchMode.MatchDefault">
            <summary>Both the file name and content are used to look for a match</summary>
        </member>
        <member name="F:QtCore.QMimeDatabase.MatchMode.MatchExtension">
            <summary>Only the file name is used to look for a match</summary>
        </member>
        <member name="F:QtCore.QMimeDatabase.MatchMode.MatchContent">
            <summary>The file content is used to look for a match</summary>
        </member>
        <member name="T:QtCore.QLibrary">
            <summary>
            <para>The QLibrary class loads shared libraries at runtime.</para>
            </summary>
            <remarks>
            <para>An instance of a QLibrary object operates on a single shared
            object file (which we call a &quot;library&quot;, but is also known as a
            &quot;DLL&quot;). A QLibrary provides access to the functionality in the
            library in a platform independent way. You can either pass a file name in
            the constructor, or set it explicitly with setFileName(). When loading the
            library, QLibrary searches in all the system-specific library locations
            (e.g. LD_LIBRARY_PATH on Unix), unless the file name has an absolute
            path.</para>
            <para>If the file name is an absolute path then an attempt is made to
            load this path first. If the file cannot be found, QLibrary tries the name
            with different platform-specific file prefixes, like &quot;lib&quot; on
            Unix and Mac, and suffixes, like &quot;.so&quot; on Unix,
            &quot;.dylib&quot; on the Mac, or &quot;.dll&quot; on Windows.</para>
            <para>If the file path is not absolute then QLibrary modifies the
            search order to try the system-specific prefixes and suffixes first,
            followed by the file path specified.</para>
            <para>This makes it possible to specify shared libraries that are only
            identified by their basename (i.e. without their suffix), so the same code
            will work on different operating systems yet still minimise the number of
            attempts to find the library.</para>
            <para>The most important functions are load() to dynamically load the
            library file, isLoaded() to check whether loading was successful, and
            resolve() to resolve a symbol in the library. The resolve() function
            implicitly tries to load the library if it has not been loaded yet.
            Multiple instances of QLibrary can be used to access the same physical
            library. Once loaded, libraries remain in memory until the application
            terminates. You can attempt to unload a library using unload(), but if
            other instances of QLibrary are using the same library, the call will fail,
            and unloading will only happen when every instance has called
            unload().</para>
            <para>A typical use of QLibrary is to resolve an exported symbol in a
            library, and to call the C function that this symbol represents. This is
            called &quot;explicit linking&quot; in contrast to &quot;implicit
            linking&quot;, which is done by the link step in the build process when
            linking an executable against a library.</para>
            <para>The following code snippet loads a library, resolves the symbol
            &quot;mysymbol&quot;, and calls the function if everything succeeded. If
            something goes wrong, e.g. the library file does not exist or the symbol is
            not defined, the function pointer will be 0 and won't be called.</para>
            <para>QLibrary myLib(&quot;mylib&quot;);</para>
            <para>typedef void (*MyPrototype)();</para>
            <para>MyPrototype myFunction = (MyPrototype)
            myLib.resolve(&quot;mysymbol&quot;);</para>
            <para>if (myFunction)</para>
            <para>    myFunction();</para>
            <para>The symbol must be exported as a C function from the library for
            resolve() to work. This means that the function must be wrapped in an
            extern &quot;C&quot; block if the library is compiled with a C++ compiler.
            On Windows, this also requires the use of a dllexport macro; see resolve()
            for the details of how this is done. For convenience, there is a static
            resolve() function which you can use if you just want to call a function in
            a library without explicitly loading the library first:</para>
            <para>typedef void (*MyPrototype)();</para>
            <para>MyPrototype myFunction =</para>
            <para>        (MyPrototype) QLibrary::resolve(&quot;mylib&quot;,
            &quot;mysymbol&quot;);</para>
            <para>if (myFunction)</para>
            <para>    myFunction();</para>
            <para></para>
            <para>See also QPluginLoader.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLibrary.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a library with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a library object with the given parent that will load
            the library specified by fileName.</para>
            <para>We recommend omitting the file's suffix in fileName, since
            QLibrary will automatically look for the file with the appropriate suffix
            in accordance with the platform, e.g. &quot;.so&quot; on Unix,
            &quot;.dylib&quot; on OS X and iOS, and &quot;.dll&quot; on Windows. (See
            fileName.)</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.#ctor(System.String,System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a library object with the given parent that will load
            the library specified by fileName and major version number verNum.
            Currently, the version number is ignored on Windows.</para>
            <para>We recommend omitting the file's suffix in fileName, since
            QLibrary will automatically look for the file with the appropriate suffix
            in accordance with the platform, e.g. &quot;.so&quot; on Unix,
            &quot;.dylib&quot; on OS X and iOS, and &quot;.dll&quot; on Windows. (See
            fileName.)</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.#ctor(System.String,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a library object with the given parent that will load
            the library specified by fileName and full version number version.
            Currently, the version number is ignored on Windows.</para>
            <para>We recommend omitting the file's suffix in fileName, since
            QLibrary will automatically look for the file with the appropriate suffix
            in accordance with the platform, e.g. &quot;.so&quot; on Unix,
            &quot;.dylib&quot; on OS X and iOS, and &quot;.dll&quot; on Windows. (See
            fileName.)</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Resolve(System.String)">
            <summary>
            <para>Returns the address of the exported symbol symbol. The library is
            loaded if necessary. The function returns 0 if the symbol could not be
            resolved or if the library could not be loaded.</para>
            <para>Example:</para>
            <para>typedef int (*AvgFunction)(int, int);</para>
            <para></para>
            <para>AvgFunction avg = (AvgFunction)
            library-&gt;resolve(&quot;avg&quot;);</para>
            <para>if (avg)</para>
            <para>    return avg(5, 8);</para>
            <para>else</para>
            <para>    return -1;</para>
            <para>The symbol must be exported as a C function from the library.
            This means that the function must be wrapped in an extern &quot;C&quot; if
            the library is compiled with a C++ compiler. On Windows you must also
            explicitly export the function from the DLL using the __declspec(dllexport)
            compiler directive, for example:</para>
            <para>extern &quot;C&quot; MY_EXPORT int avg(int a, int b)</para>
            <para>{</para>
            <para>    return (a + b) / 2;</para>
            <para>}</para>
            <para>with MY_EXPORT defined as</para>
            <para>#ifdef Q_OS_WIN</para>
            <para>#define MY_EXPORT __declspec(dllexport)</para>
            <para>#else</para>
            <para>#define MY_EXPORT</para>
            <para>#endif</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Load">
            <summary>
            <para>Loads the library and returns true if the library was loaded
            successfully; otherwise returns false. Since resolve() always calls this
            function before resolving any symbols it is not necessary to call it
            explicitly. In some situations you might want the library loaded in
            advance, in which case you would use this function.</para>
            <para>See also unload().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Unload">
            <summary>
            <para>Unloads the library and returns true if the library could be
            unloaded; otherwise returns false.</para>
            <para>This happens automatically on application termination, so you
            shouldn't normally need to call this function.</para>
            <para>If other instances of QLibrary are using the same library, the
            call will fail, and unloading will only happen when every instance has
            called unload().</para>
            <para>Note that on Mac OS X 10.3 (Panther), dynamic libraries cannot be
            unloaded.</para>
            <para>See also resolve() and load().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.SetFileNameAndVersion(System.String,System.Int32)">
            <summary>
            <para>Sets the fileName property and major version number to fileName
            and versionNumber respectively. The versionNumber is ignored on
            Windows.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.SetFileNameAndVersion(System.String,System.String)">
            <summary>
            <para>Sets the fileName property and full version number to fileName
            and version respectively. The version parameter is ignored on
            Windows.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Resolve(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads the library fileName and returns the address of the
            exported symbol symbol. Note that fileName should not include the
            platform-specific file suffix; (see fileName). The library remains loaded
            until the application exits.</para>
            <para>The function returns 0 if the symbol could not be resolved or if
            the library could not be loaded.</para>
            <para>See also resolve().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Resolve(System.String,System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads the library fileName with major version number verNum and
            returns the address of the exported symbol symbol. Note that fileName
            should not include the platform-specific file suffix; (see fileName). The
            library remains loaded until the application exits. verNum is ignored on
            Windows.</para>
            <para>The function returns 0 if the symbol could not be resolved or if
            the library could not be loaded.</para>
            <para>See also resolve().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.Resolve(System.String,System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads the library fileName with full version number version and
            returns the address of the exported symbol symbol. Note that fileName
            should not include the platform-specific file suffix; (see fileName). The
            library remains loaded until the application exits. version is ignored on
            Windows.</para>
            <para>The function returns 0 if the symbol could not be resolved or if
            the library could not be loaded.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also resolve().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLibrary.IsLibrary(System.String)">
            <summary>
            <para>Returns true if fileName has a valid suffix for a loadable
            library; otherwise returns false.</para>
            <para></para>
            <para> PlatformValid suffixes</para>
            <para>Windows	.dll, .DLL</para>
            <para>Unix/Linux	.so</para>
            <para>AIX	.a</para>
            <para>HP-UX	.sl, .so (HP-UXi)</para>
            <para>OS X and iOS	.dylib, .bundle, .so</para>
            <para></para>
            <para>Trailing versioning numbers on Unix are ignored.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibrary.FileName">
            <summary>
            <para>This property holds the file name of the library.</para>
            <para>We recommend omitting the file's suffix in the file name, since
            QLibrary will automatically look for the file with the appropriate suffix
            (see isLibrary()).</para>
            <para>When loading the library, QLibrary searches in all
            system-specific library locations (for example, LD_LIBRARY_PATH on Unix),
            unless the file name has an absolute path. After loading the library
            successfully, fileName() returns the fully-qualified file name of the
            library, including the full path to the library if one was given in the
            constructor or passed to setFileName().</para>
            <para>For example, after successfully loading the &quot;GL&quot;
            library on Unix platforms, fileName() will return &quot;libGL.so&quot;. If
            the file name was originally passed as &quot;/usr/lib/libGL&quot;,
            fileName() will return &quot;/usr/lib/libGL.so&quot;.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibrary.LoadHints">
            <summary>
            <para>This property holds give the load() function some hints on how it
            should behave.</para>
            <para>You can give some hints on how the symbols are resolved. Usually,
            the symbols are not resolved at load time, but resolved lazily, (that is,
            when resolve() is called). If you set the loadHints to
            ResolveAllSymbolsHint, then all symbols will be resolved at load time if
            the platform supports it.</para>
            <para>Setting ExportExternalSymbolsHint will make the external symbols
            in the library available for resolution in subsequent loaded
            libraries.</para>
            <para>If LoadArchiveMemberHint is set, the file name is composed of two
            components: A path which is a reference to an archive file followed by the
            second component which is the reference to the archive member. For
            instance, the fileName libGL.a(shr_64.o) will refer to the library shr_64.o
            in the archive file named libGL.a. This is only supported on the AIX
            platform.</para>
            <para>Setting PreventUnloadHint will only apply on Unix
            platforms.</para>
            <para>The interpretation of the load hints is platform dependent, and
            if you use it you are probably making some assumptions on which platform
            you are compiling for, so use them only if you understand the consequences
            of them.</para>
            <para>By default, none of these flags are set, so libraries will be
            loaded with lazy symbol resolution, and will not export external symbols
            for resolution in other dynamically-loaded libraries.</para>
            <para>Note: Setting this property after the library has been loaded has
            no effect and loadHints() will not reflect those changes.</para>
            <para>Note: This property is shared among all QLibrary instances that
            refer to the same library.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibrary.IsLoaded">
            <summary>
            <para>Returns true if the library is loaded; otherwise returns
            false.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLibrary.ErrorString">
            <summary>
            <para>Returns a text string with the description of the last error that
            occurred. Currently, errorString will only be set if load(), unload() or
            resolve() for some reason fails.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtCore.QLibrary.LoadHint">
            <summary>
            <para>This enum describes the possible hints that can be used to change
            the way libraries are handled when they are loaded. These values indicate
            how symbols are resolved when libraries are loaded, and are specified using
            the setLoadHints() function.</para>
            <para>The LoadHints type is a typedef for QFlags&lt;LoadHint&gt;. It
            stores an OR combination of LoadHint values.</para>
            <para>See also loadHints.</para>
            </summary>
        </member>
        <member name="F:QtCore.QLibrary.LoadHint.ResolveAllSymbolsHint">
            <summary>Causes all symbols in a library to be resolved when it is loaded, not simply when resolve() is called.</summary>
        </member>
        <member name="F:QtCore.QLibrary.LoadHint.ExportExternalSymbolsHint">
            <summary>Exports unresolved and external symbols in the library so that they can be resolved in other dynamically-loaded libraries loaded later.</summary>
        </member>
        <member name="F:QtCore.QLibrary.LoadHint.LoadArchiveMemberHint">
            <summary>Allows the file name of the library to specify a particular object file within an archive file. If this hint is given, the filename of the library consists of a path, which is a reference to an archive file, followed by a reference to the archive member.</summary>
        </member>
        <member name="F:QtCore.QLibrary.LoadHint.PreventUnloadHint">
            <summary>Prevents the library from being unloaded from the address space if close() is called. The library's static variables are not reinitialized if open() is called at a later time.</summary>
        </member>
        <member name="F:QtCore.QLibrary.LoadHint.DeepBindHint">
            <summary>Instructs the linker to prefer definitions in the loaded library over exported definitions in the loading application when resolving external symbols in the loaded library. This option is only supported on Linux.</summary>
        </member>
        <member name="T:QtCore.QStaticPlugin">
            <summary>
            <para>QStaticPlugin is a struct containing a reference to a static
            plugin instance together with its meta data.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also QPluginLoader and How to Create Qt Plugins.</para>
            </remarks>
        </member>
        <member name="P:QtCore.QStaticPlugin.MetaData">
            <summary>
            <para>Returns a the meta data for the plugin as a QJsonObject.</para>
            <para>See also rawMetaData().</para>
            </summary>
        </member>
        <member name="M:QtCore.qplugin.QRegisterStaticPluginFunction(QtCore.QStaticPlugin)">
            <summary>
            <para>Registers the plugin specified with the plugin loader, and is
            used by Q_IMPORT_PLUGIN().</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtCore.QPluginLoader">
            <summary>
            <para>The QPluginLoader class loads a plugin at run-time.</para>
            </summary>
            <remarks>
            <para>QPluginLoader provides access to a Qt plugin. A Qt plugin is
            stored in a shared library (a DLL) and offers these benefits over shared
            libraries accessed using QLibrary:</para>
            <para></para>
            <para>QPluginLoader checks that a plugin is linked against the same
            version of Qt as the application.</para>
            <para>QPluginLoader provides direct access to a root component object
            (instance()), instead of forcing you to resolve a C function
            manually.</para>
            <para></para>
            <para>An instance of a QPluginLoader object operates on a single shared
            library file, which we call a plugin. It provides access to the
            functionality in the plugin in a platform-independent way. To specify which
            plugin to load, either pass a file name in the constructor or set it with
            setFileName().</para>
            <para>The most important functions are load() to dynamically load the
            plugin file, isLoaded() to check whether loading was successful, and
            instance() to access the root component in the plugin. The instance()
            function implicitly tries to load the plugin if it has not been loaded yet.
            Multiple instances of QPluginLoader can be used to access the same physical
            plugin.</para>
            <para>Once loaded, plugins remain in memory until all instances of
            QPluginLoader has been unloaded, or until the application terminates. You
            can attempt to unload a plugin using unload(), but if other instances of
            QPluginLoader are using the same library, the call will fail, and unloading
            will only happen when every instance has called unload(). Right before the
            unloading happen, the root component will also be deleted.</para>
            <para>See How to Create Qt Plugins for more information about how to
            make your application extensible through plugins.</para>
            <para>Note that the QPluginLoader cannot be used if your application is
            statically linked against Qt. In this case, you will also have to link to
            plugins statically. You can use QLibrary if you need to load dynamic
            libraries in a statically linked application.</para>
            <para></para>
            <para>See also QLibrary and Plug &amp; Paint Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPluginLoader.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a plugin loader with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPluginLoader.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a plugin loader with the given parent that will load
            the plugin specified by fileName.</para>
            <para>To be loadable, the file's suffix must be a valid suffix for a
            loadable library in accordance with the platform, e.g. .so on Unix, -
            .dylib on OS X and iOS, and .dll on Windows. The suffix can be verified
            with QLibrary::isLibrary().</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPluginLoader.Load">
            <summary>
            <para>Loads the plugin and returns true if the plugin was loaded
            successfully; otherwise returns false. Since instance() always calls this
            function before resolving any symbols it is not necessary to call it
            explicitly. In some situations you might want the plugin loaded in advance,
            in which case you would use this function.</para>
            <para>See also unload().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPluginLoader.Unload">
            <summary>
            <para>Unloads the plugin and returns true if the plugin could be
            unloaded; otherwise returns false.</para>
            <para>This happens automatically on application termination, so you
            shouldn't normally need to call this function.</para>
            <para>If other instances of QPluginLoader are using the same plugin,
            the call will fail, and unloading will only happen when every instance has
            called unload().</para>
            <para>Don't try to delete the root component. Instead rely on that
            unload() will automatically delete it when needed.</para>
            <para>See also instance() and load().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPluginLoader.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.FileName">
            <summary>
            <para>This property holds the file name of the plugin.</para>
            <para>We recommend omitting the file's suffix in the file name, since
            QPluginLoader will automatically look for the file with the appropriate
            suffix (see QLibrary::isLibrary()).</para>
            <para>When loading the plugin, QPluginLoader searches in the current
            directory and in all plugin locations specified by
            QCoreApplication::libraryPaths(), unless the file name has an absolute
            path. After loading the plugin successfully, fileName() returns the
            fully-qualified file name of the plugin, including the full path to the
            plugin if one was given in the constructor or passed to
            setFileName().</para>
            <para>If the file name does not exist, it will not be set. This
            property will then contain an empty string.</para>
            <para>By default, this property contains an empty string.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.LoadHints">
            <summary>
            <para>This property holds give the load() function some hints on how it
            should behave.</para>
            <para>You can give hints on how the symbols in the plugin are resolved.
            By default, none of the hints are set.</para>
            <para>See the documentation of QLibrary::loadHints for a complete
            description of how this property works.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also QLibrary::loadHints.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.Instance">
            <summary>
            <para>Returns the root component object of the plugin. The plugin is
            loaded if necessary. The function returns 0 if the plugin could not be
            loaded or if the root component object could not be instantiated.</para>
            <para>If the root component object was destroyed, calling this function
            creates a new instance.</para>
            <para>The root component, returned by this function, is not deleted
            when the QPluginLoader is destroyed. If you want to ensure that the root
            component is deleted, you should call unload() as soon you don't need to
            access the core component anymore. When the library is finally unloaded,
            the root component will automatically be deleted.</para>
            <para>The component object is a QObject. Use qobject_cast() to access
            interfaces you are interested in.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.MetaData">
            <summary>
            <para>Returns the meta data for this plugin. The meta data is data
            specified in a json format using the Q_PLUGIN_METADATA() macro when
            compiling the plugin.</para>
            <para>The meta data can be queried in a fast and inexpensive way
            without actually loading the plugin. This makes it possible to e.g. store
            capabilities of the plugin in there, and make the decision whether to load
            the plugin dependent on this meta data.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.IsLoaded">
            <summary>
            <para>Returns true if the plugin is loaded; otherwise returns
            false.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPluginLoader.ErrorString">
            <summary>
            <para>Returns a text string with the description of the last error that
            occurred.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtCore.QUuid">
            <summary>
            <para>The QUuid class stores a Universally Unique Identifier
            (UUID).</para>
            </summary>
            <remarks>
            <para>Using Universally Unique IDentifiers (UUID) is a standard way to
            uniquely identify entities in a distributed computing environment. A UUID
            is a 16-byte (128-bit) number generated by some algorithm that is meant to
            guarantee that the UUID will be unique in the distributed computing
            environment where it is used. The acronym GUID is often used instead,
            Globally Unique IDentifiers, but it refers to the same thing.</para>
            <para></para>
            <para>Actually, the GUID is one variant of UUID. Multiple variants are
            in use. Each UUID contains a bit field that specifies which type (variant)
            of UUID it is. Call variant() to discover which type of UUID an instance of
            QUuid contains. It extracts the three most significant bits of byte 8 of
            the 16 bytes. In QUuid, byte 8 is QUuid::data4[0]. If you create instances
            of QUuid using the constructor that accepts all the numeric values as
            parameters, use the following table to set the three most significant bits
            of parameter b1, which becomes QUuid::data4[0] and contains the variant
            field in its three most significant bits. In the table, 'x' means don't
            care.</para>
            <para></para>
            <para> msb0msb1msb2Variant</para>
            <para>0	x	x	NCS (Network Computing System)</para>
            <para>1	0	x	DCE (Distributed Computing Environment)</para>
            <para>1	1	0	Microsoft (GUID)</para>
            <para>1	1	1	Reserved for future expansion</para>
            <para></para>
            <para></para>
            <para>If variant() returns QUuid::DCE, the UUID also contains a version
            field in the four most significant bits of QUuid::data3, and you can call
            version() to discover which version your QUuid contains. If you create
            instances of QUuid using the constructor that accepts all the numeric
            values as parameters, use the following table to set the four most
            significant bits of parameter w2, which becomes QUuid::data3 and contains
            the version field in its four most significant bits.</para>
            <para></para>
            <para> msb0msb1msb2msb3Version</para>
            <para>0	0	0	1	Time</para>
            <para>0	0	1	0	Embedded POSIX</para>
            <para>0	0	1	1	Md5(Name)</para>
            <para>0	1	0	0	Random</para>
            <para>0	1	0	1	Sha1</para>
            <para></para>
            <para>The field layouts for the DCE versions listed in the table above
            are specified in the Network Working Group UUID Specification.</para>
            <para>Most platforms provide a tool for generating new UUIDs, e.g.
            uuidgen and guidgen. You can also use createUuid(). UUIDs generated by
            createUuid() are of the random type. Their QUuid::Version bits are set to
            QUuid::Random, and their QUuid::Variant bits are set to QUuid::DCE. The
            rest of the UUID is composed of random numbers. Theoretically, this means
            there is a small chance that a UUID generated by createUuid() will not be
            unique. But it is a very small chance.</para>
            <para>UUIDs can be constructed from numeric values or from strings, or
            using the static createUuid() function. They can be converted to a string
            with toString(). UUIDs have a variant() and a version(), and null UUIDs
            return true from isNull().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QUuid.#ctor">
            <summary>
            <para>Creates the null UUID. toString() will output the null UUID as
            &quot;{00000000-0000-0000-0000-000000000000}&quot;.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            <para>Creates a UUID with the value specified by the parameters, l, w1,
            w2, b1, b2, b3, b4, b5, b6, b7, b8.</para>
            <para>Example:</para>
            <para>// {67C8770B-44F1-410A-AB9A-F9B5446F13EE}</para>
            <para>QUuid IID_MyInterface(0x67c8770b, 0x44f1, 0x410a, 0xab, 0x9a,
            0xf9, 0xb5, 0x44, 0x6f, 0x13, 0xee);</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.#ctor(System.String)">
            <summary>
            <para>Creates a QUuid object from the string text, which must be
            formatted as five hex fields separated by '-', e.g.,
            &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex
            digit. The curly braces shown here are optional, but it is normal to
            include them. If the conversion fails, a null UUID is created. See
            toString() for an explanation of how the five hex fields map to the public
            data members in QUuid.</para>
            <para>See also toString() and QUuid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Creates a QUuid object from the QByteArray text, which must be
            formatted as five hex fields separated by '-', e.g.,
            &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex
            digit. The curly braces shown here are optional, but it is normal to
            include them. If the conversion fails, a null UUID is created. See
            toByteArray() for an explanation of how the five hex fields map to the
            public data members in QUuid.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also toByteArray() and QUuid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.#ctor(QtCore._GUID)">
            <summary>
            <para>Casts a Windows guid to a Qt QUuid.</para>
            <para>Warning: This function is only for Windows platforms.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.ToString">
            <summary>
            <para>Returns the string representation of this QUuid. The string is
            formatted as five hex fields separated by '-' and enclosed in curly braces,
            i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x' is a hex
            digit. From left to right, the five hex fields are obtained from the four
            public data members in QUuid as follows:</para>
            <para></para>
            <para> Field #Source</para>
            <para>1	data1</para>
            <para>2	data2</para>
            <para>3	data3</para>
            <para>4	data4[0] .. data4[1]</para>
            <para>5	data4[2] .. data4[7]</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.ToByteArray">
            <summary>
            <para>Returns the binary representation of this QUuid. The byte array
            is formatted as five hex fields separated by '-' and enclosed in curly
            braces, i.e., &quot;{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}&quot; where 'x'
            is a hex digit. From left to right, the five hex fields are obtained from
            the four public data members in QUuid as follows:</para>
            <para></para>
            <para> Field #Source</para>
            <para>1	data1</para>
            <para>2	data2</para>
            <para>3	data3</para>
            <para>4	data4[0] .. data4[1]</para>
            <para>5	data4[2] .. data4[7]</para>
            <para></para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.ToRfc4122">
            <summary>
            <para>Returns the binary representation of this QUuid. The byte array
            is in big endian format, and formatted according to RFC 4122, section 4.1.2
            - &quot;Layout and byte order&quot;.</para>
            <para>The order is as follows:</para>
            <para></para>
            <para> Field #Source</para>
            <para>1	data1</para>
            <para>2	data2</para>
            <para>3	data3</para>
            <para>4	data4[0] .. data4[7]</para>
            <para></para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_Equality(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if this QUuid and the other QUuid are identical;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_Inequality(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if this QUuid and the other QUuid are different;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_LessThan(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if this QUuid has the same variant field as the
            other QUuid and is lexicographically before the other QUuid. If the other
            QUuid has a different variant field, the return value is determined by
            comparing the two variants.</para>
            <para>See also variant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_GreaterThan(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if this QUuid has the same variant field as the
            other QUuid and is lexicographically after the other QUuid. If the other
            QUuid has a different variant field, the return value is determined by
            comparing the two variants.</para>
            <para>See also variant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_Equality(QtCore.QUuid,QtCore._GUID)">
            <summary>
            <para>Returns true if this UUID is equal to the Windows GUID guid;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_Inequality(QtCore.QUuid,QtCore._GUID)">
            <summary>
            <para>Returns true if this UUID is not equal to the Windows GUID guid;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.FromRfc4122(QtCore.QByteArray)">
            <summary>
            <para>Creates a QUuid object from the binary representation of the
            UUID, as specified by RFC 4122 section 4.1.2. See toRfc4122() for a further
            explanation of the order of bytes required.</para>
            <para>The byte array accepted is NOT a human readable format.</para>
            <para>If the conversion fails, a null UUID is created.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also toRfc4122() and QUuid().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.CreateUuid">
            <summary>
            <para>On any platform other than Windows, this function returns a new
            UUID with variant QUuid::DCE and version QUuid::Random. If the /dev/urandom
            device exists, then the numbers used to construct the UUID will be of
            cryptographic quality, which will make the UUID unique. Otherwise, the
            numbers of the UUID will be obtained from the local pseudo-random number
            generator (qrand(), which is seeded by qsrand()) which is usually not of
            cryptograhic quality, which means that the UUID can't be guaranteed to be
            unique.</para>
            <para>On a Windows platform, a GUID is generated, which almost
            certainly will be unique, on this or any other system, networked or
            not.</para>
            <para>See also variant() and version().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.CreateUuidV3(QtCore.QUuid,QtCore.QByteArray)">
            <summary>
            <para>This function returns a new UUID with variant QUuid::DCE and
            version QUuid::Md5. ns is the namespace and baseData is the basic data as
            described by RFC 4122.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also variant(), version(), and createUuidV5().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.CreateUuidV5(QtCore.QUuid,QtCore.QByteArray)">
            <summary>
            <para>This function returns a new UUID with variant QUuid::DCE and
            version QUuid::Sha1. ns is the namespace and baseData is the basic data as
            described by RFC 4122.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also variant(), version(), and createUuidV3().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.CreateUuidV3(QtCore.QUuid,System.String)">
            <summary>
            <para>This function returns a new UUID with variant QUuid::DCE and
            version QUuid::Md5. ns is the namespace and baseData is the basic data as
            described by RFC 4122.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also variant(), version(), and createUuidV5().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.CreateUuidV5(QtCore.QUuid,System.String)">
            <summary>
            <para>This function returns a new UUID with variant QUuid::DCE and
            version QUuid::Sha1. ns is the namespace and baseData is the basic data as
            described by RFC 4122.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also variant(), version(), and createUuidV3().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_LessThanOrEqual(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if lhs has the same variant field as rhs and is
            lexicographically not after rhs. If rhs has a different variant field, the
            return value is determined by comparing the two variants.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also variant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.op_GreaterThanOrEqual(QtCore.QUuid,QtCore.QUuid)">
            <summary>
            <para>Returns true if lhs has the same variant field as rhs and is
            lexicographically not before rhs. If rhs has a different variant field, the
            return value is determined by comparing the two variants.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also variant().</para>
            </summary>
        </member>
        <member name="M:QtCore.QUuid.QHash(QtCore.QUuid,System.UInt32)">
            <summary>
            <para>Returns a hash of the UUID uuid, using seed to seed the
            calculation.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QUuid.IsNull">
            <summary>
            <para>Returns true if this is the null UUID
            {00000000-0000-0000-0000-000000000000}; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QUuid.variant">
            <summary>
            <para>Returns the value in the variant field of the UUID. If the return
            value is QUuid::DCE, call version() to see which layout it uses. The null
            UUID is considered to be of an unknown variant.</para>
            <para>See also version().</para>
            </summary>
        </member>
        <member name="P:QtCore.QUuid.version">
            <summary>
            <para>Returns the version field of the UUID, if the UUID's variant
            field is QUuid::DCE. Otherwise it returns QUuid::VerUnknown.</para>
            <para>See also variant().</para>
            </summary>
        </member>
        <member name="T:QtCore.QUuid.Variant">
            <summary>
            <para>This enum defines the values used in the variant field of the
            UUID. The value in the variant field determines the layout of the 128-bit
            value.</para>
            </summary>
        </member>
        <member name="F:QtCore.QUuid.Variant.VarUnknown">
            <summary>Variant is unknown</summary>
        </member>
        <member name="F:QtCore.QUuid.Variant.NCS">
            <summary>Reserved for NCS (Network Computing System) backward compatibility</summary>
        </member>
        <member name="F:QtCore.QUuid.Variant.DCE">
            <summary>Distributed Computing Environment, the scheme used by QUuid</summary>
        </member>
        <member name="F:QtCore.QUuid.Variant.Microsoft">
            <summary>Reserved for Microsoft backward compatibility (GUID)</summary>
        </member>
        <member name="F:QtCore.QUuid.Variant.Reserved">
            <summary>Reserved for future definition</summary>
        </member>
        <member name="T:QtCore.QUuid.Version">
            <summary>
            <para>This enum defines the values used in the version field of the
            UUID. The version field is meaningful only if the value in the variant
            field is QUuid::DCE.</para>
            </summary>
        </member>
        <member name="F:QtCore.QUuid.Version.VerUnknown">
            <summary>Version is unknown</summary>
        </member>
        <member name="F:QtCore.QUuid.Version.Time">
            <summary>Time-based, by using timestamp, clock sequence, and MAC network card address (if available) for the node sections</summary>
        </member>
        <member name="F:QtCore.QUuid.Version.EmbeddedPOSIX">
            <summary>DCE Security version, with embedded POSIX UUIDs</summary>
        </member>
        <member name="F:QtCore.QUuid.Version.Md5">
            <summary>Alias for Name</summary>
        </member>
        <member name="F:QtCore.QUuid.Version.Name">
            <summary>Name-based, by using values from a name for all sections</summary>
        </member>
        <member name="F:QtCore.QUuid.Version.Random">
            <summary>Random-based, by using random numbers for all sections</summary>
        </member>
        <member name="T:QtCore.QAbstractState">
            <summary>
            <para>The QAbstractState class is the base class of states of a
            QStateMachine.</para>
            </summary>
            <remarks>
            <para>The QAbstractState class is the abstract base class of states
            that are part of a QStateMachine. It defines the interface that all state
            objects have in common. QAbstractState is part of The State Machine
            Framework.</para>
            <para>The entered() signal is emitted when the state has been entered.
            The exited() signal is emitted when the state has been exited.</para>
            <para>The parentState() function returns the state's parent state. The
            machine() function returns the state machine that the state is part
            of.</para>
            <para></para>
            <para>Subclassing</para>
            <para>The onEntry() function is called when the state is entered;
            reimplement this function to perform custom processing when the state is
            entered.</para>
            <para>The onExit() function is called when the state is exited;
            reimplement this function to perform custom processing when the state is
            exited.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractState.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new state with the given parent state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractState.OnEntry(QtCore.QEvent)">
            <summary>
            <para>This function is called when the state is entered. The given
            event is what caused the state to be entered. Reimplement this function to
            perform custom processing when the state is entered.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractState.OnExit(QtCore.QEvent)">
            <summary>
            <para>This function is called when the state is exited. The given event
            is what caused the state to be exited. Reimplement this function to perform
            custom processing when the state is exited.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractState.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractState.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractState.Entered">
            <summary>
            <para>This signal is emitted when the state has been entered (after onEntry() has been called).</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractState.Exited">
            <summary>
            <para>This signal is emitted when the state has been exited (after onExit() has been called).</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractState.ActiveChanged">
            <summary>
            <para>This property holds the active property of this state. A state is active between entered() and exited() signals.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	active() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeChanged(bool active)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractState.ParentState">
            <summary>
            <para>Returns this state's parent state, or 0 if the state has no
            parent state.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractState.Machine">
            <summary>
            <para>Returns the state machine that this state is part of, or 0 if the
            state is not part of a state machine.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractState.Active">
            <summary>
            <para>This property holds the active property of this state. A state is
            active between entered() and exited() signals.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractTransition">
            <summary>
            <para>The QAbstractTransition class is the base class of transitions
            between QAbstractState objects.</para>
            </summary>
            <remarks>
            <para>The QAbstractTransition class is the abstract base class of
            transitions between states (QAbstractState objects) of a QStateMachine.
            QAbstractTransition is part of The State Machine Framework.</para>
            <para>The sourceState() function returns the source of the transition.
            The targetStates() function returns the targets of the transition. The
            machine() function returns the state machine that the transition is part
            of.</para>
            <para>The triggered() signal is emitted when the transition has been
            triggered.</para>
            <para>Transitions can cause animations to be played. Use the
            addAnimation() function to add an animation to the transition.</para>
            <para></para>
            <para>Subclassing</para>
            <para>The eventTest() function is called by the state machine to
            determine whether an event should trigger the transition. In your
            reimplementation you typically check the event type and cast the event
            object to the proper type, and check that one or more properties of the
            event meet your criteria.</para>
            <para>The onTransition() function is called when the transition is
            triggered; reimplement this function to perform custom processing for the
            transition.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QAbstractTransition.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new QAbstractTransition object with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.AddAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Adds the given animation to this transition. The transition does
            not take ownership of the animation.</para>
            <para>See also removeAnimation() and animations().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.RemoveAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Removes the given animation from this transition.</para>
            <para>See also addAnimation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.EventTest(QtCore.QEvent)">
            <summary>
            <para>This function is called to determine whether the given event
            should cause this transition to trigger. Reimplement this function and
            return true if the event should trigger the transition, otherwise return
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.OnTransition(QtCore.QEvent)">
            <summary>
            <para>This function is called when the transition is triggered. The
            given event is what caused the transition to trigger. Reimplement this
            function to perform custom processing when the transition is
            triggered.</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QAbstractTransition.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractTransition.Triggered">
            <summary>
            <para>This signal is emitted when the transition has been triggered (after onTransition() has been called).</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractTransition.TargetStateChanged">
            <summary>
            <para>This property holds the target state of this transition.</para>
            <para>If a transition has no target state, the transition may still be triggered, but this will not cause the state machine's configuration to change (i.e. the current state will not be exited and re-entered).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractState * 	targetState() const</para>
            <para> void 	setTargetState(QAbstractState * target)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetStateChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QAbstractTransition.TargetStatesChanged">
            <summary>
            <para>This property holds the target states of this transition.</para>
            <para>If multiple states are specified, all must be descendants of the same parallel group state.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QList&lt;QAbstractState *&gt; 	targetStates() const</para>
            <para> void 	setTargetStates(const QList&lt;QAbstractState *&gt; &amp; targets)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	targetStatesChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractTransition.TargetState">
            <summary>
            <para>This property holds the target state of this transition.</para>
            <para>If a transition has no target state, the transition may still be
            triggered, but this will not cause the state machine's configuration to
            change (i.e. the current state will not be exited and re-entered).</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractTransition.transitionType">
            <summary>
            <para>This property holds indicates whether this transition is an
            internal transition, or an external transition.</para>
            <para>Internal and external transitions behave the same, except for the
            case of a transition whose source state is a compound state and whose
            target(s) is a descendant of the source. In such a case, an internal
            transition will not exit and re-enter its source state, while an external
            one will.</para>
            <para>By default, the type is an external transition.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractTransition.SourceState">
            <summary>
            <para>This property holds the source state (parent) of this
            transition.</para>
            </summary>
        </member>
        <member name="P:QtCore.QAbstractTransition.Machine">
            <summary>
            <para>Returns the state machine that this transition is part of, or 0
            if the transition is not part of a state machine.</para>
            </summary>
        </member>
        <member name="T:QtCore.QAbstractTransition.TransitionType">
            <summary>
            <para>This enum specifies the kind of transition. By default, the type
            is an external transition.</para>
            <para>See also QAbstractTransition::transitionType.</para>
            </summary>
        </member>
        <member name="F:QtCore.QAbstractTransition.TransitionType.ExternalTransition">
            <summary>Any state that is the source state of a transition (which is not a target-less transition) is left, and re-entered when necessary.</summary>
        </member>
        <member name="F:QtCore.QAbstractTransition.TransitionType.InternalTransition">
            <summary>If the target state of a transition is a sub-state of a compound state, and that compound state is the source state, an internal transition will not leave the source state.</summary>
        </member>
        <member name="T:QtCore.QEventTransition">
            <summary>
            <para>The QEventTransition class provides a QObject-specific transition
            for Qt events.</para>
            </summary>
            <remarks>
            <para>A QEventTransition object binds an event to a particular QObject.
            QEventTransition is part of The State Machine Framework.</para>
            <para>Example:</para>
            <para>QPushButton *button = ...;</para>
            <para>QState *s1 = ...;</para>
            <para>QState *s2 = ...;</para>
            <para>// If in s1 and the button receives an Enter event, transition to
            s2</para>
            <para>QEventTransition *enterTransition = new QEventTransition(button,
            QEvent::Enter);</para>
            <para>enterTransition-&gt;setTargetState(s2);</para>
            <para>s1-&gt;addTransition(enterTransition);</para>
            <para>// If in s2 and the button receives an Exit event, transition
            back to s1</para>
            <para>QEventTransition *leaveTransition = new QEventTransition(button,
            QEvent::Leave);</para>
            <para>leaveTransition-&gt;setTargetState(s1);</para>
            <para>s2-&gt;addTransition(leaveTransition);</para>
            <para></para>
            <para>Subclassing</para>
            <para>When reimplementing the eventTest() function, you should first
            call the base implementation to verify that the event is a
            QStateMachine::WrappedEvent for the proper object and event type. You may
            then cast the event to a QStateMachine::WrappedEvent and get the original
            event by calling QStateMachine::WrappedEvent::event(), and perform
            additional checks on that object.</para>
            <para></para>
            <para>See also QState::addTransition().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QEventTransition.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new QEventTransition object with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventTransition.#ctor(QtCore.QObject,QtCore.QEvent.Type,QtCore.QState)">
            <summary>
            <para>Constructs a new QEventTransition object associated with events
            of the given type for the given object, and with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventTransition.EventTest(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::eventTest().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventTransition.OnTransition(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::onTransition().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventTransition.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QEventTransition.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEventTransition.EventSource">
            <summary>
            <para>This property holds the event source that this event transition
            is associated with.</para>
            </summary>
        </member>
        <member name="P:QtCore.QEventTransition.EventType">
            <summary>
            <para>This property holds the type of event that this event transition
            is associated with.</para>
            </summary>
        </member>
        <member name="T:QtCore.QFinalState">
            <summary>
            <para>The QFinalState class provides a final state.</para>
            </summary>
            <remarks>
            <para>A final state is used to communicate that (part of) a
            QStateMachine has finished its work. When a final top-level state is
            entered, the state machine's finished() signal is emitted. In general, when
            a final substate (a child of a QState) is entered, the parent state's
            finished() signal is emitted. QFinalState is part of The State Machine
            Framework.</para>
            <para>To use a final state, you create a QFinalState object and add a
            transition to it from another state. Example:</para>
            <para>QPushButton button;</para>
            <para></para>
            <para>QStateMachine machine;</para>
            <para>QState *s1 = new QState();</para>
            <para>QFinalState *s2 = new QFinalState();</para>
            <para>s1-&gt;addTransition(&amp;button, SIGNAL(clicked()), s2);</para>
            <para>machine.addState(s1);</para>
            <para>machine.addState(s2);</para>
            <para></para>
            <para>QObject::connect(&amp;machine, SIGNAL(finished()),
            QApplication::instance(), SLOT(quit()));</para>
            <para>machine.setInitialState(s1);</para>
            <para>machine.start();</para>
            <para></para>
            <para>See also QState::finished().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QFinalState.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new QFinalState object with the given parent
            state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFinalState.OnEntry(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onEntry().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFinalState.OnExit(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onExit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFinalState.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QFinalState.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QHistoryState">
            <summary>
            <para>The QHistoryState class provides a means of returning to a
            previously active substate.</para>
            </summary>
            <remarks>
            <para>A history state is a pseudo-state that represents the child state
            that the parent state was in the last time the parent state was exited. A
            transition with a history state as its target is in fact a transition to
            one of the other child states of the parent state. QHistoryState is part of
            The State Machine Framework.</para>
            <para>Use the setDefaultState() function to set the state that should
            be entered if the parent state has never been entered. Example:</para>
            <para>QStateMachine machine;</para>
            <para></para>
            <para>QState *s1 = new QState();</para>
            <para>QState *s11 = new QState(s1);</para>
            <para>QState *s12 = new QState(s1);</para>
            <para></para>
            <para>QHistoryState *s1h = new QHistoryState(s1);</para>
            <para>s1h-&gt;setDefaultState(s11);</para>
            <para></para>
            <para>machine.addState(s1);</para>
            <para></para>
            <para>QState *s2 = new QState();</para>
            <para>machine.addState(s2);</para>
            <para></para>
            <para>QPushButton *button = new QPushButton();</para>
            <para>// Clicking the button will cause the state machine to enter the
            child state</para>
            <para>// that s1 was in the last time s1 was exited, or the history
            state's default</para>
            <para>// state if s1 has never been entered.</para>
            <para>s1-&gt;addTransition(button, SIGNAL(clicked()), s1h);</para>
            <para>By default a history state is shallow, meaning that it won't
            remember nested states. This can be configured through the historyType
            property.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QHistoryState.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new shallow history state with the given parent
            state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QHistoryState.#ctor(QtCore.QHistoryState.HistoryType,QtCore.QState)">
            <summary>
            <para>Constructs a new history state of the given type, with the given
            parent state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QHistoryState.OnEntry(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onEntry().</para>
            </summary>
        </member>
        <member name="M:QtCore.QHistoryState.OnExit(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onExit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QHistoryState.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QHistoryState.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QHistoryState.DefaultStateChanged">
            <summary>
            <para>This property holds the default state of this history state.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractState * 	defaultState() const</para>
            <para> void 	setDefaultState(QAbstractState * state)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	defaultStateChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QHistoryState.HistoryTypeChanged">
            <summary>
            <para>This property holds the type of history that this history state records.</para>
            <para>The default value of this property is QHistoryState::ShallowHistory.</para>
            <para>Access functions:</para>
            <para></para>
            <para> HistoryType 	historyType() const</para>
            <para> void 	setHistoryType(HistoryType type)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	historyTypeChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QHistoryState.DefaultState">
            <summary>
            <para>This property holds the default state of this history
            state.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QHistoryState.historyType">
            <summary>
            <para>This property holds the type of history that this history state
            records.</para>
            <para>The default value of this property is
            QHistoryState::ShallowHistory.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="T:QtCore.QHistoryState.HistoryType">
            <summary>
            <para>This enum specifies the type of history that a QHistoryState
            records.</para>
            </summary>
        </member>
        <member name="F:QtCore.QHistoryState.HistoryType.ShallowHistory">
            <summary>Only the immediate child states of the parent state are recorded. In this case a transition with the history state as its target will end up in the immediate child state that the parent was in the last time it was exited. This is the default.</summary>
        </member>
        <member name="F:QtCore.QHistoryState.HistoryType.DeepHistory">
            <summary>Nested states are recorded. In this case a transition with the history state as its target will end up in the most deeply nested descendant state the parent was in the last time it was exited.</summary>
        </member>
        <member name="T:QtCore.QSignalTransition">
            <summary>
            <para>The QSignalTransition class provides a transition based on a Qt
            signal.</para>
            </summary>
            <remarks>
            <para>Typically you would use the overload of QState::addTransition()
            that takes a sender and signal as arguments, rather than creating
            QSignalTransition objects directly. QSignalTransition is part of The State
            Machine Framework.</para>
            <para>You can subclass QSignalTransition and reimplement eventTest() to
            make a signal transition conditional; the event object passed to
            eventTest() will be a QStateMachine::SignalEvent object. Example:</para>
            <para>class CheckedTransition : public QSignalTransition</para>
            <para>{</para>
            <para>public:</para>
            <para>    CheckedTransition(QCheckBox *check)</para>
            <para>        : QSignalTransition(check, SIGNAL(stateChanged(int)))
            {}</para>
            <para>protected:</para>
            <para>    bool eventTest(QEvent *e) {</para>
            <para>        if (!QSignalTransition::eventTest(e))</para>
            <para>            return false;</para>
            <para>        QStateMachine::SignalEvent *se =
            static_cast&lt;QStateMachine::SignalEvent*&gt;(e);</para>
            <para>        return (se-&gt;arguments().at(0).toInt() ==
            Qt::Checked);</para>
            <para>    }</para>
            <para>};</para>
            <para></para>
            <para>...</para>
            <para></para>
            <para>QCheckBox *check = new QCheckBox();</para>
            <para>check-&gt;setTristate(true);</para>
            <para></para>
            <para>QState *s1 = new QState();</para>
            <para>QState *s2 = new QState();</para>
            <para>CheckedTransition *t1 = new CheckedTransition(check);</para>
            <para>t1-&gt;setTargetState(s2);</para>
            <para>s1-&gt;addTransition(t1);</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSignalTransition.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new signal transition with the given
            sourceState.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalTransition.#ctor(QtCore.QObject,System.String,QtCore.QState)">
            <summary>
            <para>Constructs a new signal transition associated with the given
            signal of the given sender, and with the given sourceState.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalTransition.EventTest(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::eventTest().</para>
            <para>The default implementation returns true if the event is a
            QStateMachine::SignalEvent object and the event's sender and signal index
            match this transition, and returns false otherwise.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalTransition.OnTransition(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractTransition::onTransition().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalTransition.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSignalTransition.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QSignalTransition.SenderObjectChanged">
            <summary>
            <para>This property holds the sender object that this signal transition is associated with.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QObject * 	senderObject() const</para>
            <para> void 	setSenderObject(const QObject * sender)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	senderObjectChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QSignalTransition.SignalChanged">
            <summary>
            <para>This property holds the signal that this signal transition is associated with.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QByteArray 	signal() const</para>
            <para> void 	setSignal(const QByteArray &amp; signal)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	signalChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSignalTransition.SenderObject">
            <summary>
            <para>This property holds the sender object that this signal transition
            is associated with.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QSignalTransition.Signal">
            <summary>
            <para>This property holds the signal that this signal transition is
            associated with.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="T:QtCore.QState">
            <summary>
            <para>The QState class provides a general-purpose state for
            QStateMachine.</para>
            </summary>
            <remarks>
            <para>QState objects can have child states, and can have transitions to
            other states. QState is part of The State Machine Framework.</para>
            <para>The addTransition() function adds a transition. The
            removeTransition() function removes a transition. The transitions()
            function returns the state's outgoing transitions.</para>
            <para>The assignProperty() function is used for defining property
            assignments that should be performed when a state is entered.</para>
            <para>Top-level states must be passed a QStateMachine object as their
            parent state, or added to a state machine using
            QStateMachine::addState().</para>
            <para></para>
            <para>States with Child States</para>
            <para>The childMode property determines how child states are treated.
            For non-parallel state groups, the setInitialState() function must be
            called to set the initial state. The child states are mutually exclusive
            states, and the state machine needs to know which child state to enter when
            the parent state is the target of a transition.</para>
            <para>The state emits the QState::finished() signal when a final child
            state (QFinalState) is entered.</para>
            <para>The setErrorState() sets the state's error state. The error state
            is the state that the state machine will transition to if an error is
            detected when attempting to enter the state (e.g. because no initial state
            has been set).</para>
            </remarks>
        </member>
        <member name="M:QtCore.QState.#ctor(QtCore.QState)">
            <summary>
            <para>Constructs a new state with the given parent state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.#ctor(QtCore.QState.ChildMode,QtCore.QState)">
            <summary>
            <para>Constructs a new state with the given childMode and the given
            parent state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.AddTransition(QtCore.QAbstractTransition)">
            <summary>
            <para>Adds the given transition. The transition has this state as the
            source. This state takes ownership of the transition.</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.AddTransition(QtCore.QObject,System.String,QtCore.QAbstractState)">
            <summary>
            <para>Adds a transition associated with the given signal of the given
            sender object, and returns the new QSignalTransition object. The transition
            has this state as the source, and the given target as the target
            state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.AddTransition(QtCore.QAbstractState)">
            <summary>
            <para>Adds an unconditional transition from this state to the given
            target state, and returns then new transition object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.RemoveTransition(QtCore.QAbstractTransition)">
            <summary>
            <para>Removes the given transition from this state. The state releases
            ownership of the transition.</para>
            <para>See also addTransition().</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.AssignProperty(QtCore.QObject,System.String,QtCore.QVariant)">
            <summary>
            <para>Instructs this state to set the property with the given name of
            the given object to the given value when the state is entered.</para>
            <para>See also propertiesAssigned().</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.OnEntry(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onEntry().</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.OnExit(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onExit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QState.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QState.Finished">
            <summary>
            <para>This signal is emitted when a final child state of this state is entered.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QFinalState.</para>
            </summary>
        </member>
        <member name="E:QtCore.QState.PropertiesAssigned">
            <summary>
            <para>This signal is emitted when all properties have been assigned their final value. If the state assigns a value to one or more properties for which an animation exists (either set on the transition or as a default animation on the state machine), then the signal will not be emitted until all such animations have finished playing.</para>
            <para>If there are no relevant animations, or no property assignments defined for the state, then the signal will be emitted immediately before the state is entered.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QState::assignProperty() and QAbstractTransition::addAnimation().</para>
            </summary>
        </member>
        <member name="E:QtCore.QState.ChildModeChanged">
            <summary>
            <para>This property holds the child mode of this state.</para>
            <para>The default value of this property is QState::ExclusiveStates.</para>
            <para>Access functions:</para>
            <para></para>
            <para> ChildMode 	childMode() const</para>
            <para> void 	setChildMode(ChildMode mode)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	childModeChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QState.InitialStateChanged">
            <summary>
            <para>This property holds the initial state of this state (one of its child states).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractState * 	initialState() const</para>
            <para> void 	setInitialState(QAbstractState * state)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	initialStateChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QState.ErrorStateChanged">
            <summary>
            <para>This property holds the error state of this state.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QAbstractState * 	errorState() const</para>
            <para> void 	setErrorState(QAbstractState * state)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	errorStateChanged()	[see note below]</para>
            <para></para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QState.ErrorState">
            <summary>
            <para>This property holds the error state of this state.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QState.InitialState">
            <summary>
            <para>This property holds the initial state of this state (one of its
            child states).</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QState.childMode">
            <summary>
            <para>This property holds the child mode of this state.</para>
            <para>The default value of this property is
            QState::ExclusiveStates.</para>
            <para>Note: This is a private signal. It can be used in signal
            connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="T:QtCore.QState.ChildMode">
            <summary>
            <para>This enum specifies how a state's child states are
            treated.</para>
            </summary>
        </member>
        <member name="F:QtCore.QState.ChildMode.ExclusiveStates">
            <summary>The child states are mutually exclusive and an initial state must be set by calling QState::setInitialState().</summary>
        </member>
        <member name="F:QtCore.QState.ChildMode.ParallelStates">
            <summary>The child states are parallel. When the parent state is entered, all its child states are entered in parallel.</summary>
        </member>
        <member name="T:QtCore.QState.RestorePolicy">
            <summary>
            <para>This enum specifies the restore policy type. The restore policy
            takes effect when the machine enters a state which sets one or more
            properties. If the restore policy is set to RestoreProperties, the state
            machine will save the original value of the property before the new value
            is set.</para>
            <para>Later, when the machine either enters a state which does not set
            a value for the given property, the property will automatically be restored
            to its initial value.</para>
            <para>Only one initial value will be saved for any given property. If a
            value for a property has already been saved by the state machine, it will
            not be overwritten until the property has been successfully
            restored.</para>
            <para>See also QStateMachine::globalRestorePolicy and
            QState::assignProperty().</para>
            </summary>
        </member>
        <member name="F:QtCore.QState.RestorePolicy.DontRestoreProperties">
            <summary>The state machine should not save the initial values of properties and restore them later.</summary>
        </member>
        <member name="F:QtCore.QState.RestorePolicy.RestoreProperties">
            <summary>The state machine should save the initial values of properties and restore them later.</summary>
        </member>
        <member name="T:QtCore.QStateMachine">
            <summary>
            <para>The QStateMachine class provides a hierarchical finite state
            machine.</para>
            </summary>
            <remarks>
            <para>QStateMachine is based on the concepts and notation of
            Statecharts. QStateMachine is part of The State Machine Framework.</para>
            <para>A state machine manages a set of states (classes that inherit
            from QAbstractState) and transitions (descendants of QAbstractTransition)
            between those states; these states and transitions define a state graph.
            Once a state graph has been built, the state machine can execute it.
            QStateMachine's execution algorithm is based on the State Chart XML (SCXML)
            algorithm. The framework's overview gives several state graphs and the code
            to build them.</para>
            <para>Use the addState() function to add a top-level state to the state
            machine. States are removed with the removeState() function. Removing
            states while the machine is running is discouraged.</para>
            <para>Before the machine can be started, the initial state must be set.
            The initial state is the state that the machine enters when started. You
            can then start() the state machine. The started() signal is emitted when
            the initial state is entered.</para>
            <para>The machine is event driven and keeps its own event loop. Events
            are posted to the machine through postEvent(). Note that this means that it
            executes asynchronously, and that it will not progress without a running
            event loop. You will normally not have to post events to the machine
            directly as Qt's transitions, e.g., QEventTransition and its subclasses,
            handle this. But for custom transitions triggered by events, postEvent() is
            useful.</para>
            <para>The state machine processes events and takes transitions until a
            top-level final state is entered; the state machine then emits the
            finished() signal. You can also stop() the state machine explicitly. The
            stopped() signal is emitted in this case.</para>
            <para>The following snippet shows a state machine that will finish when
            a button is clicked:</para>
            <para>QPushButton button;</para>
            <para></para>
            <para>QStateMachine machine;</para>
            <para>QState *s1 = new QState();</para>
            <para>s1-&gt;assignProperty(&amp;button, &quot;text&quot;, &quot;Click
            me&quot;);</para>
            <para></para>
            <para>QFinalState *s2 = new QFinalState();</para>
            <para>s1-&gt;addTransition(&amp;button, SIGNAL(clicked()), s2);</para>
            <para></para>
            <para>machine.addState(s1);</para>
            <para>machine.addState(s2);</para>
            <para>machine.setInitialState(s1);</para>
            <para>machine.start();</para>
            <para>This code example uses QState, which inherits QAbstractState. The
            QState class provides a state that you can use to set properties and invoke
            methods on QObjects when the state is entered or exited. It also contains
            convenience functions for adding transitions, e.g., QSignalTransitions as
            in this example. See the QState class description for further
            details.</para>
            <para>If an error is encountered, the machine will look for an error
            state, and if one is available, it will enter this state. The types of
            errors possible are described by the Error enum. After the error state is
            entered, the type of the error can be retrieved with error(). The execution
            of the state graph will not stop when the error state is entered. If no
            error state applies to the erroneous state, the machine will stop executing
            and an error message will be printed to the console.</para>
            <para></para>
            <para>See also QAbstractState, QAbstractTransition, QState, and The
            State Machine Framework.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QStateMachine.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new state machine with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.#ctor(QtCore.QState.ChildMode,QtCore.QObject)">
            <summary>
            <para>Constructs a new state machine with the given childMode and
            parent.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.AddState(QtCore.QAbstractState)">
            <summary>
            <para>Adds the given state to this state machine. The state becomes a
            top-level state.</para>
            <para>If the state is already in a different machine, it will first be
            removed from its old machine, and then added to this machine.</para>
            <para>See also removeState() and setInitialState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.RemoveState(QtCore.QAbstractState)">
            <summary>
            <para>Removes the given state from this state machine. The state
            machine releases ownership of the state.</para>
            <para>See also addState().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.ClearError">
            <summary>
            <para>Clears the error string and error code of the state
            machine.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.AddDefaultAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Adds a default animation to be considered for any
            transition.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.RemoveDefaultAnimation(QtCore.QAbstractAnimation)">
            <summary>
            <para>Removes animation from the list of default animations.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.PostEvent(QtCore.QEvent,QtCore.QStateMachine.EventPriority)">
            <summary>
            <para>Posts the given event of the given priority for processing by
            this state machine.</para>
            <para>This function returns immediately. The event is added to the
            state machine's event queue. Events are processed in the order posted. The
            state machine takes ownership of the event and deletes it once it has been
            processed.</para>
            <para>You can only post events when the state machine is running or
            when it is starting up.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also postDelayedEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.PostDelayedEvent(QtCore.QEvent,System.Int32)">
            <summary>
            <para>Posts the given event for processing by this state machine, with
            the given delay in milliseconds. Returns an identifier associated with the
            delayed event, or -1 if the event could not be posted.</para>
            <para>This function returns immediately. When the delay has expired,
            the event will be added to the state machine's event queue for processing.
            The state machine takes ownership of the event and deletes it once it has
            been processed.</para>
            <para>You can only post events when the state machine is
            running.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also cancelDelayedEvent() and postEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.CancelDelayedEvent(System.Int32)">
            <summary>
            <para>Cancels the delayed event identified by the given id. The id
            should be a value returned by a call to postDelayedEvent(). Returns true if
            the event was successfully cancelled, otherwise returns false.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also postDelayedEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.EventFilter(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::eventFilter().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.Start">
            <summary>
            <para>Starts this state machine. The machine will reset its
            configuration and transition to the initial state. When a final top-level
            state (QFinalState) is entered, the machine will emit the finished()
            signal.</para>
            <para>Note: A state machine will not run without a running event loop,
            such as the main application event loop started with
            QCoreApplication::exec() or QApplication::exec().</para>
            <para>See also started(), finished(), stop(), initialState(), and
            setRunning().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.Stop">
            <summary>
            <para>Stops this state machine. The state machine will stop processing
            events and then emit the stopped() signal.</para>
            <para>See also stopped(), start(), and setRunning().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.OnEntry(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onEntry().</para>
            <para>This function will call start() to start the state
            machine.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.OnExit(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QAbstractState::onExit().</para>
            <para>This function will call stop() to stop the state machine and
            subsequently emit the stopped() signal.</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QStateMachine.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QStateMachine.Started">
            <summary>
            <para>This signal is emitted when the state machine has entered its initial state (QStateMachine::initialState).</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QStateMachine::finished() and QStateMachine::start().</para>
            </summary>
        </member>
        <member name="E:QtCore.QStateMachine.Stopped">
            <summary>
            <para>This signal is emitted when the state machine has stopped.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QStateMachine::stop() and QStateMachine::finished().</para>
            </summary>
        </member>
        <member name="E:QtCore.QStateMachine.RunningChanged">
            <summary>
            <para>This property holds the running state of this state machine.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isRunning() const</para>
            <para> void 	setRunning(bool running)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	runningChanged(bool running)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.Animated">
            <summary>
            <para>This property holds whether animations are enabled.</para>
            <para>The default value of this property is true.</para>
            <para>See also QAbstractTransition::addAnimation().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.GlobalRestorePolicy">
            <summary>
            <para>This property holds the restore policy for states of this state
            machine.</para>
            <para>The default value of this property is
            QState::DontRestoreProperties.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.Running">
            <summary>
            <para>This property holds the running state of this state
            machine.</para>
            <para>This property was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.error">
            <summary>
            <para>Returns the error code of the last error that occurred in the
            state machine.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.ErrorString">
            <summary>
            <para>This property holds the error string of this state
            machine.</para>
            </summary>
        </member>
        <member name="T:QtCore.QStateMachine.EventPriority">
            <summary>
            <para>This enum type specifies the priority of an event posted to the
            state machine using postEvent().</para>
            <para>Events of high priority are processed before events of normal
            priority.</para>
            </summary>
        </member>
        <member name="F:QtCore.QStateMachine.EventPriority.NormalPriority">
            <summary>The event has normal priority.</summary>
        </member>
        <member name="F:QtCore.QStateMachine.EventPriority.HighPriority">
            <summary>The event has high priority.</summary>
        </member>
        <member name="T:QtCore.QStateMachine.Error">
            <summary>
            <para>This enum type defines errors that can occur in the state machine
            at run time. When the state machine encounters an unrecoverable error at
            run time, it will set the error code returned by error(), the error message
            returned by errorString(), and enter an error state based on the context of
            the error.</para>
            <para>See also setErrorState().</para>
            </summary>
        </member>
        <member name="F:QtCore.QStateMachine.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtCore.QStateMachine.Error.NoInitialStateError">
            <summary>The machine has entered a QState with children which does not have an initial state set. The context of this error is the state which is missing an initial state.</summary>
        </member>
        <member name="F:QtCore.QStateMachine.Error.NoDefaultStateInHistoryStateError">
            <summary>The machine has entered a QHistoryState which does not have a default state set. The context of this error is the QHistoryState which is missing a default state.</summary>
        </member>
        <member name="F:QtCore.QStateMachine.Error.NoCommonAncestorForTransitionError">
            <summary>The machine has selected a transition whose source and targets are not part of the same tree of states, and thus are not part of the same state machine. Commonly, this could mean that one of the states has not been given any parent or added to any machine. The context of this error is the source state of the transition.</summary>
        </member>
        <member name="T:QtCore.QStateMachine.SignalEvent">
            <summary>
            <para>The SignalEvent class represents a Qt signal event.</para>
            </summary>
            <remarks>
            <para>A signal event is generated by a QStateMachine in response to a
            Qt signal. The QSignalTransition class provides a transition associated
            with a signal event. QStateMachine::SignalEvent is part of The State
            Machine Framework.</para>
            <para>The sender() function returns the object that generated the
            signal. The signalIndex() function returns the index of the signal. The
            arguments() function returns the arguments of the signal.</para>
            <para></para>
            <para>See also QSignalTransition.</para>
            </remarks>
        </member>
        <member name="P:QtCore.QStateMachine.SignalEvent.Sender">
            <summary>
            <para>Returns the object that emitted the signal.</para>
            <para>See also QObject::sender().</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.SignalEvent.SignalIndex">
            <summary>
            <para>Returns the index of the signal.</para>
            <para>See also QMetaObject::indexOfSignal() and
            QMetaObject::method().</para>
            </summary>
        </member>
        <member name="T:QtCore.QStateMachine.WrappedEvent">
            <summary>
            <para>The WrappedEvent class inherits QEvent and holds a clone of an
            event associated with a QObject.</para>
            </summary>
            <remarks>
            <para>A wrapped event is generated by a QStateMachine in response to a
            Qt event. The QEventTransition class provides a transition associated with
            a such an event. QStateMachine::WrappedEvent is part of The State Machine
            Framework.</para>
            <para>The object() function returns the object that generated the
            event. The event() function returns a clone of the original event.</para>
            <para></para>
            <para>See also QEventTransition.</para>
            </remarks>
        </member>
        <member name="P:QtCore.QStateMachine.WrappedEvent.Object">
            <summary>
            <para>Returns the object that the event is associated with.</para>
            </summary>
        </member>
        <member name="P:QtCore.QStateMachine.WrappedEvent.Event">
            <summary>
            <para>Returns a clone of the original event.</para>
            </summary>
        </member>
        <member name="T:QtCore.QRunnable">
            <summary>
            <para>The QRunnable class is the base class for all runnable
            objects.</para>
            </summary>
            <remarks>
            <para>The QRunnable class is an interface for representing a task or
            piece of code that needs to be executed, represented by your
            reimplementation of the run() function.</para>
            <para>You can use QThreadPool to execute your code in a separate
            thread. QThreadPool deletes the QRunnable automatically if autoDelete()
            returns true (the default). Use setAutoDelete() to change the auto-deletion
            flag.</para>
            <para>QThreadPool supports executing the same QRunnable more than once
            by calling QThreadPool::tryStart(this) from within the run() function. If
            autoDelete is enabled the QRunnable will be deleted when the last thread
            exits the run function. Calling QThreadPool::start() multiple times with
            the same QRunnable when autoDelete is enabled creates a race condition and
            is not recommended.</para>
            <para></para>
            <para>See also QThreadPool.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRunnable.#ctor">
            <summary>
            <para>Constructs a QRunnable. Auto-deletion is enabled by
            default.</para>
            <para>See also autoDelete() and setAutoDelete().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRunnable.Run">
            <summary>
            <para>Implement this pure virtual function in your subclass.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRunnable.AutoDelete">
            <summary>
            <para>Returns true is auto-deletion is enabled; false otherwise.</para>
            <para>If auto-deletion is enabled, QThreadPool will automatically
            delete this runnable after calling run(); otherwise, ownership remains with
            the application programmer.</para>
            <para>See also setAutoDelete() and QThreadPool.</para>
            <para></para>
            <para>Enables auto-deletion if autoDelete is true; otherwise
            auto-deletion is disabled.</para>
            <para>If auto-deletion is enabled, QThreadPool will automatically
            delete this runnable after calling run(); otherwise, ownership remains with
            the application programmer.</para>
            <para>Note that this flag must be set before calling
            QThreadPool::start(). Calling this function after QThreadPool::start()
            results in undefined behavior.</para>
            <para>See also autoDelete() and QThreadPool.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMutex">
            <summary>
            <para>The QMutex class provides access serialization between
            threads.</para>
            </summary>
            <remarks>
            <para>The purpose of a QMutex is to protect an object, data structure
            or section of code so that only one thread can access it at a time (this is
            similar to the Java synchronized keyword). It is usually best to use a
            mutex with a QMutexLocker since this makes it easy to ensure that locking
            and unlocking are performed consistently.</para>
            <para>For example, say there is a method that prints a message to the
            user on two lines:</para>
            <para>int number = 6;</para>
            <para></para>
            <para>void method1()</para>
            <para>{</para>
            <para>    number *= 5;</para>
            <para>    number /= 4;</para>
            <para>}</para>
            <para></para>
            <para>void method2()</para>
            <para>{</para>
            <para>    number *= 3;</para>
            <para>    number /= 2;</para>
            <para>}</para>
            <para>If these two methods are called in succession, the following
            happens:</para>
            <para>// method1()</para>
            <para>number *= 5;        // number is now 30</para>
            <para>number /= 4;        // number is now 7</para>
            <para></para>
            <para>// method2()</para>
            <para>number *= 3;        // number is now 21</para>
            <para>number /= 2;        // number is now 10</para>
            <para>If these two methods are called simultaneously from two threads
            then the following sequence could result:</para>
            <para>// Thread 1 calls method1()</para>
            <para>number *= 5;        // number is now 30</para>
            <para></para>
            <para>// Thread 2 calls method2().</para>
            <para>//</para>
            <para>// Most likely Thread 1 has been put to sleep by the
            operating</para>
            <para>// system to allow Thread 2 to run.</para>
            <para>number *= 3;        // number is now 90</para>
            <para>number /= 2;        // number is now 45</para>
            <para></para>
            <para>// Thread 1 finishes executing.</para>
            <para>number /= 4;        // number is now 11, instead of 10</para>
            <para>If we add a mutex, we should get the result we want:</para>
            <para>QMutex mutex;</para>
            <para>int number = 6;</para>
            <para></para>
            <para>void method1()</para>
            <para>{</para>
            <para>    mutex.lock();</para>
            <para>    number *= 5;</para>
            <para>    number /= 4;</para>
            <para>    mutex.unlock();</para>
            <para>}</para>
            <para></para>
            <para>void method2()</para>
            <para>{</para>
            <para>    mutex.lock();</para>
            <para>    number *= 3;</para>
            <para>    number /= 2;</para>
            <para>    mutex.unlock();</para>
            <para>}</para>
            <para>Then only one thread can modify number at any given time and the
            result is correct. This is a trivial example, of course, but applies to any
            other case where things need to happen in a particular sequence.</para>
            <para>When you call lock() in a thread, other threads that try to call
            lock() in the same place will block until the thread that got the lock
            calls unlock(). A non-blocking alternative to lock() is tryLock().</para>
            <para></para>
            <para>See also QMutexLocker, QReadWriteLock, QSemaphore, and
            QWaitCondition.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMutex.#ctor(QtCore.QMutex.RecursionMode)">
            <summary>
            <para>Constructs a new mutex. The mutex is created in an unlocked
            state.</para>
            <para>If mode is QMutex::Recursive, a thread can lock the same mutex
            multiple times and the mutex won't be unlocked until a corresponding number
            of unlock() calls have been made. Otherwise a thread may only lock a mutex
            once. The default is QMutex::NonRecursive.</para>
            <para>See also lock() and unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMutex.Lock">
            <summary>
            <para>Locks the mutex. If another thread has locked the mutex then this
            call will block until that thread has unlocked it.</para>
            <para>Calling this function multiple times on the same mutex from the
            same thread is allowed if this mutex is a recursive mutex. If this mutex is
            a non-recursive mutex, this function will dead-lock when the mutex is
            locked recursively.</para>
            <para>See also unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMutex.TryLock(System.Int32)">
            <summary>
            <para>Attempts to lock the mutex. This function returns true if the
            lock was obtained; otherwise it returns false. If another thread has locked
            the mutex, this function will wait for at most timeout milliseconds for the
            mutex to become available.</para>
            <para>Note: Passing a negative number as the timeout is equivalent to
            calling lock(), i.e. this function will wait forever until mutex can be
            locked if timeout is negative.</para>
            <para>If the lock was obtained, the mutex must be unlocked with
            unlock() before another thread can successfully lock it.</para>
            <para>Calling this function multiple times on the same mutex from the
            same thread is allowed if this mutex is a recursive mutex. If this mutex is
            a non-recursive mutex, this function will always return false when
            attempting to lock the mutex recursively.</para>
            <para>See also lock() and unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMutex.Unlock">
            <summary>
            <para>Unlocks the mutex. Attempting to unlock a mutex in a different
            thread to the one that locked it results in an error. Unlocking a mutex
            that is not locked results in undefined behavior.</para>
            <para>See also lock().</para>
            </summary>
        </member>
        <member name="T:QtCore.QMutex.RecursionMode">
            <summary>
            <para>See also QMutex().</para>
            </summary>
        </member>
        <member name="F:QtCore.QMutex.RecursionMode.NonRecursive">
            <summary>In this mode, a thread may only lock a mutex once.</summary>
        </member>
        <member name="F:QtCore.QMutex.RecursionMode.Recursive">
            <summary>In this mode, a thread can lock the same mutex multiple times and the mutex won't be unlocked until a corresponding number of unlock() calls have been made.</summary>
        </member>
        <member name="T:QtCore.QMutexLocker">
            <summary>
            <para>The QMutexLocker class is a convenience class that simplifies
            locking and unlocking mutexes.</para>
            </summary>
            <remarks>
            <para>Locking and unlocking a QMutex in complex functions and
            statements or in exception handling code is error-prone and difficult to
            debug. QMutexLocker can be used in such situations to ensure that the state
            of the mutex is always well-defined.</para>
            <para>QMutexLocker should be created within a function where a QMutex
            needs to be locked. The mutex is locked when QMutexLocker is created. You
            can unlock and relock the mutex with unlock() and relock(). If locked, the
            mutex will be unlocked when the QMutexLocker is destroyed.</para>
            <para>For example, this complex function locks a QMutex upon entering
            the function and unlocks the mutex at all the exit points:</para>
            <para>int complexFunction(int flag)</para>
            <para>{</para>
            <para>    mutex.lock();</para>
            <para></para>
            <para>    int retVal = 0;</para>
            <para></para>
            <para>    switch (flag) {</para>
            <para>    case 0:</para>
            <para>    case 1:</para>
            <para>        retVal = moreComplexFunction(flag);</para>
            <para>        break;</para>
            <para>    case 2:</para>
            <para>        {</para>
            <para>            int status = anotherFunction();</para>
            <para>            if (status &lt; 0) {</para>
            <para>                mutex.unlock();</para>
            <para>                return -2;</para>
            <para>            }</para>
            <para>            retVal = status + flag;</para>
            <para>        }</para>
            <para>        break;</para>
            <para>    default:</para>
            <para>        if (flag &gt; 10) {</para>
            <para>            mutex.unlock();</para>
            <para>            return -1;</para>
            <para>        }</para>
            <para>        break;</para>
            <para>    }</para>
            <para></para>
            <para>    mutex.unlock();</para>
            <para>    return retVal;</para>
            <para>}</para>
            <para>This example function will get more complicated as it is
            developed, which increases the likelihood that errors will occur.</para>
            <para>Using QMutexLocker greatly simplifies the code, and makes it more
            readable:</para>
            <para>int complexFunction(int flag)</para>
            <para>{</para>
            <para>    QMutexLocker locker(&amp;mutex);</para>
            <para></para>
            <para>    int retVal = 0;</para>
            <para></para>
            <para>    switch (flag) {</para>
            <para>    case 0:</para>
            <para>    case 1:</para>
            <para>        return moreComplexFunction(flag);</para>
            <para>    case 2:</para>
            <para>        {</para>
            <para>            int status = anotherFunction();</para>
            <para>            if (status &lt; 0)</para>
            <para>                return -2;</para>
            <para>            retVal = status + flag;</para>
            <para>        }</para>
            <para>        break;</para>
            <para>    default:</para>
            <para>        if (flag &gt; 10)</para>
            <para>            return -1;</para>
            <para>        break;</para>
            <para>    }</para>
            <para></para>
            <para>    return retVal;</para>
            <para>}</para>
            <para>Now, the mutex will always be unlocked when the QMutexLocker
            object is destroyed (when the function returns since locker is an auto
            variable).</para>
            <para>The same principle applies to code that throws and catches
            exceptions. An exception that is not caught in the function that has locked
            the mutex has no way of unlocking the mutex before the exception is passed
            up the stack to the calling function.</para>
            <para>QMutexLocker also provides a mutex() member function that returns
            the mutex on which the QMutexLocker is operating. This is useful for code
            that needs access to the mutex, such as QWaitCondition::wait(). For
            example:</para>
            <para>class SignalWaiter</para>
            <para>{</para>
            <para>private:</para>
            <para>    QMutexLocker locker;</para>
            <para></para>
            <para>public:</para>
            <para>    SignalWaiter(QMutex *mutex)</para>
            <para>        : locker(mutex)</para>
            <para>    {</para>
            <para>    }</para>
            <para></para>
            <para>    void waitForSignal()</para>
            <para>    {</para>
            <para>        ...</para>
            <para>        while (!signalled)</para>
            <para>            waitCondition.wait(locker.mutex());</para>
            <para>        ...</para>
            <para>    }</para>
            <para>};</para>
            <para></para>
            <para>See also QReadLocker, QWriteLocker, and QMutex.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMutexLocker.#ctor(QtCore.QBasicMutex)">
            <summary>
            <para>Constructs a QMutexLocker and locks mutex. The mutex will be
            unlocked when the QMutexLocker is destroyed. If mutex is zero, QMutexLocker
            does nothing.</para>
            <para>See also QMutex::lock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMutexLocker.Unlock">
            <summary>
            <para>Unlocks this mutex locker. You can use relock() to lock it again.
            It does not need to be locked when destroyed.</para>
            <para>See also relock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMutexLocker.Relock">
            <summary>
            <para>Relocks an unlocked mutex locker.</para>
            <para>See also unlock().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMutexLocker.Mutex">
            <summary>
            <para>Returns the mutex on which the QMutexLocker is operating.</para>
            </summary>
        </member>
        <member name="M:QtCore.QFutureWatcherBase.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="T:QtCore.QReadWriteLock">
            <summary>
            <para>The QReadWriteLock class provides read-write locking.</para>
            </summary>
            <remarks>
            <para>A read-write lock is a synchronization tool for protecting
            resources that can be accessed for reading and writing. This type of lock
            is useful if you want to allow multiple threads to have simultaneous
            read-only access, but as soon as one thread wants to write to the resource,
            all other threads must be blocked until the writing is complete.</para>
            <para>In many cases, QReadWriteLock is a direct competitor to QMutex.
            QReadWriteLock is a good choice if there are many concurrent reads and
            writing occurs infrequently.</para>
            <para>Example:</para>
            <para>QReadWriteLock lock;</para>
            <para></para>
            <para>void ReaderThread::run()</para>
            <para>{</para>
            <para>    ...</para>
            <para>    lock.lockForRead();</para>
            <para>    read_file();</para>
            <para>    lock.unlock();</para>
            <para>    ...</para>
            <para>}</para>
            <para></para>
            <para>void WriterThread::run()</para>
            <para>{</para>
            <para>    ...</para>
            <para>    lock.lockForWrite();</para>
            <para>    write_file();</para>
            <para>    lock.unlock();</para>
            <para>    ...</para>
            <para>}</para>
            <para>To ensure that writers aren't blocked forever by readers, readers
            attempting to obtain a lock will not succeed if there is a blocked writer
            waiting for access, even if the lock is currently only accessed by other
            readers. Also, if the lock is accessed by a writer and another writer comes
            in, that writer will have priority over any readers that might also be
            waiting.</para>
            <para>Like QMutex, a QReadWriteLock can be recursively locked by the
            same thread when constructed with QReadWriteLock::Recursive as
            QReadWriteLock::RecursionMode. In such cases, unlock() must be called the
            same number of times lockForWrite() or lockForRead() was called. Note that
            the lock type cannot be changed when trying to lock recursively, i.e. it is
            not possible to lock for reading in a thread that already has locked for
            writing (and vice versa).</para>
            <para></para>
            <para>See also QReadLocker, QWriteLocker, QMutex, and
            QSemaphore.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QReadWriteLock.#ctor(QtCore.QReadWriteLock.RecursionMode)">
            <summary>
            <para>Constructs a QReadWriteLock object in the given
            recursionMode.</para>
            <para>The default recursion mode is NonRecursive.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also lockForRead(), lockForWrite(), and RecursionMode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.LockForRead">
            <summary>
            <para>Locks the lock for reading. This function will block the current
            thread if another thread has locked for writing.</para>
            <para>It is not possible to lock for read if the thread already has
            locked for write.</para>
            <para>See also unlock(), lockForWrite(), and tryLockForRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.TryLockForRead">
            <summary>
            <para>Attempts to lock for reading. If the lock was obtained, this
            function returns true, otherwise it returns false instead of waiting for
            the lock to become available, i.e. it does not block.</para>
            <para>The lock attempt will fail if another thread has locked for
            writing.</para>
            <para>If the lock was obtained, the lock must be unlocked with unlock()
            before another thread can successfully lock it for writing.</para>
            <para>It is not possible to lock for read if the thread already has
            locked for write.</para>
            <para>See also unlock() and lockForRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.TryLockForRead(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Attempts to lock for reading. This function returns true if the
            lock was obtained; otherwise it returns false. If another thread has locked
            for writing, this function will wait for at most timeout milliseconds for
            the lock to become available.</para>
            <para>Note: Passing a negative number as the timeout is equivalent to
            calling lockForRead(), i.e. this function will wait forever until lock can
            be locked for reading when timeout is negative.</para>
            <para>If the lock was obtained, the lock must be unlocked with unlock()
            before another thread can successfully lock it for writing.</para>
            <para>It is not possible to lock for read if the thread already has
            locked for write.</para>
            <para>See also unlock() and lockForRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.LockForWrite">
            <summary>
            <para>Locks the lock for writing. This function will block the current
            thread if another thread (including the current) has locked for reading or
            writing (unless the lock has been created using the
            QReadWriteLock::Recursive mode).</para>
            <para>It is not possible to lock for write if the thread already has
            locked for read.</para>
            <para>See also unlock(), lockForRead(), and tryLockForWrite().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.TryLockForWrite">
            <summary>
            <para>Attempts to lock for writing. If the lock was obtained, this
            function returns true; otherwise, it returns false immediately.</para>
            <para>The lock attempt will fail if another thread has locked for
            reading or writing.</para>
            <para>If the lock was obtained, the lock must be unlocked with unlock()
            before another thread can successfully lock it.</para>
            <para>It is not possible to lock for write if the thread already has
            locked for read.</para>
            <para>See also unlock() and lockForWrite().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.TryLockForWrite(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Attempts to lock for writing. This function returns true if the
            lock was obtained; otherwise it returns false. If another thread has locked
            for reading or writing, this function will wait for at most timeout
            milliseconds for the lock to become available.</para>
            <para>Note: Passing a negative number as the timeout is equivalent to
            calling lockForWrite(), i.e. this function will wait forever until lock can
            be locked for writing when timeout is negative.</para>
            <para>If the lock was obtained, the lock must be unlocked with unlock()
            before another thread can successfully lock it.</para>
            <para>It is not possible to lock for write if the thread already has
            locked for read.</para>
            <para>See also unlock() and lockForWrite().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadWriteLock.Unlock">
            <summary>
            <para>Unlocks the lock.</para>
            <para>Attempting to unlock a lock that is not locked is an error, and
            will result in program termination.</para>
            <para>See also lockForRead(), lockForWrite(), tryLockForRead(), and
            tryLockForWrite().</para>
            </summary>
        </member>
        <member name="T:QtCore.QReadWriteLock.RecursionMode">
            <summary>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            <para>See also QReadWriteLock().</para>
            </summary>
        </member>
        <member name="F:QtCore.QReadWriteLock.RecursionMode.NonRecursive">
            <summary>In this mode, a thread may only lock a QReadWriteLock once.</summary>
        </member>
        <member name="F:QtCore.QReadWriteLock.RecursionMode.Recursive">
            <summary>In this mode, a thread can lock the same QReadWriteLock multiple times. The QReadWriteLock won't be unlocked until a corresponding number of unlock() calls have been made.</summary>
        </member>
        <member name="T:QtCore.QReadLocker">
            <summary>
            <para>The QReadLocker class is a convenience class that simplifies
            locking and unlocking read-write locks for read access.</para>
            </summary>
            <remarks>
            <para>The purpose of QReadLocker (and QWriteLocker) is to simplify
            QReadWriteLock locking and unlocking. Locking and unlocking statements or
            in exception handling code is error-prone and difficult to debug.
            QReadLocker can be used in such situations to ensure that the state of the
            lock is always well-defined.</para>
            <para>Here's an example that uses QReadLocker to lock and unlock a
            read-write lock for reading:</para>
            <para>QReadWriteLock lock;</para>
            <para></para>
            <para>QByteArray readData()</para>
            <para>{</para>
            <para>    QReadLocker locker(&amp;lock);</para>
            <para>    ...</para>
            <para>    return data;</para>
            <para>}</para>
            <para>It is equivalent to the following code:</para>
            <para>QReadWriteLock lock;</para>
            <para></para>
            <para>QByteArray readData()</para>
            <para>{</para>
            <para>    lock.lockForRead();</para>
            <para>    ...</para>
            <para>    lock.unlock();</para>
            <para>    return data;</para>
            <para>}</para>
            <para>The QMutexLocker documentation shows examples where the use of a
            locker object greatly simplifies programming.</para>
            <para></para>
            <para>See also QWriteLocker and QReadWriteLock.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QReadLocker.#ctor(QtCore.QReadWriteLock)">
            <summary>
            <para>Constructs a QReadLocker and locks lock for reading. The lock
            will be unlocked when the QReadLocker is destroyed. If lock is zero,
            QReadLocker does nothing.</para>
            <para>See also QReadWriteLock::lockForRead().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadLocker.Unlock">
            <summary>
            <para>Unlocks the lock associated with this locker.</para>
            <para>See also QReadWriteLock::unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadLocker.Relock">
            <summary>
            <para>Relocks an unlocked lock.</para>
            <para>See also unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QReadLocker.ReadWriteLock">
            <summary>
            <para>Returns a pointer to the read-write lock that was passed to the
            constructor.</para>
            </summary>
        </member>
        <member name="T:QtCore.QWriteLocker">
            <summary>
            <para>The QWriteLocker class is a convenience class that simplifies
            locking and unlocking read-write locks for write access.</para>
            </summary>
            <remarks>
            <para>The purpose of QWriteLocker (and QReadLocker) is to simplify
            QReadWriteLock locking and unlocking. Locking and unlocking statements or
            in exception handling code is error-prone and difficult to debug.
            QWriteLocker can be used in such situations to ensure that the state of the
            lock is always well-defined.</para>
            <para>Here's an example that uses QWriteLocker to lock and unlock a
            read-write lock for writing:</para>
            <para>QReadWriteLock lock;</para>
            <para></para>
            <para>void writeData(const QByteArray &amp;data)</para>
            <para>{</para>
            <para>    QWriteLocker locker(&amp;lock);</para>
            <para>    ...</para>
            <para>}</para>
            <para>It is equivalent to the following code:</para>
            <para>QReadWriteLock lock;</para>
            <para></para>
            <para>void writeData(const QByteArray &amp;data)</para>
            <para>{</para>
            <para>    lock.lockForWrite();</para>
            <para>    ...</para>
            <para>    lock.unlock();</para>
            <para>}</para>
            <para>The QMutexLocker documentation shows examples where the use of a
            locker object greatly simplifies programming.</para>
            <para></para>
            <para>See also QReadLocker and QReadWriteLock.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QWriteLocker.#ctor(QtCore.QReadWriteLock)">
            <summary>
            <para>Constructs a QWriteLocker and locks lock for writing. The lock
            will be unlocked when the QWriteLocker is destroyed. If lock is zero,
            QWriteLocker does nothing.</para>
            <para>See also QReadWriteLock::lockForWrite().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWriteLocker.Unlock">
            <summary>
            <para>Unlocks the lock associated with this locker.</para>
            <para>See also QReadWriteLock::unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWriteLocker.Relock">
            <summary>
            <para>Relocks an unlocked lock.</para>
            <para>See also unlock().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWriteLocker.ReadWriteLock">
            <summary>
            <para>Returns a pointer to the read-write lock that was passed to the
            constructor.</para>
            </summary>
        </member>
        <member name="T:QtCore.QSemaphore">
            <summary>
            <para>The QSemaphore class provides a general counting
            semaphore.</para>
            </summary>
            <remarks>
            <para>A semaphore is a generalization of a mutex. While a mutex can
            only be locked once, it's possible to acquire a semaphore multiple times.
            Semaphores are typically used to protect a certain number of identical
            resources.</para>
            <para>Semaphores support two fundamental operations, acquire() and
            release():</para>
            <para></para>
            <para>acquire(n) tries to acquire n resources. If there aren't that
            many resources available, the call will block until this is the
            case.</para>
            <para>release(n) releases n resources.</para>
            <para></para>
            <para>There's also a tryAcquire() function that returns immediately if
            it cannot acquire the resources, and an available() function that returns
            the number of available resources at any time.</para>
            <para>Example:</para>
            <para>QSemaphore sem(5);      // sem.available() == 5</para>
            <para></para>
            <para>sem.acquire(3);         // sem.available() == 2</para>
            <para>sem.acquire(2);         // sem.available() == 0</para>
            <para>sem.release(5);         // sem.available() == 5</para>
            <para>sem.release(5);         // sem.available() == 10</para>
            <para></para>
            <para>sem.tryAcquire(1);      // sem.available() == 9, returns
            true</para>
            <para>sem.tryAcquire(250);    // sem.available() == 9, returns
            false</para>
            <para>A typical application of semaphores is for controlling access to
            a circular buffer shared by a producer thread and a consumer thread. The
            Semaphores Example shows how to use QSemaphore to solve that
            problem.</para>
            <para>A non-computing example of a semaphore would be dining at a
            restaurant. A semaphore is initialized with the number of chairs in the
            restaurant. As people arrive, they want a seat. As seats are filled,
            available() is decremented. As people leave, the available() is
            incremented, allowing more people to enter. If a party of 10 people want to
            be seated, but there are only 9 seats, those 10 people will wait, but a
            party of 4 people would be seated (taking the available seats to 5, making
            the party of 10 people wait longer).</para>
            <para></para>
            <para>See also QMutex, QWaitCondition, QThread, and Semaphores
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSemaphore.#ctor(System.Int32)">
            <summary>
            <para>Creates a new semaphore and initializes the number of resources
            it guards to n (by default, 0).</para>
            <para>See also release() and available().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSemaphore.Acquire(System.Int32)">
            <summary>
            <para>Tries to acquire n resources guarded by the semaphore. If n &gt;
            available(), this call will block until enough resources are
            available.</para>
            <para>See also release(), available(), and tryAcquire().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSemaphore.TryAcquire(System.Int32)">
            <summary>
            <para>Tries to acquire n resources guarded by the semaphore and returns
            true on success. If available() &lt; n, this call immediately returns false
            without acquiring any resources.</para>
            <para>Example:</para>
            <para>QSemaphore sem(5);      // sem.available() == 5</para>
            <para>sem.tryAcquire(250);    // sem.available() == 5, returns
            false</para>
            <para>sem.tryAcquire(3);      // sem.available() == 2, returns
            true</para>
            <para>See also acquire().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSemaphore.TryAcquire(System.Int32,System.Int32)">
            <summary>
            <para>Tries to acquire n resources guarded by the semaphore and returns
            true on success. If available() &lt; n, this call will wait for at most
            timeout milliseconds for resources to become available.</para>
            <para>Note: Passing a negative number as the timeout is equivalent to
            calling acquire(), i.e. this function will wait forever for resources to
            become available if timeout is negative.</para>
            <para>Example:</para>
            <para>QSemaphore sem(5);            // sem.available() == 5</para>
            <para>sem.tryAcquire(250, 1000);    // sem.available() == 5, waits 1000
            milliseconds and returns false</para>
            <para>sem.tryAcquire(3, 30000);     // sem.available() == 2, returns
            true without waiting</para>
            <para>See also acquire().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSemaphore.Release(System.Int32)">
            <summary>
            <para>Releases n resources guarded by the semaphore.</para>
            <para>This function can be used to &quot;create&quot; resources as
            well. For example:</para>
            <para>QSemaphore sem(5);      // a semaphore that guards 5
            resources</para>
            <para>sem.acquire(5);         // acquire all 5 resources</para>
            <para>sem.release(5);         // release the 5 resources</para>
            <para>sem.release(10);        // &quot;create&quot; 10 new
            resources</para>
            <para>See also acquire() and available().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSemaphore.Available">
            <summary>
            <para>Returns the number of resources currently available to the
            semaphore. This number can never be negative.</para>
            <para>See also acquire() and release().</para>
            </summary>
        </member>
        <member name="T:QtCore.QThread">
            <summary>
            <para>The QThread class provides a platform-independent way to manage
            threads.</para>
            </summary>
            <remarks>
            <para>A QThread object manages one thread of control within the
            program. QThreads begin executing in run(). By default, run() starts the
            event loop by calling exec() and runs a Qt event loop inside the
            thread.</para>
            <para>You can use worker objects by moving them to the thread using
            QObject::moveToThread().</para>
            <para>class Worker : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para></para>
            <para>public slots:</para>
            <para>    void doWork(const QString &amp;parameter) {</para>
            <para>        QString result;</para>
            <para>        /* ... here is the expensive or blocking operation ...
            */</para>
            <para>        emit resultReady(result);</para>
            <para>    }</para>
            <para></para>
            <para>signals:</para>
            <para>    void resultReady(const QString &amp;result);</para>
            <para>};</para>
            <para></para>
            <para>class Controller : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    QThread workerThread;</para>
            <para>public:</para>
            <para>    Controller() {</para>
            <para>        Worker *worker = new Worker;</para>
            <para>        worker-&gt;moveToThread(&amp;workerThread);</para>
            <para>        connect(&amp;workerThread, &amp;QThread::finished,
            worker, &amp;QObject::deleteLater);</para>
            <para>        connect(this, &amp;Controller::operate, worker,
            &amp;Worker::doWork);</para>
            <para>        connect(worker, &amp;Worker::resultReady, this,
            &amp;Controller::handleResults);</para>
            <para>        workerThread.start();</para>
            <para>    }</para>
            <para>    ~Controller() {</para>
            <para>        workerThread.quit();</para>
            <para>        workerThread.wait();</para>
            <para>    }</para>
            <para>public slots:</para>
            <para>    void handleResults(const QString &amp;);</para>
            <para>signals:</para>
            <para>    void operate(const QString &amp;);</para>
            <para>};</para>
            <para>The code inside the Worker's slot would then execute in a
            separate thread. However, you are free to connect the Worker's slots to any
            signal, from any object, in any thread. It is safe to connect signals and
            slots across different threads, thanks to a mechanism called queued
            connections.</para>
            <para>Another way to make code run in a separate thread, is to subclass
            QThread and reimplement run(). For example:</para>
            <para>class WorkerThread : public QThread</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    void run() Q_DECL_OVERRIDE {</para>
            <para>        QString result;</para>
            <para>        /* ... here is the expensive or blocking operation ...
            */</para>
            <para>        emit resultReady(result);</para>
            <para>    }</para>
            <para>signals:</para>
            <para>    void resultReady(const QString &amp;s);</para>
            <para>};</para>
            <para></para>
            <para>void MyObject::startWorkInAThread()</para>
            <para>{</para>
            <para>    WorkerThread *workerThread = new WorkerThread(this);</para>
            <para>    connect(workerThread, &amp;WorkerThread::resultReady, this,
            &amp;MyObject::handleResults);</para>
            <para>    connect(workerThread, &amp;WorkerThread::finished,
            workerThread, &amp;QObject::deleteLater);</para>
            <para>    workerThread-&gt;start();</para>
            <para>}</para>
            <para>In that example, the thread will exit after the run function has
            returned. There will not be any event loop running in the thread unless you
            call exec().</para>
            <para>It is important to remember that a QThread instance lives in the
            old thread that instantiated it, not in the new thread that calls run().
            This means that all of QThread's queued slots will execute in the old
            thread. Thus, a developer who wishes to invoke slots in the new thread must
            use the worker-object approach; new slots should not be implemented
            directly into a subclassed QThread.</para>
            <para>When subclassing QThread, keep in mind that the constructor
            executes in the old thread while run() executes in the new thread. If a
            member variable is accessed from both functions, then the variable is
            accessed from two different threads. Check that it is safe to do so.</para>
            <para>Note: Care must be taken when interacting with objects across
            different threads. See Synchronizing Threads for details.</para>
            <para></para>
            <para>Managing Threads</para>
            <para>QThread will notifiy you via a signal when the thread is
            started() and finished(), or you can use isFinished() and isRunning() to
            query the state of the thread.</para>
            <para>You can stop the thread by calling exit() or quit(). In extreme
            cases, you may want to forcibly terminate() an executing thread. However,
            doing so is dangerous and discouraged. Please read the documentation for
            terminate() and setTerminationEnabled() for detailed information.</para>
            <para>From Qt 4.8 onwards, it is possible to deallocate objects that
            live in a thread that has just ended, by connecting the finished() signal
            to QObject::deleteLater().</para>
            <para>Use wait() to block the calling thread, until the other thread
            has finished execution (or until a specified time has passed).</para>
            <para>QThread also provides static, platform independent sleep
            functions: sleep(), msleep(), and usleep() allow full second, millisecond,
            and microsecond resolution respectively. These functions were made public
            in Qt 5.0.</para>
            <para>Note: wait() and the sleep() functions should be unnecessary in
            general, since Qt is an event-driven framework. Instead of wait(), consider
            listening for the finished() signal. Instead of the sleep() functions,
            consider using QTimer.</para>
            <para>The static functions currentThreadId() and currentThread() return
            identifiers for the currently executing thread. The former returns a
            platform specific ID for the thread; the latter returns a QThread
            pointer.</para>
            <para>To choose the name that your thread will be given (as identified
            by the command ps -L on Linux, for example), you can call setObjectName()
            before starting the thread. If you don't call setObjectName(), the name
            given to your thread will be the class name of the runtime type of your
            thread object (for example, &quot;RenderThread&quot; in the case of the
            Mandelbrot Example, as that is the name of the QThread subclass). Note that
            this is currently not available with release builds on Windows.</para>
            <para></para>
            <para>See also Thread Support in Qt, QThreadStorage, Synchronizing
            Threads, Mandelbrot Example, Semaphores Example, and Wait Conditions
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QThread.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new QThread to manage a new thread. The parent takes
            ownership of the QThread. The thread does not begin executing until start()
            is called.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.RequestInterruption">
            <summary>
            <para>Request the interruption of the thread. That request is advisory
            and it is up to code running on the thread to decide if and how it should
            act upon such request. This function does not stop any event loop running
            on the thread and does not terminate it in any way.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also isInterruptionRequested().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Exit(System.Int32)">
            <summary>
            <para>Tells the thread's event loop to exit with a return code.</para>
            <para>After calling this function, the thread leaves the event loop and
            returns from the call to QEventLoop::exec(). The QEventLoop::exec()
            function returns returnCode.</para>
            <para>By convention, a returnCode of 0 means success, any non-zero
            value indicates an error.</para>
            <para>Note that unlike the C library function of the same name, this
            function does return to the caller -- it is event processing that
            stops.</para>
            <para>No QEventLoops will be started anymore in this thread until
            QThread::exec() has been called again. If the eventloop in QThread::exec()
            is not running then the next call to QThread::exec() will also return
            immediately.</para>
            <para>See also quit() and QEventLoop.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Start(QtCore.QThread.Priority)">
            <summary>
            <para>Begins execution of the thread by calling run(). The operating
            system will schedule the thread according to the priority parameter. If the
            thread is already running, this function does nothing.</para>
            <para>The effect of the priority parameter is dependent on the
            operating system's scheduling policy. In particular, the priority will be
            ignored on systems that do not support thread priorities (such as on Linux,
            see http://linux.die.net/man/2/sched_setscheduler for more details).</para>
            <para>See also run() and terminate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Terminate">
            <summary>
            <para>Terminates the execution of the thread. The thread may or may not
            be terminated immediately, depending on the operating system's scheduling
            policies. Use QThread::wait() after terminate(), to be sure.</para>
            <para>When the thread is terminated, all threads waiting for the thread
            to finish will be woken up.</para>
            <para>Warning: This function is dangerous and its use is discouraged.
            The thread can be terminated at any point in its code path. Threads can be
            terminated while modifying data. There is no chance for the thread to clean
            up after itself, unlock any held mutexes, etc. In short, use this function
            only if absolutely necessary.</para>
            <para>Termination can be explicitly enabled or disabled by calling
            QThread::setTerminationEnabled(). Calling this function while termination
            is disabled results in the termination being deferred, until termination is
            re-enabled. See the documentation of QThread::setTerminationEnabled() for
            more information.</para>
            <para>See also setTerminationEnabled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Quit">
            <summary>
            <para>Tells the thread's event loop to exit with return code 0
            (success). Equivalent to calling QThread::exit(0).</para>
            <para>This function does nothing if the thread does not have an event
            loop.</para>
            <para>See also exit() and QEventLoop.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Wait(System.UInt32)">
            <summary>
            <para>Blocks the thread until either of these conditions is met:</para>
            <para></para>
            <para>The thread associated with this QThread object has finished
            execution (i.e. when it returns from run()). This function will return true
            if the thread has finished. It also returns true if the thread has not been
            started yet.</para>
            <para>time milliseconds has elapsed. If time is ULONG_MAX (the
            default), then the wait will never timeout (the thread must return from
            run()). This function will return false if the wait timed out.</para>
            <para></para>
            <para>This provides similar functionality to the POSIX pthread_join()
            function.</para>
            <para>See also sleep() and terminate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Run">
            <summary>
            <para>The starting point for the thread. After calling start(), the
            newly created thread calls this function. The default implementation simply
            calls exec().</para>
            <para>You can reimplement this function to facilitate advanced thread
            management. Returning from this method will end the execution of the
            thread.</para>
            <para>See also start() and wait().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Exec">
            <summary>
            <para>Enters the event loop and waits until exit() is called, returning
            the value that was passed to exit(). The value returned is 0 if exit() is
            called via quit().</para>
            <para>This function is meant to be called from within run(). It is
            necessary to call this function to start event handling.</para>
            <para>See also quit() and exit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.YieldCurrentThread">
            <summary>
            <para>Yields execution of the current thread to another runnable
            thread, if any. Note that the operating system decides to which thread to
            switch.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Sleep(System.UInt32)">
            <summary>
            <para>Forces the current thread to sleep for secs seconds.</para>
            <para>See also msleep() and usleep().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Msleep(System.UInt32)">
            <summary>
            <para>Forces the current thread to sleep for msecs milliseconds.</para>
            <para>See also sleep() and usleep().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.Usleep(System.UInt32)">
            <summary>
            <para>Forces the current thread to sleep for usecs microseconds.</para>
            <para>See also sleep() and msleep().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThread.SetTerminationEnabled(System.Boolean)">
            <summary>
            <para>Enables or disables termination of the current thread based on
            the enabled parameter. The thread must have been started by QThread.</para>
            <para>When enabled is false, termination is disabled. Future calls to
            QThread::terminate() will return immediately without effect. Instead, the
            termination is deferred until termination is enabled.</para>
            <para>When enabled is true, termination is enabled. Future calls to
            QThread::terminate() will terminate the thread normally. If termination has
            been deferred (i.e. QThread::terminate() was called with termination
            disabled), this function will terminate the calling thread immediately.
            Note that this function will not return in this case.</para>
            <para>See also terminate().</para>
            </summary>
        </member>
        <member name="E:QtCore.QThread.Started">
            <summary>
            <para>This signal is emitted from the associated thread when it starts executing, before the run() function is called.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also finished().</para>
            </summary>
        </member>
        <member name="E:QtCore.QThread.Finished">
            <summary>
            <para>This signal is emitted from the associated thread right before it finishes executing.</para>
            <para>When this signal is emitted, the event loop has already stopped running. No more events will be processed in the thread, except for deferred deletion events. This signal can be connected to QObject::deleteLater(), to free objects in that thread.</para>
            <para>Note: If the associated thread was terminated using terminate(), it is undefined from which thread this signal is emitted.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also started().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.priority">
            <summary>
            <para>Returns the priority for a running thread. If the thread is not
            running, this function returns InheritPriority.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also Priority, setPriority(), and start().</para>
            <para></para>
            <para>This function sets the priority for a running thread. If the
            thread is not running, this function does nothing and returns immediately.
            Use start() to start a thread with a specific priority.</para>
            <para>The priority argument can be any value in the QThread::Priority
            enum except for InheritPriorty.</para>
            <para>The effect of the priority parameter is dependent on the
            operating system's scheduling policy. In particular, the priority will be
            ignored on systems that do not support thread priorities (such as on Linux,
            see http://linux.die.net/man/2/sched_setscheduler for more details).</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also Priority, priority(), and start().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.StackSize">
            <summary>
            <para>Returns the maximum stack size for the thread (if set with
            setStackSize()); otherwise returns zero.</para>
            <para>See also setStackSize().</para>
            <para></para>
            <para>Sets the maximum stack size for the thread to stackSize. If
            stackSize is greater than zero, the maximum stack size is set to stackSize
            bytes, otherwise the maximum stack size is automatically determined by the
            operating system.</para>
            <para>Warning: Most operating systems place minimum and maximum limits
            on thread stack sizes. The thread will fail to start if the stack size is
            outside these limits.</para>
            <para>See also stackSize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.EventDispatcher">
            <summary>
            <para>Returns a pointer to the event dispatcher object for the thread.
            If no event dispatcher exists for the thread, this function returns
            0.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setEventDispatcher().</para>
            <para></para>
            <para>Sets the event dispatcher for the thread to eventDispatcher. This
            is only possible as long as there is no event dispatcher installed for the
            thread yet. That is, before the thread has been started with start() or, in
            case of the main thread, before QCoreApplication has been instantiated.
            This method takes ownership of the object.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also eventDispatcher().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.CurrentThreadId">
            <summary>
            <para>Returns the thread handle of the currently executing
            thread.</para>
            <para>Warning: The handle returned by this function is used for
            internal purposes and should not be used in any application code.</para>
            <para>Warning: On Windows, the returned value is a pseudo-handle for
            the current thread. It can't be used for numerical comparison. i.e., this
            function returns the DWORD (Windows-Thread ID) returned by the Win32
            function getCurrentThreadId(), not the HANDLE (Windows-Thread HANDLE)
            returned by the Win32 function getCurrentThread().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.CurrentThread">
            <summary>
            <para>Returns a pointer to a QThread which manages the currently
            executing thread.</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.IdealThreadCount">
            <summary>
            <para>Returns the ideal number of threads that can be run on the
            system. This is done querying the number of processor cores, both real and
            logical, in the system. This function returns -1 if the number of processor
            cores could not be detected.</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.IsFinished">
            <summary>
            <para>Returns true if the thread is finished; otherwise returns
            false.</para>
            <para>See also isRunning().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.IsRunning">
            <summary>
            <para>Returns true if the thread is running; otherwise returns
            false.</para>
            <para>See also isFinished().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.IsInterruptionRequested">
            <summary>
            <para>Return true if the task running on this thread should be stopped.
            An interruption can be requested by requestInterruption().</para>
            <para>This function can be used to make long running tasks cleanly
            interruptible. Never checking or acting on the value returned by this
            function is safe, however it is advisable do so regularly in long running
            functions. Take care not to call it too often, to keep the overhead
            low.</para>
            <para>void long_task() {</para>
            <para>     forever {</para>
            <para>        if (
            QThread::currentThread()-&gt;isInterruptionRequested() ) {</para>
            <para>            return;</para>
            <para>        }</para>
            <para>    }</para>
            <para>}</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also currentThread() and requestInterruption().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThread.LoopLevel">
            <summary>
            <para>Returns the current event loop level for the thread.</para>
            <para>Note: This can only be called within the thread itself, i.e. when
            it is the current thread.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="T:QtCore.QThread.Priority">
            <summary>
            <para>This enum type indicates how the operating system should schedule
            newly created threads.</para>
            </summary>
        </member>
        <member name="F:QtCore.QThread.Priority.IdlePriority">
            <summary>scheduled only when no other threads are running.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.LowestPriority">
            <summary>scheduled less often than LowPriority.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.LowPriority">
            <summary>scheduled less often than NormalPriority.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.NormalPriority">
            <summary>the default priority of the operating system.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.HighPriority">
            <summary>scheduled more often than NormalPriority.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.HighestPriority">
            <summary>scheduled more often than HighPriority.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.TimeCriticalPriority">
            <summary>scheduled as often as possible.</summary>
        </member>
        <member name="F:QtCore.QThread.Priority.InheritPriority">
            <summary>use the same priority as the creating thread. This is the default.</summary>
        </member>
        <member name="T:QtCore.QThreadPool">
            <summary>
            <para>The QThreadPool class manages a collection of QThreads.</para>
            </summary>
            <remarks>
            <para>QThreadPool manages and recyles individual QThread objects to
            help reduce thread creation costs in programs that use threads. Each Qt
            application has one global QThreadPool object, which can be accessed by
            calling globalInstance().</para>
            <para>To use one of the QThreadPool threads, subclass QRunnable and
            implement the run() virtual function. Then create an object of that class
            and pass it to QThreadPool::start().</para>
            <para>class HelloWorldTask : public QRunnable</para>
            <para>{</para>
            <para>    void run()</para>
            <para>    {</para>
            <para>        qDebug() &lt;&lt; &quot;Hello world from thread&quot;
            &lt;&lt; QThread::currentThread();</para>
            <para>    }</para>
            <para>}</para>
            <para></para>
            <para>HelloWorldTask *hello = new HelloWorldTask();</para>
            <para>// QThreadPool takes ownership and deletes 'hello'
            automatically</para>
            <para>QThreadPool::globalInstance()-&gt;start(hello);</para>
            <para>QThreadPool deletes the QRunnable automatically by default. Use
            QRunnable::setAutoDelete() to change the auto-deletion flag.</para>
            <para>QThreadPool supports executing the same QRunnable more than once
            by calling tryStart(this) from within QRunnable::run(). If autoDelete is
            enabled the QRunnable will be deleted when the last thread exits the run
            function. Calling start() multiple times with the same QRunnable when
            autoDelete is enabled creates a race condition and is not
            recommended.</para>
            <para>Threads that are unused for a certain amount of time will expire.
            The default expiry timeout is 30000 milliseconds (30 seconds). This can be
            changed using setExpiryTimeout(). Setting a negative expiry timeout
            disables the expiry mechanism.</para>
            <para>Call maxThreadCount() to query the maximum number of threads to
            be used. If needed, you can change the limit with setMaxThreadCount(). The
            default maxThreadCount() is QThread::idealThreadCount(). The
            activeThreadCount() function returns the number of threads currently doing
            work.</para>
            <para>The reserveThread() function reserves a thread for external use.
            Use releaseThread() when your are done with the thread, so that it may be
            reused. Essentially, these functions temporarily increase or reduce the
            active thread count and are useful when implementing time-consuming
            operations that are not visible to the QThreadPool.</para>
            <para>Note that QThreadPool is a low-level class for managing threads,
            see the Qt Concurrent module for higher level alternatives.</para>
            <para></para>
            <para>See also QRunnable.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QThreadPool.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a thread pool with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.Start(QtCore.QRunnable,System.Int32)">
            <summary>
            <para>Reserves a thread and uses it to run runnable, unless this thread
            will make the current thread count exceed maxThreadCount(). In that case,
            runnable is added to a run queue instead. The priority argument can be used
            to control the run queue's order of execution.</para>
            <para>Note that the thread pool takes ownership of the runnable if
            runnable-&gt;autoDelete() returns true, and the runnable will be deleted
            automatically by the thread pool after the runnable-&gt;run() returns. If
            runnable-&gt;autoDelete() returns false, ownership of runnable remains with
            the caller. Note that changing the auto-deletion on runnable after calling
            this functions results in undefined behavior.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.TryStart(QtCore.QRunnable)">
            <summary>
            <para>Attempts to reserve a thread to run runnable.</para>
            <para>If no threads are available at the time of calling, then this
            function does nothing and returns false. Otherwise, runnable is run
            immediately using one available thread and this function returns
            true.</para>
            <para>Note that the thread pool takes ownership of the runnable if
            runnable-&gt;autoDelete() returns true, and the runnable will be deleted
            automatically by the thread pool after the runnable-&gt;run() returns. If
            runnable-&gt;autoDelete() returns false, ownership of runnable remains with
            the caller. Note that changing the auto-deletion on runnable after calling
            this function results in undefined behavior.</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.ReserveThread">
            <summary>
            <para>Reserves one thread, disregarding activeThreadCount() and
            maxThreadCount().</para>
            <para>Once you are done with the thread, call releaseThread() to allow
            it to be reused.</para>
            <para>Note: This function will always increase the number of active
            threads. This means that by using this function, it is possible for
            activeThreadCount() to return a value greater than maxThreadCount()
            .</para>
            <para>See also releaseThread().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.ReleaseThread">
            <summary>
            <para>Releases a thread previously reserved by a call to
            reserveThread().</para>
            <para>Note: Calling this function without previously reserving a thread
            temporarily increases maxThreadCount(). This is useful when a thread goes
            to sleep waiting for more work, allowing other threads to continue. Be sure
            to call reserveThread() when done waiting, so that the thread pool can
            correctly maintain the activeThreadCount().</para>
            <para>See also reserveThread().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.WaitForDone(System.Int32)">
            <summary>
            <para>Waits up to msecs milliseconds for all threads to exit and
            removes all threads from the thread pool. Returns true if all threads were
            removed; otherwise it returns false. If msecs is -1 (the default), the
            timeout is ignored (waits for the last thread to exit).</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.Clear">
            <summary>
            <para>Removes the runnables that are not yet started from the queue.
            The runnables for which runnable-&gt;autoDelete() returns true are
            deleted.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.Cancel(QtCore.QRunnable)">
            <summary>
            <para>Removes the specified runnable from the queue if it is not yet
            started. The runnables for which runnable-&gt;autoDelete() returns true are
            deleted.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QThreadPool.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QThreadPool.ExpiryTimeout">
            <summary>
            <para>Threads that are unused for expiryTimeout milliseconds are
            considered to have expired and will exit. Such threads will be restarted as
            needed. The default expiryTimeout is 30000 milliseconds (30 seconds). If
            expiryTimeout is negative, newly created threads will not expire, e.g.,
            they will not exit until the thread pool is destroyed.</para>
            <para>Note that setting expiryTimeout has no effect on already running
            threads. Only newly created threads will use the new expiryTimeout. We
            recommend setting the expiryTimeout immediately after creating the thread
            pool, but before calling start().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThreadPool.MaxThreadCount">
            <summary>
            <para>This property represents the maximum number of threads used by
            the thread pool.</para>
            <para>Note: The thread pool will always use at least 1 thread, even if
            maxThreadCount limit is zero or negative.</para>
            <para>The default maxThreadCount is QThread::idealThreadCount().</para>
            </summary>
        </member>
        <member name="P:QtCore.QThreadPool.GlobalInstance">
            <summary>
            <para>Returns the global QThreadPool instance.</para>
            </summary>
        </member>
        <member name="P:QtCore.QThreadPool.ActiveThreadCount">
            <summary>
            <para>This property represents the number of active threads in the
            thread pool.</para>
            <para>Note: It is possible for this function to return a value that is
            greater than maxThreadCount(). See reserveThread() for more details.</para>
            <para>See also reserveThread() and releaseThread().</para>
            </summary>
        </member>
        <member name="T:QtCore.QWaitCondition">
            <summary>
            <para>The QWaitCondition class provides a condition variable for
            synchronizing threads.</para>
            </summary>
            <remarks>
            <para>QWaitCondition allows a thread to tell other threads that some
            sort of condition has been met. One or many threads can block waiting for a
            QWaitCondition to set a condition with wakeOne() or wakeAll(). Use
            wakeOne() to wake one randomly selected thread or wakeAll() to wake them
            all.</para>
            <para>For example, let's suppose that we have three tasks that should
            be performed whenever the user presses a key. Each task could be split into
            a thread, each of which would have a run() body like this:</para>
            <para>forever {</para>
            <para>    mutex.lock();</para>
            <para>    keyPressed.wait(&amp;mutex);</para>
            <para>    do_something();</para>
            <para>    mutex.unlock();</para>
            <para>}</para>
            <para>Here, the keyPressed variable is a global variable of type
            QWaitCondition.</para>
            <para>A fourth thread would read key presses and wake the other three
            threads up every time it receives one, like this:</para>
            <para>forever {</para>
            <para>    getchar();</para>
            <para>    keyPressed.wakeAll();</para>
            <para>}</para>
            <para>The order in which the three threads are woken up is undefined.
            Also, if some of the threads are still in do_something() when the key is
            pressed, they won't be woken up (since they're not waiting on the condition
            variable) and so the task will not be performed for that key press. This
            issue can be solved using a counter and a QMutex to guard it. For example,
            here's the new code for the worker threads:</para>
            <para>forever {</para>
            <para>    mutex.lock();</para>
            <para>    keyPressed.wait(&amp;mutex);</para>
            <para>    ++count;</para>
            <para>    mutex.unlock();</para>
            <para></para>
            <para>    do_something();</para>
            <para></para>
            <para>    mutex.lock();</para>
            <para>    --count;</para>
            <para>    mutex.unlock();</para>
            <para>}</para>
            <para>Here's the code for the fourth thread:</para>
            <para>forever {</para>
            <para>    getchar();</para>
            <para></para>
            <para>    mutex.lock();</para>
            <para>    // Sleep until there are no busy worker threads</para>
            <para>    while (count &gt; 0) {</para>
            <para>        mutex.unlock();</para>
            <para>        sleep(1);</para>
            <para>        mutex.lock();</para>
            <para>    }</para>
            <para>    keyPressed.wakeAll();</para>
            <para>    mutex.unlock();</para>
            <para>}</para>
            <para>The mutex is necessary because the results of two threads
            attempting to change the value of the same variable simultaneously are
            unpredictable.</para>
            <para>Wait conditions are a powerful thread synchronization primitive.
            The Wait Conditions Example example shows how to use QWaitCondition as an
            alternative to QSemaphore for controlling access to a circular buffer
            shared by a producer thread and a consumer thread.</para>
            <para></para>
            <para>See also QMutex, QSemaphore, QThread, and Wait Conditions
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QWaitCondition.#ctor">
            <summary>
            <para>Constructs a new wait condition object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QWaitCondition.Wait(QtCore.QMutex,System.UInt32)">
            <summary>
            <para>Releases the lockedMutex and waits on the wait condition. The
            lockedMutex must be initially locked by the calling thread. If lockedMutex
            is not in a locked state, the behavior is undefined. If lockedMutex is a
            recursive mutex, this function returns immediately. The lockedMutex will be
            unlocked, and the calling thread will block until either of these
            conditions is met:</para>
            <para></para>
            <para>Another thread signals it using wakeOne() or wakeAll(). This
            function will return true in this case.</para>
            <para>time milliseconds has elapsed. If time is ULONG_MAX (the
            default), then the wait will never timeout (the event must be signalled).
            This function will return false if the wait timed out.</para>
            <para></para>
            <para>The lockedMutex will be returned to the same locked state. This
            function is provided to allow the atomic transition from the locked state
            to the wait state.</para>
            <para>See also wakeOne() and wakeAll().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWaitCondition.Wait(QtCore.QReadWriteLock,System.UInt32)">
            <summary>
            <para>Releases the lockedReadWriteLock and waits on the wait condition.
            The lockedReadWriteLock must be initially locked by the calling thread. If
            lockedReadWriteLock is not in a locked state, this function returns
            immediately. The lockedReadWriteLock must not be locked recursively,
            otherwise this function will not release the lock properly. The
            lockedReadWriteLock will be unlocked, and the calling thread will block
            until either of these conditions is met:</para>
            <para></para>
            <para>Another thread signals it using wakeOne() or wakeAll(). This
            function will return true in this case.</para>
            <para>time milliseconds has elapsed. If time is ULONG_MAX (the
            default), then the wait will never timeout (the event must be signalled).
            This function will return false if the wait timed out.</para>
            <para></para>
            <para>The lockedReadWriteLock will be returned to the same locked
            state. This function is provided to allow the atomic transition from the
            locked state to the wait state.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also wakeOne() and wakeAll().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWaitCondition.WakeOne">
            <summary>
            <para>Wakes one thread waiting on the wait condition. The thread that
            is woken up depends on the operating system's scheduling policies, and
            cannot be controlled or predicted.</para>
            <para>If you want to wake up a specific thread, the solution is
            typically to use different wait conditions and have different threads wait
            on different conditions.</para>
            <para>See also wakeAll().</para>
            </summary>
        </member>
        <member name="M:QtCore.QWaitCondition.WakeAll">
            <summary>
            <para>Wakes all threads waiting on the wait condition. The order in
            which the threads are woken up depends on the operating system's scheduling
            policies and cannot be controlled or predicted.</para>
            <para>See also wakeOne().</para>
            </summary>
        </member>
        <member name="T:QtCore.QBitArray">
            <summary>
            <para>The QBitArray class provides an array of bits.</para>
            </summary>
            <remarks>
            <para>A QBitArray is an array that gives access to individual bits and
            provides operators (AND, OR, XOR, and NOT) that work on entire arrays of
            bits. It uses implicit sharing (copy-on-write) to reduce memory usage and
            to avoid the needless copying of data.</para>
            <para>The following code constructs a QBitArray containing 200 bits
            initialized to false (0):</para>
            <para>QBitArray ba(200);</para>
            <para>To initialize the bits to true, either pass true as second
            argument to the constructor, or call fill() later on.</para>
            <para>QBitArray uses 0-based indexes, just like C++ arrays. To access
            the bit at a particular index position, you can use operator[](). On
            non-const bit arrays, operator[]() returns a reference to a bit that can be
            used on the left side of an assignment. For example:</para>
            <para>QBitArray ba;</para>
            <para>ba.resize(3);</para>
            <para>ba[0] = true;</para>
            <para>ba[1] = false;</para>
            <para>ba[2] = true;</para>
            <para>For technical reasons, it is more efficient to use testBit() and
            setBit() to access bits in the array than operator[](). For example:</para>
            <para>QBitArray ba(3);</para>
            <para>ba.setBit(0, true);</para>
            <para>ba.setBit(1, false);</para>
            <para>ba.setBit(2, true);</para>
            <para>QBitArray supports &amp; (AND), | (OR), ^ (XOR), ~ (NOT), as well
            as &amp;=, |=, and ^=. These operators work in the same way as the built-in
            C++ bitwise operators of the same name. For example:</para>
            <para>QBitArray x(5);</para>
            <para>x.setBit(3, true);</para>
            <para>// x: [ 0, 0, 0, 1, 0 ]</para>
            <para></para>
            <para>QBitArray y(5);</para>
            <para>y.setBit(4, true);</para>
            <para>// y: [ 0, 0, 0, 0, 1 ]</para>
            <para></para>
            <para>x |= y;</para>
            <para>// x: [ 0, 0, 0, 1, 1 ]</para>
            <para>For historical reasons, QBitArray distinguishes between a null
            bit array and an empty bit array. A null bit array is a bit array that is
            initialized using QBitArray's default constructor. An empty bit array is
            any bit array with size 0. A null bit array is always empty, but an empty
            bit array isn't necessarily null:</para>
            <para>QBitArray().isNull();           // returns true</para>
            <para>QBitArray().isEmpty();          // returns true</para>
            <para></para>
            <para>QBitArray(0).isNull();          // returns false</para>
            <para>QBitArray(0).isEmpty();         // returns true</para>
            <para></para>
            <para>QBitArray(3).isNull();          // returns false</para>
            <para>QBitArray(3).isEmpty();         // returns false</para>
            <para>All functions except isNull() treat null bit arrays the same as
            empty bit arrays; for example, QBitArray() compares equal to QBitArray(0).
            We recommend that you always use isEmpty() and avoid isNull().</para>
            <para></para>
            <para>See also QByteArray and QVector.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QBitArray.#ctor">
            <summary>
            <para>Constructs an empty bit array.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.#ctor(System.Int32,System.Boolean)">
            <summary>
            <para>Constructs a bit array containing size bits. The bits are
            initialized with value, which defaults to false (0).</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.#ctor(QtCore.QBitArray)">
            <summary>
            <para>Constructs a copy of other.</para>
            <para>This operation takes constant time, because QBitArray is
            implicitly shared. This makes returning a QBitArray from a function very
            fast. If a shared instance is modified, it will be copied (copy-on-write),
            and that takes linear time.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Swap(QtCore.QBitArray)">
            <summary>
            <para>Swaps bit array other with this bit array. This operation is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Count">
            <summary>
            <para>Same as size().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Count(System.Boolean)">
            <summary>
            <para>If on is true, this function returns the number of 1-bits stored
            in the bit array; otherwise the number of 0-bits is returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Resize(System.Int32)">
            <summary>
            <para>Resizes the bit array to size bits.</para>
            <para>If size is greater than the current size, the bit array is
            extended to make it size bits with the extra bits added to the end. The new
            bits are initialized to false (0).</para>
            <para>If size is less than the current size, bits are removed from the
            end.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Clear">
            <summary>
            <para>Clears the contents of the bit array and makes it empty.</para>
            <para>See also resize() and isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.TestBit(System.Int32)">
            <summary>
            <para>Returns true if the bit at index position i is 1; otherwise
            returns false.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also setBit() and clearBit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.SetBit(System.Int32)">
            <summary>
            <para>Sets the bit at index position i to 1.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also clearBit() and toggleBit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.SetBit(System.Int32,System.Boolean)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the bit at index position i to value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.ClearBit(System.Int32)">
            <summary>
            <para>Sets the bit at index position i to 0.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also setBit() and toggleBit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.ToggleBit(System.Int32)">
            <summary>
            <para>Inverts the value of the bit at index position i, returning the
            previous value of that bit as either true (if it was set) or false (if it
            was unset).</para>
            <para>If the previous value was 0, the new value will be 1. If the
            previous value was 1, the new value will be 0.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also setBit() and clearBit().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.At(System.Int32)">
            <summary>
            <para>Returns the value of the bit at index position i.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>See also operator[]().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_OnesComplement(QtCore.QBitArray)">
            <summary>
            <para>Returns a bit array that contains the inverted bits of this bit
            array.</para>
            <para>Example:</para>
            <para>QBitArray a(3);</para>
            <para>QBitArray b;</para>
            <para>a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]</para>
            <para>b = ~a;                         // b: [ 0, 1, 0 ]</para>
            <para>See also operator&amp;(), operator|(), and operator^().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_Equality(QtCore.QBitArray,QtCore.QBitArray)">
            <summary>
            <para>Returns true if other is equal to this bit array; otherwise
            returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_Inequality(QtCore.QBitArray,QtCore.QBitArray)">
            <summary>
            <para>Returns true if other is not equal to this bit array; otherwise
            returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Fill(System.Boolean,System.Int32)">
            <summary>
            <para>Sets every bit in the bit array to value, returning true if
            successful; otherwise returns false. If size is different from -1 (the
            default), the bit array is resized to size beforehand.</para>
            <para>Example:</para>
            <para>QBitArray ba(8);</para>
            <para>ba.fill(true);</para>
            <para>// ba: [ 1, 1, 1, 1, 1, 1, 1, 1 ]</para>
            <para></para>
            <para>ba.fill(false, 2);</para>
            <para>// ba: [ 0, 0 ]</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Fill(System.Boolean,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets bits at index positions begin up to (but not including) end
            to value.</para>
            <para>begin must be a valid index position in the bit array (0 &lt;=
            begin &lt; size()).</para>
            <para>end must be either a valid index position or equal to size(), in
            which case the fill operation runs until the end of the array (0 &lt;= end
            &lt;= size()).</para>
            <para>Example:</para>
            <para>QBitArray ba(4);</para>
            <para>ba.fill(true, 1, 2);            // ba: [ 0, 1, 0, 0 ]</para>
            <para>ba.fill(true, 1, 3);            // ba: [ 0, 1, 1, 0 ]</para>
            <para>ba.fill(true, 1, 4);            // ba: [ 0, 1, 1, 1 ]</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.Truncate(System.Int32)">
            <summary>
            <para>Truncates the bit array at index position pos.</para>
            <para>If pos is beyond the end of the array, nothing happens.</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_BitwiseAnd(QtCore.QBitArray,QtCore.QBitArray)">
            <summary>
            <para>Returns a bit array that is the AND of the bit arrays a1 and
            a2.</para>
            <para>The result has the length of the longest of the two bit arrays,
            with any missing bits (if one array is shorter than the other) taken to be
            0.</para>
            <para>Example:</para>
            <para>QBitArray a(3);</para>
            <para>QBitArray b(2);</para>
            <para>QBitArray c;</para>
            <para>a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]</para>
            <para>b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]</para>
            <para>c = a &amp; b;                      // c: [ 1, 0, 0 ]</para>
            <para>See also QBitArray::operator&amp;=(), operator|(), and
            operator^().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_BitwiseOr(QtCore.QBitArray,QtCore.QBitArray)">
            <summary>
            <para>Returns a bit array that is the OR of the bit arrays a1 and
            a2.</para>
            <para>The result has the length of the longest of the two bit arrays,
            with any missing bits (if one array is shorter than the other) taken to be
            0.</para>
            <para>Example:</para>
            <para>QBitArray a(3);</para>
            <para>QBitArray b(2);</para>
            <para>QBitArray c;</para>
            <para>a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]</para>
            <para>b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]</para>
            <para>c = a | b;                      // c: [ 1, 1, 1 ]</para>
            <para>See also QBitArray::operator|=(), operator&amp;(), and
            operator^().</para>
            </summary>
        </member>
        <member name="M:QtCore.QBitArray.op_ExclusiveOr(QtCore.QBitArray,QtCore.QBitArray)">
            <summary>
            <para>Returns a bit array that is the XOR of the bit arrays a1 and
            a2.</para>
            <para>The result has the length of the longest of the two bit arrays,
            with any missing bits (if one array is shorter than the other) taken to be
            0.</para>
            <para>Example:</para>
            <para>QBitArray a(3);</para>
            <para>QBitArray b(2);</para>
            <para>QBitArray c;</para>
            <para>a[0] = 1; a[1] = 0; a[2] = 1;   // a: [ 1, 0, 1 ]</para>
            <para>b[0] = 1; b[1] = 1;             // b: [ 1, 1 ]</para>
            <para>c = a ^ b;                      // c: [ 0, 1, 1 ]</para>
            <para>See also QBitArray::operator^=(), operator&amp;(), and
            operator|().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBitArray.Item(System.Int32)">
            <summary>
            <para>Returns the bit at index position i as a modifiable
            reference.</para>
            <para>i must be a valid index position in the bit array (i.e., 0 &lt;=
            i &lt; size()).</para>
            <para>Example:</para>
            <para>QBitArray a(3);</para>
            <para>a[0] = false;</para>
            <para>a[1] = true;</para>
            <para>a[2] = a[0] ^ a[1];</para>
            <para>The return value is of type QBitRef, a helper class for
            QBitArray. When you get an object of type QBitRef, you can assign to it,
            and the assignment will apply to the bit in the QBitArray from which you
            got the reference.</para>
            <para>The functions testBit(), setBit(), and clearBit() are slightly
            faster.</para>
            <para>See also at(), testBit(), setBit(), and clearBit().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBitArray.Item(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="P:QtCore.QBitArray.Size">
            <summary>
            <para>Returns the number of bits stored in the bit array.</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBitArray.IsEmpty">
            <summary>
            <para>Returns true if this bit array has size 0; otherwise returns
            false.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtCore.QBitArray.IsNull">
            <summary>
            <para>Returns true if this bit array is null; otherwise returns
            false.</para>
            <para>Example:</para>
            <para>QBitArray().isNull();           // returns true</para>
            <para>QBitArray(0).isNull();          // returns false</para>
            <para>QBitArray(3).isNull();          // returns false</para>
            <para>Qt makes a distinction between null bit arrays and empty bit
            arrays for historical reasons. For most applications, what matters is
            whether or not a bit array contains any data, and this can be determined
            using isEmpty().</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="T:QtCore.QByteArrayMatcher">
            <summary>
            <para>The QByteArrayMatcher class holds a sequence of bytes that can be
            quickly matched in a byte array.</para>
            </summary>
            <remarks>
            <para>This class is useful when you have a sequence of bytes that you
            want to repeatedly match against some byte arrays (perhaps in a loop), or
            when you want to search for the same sequence of bytes multiple times in
            the same byte array. Using a matcher object and indexIn() is faster than
            matching a plain QByteArray with QByteArray::indexOf() if repeated matching
            takes place. This class offers no benefit if you are doing one-off byte
            array matches.</para>
            <para>Create the QByteArrayMatcher with the QByteArray you want to
            search for. Then call indexIn() on the QByteArray that you want to
            search.</para>
            <para></para>
            <para>See also QByteArray and QStringMatcher.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.#ctor">
            <summary>
            <para>Constructs an empty byte array matcher that won't match anything.
            Call setPattern() to give it a pattern to match.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a byte array matcher that will search for pattern.
            Call indexIn() to perform a search.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.#ctor(System.String,System.Int32)">
            <summary>
            <para>Constructs a byte array matcher from pattern. pattern has the
            given length. pattern must remain in scope, but the destructor does not
            delete pattern.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.#ctor(QtCore.QByteArrayMatcher)">
            <summary>
            <para>Copies the other byte array matcher to this byte array
            matcher.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.IndexIn(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>Searches the byte array ba, from byte position from (default 0,
            i.e. from the first byte), for the byte array pattern() that was set in the
            constructor or in the most recent call to setPattern(). Returns the
            position where the pattern() matched in ba, or -1 if no match was
            found.</para>
            </summary>
        </member>
        <member name="M:QtCore.QByteArrayMatcher.IndexIn(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Searches the char string str, which has length len, from byte
            position from (default 0, i.e. from the first byte), for the byte array
            pattern() that was set in the constructor or in the most recent call to
            setPattern(). Returns the position where the pattern() matched in str, or
            -1 if no match was found.</para>
            </summary>
        </member>
        <member name="P:QtCore.QByteArrayMatcher.Pattern">
            <summary>
            <para>Returns the byte array pattern that this byte array matcher will
            search for.</para>
            <para>See also setPattern().</para>
            <para></para>
            <para>Sets the byte array that this byte array matcher will search for
            to pattern.</para>
            <para>See also pattern() and indexIn().</para>
            </summary>
        </member>
        <member name="T:QtCore.QCollatorSortKey">
            <summary>
            <para>The QCollatorSortKey class can be used to speed up string
            collation.</para>
            </summary>
            <remarks>
            <para>The QCollatorSortKey class is always created by
            QCollator::sortKey() and is used for fast strings collation, for example
            when collating many strings.</para>
            <para></para>
            <para>See also QCollator and QCollator::sortKey().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCollatorSortKey.#ctor(QtCore.QCollatorSortKey)">
            <summary>
            <para>Constructs a copy of the other collator key.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollatorSortKey.Swap(QtCore.QCollatorSortKey)">
            <summary>
            <para>Swaps this collator key with other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollatorSortKey.Compare(QtCore.QCollatorSortKey)">
            <summary>
            <para>Compares the key to otherKey. Returns a negative value if the key
            is less than otherKey, 0 if the key is equal to otherKey or a positive
            value if the key is greater than otherKey.</para>
            <para>See also operator&lt;().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollatorSortKey.op_LessThan(QtCore.QCollatorSortKey,QtCore.QCollatorSortKey)">
            <summary>
            <para>According to the QCollator that created the keys, returns true if
            lhs should be sorted before rhs; otherwise returns false.</para>
            <para>See also QCollatorSortKey::compare().</para>
            </summary>
        </member>
        <member name="T:QtCore.QCollator">
            <summary>
            <para>The QCollator class compares strings according to a localized
            collation algorithm.</para>
            </summary>
            <remarks>
            <para>QCollator is initialized with a QLocale and an optional collation
            strategy. It tries to initialize the collator with the specified values.
            The collator can then be used to compare and sort strings in a locale
            dependent fashion.</para>
            <para>A QCollator object can be used together with template based
            sorting algorithms such as std::sort to sort a list of QStrings.</para>
            <para>In addition to the locale and collation strategy, several
            optional flags can be set that influence the result of the
            collation.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCollator.#ctor(QtCore.QLocale)">
            <summary>
            <para>Constructs a QCollator from locale. If locale is not specified
            the system's default locale is used.</para>
            <para>See also setLocale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.#ctor(QtCore.QCollator)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.Swap(QtCore.QCollator)">
            <summary>
            <para>Swaps this collator with other. This function is very fast and
            never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.Compare(System.String,System.String)">
            <summary>
            <para>Compares s1 with s2. Returns an integer less than, equal to, or
            greater than zero depending on whether s1 is smaller, equal or larger than
            s2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.Compare(QtCore.QStringRef,QtCore.QStringRef)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares s1 with s2. Returns an integer less than, equal to, or
            greater than zero depending on whether s1 is smaller, equal or larger than
            s2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.Compare(QtCore.QChar,System.Int32,QtCore.QChar,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compares s1 with s2. len1 and len2 specify the length of the
            QChar arrays pointer to by s1 and s2.</para>
            <para>Returns an integer less than, equal to, or greater than zero
            depending on whether s1 is smaller, equal or larger than s2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCollator.SortKey(System.String)">
            <summary>
            <para>Returns a sortKey for string.</para>
            <para>Creating the sort key is usually somewhat slower, than using the
            compare() methods directly. But if the string is compared repeatedly (e.g.
            when sorting a whole list of strings), it's usually faster to create the
            sort keys for each string and then sort using the keys.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCollator.Locale">
            <summary>
            <para>Returns the locale of the collator.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale of the collator to locale.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCollator.CaseSensitivity">
            <summary>
            <para>Returns case sensitivity of the collator.</para>
            <para>See also setCaseSensitivity().</para>
            <para></para>
            <para>Sets the case sensitivity of the collator.</para>
            <para>See also caseSensitivity().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCollator.NumericMode">
            <summary>
            <para>Returns true if numeric sorting is enabled, false
            otherwise.</para>
            <para>See also setNumericMode().</para>
            <para></para>
            <para>Enables numeric sorting mode when on is set to true.</para>
            <para>This will enable proper sorting of numeric digits, so that e.g.
            100 sorts after 99.</para>
            <para>By default this mode is off.</para>
            <para>Note: On Windows, this functionality makes use of the ICU
            library. If Qt was compiled without ICU support, it falls back to code
            using native Windows API, which only works from Windows 7 onwards. On older
            versions of Windows, it will not work and a warning will be emitted at
            runtime.</para>
            <para>See also numericMode().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCollator.IgnorePunctuation">
            <summary>
            <para>Returns true if punctuation characters and symbols are ignored
            when determining sort order.</para>
            <para>See also setIgnorePunctuation().</para>
            <para></para>
            <para>If on is set to true, punctuation characters and symbols are
            ignored when determining sort order.</para>
            <para>The default is locale dependent.</para>
            <para>See also ignorePunctuation().</para>
            </summary>
        </member>
        <member name="T:QtCore.QCommandLineOption">
            <summary>
            <para>The QCommandLineOption class defines a possible command-line
            option.</para>
            </summary>
            <remarks>
            <para>This class is used to describe an option on the command line. It
            allows different ways of defining the same option with multiple aliases
            possible. It is also used to describe how the option is used - it may be a
            flag (e.g. -v) or take a value (e.g. -o file).</para>
            <para>Examples:</para>
            <para>QCommandLineOption verboseOption(&quot;verbose&quot;,
            &quot;Verbose mode. Prints out more information.&quot;);</para>
            <para>QCommandLineOption outputOption(QStringList() &lt;&lt;
            &quot;o&quot; &lt;&lt; &quot;output&quot;, &quot;Write generated data into
            &lt;file&gt;.&quot;, &quot;file&quot;);</para>
            <para></para>
            <para>See also QCommandLineParser.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCommandLineOption.#ctor(System.String)">
            <summary>
            <para>Constructs a command line option object with the name
            name.</para>
            <para>The name can be either short or long. If the name is one
            character in length, it is considered a short name. Option names must not
            be empty, must not start with a dash or a slash character, must not contain
            a = and cannot be repeated.</para>
            <para>See also setDescription(), setValueName(), and
            setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.#ctor(QtCore.QStringList)">
            <summary>
            <para>Constructs a command line option object with the names
            names.</para>
            <para>This overload allows to set multiple names for the option, for
            instance o and output.</para>
            <para>The names can be either short or long. Any name in the list that
            is one character in length is a short name. Option names must not be empty,
            must not start with a dash or a slash character, must not contain a = and
            cannot be repeated.</para>
            <para>See also setDescription(), setValueName(), and
            setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            <para>Constructs a command line option object with the given
            arguments.</para>
            <para>The name of the option is set to name. The name can be either
            short or long. If the name is one character in length, it is considered a
            short name. Option names must not be empty, must not start with a dash or a
            slash character, must not contain a = and cannot be repeated.</para>
            <para>The description is set to description. It is customary to add a
            &quot;.&quot; at the end of the description.</para>
            <para>In addition, the valueName can be set if the option expects a
            value. The default value for the option is set to defaultValue.</para>
            <para>In Qt versions before 5.4, this constructor was explicit. In Qt
            5.4 and later, it no longer is and can be used for C++11-style uniform
            initialization:</para>
            <para>QCommandLineParser parser;</para>
            <para>parser.addOption({&quot;verbose&quot;, &quot;Verbose mode. Prints
            out more information.&quot;});</para>
            <para>See also setDescription(), setValueName(), and
            setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.#ctor(QtCore.QStringList,System.String,System.String,System.String)">
            <summary>
            <para>Constructs a command line option object with the given
            arguments.</para>
            <para>This overload allows to set multiple names for the option, for
            instance o and output.</para>
            <para>The names of the option are set to names. The names can be either
            short or long. Any name in the list that is one character in length is a
            short name. Option names must not be empty, must not start with a dash or a
            slash character, must not contain a = and cannot be repeated.</para>
            <para>The description is set to description. It is customary to add a
            &quot;.&quot; at the end of the description.</para>
            <para>In addition, the valueName can be set if the option expects a
            value. The default value for the option is set to defaultValue.</para>
            <para>In Qt versions before 5.4, this constructor was explicit. In Qt
            5.4 and later, it no longer is and can be used for C++11-style uniform
            initialization:</para>
            <para>QCommandLineParser parser;</para>
            <para>parser.addOption({{&quot;o&quot;, &quot;output&quot;},
            &quot;Write generated data into &lt;file&gt;.&quot;,
            &quot;file&quot;});</para>
            <para>See also setDescription(), setValueName(), and
            setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.#ctor(QtCore.QCommandLineOption)">
            <summary>
            <para>Constructs a QCommandLineOption object that is a copy of the
            QCommandLineOption object other.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.Swap(QtCore.QCommandLineOption)">
            <summary>
            <para>Swaps option other with this option. This operation is very fast
            and never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineOption.SetDefaultValue(System.String)">
            <summary>
            <para>Sets the default value used for this option to
            defaultValue.</para>
            <para>The default value is used if the user of the application does not
            specify the option on the command line.</para>
            <para>If defaultValue is empty, the option has no default
            values.</para>
            <para>See also defaultValues() and setDefaultValues().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineOption.ValueName">
            <summary>
            <para>Returns the name of the expected value.</para>
            <para>If empty, the option doesn't take a value.</para>
            <para>See also setValueName().</para>
            <para></para>
            <para>Sets the name of the expected value, for the documentation, to
            valueName.</para>
            <para>Options without a value assigned have a boolean-like behavior:
            either the user specifies --option or they don't.</para>
            <para>Options with a value assigned need to set a name for the expected
            value, for the documentation of the option in the help output. An option
            with names o and output, and a value name of file will appear as -o,
            --output &lt;file&gt;.</para>
            <para>Call QCommandLineParser::value() if you expect the option to be
            present only once, and QCommandLineParser::values() if you expect that
            option to be present multiple times.</para>
            <para>See also valueName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineOption.Description">
            <summary>
            <para>Returns the description set for this option.</para>
            <para>See also setDescription().</para>
            <para></para>
            <para>Sets the description used for this option to description.</para>
            <para>It is customary to add a &quot;.&quot; at the end of the
            description.</para>
            <para>The description is used by QCommandLineParser::showHelp().</para>
            <para>See also description().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineOption.DefaultValues">
            <summary>
            <para>Returns the default values set for this option.</para>
            <para>See also setDefaultValues().</para>
            <para></para>
            <para>Sets the list of default values used for this option to
            defaultValues.</para>
            <para>The default values are used if the user of the application does
            not specify the option on the command line.</para>
            <para>See also defaultValues() and setDefaultValue().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineOption.Names">
            <summary>
            <para>Returns the names set for this option.</para>
            </summary>
        </member>
        <member name="T:QtCore.QCommandLineParser">
            <summary>
            <para>The QCommandLineParser class provides a means for handling the
            command line options.</para>
            </summary>
            <remarks>
            <para>QCoreApplication provides the command-line arguments as a simple
            list of strings. QCommandLineParser provides the ability to define a set of
            options, parse the command-line arguments, and store which options have
            actually been used, as well as option values.</para>
            <para>Any argument that isn't an option (i.e. doesn't start with a -)
            is stored as a &quot;positional argument&quot;.</para>
            <para>The parser handles short names, long names, more than one name
            for the same option, and option values.</para>
            <para>Options on the command line are recognized as starting with a
            single or double - character(s). The option - (single dash alone) is a
            special case, often meaning standard input, and not treated as an option.
            The parser will treat everything after the option -- (double dash) as
            positional arguments.</para>
            <para>Short options are single letters. The option v would be specified
            by passing -v on the command line. In the default parsing mode, short
            options can be written in a compact form, for instance -abc is equivalent
            to -a -b -c. The parsing mode for can be set to ParseAsLongOptions, in
            which case -abc will be parsed as the long option abc.</para>
            <para>Long options are more than one letter long and cannot be
            compacted together. The long option verbose would be passed as --verbose or
            -verbose.</para>
            <para>Passing values to options can be done using the assignment
            operator: -v=value --verbose=value, or a space: -v value --verbose value,
            i.e. the next argument is used as value (even if it starts with a
            -).</para>
            <para>The parser does not support optional values - if an option is set
            to require a value, one must be present. If such an option is placed last
            and has no value, the option will be treated as if it had not been
            specified.</para>
            <para>The parser does not automatically support negating or disabling
            long options by using the format --disable-option or --no-option. However,
            it is possible to handle this case explicitly by making an option with
            no-option as one of its names, and handling the option explicitly.</para>
            <para>Example:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QCoreApplication app(argc, argv);</para>
            <para>
            QCoreApplication::setApplicationName(&quot;my-copy-program&quot;);</para>
            <para>
            QCoreApplication::setApplicationVersion(&quot;1.0&quot;);</para>
            <para></para>
            <para>    QCommandLineParser parser;</para>
            <para>    parser.setApplicationDescription(&quot;Test
            helper&quot;);</para>
            <para>    parser.addHelpOption();</para>
            <para>    parser.addVersionOption();</para>
            <para>    parser.addPositionalArgument(&quot;source&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Source file to
            copy.&quot;));</para>
            <para>    parser.addPositionalArgument(&quot;destination&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Destination
            directory.&quot;));</para>
            <para></para>
            <para>    // A boolean option with a single name (-p)</para>
            <para>    QCommandLineOption showProgressOption(&quot;p&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Show progress during
            copy&quot;));</para>
            <para>    parser.addOption(showProgressOption);</para>
            <para></para>
            <para>    // A boolean option with multiple names (-f, --force)</para>
            <para>    QCommandLineOption forceOption(QStringList() &lt;&lt;
            &quot;f&quot; &lt;&lt; &quot;force&quot;,</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Overwrite existing files.&quot;));</para>
            <para>    parser.addOption(forceOption);</para>
            <para></para>
            <para>    // An option with a value</para>
            <para>    QCommandLineOption targetDirectoryOption(QStringList()
            &lt;&lt; &quot;t&quot; &lt;&lt; &quot;target-directory&quot;,</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Copy all source files into &lt;directory&gt;.&quot;),</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;directory&quot;));</para>
            <para>    parser.addOption(targetDirectoryOption);</para>
            <para></para>
            <para>    // Process the actual command line arguments given by the
            user</para>
            <para>    parser.process(app);</para>
            <para></para>
            <para>    const QStringList args = parser.positionalArguments();</para>
            <para>    // source is args.at(0), destination is args.at(1)</para>
            <para></para>
            <para>    bool showProgress = parser.isSet(showProgressOption);</para>
            <para>    bool force = parser.isSet(forceOption);</para>
            <para>    QString targetDir =
            parser.value(targetDirectoryOption);</para>
            <para>    // ...</para>
            <para>}</para>
            <para>If your compiler supports the C++11 standard, the three
            addOption() calls in the above example can be simplified:</para>
            <para>    parser.addOptions({</para>
            <para>        // A boolean option with a single name (-p)</para>
            <para>        {&quot;p&quot;,</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Show progress during copy&quot;)},</para>
            <para>        // A boolean option with multiple names (-f,
            --force)</para>
            <para>        {{&quot;f&quot;, &quot;force&quot;},</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Overwrite existing files.&quot;)},</para>
            <para>        // An option with a value</para>
            <para>        {{&quot;t&quot;, &quot;target-directory&quot;},</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Copy all source files into &lt;directory&gt;.&quot;),</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;directory&quot;)},</para>
            <para>    });</para>
            <para>Known limitation: the parsing of Qt options inside
            QCoreApplication and subclasses happens before QCommandLineParser exists,
            so it can't take it into account. This means any option value that looks
            like a builtin Qt option, will be treated by QCoreApplication as a builtin
            Qt option. Example: --profile -reverse will lead to QGuiApplication seeing
            the -reverse option set, and removing it from QCoreApplication::arguments()
            before QCommandLineParser defines the profile option and parses the command
            line.</para>
            <para></para>
            <para>How to Use QCommandLineParser in Complex Applications</para>
            <para>In practice, additional error checking needs to be performed on
            the positional arguments and option values. For example, ranges of numbers
            should be checked.</para>
            <para>It is then advisable to introduce a function to do the command
            line parsing which takes a struct or class receiving the option values
            returning an enumeration representing the result. The dnslookup example of
            the QtNetwork module illustrates this:</para>
            <para>struct DnsQuery</para>
            <para>{</para>
            <para>    DnsQuery() : type(QDnsLookup::A) {}</para>
            <para></para>
            <para>    QDnsLookup::Type type;</para>
            <para>    QHostAddress nameServer;</para>
            <para>    QString name;</para>
            <para>};</para>
            <para></para>
            <para>enum CommandLineParseResult</para>
            <para>{</para>
            <para>    CommandLineOk,</para>
            <para>    CommandLineError,</para>
            <para>    CommandLineVersionRequested,</para>
            <para>    CommandLineHelpRequested</para>
            <para>};</para>
            <para></para>
            <para>CommandLineParseResult parseCommandLine(QCommandLineParser
            &amp;parser, DnsQuery *query, QString *errorMessage)</para>
            <para>{</para>
            <para>
            parser.setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
            </para>
            <para>    const QCommandLineOption nameServerOption(&quot;n&quot;,
            &quot;The name server to use.&quot;, &quot;nameserver&quot;);</para>
            <para>    parser.addOption(nameServerOption);</para>
            <para>    const QCommandLineOption typeOption(&quot;t&quot;, &quot;The
            lookup type.&quot;, &quot;type&quot;);</para>
            <para>    parser.addOption(typeOption);</para>
            <para>    parser.addPositionalArgument(&quot;name&quot;, &quot;The name
            to look up.&quot;);</para>
            <para>    const QCommandLineOption helpOption =
            parser.addHelpOption();</para>
            <para>    const QCommandLineOption versionOption =
            parser.addVersionOption();</para>
            <para></para>
            <para>    if (!parser.parse(QCoreApplication::arguments())) {</para>
            <para>        *errorMessage = parser.errorText();</para>
            <para>        return CommandLineError;</para>
            <para>    }</para>
            <para></para>
            <para>    if (parser.isSet(versionOption))</para>
            <para>        return CommandLineVersionRequested;</para>
            <para></para>
            <para>    if (parser.isSet(helpOption))</para>
            <para>        return CommandLineHelpRequested;</para>
            <para></para>
            <para>    if (parser.isSet(nameServerOption)) {</para>
            <para>        const QString nameserver =
            parser.value(nameServerOption);</para>
            <para>        query-&gt;nameServer = QHostAddress(nameserver);</para>
            <para>        if (query-&gt;nameServer.isNull() ||
            query-&gt;nameServer.protocol() ==
            QAbstractSocket::UnknownNetworkLayerProtocol) {</para>
            <para>            *errorMessage = &quot;Bad nameserver address: &quot;
            + nameserver;</para>
            <para>            return CommandLineError;</para>
            <para>        }</para>
            <para>    }</para>
            <para></para>
            <para>    if (parser.isSet(typeOption)) {</para>
            <para>        const QString typeParameter =
            parser.value(typeOption);</para>
            <para>        const int type =
            typeFromParameter(typeParameter.toLower());</para>
            <para>        if (type &lt; 0) {</para>
            <para>            *errorMessage = &quot;Bad record type: &quot; +
            typeParameter;</para>
            <para>            return CommandLineError;</para>
            <para>        }</para>
            <para>        query-&gt;type =
            static_cast&lt;QDnsLookup::Type&gt;(type);</para>
            <para>    }</para>
            <para></para>
            <para>    const QStringList positionalArguments =
            parser.positionalArguments();</para>
            <para>    if (positionalArguments.isEmpty()) {</para>
            <para>        *errorMessage = &quot;Argument 'name'
            missing.&quot;;</para>
            <para>        return CommandLineError;</para>
            <para>    }</para>
            <para>    if (positionalArguments.size() &gt; 1) {</para>
            <para>        *errorMessage = &quot;Several 'name' arguments
            specified.&quot;;</para>
            <para>        return CommandLineError;</para>
            <para>    }</para>
            <para>    query-&gt;name = positionalArguments.first();</para>
            <para></para>
            <para>    return CommandLineOk;</para>
            <para>}</para>
            <para>In the main function, help should be printed to the standard
            output if the help option was passed and the application should return the
            exit code 0.</para>
            <para>If an error was detected, the error message should be printed to
            the standard error output and the application should return an exit code
            other than 0.</para>
            <para>
            QCoreApplication::setApplicationVersion(QT_VERSION_STR);</para>
            <para>
            QCoreApplication::setApplicationName(QCoreApplication::translate(&quot;QDns
            LookupExample&quot;, &quot;DNS Lookup Example&quot;));</para>
            <para>    QCommandLineParser parser;</para>
            <para>
            parser.setApplicationDescription(QCoreApplication::translate(&quot;QDnsLook
            upExample&quot;, &quot;An example demonstrating the class
            QDnsLookup.&quot;));</para>
            <para>    DnsQuery query;</para>
            <para>    QString errorMessage;</para>
            <para>    switch (parseCommandLine(parser, &amp;query,
            &amp;errorMessage)) {</para>
            <para>    case CommandLineOk:</para>
            <para>        break;</para>
            <para>    case CommandLineError:</para>
            <para>        fputs(qPrintable(errorMessage), stderr);</para>
            <para>        fputs(&quot;\n\n&quot;, stderr);</para>
            <para>        fputs(qPrintable(parser.helpText()), stderr);</para>
            <para>        return 1;</para>
            <para>    case CommandLineVersionRequested:</para>
            <para>        printf(&quot;%s %s\n&quot;,
            qPrintable(QCoreApplication::applicationName()),</para>
            <para>
            qPrintable(QCoreApplication::applicationVersion()));</para>
            <para>        return 0;</para>
            <para>    case CommandLineHelpRequested:</para>
            <para>        parser.showHelp();</para>
            <para>        Q_UNREACHABLE();</para>
            <para>    }</para>
            <para>A special case to consider here are GUI applications on Windows
            and mobile platforms. These applications may not use the standard output or
            error channels since the output is either discarded or not
            accessible.</para>
            <para>On Windows, QCommandLineParser uses message boxes to display
            usage information and errors if no console window can be obtained.</para>
            <para>For other platforms, it is recommended to display help texts and
            error messages using a QMessageBox. To preserve the formatting of the help
            text, rich text with &lt;pre&gt; elements should be used:</para>
            <para>switch (parseCommandLine(parser, &amp;query, &amp;errorMessage))
            {</para>
            <para>case CommandLineOk:</para>
            <para>    break;</para>
            <para>case CommandLineError:</para>
            <para>    QMessageBox::warning(0,
            QGuiApplication::applicationDisplayName(),</para>
            <para>
            &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;h2&gt;&quot; + errorMessage
            + &quot;&lt;/h2&gt;&lt;pre&gt;&quot;</para>
            <para>                         + parser.helpText() +
            &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;);</para>
            <para>    return 1;</para>
            <para>case CommandLineVersionRequested:</para>
            <para>    QMessageBox::information(0,
            QGuiApplication::applicationDisplayName(),</para>
            <para>
            QGuiApplication::applicationDisplayName() + ' '</para>
            <para>                             +
            QCoreApplication::applicationVersion());</para>
            <para>    return 0;</para>
            <para>case CommandLineHelpRequested:</para>
            <para>    QMessageBox::warning(0,
            QGuiApplication::applicationDisplayName(),</para>
            <para>
            &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;pre&gt;&quot;</para>
            <para>                         + parser.helpText() +
            &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;);</para>
            <para>    return 0;</para>
            <para>}</para>
            <para>However, this does not apply to the dnslookup example, because it
            is a console application.</para>
            <para></para>
            <para>See also QCommandLineOption and QCoreApplication.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCommandLineParser.#ctor">
            <summary>
            <para>Constructs a command line parser object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.SetSingleDashWordOptionMode(QtCore.QCommandLineParser.SingleDashWordOptionMode)">
            <summary>
            <para>Sets the parsing mode to singleDashWordOptionMode. This must be
            called before process() or parse().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.AddOption(QtCore.QCommandLineOption)">
            <summary>
            <para>Adds the option option to look for while parsing.</para>
            <para>Returns true if adding the option was successful; otherwise
            returns false.</para>
            <para>Adding the option fails if there is no name attached to the
            option, or the option has a name that clashes with an option name added
            before.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.AddVersionOption">
            <summary>
            <para>Adds the -v / --version option, which displays the version string
            of the application.</para>
            <para>This option is handled automatically by
            QCommandLineParser.</para>
            <para>You can set the actual version string by using
            QCoreApplication::setApplicationVersion().</para>
            <para>Returns the option instance, which can be used to call
            isSet().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.AddHelpOption">
            <summary>
            <para>Adds the help option (-h, --help and -? on Windows) This option
            is handled automatically by QCommandLineParser.</para>
            <para>Remember to use setApplicationDescription to set the application
            description, which will be displayed when this option is used.</para>
            <para>Example:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QCoreApplication app(argc, argv);</para>
            <para>
            QCoreApplication::setApplicationName(&quot;my-copy-program&quot;);</para>
            <para>
            QCoreApplication::setApplicationVersion(&quot;1.0&quot;);</para>
            <para></para>
            <para>    QCommandLineParser parser;</para>
            <para>    parser.setApplicationDescription(&quot;Test
            helper&quot;);</para>
            <para>    parser.addHelpOption();</para>
            <para>    parser.addVersionOption();</para>
            <para>    parser.addPositionalArgument(&quot;source&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Source file to
            copy.&quot;));</para>
            <para>    parser.addPositionalArgument(&quot;destination&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Destination
            directory.&quot;));</para>
            <para></para>
            <para>    // A boolean option with a single name (-p)</para>
            <para>    QCommandLineOption showProgressOption(&quot;p&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Show progress during
            copy&quot;));</para>
            <para>    parser.addOption(showProgressOption);</para>
            <para></para>
            <para>    // A boolean option with multiple names (-f, --force)</para>
            <para>    QCommandLineOption forceOption(QStringList() &lt;&lt;
            &quot;f&quot; &lt;&lt; &quot;force&quot;,</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Overwrite existing files.&quot;));</para>
            <para>    parser.addOption(forceOption);</para>
            <para></para>
            <para>    // An option with a value</para>
            <para>    QCommandLineOption targetDirectoryOption(QStringList()
            &lt;&lt; &quot;t&quot; &lt;&lt; &quot;target-directory&quot;,</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;Copy all source files into &lt;directory&gt;.&quot;),</para>
            <para>            QCoreApplication::translate(&quot;main&quot;,
            &quot;directory&quot;));</para>
            <para>    parser.addOption(targetDirectoryOption);</para>
            <para></para>
            <para>    // Process the actual command line arguments given by the
            user</para>
            <para>    parser.process(app);</para>
            <para></para>
            <para>    const QStringList args = parser.positionalArguments();</para>
            <para>    // source is args.at(0), destination is args.at(1)</para>
            <para></para>
            <para>    bool showProgress = parser.isSet(showProgressOption);</para>
            <para>    bool force = parser.isSet(forceOption);</para>
            <para>    QString targetDir =
            parser.value(targetDirectoryOption);</para>
            <para>    // ...</para>
            <para>}</para>
            <para>Returns the option instance, which can be used to call
            isSet().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.AddPositionalArgument(System.String,System.String,System.String)">
            <summary>
            <para>Defines an additional argument to the application, for the
            benefit of the help text.</para>
            <para>The argument name and description will appear under the
            Arguments: section of the help. If syntax is specified, it will be appended
            to the Usage line, otherwise the name will be appended.</para>
            <para>Example:</para>
            <para>// Usage: image-editor file</para>
            <para>//</para>
            <para>// Arguments:</para>
            <para>//   file                  The file to open.</para>
            <para>parser.addPositionalArgument(&quot;file&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;The file to
            open.&quot;));</para>
            <para></para>
            <para>// Usage: web-browser [urls...]</para>
            <para>//</para>
            <para>// Arguments:</para>
            <para>//   urls                URLs to open, optionally.</para>
            <para>parser.addPositionalArgument(&quot;urls&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;URLs to open,
            optionally.&quot;), &quot;[urls...]&quot;);</para>
            <para></para>
            <para>// Usage: cp source destination</para>
            <para>//</para>
            <para>// Arguments:</para>
            <para>//   source                Source file to copy.</para>
            <para>//   destination           Destination directory.</para>
            <para>parser.addPositionalArgument(&quot;source&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Source file to
            copy.&quot;));</para>
            <para>parser.addPositionalArgument(&quot;destination&quot;,
            QCoreApplication::translate(&quot;main&quot;, &quot;Destination
            directory.&quot;));</para>
            <para>See also addHelpOption() and helpText().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.ClearPositionalArguments">
            <summary>
            <para>Clears the definitions of additional arguments from the help
            text.</para>
            <para>This is only needed for the special case of tools which support
            multiple commands with different options. Once the actual command has been
            identified, the options for this command can be defined, and the help text
            for the command can be adjusted accordingly.</para>
            <para>Example:</para>
            <para>QCoreApplication app(argc, argv);</para>
            <para>QCommandLineParser parser;</para>
            <para></para>
            <para>parser.addPositionalArgument(&quot;command&quot;, &quot;The
            command to execute.&quot;);</para>
            <para></para>
            <para>// Call parse() to find out the positional arguments.</para>
            <para>parser.parse(QCoreApplication::arguments());</para>
            <para></para>
            <para>const QStringList args = parser.positionalArguments();</para>
            <para>const QString command = args.isEmpty() ? QString() :
            args.first();</para>
            <para>if (command == &quot;resize&quot;) {</para>
            <para>    parser.clearPositionalArguments();</para>
            <para>    parser.addPositionalArgument(&quot;resize&quot;, &quot;Resize
            the object to a new size.&quot;, &quot;resize
            [resize_options]&quot;);</para>
            <para>    parser.addOption(QCommandLineOption(&quot;size&quot;,
            &quot;New size.&quot;, &quot;new_size&quot;));</para>
            <para>    parser.process(app);</para>
            <para>    // ...</para>
            <para>}</para>
            <para></para>
            <para>/*</para>
            <para>This code results in context-dependent help:</para>
            <para></para>
            <para>$ tool --help</para>
            <para>Usage: tool command</para>
            <para></para>
            <para>Arguments:</para>
            <para>  command  The command to execute.</para>
            <para></para>
            <para>$ tool resize --help</para>
            <para>Usage: tool resize [resize_options]</para>
            <para></para>
            <para>Options:</para>
            <para>  --size &lt;size&gt;  New size.</para>
            <para></para>
            <para>Arguments:</para>
            <para>  resize         Resize the object to a new size.</para>
            <para>*/</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Process(QtCore.QStringList)">
            <summary>
            <para>Processes the command line arguments.</para>
            <para>In addition to parsing the options (like parse()), this function
            also handles the builtin options and handles errors.</para>
            <para>The builtin options are --version if addVersionOption was called
            and --help if addHelpOption was called.</para>
            <para>When invoking one of these options, or when an error happens (for
            instance an unknown option was passed), the current process will then stop,
            using the exit() function.</para>
            <para>See also QCoreApplication::arguments() and parse().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Process(QtCore.QCoreApplication)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The command line is obtained from the QCoreApplication instance
            app.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Parse(QtCore.QStringList)">
            <summary>
            <para>Parses the command line arguments.</para>
            <para>Most programs don't need to call this, a simple call to process()
            is enough.</para>
            <para>parse() is more low-level, and only does the parsing. The
            application will have to take care of the error handling, using errorText()
            if parse() returns false. This can be useful for instance to show a
            graphical error message in graphical programs.</para>
            <para>Calling parse() instead of process() can also be useful in order
            to ignore unknown options temporarily, because more option definitions will
            be provided later on (depending on one of the arguments), before calling
            process().</para>
            <para>Don't forget that arguments must start with the name of the
            executable (ignored, though).</para>
            <para>Returns false in case of a parse error (unknown option or missing
            value); returns true otherwise.</para>
            <para>See also process().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.IsSet(System.String)">
            <summary>
            <para>Checks whether the option name was passed to the
            application.</para>
            <para>Returns true if the option name was set, false otherwise.</para>
            <para>The name provided can be any long or short name of any option
            that was added with addOption(). All the options names are treated as being
            equivalent. If the name is not recognized or that option was not present,
            false is returned.</para>
            <para>Example:</para>
            <para>bool verbose = parser.isSet(&quot;verbose&quot;);</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Value(System.String)">
            <summary>
            <para>Returns the option value found for the given option name
            optionName, or an empty string if not found.</para>
            <para>The name provided can be any long or short name of any option
            that was added with addOption(). All the option names are treated as being
            equivalent. If the name is not recognized or that option was not present,
            an empty string is returned.</para>
            <para>For options found by the parser, the last value found for that
            option is returned. If the option wasn't specified on the command line, the
            default value is returned.</para>
            <para>An empty string is returned if the option does not take a
            value.</para>
            <para>See also values(), QCommandLineOption::setDefaultValue(), and
            QCommandLineOption::setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Values(System.String)">
            <summary>
            <para>Returns a list of option values found for the given option name
            optionName, or an empty list if not found.</para>
            <para>The name provided can be any long or short name of any option
            that was added with addOption(). All the options names are treated as being
            equivalent. If the name is not recognized or that option was not present,
            an empty list is returned.</para>
            <para>For options found by the parser, the list will contain an entry
            for each time the option was encountered by the parser. If the option
            wasn't specified on the command line, the default values are
            returned.</para>
            <para>An empty list is returned if the option does not take a
            value.</para>
            <para>See also value(), QCommandLineOption::setDefaultValue(), and
            QCommandLineOption::setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.IsSet(QtCore.QCommandLineOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Checks whether the option was passed to the application.</para>
            <para>Returns true if the option was set, false otherwise.</para>
            <para>This is the recommended way to check for options with no
            values.</para>
            <para>Example:</para>
            <para>QCoreApplication app(argc, argv);</para>
            <para>QCommandLineParser parser;</para>
            <para>QCommandLineOption verboseOption(&quot;verbose&quot;);</para>
            <para>parser.addOption(verboseOption);</para>
            <para>parser.process(app);</para>
            <para>bool verbose = parser.isSet(verboseOption);</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Value(QtCore.QCommandLineOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the option value found for the given option, or an empty
            string if not found.</para>
            <para>For options found by the parser, the last value found for that
            option is returned. If the option wasn't specified on the command line, the
            default value is returned.</para>
            <para>An empty string is returned if the option does not take a
            value.</para>
            <para>See also values(), QCommandLineOption::setDefaultValue(), and
            QCommandLineOption::setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.Values(QtCore.QCommandLineOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a list of option values found for the given option, or an
            empty list if not found.</para>
            <para>For options found by the parser, the list will contain an entry
            for each time the option was encountered by the parser. If the option
            wasn't specified on the command line, the default values are
            returned.</para>
            <para>An empty list is returned if the option does not take a
            value.</para>
            <para>See also value(), QCommandLineOption::setDefaultValue(), and
            QCommandLineOption::setDefaultValues().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.ShowVersion">
            <summary>
            <para>Displays the version information from
            QCoreApplication::applicationVersion(), and exits the application. This is
            automatically triggered by the --version option, but can also be used to
            display the version when not using process(). The exit code is set to
            EXIT_SUCCESS (0).</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also addVersionOption().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.ShowHelp(System.Int32)">
            <summary>
            <para>Displays the help information, and exits the application. This is
            automatically triggered by the --help option, but can also be used to
            display the help when the user is not invoking the application correctly.
            The exit code is set to exitCode. It should be set to 0 if the user
            requested to see the help, and to any other value in case of an
            error.</para>
            <para>See also helpText().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.HelpText">
            <summary>
            <para>Returns a string containing the complete help information.</para>
            <para>See also showHelp().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCommandLineParser.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineParser.ApplicationDescription">
            <summary>
            <para>Returns the application description set in
            setApplicationDescription().</para>
            <para>See also setApplicationDescription().</para>
            <para></para>
            <para>Sets the application description shown by helpText().</para>
            <para>See also applicationDescription().</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineParser.ErrorText">
            <summary>
            <para>Returns a translated error text for the user. This should only be
            called when parse() returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineParser.PositionalArguments">
            <summary>
            <para>Returns a list of positional arguments.</para>
            <para>These are all of the arguments that were not recognized as part
            of an option.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineParser.OptionNames">
            <summary>
            <para>Returns a list of option names that were found.</para>
            <para>This returns a list of all the recognized option names found by
            the parser, in the order in which they were found. For any long options
            that were in the form {--option=value}, the value part will have been
            dropped.</para>
            <para>The names in this list do not include the preceding dash
            characters. Names may appear more than once in this list if they were
            encountered more than once by the parser.</para>
            <para>Any entry in the list can be used with value() or with values()
            to get any relevant option values.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCommandLineParser.UnknownOptionNames">
            <summary>
            <para>Returns a list of unknown option names.</para>
            <para>This list will include both long an short name options that were
            not recognized. For any long options that were in the form
            {--option=value}, the value part will have been dropped and only the long
            name is added.</para>
            <para>The names in this list do not include the preceding dash
            characters. Names may appear more than once in this list if they were
            encountered more than once by the parser.</para>
            <para>See also optionNames().</para>
            </summary>
        </member>
        <member name="T:QtCore.QCommandLineParser.SingleDashWordOptionMode">
            <summary>
            <para>This enum describes the way the parser interprets command-line
            options that use a single dash followed by multiple letters, as as
            -abc.</para>
            <para>See also setSingleDashWordOptionMode().</para>
            </summary>
        </member>
        <member name="F:QtCore.QCommandLineParser.SingleDashWordOptionMode.ParseAsCompactedShortOptions">
            <summary>-abc is interpreted as -a -b -c, i.e. as three short options that have been compacted on the command-line, if none of the options take a value. If a takes a value, then it is interpreted as -a bc, i.e. the short option a followed by the value bc. This is typically used in tools that behave like compilers, in order to handle options such as -DDEFINE=VALUE or -I/include/path. This is the default parsing mode. New applications are recommended to use this mode.</summary>
        </member>
        <member name="F:QtCore.QCommandLineParser.SingleDashWordOptionMode.ParseAsLongOptions">
            <summary>-abc is interpreted as --abc, i.e. as the long option named abc. This is how Qt's own tools (uic, rcc...) have always been parsing arguments. This mode should be used for preserving compatibility in applications that were parsing arguments in such a way.</summary>
        </member>
        <member name="T:QtCore.QCryptographicHash">
            <summary>
            <para>The QCryptographicHash class provides a way to generate
            cryptographic hashes.</para>
            </summary>
            <remarks>
            <para>QCryptographicHash can be used to generate cryptographic hashes
            of binary or text data.</para>
            <para>Currently MD4, MD5, SHA-1, SHA-224, SHA-256, SHA-384, and SHA-512
            are supported.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QCryptographicHash.#ctor(QtCore.QCryptographicHash.Algorithm)">
            <summary>
            <para>Constructs an object that can be used to create a cryptographic
            hash from data using method.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCryptographicHash.Reset">
            <summary>
            <para>Resets the object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCryptographicHash.AddData(System.String,System.Int32)">
            <summary>
            <para>Adds the first length chars of data to the cryptographic
            hash.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCryptographicHash.AddData(QtCore.QByteArray)">
            <summary>
            <para>This function overloads addData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QCryptographicHash.AddData(QtCore.QIODevice)">
            <summary>
            <para>Reads the data from the open QIODevice device until it ends and
            hashes it. Returns true if reading was successful.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QCryptographicHash.Hash(QtCore.QByteArray,QtCore.QCryptographicHash.Algorithm)">
            <summary>
            <para>Returns the hash of data using method.</para>
            </summary>
        </member>
        <member name="P:QtCore.QCryptographicHash.Result">
            <summary>
            <para>Returns the final hash value.</para>
            <para>See also QByteArray::toHex().</para>
            </summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Md4">
            <summary>Generate an MD4 hash sum</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Md5">
            <summary>Generate an MD5 hash sum</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha1">
            <summary>Generate an SHA-1 hash sum</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha224">
            <summary>Generate an SHA-224 hash sum (SHA-2). Introduced in Qt 5.0</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha256">
            <summary>Generate an SHA-256 hash sum (SHA-2). Introduced in Qt 5.0</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha384">
            <summary>Generate an SHA-384 hash sum (SHA-2). Introduced in Qt 5.0</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha512">
            <summary>Generate an SHA-512 hash sum (SHA-2). Introduced in Qt 5.0</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha3_224">
            <summary>Generate an SHA3-224 hash sum. Introduced in Qt 5.1</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha3_256">
            <summary>Generate an SHA3-256 hash sum. Introduced in Qt 5.1</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha3_384">
            <summary>Generate an SHA3-384 hash sum. Introduced in Qt 5.1</summary>
        </member>
        <member name="F:QtCore.QCryptographicHash.Algorithm.Sha3_512">
            <summary>Generate an SHA3-512 hash sum. Introduced in Qt 5.1</summary>
        </member>
        <member name="T:QtCore.QElapsedTimer">
            <summary>
            <para>The QElapsedTimer class provides a fast way to calculate elapsed
            times.</para>
            </summary>
            <remarks>
            <para>The QElapsedTimer class is usually used to quickly calculate how
            much time has elapsed between two events. Its API is similar to that of
            QTime, so code that was using that can be ported quickly to the new
            class.</para>
            <para>However, unlike QTime, QElapsedTimer tries to use monotonic
            clocks if possible. This means it's not possible to convert QElapsedTimer
            objects to a human-readable time.</para>
            <para>The typical use-case for the class is to determine how much time
            was spent in a slow operation. The simplest example of such a case is for
            debugging purposes, as in the following example:</para>
            <para>    QElapsedTimer timer;</para>
            <para>    timer.start();</para>
            <para></para>
            <para>    slowOperation1();</para>
            <para></para>
            <para>    qDebug() &lt;&lt; &quot;The slow operation took&quot;
            &lt;&lt; timer.elapsed() &lt;&lt; &quot;milliseconds&quot;;</para>
            <para>In this example, the timer is started by a call to start() and
            the elapsed timer is calculated by the elapsed() function.</para>
            <para>The time elapsed can also be used to recalculate the time
            available for another operation, after the first one is complete. This is
            useful when the execution must complete within a certain time period, but
            several steps are needed. The waitFor-type functions in QIODevice and its
            subclasses are good examples of such need. In that case, the code could be
            as follows:</para>
            <para>void executeSlowOperations(int timeout)</para>
            <para>{</para>
            <para>    QElapsedTimer timer;</para>
            <para>    timer.start();</para>
            <para>    slowOperation1();</para>
            <para></para>
            <para>    int remainingTime = timeout - timer.elapsed();</para>
            <para>    if (remainingTime &gt; 0)</para>
            <para>        slowOperation2(remainingTime);</para>
            <para>}</para>
            <para>Another use-case is to execute a certain operation for a specific
            timeslice. For this, QElapsedTimer provides the hasExpired() convenience
            function, which can be used to determine if a certain number of
            milliseconds has already elapsed:</para>
            <para>void executeOperationsForTime(int ms)</para>
            <para>{</para>
            <para>    QElapsedTimer timer;</para>
            <para>    timer.start();</para>
            <para></para>
            <para>    while (!timer.hasExpired(ms))</para>
            <para>        slowOperation1();</para>
            <para>}</para>
            <para></para>
            <para>Reference Clocks</para>
            <para>QElapsedTimer will use the platform's monotonic reference clock
            in all platforms that support it (see QElapsedTimer::isMonotonic()). This
            has the added benefit that QElapsedTimer is immune to time adjustments,
            such as the user correcting the time. Also unlike QTime, QElapsedTimer is
            immune to changes in the timezone settings, such as daylight saving
            periods.</para>
            <para>On the other hand, this means QElapsedTimer values can only be
            compared with other values that use the same reference. This is especially
            true if the time since the reference is extracted from the QElapsedTimer
            object (QElapsedTimer::msecsSinceReference()) and serialised. These values
            should never be exchanged across the network or saved to disk, since
            there's no telling whether the computer node receiving the data is the same
            as the one originating it or if it has rebooted since.</para>
            <para>It is, however, possible to exchange the value with other
            processes running on the same machine, provided that they also use the same
            reference clock. QElapsedTimer will always use the same clock, so it's safe
            to compare with the value coming from another process in the same machine.
            If comparing to values produced by other APIs, you should check that the
            clock used is the same as QElapsedTimer (see
            QElapsedTimer::clockType()).</para>
            <para></para>
            <para>32-bit overflows</para>
            <para>Some of the clocks used by QElapsedTimer have a limited range and
            may overflow after hitting the upper limit (usually 32-bit). QElapsedTimer
            deals with this overflow issue and presents a consistent timing. However,
            when extracting the time since reference from QElapsedTimer, two different
            processes in the same machine may have different understanding of how much
            time has actually elapsed.</para>
            <para>The information on which clocks types may overflow and how to
            remedy that issue is documented along with the clock types.</para>
            <para></para>
            <para>See also QTime and QTimer.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QElapsedTimer.#ctor">
            <summary>
            <para>Constructs an invalid QElapsedTimer. A timer becomes valid once
            it has been started.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also isValid() and start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.Start">
            <summary>
            <para>Starts this timer. Once started, a timer value can be checked
            with elapsed() or msecsSinceReference().</para>
            <para>Normally, a timer is started just before a lengthy operation,
            such as:</para>
            <para>    QElapsedTimer timer;</para>
            <para>    timer.start();</para>
            <para></para>
            <para>    slowOperation1();</para>
            <para></para>
            <para>    qDebug() &lt;&lt; &quot;The slow operation took&quot;
            &lt;&lt; timer.elapsed() &lt;&lt; &quot;milliseconds&quot;;</para>
            <para>Also, starting a timer makes it valid again.</para>
            <para>See also restart(), invalidate(), and elapsed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.Restart">
            <summary>
            <para>Restarts the timer and returns the time elapsed since the
            previous start. This function is equivalent to obtaining the elapsed time
            with elapsed() and then starting the timer again with start(), but it does
            so in one single operation, avoiding the need to obtain the clock value
            twice.</para>
            <para>Restarting the timer makes it valid again.</para>
            <para>The following example illustrates how to use this function to
            calibrate a parameter to a slow operation (for example, an iteration count)
            so that this operation takes at least 250 milliseconds:</para>
            <para>    QElapsedTimer timer;</para>
            <para></para>
            <para>    int count = 1;</para>
            <para>    timer.start();</para>
            <para>    do {</para>
            <para>        count *= 2;</para>
            <para>        slowOperation2(count);</para>
            <para>    } while (timer.restart() &lt; 250);</para>
            <para></para>
            <para>    return count;</para>
            <para>See also start(), invalidate(), and elapsed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.Invalidate">
            <summary>
            <para>Marks this QElapsedTimer object as invalid.</para>
            <para>An invalid object can be checked with isValid(). Calculations of
            timer elapsed since invalid data are undefined and will likely produce
            bizarre results.</para>
            <para>See also isValid(), start(), and restart().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.HasExpired(System.Int64)">
            <summary>
            <para>Returns true if this QElapsedTimer has already expired by timeout
            milliseconds (that is, more than timeout milliseconds have elapsed). The
            value of timeout can be -1 to indicate that this timer does not expire, in
            which case this function will always return false.</para>
            <para>See also elapsed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.MsecsTo(QtCore.QElapsedTimer)">
            <summary>
            <para>Returns the number of milliseconds between this QElapsedTimer and
            other. If other was started before this object, the returned value will be
            negative. If it was started later, the returned value will be
            positive.</para>
            <para>The return value is undefined if this object or other were
            invalidated.</para>
            <para>See also secsTo() and elapsed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.SecsTo(QtCore.QElapsedTimer)">
            <summary>
            <para>Returns the number of seconds between this QElapsedTimer and
            other. If other was started before this object, the returned value will be
            negative. If it was started later, the returned value will be
            positive.</para>
            <para>The return value is undefined if this object or other were
            invalidated.</para>
            <para>See also msecsTo() and elapsed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.op_Equality(QtCore.QElapsedTimer,QtCore.QElapsedTimer)">
            <summary>
            <para>Returns true if this object and other contain the same
            time.</para>
            </summary>
        </member>
        <member name="M:QtCore.QElapsedTimer.op_Inequality(QtCore.QElapsedTimer,QtCore.QElapsedTimer)">
            <summary>
            <para>Returns true if this object and other contain different
            times.</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.clockType">
            <summary>
            <para>Returns the clock type that this QElapsedTimer implementation
            uses.</para>
            <para>See also isMonotonic().</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.IsMonotonic">
            <summary>
            <para>Returns true if this is a monotonic clock, false otherwise. See
            the information on the different clock types to understand which ones are
            monotonic.</para>
            <para>See also clockType() and QElapsedTimer::ClockType.</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.IsValid">
            <summary>
            <para>Returns false if the timer has never been started or invalidated
            by a call to invalidate().</para>
            <para>See also invalidate(), start(), and restart().</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.NsecsElapsed">
            <summary>
            <para>Returns the number of nanoseconds since this QElapsedTimer was
            last started. Calling this function in a QElapsedTimer that was invalidated
            will result in undefined results.</para>
            <para>On platforms that do not provide nanosecond resolution, the value
            returned will be the best estimate available.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also start(), restart(), hasExpired(), and
            invalidate().</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.Elapsed">
            <summary>
            <para>Returns the number of milliseconds since this QElapsedTimer was
            last started. Calling this function in a QElapsedTimer that was invalidated
            will result in undefined results.</para>
            <para>See also start(), restart(), hasExpired(), and
            invalidate().</para>
            </summary>
        </member>
        <member name="P:QtCore.QElapsedTimer.MsecsSinceReference">
            <summary>
            <para>Returns the number of milliseconds between last time this
            QElapsedTimer object was started and its reference clock's start.</para>
            <para>This number is usually arbitrary for all clocks except the
            QElapsedTimer::SystemTime clock. For that clock type, this number is the
            number of milliseconds since January 1st, 1970 at 0:00 UTC (that is, it is
            the Unix time expressed in milliseconds).</para>
            <para>On Linux, Windows and OS X/iOS systems, this value is usually the
            time since the system boot, though it usually does not include the time the
            system has spent in sleep states.</para>
            <para>See also clockType() and elapsed().</para>
            </summary>
        </member>
        <member name="T:QtCore.QElapsedTimer.ClockType">
            <summary>
            <para>This enum contains the different clock types that QElapsedTimer
            may use.</para>
            <para>QElapsedTimer will always use the same clock type in a particular
            machine, so this value will not change during the lifetime of a program. It
            is provided so that QElapsedTimer can be used with other non-Qt
            implementations, to guarantee that the same reference clock is being
            used.</para>
            <para></para>
            <para>SystemTime</para>
            <para>The system time clock is purely the real time, expressed in
            milliseconds since Jan 1, 1970 at 0:00 UTC. It's equivalent to the value
            returned by the C and POSIX time function, with the milliseconds added.
            This clock type is currently only used on Unix systems that do not support
            monotonic clocks (see below).</para>
            <para>This is the only non-monotonic clock that QElapsedTimer may
            use.</para>
            <para></para>
            <para>MonotonicClock</para>
            <para>This is the system's monotonic clock, expressed in milliseconds
            since an arbitrary point in the past. This clock type is used on Unix
            systems which support POSIX monotonic clocks
            (_POSIX_MONOTONIC_CLOCK).</para>
            <para>This clock does not overflow.</para>
            <para></para>
            <para>TickCounter</para>
            <para>The tick counter clock type is based on the system's or the
            processor's tick counter, multiplied by the duration of a tick. This clock
            type is used on Windows platforms. If the high-precision performance
            counter is available on Windows, the PerformanceCounter clock type is used
            instead.</para>
            <para>The TickCounter clock type is the only clock type that may
            overflow. Windows Vista and Windows Server 2008 support the extended 64-bit
            tick counter, which allows avoiding the overflow.</para>
            <para>On Windows systems, the clock overflows after 2^32 milliseconds,
            which corresponds to roughly 49.7 days. This means two processes' reckoning
            of the time since the reference may be different by multiples of 2^32
            milliseconds. When comparing such values, it's recommended that the high 32
            bits of the millisecond count be masked off.</para>
            <para></para>
            <para>MachAbsoluteTime</para>
            <para>This clock type is based on the absolute time presented by Mach
            kernels, such as that found on OS X. This clock type is presented
            separately from MonotonicClock since OS X and iOS are also Unix systems and
            may support a POSIX monotonic clock with values differing from the Mach
            absolute time.</para>
            <para>This clock is monotonic and does not overflow.</para>
            <para></para>
            <para>PerformanceCounter</para>
            <para>This clock uses the Windows functions QueryPerformanceCounter and
            QueryPerformanceFrequency to access the system's high-precision performance
            counter. Since this counter may not be available on all systems,
            QElapsedTimer will fall back to the TickCounter clock automatically, if
            this clock cannot be used.</para>
            <para>This clock is monotonic and does not overflow.</para>
            <para>See also clockType() and isMonotonic().</para>
            </summary>
        </member>
        <member name="F:QtCore.QElapsedTimer.ClockType.SystemTime">
            <summary>The human-readable system time. This clock is not monotonic.</summary>
        </member>
        <member name="F:QtCore.QElapsedTimer.ClockType.MonotonicClock">
            <summary>The system's monotonic clock, usually found in Unix systems. This clock is monotonic and does not overflow.</summary>
        </member>
        <member name="F:QtCore.QElapsedTimer.ClockType.TickCounter">
            <summary>The system's tick counter, used on Windows systems. This clock may overflow.</summary>
        </member>
        <member name="F:QtCore.QElapsedTimer.ClockType.MachAbsoluteTime">
            <summary>The Mach kernel's absolute time (OS X and iOS). This clock is monotonic and does not overflow.</summary>
        </member>
        <member name="F:QtCore.QElapsedTimer.ClockType.PerformanceCounter">
            <summary>The high-resolution performance counter provided by Windows. This clock is monotonic and does not overflow.</summary>
        </member>
        <member name="T:QtCore.QPoint">
            <summary>
            <para>The QPoint class defines a point in the plane using integer
            precision.</para>
            </summary>
            <remarks>
            <para>A point is specified by a x coordinate and an y coordinate which
            can be accessed using the x() and y() functions. The isNull() function
            returns true if both x and y are set to 0. The coordinates can be set (or
            altered) using the setX() and setY() functions, or alternatively the rx()
            and ry() functions which return references to the coordinates (allowing
            direct manipulation).</para>
            <para>Given a point p, the following statements are all
            equivalent:</para>
            <para>QPoint p;</para>
            <para></para>
            <para>p.setX(p.x() + 1);</para>
            <para>p += QPoint(1, 0);</para>
            <para>p.rx()++;</para>
            <para>A QPoint object can also be used as a vector: Addition and
            subtraction are defined as for vectors (each component is added
            separately). A QPoint object can also be divided or multiplied by an int or
            a qreal.</para>
            <para>In addition, the QPoint class provides the manhattanLength()
            function which gives an inexpensive approximation of the length of the
            QPoint object interpreted as a vector. Finally, QPoint objects can be
            streamed as well as compared.</para>
            <para></para>
            <para>See also QPointF and QPolygon.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a point with the given coordinates (xpos,
            ypos).</para>
            <para>See also setX() and setY().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.DotProduct(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>QPoint p( 3, 7);</para>
            <para>QPoint q(-1, 4);</para>
            <para>int lengthSquared = QPoint::dotProduct(p, q);   // lengthSquared
            becomes 25</para>
            <para>Returns the dot product of p1 and p2.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Equality(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Returns true if p1 and p2 are equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Inequality(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Returns true if p1 and p2 are not equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Addition(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Returns a QPoint object that is the sum of the given points, p1
            and p2; each component is added separately.</para>
            <para>See also QPoint::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Subtraction(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Returns a QPoint object that is formed by subtracting p2 from p1;
            each component is subtracted separately.</para>
            <para>See also QPoint::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(QtCore.QPoint,System.Single)">
            <summary>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>Note that the result is rounded to the nearest integer as points
            are held as integers. Use QPointF for floating point accuracy.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(System.Single,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>Note that the result is rounded to the nearest integer as points
            are held as integers. Use QPointF for floating point accuracy.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(QtCore.QPoint,System.Double)">
            <summary>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>Note that the result is rounded to the nearest integer as points
            are held as integers. Use QPointF for floating point accuracy.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(System.Double,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>Note that the result is rounded to the nearest integer as points
            are held as integers. Use QPointF for floating point accuracy.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(QtCore.QPoint,System.Int32)">
            <summary>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Multiply(System.Int32,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the given point multiplied by the given
            factor.</para>
            <para>See also QPoint::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_UnaryPlus(QtCore.QPoint)">
            <summary>
            <para>Returns point unmodified.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_UnaryNegation(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QPoint object that is formed by changing the sign of
            both components of the given point.</para>
            <para>Equivalent to QPoint(0,0) - point.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPoint.op_Division(QtCore.QPoint,System.Double)">
            <summary>
            <para>Returns the QPoint formed by dividing both components of the
            given point by the given divisor.</para>
            <para>Note that the result is rounded to the nearest integer as points
            are held as integers. Use QPointF for floating point accuracy.</para>
            <para>See also QPoint::operator/=().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.X">
            <summary>
            <para>Returns the x coordinate of this point.</para>
            <para>See also setX() and rx().</para>
            <para></para>
            <para>Sets the x coordinate of this point to the given x
            coordinate.</para>
            <para>See also x() and setY().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.Y">
            <summary>
            <para>Returns the y coordinate of this point.</para>
            <para>See also setY() and ry().</para>
            <para></para>
            <para>Sets the y coordinate of this point to the given y
            coordinate.</para>
            <para>See also y() and setX().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.IsNull">
            <summary>
            <para>Returns true if both the x and y coordinates are set to 0,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.ManhattanLength">
            <summary>
            <para>Returns the sum of the absolute values of x() and y(),
            traditionally known as the &quot;Manhattan length&quot; of the vector from
            the origin to the point. For example:</para>
            <para>QPoint oldPosition;</para>
            <para></para>
            <para>MyWidget::mouseMoveEvent(QMouseEvent *event)</para>
            <para>{</para>
            <para>    QPoint point = event-&gt;pos() - oldPosition;</para>
            <para>    if (point.manhattanLength() &gt; 3)</para>
            <para>        // the mouse has moved more than 3 pixels since the
            oldPosition</para>
            <para>}</para>
            <para>This is a useful, and quick to calculate, approximation to the
            true length:</para>
            <para>double trueLength = std::sqrt(std::pow(x(), 2) + std::pow(y(),
            2));</para>
            <para>The tradition of &quot;Manhattan length&quot; arises because such
            distances apply to travelers who can only travel on a rectangular grid,
            like the streets of Manhattan.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.Rx">
            <summary>
            <para>Returns a reference to the x coordinate of this point.</para>
            <para>Using a reference makes it possible to directly manipulate x. For
            example:</para>
            <para>QPoint p(1, 2);</para>
            <para>p.rx()--;   // p becomes (0, 2)</para>
            <para>See also x() and setX().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPoint.Ry">
            <summary>
            <para>Returns a reference to the y coordinate of this point.</para>
            <para>Using a reference makes it possible to directly manipulate y. For
            example:</para>
            <para>QPoint p(1, 2);</para>
            <para>p.ry()++;   // p becomes (1, 3)</para>
            <para>See also y() and setY().</para>
            </summary>
        </member>
        <member name="T:QtCore.QPointF">
            <summary>
            <para>The QPointF class defines a point in the plane using floating
            point precision.</para>
            </summary>
            <remarks>
            <para>A point is specified by a x coordinate and an y coordinate which
            can be accessed using the x() and y() functions. The coordinates of the
            point are specified using floating point numbers for accuracy. The isNull()
            function returns true if both x and y are set to 0.0. The coordinates can
            be set (or altered) using the setX() and setY() functions, or alternatively
            the rx() and ry() functions which return references to the coordinates
            (allowing direct manipulation).</para>
            <para>Given a point p, the following statements are all
            equivalent:</para>
            <para>QPointF p;</para>
            <para></para>
            <para>p.setX(p.x() + 1.0);</para>
            <para>p += QPointF(1.0, 0.0);</para>
            <para>p.rx()++;</para>
            <para>A QPointF object can also be used as a vector: Addition and
            subtraction are defined as for vectors (each component is added
            separately). A QPointF object can also be divided or multiplied by an int
            or a qreal.</para>
            <para>In addition, the QPointF class provides a constructor converting
            a QPoint object into a QPointF object, and a corresponding toPoint()
            function which returns a QPoint copy of this point. Finally, QPointF
            objects can be streamed as well as compared.</para>
            <para></para>
            <para>See also QPoint and QPolygonF.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QPointF.#ctor(QtCore.QPoint)">
            <summary>
            <para>Constructs a copy of the given point.</para>
            <para>See also toPoint().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.#ctor(System.Double,System.Double)">
            <summary>
            <para>Constructs a point with the given coordinates (xpos,
            ypos).</para>
            <para>See also setX() and setY().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.ToPoint">
            <summary>
            <para>Rounds the coordinates of this point to the nearest integer, and
            returns a QPoint object with the rounded coordinates.</para>
            <para>See also QPointF().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.DotProduct(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>QPointF p( 3.1, 7.1);</para>
            <para>QPointF q(-1.0, 4.1);</para>
            <para>int lengthSquared = QPointF::dotProduct(p, q);   // lengthSquared
            becomes 26.01</para>
            <para>Returns the dot product of p1 and p2.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Equality(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Returns true if p1 is equal to p2; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Inequality(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Returns true if p1 is not equal to p2; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Addition(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Returns a QPointF object that is the sum of the given points, p1
            and p2; each component is added separately.</para>
            <para>See also QPointF::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Subtraction(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Returns a QPointF object that is formed by subtracting p2 from
            p1; each component is subtracted separately.</para>
            <para>See also QPointF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Multiply(System.Double,QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the given point, multiplied by the given
            factor.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Multiply(QtCore.QPointF,System.Double)">
            <summary>
            <para>Returns a copy of the given point, multiplied by the given
            factor.</para>
            <para>See also QPointF::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_UnaryPlus(QtCore.QPointF)">
            <summary>
            <para>Returns point unmodified.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_UnaryNegation(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QPointF object that is formed by changing the sign of
            both components of the given point.</para>
            <para>Equivalent to QPointF(0,0) - point.</para>
            </summary>
        </member>
        <member name="M:QtCore.QPointF.op_Division(QtCore.QPointF,System.Double)">
            <summary>
            <para>Returns the QPointF object formed by dividing both components of
            the given point by the given divisor.</para>
            <para>See also QPointF::operator/=().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.X">
            <summary>
            <para>Returns the x coordinate of this point.</para>
            <para>See also setX() and rx().</para>
            <para></para>
            <para>Sets the x coordinate of this point to the given x
            coordinate.</para>
            <para>See also x() and setY().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.Y">
            <summary>
            <para>Returns the y coordinate of this point.</para>
            <para>See also setY() and ry().</para>
            <para></para>
            <para>Sets the y coordinate of this point to the given y
            coordinate.</para>
            <para>See also y() and setX().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.ManhattanLength">
            <summary>
            <para>Returns the sum of the absolute values of x() and y(),
            traditionally known as the &quot;Manhattan length&quot; of the vector from
            the origin to the point.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QPoint::manhattanLength().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.IsNull">
            <summary>
            <para>Returns true if both the x and y coordinates are set to 0.0
            (ignoring the sign); otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.Rx">
            <summary>
            <para>Returns a reference to the x coordinate of this point.</para>
            <para>Using a reference makes it possible to directly manipulate x. For
            example:</para>
            <para> QPointF p(1.1, 2.5);</para>
            <para> p.rx()--;   // p becomes (0.1, 2.5)</para>
            <para>See also x() and setX().</para>
            </summary>
        </member>
        <member name="P:QtCore.QPointF.Ry">
            <summary>
            <para>Returns a reference to the y coordinate of this point.</para>
            <para>Using a reference makes it possible to directly manipulate y. For
            example:</para>
            <para>QPointF p(1.1, 2.5);</para>
            <para>p.ry()++;   // p becomes (1.1, 3.5)</para>
            <para>See also y() and setY().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLine">
            <summary>
            <para>The QLine class provides a two-dimensional vector using integer
            precision.</para>
            </summary>
            <remarks>
            <para>A QLine describes a finite length line (or a line segment) on a
            two-dimensional surface. The start and end points of the line are specified
            using integer point accuracy for coordinates. Use the QLineF constructor to
            retrieve a floating point copy.</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>The positions of the line's start and end points can be retrieved
            using the p1(), x1(), y1(), p2(), x2(), and y2() functions. The dx() and
            dy() functions return the horizontal and vertical components of the line.
            Use isNull() to determine whether the QLine represents a valid line or a
            null line.</para>
            <para>Finally, the line can be translated a given offset using the
            translate() function.</para>
            <para></para>
            <para>See also QLineF, QPolygon, and QRect.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLine.#ctor">
            <summary>
            <para>Constructs a null line.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.#ctor(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Constructs a line object that represents the line between p1 and
            p2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a line object that represents the line between (x1,
            y1) and (x2, y2).</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.Translate(QtCore.QPoint)">
            <summary>
            <para>Translates this line by the given offset.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.Translate(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates this line the distance specified by dx and dy.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.Translated(QtCore.QPoint)">
            <summary>
            <para>Returns this line translated by the given offset.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.Translated(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns this line translated the distance specified by dx and
            dy.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.SetPoints(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Sets the start point of this line to p1 and the end point of this
            line to p2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1(), setP2(), p1(), and p2().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.SetLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets this line to the start in x1, y1 and end in x2, y2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1(), setP2(), p1(), and p2().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.op_Equality(QtCore.QLine,QtCore.QLine)">
            <summary>
            <para>Returns true if the given line is the same as this line.</para>
            <para>A line is identical to another line if the start and end points
            are identical, and the internal order of the points is the same.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLine.op_Inequality(QtCore.QLine,QtCore.QLine)">
            <summary>
            <para>Returns true if the given line is not the same as this
            line.</para>
            <para>A line is different from another line if any of their start or
            end points differ, or the internal order of the points is different.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.P1">
            <summary>
            <para>Returns the line's start point.</para>
            <para>See also setP1(), x1(), y1(), and p2().</para>
            <para></para>
            <para>Sets the starting point of this line to p1.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP2() and p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.P2">
            <summary>
            <para>Returns the line's end point.</para>
            <para>See also setP2(), x2(), y2(), and p1().</para>
            <para></para>
            <para>Sets the end point of this line to p2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1() and p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.IsNull">
            <summary>
            <para>Returns true if the line is not set up with valid start and end
            point; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.X1">
            <summary>
            <para>Returns the x-coordinate of the line's start point.</para>
            <para>See also p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.Y1">
            <summary>
            <para>Returns the y-coordinate of the line's start point.</para>
            <para>See also p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.X2">
            <summary>
            <para>Returns the x-coordinate of the line's end point.</para>
            <para>See also p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.Y2">
            <summary>
            <para>Returns the y-coordinate of the line's end point.</para>
            <para>See also p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.Dx">
            <summary>
            <para>Returns the horizontal component of the line's vector.</para>
            <para>See also dy().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLine.Dy">
            <summary>
            <para>Returns the vertical component of the line's vector.</para>
            <para>See also dx().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLineF">
            <summary>
            <para>The QLineF class provides a two-dimensional vector using floating
            point precision.</para>
            </summary>
            <remarks>
            <para>A QLineF describes a finite length line (or line segment) on a
            two-dimensional surface. QLineF defines the start and end points of the
            line using floating point accuracy for coordinates. Use the toLine()
            function to retrieve an integer based copy of this line.</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>The positions of the line's start and end points can be retrieved
            using the p1(), x1(), y1(), p2(), x2(), and y2() functions. The dx() and
            dy() functions return the horizontal and vertical components of the line,
            respectively.</para>
            <para>The line's length can be retrieved using the length() function,
            and altered using the setLength() function. Similarly, angle() and
            setAngle() are respectively used for retrieving and altering the angle of
            the line. Use the isNull() function to determine whether the QLineF
            represents a valid line or a null line.</para>
            <para>The intersect() function determines the IntersectType for this
            line and a given line, while the angleTo() function returns the angle
            between the lines. In addition, the unitVector() function returns a line
            that has the same starting point as this line, but with a length of only 1,
            while the normalVector() function returns a line that is perpendicular to
            this line with the same starting point and length.</para>
            <para>Finally, the line can be translated a given offset using the
            translate() function, and can be traversed using the pointAt()
            function.</para>
            <para></para>
            <para>See also QLine, QPolygonF, and QRectF.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QLineF.#ctor">
            <summary>
            <para>Constructs a null line.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.#ctor(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Constructs a line object that represents the line between p1 and
            p2.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a line object that represents the line between (x1,
            y1) and (x2, y2).</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.#ctor(QtCore.QLine)">
            <summary>
            <para>Construct a QLineF object from the given integer-based
            line.</para>
            <para>See also toLine().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.AngleTo(QtCore.QLineF)">
            <summary>
            <para>Returns the angle (in degrees) from this line to the given line,
            taking the direction of the lines into account. If the lines do not
            intersect within their range, it is the intersection point of the extended
            lines that serves as origin (see QLineF::UnboundedIntersection).</para>
            <para>The returned value represents the number of degrees you need to
            add to this line to make it have the same angle as the given line, going
            counter-clockwise.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also intersect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.Intersect(QtCore.QLineF,QtCore.QPointF)">
            <summary>
            <para>Returns a value indicating whether or not this line intersects
            with the given line.</para>
            <para>The actual intersection point is extracted to intersectionPoint
            (if the pointer is valid). If the lines are parallel, the intersection
            point is undefined.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.GetAngle(QtCore.QLineF)">
            <summary>
            <para>Returns the angle (in degrees) between this line and the given
            line, taking the direction of the lines into account. If the lines do not
            intersect within their range, it is the intersection point of the extended
            lines that serves as origin (see QLineF::UnboundedIntersection).</para>
            <para></para>
            <para> 	</para>
            <para></para>
            <para>When the lines are parallel, this function returns 0 if they have
            the same direction; otherwise it returns 180.</para>
            <para>See also intersect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.PointAt(System.Double)">
            <summary>
            <para>Returns the point at the parameterized position specified by t.
            The function returns the line's start point if t = 0, and its end point if
            t = 1.</para>
            <para>See also dx() and dy().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.Translate(QtCore.QPointF)">
            <summary>
            <para>Translates this line by the given offset.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.Translate(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates this line the distance specified by dx and dy.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.Translated(QtCore.QPointF)">
            <summary>
            <para>Returns this line translated by the given offset.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.Translated(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns this line translated the distance specified by dx and
            dy.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.SetPoints(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Sets the start point of this line to p1 and the end point of this
            line to p2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1(), setP2(), p1(), and p2().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.SetLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets this line to the start in x1, y1 and end in x2, y2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1(), setP2(), p1(), and p2().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.op_Equality(QtCore.QLineF,QtCore.QLineF)">
            <summary>
            <para>Returns true if the given line is the same as this line.</para>
            <para>A line is identical to another line if the start and end points
            are identical, and the internal order of the points is the same.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.op_Inequality(QtCore.QLineF,QtCore.QLineF)">
            <summary>
            <para>Returns true if the given line is not the same as this
            line.</para>
            <para>A line is different from another line if their start or end
            points differ, or the internal order of the points is different.</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.ToLine">
            <summary>
            <para>Returns an integer based copy of this line.</para>
            <para>Note that the returned line's start and end points are rounded to
            the nearest integer.</para>
            <para>See also QLineF().</para>
            </summary>
        </member>
        <member name="M:QtCore.QLineF.FromPolar(System.Double,System.Double)">
            <summary>
            <para>Returns a QLineF with the given length and angle.</para>
            <para>The first point of the line will be on the origin.</para>
            <para>Positive values for the angles mean counter-clockwise while
            negative values mean the clockwise direction. Zero degrees is at the 3
            o'clock position.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Length">
            <summary>
            <para>Returns the length of the line.</para>
            <para>See also setLength().</para>
            <para></para>
            <para>Sets the length of the line to the given length. QLineF will move
            the end point - p2() - of the line to give the line its new length.</para>
            <para>If the line is a null line, the length will remain zero
            regardless of the length specified.</para>
            <para>See also length() and isNull().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Angle">
            <summary>
            <para>Returns the angle of the line in degrees.</para>
            <para>The return value will be in the range of values from 0.0 up to
            but not including 360.0. The angles are measured counter-clockwise from a
            point on the x-axis to the right of the origin (x &gt; 0).</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setAngle().</para>
            <para></para>
            <para>Sets the angle of the line to the given angle (in degrees). This
            will change the position of the second point of the line such that the line
            has the given angle.</para>
            <para>Positive values for the angles mean counter-clockwise while
            negative values mean the clockwise direction. Zero degrees is at the 3
            o'clock position.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also angle().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.P1">
            <summary>
            <para>Returns the line's start point.</para>
            <para>See also setP1(), x1(), y1(), and p2().</para>
            <para></para>
            <para>Sets the starting point of this line to p1.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP2() and p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.P2">
            <summary>
            <para>Returns the line's end point.</para>
            <para>See also setP2(), x2(), y2(), and p1().</para>
            <para></para>
            <para>Sets the end point of this line to p2.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setP1() and p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.IsNull">
            <summary>
            <para>Returns true if the line is not set up with valid start and end
            point; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.X1">
            <summary>
            <para>Returns the x-coordinate of the line's start point.</para>
            <para>See also p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Y1">
            <summary>
            <para>Returns the y-coordinate of the line's start point.</para>
            <para>See also p1().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.X2">
            <summary>
            <para>Returns the x-coordinate of the line's end point.</para>
            <para>See also p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Y2">
            <summary>
            <para>Returns the y-coordinate of the line's end point.</para>
            <para>See also p2().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Dx">
            <summary>
            <para>Returns the horizontal component of the line's vector.</para>
            <para>See also dy() and pointAt().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.Dy">
            <summary>
            <para>Returns the vertical component of the line's vector.</para>
            <para>See also dx() and pointAt().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.UnitVector">
            <summary>
            <para>Returns the unit vector for this line, i.e a line starting at the
            same point as this line with a length of 1.0.</para>
            <para>See also normalVector().</para>
            </summary>
        </member>
        <member name="P:QtCore.QLineF.NormalVector">
            <summary>
            <para>Returns a line that is perpendicular to this line with the same
            starting point and length.</para>
            <para></para>
            <para>See also unitVector().</para>
            </summary>
        </member>
        <member name="T:QtCore.QLineF.IntersectType">
            <summary>
            <para>Describes the intersection between two lines.</para>
            <para></para>
            <para> 	</para>
            <para>QLineF::UnboundedIntersection	QLineF::BoundedIntersection</para>
            <para></para>
            <para>intersect() will also return this value if the intersect point is
            within the start and end point of only one of the lines.</para>
            <para>See also intersect().</para>
            </summary>
        </member>
        <member name="F:QtCore.QLineF.IntersectType.NoIntersection">
            <summary>Indicates that the lines do not intersect; i.e. they are parallel.</summary>
        </member>
        <member name="F:QtCore.QLineF.IntersectType.BoundedIntersection">
            <summary>The two lines intersect with each other within the start and end points of each line.</summary>
        </member>
        <member name="F:QtCore.QLineF.IntersectType.UnboundedIntersection">
            <summary>The two lines intersect, but not within the range defined by their lengths. This will be the case if the lines are not parallel.</summary>
        </member>
        <member name="T:QtCore.QMargins">
            <summary>
            <para>The QMargins class defines the four margins of a
            rectangle.</para>
            </summary>
            <remarks>
            <para>QMargin defines a set of four margins; left, top, right and
            bottom, that describe the size of the borders surrounding a
            rectangle.</para>
            <para>The isNull() function returns true only if all margins are set to
            zero.</para>
            <para>QMargin objects can be streamed as well as compared.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMargins.#ctor">
            <summary>
            <para>Constructs a margins object with all margins set to 0.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs margins with the given left, top, right, bottom</para>
            <para>See also setLeft(), setRight(), setTop(), and setBottom().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Equality(QtCore.QMargins,QtCore.QMargins)">
            <summary>
            <para>Returns true if m1 and m2 are equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Inequality(QtCore.QMargins,QtCore.QMargins)">
            <summary>
            <para>Returns true if m1 and m2 are different; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Addition(QtCore.QMargins,QtCore.QMargins)">
            <summary>
            <para>Returns a QMargins object that is the sum of the given margins,
            m1 and m2; each component is added separately.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator+=() and
            QMargins::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Subtraction(QtCore.QMargins,QtCore.QMargins)">
            <summary>
            <para>Returns a QMargins object that is formed by subtracting m2 from
            m1; each component is subtracted separately.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator+=() and
            QMargins::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Addition(QtCore.QMargins,System.Int32)">
            <summary>
            <para>Returns a QMargins object that is formed by adding rhs to
            lhs.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also QMargins::operator+=() and
            QMargins::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Addition(System.Int32,QtCore.QMargins)">
            <summary>
            <para>Returns a QMargins object that is formed by adding lhs to
            rhs.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also QMargins::operator+=() and
            QMargins::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Subtraction(QtCore.QMargins,System.Int32)">
            <summary>
            <para>Returns a QMargins object that is formed by subtracting rhs from
            lhs.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also QMargins::operator+=() and
            QMargins::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Multiply(QtCore.QMargins,System.Int32)">
            <summary>
            <para>Returns a QMargins object that is formed by multiplying each
            component of the given margins by factor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Multiply(System.Int32,QtCore.QMargins)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMargins object that is formed by multiplying each
            component of the given margins by factor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Multiply(QtCore.QMargins,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMargins object that is formed by multiplying each
            component of the given margins by factor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Multiply(System.Double,QtCore.QMargins)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMargins object that is formed by multiplying each
            component of the given margins by factor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Division(QtCore.QMargins,System.Int32)">
            <summary>
            <para>Returns a QMargins object that is formed by dividing the
            components of the given margins by the given divisor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_Division(QtCore.QMargins,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMargins object that is formed by dividing the
            components of the given margins by the given divisor.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QMargins::operator*=() and
            QMargins::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_UnaryPlus(QtCore.QMargins)">
            <summary>
            <para>Returns a QMargin object that is formed from all components of
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMargins.op_UnaryNegation(QtCore.QMargins)">
            <summary>
            <para>Returns a QMargin object that is formed by negating all
            components of margins.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMargins.Left">
            <summary>
            <para>Returns the left margin.</para>
            <para>See also setLeft().</para>
            <para></para>
            <para>Sets the left margin to left.</para>
            <para>See also left().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMargins.Top">
            <summary>
            <para>Returns the top margin.</para>
            <para>See also setTop().</para>
            <para></para>
            <para>Sets the Top margin to Top.</para>
            <para>See also top().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMargins.Right">
            <summary>
            <para>Returns the right margin.</para>
            <para>See also setRight().</para>
            <para></para>
            <para>Sets the right margin to right.</para>
            <para>See also right().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMargins.Bottom">
            <summary>
            <para>Returns the bottom margin.</para>
            <para>See also setBottom().</para>
            <para></para>
            <para>Sets the bottom margin to bottom.</para>
            <para>See also bottom().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMargins.IsNull">
            <summary>
            <para>Returns true if all margins are is 0; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMarginsF">
            <summary>
            <para>The QMarginsF class defines the four margins of a
            rectangle.</para>
            </summary>
            <remarks>
            <para>QMarginsF defines a set of four margins; left, top, right and
            bottom, that describe the size of the borders surrounding a
            rectangle.</para>
            <para>The isNull() function returns true only if all margins are set to
            zero.</para>
            <para>QMarginsF objects can be streamed as well as compared.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMarginsF.#ctor">
            <summary>
            <para>Constructs a margins object with all margins set to 0.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs margins with the given left, top, right, bottom</para>
            <para>See also setLeft(), setRight(), setTop(), and setBottom().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.#ctor(QtCore.QMargins)">
            <summary>
            <para>Constructs margins copied from the given margins</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.ToMargins">
            <summary>
            <para>Returns an integer based copy of this margins object.</para>
            <para>Note that the components in the returned margins will be rounded
            to the nearest integer.</para>
            <para>See also QMarginsF().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Equality(QtCore.QMarginsF,QtCore.QMarginsF)">
            <summary>
            <para>Returns true if lhs and rhs are equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Inequality(QtCore.QMarginsF,QtCore.QMarginsF)">
            <summary>
            <para>Returns true if lhs and rhs are different; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Addition(QtCore.QMarginsF,QtCore.QMarginsF)">
            <summary>
            <para>Returns a QMarginsF object that is the sum of the given margins,
            lhs and rhs; each component is added separately.</para>
            <para>See also QMarginsF::operator+=() and
            QMarginsF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Subtraction(QtCore.QMarginsF,QtCore.QMarginsF)">
            <summary>
            <para>Returns a QMarginsF object that is formed by subtracting rhs from
            lhs; each component is subtracted separately.</para>
            <para>See also QMarginsF::operator+=() and
            QMarginsF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Addition(QtCore.QMarginsF,System.Double)">
            <summary>
            <para>Returns a QMarginsF object that is formed by adding rhs to
            lhs.</para>
            <para>See also QMarginsF::operator+=() and
            QMarginsF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Addition(System.Double,QtCore.QMarginsF)">
            <summary>
            <para>Returns a QMarginsF object that is formed by adding lhs to
            rhs.</para>
            <para>See also QMarginsF::operator+=() and
            QMarginsF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Subtraction(QtCore.QMarginsF,System.Double)">
            <summary>
            <para>Returns a QMarginsF object that is formed by subtracting rhs from
            lhs.</para>
            <para>See also QMarginsF::operator+=() and
            QMarginsF::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Multiply(QtCore.QMarginsF,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMarginsF object that is formed by multiplying each
            component of the given lhs margins by rhs factor.</para>
            <para>See also QMarginsF::operator*=() and
            QMarginsF::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Multiply(System.Double,QtCore.QMarginsF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMarginsF object that is formed by multiplying each
            component of the given lhs margins by rhs factor.</para>
            <para>See also QMarginsF::operator*=() and
            QMarginsF::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_Division(QtCore.QMarginsF,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QMarginsF object that is formed by dividing the
            components of the given lhs margins by the given rhs divisor.</para>
            <para>See also QMarginsF::operator*=() and
            QMarginsF::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_UnaryPlus(QtCore.QMarginsF)">
            <summary>
            <para>Returns a QMargin object that is formed from all components of
            margins.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMarginsF.op_UnaryNegation(QtCore.QMarginsF)">
            <summary>
            <para>Returns a QMargin object that is formed by negating all
            components of margins.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMarginsF.Left">
            <summary>
            <para>Returns the left margin.</para>
            <para>See also setLeft().</para>
            <para></para>
            <para>Sets the left margin to left.</para>
            <para>See also left().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMarginsF.Top">
            <summary>
            <para>Returns the top margin.</para>
            <para>See also setTop().</para>
            <para></para>
            <para>Sets the Top margin to Top.</para>
            <para>See also top().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMarginsF.Right">
            <summary>
            <para>Returns the right margin.</para>
            <para>See also setRight().</para>
            <para></para>
            <para>Sets the right margin to right.</para>
            <para>See also right().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMarginsF.Bottom">
            <summary>
            <para>Returns the bottom margin.</para>
            <para>See also setBottom().</para>
            <para></para>
            <para>Sets the bottom margin to bottom.</para>
            <para>See also bottom().</para>
            </summary>
        </member>
        <member name="P:QtCore.QMarginsF.IsNull">
            <summary>
            <para>Returns true if all margins are 0; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtCore.QMessageAuthenticationCode">
            <summary>
            <para>The QMessageAuthenticationCode class provides a way to generate
            hash-based message authentication codes.</para>
            </summary>
            <remarks>
            <para>QMessageAuthenticationCode supports all cryptographic hashes
            which are supported by QCryptographicHash.</para>
            <para>To generate message authentication code, pass hash algorithm
            QCryptographicHash::Algorithm to constructor, then set key and message by
            setKey() and addData() functions. Result can be acquired by result()
            function.</para>
            <para>    QByteArray key = &quot;key&quot;;</para>
            <para>    QByteArray message = &quot;The quick brown fox jumps over the
            lazy dog&quot;;</para>
            <para>    ...</para>
            <para>    QMessageAuthenticationCode
            code(QCryptographicHash::Sha1);</para>
            <para>    code.setKey(key);</para>
            <para>    code.addData(message);</para>
            <para>    code.result().toHex();      // returns
            &quot;de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9&quot;</para>
            <para>Alternatively, this effect can be achieved by providing message,
            key and method to hash() method.</para>
            <para>    QMessageAuthenticationCode::hash(message, key,
            QCryptographicHash::Sha1).toHex();</para>
            <para></para>
            <para>See also QCryptographicHash.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.#ctor(QtCore.QCryptographicHash.Algorithm,QtCore.QByteArray)">
            <summary>
            <para>Constructs an object that can be used to create a cryptographic
            hash from data using method method and key key.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.Reset">
            <summary>
            <para>Resets message data. Calling this method doesn't affect the
            key.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.SetKey(QtCore.QByteArray)">
            <summary>
            <para>Sets secret key. Calling this method automatically resets the
            object state.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.AddData(System.String,System.Int32)">
            <summary>
            <para>Adds the first length chars of data to the message.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.AddData(QtCore.QByteArray)">
            <summary>
            <para>This function overloads addData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.AddData(QtCore.QIODevice)">
            <summary>
            <para>Reads the data from the open QIODevice device until it ends and
            adds it to message. Returns true if reading was successful.</para>
            <para>Note: device must be already opened.</para>
            </summary>
        </member>
        <member name="M:QtCore.QMessageAuthenticationCode.Hash(QtCore.QByteArray,QtCore.QByteArray,QtCore.QCryptographicHash.Algorithm)">
            <summary>
            <para>Returns the authentication code for the message message using the
            key key and the method method.</para>
            </summary>
        </member>
        <member name="P:QtCore.QMessageAuthenticationCode.Result">
            <summary>
            <para>Returns the final authentication code.</para>
            <para>See also QByteArray::toHex().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSize">
            <summary>
            <para>The QSize class defines the size of a two-dimensional object
            using integer point precision.</para>
            </summary>
            <remarks>
            <para>A size is specified by a width() and a height(). It can be set in
            the constructor and changed using the setWidth(), setHeight(), or scale()
            functions, or using arithmetic operators. A size can also be manipulated
            directly by retrieving references to the width and height using the
            rwidth() and rheight() functions. Finally, the width and height can be
            swapped using the transpose() function.</para>
            <para>The isValid() function determines if a size is valid (a valid
            size has both width and height greater than or equal to zero). The
            isEmpty() function returns true if either of the width and height is less
            than, or equal to, zero, while the isNull() function returns true only if
            both the width and the height is zero.</para>
            <para>Use the expandedTo() function to retrieve a size which holds the
            maximum height and width of this size and a given size. Similarly, the
            boundedTo() function returns a size which holds the minimum height and
            width of this size and a given size.</para>
            <para>QSize objects can be streamed as well as compared.</para>
            <para></para>
            <para>See also QSizeF, QPoint, and QRect.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSize.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a size with the given width and height.</para>
            <para>See also setWidth() and setHeight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.Transpose">
            <summary>
            <para>Swaps the width and height values.</para>
            <para>See also setWidth(), setHeight(), and transposed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.Scale(System.Int32,System.Int32,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Scales the size to a rectangle with the given width and height,
            according to the specified mode:</para>
            <para></para>
            <para>If mode is Qt::IgnoreAspectRatio, the size is set to (width,
            height).</para>
            <para>If mode is Qt::KeepAspectRatio, the current size is scaled to a
            rectangle as large as possible inside (width, height), preserving the
            aspect ratio.</para>
            <para>If mode is Qt::KeepAspectRatioByExpanding, the current size is
            scaled to a rectangle as small as possible outside (width, height),
            preserving the aspect ratio.</para>
            <para></para>
            <para>Example:</para>
            <para>QSize t1(10, 12);</para>
            <para>t1.scale(60, 60, Qt::IgnoreAspectRatio);</para>
            <para>// t1 is (60, 60)</para>
            <para></para>
            <para>QSize t2(10, 12);</para>
            <para>t2.scale(60, 60, Qt::KeepAspectRatio);</para>
            <para>// t2 is (50, 60)</para>
            <para></para>
            <para>QSize t3(10, 12);</para>
            <para>t3.scale(60, 60, Qt::KeepAspectRatioByExpanding);</para>
            <para>// t3 is (60, 72)</para>
            <para>See also setWidth(), setHeight(), and scaled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.Scale(QtCore.QSize,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Scales the size to a rectangle with the given size, according to
            the specified mode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.Scaled(System.Int32,System.Int32,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Return a size scaled to a rectangle with the given width and
            height, according to the specified mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.Scaled(QtCore.QSize,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Return a size scaled to a rectangle with the given size s,
            according to the specified mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.ExpandedTo(QtCore.QSize)">
            <summary>
            <para>Returns a size holding the maximum width and height of this size
            and the given otherSize.</para>
            <para>See also boundedTo() and scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.BoundedTo(QtCore.QSize)">
            <summary>
            <para>Returns a size holding the minimum width and height of this size
            and the given otherSize.</para>
            <para>See also expandedTo() and scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Equality(QtCore.QSize,QtCore.QSize)">
            <summary>
            <para>Returns true if s1 and s2 are equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Inequality(QtCore.QSize,QtCore.QSize)">
            <summary>
            <para>Returns true if s1 and s2 are different; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Addition(QtCore.QSize,QtCore.QSize)">
            <summary>
            <para>Returns the sum of s1 and s2; each component is added
            separately.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Subtraction(QtCore.QSize,QtCore.QSize)">
            <summary>
            <para>Returns s2 subtracted from s1; each component is subtracted
            separately.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Multiply(QtCore.QSize,System.Double)">
            <summary>
            <para>Multiplies the given size by the given factor, and returns the
            result rounded to the nearest integer.</para>
            <para>See also QSize::scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Multiply(System.Double,QtCore.QSize)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies the given size by the given factor, and returns the
            result rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSize.op_Division(QtCore.QSize,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Divides the given size by the given divisor, and returns the
            result rounded to the nearest integer.</para>
            <para>See also QSize::scale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.Width">
            <summary>
            <para>Returns the width.</para>
            <para>See also height() and setWidth().</para>
            <para></para>
            <para>Sets the width to the given width.</para>
            <para>See also rwidth(), width(), and setHeight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.Height">
            <summary>
            <para>Returns the height.</para>
            <para>See also width() and setHeight().</para>
            <para></para>
            <para>Sets the height to the given height.</para>
            <para>See also rheight(), height(), and setWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.IsNull">
            <summary>
            <para>Returns true if both the width and height is 0; otherwise returns
            false.</para>
            <para>See also isValid() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.IsEmpty">
            <summary>
            <para>Returns true if either of the width and height is less than or
            equal to 0; otherwise returns false.</para>
            <para>See also isNull() and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.IsValid">
            <summary>
            <para>Returns true if both the width and height is equal to or greater
            than 0; otherwise returns false.</para>
            <para>See also isNull() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.Transposed">
            <summary>
            <para>Returns a QSize with width and height swapped.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also transpose().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.Rwidth">
            <summary>
            <para>Returns a reference to the width.</para>
            <para>Using a reference makes it possible to manipulate the width
            directly. For example:</para>
            <para>QSize size(100, 10);</para>
            <para>size.rwidth() += 20;</para>
            <para></para>
            <para>// size becomes (120,10)</para>
            <para>See also rheight() and setWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSize.Rheight">
            <summary>
            <para>Returns a reference to the height.</para>
            <para>Using a reference makes it possible to manipulate the height
            directly. For example:</para>
            <para>QSize size(100, 10);</para>
            <para>size.rheight() += 5;</para>
            <para></para>
            <para>// size becomes (100,15)</para>
            <para>See also rwidth() and setHeight().</para>
            </summary>
        </member>
        <member name="T:QtCore.QSizeF">
            <summary>
            <para>The QSizeF class defines the size of a two-dimensional object
            using floating point precision.</para>
            </summary>
            <remarks>
            <para>A size is specified by a width() and a height(). It can be set in
            the constructor and changed using the setWidth(), setHeight(), or scale()
            functions, or using arithmetic operators. A size can also be manipulated
            directly by retrieving references to the width and height using the
            rwidth() and rheight() functions. Finally, the width and height can be
            swapped using the transpose() function.</para>
            <para>The isValid() function determines if a size is valid. A valid
            size has both width and height greater than or equal to zero. The isEmpty()
            function returns true if either of the width and height is less than (or
            equal to) zero, while the isNull() function returns true only if both the
            width and the height is zero.</para>
            <para>Use the expandedTo() function to retrieve a size which holds the
            maximum height and width of this size and a given size. Similarly, the
            boundedTo() function returns a size which holds the minimum height and
            width of this size and a given size.</para>
            <para>The QSizeF class also provides the toSize() function returning a
            QSize copy of this size, constructed by rounding the width and height to
            the nearest integers.</para>
            <para>QSizeF objects can be streamed as well as compared.</para>
            <para></para>
            <para>See also QSize, QPointF, and QRectF.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QSizeF.#ctor(QtCore.QSize)">
            <summary>
            <para>Constructs a size with floating point accuracy from the given
            size.</para>
            <para>See also toSize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.#ctor(System.Double,System.Double)">
            <summary>
            <para>Constructs a size with the given width and height.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.Transpose">
            <summary>
            <para>Swaps the width and height values.</para>
            <para>See also setWidth(), setHeight(), and transposed().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.Scale(System.Double,System.Double,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Scales the size to a rectangle with the given width and height,
            according to the specified mode.</para>
            <para></para>
            <para>If mode is Qt::IgnoreAspectRatio, the size is set to (width,
            height).</para>
            <para>If mode is Qt::KeepAspectRatio, the current size is scaled to a
            rectangle as large as possible inside (width, height), preserving the
            aspect ratio.</para>
            <para>If mode is Qt::KeepAspectRatioByExpanding, the current size is
            scaled to a rectangle as small as possible outside (width, height),
            preserving the aspect ratio.</para>
            <para></para>
            <para>Example:</para>
            <para>QSizeF t1(10, 12);</para>
            <para>t1.scale(60, 60, Qt::IgnoreAspectRatio);</para>
            <para>// t1 is (60, 60)</para>
            <para></para>
            <para>QSizeF t2(10, 12);</para>
            <para>t2.scale(60, 60, Qt::KeepAspectRatio);</para>
            <para>// t2 is (50, 60)</para>
            <para></para>
            <para>QSizeF t3(10, 12);</para>
            <para>t3.scale(60, 60, Qt::KeepAspectRatioByExpanding);</para>
            <para>// t3 is (60, 72)</para>
            <para>See also setWidth(), setHeight(), and scaled().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.Scale(QtCore.QSizeF,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Scales the size to a rectangle with the given size, according to
            the specified mode.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.Scaled(System.Double,System.Double,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>Returns a size scaled to a rectangle with the given width and
            height, according to the specified mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.Scaled(QtCore.QSizeF,QtCore.Qt.AspectRatioMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a size scaled to a rectangle with the given size s,
            according to the specified mode.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.ExpandedTo(QtCore.QSizeF)">
            <summary>
            <para>Returns a size holding the maximum width and height of this size
            and the given otherSize.</para>
            <para>See also boundedTo() and scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.BoundedTo(QtCore.QSizeF)">
            <summary>
            <para>Returns a size holding the minimum width and height of this size
            and the given otherSize.</para>
            <para>See also expandedTo() and scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.ToSize">
            <summary>
            <para>Returns an integer based copy of this size.</para>
            <para>Note that the coordinates in the returned size will be rounded to
            the nearest integer.</para>
            <para>See also QSizeF().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Equality(QtCore.QSizeF,QtCore.QSizeF)">
            <summary>
            <para>Returns true if s1 and s2 are equal; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Inequality(QtCore.QSizeF,QtCore.QSizeF)">
            <summary>
            <para>Returns true if s1 and s2 are different; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Addition(QtCore.QSizeF,QtCore.QSizeF)">
            <summary>
            <para>Returns the sum of s1 and s2; each component is added
            separately.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Subtraction(QtCore.QSizeF,QtCore.QSizeF)">
            <summary>
            <para>Returns s2 subtracted from s1; each component is subtracted
            separately.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Multiply(QtCore.QSizeF,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies the given size by the given factor and returns the
            result.</para>
            <para>See also QSizeF::scale().</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Multiply(System.Double,QtCore.QSizeF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies the given size by the given factor and returns the
            result.</para>
            </summary>
        </member>
        <member name="M:QtCore.QSizeF.op_Division(QtCore.QSizeF,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Divides the given size by the given divisor and returns the
            result.</para>
            <para>See also QSizeF::scale().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.Width">
            <summary>
            <para>Returns the width.</para>
            <para>See also height() and setWidth().</para>
            <para></para>
            <para>Sets the width to the given width.</para>
            <para>See also width(), rwidth(), and setHeight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.Height">
            <summary>
            <para>Returns the height.</para>
            <para>See also width() and setHeight().</para>
            <para></para>
            <para>Sets the height to the given height.</para>
            <para>See also height(), rheight(), and setWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.IsNull">
            <summary>
            <para>Returns true if both the width and height are 0.0 (ignoring the
            sign); otherwise returns false.</para>
            <para>See also isValid() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.IsEmpty">
            <summary>
            <para>Returns true if either of the width and height is less than or
            equal to 0; otherwise returns false.</para>
            <para>See also isNull() and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.IsValid">
            <summary>
            <para>Returns true if both the width and height is equal to or greater
            than 0; otherwise returns false.</para>
            <para>See also isNull() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.Transposed">
            <summary>
            <para>Returns the size with width and height values swapped.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also transpose().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.Rwidth">
            <summary>
            <para>Returns a reference to the width.</para>
            <para>Using a reference makes it possible to manipulate the width
            directly. For example:</para>
            <para>QSizeF size(100.3, 10);</para>
            <para>size.rwidth() += 20.5;</para>
            <para></para>
            <para> // size becomes (120.8,10)</para>
            <para>See also rheight() and setWidth().</para>
            </summary>
        </member>
        <member name="P:QtCore.QSizeF.Rheight">
            <summary>
            <para>Returns a reference to the height.</para>
            <para>Using a reference makes it possible to manipulate the height
            directly. For example:</para>
            <para>QSizeF size(100, 10.2);</para>
            <para>size.rheight() += 5.5;</para>
            <para></para>
            <para>// size becomes (100,15.7)</para>
            <para>See also rwidth() and setHeight().</para>
            </summary>
        </member>
        <member name="T:QtCore.QRect">
            <summary>
            <para>The QRect class defines a rectangle in the plane using integer
            precision.</para>
            </summary>
            <remarks>
            <para>A rectangle is normally expressed as an upper-left corner and a
            size. The size (width and height) of a QRect is always equivalent to the
            mathematical rectangle that forms the basis for its rendering.</para>
            <para>A QRect can be constructed with a set of left, top, width and
            height integers, or from a QPoint and a QSize. The following code creates
            two identical rectangles.</para>
            <para>QRect r1(100, 200, 11, 16);</para>
            <para>QRect r2(QPoint(100, 200), QSize(11, 16));</para>
            <para>There is a third constructor that creates a QRect using the
            top-left and bottom-right coordinates, but we recommend that you avoid
            using it. The rationale is that for historical reasons the values returned
            by the bottom() and right() functions deviate from the true bottom-right
            corner of the rectangle.</para>
            <para>The QRect class provides a collection of functions that return
            the various rectangle coordinates, and enable manipulation of these. QRect
            also provide functions to move the rectangle relative to the various
            coordinates. In addition there is a moveTo() function that moves the
            rectangle, leaving its top left corner at the given coordinates.
            Alternatively, the translate() function moves the rectangle the given
            offset relative to the current position, and the translated() function
            returns a translated copy of this rectangle.</para>
            <para>The size() function returns the rectange's dimensions as a QSize.
            The dimensions can also be retrieved separately using the width() and
            height() functions. To manipulate the dimensions use the setSize(),
            setWidth() or setHeight() functions. Alternatively, the size can be changed
            by applying either of the functions setting the rectangle coordinates, for
            example, setBottom() or setRight().</para>
            <para>The contains() function tells whether a given point is inside the
            rectangle or not, and the intersects() function returns true if this
            rectangle intersects with a given rectangle. The QRect class also provides
            the intersected() function which returns the intersection rectangle, and
            the united() function which returns the rectangle that encloses the given
            rectangle and this:</para>
            <para></para>
            <para> 	</para>
            <para>intersected()	united()</para>
            <para></para>
            <para>The isEmpty() function returns true if left() &gt; right() or
            top() &gt; bottom(). Note that an empty rectangle is not valid: The
            isValid() function returns true if left() &lt;= right() and top() &lt;=
            bottom(). A null rectangle (isNull() == true) on the other hand, has both
            width and height set to 0.</para>
            <para>Note that due to the way QRect and QRectF are defined, an empty
            QRect is defined in essentially the same way as QRectF.</para>
            <para>Finally, QRect objects can be streamed as well as
            compared.</para>
            <para></para>
            <para>Rendering</para>
            <para>When using an anti-aliased painter, the boundary line of a QRect
            will be rendered symmetrically on both sides of the mathematical
            rectangle's boundary line. But when using an aliased painter (the default)
            other rules apply.</para>
            <para>Then, when rendering with a one pixel wide pen the QRect's
            boundary line will be rendered to the right and below the mathematical
            rectangle's boundary line.</para>
            <para>When rendering with a two pixels wide pen the boundary line will
            be split in the middle by the mathematical rectangle. This will be the case
            whenever the pen is set to an even number of pixels, while rendering with a
            pen with an odd number of pixels, the spare pixel will be rendered to the
            right and below the mathematical rectangle as in the one pixel case.</para>
            <para></para>
            <para> 	</para>
            <para>Logical representation	One pixel wide pen</para>
            <para>	</para>
            <para>Two pixel wide pen	Three pixel wide pen</para>
            <para></para>
            <para></para>
            <para>Coordinates</para>
            <para>The QRect class provides a collection of functions that return
            the various rectangle coordinates, and enable manipulation of these. QRect
            also provide functions to move the rectangle relative to the various
            coordinates.</para>
            <para>For example the left(), setLeft() and moveLeft() functions as an
            example: left() returns the x-coordinate of the rectangle's left edge,
            setLeft() sets the left edge of the rectangle to the given x coordinate (it
            may change the width, but will never change the rectangle's right edge) and
            moveLeft() moves the entire rectangle horizontally, leaving the rectangle's
            left edge at the given x coordinate and its size unchanged.</para>
            <para></para>
            <para>Note that for historical reasons the values returned by the
            bottom() and right() functions deviate from the true bottom-right corner of
            the rectangle: The right() function returns  left() + width() - 1 and the
            bottom() function returns top() + height() - 1. The same is the case for
            the point returned by the bottomRight() convenience function. In addition,
            the x and y coordinate of the topRight() and bottomLeft() functions,
            respectively, contain the same deviation from the true right and bottom
            edges.</para>
            <para>We recommend that you use x() + width() and y() + height() to
            find the true bottom-right corner, and avoid right() and bottom(). Another
            solution is to use QRectF: The QRectF class defines a rectangle in the
            plane using floating point accuracy for coordinates, and the
            QRectF::right() and QRectF::bottom() functions do return the right and
            bottom coordinates.</para>
            <para>It is also possible to add offsets to this rectangle's
            coordinates using the adjust() function, as well as retrieve a new
            rectangle based on adjustments of the original one using the adjusted()
            function. If either of the width and height is negative, use the
            normalized() function to retrieve a rectangle where the corners are
            swapped.</para>
            <para>In addition, QRect provides the getCoords() function which
            extracts the position of the rectangle's top-left and bottom-right corner,
            and the getRect() function which extracts the rectangle's top-left corner,
            width and height. Use the setCoords() and setRect() function to manipulate
            the rectangle's coordinates and dimensions in one go.</para>
            <para></para>
            <para>Constraints</para>
            <para>QRect is limited to the minimum and maximum values for the int
            type. Operations on a QRect that could potentially result in values outside
            this range will result in undefined behavior.</para>
            <para></para>
            <para>See also QRectF and QRegion.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRect.#ctor(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Constructs a rectangle with the given topLeft and bottomRight
            corners.</para>
            <para>See also setTopLeft() and setBottomRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.#ctor(QtCore.QPoint,QtCore.QSize)">
            <summary>
            <para>Constructs a rectangle with the given topLeft corner and the
            given size.</para>
            <para>See also setTopLeft() and setSize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a rectangle with (x, y) as its top-left corner and the
            given width and height.</para>
            <para>See also setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveLeft(System.Int32)">
            <summary>
            <para>Moves the rectangle horizontally, leaving the rectangle's left
            edge at the given x coordinate. The rectangle's size is unchanged.</para>
            <para>See also left(), setLeft(), and moveRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveTop(System.Int32)">
            <summary>
            <para>Moves the rectangle vertically, leaving the rectangle's top edge
            at the given y coordinate. The rectangle's size is unchanged.</para>
            <para>See also top(), setTop(), and moveBottom().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveRight(System.Int32)">
            <summary>
            <para>Moves the rectangle horizontally, leaving the rectangle's right
            edge at the given x coordinate. The rectangle's size is unchanged.</para>
            <para>See also right(), setRight(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveBottom(System.Int32)">
            <summary>
            <para>Moves the rectangle vertically, leaving the rectangle's bottom
            edge at the given y coordinate. The rectangle's size is unchanged.</para>
            <para>See also bottom(), setBottom(), and moveTop().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveTopLeft(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setTopLeft(), moveTop(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveBottomRight(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the bottom-right corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setBottomRight(), moveRight(), and moveBottom().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveTopRight(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the top-right corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setTopRight(), moveTop(), and moveRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveBottomLeft(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the bottom-left corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setBottomLeft(), moveBottom(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveCenter(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the center point at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Translate(System.Int32,System.Int32)">
            <summary>
            <para>Moves the rectangle dx along the x axis and dy along the y axis,
            relative to the current position. Positive values move the rectangle to the
            right and down.</para>
            <para>See also moveTopLeft(), moveTo(), and translated().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Translate(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the rectangle offset.x() along the x axis and offset.y()
            along the y axis, relative to the current position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Translated(System.Int32,System.Int32)">
            <summary>
            <para>Returns a copy of the rectangle that is translated dx along the x
            axis and dy along the y axis, relative to the current position. Positive
            values move the rectangle to the right and down.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Translated(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the rectangle that is translated offset.x()
            along the x axis and offset.y() along the y axis, relative to the current
            position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveTo(System.Int32,System.Int32)">
            <summary>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position (x, y). The rectangle's size is unchanged.</para>
            <para>See also translate() and moveTopLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MoveTo(QtCore.QPoint)">
            <summary>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.SetRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the coordinates of the rectangle's top-left corner to (x,
            y), and its size to the given width and height.</para>
            <para>See also getRect() and setCoords().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.GetRect(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Extracts the position of the rectangle's top-left corner to *x
            and *y, and its dimensions to *width and *height.</para>
            <para>See also setRect() and getCoords().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.SetCoords(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the coordinates of the rectangle's top-left corner to (x1,
            y1), and the coordinates of its bottom-right corner to (x2, y2).</para>
            <para>See also getCoords() and setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.GetCoords(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Extracts the position of the rectangle's top-left corner to *x1
            and *y1, and the position of the bottom-right corner to *x2 and *y2.</para>
            <para>See also setCoords() and getRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Adjust(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Adds dx1, dy1, dx2 and dy2 respectively to the existing
            coordinates of the rectangle.</para>
            <para>See also adjusted() and setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Adjusted(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns a new rectangle with dx1, dy1, dx2 and dy2 added
            respectively to the existing coordinates of this rectangle.</para>
            <para>See also adjust().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_BitwiseOr(QtCore.QRect,QtCore.QRect)">
            <summary>
            <para>Returns the bounding rectangle of this rectangle and the given
            rectangle.</para>
            <para>See also operator|=() and united().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_BitwiseAnd(QtCore.QRect,QtCore.QRect)">
            <summary>
            <para>Returns the intersection of this rectangle and the given
            rectangle. Returns an empty rectangle if there is no intersection.</para>
            <para>See also operator&amp;=() and intersected().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Contains(QtCore.QRect,System.Boolean)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the given rectangle is inside this rectangle.
            otherwise returns false. If proper is true, this function only returns true
            if the rectangle is entirely inside this rectangle (not on the
            edge).</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Contains(QtCore.QPoint,System.Boolean)">
            <summary>
            <para>Returns true if the given point is inside or on the edge of the
            rectangle, otherwise returns false. If proper is true, this function only
            returns true if the given point is inside the rectangle (i.e., not on the
            edge).</para>
            <para>See also intersects().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Contains(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the point (x, y) is inside this rectangle,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Contains(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the point (x, y) is inside or on the edge of the
            rectangle, otherwise returns false. If proper is true, this function only
            returns true if the point is entirely inside the rectangle(not on the
            edge).</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.United(QtCore.QRect)">
            <summary>
            <para>Returns the bounding rectangle of this rectangle and the given
            rectangle.</para>
            <para></para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersected().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Intersected(QtCore.QRect)">
            <summary>
            <para>Returns the intersection of this rectangle and the given
            rectangle. Note that r.intersected(s) is equivalent to r &amp; s.</para>
            <para></para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersects(), united(), and operator&amp;=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.Intersects(QtCore.QRect)">
            <summary>
            <para>Returns true if this rectangle intersects with the given
            rectangle (i.e., there is at least one pixel that is within both
            rectangles), otherwise returns false.</para>
            <para>The intersection rectangle can be retrieved using the
            intersected() function.</para>
            <para>See also contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MarginsAdded(QtCore.QMargins)">
            <summary>
            <para>Returns a rectangle grown by the margins.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also operator+=(), marginsRemoved(), and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.MarginsRemoved(QtCore.QMargins)">
            <summary>
            <para>Removes the margins from the rectangle, shrinking it.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also marginsAdded(), operator+=(), and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_Equality(QtCore.QRect,QtCore.QRect)">
            <summary>
            <para>Returns true if the rectangles r1 and r2 are equal, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_Inequality(QtCore.QRect,QtCore.QRect)">
            <summary>
            <para>Returns true if the rectangles r1 and r2 are different, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_Addition(QtCore.QRect,QtCore.QMargins)">
            <summary>
            <para>Returns the rectangle grown by the margins.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRect.op_Subtraction(QtCore.QRect,QtCore.QMargins)">
            <summary>
            <para>Returns the lhs rectangle shrunken by the rhs margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Left">
            <summary>
            <para>Returns the x-coordinate of the rectangle's left edge. Equivalent
            to x().</para>
            <para>See also setLeft(), topLeft(), and bottomLeft().</para>
            <para></para>
            <para>Sets the left edge of the rectangle to the given x coordinate.
            May change the width, but will never change the right edge of the
            rectangle.</para>
            <para>Equivalent to setX().</para>
            <para>See also left() and moveLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Top">
            <summary>
            <para>Returns the y-coordinate of the rectangle's top edge. Equivalent
            to y().</para>
            <para>See also setTop(), topLeft(), and topRight().</para>
            <para></para>
            <para>Sets the top edge of the rectangle to the given y coordinate. May
            change the height, but will never change the bottom edge of the
            rectangle.</para>
            <para>Equivalent to setY().</para>
            <para>See also top() and moveTop().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Right">
            <summary>
            <para>Returns the x-coordinate of the rectangle's right edge.</para>
            <para>Note that for historical reasons this function returns left() +
            width() - 1; use x() + width() to retrieve the true x-coordinate.</para>
            <para>See also setRight(), topRight(), and bottomRight().</para>
            <para></para>
            <para>Sets the right edge of the rectangle to the given x coordinate.
            May change the width, but will never change the left edge of the
            rectangle.</para>
            <para>See also right() and moveRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Bottom">
            <summary>
            <para>Returns the y-coordinate of the rectangle's bottom edge.</para>
            <para>Note that for historical reasons this function returns top() +
            height() - 1; use y() + height() to retrieve the true y-coordinate.</para>
            <para>See also setBottom(), bottomLeft(), and bottomRight().</para>
            <para></para>
            <para>Sets the bottom edge of the rectangle to the given y coordinate.
            May change the height, but will never change the top edge of the
            rectangle.</para>
            <para>See also bottom() and moveBottom().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.X">
            <summary>
            <para>Returns the x-coordinate of the rectangle's left edge. Equivalent
            to left().</para>
            <para>See also setX(), y(), and topLeft().</para>
            <para></para>
            <para>Sets the left edge of the rectangle to the given x coordinate.
            May change the width, but will never change the right edge of the
            rectangle.</para>
            <para>Equivalent to setLeft().</para>
            <para>See also x(), setY(), and setTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Y">
            <summary>
            <para>Returns the y-coordinate of the rectangle's top edge. Equivalent
            to top().</para>
            <para>See also setY(), x(), and topLeft().</para>
            <para></para>
            <para>Sets the top edge of the rectangle to the given y coordinate. May
            change the height, but will never change the bottom edge of the
            rectangle.</para>
            <para>Equivalent to setTop().</para>
            <para>See also y(), setX(), and setTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.TopLeft">
            <summary>
            <para>Returns the position of the rectangle's top-left corner.</para>
            <para>See also setTopLeft(), top(), and left().</para>
            <para></para>
            <para>Set the top-left corner of the rectangle to the given position.
            May change the size, but will never change the bottom-right corner of the
            rectangle.</para>
            <para>See also topLeft() and moveTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.BottomRight">
            <summary>
            <para>Returns the position of the rectangle's bottom-right
            corner.</para>
            <para>Note that for historical reasons this function returns
            QPoint(left() + width() -1, top() + height() - 1).</para>
            <para>See also setBottomRight(), bottom(), and right().</para>
            <para></para>
            <para>Set the bottom-right corner of the rectangle to the given
            position. May change the size, but will never change the top-left corner of
            the rectangle.</para>
            <para>See also bottomRight() and moveBottomRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.TopRight">
            <summary>
            <para>Returns the position of the rectangle's top-right corner.</para>
            <para>Note that for historical reasons this function returns
            QPoint(left() + width() -1, top()).</para>
            <para>See also setTopRight(), top(), and right().</para>
            <para></para>
            <para>Set the top-right corner of the rectangle to the given position.
            May change the size, but will never change the bottom-left corner of the
            rectangle.</para>
            <para>See also topRight() and moveTopRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.BottomLeft">
            <summary>
            <para>Returns the position of the rectangle's bottom-left corner. Note
            that for historical reasons this function returns QPoint(left(), top() +
            height() - 1).</para>
            <para>See also setBottomLeft(), bottom(), and left().</para>
            <para></para>
            <para>Set the bottom-left corner of the rectangle to the given
            position. May change the size, but will never change the top-right corner
            of the rectangle.</para>
            <para>See also bottomLeft() and moveBottomLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Width">
            <summary>
            <para>Returns the width of the rectangle.</para>
            <para>See also setWidth(), height(), and size().</para>
            <para></para>
            <para>Sets the width of the rectangle to the given width. The right
            edge is changed, but not the left one.</para>
            <para>See also width() and setSize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Height">
            <summary>
            <para>Returns the height of the rectangle.</para>
            <para>See also setHeight(), width(), and size().</para>
            <para></para>
            <para>Sets the height of the rectangle to the given height. The bottom
            edge is changed, but not the top one.</para>
            <para>See also height() and setSize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Size">
            <summary>
            <para>Returns the size of the rectangle.</para>
            <para>See also setSize(), width(), and height().</para>
            <para></para>
            <para>Sets the size of the rectangle to the given size. The top-left
            corner is not moved.</para>
            <para>See also size(), setWidth(), and setHeight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.IsNull">
            <summary>
            <para>Returns true if the rectangle is a null rectangle, otherwise
            returns false.</para>
            <para>A null rectangle has both the width and the height set to 0
            (i.e., right() == left() - 1 and bottom() == top() - 1). A null rectangle
            is also empty, and hence is not valid.</para>
            <para>See also isEmpty() and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.IsEmpty">
            <summary>
            <para>Returns true if the rectangle is empty, otherwise returns
            false.</para>
            <para>An empty rectangle has a left() &gt; right() or top() &gt;
            bottom(). An empty rectangle is not valid (i.e., isEmpty() ==
            !isValid()).</para>
            <para>Use the normalized() function to retrieve a rectangle where the
            corners are swapped.</para>
            <para>See also isNull(), isValid(), and normalized().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.IsValid">
            <summary>
            <para>Returns true if the rectangle is valid, otherwise returns
            false.</para>
            <para>A valid rectangle has a left() &lt;= right() and top() &lt;=
            bottom(). Note that non-trivial operations like intersections are not
            defined for invalid rectangles. A valid rectangle is not empty (i.e.,
            isValid() == !isEmpty()).</para>
            <para>See also isNull(), isEmpty(), and normalized().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Normalized">
            <summary>
            <para>Returns a normalized rectangle; i.e., a rectangle that has a
            non-negative width and height.</para>
            <para>If width() &lt; 0 the function swaps the left and right corners,
            and it swaps the top and bottom corners if height() &lt; 0.</para>
            <para>See also isValid() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRect.Center">
            <summary>
            <para>Returns the center point of the rectangle.</para>
            <para>See also moveCenter().</para>
            </summary>
        </member>
        <member name="T:QtCore.QRectF">
            <summary>
            <para>The QRectF class defines a rectangle in the plane using floating
            point precision.</para>
            </summary>
            <remarks>
            <para>A rectangle is normally expressed as an upper-left corner and a
            size. The size (width and height) of a QRectF is always equivalent to the
            mathematical rectangle that forms the basis for its rendering.</para>
            <para>A QRectF can be constructed with a set of left, top, width and
            height integers, or from a QPoint and a QSize. The following code creates
            two identical rectangles.</para>
            <para>QRectF r1(100, 200, 11, 16);</para>
            <para>QRectF r2(QPoint(100, 200), QSize(11, 16));</para>
            <para>There is also a third constructor creating a QRectF from a QRect,
            and a corresponding toRect() function that returns a QRect object based on
            the values of this rectangle (note that the coordinates in the returned
            rectangle are rounded to the nearest integer).</para>
            <para>The QRectF class provides a collection of functions that return
            the various rectangle coordinates, and enable manipulation of these. QRectF
            also provide functions to move the rectangle relative to the various
            coordinates. In addition there is a moveTo() function that moves the
            rectangle, leaving its top left corner at the given coordinates.
            Alternatively, the translate() function moves the rectangle the given
            offset relative to the current position, and the translated() function
            returns a translated copy of this rectangle.</para>
            <para>The size() function returns the rectange's dimensions as a QSize.
            The dimensions can also be retrieved separately using the width() and
            height() functions. To manipulate the dimensions use the setSize(),
            setWidth() or setHeight() functions. Alternatively, the size can be changed
            by applying either of the functions setting the rectangle coordinates, for
            example, setBottom() or setRight().</para>
            <para>The contains() function tells whether a given point is inside the
            rectangle or not, and the intersects() function returns true if this
            rectangle intersects with a given rectangle (otherwise false). The QRectF
            class also provides the intersected() function which returns the
            intersection rectangle, and the united() function which returns the
            rectangle that encloses the given rectangle and this:</para>
            <para></para>
            <para> 	</para>
            <para>intersected()	united()</para>
            <para></para>
            <para>The isEmpty() function returns true if the rectangle's width or
            height is less than, or equal to, 0. Note that an empty rectangle is not
            valid: The isValid() function returns true if both width and height is
            larger than 0. A null rectangle (isNull() == true) on the other hand, has
            both width and height set to 0.</para>
            <para>Note that due to the way QRect and QRectF are defined, an empty
            QRectF is defined in essentially the same way as QRect.</para>
            <para>Finally, QRectF objects can be streamed as well as
            compared.</para>
            <para></para>
            <para>Rendering</para>
            <para>When using an anti-aliased painter, the boundary line of a QRectF
            will be rendered symmetrically on both sides of the mathematical
            rectangle's boundary line. But when using an aliased painter (the default)
            other rules apply.</para>
            <para>Then, when rendering with a one pixel wide pen the QRectF's
            boundary line will be rendered to the right and below the mathematical
            rectangle's boundary line.</para>
            <para>When rendering with a two pixels wide pen the boundary line will
            be split in the middle by the mathematical rectangle. This will be the case
            whenever the pen is set to an even number of pixels, while rendering with a
            pen with an odd number of pixels, the spare pixel will be rendered to the
            right and below the mathematical rectangle as in the one pixel case.</para>
            <para></para>
            <para> 	</para>
            <para>Logical representation	One pixel wide pen</para>
            <para>	</para>
            <para>Two pixel wide pen	Three pixel wide pen</para>
            <para></para>
            <para></para>
            <para>Coordinates</para>
            <para>The QRectF class provides a collection of functions that return
            the various rectangle coordinates, and enable manipulation of these. QRectF
            also provide functions to move the rectangle relative to the various
            coordinates.</para>
            <para>For example: the bottom(), setBottom() and moveBottom()
            functions: bottom() returns the y-coordinate of the rectangle's bottom
            edge, setBottom() sets the bottom edge of the rectangle to the given y
            coordinate (it may change the height, but will never change the rectangle's
            top edge) and moveBottom() moves the entire rectangle vertically, leaving
            the rectangle's bottom edge at the given y coordinate and its size
            unchanged.</para>
            <para></para>
            <para>It is also possible to add offsets to this rectangle's
            coordinates using the adjust() function, as well as retrieve a new
            rectangle based on adjustments of the original one using the adjusted()
            function. If either of the width and height is negative, use the
            normalized() function to retrieve a rectangle where the corners are
            swapped.</para>
            <para>In addition, QRectF provides the getCoords() function which
            extracts the position of the rectangle's top-left and bottom-right corner,
            and the getRect() function which extracts the rectangle's top-left corner,
            width and height. Use the setCoords() and setRect() function to manipulate
            the rectangle's coordinates and dimensions in one go.</para>
            <para></para>
            <para>See also QRect and QRegion.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRectF.#ctor(QtCore.QPointF,QtCore.QSizeF)">
            <summary>
            <para>Constructs a rectangle with the given topLeft corner and the
            given size.</para>
            <para>See also setTopLeft() and setSize().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.#ctor(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Constructs a rectangle with the given topLeft and bottomRight
            corners.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTopLeft() and setBottomRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a rectangle with (x, y) as its top-left corner and the
            given width and height.</para>
            <para>See also setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.#ctor(QtCore.QRect)">
            <summary>
            <para>Constructs a QRectF rectangle from the given QRect
            rectangle.</para>
            <para>See also toRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveLeft(System.Double)">
            <summary>
            <para>Moves the rectangle horizontally, leaving the rectangle's left
            edge at the given x coordinate. The rectangle's size is unchanged.</para>
            <para>See also left(), setLeft(), and moveRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveTop(System.Double)">
            <summary>
            <para>Moves the rectangle vertically, leaving the rectangle's top line
            at the given y coordinate. The rectangle's size is unchanged.</para>
            <para>See also top(), setTop(), and moveBottom().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveRight(System.Double)">
            <summary>
            <para>Moves the rectangle horizontally, leaving the rectangle's right
            edge at the given x coordinate. The rectangle's size is unchanged.</para>
            <para>See also right(), setRight(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveBottom(System.Double)">
            <summary>
            <para>Moves the rectangle vertically, leaving the rectangle's bottom
            edge at the given y coordinate. The rectangle's size is unchanged.</para>
            <para>See also bottom(), setBottom(), and moveTop().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveTopLeft(QtCore.QPointF)">
            <summary>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setTopLeft(), moveTop(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveBottomRight(QtCore.QPointF)">
            <summary>
            <para>Moves the rectangle, leaving the bottom-right corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setBottomRight(), moveBottom(), and moveRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveTopRight(QtCore.QPointF)">
            <summary>
            <para>Moves the rectangle, leaving the top-right corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setTopRight(), moveTop(), and moveRight().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveBottomLeft(QtCore.QPointF)">
            <summary>
            <para>Moves the rectangle, leaving the bottom-left corner at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also setBottomLeft(), moveBottom(), and moveLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveCenter(QtCore.QPointF)">
            <summary>
            <para>Moves the rectangle, leaving the center point at the given
            position. The rectangle's size is unchanged.</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Translate(System.Double,System.Double)">
            <summary>
            <para>Moves the rectangle dx along the x-axis and dy along the y-axis,
            relative to the current position. Positive values move the rectangle to the
            right and downwards.</para>
            <para>See also moveTopLeft(), moveTo(), and translated().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Translate(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the rectangle offset.x() along the x axis and offset.y()
            along the y axis, relative to the current position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Translated(System.Double,System.Double)">
            <summary>
            <para>Returns a copy of the rectangle that is translated dx along the x
            axis and dy along the y axis, relative to the current position. Positive
            values move the rectangle to the right and down.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Translated(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the rectangle that is translated offset.x()
            along the x axis and offset.y() along the y axis, relative to the current
            position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveTo(System.Double,System.Double)">
            <summary>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position (x, y). The rectangle's size is unchanged.</para>
            <para>See also translate() and moveTopLeft().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MoveTo(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the rectangle, leaving the top-left corner at the given
            position.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.SetRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the coordinates of the rectangle's top-left corner to (x,
            y), and its size to the given width and height.</para>
            <para>See also getRect() and setCoords().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.GetRect(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extracts the position of the rectangle's top-left corner to *x
            and *y, and its dimensions to *width and *height.</para>
            <para>See also setRect() and getCoords().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.SetCoords(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the coordinates of the rectangle's top-left corner to (x1,
            y1), and the coordinates of its bottom-right corner to (x2, y2).</para>
            <para>See also getCoords() and setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.GetCoords(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Extracts the position of the rectangle's top-left corner to *x1
            and *y1, and the position of the bottom-right corner to *x2 and *y2.</para>
            <para>See also setCoords() and getRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Adjust(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Adds dx1, dy1, dx2 and dy2 respectively to the existing
            coordinates of the rectangle.</para>
            <para>See also adjusted() and setRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Adjusted(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Returns a new rectangle with dx1, dy1, dx2 and dy2 added
            respectively to the existing coordinates of this rectangle.</para>
            <para>See also adjust().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_BitwiseOr(QtCore.QRectF,QtCore.QRectF)">
            <summary>
            <para>Returns the bounding rectangle of this rectangle and the given
            rectangle.</para>
            <para>See also united() and operator|=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_BitwiseAnd(QtCore.QRectF,QtCore.QRectF)">
            <summary>
            <para>Returns the intersection of this rectangle and the given
            rectangle. Returns an empty rectangle if there is no intersection.</para>
            <para>See also operator&amp;=() and intersected().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Contains(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the given rectangle is inside this rectangle;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Contains(QtCore.QPointF)">
            <summary>
            <para>Returns true if the given point is inside or on the edge of the
            rectangle; otherwise returns false.</para>
            <para>See also intersects().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Contains(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the point (x, y) is inside or on the edge of the
            rectangle; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.United(QtCore.QRectF)">
            <summary>
            <para>Returns the bounding rectangle of this rectangle and the given
            rectangle.</para>
            <para></para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersected().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Intersected(QtCore.QRectF)">
            <summary>
            <para>Returns the intersection of this rectangle and the given
            rectangle. Note that r.intersected(s) is equivalent to r &amp; s.</para>
            <para></para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersects(), united(), and operator&amp;=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.Intersects(QtCore.QRectF)">
            <summary>
            <para>Returns true if this rectangle intersects with the given
            rectangle (i.e. there is a non-empty area of overlap between them),
            otherwise returns false.</para>
            <para>The intersection rectangle can be retrieved using the
            intersected() function.</para>
            <para>See also contains().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MarginsAdded(QtCore.QMarginsF)">
            <summary>
            <para>Returns a rectangle grown by the margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also operator+=(), marginsRemoved(), and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.MarginsRemoved(QtCore.QMarginsF)">
            <summary>
            <para>Removes the margins from the rectangle, shrinking it.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also marginsAdded(), operator+=(), and operator-=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.ToRect">
            <summary>
            <para>Returns a QRect based on the values of this rectangle. Note that
            the coordinates in the returned rectangle are rounded to the nearest
            integer.</para>
            <para>See also QRectF() and toAlignedRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.ToAlignedRect">
            <summary>
            <para>Returns a QRect based on the values of this rectangle that is the
            smallest possible integer rectangle that completely contains this
            rectangle.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also toRect().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_Equality(QtCore.QRectF,QtCore.QRectF)">
            <summary>
            <para>Returns true if the rectangles r1 and r2 are equal, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_Inequality(QtCore.QRectF,QtCore.QRectF)">
            <summary>
            <para>Returns true if the rectangles r1 and r2 are different, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_Addition(QtCore.QRectF,QtCore.QMarginsF)">
            <summary>
            <para>Returns the lhs rectangle grown by the rhs margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRectF.op_Subtraction(QtCore.QRectF,QtCore.QMarginsF)">
            <summary>
            <para>Returns the lhs rectangle grown by the rhs margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Left">
            <summary>
            <para>Returns the x-coordinate of the rectangle's left edge. Equivalent
            to x().</para>
            <para>See also setLeft(), topLeft(), and bottomLeft().</para>
            <para></para>
            <para>Sets the left edge of the rectangle to the given x coordinate.
            May change the width, but will never change the right edge of the
            rectangle.</para>
            <para>Equivalent to setX().</para>
            <para>See also left() and moveLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Top">
            <summary>
            <para>Returns the y-coordinate of the rectangle's top edge. Equivalent
            to y().</para>
            <para>See also setTop(), topLeft(), and topRight().</para>
            <para></para>
            <para>Sets the top edge of the rectangle to the given y coordinate. May
            change the height, but will never change the bottom edge of the
            rectangle.</para>
            <para>Equivalent to setY().</para>
            <para>See also top() and moveTop().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Right">
            <summary>
            <para>Returns the x-coordinate of the rectangle's right edge.</para>
            <para>See also setRight(), topRight(), and bottomRight().</para>
            <para></para>
            <para>Sets the right edge of the rectangle to the given x coordinate.
            May change the width, but will never change the left edge of the
            rectangle.</para>
            <para>See also right() and moveRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Bottom">
            <summary>
            <para>Returns the y-coordinate of the rectangle's bottom edge.</para>
            <para>See also setBottom(), bottomLeft(), and bottomRight().</para>
            <para></para>
            <para>Sets the bottom edge of the rectangle to the given y coordinate.
            May change the height, but will never change the top edge of the
            rectangle.</para>
            <para>See also bottom() and moveBottom().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.X">
            <summary>
            <para>Returns the x-coordinate of the rectangle's left edge. Equivalent
            to left().</para>
            <para>See also setX(), y(), and topLeft().</para>
            <para></para>
            <para>Sets the left edge of the rectangle to the given x coordinate.
            May change the width, but will never change the right edge of the
            rectangle.</para>
            <para>Equivalent to setLeft().</para>
            <para>See also x(), setY(), and setTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Y">
            <summary>
            <para>Returns the y-coordinate of the rectangle's top edge. Equivalent
            to top().</para>
            <para>See also setY(), x(), and topLeft().</para>
            <para></para>
            <para>Sets the top edge of the rectangle to the given y coordinate. May
            change the height, but will never change the bottom edge of the
            rectangle.</para>
            <para>Equivalent to setTop().</para>
            <para>See also y(), setX(), and setTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.TopLeft">
            <summary>
            <para>Returns the position of the rectangle's top-left corner.</para>
            <para>See also setTopLeft(), top(), and left().</para>
            <para></para>
            <para>Set the top-left corner of the rectangle to the given position.
            May change the size, but will never change the bottom-right corner of the
            rectangle.</para>
            <para>See also topLeft() and moveTopLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.BottomRight">
            <summary>
            <para>Returns the position of the rectangle's bottom-right
            corner.</para>
            <para>See also setBottomRight(), bottom(), and right().</para>
            <para></para>
            <para>Set the bottom-right corner of the rectangle to the given
            position. May change the size, but will never change the top-left corner of
            the rectangle.</para>
            <para>See also bottomRight() and moveBottomRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.TopRight">
            <summary>
            <para>Returns the position of the rectangle's top-right corner.</para>
            <para>See also setTopRight(), top(), and right().</para>
            <para></para>
            <para>Set the top-right corner of the rectangle to the given position.
            May change the size, but will never change the bottom-left corner of the
            rectangle.</para>
            <para>See also topRight() and moveTopRight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.BottomLeft">
            <summary>
            <para>Returns the position of the rectangle's bottom-left
            corner.</para>
            <para>See also setBottomLeft(), bottom(), and left().</para>
            <para></para>
            <para>Set the bottom-left corner of the rectangle to the given
            position. May change the size, but will never change the top-right corner
            of the rectangle.</para>
            <para>See also bottomLeft() and moveBottomLeft().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Width">
            <summary>
            <para>Returns the width of the rectangle.</para>
            <para>See also setWidth(), height(), and size().</para>
            <para></para>
            <para>Sets the width of the rectangle to the given width. The right
            edge is changed, but not the left one.</para>
            <para>See also width() and setSize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Height">
            <summary>
            <para>Returns the height of the rectangle.</para>
            <para>See also setHeight(), width(), and size().</para>
            <para></para>
            <para>Sets the height of the rectangle to the given height. The bottom
            edge is changed, but not the top one.</para>
            <para>See also height() and setSize().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Size">
            <summary>
            <para>Returns the size of the rectangle.</para>
            <para>See also setSize(), width(), and height().</para>
            <para></para>
            <para>Sets the size of the rectangle to the given size. The top-left
            corner is not moved.</para>
            <para>See also size(), setWidth(), and setHeight().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.IsNull">
            <summary>
            <para>Returns true if the rectangle is a null rectangle, otherwise
            returns false.</para>
            <para>A null rectangle has both the width and the height set to 0. A
            null rectangle is also empty, and hence not valid.</para>
            <para>See also isEmpty() and isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.IsEmpty">
            <summary>
            <para>Returns true if the rectangle is empty, otherwise returns
            false.</para>
            <para>An empty rectangle has width() &lt;= 0 or height() &lt;= 0. An
            empty rectangle is not valid (i.e., isEmpty() == !isValid()).</para>
            <para>Use the normalized() function to retrieve a rectangle where the
            corners are swapped.</para>
            <para>See also isNull(), isValid(), and normalized().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.IsValid">
            <summary>
            <para>Returns true if the rectangle is valid, otherwise returns
            false.</para>
            <para>A valid rectangle has a width() &gt; 0 and height() &gt; 0. Note
            that non-trivial operations like intersections are not defined for invalid
            rectangles. A valid rectangle is not empty (i.e., isValid() ==
            !isEmpty()).</para>
            <para>See also isNull(), isEmpty(), and normalized().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Normalized">
            <summary>
            <para>Returns a normalized rectangle; i.e., a rectangle that has a
            non-negative width and height.</para>
            <para>If width() &lt; 0 the function swaps the left and right corners,
            and it swaps the top and bottom corners if height() &lt; 0.</para>
            <para>See also isValid() and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRectF.Center">
            <summary>
            <para>Returns the center point of the rectangle.</para>
            <para>See also moveCenter().</para>
            </summary>
        </member>
        <member name="T:QtCore.QRegularExpression">
            <summary>
            <para>The QRegularExpression class provides pattern matching using
            regular expressions.</para>
            </summary>
            <remarks>
            <para>Regular expressions, or regexps, are a very powerful tool to
            handle strings and texts. This is useful in many contexts, e.g.,</para>
            <para></para>
            <para> Validation	A regexp can test whether a substring meets some
            criteria, e.g. is an integer or contains no whitespace.</para>
            <para>Searching	A regexp provides more powerful pattern matching than
            simple substring matching, e.g., match one of the words mail, letter or
            correspondence, but none of the words email, mailman, mailer, letterbox,
            etc.</para>
            <para>Search and Replace	A regexp can replace all occurrences of a
            substring with a different substring, e.g., replace all occurrences of
            &amp; with &amp;amp; except where the &amp; is already followed by an
            amp;.</para>
            <para>String Splitting	A regexp can be used to identify where a string
            should be split apart, e.g. splitting tab-delimited strings.</para>
            <para></para>
            <para>This document is by no means a complete reference to pattern
            matching using regular expressions, and the following parts will require
            the reader to have some basic knowledge about Perl-like regular expressions
            and their pattern syntax.</para>
            <para>Good references about regular expressions include:</para>
            <para></para>
            <para>Mastering Regular Expressions (Third Edition) by Jeffrey E. F.
            Friedl, ISBN 0-596-52812-4;</para>
            <para>the pcrepattern(3) man page, describing the pattern syntax
            supported by PCRE (the reference implementation of Perl-compatible regular
            expressions);</para>
            <para>the Perl's regular expression documentation and the Perl's
            regular expression tutorial.</para>
            <para></para>
            <para></para>
            <para>Introduction</para>
            <para>QRegularExpression implements Perl-compatible regular
            expressions. It fully supports Unicode. For an overview of the regular
            expression syntax supported by QRegularExpression, please refer to the
            aforementioned pcrepattern(3) man page. A regular expression is made up of
            two things: a pattern string and a set of pattern options that change the
            meaning of the pattern string.</para>
            <para>You can set the pattern string by passing a string to the
            QRegularExpression constructor:</para>
            <para>QRegularExpression re(&quot;a pattern&quot;);</para>
            <para>This sets the pattern string to a pattern. You can also use the
            setPattern() function to set a pattern on an existing QRegularExpression
            object:</para>
            <para>QRegularExpression re;</para>
            <para>re.setPattern(&quot;another pattern&quot;);</para>
            <para>Note that due to C++ literal strings rules, you must escape all
            backslashes inside the pattern string with another backslash:</para>
            <para>// matches two digits followed by a space and a word</para>
            <para>QRegularExpression re(&quot;\\d\\d \\w+&quot;);</para>
            <para></para>
            <para>// matches a backslash</para>
            <para>QRegularExpression re2(&quot;\\\\&quot;);</para>
            <para>The pattern() function returns the pattern that is currently set
            for a QRegularExpression object:</para>
            <para>QRegularExpression re(&quot;a third pattern&quot;);</para>
            <para>QString pattern = re.pattern(); // pattern == &quot;a third
            pattern&quot;</para>
            <para></para>
            <para>Pattern Options</para>
            <para>The meaning of the pattern string can be modified by setting one
            or more pattern options. For instance, it is possible to set a pattern to
            match case insensitively by setting the
            QRegularExpression::CaseInsensitiveOption.</para>
            <para>You can set the options by passing them to the QRegularExpression
            constructor, as in:</para>
            <para>// matches &quot;Qt rocks&quot;, but also &quot;QT rocks&quot;,
            &quot;QT ROCKS&quot;, &quot;qT rOcKs&quot;, etc.</para>
            <para>QRegularExpression re(&quot;Qt rocks&quot;,
            QRegularExpression::CaseInsensitiveOption);</para>
            <para>Alternatively, you can use the setPatternOptions() function on an
            existing QRegularExpressionObject:</para>
            <para>QRegularExpression re(&quot;^\\d+$&quot;);</para>
            <para>re.setPatternOptions(QRegularExpression::MultilineOption);</para>
            <para>// re matches any line in the subject string that contains only
            digits (but at least one)</para>
            <para>It is possible to get the pattern options currently set on a
            QRegularExpression object by using the patternOptions() function:</para>
            <para>QRegularExpression re =
            QRegularExpression(&quot;^two.*words$&quot;,
            QRegularExpression::MultilineOption</para>
            <para>                                                           |
            QRegularExpression::DotMatchesEverythingOption);</para>
            <para></para>
            <para>QRegularExpression::PatternOptions options =
            re.patternOptions();</para>
            <para>// options == QRegularExpression::MultilineOption |
            QRegularExpression::DotMatchesEverythingOption</para>
            <para>Please refer to the QRegularExpression::PatternOption enum
            documentation for more information about each pattern option.</para>
            <para></para>
            <para>Match Type and Match Options</para>
            <para>The last two arguments of the match() and the globalMatch()
            functions set the match type and the match options. The match type is a
            value of the QRegularExpression::MatchType enum; the
            &quot;traditional&quot; matching algorithm is chosen by using the
            NormalMatch match type (the default). It is also possible to enable partial
            matching of the regular expression against a subject string: see the
            partial matching section for more details.</para>
            <para>The match options are a set of one or more
            QRegularExpression::MatchOption values. They change the way a specific
            match of a regular expression against a subject string is done. Please
            refer to the QRegularExpression::MatchOption enum documentation for more
            details.</para>
            <para></para>
            <para></para>
            <para>Normal Matching</para>
            <para>In order to perform a match you can simply invoke the match()
            function passing a string to match against. We refer to this string as the
            subject string. The result of the match() function is a
            QRegularExpressionMatch object that can be used to inspect the results of
            the match. For instance:</para>
            <para>// match two digits followed by a space and a word</para>
            <para>QRegularExpression re(&quot;\\d\\d \\w+&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abc123
            def&quot;);</para>
            <para>bool hasMatch = match.hasMatch(); // true</para>
            <para>If a match is successful, the (implicit) capturing group number 0
            can be used to retrieve the substring matched by the entire pattern (see
            also the section about extracting captured substrings):</para>
            <para>QRegularExpression re(&quot;\\d\\d \\w+&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abc123
            def&quot;);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    QString matched = match.captured(0); // matched == &quot;23
            def&quot;</para>
            <para>    // ...</para>
            <para>}</para>
            <para>It's also possible to start a match at an arbitrary offset inside
            the subject string by passing the offset as an argument of the match()
            function. In the following example &quot;12 abc&quot; is not matched
            because the match is started at offset 1:</para>
            <para>QRegularExpression re(&quot;\\d\\d \\w+&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;12 abc 45
            def&quot;, 1);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    QString matched = match.captured(0); // matched == &quot;45
            def&quot;</para>
            <para>    // ...</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>Extracting captured substrings</para>
            <para>The QRegularExpressionMatch object contains also information
            about the substrings captured by the capturing groups in the pattern
            string. The captured() function will return the string captured by the n-th
            capturing group:</para>
            <para>QRegularExpression
            re(&quot;^(\\d\\d)/(\\d\\d)/(\\d\\d\\d\\d)$&quot;);</para>
            <para>QRegularExpressionMatch match =
            re.match(&quot;08/12/1985&quot;);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    QString day = match.captured(1); // day ==
            &quot;08&quot;</para>
            <para>    QString month = match.captured(2); // month ==
            &quot;12&quot;</para>
            <para>    QString year = match.captured(3); // year ==
            &quot;1985&quot;</para>
            <para>    // ...</para>
            <para>}</para>
            <para>Capturing groups in the pattern are numbered starting from 1, and
            the implicit capturing group 0 is used to capture the substring that
            matched the entire pattern.</para>
            <para>It's also possible to retrieve the starting and the ending
            offsets (inside the subject string) of each captured substring, by using
            the capturedStart() and the capturedEnd() functions:</para>
            <para>QRegularExpression re(&quot;abc(\\d+)def&quot;);</para>
            <para>QRegularExpressionMatch match =
            re.match(&quot;XYZabc123defXYZ&quot;);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    int startOffset = match.capturedStart(1); // startOffset ==
            6</para>
            <para>    int endOffset = match.capturedEnd(1); // endOffset ==
            9</para>
            <para>    // ...</para>
            <para>}</para>
            <para>All of these functions have an overload taking a QString as a
            parameter in order to extract named captured substrings. For
            instance:</para>
            <para>QRegularExpression
            re(&quot;^(?&lt;date&gt;\\d\\d)/(?&lt;month&gt;\\d\\d)/(?&lt;year&gt;\\d\\d
            \\d\\d)$&quot;);</para>
            <para>QRegularExpressionMatch match =
            re.match(&quot;08/12/1985&quot;);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    QString date = match.captured(&quot;date&quot;); // date ==
            &quot;08&quot;</para>
            <para>    QString month = match.captured(&quot;month&quot;); // month
            == &quot;12&quot;</para>
            <para>    QString year = match.captured(&quot;year&quot;); // year ==
            1985</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>Global Matching</para>
            <para>Global matching is useful to find all the occurrences of a given
            regular expression inside a subject string. Suppose that we want to extract
            all the words from a given string, where a word is a substring matching the
            pattern \w+.</para>
            <para>QRegularExpression::globalMatch returns a
            QRegularExpressionMatchIterator, which is a Java-like forward iterator that
            can be used to iterate over the results. For instance:</para>
            <para>QRegularExpression re(&quot;(\\w+)&quot;);</para>
            <para>QRegularExpressionMatchIterator i = re.globalMatch(&quot;the
            quick fox&quot;);</para>
            <para>Since it's a Java-like iterator, the
            QRegularExpressionMatchIterator will point immediately before the first
            result. Every result is returned as a QRegularExpressionMatch object. The
            hasNext() function will return true if there's at least one more result,
            and next() will return the next result and advance the iterator. Continuing
            from the previous example:</para>
            <para>QStringList words;</para>
            <para>while (i.hasNext()) {</para>
            <para>    QRegularExpressionMatch match = i.next();</para>
            <para>    QString word = match.captured(1);</para>
            <para>    words &lt;&lt; word;</para>
            <para>}</para>
            <para>// words contains &quot;the&quot;, &quot;quick&quot;,
            &quot;fox&quot;</para>
            <para>You can also use peekNext() to get the next result without
            advancing the iterator.</para>
            <para>It is possible to pass a starting offset and one or more match
            options to the globalMatch() function, exactly like normal matching with
            match().</para>
            <para></para>
            <para></para>
            <para>Partial Matching</para>
            <para>A partial match is obtained when the end of the subject string is
            reached, but more characters are needed to successfully complete the match.
            Note that a partial match is usually much more inefficient than a normal
            match because many optimizations of the matching algorithm cannot be
            employed.</para>
            <para>A partial match must be explicitly requested by specifying a
            match type of PartialPreferCompleteMatch or PartialPreferFirstMatch when
            calling QRegularExpression::match or QRegularExpression::globalMatch. If a
            partial match is found, then calling the hasMatch() function on the
            QRegularExpressionMatch object returned by match() will return false, but
            hasPartialMatch() will return true.</para>
            <para>When a partial match is found, no captured substrings are
            returned, and the (implicit) capturing group 0 corresponding to the whole
            match captures the partially matched substring of the subject
            string.</para>
            <para>Note that asking for a partial match can still lead to a complete
            match, if one is found; in this case, hasMatch() will return true and
            hasPartialMatch() false. It never happens that a QRegularExpressionMatch
            reports both a partial and a complete match.</para>
            <para>Partial matching is mainly useful in two scenarios: validating
            user input in real time and incremental/multi-segment matching.</para>
            <para></para>
            <para></para>
            <para>Validating user input</para>
            <para>Suppose that we would like the user to input a date in a specific
            format, for instance &quot;MMM dd, yyyy&quot;. We can check the input
            validity with a pattern like:</para>
            <para>^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \d\d?,
            \d\d\d\d$</para>
            <para>(This pattern doesn't catch invalid days, but let's keep it for
            the example's purposes).</para>
            <para>We would like to validate the input with this regular expression
            while the user is typing it, so that we can report an error in the input as
            soon as it is committed (for instance, the user typed the wrong key). In
            order to do so we must distinguish three cases:</para>
            <para></para>
            <para>the input cannot possibly match the regular expression;</para>
            <para>the input does match the regular expression;</para>
            <para>the input does not match the regular expression right now, but it
            will if more characters will be added to it.</para>
            <para></para>
            <para>Note that these three cases represent exactly the possible states
            of a QValidator (see the QValidator::State enum).</para>
            <para>In particular, in the last case we want the regular expression
            engine to report a partial match: we are successfully matching the pattern
            against the subject string but the matching cannot continue because the end
            of the subject is encountered. Notice, however, that the matching algorithm
            should continue and try all possibilities, and in case a complete
            (non-partial) match is found, then this one should be reported, and the
            input string accepted as fully valid.</para>
            <para>This behaviour is implemented by the PartialPreferCompleteMatch
            match type. For instance:</para>
            <para>QString
            pattern(&quot;^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d\\d?,
            \\d\\d\\d\\d$&quot;);</para>
            <para>QRegularExpression re(pattern);</para>
            <para></para>
            <para>QString input(&quot;Jan 21,&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(input, 0,
            QRegularExpression::PartialPreferCompleteMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // false</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // true</para>
            <para>If matching the same regular expression against the subject
            string leads to a complete match, it is reported as usual:</para>
            <para>QString input(&quot;Dec 8, 1985&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(input, 0,
            QRegularExpression::PartialPreferCompleteMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // true</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // false</para>
            <para>Another example with a different pattern, showing the behaviour
            of preferring a complete match over a partial one:</para>
            <para>QRegularExpression re(&quot;abc\\w+X|def&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abcdef&quot;, 0,
            QRegularExpression::PartialPreferCompleteMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // true</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // false</para>
            <para>QString captured = match.captured(0); // captured ==
            &quot;def&quot;</para>
            <para>In this case, the subpattern abc\\w+X partially matches the
            subject string; however, the subpattern def matches the subject string
            completely, and therefore a complete match is reported.</para>
            <para>If multiple partial matches are found when matching (but no
            complete match), then the QRegularExpressionMatch object will report the
            first one that is found. For instance:</para>
            <para>QRegularExpression re(&quot;abc\\w+X|defY&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abcdef&quot;, 0,
            QRegularExpression::PartialPreferCompleteMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // false</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // true</para>
            <para>QString captured = match.captured(0); // captured ==
            &quot;abcdef&quot;</para>
            <para></para>
            <para>Incremental/multi-segment matching</para>
            <para>Incremental matching is another use case of partial matching.
            Suppose that we want to find the occurrences of a regular expression inside
            a large text (that is, substrings matching the regular expression). In
            order to do so we would like to &quot;feed&quot; the large text to the
            regular expression engines in smaller chunks. The obvious problem is what
            happens if the substring that matches the regular expression spans across
            two or more chunks.</para>
            <para>In this case, the regular expression engine should report a
            partial match, so that we can match again adding new data and (eventually)
            get a complete match. This implies that the regular expression engine may
            assume that there are other characters beyond the end of the subject
            string. This is not to be taken literally -- the engine will never try to
            access any character after the last one in the subject.</para>
            <para>QRegularExpression implements this behaviour when using the
            PartialPreferFirstMatch match type. This match type reports a partial match
            as soon as it is found, and other match alternatives are not tried (even if
            they could lead to a complete match). For instance:</para>
            <para>QRegularExpression re(&quot;abc|ab&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;ab&quot;, 0,
            QRegularExpression::PartialPreferFirstMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // false</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // true</para>
            <para>This happens because when matching the first branch of the
            alternation operator a partial match is found, and therefore matching
            stops, without trying the second branch. Another example:</para>
            <para>QRegularExpression re(&quot;abc(def)?&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abc&quot;, 0,
            QRegularExpression::PartialPreferFirstMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // false</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // true</para>
            <para>This shows what could seem a counterintuitve behaviour of
            quantifiers: since ? is greedy, then the engine tries first to continue the
            match after having matched &quot;abc&quot;; but then the matching reaches
            the end of the subject string, and therefore a partial match is reported.
            This is even more surprising in the following example:</para>
            <para>QRegularExpression re(&quot;(abc)*&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;abc&quot;, 0,
            QRegularExpression::PartialPreferFirstMatch);</para>
            <para>bool hasMatch = match.hasMatch(); // false</para>
            <para>bool hasPartialMatch = match.hasPartialMatch(); // true</para>
            <para>It's easy to understand this behaviour if we remember that the
            engine expects the subject string to be only a substring of the whole text
            we're looking for a match into (that is, how we said before, that the
            engine assumes that there are other characters beyond the end of the
            subject string).</para>
            <para>Since the * quantifier is greedy, then reporting a complete match
            could be an error, because after the current subject &quot;abc&quot; there
            may be other occurrences of &quot;abc&quot;. For instance, the complete
            text could have been &quot;abcabcX&quot;, and therefore the right match to
            report (in the complete text) would have been &quot;abcabc&quot;; by
            matching only against the leading &quot;abc&quot; we instead get a partial
            match.</para>
            <para></para>
            <para>Error Handling</para>
            <para>It is possible for a QRegularExpression object to be invalid
            because of syntax errors in the pattern string. The isValid() function will
            return true if the regular expression is valid, or false otherwise:</para>
            <para>QRegularExpression
            invalidRe(&quot;(unmatched|parenthesis&quot;);</para>
            <para>bool isValid = invalidRe.isValid(); // false</para>
            <para>You can get more information about the specific error by calling
            the errorString() function; moreover, the patternErrorOffset() function
            will return the offset inside the pattern string</para>
            <para>QRegularExpression
            invalidRe(&quot;(unmatched|parenthesis&quot;);</para>
            <para>if (!invalidRe.isValid()) {</para>
            <para>    QString errorString = invalidRe.errorString(); // errorString
            == &quot;missing )&quot;</para>
            <para>    int errorOffset = invalidRe.patternErrorOffset(); //
            errorOffset == 22</para>
            <para>    // ...</para>
            <para>}</para>
            <para>If a match is attempted with an invalid QRegularExpression, then
            the returned QRegularExpressionMatch object will be invalid as well (that
            is, its isValid() function will return false). The same applies for
            attempting a global match.</para>
            <para></para>
            <para>Unsupported Perl-compatible Regular Expressions Features</para>
            <para>QRegularExpression does not support all the features available in
            Perl-compatible regular expressions. The most notable one is the fact that
            duplicated names for capturing groups are not supported, and using them can
            lead to undefined behaviour.</para>
            <para>This may change in a future version of Qt.</para>
            <para></para>
            <para>Notes for QRegExp Users</para>
            <para>The QRegularExpression class introduced in Qt 5 is a big
            improvement upon QRegExp, in terms of APIs offered, supported pattern
            syntax and speed of execution. The biggest difference is that
            QRegularExpression simply holds a regular expression, and it's not modified
            when a match is requested. Instead, a QRegularExpressionMatch object is
            returned, in order to check the result of a match and extract the captured
            substring. The same applies with global matching and
            QRegularExpressionMatchIterator.</para>
            <para>Other differences are outlined below.</para>
            <para></para>
            <para>Exact matching</para>
            <para>QRegExp::exactMatch() in Qt 4 served two purposes: it exactly
            matched a regular expression against a subject string, and it implemented
            partial matching. In fact, if an exact match was not found, one could still
            find out how much of the subject string was matched by the regular
            expression by calling QRegExp::matchedLength(). If the returned length was
            equal to the subject string's length, then one could desume that a partial
            match was found.</para>
            <para>QRegularExpression supports partial matching explicitly by means
            of the appropriate MatchType. If instead you simply want to be sure that
            the subject string matches the regular expression exactly, you can wrap the
            pattern between a couple of anchoring expressions. Simply putting the
            pattern between the ^ and the $ anchors is enough in most cases:</para>
            <para>QRegularExpression re(&quot;^this pattern must match
            exactly$&quot;);</para>
            <para>However, remember that the $ anchor not only matches at the end
            of the string, but also at a newline character right before the end of the
            string; that is, the previous pattern matches against the string &quot;this
            pattern must match exactly\n&quot;. Also, the behaviour of both the ^ and
            the $ anchors changes if the MultiLineOption is set either explicitly (as a
            pattern option) or implicitly (as a directive inside the pattern
            string).</para>
            <para>Therefore, in the most general case, you should wrap the pattern
            between the \A and the \z anchors:</para>
            <para>QString p(&quot;a .*|pattern&quot;);</para>
            <para>QRegularExpression re(&quot;\\A(?:&quot; + p + &quot;)\\z&quot;);
            // re matches exactly the pattern string p</para>
            <para>Note the usage of the non-capturing group in order to preserve
            the meaning of the branch operator inside the pattern.</para>
            <para></para>
            <para>Global matching</para>
            <para>Due to limitations of the QRegExp API it was impossible to
            implement global matching correctly (that is, like Perl does). In
            particular, patterns that can match 0 characters (like &quot;a*&quot;) are
            problematic.</para>
            <para>QRegularExpression::globalMatch() implements Perl global match
            correctly, and the returned iterator can be used to examine each
            result.</para>
            <para></para>
            <para>Unicode properties support</para>
            <para>When using QRegExp, character classes such as \w, \d, etc. match
            characters with the corresponding Unicode property: for instance, \d
            matches any character with the Unicode Nd (decimal digit) property.</para>
            <para>Those character classes only match ASCII characters by default
            when using QRegularExpression: for instance, \d matches exactly a character
            in the 0-9 ASCII range. It is possible to change this behaviour by using
            the UseUnicodePropertiesOption pattern option.</para>
            <para></para>
            <para>Wildcard matching</para>
            <para>There is no equivalent of wildcard matching in
            QRegularExpression. Nevertheless, rewriting a regular expression in
            wildcard syntax to a Perl-compatible regular expression is a very easy
            task, given the fact that wildcard syntax supported by QRegExp is very
            simple.</para>
            <para></para>
            <para>Other pattern syntaxes</para>
            <para>QRegularExpression supports only Perl-compatible regular
            expressions.</para>
            <para></para>
            <para>Minimal matching</para>
            <para>QRegExp::setMinimal() implemented minimal matching by simply
            reversing the greediness of the quantifiers (QRegExp did not support lazy
            quantifiers, like *?, +?, etc.). QRegularExpression instead does support
            greedy, lazy and possessive quantifiers. The InvertedGreedinessOption
            pattern option can be useful to emulate the effects of
            QRegExp::setMinimal(): if enabled, it inverts the greediness of quantifiers
            (greedy ones become lazy and vice versa).</para>
            <para></para>
            <para>Caret modes</para>
            <para>The AnchoredMatchOption match option can be used to emulate the
            QRegExp::CaretAtOffset behaviour. There is no equivalent for the other
            QRegExp::CaretMode modes.</para>
            <para></para>
            <para>Debugging Code that Uses QRegularExpression</para>
            <para>QRegularExpression internally uses a just in time compiler (JIT)
            to optimize the execution of the matching algorithm. The JIT makes
            extensive usage of self-modifying code, which can lead debugging tools such
            as Valgrind to crash. You must enable all checks for self-modifying code if
            you want to debug programs using QRegularExpression (f.i., see Valgrind's
            --smc-check command line option). The downside of enabling such checks is
            that your program will run considerably slower.</para>
            <para>To avoid that, the JIT is disabled by default if you compile Qt
            in debug mode. It is possible to override the default and enable or disable
            the JIT usage (both in debug or release mode) by setting the
            QT_ENABLE_REGEXP_JIT environment variable to a non-zero or zero value
            respectively.</para>
            <para></para>
            <para>See also QRegularExpressionMatch and
            QRegularExpressionMatchIterator.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRegularExpression.#ctor">
            <summary>
            <para>Constructs a QRegularExpression object with an empty pattern and
            no pattern options.</para>
            <para>See also setPattern() and setPatternOptions().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.#ctor(System.String,QtCore.QRegularExpression.PatternOption)">
            <summary>
            <para>Constructs a QRegularExpression object using the given pattern as
            pattern and the options as the pattern options.</para>
            <para>See also setPattern() and setPatternOptions().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.#ctor(QtCore.QRegularExpression)">
            <summary>
            <para>Constructs a QRegularExpression object as a copy of re.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.Swap(QtCore.QRegularExpression)">
            <summary>
            <para>Swaps the regular expression other with this regular expression.
            This operation is very fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.Match(System.String,System.Int32,QtCore.QRegularExpression.MatchType,QtCore.QRegularExpression.MatchOption)">
            <summary>
            <para>Attempts to match the regular expression against the given
            subject string, starting at the position offset inside the subject, using a
            match of type matchType and honoring the given matchOptions.</para>
            <para>The returned QRegularExpressionMatch object contains the results
            of the match.</para>
            <para>See also QRegularExpressionMatch and normal matching.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.Match(QtCore.QStringRef,System.Int32,QtCore.QRegularExpression.MatchType,QtCore.QRegularExpression.MatchOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Attempts to match the regular expression against the given
            subjectRef string reference, starting at the position offset inside the
            subject, using a match of type matchType and honoring the given
            matchOptions.</para>
            <para>The returned QRegularExpressionMatch object contains the results
            of the match.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QRegularExpressionMatch and normal matching.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.GlobalMatch(System.String,System.Int32,QtCore.QRegularExpression.MatchType,QtCore.QRegularExpression.MatchOption)">
            <summary>
            <para>Attempts to perform a global match of the regular expression
            against the given subject string, starting at the position offset inside
            the subject, using a match of type matchType and honoring the given
            matchOptions.</para>
            <para>The returned QRegularExpressionMatchIterator is positioned before
            the first match result (if any).</para>
            <para>See also QRegularExpressionMatchIterator and global
            matching.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.GlobalMatch(QtCore.QStringRef,System.Int32,QtCore.QRegularExpression.MatchType,QtCore.QRegularExpression.MatchOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Attempts to perform a global match of the regular expression
            against the given subjectRef string reference, starting at the position
            offset inside the subject, using a match of type matchType and honoring the
            given matchOptions.</para>
            <para>The returned QRegularExpressionMatchIterator is positioned before
            the first match result (if any).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QRegularExpressionMatchIterator and global
            matching.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.Optimize">
            <summary>
            <para>Forces an immediate optimization of the pattern, including
            JIT-compiling it (if the JIT compiler is enabled).</para>
            <para>Patterns are normally optimized only after a certain number of
            usages. If you can predict that this QRegularExpression object is going to
            be used for several matches, it may be convenient to optimize it in advance
            by calling this function.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also QRegularExpression::OptimizeOnFirstUsageOption.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.op_Equality(QtCore.QRegularExpression,QtCore.QRegularExpression)">
            <summary>
            <para>Returns true if the regular expression is equal to re, or false
            otherwise. Two QRegularExpression objects are equal if they have the same
            pattern string and the same pattern options.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.op_Inequality(QtCore.QRegularExpression,QtCore.QRegularExpression)">
            <summary>
            <para>Returns true if the regular expression is different from re, or
            false otherwise.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpression.Escape(System.String)">
            <summary>
            <para>Escapes all characters of str so that they no longer have any
            special meaning when used as a regular expression pattern string, and
            returns the escaped string. For instance:</para>
            <para>QString escaped = QRegularExpression::escape(&quot;a(x) = f(x) +
            g(x)&quot;);</para>
            <para>// escaped == &quot;a\\(x\\)\\ \\=\\ f\\(x\\)\\ \\+\\
            g\\(x\\)&quot;</para>
            <para>This is very convenient in order to build patterns from arbitrary
            strings:</para>
            <para>QString pattern = &quot;(&quot; +
            QRegularExpression::escape(name) +</para>
            <para>                  &quot;|&quot; +
            QRegularExpression::escape(nickname) + &quot;)&quot;;</para>
            <para>QRegularExpression re(pattern);</para>
            <para>Note: This function implements Perl's quotemeta algorithm and
            escapes with a backslash all characters in str, except for the characters
            in the [A-Z], [a-z] and [0-9] ranges, as well as the underscore (_)
            character. The only difference with Perl is that a literal NUL inside str
            is escaped with the sequence &quot;\\0&quot; (backslash + '0'), instead of
            &quot;\\\0&quot; (backslash + NUL).</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.PatternOptions">
            <summary>
            <para>Returns the pattern options for the regular expression.</para>
            <para>See also setPatternOptions() and pattern().</para>
            <para></para>
            <para>Sets the given options as the pattern options of the regular
            expression. The pattern string is left unchanged.</para>
            <para>See also patternOptions() and setPattern().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.Pattern">
            <summary>
            <para>Returns the pattern string of the regular expression.</para>
            <para>See also setPattern() and patternOptions().</para>
            <para></para>
            <para>Sets the pattern string of the regular expression to pattern. The
            pattern options are left unchanged.</para>
            <para>See also pattern() and setPatternOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.IsValid">
            <summary>
            <para>Returns true if the regular expression is a valid regular
            expression (that is, it contains no syntax errors, etc.), or false
            otherwise. Use errorString() to obtain a textual description of the
            error.</para>
            <para>See also errorString() and patternErrorOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.PatternErrorOffset">
            <summary>
            <para>Returns the offset, inside the pattern string, at which an error
            was found when checking the validity of the regular expression. If no error
            was found, then -1 is returned.</para>
            <para>See also pattern(), isValid(), and errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.ErrorString">
            <summary>
            <para>Returns a textual description of the error found when checking
            the validity of the regular expression, or &quot;no error&quot; if no error
            was found.</para>
            <para>See also isValid() and patternErrorOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.CaptureCount">
            <summary>
            <para>Returns the number of capturing groups inside the pattern string,
            or -1 if the regular expression is not valid.</para>
            <para>Note: The implicit capturing group 0 is not included in the
            returned number.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpression.NamedCaptureGroups">
            <summary>
            <para>Returns a list of captureCount() + 1 elements, containing the
            names of the named capturing groups in the pattern string. The list is
            sorted such that the element of the list at position i is the name of the
            i-th capturing group, if it has a name, or an empty string if that
            capturing group is unnamed.</para>
            <para>For instance, given the regular expression</para>
            <para>(?&lt;day&gt;\d\d)-(?&lt;month&gt;\d\d)-(?&lt;year&gt;\d\d\d\d)
            (\w+) (?&lt;name&gt;\w+)</para>
            <para>namedCaptureGroups() will return the following list:</para>
            <para>(&quot;&quot;, &quot;day&quot;, &quot;month&quot;,
            &quot;year&quot;, &quot;&quot;, &quot;name&quot;)</para>
            <para>which corresponds to the fact that the capturing group #0
            (corresponding to the whole match) has no name, the capturing group #1 has
            name &quot;day&quot;, the capturing group #2 has name &quot;month&quot;,
            etc.</para>
            <para>If the regular expression is not valid, returns an empty
            list.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also isValid(), QRegularExpressionMatch::captured(), and
            QString::isEmpty().</para>
            </summary>
        </member>
        <member name="T:QtCore.QRegularExpression.PatternOption">
            <summary>
            <para>The PatternOption enum defines modifiers to the way the pattern
            string should be interpreted, and therefore the way the pattern matches
            against a subject string.</para>
            <para>The PatternOptions type is a typedef for
            QFlags&lt;PatternOption&gt;. It stores an OR combination of PatternOption
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.NoPatternOption">
            <summary>No pattern options are set.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.CaseInsensitiveOption">
            <summary>The pattern should match against the subject string in a case insensitive way. This option corresponds to the /i modifier in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.DotMatchesEverythingOption">
            <summary>The dot metacharacter (.) in the pattern string is allowed to match any character in the subject string, including newlines (normally, the dot does not match newlines). This option corresponds to the /s modifier in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.MultilineOption">
            <summary>The caret (^) and the dollar ($) metacharacters in the pattern string are allowed to match, respectively, immediately after and immediately before any newline in the subject string, as well as at the very beginning and at the very end of the subject string. This option corresponds to the /m modifier in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.ExtendedPatternSyntaxOption">
            <summary>Any whitespace in the pattern string which is not escaped and outside a character class is ignored. Moreover, an unescaped sharp (#) outside a character class causes all the following characters, until the first newline (included), to be ignored. This can be used to increase the readability of a pattern string as well as put comments inside regular expressions; this is particulary useful if the pattern string is loaded from a file or written by the user, because in C++ code it is always possible to use the rules for string literals to put comments outside the pattern string. This option corresponds to the /x modifier in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.InvertedGreedinessOption">
            <summary>The greediness of the quantifiers is inverted: *, +, ?, {m,n}, etc. become lazy, while their lazy versions (*?, +?, ??, {m,n}?, etc.) become greedy. There is no equivalent for this option in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.DontCaptureOption">
            <summary>The non-named capturing groups do not capture substrings; named capturing groups still work as intended, as well as the implicit capturing group number 0 corresponding to the entire match. There is no equivalent for this option in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.UseUnicodePropertiesOption">
            <summary>The meaning of the \w, \d, etc., character classes, as well as the meaning of their counterparts (\W, \D, etc.), is changed from matching ASCII characters only to matching any character with the corresponding Unicode property. For instance, \d is changed to match any character with the Unicode Nd (decimal digit) property; \w to match any character with either the Unicode L (letter) or N (digit) property, plus underscore, and so on. This option corresponds to the /u modifier in Perl regular expressions.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.OptimizeOnFirstUsageOption">
            <summary>The regular expression will be optimized (and possibly JIT-compiled) on its first usage, instead of after a certain (undefined) number of usages. See also optimize(). This enum value has been introduced in Qt 5.4.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.PatternOption.DontAutomaticallyOptimizeOption">
            <summary>Regular expressions are automatically optimized after a certain number of usages; setting this option prevents such optimizations, therefore avoiding possible unpredictable spikes in CPU and memory usage. If both this option and the OptimizeOnFirstUsageOption option are set, then this option takes precedence. Note: this option will still let the regular expression to be optimized by manually calling optimize(). This enum value has been introduced in Qt 5.4.</summary>
        </member>
        <member name="T:QtCore.QRegularExpression.MatchType">
            <summary>
            <para>The MatchType enum defines the type of the match that should be
            attempted against the subject string.</para>
            </summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchType.NormalMatch">
            <summary>A normal match is done.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchType.PartialPreferCompleteMatch">
            <summary>The pattern string is matched partially against the subject string. If a partial match is found, then it is recorded, and other matching alternatives are tried as usual. If a complete match is then found, then it's preferred to the partial match; in this case only the complete match is reported. If instead no complete match is found (but only the partial one), then the partial one is reported.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchType.PartialPreferFirstMatch">
            <summary>The pattern string is matched partially against the subject string. If a partial match is found, then matching stops and the partial match is reported. In this case, other matching alternatives (potentially leading to a complete match) are not tried. Moreover, this match type assumes that the subject string only a substring of a larger text, and that (in this text) there are other characters beyond the end of the subject string. This can lead to surprising results; see the discussion in the partial matching section for more details.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchType.NoMatch">
            <summary>No matching is done. This value is returned as the match type by a default constructed QRegularExpressionMatch or QRegularExpressionMatchIterator. Using this match type is not very useful for the user, as no matching ever happens. This enum value has been introduced in Qt 5.1.</summary>
        </member>
        <member name="T:QtCore.QRegularExpression.MatchOption">
            <summary>
            <para>The MatchOptions type is a typedef for QFlags&lt;MatchOption&gt;.
            It stores an OR combination of MatchOption values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchOption.NoMatchOption">
            <summary>No match options are set.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchOption.AnchoredMatchOption">
            <summary>The match is constrained to start exactly at the offset passed to match() in order to be successful, even if the pattern string does not contain any metacharacter that anchors the match at that point.</summary>
        </member>
        <member name="F:QtCore.QRegularExpression.MatchOption.DontCheckSubjectStringMatchOption">
            <summary>The subject string is not checked for UTF-16 validity before attempting a match. Use this option with extreme caution, as attempting to match an invalid string may crash the program and/or constitute a security issue. This enum value has been introduced in Qt 5.4.</summary>
        </member>
        <member name="T:QtCore.QRegularExpressionMatch">
            <summary>
            <para>The QRegularExpressionMatch class provides the results of a
            matching a QRegularExpression against a string.</para>
            </summary>
            <remarks>
            <para>A QRegularExpressionMatch object can be obtained by calling the
            QRegularExpression::match() function, or as a single result of a global
            match from a QRegularExpressionMatchIterator.</para>
            <para>The success or the failure of a match attempt can be inspected by
            calling the hasMatch() function. QRegularExpressionMatch also reports a
            successful partial match through the hasPartialMatch() function.</para>
            <para>In addition, QRegularExpressionMatch returns the substrings
            captured by the capturing groups in the pattern string. The implicit
            capturing group with index 0 captures the result of the whole match. The
            captured() function returns each substring captured, either by the
            capturing group's index or by its name:</para>
            <para>QRegularExpression re(&quot;(\\d\\d)
            (?&lt;name&gt;\\w+)&quot;);</para>
            <para>QRegularExpressionMatch match = re.match(&quot;23
            Jordan&quot;);</para>
            <para>if (match.hasMatch()) {</para>
            <para>    QString number = match.captured(1); // first ==
            &quot;23&quot;</para>
            <para>    QString name = match.captured(&quot;name&quot;); // name ==
            &quot;Jordan&quot;</para>
            <para>}</para>
            <para>For each captured substring it is possible to query its starting
            and ending offsets in the subject string by calling the capturedStart() and
            the capturedEnd() function, respectively. The length of each captured
            substring is available using the capturedLength() function.</para>
            <para>The convenience function capturedTexts() will return all the
            captured substrings at once (including the substring matched by the entire
            pattern) in the order they have been captured by captring groups; that is,
            captured(i) == capturedTexts().at(i).</para>
            <para>You can retrieve the QRegularExpression object the subject string
            was matched against by calling the regularExpression() function; the match
            type and the match options are available as well by calling the matchType()
            and the matchOptions() respectively.</para>
            <para>Please refer to the QRegularExpression documentation for more
            information about the Qt regular expression classes.</para>
            <para></para>
            <para>See also QRegularExpression.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.#ctor">
            <summary>
            <para>Constructs a valid, empty QRegularExpressionMatch object. The
            regular expression is set to a default-constructed one; the match type to
            QRegularExpression::NoMatch and the match options to
            QRegularExpression::NoMatchOption.</para>
            <para>The object will report no match through the hasMatch() and the
            hasPartialMatch() member functions.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.#ctor(QtCore.QRegularExpressionMatch)">
            <summary>
            <para>Constructs a match result by copying the result of the given
            match.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.Swap(QtCore.QRegularExpressionMatch)">
            <summary>
            <para>Swaps the match result other with this match result. This
            operation is very fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.Captured(System.Int32)">
            <summary>
            <para>Returns the substring captured by the nth capturing group. If the
            nth capturing group did not capture a string or doesn't exist, returns a
            null QString.</para>
            <para>See also capturedRef(), lastCapturedIndex(), capturedStart(),
            capturedEnd(), capturedLength(), and QString::isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedRef(System.Int32)">
            <summary>
            <para>Returns a reference to the substring captured by the nth
            capturing group. If the nth capturing group did not capture a string or
            doesn't exist, returns a null QStringRef.</para>
            <para>See also captured(), lastCapturedIndex(), capturedStart(),
            capturedEnd(), capturedLength(), and QStringRef::isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.Captured(System.String)">
            <summary>
            <para>Returns the substring captured by the capturing group named name.
            If the capturing group named name did not capture a string or doesn't
            exist, returns a null QString.</para>
            <para>See also capturedRef(), capturedStart(), capturedEnd(),
            capturedLength(), and QString::isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedRef(System.String)">
            <summary>
            <para>Returns a reference to the string captured by the capturing group
            named name. If the capturing group named name did not capture a string or
            doesn't exist, returns a null QStringRef.</para>
            <para>See also captured(), capturedStart(), capturedEnd(),
            capturedLength(), and QStringRef::isNull().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedStart(System.Int32)">
            <summary>
            <para>Returns the offset inside the subject string corresponding to the
            starting position of the substring captured by the nth capturing group. If
            the nth capturing group did not capture a string or doesn't exist, returns
            -1.</para>
            <para>See also capturedEnd(), capturedLength(), and captured().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedLength(System.Int32)">
            <summary>
            <para>Returns the length of the substring captured by the nth capturing
            group.</para>
            <para>Note: This function returns 0 if the nth capturing group did not
            capture a string or doesn't exist.</para>
            <para>See also capturedStart(), capturedEnd(), and captured().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedEnd(System.Int32)">
            <summary>
            <para>Returns the offset inside the subject string immediately after
            the ending position of the substring captured by the nth capturing group.
            If the nth capturing group did not capture a string or doesn't exist,
            returns -1.</para>
            <para>See also capturedStart(), capturedLength(), and
            captured().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedStart(System.String)">
            <summary>
            <para>Returns the offset inside the subject string corresponding to the
            starting position of the substring captured by the capturing group named
            name. If the capturing group named name did not capture a string or doesn't
            exist, returns -1.</para>
            <para>See also capturedEnd(), capturedLength(), and captured().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedLength(System.String)">
            <summary>
            <para>Returns the offset inside the subject string corresponding to the
            starting position of the substring captured by the capturing group named
            name.</para>
            <para>Note: This function returns 0 if the capturing group named name
            did not capture a string or doesn't exist.</para>
            <para>See also capturedStart(), capturedEnd(), and captured().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatch.CapturedEnd(System.String)">
            <summary>
            <para>Returns the offset inside the subject string immediately after
            the ending position of the substring captured by the capturing group named
            name. If the capturing group named name did not capture a string or doesn't
            exist, returns -1.</para>
            <para>See also capturedStart(), capturedLength(), and
            captured().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.RegularExpression">
            <summary>
            <para>Returns the QRegularExpression object whose match() function
            returned this object.</para>
            <para>See also QRegularExpression::match(), matchType(), and
            matchOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.MatchType">
            <summary>
            <para>Returns the match type that was used to get this
            QRegularExpressionMatch object, that is, the match type that was passed to
            QRegularExpression::match() or QRegularExpression::globalMatch().</para>
            <para>See also QRegularExpression::match(), regularExpression(), and
            matchOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.MatchOptions">
            <summary>
            <para>Returns the match options that were used to get this
            QRegularExpressionMatch object, that is, the match options that were passed
            to QRegularExpression::match() or QRegularExpression::globalMatch().</para>
            <para>See also QRegularExpression::match(), regularExpression(), and
            matchType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.HasMatch">
            <summary>
            <para>Returns true if the regular expression matched against the
            subject string, or false otherwise.</para>
            <para>See also QRegularExpression::match() and
            hasPartialMatch().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.HasPartialMatch">
            <summary>
            <para>Returns true if the regular expression partially matched against
            the subject string, or false otherwise.</para>
            <para>Note: Only a match that explicitly used the one of the partial
            match types can yield a partial match. Still, if such a match succeeds
            totally, this function will return false, while hasMatch() will return
            true.</para>
            <para>See also QRegularExpression::match(),
            QRegularExpression::MatchType, and hasMatch().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.IsValid">
            <summary>
            <para>Returns true if the match object was obtained as a result from
            the QRegularExpression::match() function invoked on a valid
            QRegularExpression object; returns false if the QRegularExpression was
            invalid.</para>
            <para>See also QRegularExpression::match() and
            QRegularExpression::isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.LastCapturedIndex">
            <summary>
            <para>Returns the index of the last capturing group that captured
            something, including the implicit capturing group 0. This can be used to
            extract all the substrings that were captured:</para>
            <para>QRegularExpressionMatch match = re.match(string);</para>
            <para>for (int i = 0; i &lt;= match.lastCapturedIndex(); ++i) {</para>
            <para>    QString captured = match.captured(i);</para>
            <para>    // ...</para>
            <para>}</para>
            <para>Note that some of the capturing groups with an index less than
            lastCapturedIndex() could have not matched, and therefore captured
            nothing.</para>
            <para>If the regular expression did not match, this function returns
            -1.</para>
            <para>See also captured(), capturedStart(), capturedEnd(), and
            capturedLength().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatch.CapturedTexts">
            <summary>
            <para>Returns a list of all strings captured by capturing groups, in
            the order the groups themselves appear in the pattern string.</para>
            </summary>
        </member>
        <member name="T:QtCore.QRegularExpressionMatchIterator">
            <summary>
            <para>The QRegularExpressionMatchIterator class provides an iterator on
            the results of a global match of a QRegularExpression object against a
            string.</para>
            </summary>
            <remarks>
            <para>A QRegularExpressionMatchIterator object is a forward only
            Java-like iterator; it can be obtained by calling the
            QRegularExpression::globalMatch() function. A new
            QRegularExpressionMatchIterator will be positioned before the first result.
            You can then call the hasNext() function to check if there are more results
            available; if so, the next() function will return the next result and
            advance the iterator.</para>
            <para>Each result is a QRegularExpressionMatch object holding all the
            information for that result (including captured substrings).</para>
            <para>For instance:</para>
            <para>// extracts the words</para>
            <para>QRegularExpression re(&quot;(\\w+)&quot;);</para>
            <para>QString subject(&quot;the quick fox&quot;);</para>
            <para>QRegularExpressionMatchIterator i =
            re.globalMatch(subject);</para>
            <para>while (i.hasNext()) {</para>
            <para>    QRegularExpressionMatch match = i.next();</para>
            <para>    // ...</para>
            <para>}</para>
            <para>Moreover, QRegularExpressionMatchIterator offers a peekNext()
            function to get the next result without advancing the iterator.</para>
            <para>You can retrieve the QRegularExpression object the subject string
            was matched against by calling the regularExpression() function; the match
            type and the match options are available as well by calling the matchType()
            and the matchOptions() respectively.</para>
            <para>Please refer to the QRegularExpression documentation for more
            information about the Qt regular expression classes.</para>
            <para></para>
            <para>See also QRegularExpression and QRegularExpressionMatch.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QRegularExpressionMatchIterator.#ctor">
            <summary>
            <para>Constructs an empty, valid QRegularExpressionMatchIterator
            object. The regular expression is set to a default-constructed one; the
            match type to QRegularExpression::NoMatch and the match options to
            QRegularExpression::NoMatchOption.</para>
            <para>Invoking the hasNext() member function on the constructed object
            will return false, as the iterator is not iterating on a valid sequence of
            matches.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatchIterator.#ctor(QtCore.QRegularExpressionMatchIterator)">
            <summary>
            <para>Constructs a QRegularExpressionMatchIterator object as a copy of
            iterator.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtCore.QRegularExpressionMatchIterator.Swap(QtCore.QRegularExpressionMatchIterator)">
            <summary>
            <para>Swaps the iterator other with this iterator object. This
            operation is very fast and never fails.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.IsValid">
            <summary>
            <para>Returns true if the iterator object was obtained as a result from
            the QRegularExpression::globalMatch() function invoked on a valid
            QRegularExpression object; returns false if the QRegularExpression was
            invalid.</para>
            <para>See also QRegularExpression::globalMatch() and
            QRegularExpression::isValid().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.HasNext">
            <summary>
            <para>Returns true if there is at least one match result ahead of the
            iterator; otherwise it returns false.</para>
            <para>See also next().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.Next">
            <summary>
            <para>Returns the next match result and advances the iterator by one
            position.</para>
            <para>Note: Calling this function when the iterator is at the end of
            the result set leads to undefined results.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.PeekNext">
            <summary>
            <para>Returns the next match result without moving the iterator.</para>
            <para>Note: Calling this function when the iterator is at the end of
            the result set leads to undefined results.</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.RegularExpression">
            <summary>
            <para>Returns the QRegularExpression object whose globalMatch()
            function returned this object.</para>
            <para>See also QRegularExpression::globalMatch(), matchType(), and
            matchOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.MatchType">
            <summary>
            <para>Returns the match type that was used to get this
            QRegularExpressionMatchIterator object, that is, the match type that was
            passed to QRegularExpression::globalMatch().</para>
            <para>See also QRegularExpression::globalMatch(), regularExpression(),
            and matchOptions().</para>
            </summary>
        </member>
        <member name="P:QtCore.QRegularExpressionMatchIterator.MatchOptions">
            <summary>
            <para>Returns the match options that were used to get this
            QRegularExpressionMatchIterator object, that is, the match options that
            were passed to QRegularExpression::globalMatch().</para>
            <para>See also QRegularExpression::globalMatch(), regularExpression(),
            and matchType().</para>
            </summary>
        </member>
        <member name="T:QtCore.QTextBoundaryFinder">
            <summary>
            <para>The QTextBoundaryFinder class provides a way of finding Unicode
            text boundaries in a string.</para>
            </summary>
            <remarks>
            <para>QTextBoundaryFinder allows to find Unicode text boundaries in a
            string, accordingly to the Unicode text boundary specification (see Unicode
            Standard Annex #14 and Unicode Standard Annex #29).</para>
            <para>QTextBoundaryFinder can operate on a QString in four possible
            modes depending on the value of BoundaryType.</para>
            <para>Units of Unicode characters that make up what the user thinks of
            as a character or basic unit of the language are here called Grapheme
            clusters. The two unicode characters 'A' + diaeresis do for example form
            one grapheme cluster as the user thinks of them as one character, yet it is
            in this case represented by two unicode code points (see
            http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).</para>
            <para>Word boundaries are there to locate the start and end of what a
            language considers to be a word (see
            http://www.unicode.org/reports/tr29/#Word_Boundaries).</para>
            <para>Line break boundaries give possible places where a line break
            might happen and sentence boundaries will show the beginning and end of
            whole sentences (see
            http://www.unicode.org/reports/tr29/#Sentence_Boundaries and
            http://www.unicode.org/reports/tr14/).</para>
            <para>The first position in a string is always a valid boundary and
            refers to the position before the first character. The last position at the
            length of the string is also valid and refers to the position after the
            last character.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.#ctor">
            <summary>
            <para>Constructs an invalid QTextBoundaryFinder object.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.#ctor(QtCore.QTextBoundaryFinder)">
            <summary>
            <para>Copies the QTextBoundaryFinder object, other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.#ctor(QtCore.QTextBoundaryFinder.BoundaryType,System.String)">
            <summary>
            <para>Creates a QTextBoundaryFinder object of type operating on
            string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.#ctor(QtCore.QTextBoundaryFinder.BoundaryType,QtCore.QChar,System.Int32,System.Byte*,System.Int32)">
            <summary>
            <para>Creates a QTextBoundaryFinder object of type operating on chars
            with length.</para>
            <para>buffer is an optional working buffer of size bufferSize you can
            pass to the QTextBoundaryFinder. If the buffer is large enough to hold the
            working data required (bufferSize &gt;= length + 1), it will use this
            instead of allocating its own buffer.</para>
            <para>Warning: QTextBoundaryFinder does not create a copy of chars. It
            is the application programmer's responsibility to ensure the array is
            allocated for as long as the QTextBoundaryFinder object stays alive. The
            same applies to buffer.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.ToStart">
            <summary>
            <para>Moves the finder to the start of the string. This is equivalent
            to setPosition(0).</para>
            <para>See also setPosition() and position().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.ToEnd">
            <summary>
            <para>Moves the finder to the end of the string. This is equivalent to
            setPosition(string.length()).</para>
            <para>See also setPosition() and position().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.ToNextBoundary">
            <summary>
            <para>Moves the QTextBoundaryFinder to the next boundary position and
            returns that position.</para>
            <para>Returns -1 if there is no next boundary.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTextBoundaryFinder.ToPreviousBoundary">
            <summary>
            <para>Moves the QTextBoundaryFinder to the previous boundary position
            and returns that position.</para>
            <para>Returns -1 if there is no previous boundary.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.Position">
            <summary>
            <para>Returns the current position of the QTextBoundaryFinder.</para>
            <para>The range is from 0 (the beginning of the string) to the length
            of the string inclusive.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Sets the current position of the QTextBoundaryFinder to
            position.</para>
            <para>If position is out of bounds, it will be bound to only valid
            positions. In this case, valid positions are from 0 to the length of the
            string inclusive.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.IsValid">
            <summary>
            <para>Returns true if the text boundary finder is valid; otherwise
            returns false. A default QTextBoundaryFinder is invalid.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.Type">
            <summary>
            <para>Returns the type of the QTextBoundaryFinder.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.String">
            <summary>
            <para>Returns the string the QTextBoundaryFinder object operates
            on.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.IsAtBoundary">
            <summary>
            <para>Returns true if the object's position() is currently at a valid
            text boundary.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTextBoundaryFinder.BoundaryReasons">
            <summary>
            <para>Returns the reasons for the boundary finder to have chosen the
            current position as a boundary.</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryType.Grapheme">
            <summary>Finds a grapheme which is the smallest boundary. It including letters, punctuation marks, numerals and more.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryType.Word">
            <summary>Finds a word.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryType.Sentence">
            <summary>Finds sentence boundaries. These include periods, question marks etc.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryType.Line">
            <summary>Finds possible positions for breaking the text into multiple lines.</summary>
        </member>
        <member name="T:QtCore.QTextBoundaryFinder.BoundaryReason">
            <summary>
            <para>The BoundaryReasons type is a typedef for
            QFlags&lt;BoundaryReason&gt;. It stores an OR combination of BoundaryReason
            values.</para>
            </summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.NotAtBoundary">
            <summary>The boundary finder is not at a boundary position.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.BreakOpportunity">
            <summary>The boundary finder is at a break opportunity position. Such a break opportunity might also be an item boundary (either StartOfItem, EndOfItem, or combination of both), a mandatory line break, or a soft hyphen.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.StartOfItem">
            <summary>Since 5.0. The boundary finder is at the start of a grapheme, a word, a sentence, or a line.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.EndOfItem">
            <summary>Since 5.0. The boundary finder is at the end of a grapheme, a word, a sentence, or a line.</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.MandatoryBreak">
            <summary>Since 5.0. The boundary finder is at the end of line (can occur for a Line boundary type only).</summary>
        </member>
        <member name="F:QtCore.QTextBoundaryFinder.BoundaryReason.SoftHyphen">
            <summary>The boundary finder is at the soft hyphen (can occur for a Line boundary type only).</summary>
        </member>
        <member name="T:QtCore.QTimeLine">
            <summary>
            <para>The QTimeLine class provides a timeline for controlling
            animations.</para>
            </summary>
            <remarks>
            <para>It's most commonly used to animate a GUI control by calling a
            slot periodically. You can construct a timeline by passing its duration in
            milliseconds to QTimeLine's constructor. The timeline's duration describes
            for how long the animation will run. Then you set a suitable frame range by
            calling setFrameRange(). Finally connect the frameChanged() signal to a
            suitable slot in the widget you wish to animate (for example, setValue() in
            QProgressBar). When you proceed to calling start(), QTimeLine will enter
            Running state, and start emitting frameChanged() at regular intervals,
            causing your widget's connected property's value to grow from the lower end
            to the upper and of your frame range, at a steady rate. You can specify the
            update interval by calling setUpdateInterval(). When done, QTimeLine enters
            NotRunning state, and emits finished().</para>
            <para>Example:</para>
            <para>...</para>
            <para>progressBar = new QProgressBar(this);</para>
            <para>progressBar-&gt;setRange(0, 100);</para>
            <para></para>
            <para>// Construct a 1-second timeline with a frame range of 0 -
            100</para>
            <para>QTimeLine *timeLine = new QTimeLine(1000, this);</para>
            <para>timeLine-&gt;setFrameRange(0, 100);</para>
            <para>connect(timeLine, SIGNAL(frameChanged(int)), progressBar,
            SLOT(setValue(int)));</para>
            <para></para>
            <para>// Clicking the push button will start the progress bar
            animation</para>
            <para>pushButton = new QPushButton(tr(&quot;Start animation&quot;),
            this);</para>
            <para>connect(pushButton, SIGNAL(clicked()), timeLine,
            SLOT(start()));</para>
            <para>...</para>
            <para>By default the timeline runs once, from the beginning and towards
            the end, upon which you must call start() again to restart from the
            beginning. To make the timeline loop, you can call setLoopCount(), passing
            the number of times the timeline should run before finishing. The direction
            can also be changed, causing the timeline to run backward, by calling
            setDirection(). You can also pause and unpause the timeline while it's
            running by calling setPaused(). For interactive control, the
            setCurrentTime() function is provided, which sets the time position of the
            time line directly. Although most useful in NotRunning state, (e.g.,
            connected to a valueChanged() signal in a QSlider,) this function can be
            called at any time.</para>
            <para>The frame interface is useful for standard widgets, but QTimeLine
            can be used to control any type of animation. The heart of QTimeLine lies
            in the valueForTime() function, which generates a value between 0 and 1 for
            a given time. This value is typically used to describe the steps of an
            animation, where 0 is the first step of an animation, and 1 is the last
            step. When running, QTimeLine generates values between 0 and 1 by calling
            valueForTime() and emitting valueChanged(). By default, valueForTime()
            applies an interpolation algorithm to generate these value. You can choose
            from a set of predefined timeline algorithms by calling
            setCurveShape().</para>
            <para>Note that by default, QTimeLine uses the EaseInOut curve shape,
            which provides a value that grows slowly, then grows steadily, and finally
            grows slowly. For a custom timeline, you can reimplement valueForTime(), in
            which case QTimeLine's curveShape property is ignored.</para>
            <para></para>
            <para>See also QProgressBar and QProgressDialog.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTimeLine.#ctor(System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a timeline with a duration of duration milliseconds.
            parent is passed to QObject's constructor. The default duration is 1000
            milliseconds.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.SetFrameRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the timeline's frame counter to start at startFrame, and end
            and endFrame. For each time value, QTimeLine will find the corresponding
            frame when you call currentFrame() or frameForTime() by interpolating,
            using the return value of valueForTime().</para>
            <para>When in Running state, QTimeLine also emits the frameChanged()
            signal when the frame changes.</para>
            <para>See also startFrame(), endFrame(), start(), and
            currentFrame().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.FrameForTime(System.Int32)">
            <summary>
            <para>Returns the frame corresponding to the time msec. This value is
            calculated using a linear interpolation of the start and end frame, based
            on the value returned by valueForTime().</para>
            <para>See also valueForTime() and setFrameRange().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.ValueForTime(System.Int32)">
            <summary>
            <para>Returns the timeline value for the time msec. The returned value,
            which varies depending on the curve shape, is always between 0 and 1. If
            msec is 0, the default implementation always returns 0.</para>
            <para>Reimplement this function to provide a custom curve shape for
            your timeline.</para>
            <para>See also CurveShape and frameForTime().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.Start">
            <summary>
            <para>Starts the timeline. QTimeLine will enter Running state, and once
            it enters the event loop, it will update its current time, frame and value
            at regular intervals. The default interval is 40 ms (i.e., 25 times per
            second). You can change the update interval by calling
            setUpdateInterval().</para>
            <para>The timeline will start from position 0, or the end if going
            backward. If you want to resume a stopped timeline without restarting, you
            can call resume() instead.</para>
            <para>See also resume(), updateInterval(), frameChanged(), and
            valueChanged().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.Resume">
            <summary>
            <para>Resumes the timeline from the current time. QTimeLine will
            reenter Running state, and once it enters the event loop, it will update
            its current time, frame and value at regular intervals.</para>
            <para>In contrast to start(), this function does not restart the
            timeline before it resumes.</para>
            <para>See also start(), updateInterval(), frameChanged(), and
            valueChanged().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.Stop">
            <summary>
            <para>Stops the timeline, causing QTimeLine to enter NotRunning
            state.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.SetPaused(System.Boolean)">
            <summary>
            <para>If paused is true, the timeline is paused, causing QTimeLine to
            enter Paused state. No updates will be signaled until either start() or
            setPaused(false) is called. If paused is false, the timeline is resumed and
            continues where it left.</para>
            <para>See also state() and start().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.ToggleDirection">
            <summary>
            <para>Toggles the direction of the timeline. If the direction was
            Forward, it becomes Backward, and vice verca.</para>
            <para>See also setDirection().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.OnTimerEvent(QtCore.QTimerEvent)">
            <summary>
            <para>Reimplemented from QObject::timerEvent().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeLine.TrUtf8(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a translated version of sourceText, or
            QString::fromUtf8(sourceText) if there is no appropriate version. It is
            otherwise identical to tr(sourceText, disambiguation, n).</para>
            <para>Warning: This method is reentrant only if all translators are
            installed before calling this method. Installing or removing translators
            while performing translations is not supported. Doing so will probably
            result in crashes or other undesirable behavior.</para>
            <para>Warning: For portability reasons, we recommend that you use
            escape sequences for specifying non-ASCII characters in string literals to
            trUtf8(). For example:</para>
            <para>label-&gt;setText(tr(&quot;F\374r \310lise&quot;));</para>
            <para>See also tr(), QCoreApplication::translate(), and
            Internationalization with Qt.</para>
            </summary>
        </member>
        <member name="E:QtCore.QTimeLine.ValueChanged">
            <summary>
            <para>QTimeLine emits this signal at regular intervals when in Running state, but only if the current value changes. value is the current value. value is a number between 0.0 and 1.0</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QTimeLine::setDuration(), QTimeLine::valueForTime(), and QTimeLine::updateInterval.</para>
            </summary>
        </member>
        <member name="E:QtCore.QTimeLine.FrameChanged">
            <summary>
            <para>QTimeLine emits this signal at regular intervals when in Running state, but only if the current frame changes. frame is the current frame number.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            <para>See also QTimeLine::setFrameRange() and QTimeLine::updateInterval.</para>
            </summary>
        </member>
        <member name="E:QtCore.QTimeLine.StateChanged">
            <summary>
            <para>This signal is emitted whenever QTimeLine's state changes. The new state is newState.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="E:QtCore.QTimeLine.Finished">
            <summary>
            <para>This signal is emitted when QTimeLine finishes (i.e., reaches the end of its time line), and does not loop.</para>
            <para>Note: This is a private signal. It can be used in signal connections but cannot be emitted by the user.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.LoopCount">
            <summary>
            <para>This property holds the number of times the timeline should loop
            before it's finished.</para>
            <para>A loop count of of 0 means that the timeline will loop
            forever.</para>
            <para>By default, this property contains a value of 1.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.direction">
            <summary>
            <para>This property holds the direction of the timeline when QTimeLine
            is in Running state.</para>
            <para>This direction indicates whether the time moves from 0 towards
            the timeline duration, or from the value of the duration and towards 0
            after start() has been called.</para>
            <para>By default, this property is set to Forward.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.Duration">
            <summary>
            <para>This property holds the total duration of the timeline in
            milliseconds.</para>
            <para>By default, this value is 1000 (i.e., 1 second), but you can
            change this by either passing a duration to QTimeLine's constructor, or by
            calling setDuration(). The duration must be larger than 0.</para>
            <para>Note: Changing the duration does not cause the current time to be
            reset to zero or the new duration. You also need to call setCurrentTime()
            with the desired value.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.StartFrame">
            <summary>
            <para>Returns the start frame, which is the frame corresponding to the
            start of the timeline (i.e., the frame for which the current value is
            0).</para>
            <para>See also setStartFrame() and setFrameRange().</para>
            <para></para>
            <para>Sets the start frame, which is the frame corresponding to the
            start of the timeline (i.e., the frame for which the current value is 0),
            to frame.</para>
            <para>See also startFrame(), endFrame(), and setFrameRange().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.EndFrame">
            <summary>
            <para>Returns the end frame, which is the frame corresponding to the
            end of the timeline (i.e., the frame for which the current value is
            1).</para>
            <para>See also setEndFrame() and setFrameRange().</para>
            <para></para>
            <para>Sets the end frame, which is the frame corresponding to the end
            of the timeline (i.e., the frame for which the current value is 1), to
            frame.</para>
            <para>See also endFrame(), startFrame(), and setFrameRange().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.UpdateInterval">
            <summary>
            <para>This property holds the time in milliseconds between each time
            QTimeLine updates its current time.</para>
            <para>When updating the current time, QTimeLine will emit
            valueChanged() if the current value changed, and frameChanged() if the
            frame changed.</para>
            <para>By default, the interval is 40 ms, which corresponds to a rate of
            25 updates per second.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.curveShape">
            <summary>
            <para>This property holds the shape of the timeline curve.</para>
            <para>The curve shape describes the relation between the time and value
            for the base implementation of valueForTime().</para>
            <para>If you have reimplemented valueForTime(), this value is
            ignored.</para>
            <para>By default, this property is set to EaseInOutCurve.</para>
            <para>See also valueForTime().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.EasingCurve">
            <summary>
            <para>Specifies the easing curve that the timeline will use. If both
            easing curve and curveShape are set, the last set property will override
            the previous one. (If valueForTime() is reimplemented it will override
            both)</para>
            <para>This property was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.CurrentTime">
            <summary>
            <para>This property holds the current time of the time line.</para>
            <para>When QTimeLine is in Running state, this value is updated
            continuously as a function of the duration and direction of the timeline.
            Otherwise, it is value that was current when stop() was called last, or the
            value set by setCurrentTime().</para>
            <para>By default, this property contains a value of 0.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.state">
            <summary>
            <para>Returns the state of the timeline.</para>
            <para>See also start(), setPaused(), and stop().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.CurrentFrame">
            <summary>
            <para>Returns the frame corresponding to the current time.</para>
            <para>See also currentTime(), frameForTime(), and
            setFrameRange().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeLine.CurrentValue">
            <summary>
            <para>Returns the value corresponding to the current time.</para>
            <para>See also valueForTime() and currentFrame().</para>
            </summary>
        </member>
        <member name="T:QtCore.QTimeLine.State">
            <summary>
            <para>This enum describes the state of the timeline.</para>
            <para>See also state() and stateChanged().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTimeLine.State.NotRunning">
            <summary>The timeline is not running. This is the initial state of QTimeLine, and the state QTimeLine reenters when finished. The current time, frame and value remain unchanged until either setCurrentTime() is called, or the timeline is started by calling start().</summary>
        </member>
        <member name="F:QtCore.QTimeLine.State.Paused">
            <summary>The timeline is paused (i.e., temporarily suspended). Calling setPaused(false) will resume timeline activity.</summary>
        </member>
        <member name="F:QtCore.QTimeLine.State.Running">
            <summary>The timeline is running. While control is in the event loop, QTimeLine will update its current time at regular intervals, emitting valueChanged() and frameChanged() when appropriate.</summary>
        </member>
        <member name="T:QtCore.QTimeLine.Direction">
            <summary>
            <para>This enum describes the direction of the timeline when in Running
            state.</para>
            <para>See also setDirection().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTimeLine.Direction.Forward">
            <summary>The current time of the timeline increases with time (i.e., moves from 0 and towards the end / duration).</summary>
        </member>
        <member name="F:QtCore.QTimeLine.Direction.Backward">
            <summary>The current time of the timeline decreases with time (i.e., moves from the end / duration and towards 0).</summary>
        </member>
        <member name="T:QtCore.QTimeLine.CurveShape">
            <summary>
            <para>This enum describes the default shape of QTimeLine's value curve.
            The default, shape is EaseInOutCurve. The curve defines the relation
            between the value and the timeline.</para>
            <para>See also setCurveShape().</para>
            </summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.EaseInCurve">
            <summary>The value starts growing slowly, then increases in speed.</summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.EaseOutCurve">
            <summary>The value starts growing steadily, then ends slowly.</summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.EaseInOutCurve">
            <summary>The value starts growing slowly, then runs steadily, then grows slowly again.</summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.LinearCurve">
            <summary>The value grows linearly (e.g., if the duration is 1000 ms, the value at time 500 ms is 0.5).</summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.SineCurve">
            <summary>The value grows sinusoidally.</summary>
        </member>
        <member name="F:QtCore.QTimeLine.CurveShape.CosineCurve">
            <summary>The value grows cosinusoidally.</summary>
        </member>
        <member name="T:QtCore.QTimeZone">
            <summary>
            <para>The QTimeZone class converts between between UTC and local time
            in a specific time zone.</para>
            </summary>
            <remarks>
            <para>This class provides a stateless calculator for time zone
            conversions between UTC and the local time in a specific time zone. By
            default it uses the host system time zone data to perform these
            conversions.</para>
            <para>This class is primarily designed for use in QDateTime; most
            applications will not need to access this class directly and should instead
            use QDateTime with a Qt::TimeSpec of Qt::TimeZone.</para>
            <para>Note: For consistency with QDateTime, QTimeZone does not account
            for leap seconds.</para>
            <para></para>
            <para></para>
            <para>IANA Time Zone IDs</para>
            <para>QTimeZone uses the IANA time zone IDs as defined in the IANA Time
            Zone Database (http://www.iana.org/time-zones). This is to ensure a
            standard ID across all supported platforms. Most platforms support the IANA
            IDs and the IANA Database natively, but for Windows a mapping is required
            to the native IDs. See below for more details.</para>
            <para>The IANA IDs can and do change on a regular basis, and can vary
            depending on how recently the host system data was updated. As such you
            cannot rely on any given ID existing on any host system. You must use
            availableTimeZoneIds() to determine what IANA IDs are available.</para>
            <para>The IANA IDs and database are also know as the Olson IDs and
            database, named after their creator.</para>
            <para></para>
            <para>UTC Offset Time Zones</para>
            <para>A default UTC time zone backend is provided which is always
            guaranteed to be available. This provides a set of generic Offset From UTC
            time zones in the range UTC-14:00 to UTC+14:00. These time zones can be
            created using either the standard ISO format names &quot;UTC+00:00&quot; as
            listed by availableTimeZoneIds(), or using the number of offset
            seconds.</para>
            <para></para>
            <para>Windows Time Zones</para>
            <para>Windows native time zone support is severely limited compared to
            the standard IANA TZ Database. Windows time zones cover larger geographic
            areas and are thus less accurate in their conversions. They also do not
            support as much historic conversion data and so may only be accurate for
            the current year.</para>
            <para>QTimeZone uses a conversion table derived form the Unicode CLDR
            data to map between IANA IDs and Windows IDs. Depending on your version of
            Windows and Qt, this table may not be able to provide a valid conversion,
            in which &quot;UTC&quot; will be returned.</para>
            <para>QTimeZone provides a public API to use this conversion table. The
            Windows ID used is the Windows Registry Key for the time zone which is also
            the MS Exchange EWS ID as well, but is different to the Time Zone Name
            (TZID) and COD code used by MS Exchange in versions before 2007.</para>
            <para></para>
            <para>System Time Zone</para>
            <para>QTimeZone does not support any concept of a system or default
            time zone. If you require a QDateTime that uses the current system time
            zone at any given moment then you should use a Qt::TimeSpec of
            Qt::LocalTime.</para>
            <para>The method systemTimeZoneId() returns the current system IANA
            time zone ID which on Unix-like systems will always be correct. On Windows
            this ID is translated from the Windows system ID using an internal
            translation table and the user's selected country. As a consequence there
            is a small chance any Windows install may have IDs not known by Qt, in
            which case &quot;UTC&quot; will be returned.</para>
            <para>Creating a new QTimeZone instance using the system time zone ID
            will only produce a fixed named copy of the time zone, it will not change
            if the system time zone changes.</para>
            <para></para>
            <para>Time Zone Offsets</para>
            <para>The difference between UTC and the local time in a time zone is
            expressed as an offset in seconds from UTC, i.e. the number of seconds to
            add to UTC to obtain the local time. The total offset is comprised of two
            component parts, the standard time offset and the daylight time offset. The
            standard time offset is the number of seconds to add to UTC to obtain
            standard time in the time zone. The daylight time offset is the number of
            seconds to add to the standard time offset to obtain daylight time in the
            time zone.</para>
            <para>Note that the standard and daylight offsets for a time zone may
            change over time as countries have changed daylight time laws or even their
            standard time offset.</para>
            <para></para>
            <para>License</para>
            <para>This class includes data obtained from the CLDR data files under
            the terms of the Unicode license.</para>
            <para>COPYRIGHT AND PERMISSION NOTICE</para>
            <para>Copyright &#169; 1991-2012 Unicode, Inc. All rights reserved.
            Distributed under the Terms of Use in
            http://www.unicode.org/copyright.html.</para>
            <para>Permission is hereby granted, free of charge, to any person
            obtaining a copy of the Unicode data files and any associated documentation
            (the &quot;Data Files&quot;) or Unicode software and any associated
            documentation (the &quot;Software&quot;) to deal in the Data Files or
            Software without restriction, including without limitation the rights to
            use, copy, modify, merge, publish, distribute, and/or sell copies of the
            Data Files or Software, and to permit persons to whom the Data Files or
            Software are furnished to do so, provided that (a) the above copyright
            notice(s) and this permission notice appear with all copies of the Data
            Files or Software, (b) both the above copyright notice(s) and this
            permission notice appear in associated documentation, and (c) there is
            clear notice in each modified Data File or in the Software as well as in
            the documentation associated with the Data File(s) or Software that the
            data or software has been modified.</para>
            <para></para>
            <para></para>
            <para>See also QDateTime.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QTimeZone.#ctor">
            <summary>
            <para>Create a null/invalid time zone instance.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Creates an instance of the requested time zone ianaId.</para>
            <para>The ID must be one of the available system IDs otherwise an
            invalid time zone will be returned.</para>
            <para>See also availableTimeZoneIds().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.#ctor(System.Int32)">
            <summary>
            <para>Creates an instance of a time zone with the requested Offset from
            UTC of offsetSeconds.</para>
            <para>The offsetSeconds from UTC must be in the range -14 hours to +14
            hours otherwise an invalid time zone will be returned.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.#ctor(QtCore.QByteArray,System.Int32,System.String,System.String,QtCore.QLocale.Country,System.String)">
            <summary>
            <para>Creates a custom time zone with an ID of ianaId and an offset
            from UTC of offsetSeconds. The name will be the name used by displayName()
            for the LongName, the abbreviation will be used by displayName() for the
            ShortName and by abbreviation(), and the optional country will be used by
            country(). The comment is an optional note that may be displayed in a GUI
            to assist users in selecting a time zone.</para>
            <para>The ianaId must not be one of the available system IDs returned
            by availableTimeZoneIds(). The offsetSeconds from UTC must be in the range
            -14 hours to +14 hours.</para>
            <para>If the custom time zone does not have a specific country then set
            it to the default value of QLocale::AnyCountry.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.#ctor(QtCore.QTimeZone)">
            <summary>
            <para>Copy constructor, copy other to this.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.Swap(QtCore.QTimeZone)">
            <summary>
            <para>Swaps this time zone instance with other. This function is very
            fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.op_Equality(QtCore.QTimeZone,QtCore.QTimeZone)">
            <summary>
            <para>Returns true if this time zone is equal to the other time
            zone.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.op_Inequality(QtCore.QTimeZone,QtCore.QTimeZone)">
            <summary>
            <para>Returns true if this time zone is not equal to the other time
            zone.</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.DisplayName(QtCore.QDateTime,QtCore.QTimeZone.NameType,QtCore.QLocale)">
            <summary>
            <para>Returns the localized time zone display name at the given
            atDateTime for the given nameType in the given locale. The nameType and
            locale requested may not be supported on all platforms, in which case the
            best available option will be returned.</para>
            <para>If the locale is not provided then the application default locale
            will be used.</para>
            <para>The display name may change depending on daylight time or
            historical events.</para>
            <para>See also abbreviation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.DisplayName(QtCore.QTimeZone.TimeType,QtCore.QTimeZone.NameType,QtCore.QLocale)">
            <summary>
            <para>Returns the localized time zone display name for the given
            timeType and nameType in the given locale. The nameType and locale
            requested may not be supported on all platforms, in which case the best
            available option will be returned.</para>
            <para>If the locale is not provided then the application default locale
            will be used.</para>
            <para>Where the time zone display names have changed over time then the
            most recent names will be used.</para>
            <para>See also abbreviation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.Abbreviation(QtCore.QDateTime)">
            <summary>
            <para>Returns the time zone abbreviation at the given atDateTime. The
            abbreviation may change depending on daylight time or even historical
            events.</para>
            <para>Note that the abbreviation is not guaranteed to be unique to this
            time zone and should not be used in place of the ID or display name.</para>
            <para>See also displayName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.OffsetFromUtc(QtCore.QDateTime)">
            <summary>
            <para>Returns the total effective offset at the given atDateTime, i.e.
            the number of seconds to add to UTC to obtain the local time. This includes
            any daylight time offset that may be in effect, i.e. it is the sum of
            standardTimeOffset() and daylightTimeOffset() for the given
            datetime.</para>
            <para>For example, for the time zone &quot;Europe/Berlin&quot; the
            standard time offset is +3600 seconds and the daylight time offset is +3600
            seconds. During standard time offsetFromUtc() will return +3600
            (UTC+01:00), and during daylight time it will return +7200
            (UTC+02:00).</para>
            <para>See also standardTimeOffset() and daylightTimeOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.StandardTimeOffset(QtCore.QDateTime)">
            <summary>
            <para>Returns the standard time offset at the given atDateTime, i.e.
            the number of seconds to add to UTC to obtain the local Standard Time. This
            excludes any daylight time offset that may be in effect.</para>
            <para>For example, for the time zone &quot;Europe/Berlin&quot; the
            standard time offset is +3600 seconds. During both standard and daylight
            time offsetFromUtc() will return +3600 (UTC+01:00).</para>
            <para>See also offsetFromUtc() and daylightTimeOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.DaylightTimeOffset(QtCore.QDateTime)">
            <summary>
            <para>Returns the daylight time offset at the given atDateTime, i.e.
            the number of seconds to add to the standard time offset to obtain the
            local daylight time.</para>
            <para>For example, for the time zone &quot;Europe/Berlin&quot; the
            daylight time offset is +3600 seconds. During standard time
            daylightTimeOffset() will return 0, and during daylight time it will return
            +3600.</para>
            <para>See also offsetFromUtc() and standardTimeOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.IsDaylightTime(QtCore.QDateTime)">
            <summary>
            <para>Returns true if the given atDateTime is in daylight time.</para>
            <para>See also hasDaylightTime() and daylightTimeOffset().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.offsetData(QtCore.QDateTime)">
            <summary>
            <para>Returns the effective offset details at the given forDateTime.
            This is the equivalent of calling offsetFromUtc(), abbreviation(), etc
            individually but is more efficient.</para>
            <para>See also offsetFromUtc(), standardTimeOffset(),
            daylightTimeOffset(), and abbreviation().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.NextTransition(QtCore.QDateTime)">
            <summary>
            <para>Returns the first time zone Transition after the given
            afterDateTime. This is most useful when you have a Transition time and wish
            to find the Transition after it.</para>
            <para>If there is no transition after the given afterDateTime then an
            invalid OffsetData will be returned with an invalid QDateTime.</para>
            <para>The given afterDateTime is exclusive.</para>
            <para>See also hasTransitions(), previousTransition(), and
            transitions().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.PreviousTransition(QtCore.QDateTime)">
            <summary>
            <para>Returns the first time zone Transition before the given
            beforeDateTime. This is most useful when you have a Transition time and
            wish to find the Transition before it.</para>
            <para>If there is no transition before the given beforeDateTime then an
            invalid OffsetData will be returned with an invalid QDateTime.</para>
            <para>The given beforeDateTime is exclusive.</para>
            <para>See also hasTransitions(), nextTransition(), and
            transitions().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.IsTimeZoneIdAvailable(QtCore.QByteArray)">
            <summary>
            <para>Returns true if a given time zone ianaId is available on this
            system.</para>
            <para>See also availableTimeZoneIds().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.IanaIdToWindowsId(QtCore.QByteArray)">
            <summary>
            <para>Returns the Windows ID equivalent to the given ianaId.</para>
            <para>See also windowsIdToDefaultIanaId() and
            windowsIdToIanaIds().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.WindowsIdToDefaultIanaId(QtCore.QByteArray)">
            <summary>
            <para>Returns the default IANA ID for a given windowsId.</para>
            <para>Because a Windows ID can cover several IANA IDs in several
            different countries, this function returns the most frequently used IANA ID
            with no regard for the country and should thus be used with care. It is
            usually best to request the default for a specific country.</para>
            <para>See also ianaIdToWindowsId() and windowsIdToIanaIds().</para>
            </summary>
        </member>
        <member name="M:QtCore.QTimeZone.WindowsIdToDefaultIanaId(QtCore.QByteArray,QtCore.QLocale.Country)">
            <summary>
            <para>Returns the default IANA ID for a given windowsId and
            country.</para>
            <para>Because a Windows ID can cover several IANA IDs within a given
            country, the most frequently used IANA ID in that country is
            returned.</para>
            <para>As a special case, QLocale::AnyCountry returns the default of
            those IANA IDs that do not have any specific country.</para>
            <para>See also ianaIdToWindowsId() and windowsIdToIanaIds().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.IsValid">
            <summary>
            <para>Returns true if this time zone is valid.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.Id">
            <summary>
            <para>Returns the IANA ID for the time zone.</para>
            <para>IANA IDs are used on all platforms. On Windows these are
            translated from the Windows ID into the closest IANA ID for the time zone
            and country.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.Country">
            <summary>
            <para>Returns the country for the time zone.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.Comment">
            <summary>
            <para>Returns any comment for the time zone.</para>
            <para>A comment may be provided by the host platform to assist users in
            choosing the correct time zone. Depending on the platform this may not be
            localized.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.HasDaylightTime">
            <summary>
            <para>Returns true if the time zone has observed daylight time at any
            time.</para>
            <para>See also isDaylightTime() and daylightTimeOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.HasTransitions">
            <summary>
            <para>Returns true if the system backend supports obtaining
            transitions.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.SystemTimeZoneId">
            <summary>
            <para>Returns the current system time zone IANA ID.</para>
            <para>On Windows this ID is translated from the Windows ID using an
            internal translation table and the user's selected country. As a
            consequence there is a small chance any Windows install may have IDs not
            known by Qt, in which case &quot;UTC&quot; will be returned.</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.SystemTimeZone">
            <summary>
            <para>Returns a QTimeZone object that refers to the local system time,
            as specified by systemTimeZoneId().</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also utc().</para>
            </summary>
        </member>
        <member name="P:QtCore.QTimeZone.Utc">
            <summary>
            <para>Returns a QTimeZone object that refers to UTC (Universal Time
            Coordinated).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also systemTimeZone().</para>
            </summary>
        </member>
        <member name="T:QtCore.QTimeZone.TimeType">
            <summary>
            <para>The type of time zone time, for example when requesting the name.
            In time zones that do not apply daylight time, all three values may return
            the same result.</para>
            </summary>
        </member>
        <member name="F:QtCore.QTimeZone.TimeType.StandardTime">
            <summary>The standard time in a time zone, i.e. when Daylight Savings is not in effect. For example when formatting a display name this will show something like "Pacific Standard Time".</summary>
        </member>
        <member name="F:QtCore.QTimeZone.TimeType.DaylightTime">
            <summary>A time when Daylight Savings is in effect. For example when formatting a display name this will show something like "Pacific daylight time".</summary>
        </member>
        <member name="F:QtCore.QTimeZone.TimeType.GenericTime">
            <summary>A time which is not specifically Standard or Daylight time, either an unknown time or a neutral form. For example when formatting a display name this will show something like "Pacific Time".</summary>
        </member>
        <member name="T:QtCore.QTimeZone.NameType">
            <summary>
            <para>The type of time zone name.</para>
            </summary>
        </member>
        <member name="F:QtCore.QTimeZone.NameType.DefaultName">
            <summary>The default form of the time zone name, e.g. LongName, ShortName or OffsetName</summary>
        </member>
        <member name="F:QtCore.QTimeZone.NameType.LongName">
            <summary>The long form of the time zone name, e.g. "Central European Time"</summary>
        </member>
        <member name="F:QtCore.QTimeZone.NameType.ShortName">
            <summary>The short form of the time zone name, usually an abbreviation, e.g. "CET"</summary>
        </member>
        <member name="F:QtCore.QTimeZone.NameType.OffsetName">
            <summary>The standard ISO offset form of the time zone name, e.g. "UTC+01:00"</summary>
        </member>
        <member name="T:QtCore.QTimeZone.OffsetData">
            <summary>
            <para>The time zone offset data for a given moment in time, i.e. the
            time zone offsets and abbreviation to use at that moment in time.</para>
            </summary>
            <remarks>
            <para></para>
            <para>OffsetData::atUtc The datetime of the offset data in UTC
            time.</para>
            <para>OffsetData::offsetFromUtc The total offset from UTC in effect at
            the datetime.</para>
            <para>OffsetData::standardTimeOffset The standard time offset component
            of the total offset.</para>
            <para>OffsetData::daylightTimeOffset The daylight time offset component
            of the total offset.</para>
            <para>OffsetData::abbreviation The abbreviation in effect at the
            datetime.</para>
            <para></para>
            <para>For example, for time zone &quot;Europe/Berlin&quot; the
            OffsetDate in standard and daylight time might be:</para>
            <para></para>
            <para>atUtc = QDateTime(QDate(2013, 1, 1), QTime(0, 0, 0),
            Qt::UTC)</para>
            <para>offsetFromUtc = 3600</para>
            <para>standardTimeOffset = 3600</para>
            <para>daylightTimeOffset = 0</para>
            <para>abbreviation = &quot;CET&quot;</para>
            <para></para>
            <para></para>
            <para>atUtc = QDateTime(QDate(2013, 6, 1), QTime(0, 0, 0),
            Qt::UTC)</para>
            <para>offsetFromUtc = 7200</para>
            <para>standardTimeOffset = 3600</para>
            <para>daylightTimeOffset = 3600</para>
            <para>abbreviation = &quot;CEST&quot;</para>
            <para></para>
            </remarks>
        </member>
        <member name="T:QtCore.QXmlStreamAttribute">
            <summary>
            <para>The QXmlStreamAttribute class represents a single XML
            attribute</para>
            </summary>
            <remarks>
            <para>An attribute consists of an optionally empty namespaceUri(), a
            name(), a value(), and an isDefault() attribute.</para>
            <para>The raw XML attribute name is returned as qualifiedName().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.#ctor">
            <summary>
            <para>Creates an empty attribute.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.#ctor(System.String,System.String)">
            <summary>
            <para>Constructs an attribute with qualified name qualifiedName and
            value value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>Constructs an attribute in the namespace described with
            namespaceUri with name and value value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.#ctor(QtCore.QXmlStreamAttribute)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.op_Equality(QtCore.QXmlStreamAttribute,QtCore.QXmlStreamAttribute)">
            <summary>
            <para>Compares this attribute with other and returns true if they are
            equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttribute.op_Inequality(QtCore.QXmlStreamAttribute,QtCore.QXmlStreamAttribute)">
            <summary>
            <para>Compares this attribute with other and returns true if they are
            not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.NamespaceUri">
            <summary>
            <para>Returns the attribute's resolved namespaceUri, or an empty string
            reference if the attribute does not have a defined namespace.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.Name">
            <summary>
            <para>Returns the attribute's local name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.QualifiedName">
            <summary>
            <para>Returns the attribute's qualified name.</para>
            <para>A qualified name is the raw name of an attribute in the XML data.
            It consists of the namespace prefix(), followed by colon, followed by the
            attribute's local name(). Since the namespace prefix is not unique (the
            same prefix can point to different namespaces and different prefixes can
            point to the same namespace), you shouldn't use qualifiedName(), but the
            resolved namespaceUri() and the attribute's local name().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.Prefix">
            <summary>
            <para>Returns the attribute's namespace prefix.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also name() and qualifiedName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.Value">
            <summary>
            <para>Returns the attribute's value.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamAttribute.IsDefault">
            <summary>
            <para>Returns true if the parser added this attribute with a default
            value following an ATTLIST declaration in the DTD; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamAttributes">
            <summary>
            <para>The QXmlStreamAttributes class represents a vector of
            QXmlStreamAttribute.</para>
            </summary>
            <remarks>
            <para>Attributes are returned by a QXmlStreamReader in attributes()
            when the reader reports a start element. The class can also be used with a
            QXmlStreamWriter as an argument to writeAttributes().</para>
            <para>The convenience function value() loops over the vector and
            returns an attribute value for a given namespaceUri and an attribute's
            name.</para>
            <para>New attributes can be added with append().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Value(System.String,System.String)">
            <summary>
            <para>Returns the value of the attribute name in the namespace
            described with namespaceUri, or an empty string reference if the attribute
            is not defined. The namespaceUri can be empty.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Value(System.String,QtCore.QLatin1String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the value of the attribute name in the namespace
            described with namespaceUri, or an empty string reference if the attribute
            is not defined. The namespaceUri can be empty.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Value(QtCore.QLatin1String,QtCore.QLatin1String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the value of the attribute name in the namespace
            described with namespaceUri, or an empty string reference if the attribute
            is not defined. The namespaceUri can be empty.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Value(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the value of the attribute with qualified name
            qualifiedName , or an empty string reference if the attribute is not
            defined. A qualified name is the raw name of an attribute in the XML data.
            It consists of the namespace prefix, followed by colon, followed by the
            attribute's local name. Since the namespace prefix is not unique (the same
            prefix can point to different namespaces and different prefixes can point
            to the same namespace), you shouldn't use qualified names, but a resolved
            namespaceUri and the attribute's local name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Value(QtCore.QLatin1String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the value of the attribute with qualified name
            qualifiedName , or an empty string reference if the attribute is not
            defined. A qualified name is the raw name of an attribute in the XML data.
            It consists of the namespace prefix, followed by colon, followed by the
            attribute's local name. Since the namespace prefix is not unique (the same
            prefix can point to different namespaces and different prefixes can point
            to the same namespace), you shouldn't use qualified names, but a resolved
            namespaceUri and the attribute's local name.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Append(System.String,System.String,System.String)">
            <summary>
            <para>Appends a new attribute with name in the namespace described with
            namespaceUri, and value value. The namespaceUri can be empty.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.Append(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends a new attribute with qualified name qualifiedName and
            value value.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.HasAttribute(System.String)">
            <summary>
            <para>Returns true if this QXmlStreamAttributes has an attribute whose
            qualified name is qualifiedName; otherwise returns false.</para>
            <para>Note that this is not namespace aware. For instance, if this
            QXmlStreamAttributes contains an attribute whose lexical name is
            &quot;xlink:href&quot; this doesn't tell that an attribute named href in
            the XLink namespace is present, since the xlink prefix can be bound to any
            namespace. Use the overload that takes a namespace URI and a local name as
            parameter, for namespace aware code.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.HasAttribute(QtCore.QLatin1String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamAttributes.HasAttribute(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if this QXmlStreamAttributes has an attribute whose
            namespace URI and name correspond to namespaceUri and name; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamNamespaceDeclaration">
            <summary>
            <para>The QXmlStreamNamespaceDeclaration class represents a namespace
            declaration.</para>
            </summary>
            <remarks>
            <para>An namespace declaration consists of a prefix() and a
            namespaceUri().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamNamespaceDeclaration.#ctor">
            <summary>
            <para>Creates an empty namespace declaration.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNamespaceDeclaration.#ctor(QtCore.QXmlStreamNamespaceDeclaration)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNamespaceDeclaration.#ctor(System.String,System.String)">
            <summary>
            <para>Creates a namespace declaration with prefix and
            namespaceUri.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNamespaceDeclaration.op_Equality(QtCore.QXmlStreamNamespaceDeclaration,QtCore.QXmlStreamNamespaceDeclaration)">
            <summary>
            <para>Compares this namespace declaration with other and returns true
            if they are equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNamespaceDeclaration.op_Inequality(QtCore.QXmlStreamNamespaceDeclaration,QtCore.QXmlStreamNamespaceDeclaration)">
            <summary>
            <para>Compares this namespace declaration with other and returns true
            if they are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamNamespaceDeclaration.Prefix">
            <summary>
            <para>Returns the prefix.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamNamespaceDeclaration.NamespaceUri">
            <summary>
            <para>Returns the namespaceUri.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamNotationDeclaration">
            <summary>
            <para>The QXmlStreamNotationDeclaration class represents a DTD notation
            declaration.</para>
            </summary>
            <remarks>
            <para>An notation declaration consists of a name(), a systemId(), and a
            publicId().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamNotationDeclaration.#ctor">
            <summary>
            <para>Creates an empty notation declaration.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNotationDeclaration.#ctor(QtCore.QXmlStreamNotationDeclaration)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNotationDeclaration.op_Equality(QtCore.QXmlStreamNotationDeclaration,QtCore.QXmlStreamNotationDeclaration)">
            <summary>
            <para>Compares this notation declaration with other and returns true if
            they are equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamNotationDeclaration.op_Inequality(QtCore.QXmlStreamNotationDeclaration,QtCore.QXmlStreamNotationDeclaration)">
            <summary>
            <para>Compares this notation declaration with other and returns true if
            they are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamNotationDeclaration.Name">
            <summary>
            <para>Returns the notation name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamNotationDeclaration.SystemId">
            <summary>
            <para>Returns the system identifier.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamNotationDeclaration.PublicId">
            <summary>
            <para>Returns the public identifier.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamEntityDeclaration">
            <summary>
            <para>The QXmlStreamEntityDeclaration class represents a DTD entity
            declaration.</para>
            </summary>
            <remarks>
            <para>An entity declaration consists of a name(), a notationName(), a
            systemId(), a publicId(), and a value().</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamEntityDeclaration.#ctor">
            <summary>
            <para>Creates an empty entity declaration.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamEntityDeclaration.#ctor(QtCore.QXmlStreamEntityDeclaration)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamEntityDeclaration.op_Equality(QtCore.QXmlStreamEntityDeclaration,QtCore.QXmlStreamEntityDeclaration)">
            <summary>
            <para>Compares this entity declaration with other and returns true if
            they are equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamEntityDeclaration.op_Inequality(QtCore.QXmlStreamEntityDeclaration,QtCore.QXmlStreamEntityDeclaration)">
            <summary>
            <para>Compares this entity declaration with other and returns true if
            they are not equal; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamEntityDeclaration.Name">
            <summary>
            <para>Returns the entity name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamEntityDeclaration.NotationName">
            <summary>
            <para>Returns the notation name.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamEntityDeclaration.SystemId">
            <summary>
            <para>Returns the system identifier.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamEntityDeclaration.PublicId">
            <summary>
            <para>Returns the public identifier.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamEntityDeclaration.Value">
            <summary>
            <para>Returns the entity's value.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamEntityResolver">
            <summary>
            <para>The QXmlStreamEntityResolver class provides an entity resolver
            for a QXmlStreamReader.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamEntityResolver.ResolveUndeclaredEntity(System.String)">
            <summary>
            <para>Resolves the undeclared entity name and returns its replacement
            text. If the entity is also unknown to the entity resolver, it returns an
            empty string.</para>
            <para>The default implementation always returns an empty string.</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamReader">
            <summary>
            <para>The QXmlStreamReader class provides a fast parser for reading
            well-formed XML via a simple streaming API.</para>
            </summary>
            <remarks>
            <para>QXmlStreamReader is a faster and more convenient replacement for
            Qt's own SAX parser (see QXmlSimpleReader). In some cases it might also be
            a faster and more convenient alternative for use in applications that would
            otherwise use a DOM tree (see QDomDocument). QXmlStreamReader reads data
            either from a QIODevice (see setDevice()), or from a raw QByteArray (see
            addData()).</para>
            <para>Qt provides QXmlStreamWriter for writing XML.</para>
            <para>The basic concept of a stream reader is to report an XML document
            as a stream of tokens, similar to SAX. The main difference between
            QXmlStreamReader and SAX is how these XML tokens are reported. With SAX,
            the application must provide handlers (callback functions) that receive
            so-called XML events from the parser at the parser's convenience. With
            QXmlStreamReader, the application code itself drives the loop and pulls
            tokens from the reader, one after another, as it needs them. This is done
            by calling readNext(), where the reader reads from the input stream until
            it completes the next token, at which point it returns the tokenType(). A
            set of convenient functions including isStartElement() and text() can then
            be used to examine the token to obtain information about what has been
            read. The big advantage of this pulling approach is the possibility to
            build recursive descent parsers with it, meaning you can split your XML
            parsing code easily into different methods or classes. This makes it easy
            to keep track of the application's own state when parsing XML.</para>
            <para>A typical loop with QXmlStreamReader looks like this:</para>
            <para>  QXmlStreamReader xml;</para>
            <para>  ...</para>
            <para>  while (!xml.atEnd()) {</para>
            <para>        xml.readNext();</para>
            <para>        ... // do processing</para>
            <para>  }</para>
            <para>  if (xml.hasError()) {</para>
            <para>        ... // do error handling</para>
            <para>  }</para>
            <para>QXmlStreamReader is a well-formed XML 1.0 parser that does not
            include external parsed entities. As long as no error occurs, the
            application code can thus be assured that the data provided by the stream
            reader satisfies the W3C's criteria for well-formed XML. For example, you
            can be certain that all tags are indeed nested and closed properly, that
            references to internal entities have been replaced with the correct
            replacement text, and that attributes have been normalized or added
            according to the internal subset of the DTD.</para>
            <para>If an error occurs while parsing, atEnd() and hasError() return
            true, and error() returns the error that occurred. The functions
            errorString(), lineNumber(), columnNumber(), and characterOffset() are for
            constructing an appropriate error or warning message. To simplify
            application code, QXmlStreamReader contains a raiseError() mechanism that
            lets you raise custom errors that trigger the same error handling
            described.</para>
            <para>The QXmlStream Bookmarks Example illustrates how to use the
            recursive descent technique to read an XML bookmark file (XBEL) with a
            stream reader.</para>
            <para></para>
            <para>Namespaces</para>
            <para>QXmlStream understands and resolves XML namespaces. E.g. in case
            of a StartElement, namespaceUri() returns the namespace the element is in,
            and name() returns the element's local name. The combination of
            namespaceUri and name uniquely identifies an element. If a namespace prefix
            was not declared in the XML entities parsed by the reader, the namespaceUri
            is empty.</para>
            <para>If you parse XML data that does not utilize namespaces according
            to the XML specification or doesn't use namespaces at all, you can use the
            element's qualifiedName() instead. A qualified name is the element's
            prefix() followed by colon followed by the element's local name() - exactly
            like the element appears in the raw XML data. Since the mapping
            namespaceUri to prefix is neither unique nor universal, qualifiedName()
            should be avoided for namespace-compliant XML data.</para>
            <para>In order to parse standalone documents that do use undeclared
            namespace prefixes, you can turn off namespace processing completely with
            the namespaceProcessing property.</para>
            <para></para>
            <para>Incremental Parsing</para>
            <para>QXmlStreamReader is an incremental parser. It can handle the case
            where the document can't be parsed all at once because it arrives in chunks
            (e.g. from multiple files, or over a network connection). When the reader
            runs out of data before the complete document has been parsed, it reports a
            PrematureEndOfDocumentError. When more data arrives, either because of a
            call to addData() or because more data is available through the network
            device(), the reader recovers from the PrematureEndOfDocumentError error
            and continues parsing the new data with the next call to readNext().</para>
            <para>For example, if your application reads data from the network
            using a network access manager, you would issue a network request to the
            manager and receive a network reply in return. Since a QNetworkReply is a
            QIODevice, you connect its readyRead() signal to a custom slot, e.g.
            slotReadyRead() in the code snippet shown in the discussion for
            QNetworkAccessManager. In this slot, you read all available data with
            readAll() and pass it to the XML stream reader using addData(). Then you
            call your custom parsing function that reads the XML events from the
            reader.</para>
            <para></para>
            <para>Performance and Memory Consumption</para>
            <para>QXmlStreamReader is memory-conservative by design, since it
            doesn't store the entire XML document tree in memory, but only the current
            token at the time it is reported. In addition, QXmlStreamReader avoids the
            many small string allocations that it normally takes to map an XML document
            to a convenient and Qt-ish API. It does this by reporting all string data
            as QStringRef rather than real QString objects. QStringRef is a thin
            wrapper around QString substrings that provides a subset of the QString API
            without the memory allocation and reference-counting overhead. Calling
            toString() on any of those objects returns an equivalent real QString
            object.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamReader.#ctor">
            <summary>
            <para>Constructs a stream reader.</para>
            <para>See also setDevice() and addData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Creates a new stream reader that reads from device.</para>
            <para>See also setDevice() and clear().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Creates a new stream reader that reads from data.</para>
            <para>See also addData(), clear(), and setDevice().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.#ctor(System.String)">
            <summary>
            <para>Creates a new stream reader that reads from data.</para>
            <para>See also addData(), clear(), and setDevice().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.AddData(QtCore.QByteArray)">
            <summary>
            <para>Adds more data for the reader to read. This function does nothing
            if the reader has a device().</para>
            <para>See also readNext() and clear().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.AddData(System.String)">
            <summary>
            <para>Adds more data for the reader to read. This function does nothing
            if the reader has a device().</para>
            <para>See also readNext() and clear().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.AddData1(System.String)">
            <summary>
            <para>Adds more data for the reader to read. This function does nothing
            if the reader has a device().</para>
            <para>See also readNext() and clear().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.Clear">
            <summary>
            <para>Removes any device() or data from the reader and resets its
            internal state to the initial state.</para>
            <para>See also addData().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.ReadNext">
            <summary>
            <para>Reads the next token and returns its type.</para>
            <para>With one exception, once an error() is reported by readNext(),
            further reading of the XML stream is not possible. Then atEnd() returns
            true, hasError() returns true, and this function returns
            QXmlStreamReader::Invalid.</para>
            <para>The exception is when error() returns
            PrematureEndOfDocumentError. This error is reported when the end of an
            otherwise well-formed chunk of XML is reached, but the chunk doesn't
            represent a complete XML document. In that case, parsing can be resumed by
            calling addData() to add the next chunk of XML, when the stream is being
            read from a QByteArray, or by waiting for more data to arrive when the
            stream is being read from a device().</para>
            <para>See also tokenType() and tokenString().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.ReadNextStartElement">
            <summary>
            <para>Reads until the next start element within the current element.
            Returns true when a start element was reached. When the end element was
            reached, or when an error occurred, false is returned.</para>
            <para>The current element is the element matching the most recently
            parsed start element of which a matching end element has not yet been
            reached. When the parser has reached the end element, the current element
            becomes the parent element.</para>
            <para>This is a convenience function for when you're only concerned
            with parsing XML elements. The QXmlStream Bookmarks Example makes extensive
            use of this function.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also readNext().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.SkipCurrentElement">
            <summary>
            <para>Reads until the end of the current element, skipping any child
            nodes. This function is useful for skipping unknown elements.</para>
            <para>The current element is the element matching the most recently
            parsed start element of which a matching end element has not yet been
            reached. When the parser has reached the end element, the current element
            becomes the parent element.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.ReadElementText(QtCore.QXmlStreamReader.ReadElementTextBehaviour)">
            <summary>
            <para>Convenience function to be called in case a StartElement was
            read. Reads until the corresponding EndElement and returns all text
            in-between. In case of no error, the current token (see tokenType()) after
            having called this function is EndElement.</para>
            <para>The function concatenates text() when it reads either Characters
            or EntityReference tokens, but skips ProcessingInstruction and Comment. If
            the current token is not StartElement, an empty string is returned.</para>
            <para>The behaviour defines what happens in case anything else is read
            before reaching EndElement. The function can include the text from child
            elements (useful for example for HTML), ignore child elements, or raise an
            UnexpectedElementError and return what was read so far (default).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.AddExtraNamespaceDeclaration(QtCore.QXmlStreamNamespaceDeclaration)">
            <summary>
            <para>Adds an extraNamespaceDeclaration. The declaration will be valid
            for children of the current element, or - should the function be called
            before any elements are read - for the entire XML document.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also namespaceDeclarations(),
            addExtraNamespaceDeclarations(), and setNamespaceProcessing().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamReader.RaiseError(System.String)">
            <summary>
            <para>Raises a custom error with an optional error message.</para>
            <para>See also error() and errorString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.Device">
            <summary>
            <para>Returns the current device associated with the QXmlStreamReader,
            or 0 if no device has been assigned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets the current device to device. Setting the device resets the
            stream to its initial state.</para>
            <para>See also device() and clear().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.NamespaceProcessing">
            <summary>
            <para>The namespace-processing flag of the stream reader</para>
            <para>This property controls whether or not the stream reader processes
            namespaces. If enabled, the reader processes namespaces, otherwise it does
            not.</para>
            <para>By default, namespace-processing is enabled.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.EntityResolver">
            <summary>
            <para>Returns the entity resolver, or 0 if there is no entity
            resolver.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setEntityResolver().</para>
            <para></para>
            <para>Makes resolver the new entityResolver().</para>
            <para>The stream reader does not take ownership of the resolver. It's
            the callers responsibility to ensure that the resolver is valid during the
            entire life-time of the stream reader object, or until another resolver or
            0 is set.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also entityResolver().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.AtEnd">
            <summary>
            <para>Returns true if the reader has read until the end of the XML
            document, or if an error() has occurred and reading has been aborted.
            Otherwise, it returns false.</para>
            <para>When atEnd() and hasError() return true and error() returns
            PrematureEndOfDocumentError, it means the XML has been well-formed so far,
            but a complete XML document has not been parsed. The next chunk of XML can
            be added with addData(), if the XML is being read from a QByteArray, or by
            waiting for more data to arrive if the XML is being read from a QIODevice.
            Either way, atEnd() will return false once more data is available.</para>
            <para>See also hasError(), error(), device(), and
            QIODevice::atEnd().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.tokenType">
            <summary>
            <para>Returns the type of the current token.</para>
            <para>The current token can also be queried with the convenience
            functions isStartDocument(), isEndDocument(), isStartElement(),
            isEndElement(), isCharacters(), isComment(), isDTD(), isEntityReference(),
            and isProcessingInstruction().</para>
            <para>See also tokenString().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.TokenString">
            <summary>
            <para>Returns the reader's current token as string.</para>
            <para>See also tokenType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsStartDocument">
            <summary>
            <para>Returns true if tokenType() equals StartDocument; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsEndDocument">
            <summary>
            <para>Returns true if tokenType() equals EndDocument; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsStartElement">
            <summary>
            <para>Returns true if tokenType() equals StartElement; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsEndElement">
            <summary>
            <para>Returns true if tokenType() equals EndElement; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsCharacters">
            <summary>
            <para>Returns true if tokenType() equals Characters; otherwise returns
            false.</para>
            <para>See also isWhitespace() and isCDATA().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsWhitespace">
            <summary>
            <para>Returns true if the reader reports characters that only consist
            of white-space; otherwise returns false.</para>
            <para>See also isCharacters() and text().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsCDATA">
            <summary>
            <para>Returns true if the reader reports characters that stem from a
            CDATA section; otherwise returns false.</para>
            <para>See also isCharacters() and text().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsComment">
            <summary>
            <para>Returns true if tokenType() equals Comment; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsDTD">
            <summary>
            <para>Returns true if tokenType() equals DTD; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsEntityReference">
            <summary>
            <para>Returns true if tokenType() equals EntityReference; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsProcessingInstruction">
            <summary>
            <para>Returns true if tokenType() equals ProcessingInstruction;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.IsStandaloneDocument">
            <summary>
            <para>Returns true if this document has been declared standalone in the
            XML declaration; otherwise returns false.</para>
            <para>If no XML declaration has been parsed, this function returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.DocumentVersion">
            <summary>
            <para>If the tokenType() is StartDocument, this function returns the
            version string as specified in the XML declaration. Otherwise an empty
            string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.DocumentEncoding">
            <summary>
            <para>If the tokenType() is StartDocument, this function returns the
            encoding string as specified in the XML declaration. Otherwise an empty
            string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.LineNumber">
            <summary>
            <para>Returns the current line number, starting with 1.</para>
            <para>See also columnNumber() and characterOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.ColumnNumber">
            <summary>
            <para>Returns the current column number, starting with 0.</para>
            <para>See also lineNumber() and characterOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.CharacterOffset">
            <summary>
            <para>Returns the current character offset, starting with 0.</para>
            <para>See also lineNumber() and columnNumber().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.Attributes">
            <summary>
            <para>Returns the attributes of a StartElement.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.Name">
            <summary>
            <para>Returns the local name of a StartElement, EndElement, or an
            EntityReference.</para>
            <para>See also namespaceUri() and qualifiedName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.NamespaceUri">
            <summary>
            <para>Returns the namespaceUri of a StartElement or EndElement.</para>
            <para>See also name() and qualifiedName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.QualifiedName">
            <summary>
            <para>Returns the qualified name of a StartElement or
            EndElement;</para>
            <para>A qualified name is the raw name of an element in the XML data.
            It consists of the namespace prefix, followed by colon, followed by the
            element's local name. Since the namespace prefix is not unique (the same
            prefix can point to different namespaces and different prefixes can point
            to the same namespace), you shouldn't use qualifiedName(), but the resolved
            namespaceUri() and the attribute's local name().</para>
            <para>See also name(), prefix(), and namespaceUri().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.Prefix">
            <summary>
            <para>Returns the prefix of a StartElement or EndElement.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also name() and qualifiedName().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.ProcessingInstructionTarget">
            <summary>
            <para>Returns the target of a ProcessingInstruction.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.ProcessingInstructionData">
            <summary>
            <para>Returns the data of a ProcessingInstruction.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.Text">
            <summary>
            <para>Returns the text of Characters, Comment, DTD, or
            EntityReference.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.DtdName">
            <summary>
            <para>If the tokenType() is DTD, this function returns the DTD's name.
            Otherwise an empty string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.DtdPublicId">
            <summary>
            <para>If the tokenType() is DTD, this function returns the DTD's public
            identifier. Otherwise an empty string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.DtdSystemId">
            <summary>
            <para>If the tokenType() is DTD, this function returns the DTD's system
            identifier. Otherwise an empty string is returned.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.ErrorString">
            <summary>
            <para>Returns the error message that was set with raiseError().</para>
            <para>See also error(), lineNumber(), columnNumber(), and
            characterOffset().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.error">
            <summary>
            <para>Returns the type of the current error, or NoError if no error
            occurred.</para>
            <para>See also errorString() and raiseError().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamReader.HasError">
            <summary>
            <para>Returns true if an error has occurred, otherwise false.</para>
            <para>See also errorString() and error().</para>
            </summary>
        </member>
        <member name="T:QtCore.QXmlStreamReader.TokenType">
            <summary>
            <para>This enum specifies the type of token the reader just
            read.</para>
            </summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.NoToken">
            <summary>The reader has not yet read anything.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.Invalid">
            <summary>An error has occurred, reported in error() and errorString().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.StartDocument">
            <summary>The reader reports the XML version number in documentVersion(), and the encoding as specified in the XML document in documentEncoding(). If the document is declared standalone, isStandaloneDocument() returns true; otherwise it returns false.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.EndDocument">
            <summary>The reader reports the end of the document.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.StartElement">
            <summary>The reader reports the start of an element with namespaceUri() and name(). Empty elements are also reported as StartElement, followed directly by EndElement. The convenience function readElementText() can be called to concatenate all content until the corresponding EndElement. Attributes are reported in attributes(), namespace declarations in namespaceDeclarations().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.EndElement">
            <summary>The reader reports the end of an element with namespaceUri() and name().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.Characters">
            <summary>The reader reports characters in text(). If the characters are all white-space, isWhitespace() returns true. If the characters stem from a CDATA section, isCDATA() returns true.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.Comment">
            <summary>The reader reports a comment in text().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.DTD">
            <summary>The reader reports a DTD in text(), notation declarations in notationDeclarations(), and entity declarations in entityDeclarations(). Details of the DTD declaration are reported in in dtdName(), dtdPublicId(), and dtdSystemId().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.EntityReference">
            <summary>The reader reports an entity reference that could not be resolved. The name of the reference is reported in name(), the replacement text in text().</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.TokenType.ProcessingInstruction">
            <summary>The reader reports a processing instruction in processingInstructionTarget() and processingInstructionData().</summary>
        </member>
        <member name="T:QtCore.QXmlStreamReader.ReadElementTextBehaviour">
            <summary>
            <para>This enum specifies the different behaviours of
            readElementText().</para>
            <para>This enum was introduced or modified in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.ReadElementTextBehaviour.ErrorOnUnexpectedElement">
            <summary>Raise an UnexpectedElementError and return what was read so far when a child element is encountered.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.ReadElementTextBehaviour.IncludeChildElements">
            <summary>Recursively include the text from child elements.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.ReadElementTextBehaviour.SkipChildElements">
            <summary>Skip child elements.</summary>
        </member>
        <member name="T:QtCore.QXmlStreamReader.Error">
            <summary>
            <para>This enum specifies different error cases</para>
            </summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.Error.UnexpectedElementError">
            <summary>The parser encountered an element that was different to those it expected.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.Error.CustomError">
            <summary>A custom error has been raised with raiseError()</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.Error.NotWellFormedError">
            <summary>The parser internally raised an error due to the read XML not being well-formed.</summary>
        </member>
        <member name="F:QtCore.QXmlStreamReader.Error.PrematureEndOfDocumentError">
            <summary>The input stream ended before a well-formed XML document was parsed. Recovery from this error is possible if more XML arrives in the stream, either by calling addData() or by waiting for it to arrive on the device().</summary>
        </member>
        <member name="T:QtCore.QXmlStreamWriter">
            <summary>
            <para>The QXmlStreamWriter class provides an XML writer with a simple
            streaming API.</para>
            </summary>
            <remarks>
            <para>QXmlStreamWriter is the counterpart to QXmlStreamReader for
            writing XML. Like its related class, it operates on a QIODevice specified
            with setDevice(). The API is simple and straightforward: for every XML
            token or event you want to write, the writer provides a specialized
            function.</para>
            <para>You start a document with writeStartDocument() and end it with
            writeEndDocument(). This will implicitly close all remaining open
            tags.</para>
            <para>Element tags are opened with writeStartElement() followed by
            writeAttribute() or writeAttributes(), element content, and then
            writeEndElement(). A shorter form writeEmptyElement() can be used to write
            empty elements, followed by writeAttributes().</para>
            <para>Element content consists of either characters, entity references
            or nested elements. It is written with writeCharacters(), which also takes
            care of escaping all forbidden characters and character sequences,
            writeEntityReference(), or subsequent calls to writeStartElement(). A
            convenience method writeTextElement() can be used for writing terminal
            elements that contain nothing but text.</para>
            <para>The following abridged code snippet shows the basic use of the
            class to write formatted XML with indentation:</para>
            <para>    QXmlStreamWriter stream(&amp;output);</para>
            <para>    stream.setAutoFormatting(true);</para>
            <para>    stream.writeStartDocument();</para>
            <para>    ...</para>
            <para>    stream.writeStartElement(&quot;bookmark&quot;);</para>
            <para>    stream.writeAttribute(&quot;href&quot;,
            &quot;http://qt-project.org/&quot;);</para>
            <para>    stream.writeTextElement(&quot;title&quot;, &quot;Qt
            Project&quot;);</para>
            <para>    stream.writeEndElement(); // bookmark</para>
            <para>    ...</para>
            <para>    stream.writeEndDocument();</para>
            <para>QXmlStreamWriter takes care of prefixing namespaces, all you have
            to do is specify the namespaceUri when writing elements or attributes. If
            you must conform to certain prefixes, you can force the writer to use them
            by declaring the namespaces manually with either writeNamespace() or
            writeDefaultNamespace(). Alternatively, you can bypass the stream writer's
            namespace support and use overloaded methods that take a qualified name
            instead. The namespace http://www.w3.org/XML/1998/namespace is implicit and
            mapped to the prefix xml.</para>
            <para>The stream writer can automatically format the generated XML data
            by adding line-breaks and indentation to empty sections between elements,
            making the XML data more readable for humans and easier to work with for
            most source code management systems. The feature can be turned on with the
            autoFormatting property, and customized with the autoFormattingIndent
            property.</para>
            <para>Other functions are writeCDATA(), writeComment(),
            writeProcessingInstruction(), and writeDTD(). Chaining of XML streams is
            supported with writeCurrentToken().</para>
            <para>By default, QXmlStreamWriter encodes XML in UTF-8. Different
            encodings can be enforced using setCodec().</para>
            <para>If an error occurs while writing to the underlying device,
            hasError() starts returning true and subsequent writes are ignored.</para>
            <para>The QXmlStream Bookmarks Example illustrates how to use a stream
            writer to write an XML bookmark file (XBEL) that was previously read in by
            a QXmlStreamReader.</para>
            </remarks>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.#ctor">
            <summary>
            <para>Constructs a stream writer.</para>
            <para>See also setDevice().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Constructs a stream writer that writes into device;</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.#ctor(QtCore.QByteArray)">
            <summary>
            <para>Constructs a stream writer that writes into array. This is the
            same as creating an xml writer that operates on a QBuffer device which in
            turn operates on array.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.#ctor(System.String)">
            <summary>
            <para>Constructs a stream writer that writes into string.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.SetCodec(System.String)">
            <summary>
            <para>Sets the codec for this stream to the QTextCodec for the encoding
            specified by codecName. Common values for codecName include &quot;ISO
            8859-1&quot;, &quot;UTF-8&quot;, and &quot;UTF-16&quot;. If the encoding
            isn't recognized, nothing happens.</para>
            <para>See also QTextCodec::codecForName().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteAttribute(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes an attribute with qualifiedName and value.</para>
            <para>This function can only be called after writeStartElement() before
            any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteAttribute(System.String,System.String,System.String)">
            <summary>
            <para>Writes an attribute with name and value, prefixed for the
            specified namespaceUri. If the namespace has not been declared yet,
            QXmlStreamWriter will generate a namespace declaration for it.</para>
            <para>This function can only be called after writeStartElement() before
            any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteAttribute(QtCore.QXmlStreamAttribute)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes the attribute.</para>
            <para>This function can only be called after writeStartElement() before
            any content is written, or after writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteAttributes(QtCore.QXmlStreamAttributes)">
            <summary>
            <para>Writes the attribute vector attributes. If a namespace referenced
            in an attribute not been declared yet, QXmlStreamWriter will generate a
            namespace declaration for it.</para>
            <para>This function can only be called after writeStartElement() before
            any content is written, or after writeEmptyElement().</para>
            <para>See also writeAttribute() and writeNamespace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteCDATA(System.String)">
            <summary>
            <para>Writes text as CDATA section. If text contains the forbidden
            character sequence &quot;]]&gt;&quot;, it is split into different CDATA
            sections.</para>
            <para>This function mainly exists for completeness. Normally you should
            not need use it, because writeCharacters() automatically escapes all
            non-content characters.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteCharacters(System.String)">
            <summary>
            <para>Writes text. The characters &quot;&lt;&quot;, &quot;&amp;&quot;,
            and &quot;&quot;&quot; are escaped as entity references
            &quot;&amp;lt;&quot;, &quot;&amp;amp;, and &quot;&amp;quot;&quot;. To avoid
            the forbidden sequence &quot;]]&gt;&quot;, &quot;&gt;&quot; is also escaped
            as &quot;&amp;gt;&quot;.</para>
            <para>See also writeEntityReference().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteComment(System.String)">
            <summary>
            <para>Writes text as XML comment, where text must not contain the
            forbidden sequence &quot;--&quot; or end with &quot;-&quot;. Note that XML
            does not provide any way to escape &quot;-&quot; in a comment.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteDTD(System.String)">
            <summary>
            <para>Writes a DTD section. The dtd represents the entire doctypedecl
            production from the XML 1.0 specification.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteEmptyElement(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes an empty element with qualified name qualifiedName.
            Subsequent calls to writeAttribute() will add attributes to this
            element.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteEmptyElement(System.String,System.String)">
            <summary>
            <para>Writes an empty element with name, prefixed for the specified
            namespaceUri. If the namespace has not been declared, QXmlStreamWriter will
            generate a namespace declaration for it. Subsequent calls to
            writeAttribute() will add attributes to this element.</para>
            <para>See also writeNamespace().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteTextElement(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes a text element with qualifiedName and text.</para>
            <para>This is a convenience function equivalent to:</para>
            <para>        writeStartElement(qualifiedName);</para>
            <para>        writeCharacters(text);</para>
            <para>        writeEndElement();</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteTextElement(System.String,System.String,System.String)">
            <summary>
            <para>Writes a text element with name, prefixed for the specified
            namespaceUri, and text. If the namespace has not been declared,
            QXmlStreamWriter will generate a namespace declaration for it.</para>
            <para>This is a convenience function equivalent to:</para>
            <para>        writeStartElement(namespaceUri, name);</para>
            <para>        writeCharacters(text);</para>
            <para>        writeEndElement();</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteEndDocument">
            <summary>
            <para>Closes all remaining open start elements and writes a
            newline.</para>
            <para>See also writeStartDocument().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteEndElement">
            <summary>
            <para>Closes the previous start element.</para>
            <para>See also writeStartElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteEntityReference(System.String)">
            <summary>
            <para>Writes the entity reference name to the stream, as
            &quot;&amp;name;&quot;.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteNamespace(System.String,System.String)">
            <summary>
            <para>Writes a namespace declaration for namespaceUri with prefix. If
            prefix is empty, QXmlStreamWriter assigns a unique prefix consisting of the
            letter 'n' followed by a number.</para>
            <para>If writeStartElement() or writeEmptyElement() was called, the
            declaration applies to the current element; otherwise it applies to the
            next child element.</para>
            <para>Note that the prefix xml is both predefined and reserved for
            http://www.w3.org/XML/1998/namespace, which in turn cannot be bound to any
            other prefix. The prefix xmlns and its URI http://www.w3.org/2000/xmlns/
            are used for the namespace mechanism itself and thus completely forbidden
            in declarations.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteDefaultNamespace(System.String)">
            <summary>
            <para>Writes a default namespace declaration for namespaceUri.</para>
            <para>If writeStartElement() or writeEmptyElement() was called, the
            declaration applies to the current element; otherwise it applies to the
            next child element.</para>
            <para>Note that the namespaces http://www.w3.org/XML/1998/namespace
            (bound to xmlns) and http://www.w3.org/2000/xmlns/ (bound to xml) by
            definition cannot be declared as default.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            <para>Writes an XML processing instruction with target and data, where
            data must not contain the sequence &quot;?&gt;&quot;.</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteStartDocument">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes a document start with XML version number &quot;1.0&quot;.
            This also writes the encoding information.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also writeEndDocument() and setCodec().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteStartDocument(System.String)">
            <summary>
            <para>Writes a document start with the XML version number
            version.</para>
            <para>See also writeEndDocument().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteStartDocument(System.String,System.Boolean)">
            <summary>
            <para>Writes a document start with the XML version number version and a
            standalone attribute standalone.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also writeEndDocument().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteStartElement(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Writes a start element with qualifiedName. Subsequent calls to
            writeAttribute() will add attributes to this element.</para>
            <para>See also writeEndElement() and writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteStartElement(System.String,System.String)">
            <summary>
            <para>Writes a start element with name, prefixed for the specified
            namespaceUri. If the namespace has not been declared yet, QXmlStreamWriter
            will generate a namespace declaration for it. Subsequent calls to
            writeAttribute() will add attributes to this element.</para>
            <para>See also writeNamespace(), writeEndElement(), and
            writeEmptyElement().</para>
            </summary>
        </member>
        <member name="M:QtCore.QXmlStreamWriter.WriteCurrentToken(QtCore.QXmlStreamReader)">
            <summary>
            <para>Writes the current state of the reader. All possible valid states
            are supported.</para>
            <para>The purpose of this function is to support chained processing of
            XML data.</para>
            <para>See also QXmlStreamReader::tokenType().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamWriter.Device">
            <summary>
            <para>Returns the current device associated with the QXmlStreamWriter,
            or 0 if no device has been assigned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets the current device to device. If you want the stream to
            write into a QByteArray, you can create a QBuffer device.</para>
            <para>See also device().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamWriter.Codec">
            <summary>
            <para>Returns the codec that is currently assigned to the
            stream.</para>
            <para>See also setCodec().</para>
            <para></para>
            <para>Sets the codec for this stream to codec. The codec is used for
            encoding any data that is written. By default, QXmlStreamWriter uses
            UTF-8.</para>
            <para>The encoding information is stored in the initial xml tag which
            gets written when you call writeStartDocument(). Call this function before
            calling writeStartDocument().</para>
            <para>See also codec().</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamWriter.AutoFormatting">
            <summary>
            <para>The auto-formatting flag of the stream writer</para>
            <para>This property controls whether or not the stream writer
            automatically formats the generated XML data. If enabled, the writer
            automatically adds line-breaks and indentation to empty sections between
            elements (ignorable whitespace). The main purpose of auto-formatting is to
            split the data into several lines, and to increase readability for a human
            reader. The indentation depth can be controlled through the
            autoFormattingIndent property.</para>
            <para>By default, auto-formatting is disabled.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamWriter.AutoFormattingIndent">
            <summary>
            <para>This property holds the number of spaces or tabs used for
            indentation when auto-formatting is enabled. Positive numbers indicate
            spaces, negative numbers tabs.</para>
            <para>The default indentation is 4.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            <para>See also autoFormatting.</para>
            </summary>
        </member>
        <member name="P:QtCore.QXmlStreamWriter.HasError">
            <summary>
            <para>Returns true if the stream failed to write to the underlying
            device.</para>
            <para>The error status is never reset. Writes happening after the error
            occurred are ignored, even if the error condition is cleared.</para>
            </summary>
        </member>
    </members>
</doc>
