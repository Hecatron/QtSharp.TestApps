<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtPrintSupportSharp</name>
    </assembly>
    <members>
        <member name="T:QtPrintSupport.QAbstractPrintDialog">
            <summary>
            <para>The QAbstractPrintDialog class provides a base implementation for print dialogs used to configure printers.</para>
            </summary>
            <remarks>
            <para>This class implements getter and setter functions that are used to customize settings shown in print dialogs, but it is not used directly. Use QPrintDialog to display a print dialog in your application.</para>
            <para></para>
            <para>See also QPrintDialog and QPrinter.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.#ctor(QtPrintSupport.QPrinter,QtWidgets.QWidget)">
            <summary>
            <para>Constructs an abstract print dialog for printer with parent as parent widget.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.Exec">
            <summary>
            <para>Reimplemented from QDialog::exec().</para>
            <para>This virtual function is called to pop up the dialog. It must be reimplemented in subclasses.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.AddEnabledOption(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption)">
            <summary>
            <para>Use QPrintDialog::setOption(option, true) instead.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.IsOptionEnabled(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption)">
            <summary>
            <para>Use QPrintDialog::testOption(option) instead.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.SetMinMax(System.Int32,System.Int32)">
            <summary>
            <para>Sets the page range in this dialog to be from min to max. This also enables the PrintPageRange option.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.SetFromTo(System.Int32,System.Int32)">
            <summary>
            <para>Sets the range in the print dialog to be from from to to.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QAbstractPrintDialog.ToPage">
            <summary>
            <para>Returns the last page to be printed. By default, this value is set to 0.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.EnabledOptions">
            <summary>
            <para>Use QPrintDialog::options() instead.</para>
            <para>See also setEnabledOptions().</para>
            <para></para>
            <para>Use QPrintDialog::setOptions() instead.</para>
            <para>See also enabledOptions().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.printRange">
            <summary>
            <para>Returns the print range.</para>
            <para>See also setPrintRange().</para>
            <para></para>
            <para>Sets the print range option in to be range.</para>
            <para>See also printRange().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.MinPage">
            <summary>
            <para>Returns the minimum page in the page range. By default, this value is set to 1.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.MaxPage">
            <summary>
            <para>Returns the maximum page in the page range. As of Qt 4.4, this function returns INT_MAX by default. Previous versions returned 1 by default.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.FromPage">
            <summary>
            <para>Returns the first page to be printed By default, this value is set to 0.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QAbstractPrintDialog.Printer">
            <summary>
            <para>Returns the printer that this printer dialog operates on.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QAbstractPrintDialog.PrintRange">
            <summary>
            <para>Used to specify the print range selection option.</para>
            <para>See also QPrinter::PrintRange.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintRange.AllPages">
            <summary>All pages should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintRange.Selection">
            <summary>Only the selection should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintRange.PageRange">
            <summary>The specified page range should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintRange.CurrentPage">
            <summary>Only the currently visible page should be printed.</summary>
        </member>
        <member name="T:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption">
            <summary>
            <para>Used to specify which parts of the print dialog should be visible.</para>
            <para>This value is obsolete and does nothing since Qt 4.5:</para>
            <para>The PrintDialogOptions type is a typedef for QFlags&lt;PrintDialogOption&gt;. It stores an OR combination of PrintDialogOption values.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.None">
            <summary>None of the options are enabled.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintToFile">
            <summary>The print to file option is enabled.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintSelection">
            <summary>The print selection option is enabled.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintPageRange">
            <summary>The page range selection option is enabled.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintShowPageSize">
            <summary>Show the page size + margins page only if this is enabled.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintCollateCopies">
            <summary>The collate copies option is enabled</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.DontUseSheet">
            <summary>In previous versions of Qt, exec() the print dialog would create a sheet by default the dialog was given a parent. This is no longer supported in Qt 4.5. If you want to use sheets, use QPrintDialog::open() instead.</summary>
        </member>
        <member name="F:QtPrintSupport.QAbstractPrintDialog.PrintDialogOption.PrintCurrentPage">
            <summary>The print current page option is enabled</summary>
        </member>
        <member name="T:QtPrintSupport.QPageSetupDialog">
            <summary>
            <para>The QPageSetupDialog class provides a configuration dialog for the page-related options on a printer.</para>
            </summary>
            <remarks>
            <para>On Windows and OS X the page setup dialog is implemented using the native page setup dialogs.</para>
            <para>Note that on Windows and OS X custom paper sizes won't be reflected in the native page setup dialogs. Additionally, custom page margins set on a QPrinter won't show in the native OS X page setup dialog.</para>
            <para></para>
            <para>See also QPrinter and QPrintDialog.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPageSetupDialog.#ctor(QtPrintSupport.QPrinter,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a page setup dialog that configures printer with parent as the parent widget.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPageSetupDialog.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a page setup dialog that configures a default-constructed QPrinter with parent as the parent widget.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also printer().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPageSetupDialog.Exec">
            <summary>
            <para>Reimplemented from QDialog::exec().</para>
            <para>This virtual function is called to pop up the dialog. It must be reimplemented in subclasses.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPageSetupDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its accepted() signal to the slot specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPageSetupDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPageSetupDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use showEvent() instead. If you need to do some delayed initialization use the Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(), isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPageSetupDialog.Printer">
            <summary>
            <para>Returns the printer that was passed to the QPageSetupDialog constructor.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintDialog">
            <summary>
            <para>The QPrintDialog class provides a dialog for specifying the printer's configuration.</para>
            </summary>
            <remarks>
            <para>The dialog allows users to change document-related settings, such as the paper size and orientation, type of print (color or grayscale), range of pages, and number of copies to print.</para>
            <para>Controls are also provided to enable users to choose from the printers available, including any configured network printers.</para>
            <para>Typically, QPrintDialog objects are constructed with a QPrinter object, and executed using the exec() function.</para>
            <para></para>
            <para></para>
            <para>  QPrintDialog printDialog(printer, parent);</para>
            <para>  if (printDialog.exec() == QDialog::Accepted) {</para>
            <para>      // print ...</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>If the dialog is accepted by the user, the QPrinter object is correctly configured for printing.</para>
            <para></para>
            <para>	</para>
            <para></para>
            <para>The printer dialog (shown above in Plastique style) enables access to common printing properties. On X11 platforms that use the CUPS printing system, the settings for each available printer can be modified via the dialog's Properties push button.</para>
            <para>On Windows and OS X, the native print dialog is used, which means that some QWidget and QDialog properties set on the dialog won't be respected. The native print dialog on OS X does not support setting printer options, i.e. setOptions() and setOption() have no effect.</para>
            <para>In Qt 4.4, it was possible to use the static functions to show a sheet on OS X. This is no longer supported in Qt 4.5. If you want this functionality, use QPrintDialog::open().</para>
            <para></para>
            <para>See also QPageSetupDialog and QPrinter.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.#ctor(QtPrintSupport.QPrinter,QtWidgets.QWidget)">
            <summary>
            <para>Constructs a new modal printer dialog for the given printer with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.#ctor(QtWidgets.QWidget)">
            <summary>
            <para>Constructs a print dialog with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.Exec">
            <summary>
            <para>Reimplemented from QDialog::exec().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            <para>Closes the dialog and sets its result code to result. If this dialog is shown with exec(), done() causes the local event loop to finish, and exec() to return result.</para>
            <para>Note: This function does not apply to the Native Print Dialog on the Mac OS X and Windows platforms, because the dialog is required to be modal and only the user can close it.</para>
            <para>See also QDialog::done().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.SetOption(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption,System.Boolean)">
            <summary>
            <para>Sets the given option to be enabled if on is true; otherwise, clears the given option.</para>
            <para>See also options and testOption().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.TestOption(QtPrintSupport.QAbstractPrintDialog.PrintDialogOption)">
            <summary>
            <para>Returns true if the given option is enabled; otherwise, returns false.</para>
            <para>See also options and setOption().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its accepted() signal to the slot specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="E:QtPrintSupport.QPrintDialog.Accepted">
            <summary>
            <para>This signal is emitted when the user accepts the values set in the print dialog. The printer parameter includes the printer that the settings were applied to.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintDialog.Options">
            <summary>
            <para>This property holds the various options that affect the look and feel of the dialog.</para>
            <para>By default, all options are disabled.</para>
            <para>Options should be set before showing the dialog. Setting them while the dialog is visible is not guaranteed to have an immediate effect on the dialog (depending on the option and on the platform).</para>
            <para>This property was introduced in  Qt 4.5.</para>
            <para>See also setOption() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use showEvent() instead. If you need to do some delayed initialization use the Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(), isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintPreviewDialog">
            <summary>
            <para>The QPrintPreviewDialog class provides a dialog for previewing and configuring page layouts for printer output.</para>
            </summary>
            <remarks>
            <para>Using QPrintPreviewDialog in your existing application is straightforward:</para>
            <para>Create the QPrintPreviewDialog.You can construct a QPrintPreviewDialog with an existing QPrinter object, or you can have QPrintPreviewDialog create one for you, which will be the system default printer.</para>
            <para></para>
            <para>Connect the paintRequested() signal to a slot.When the dialog needs to generate a set of preview pages, the paintRequested() signal will be emitted. You can use the exact same code for the actual printing as for having the preview generated, including calling QPrinter::newPage() to start a new page in the preview. Connect a slot to the paintRequested() signal, where you draw onto the QPrinter object that is passed into the slot.</para>
            <para></para>
            <para>Call exec().Call QPrintPreviewDialog::exec() to show the preview dialog.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPrinter, QPrintDialog, QPageSetupDialog, and QPrintPreviewWidget.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewDialog.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This will create an internal QPrinter object, which will use the system default printer.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewDialog.#ctor(QtPrintSupport.QPrinter,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QPrintPreviewDialog based on printer and with parent as the parent widget. The widget flags flags are passed on to the QWidget constructor.</para>
            <para>See also QWidget::setWindowFlags().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewDialog.Open(QtCore.QObject,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Opens the dialog and connects its finished(int) signal to the slot specified by receiver and member.</para>
            <para>The signal will be disconnected from the slot when the dialog is closed.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewDialog.Done(System.Int32)">
            <summary>
            <para>Reimplemented from QDialog::done().</para>
            </summary>
        </member>
        <member name="E:QtPrintSupport.QPrintPreviewDialog.PaintRequested">
            <summary>
            <para>This signal is emitted when the QPrintPreviewDialog needs to generate a set of preview pages.</para>
            <para>The printer instance supplied is the paint device onto which you should paint the contents of each page, using the QPrinter instance in the same way as you would when printing directly.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewDialog.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use showEvent() instead. If you need to do some delayed initialization use the Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(), isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewDialog.Printer">
            <summary>
            <para>Returns a pointer to the QPrinter object this dialog is currently operating on.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter">
            <summary>
            <para>The QPrinter class is a paint device that paints on a printer.</para>
            </summary>
            <remarks>
            <para>This device represents a series of pages of printed output, and is used in almost exactly the same way as other paint devices such as QWidget and QPixmap. A set of additional functions are provided to manage device-specific features, such as orientation and resolution, and to step through the pages in a document as it is generated.</para>
            <para>When printing directly to a printer on Windows or OS X, QPrinter uses the built-in printer drivers. On X11, QPrinter uses the Common Unix Printing System (CUPS) to send PDF output to the printer. As an alternative, the printProgram() function can be used to specify the command or utility to use instead of the system default.</para>
            <para>Note that setting parameters like paper size and resolution on an invalid printer is undefined. You can use QPrinter::isValid() to verify this before changing any parameters.</para>
            <para>QPrinter supports a number of parameters, most of which can be changed by the end user through a print dialog. In general, QPrinter passes these functions onto the underlying QPrintEngine.</para>
            <para>The most important parameters are:</para>
            <para></para>
            <para>setOrientation() tells QPrinter which page orientation to use.</para>
            <para>setPaperSize() tells QPrinter what paper size to expect from the printer.</para>
            <para>setResolution() tells QPrinter what resolution you wish the printer to provide, in dots per inch (DPI).</para>
            <para>setFullPage() tells QPrinter whether you want to deal with the full page or just with the part the printer can draw on.</para>
            <para>setCopyCount() tells QPrinter how many copies of the document it should print.</para>
            <para></para>
            <para>Many of these functions can only be called before the actual printing begins (i.e., before QPainter::begin() is called). This usually makes sense because, for example, it's not possible to change the number of copies when you are halfway through printing. There are also some settings that the user sets (through the printer dialog) and that applications are expected to obey. See QAbstractPrintDialog's documentation for more details.</para>
            <para>When QPainter::begin() is called, the QPrinter it operates on is prepared for a new page, enabling the QPainter to be used immediately to paint the first page in a document. Once the first page has been painted, newPage() can be called to request a new blank page to paint on, or QPainter::end() can be called to finish printing. The second page and all following pages are prepared using a call to newPage() before they are painted.</para>
            <para>The first page in a document does not need to be preceded by a call to newPage(). You only need to calling newPage() after QPainter::begin() if you need to insert a blank page at the beginning of a printed document. Similarly, calling newPage() after the last page in a document is painted will result in a trailing blank page appended to the end of the printed document.</para>
            <para>If you want to abort the print job, abort() will try its best to stop printing. It may cancel the entire job or just part of it.</para>
            <para>Since QPrinter can print to any QPrintEngine subclass, it is possible to extend printing support to cover new types of printing subsystem by subclassing QPrintEngine and reimplementing its interface.</para>
            <para></para>
            <para>See also QPrintDialog and Qt Print Support.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrinter.#ctor(QtPrintSupport.QPrinter.PrinterMode)">
            <summary>
            <para>Creates a new printer object with the given mode.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.#ctor(QtPrintSupport.QPrinterInfo,QtPrintSupport.QPrinter.PrinterMode)">
            <summary>
            <para>Creates a new printer object with the given printer and mode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.SetPaperSize(QtCore.QSizeF,QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>Sets the paper size based on paperSize in unit.</para>
            <para>Note that the paper size is defined in a portrait layout, regardless of what the current printer orientation is set to.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.GetPaperSize(QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>pageLayout().fullPageSize() instead.</para>
            <para>Returns the paper size in unit.</para>
            <para>Note that the returned size reflects the current paper orientation.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.PaperRect">
            <summary>
            <para>Returns the paper's rectangle; this is usually larger than the pageRect().</para>
            <para>The unit of the returned rectangle is DevicePixel.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.PageRect">
            <summary>
            <para>Returns the page's rectangle; this is usually smaller than the paperRect() since the page normally has margins between its borders and the paper.</para>
            <para>The unit of the returned rectangle is DevicePixel.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.PaperRect(QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>Returns the paper's rectangle in unit; this is usually larger than the pageRect().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also pageRect().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.PageRect(QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>Returns the page's rectangle in unit; this is usually smaller than the paperRect() since the page normally has margins between its borders and the paper.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also paperSize().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.NewPage">
            <summary>
            <para>Reimplemented from QPagedPaintDevice::newPage().</para>
            <para>Tells the printer to eject the current page and to continue printing on a new page. Returns true if this was successful; otherwise returns false.</para>
            <para>Calling newPage() on an inactive QPrinter object will always fail.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.Abort">
            <summary>
            <para>Aborts the current print run. Returns true if the print run was successfully aborted and printerState() will return QPrinter::Aborted; otherwise returns false.</para>
            <para>It is not always possible to abort a print job. For example, all the data has gone to the printer but the printer cannot or will not cancel the job when asked to.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.PrintEngine">
            <summary>
            <para>Returns the print engine used by the printer.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.SetFromTo(System.Int32,System.Int32)">
            <summary>
            <para>Sets the range of pages to be printed to cover the pages with numbers specified by from and to, where from corresponds to the first page in the range and to corresponds to the last.</para>
            <para>Note: Pages in a document are numbered according to the convention that the first page is page 1. However, if from and to are both set to 0, the whole document will be printed.</para>
            <para>This function is mostly used to set a default value that the user can override in the print dialog when you call setup().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also fromPage() and toPage().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.ToPage">
            <summary>
            <para>Returns the number of the last page in a range of pages to be printed (the &quot;to page&quot; setting). Pages in a document are numbered according to the convention that the first page is page 1.</para>
            <para>By default, this function returns a special value of 0, meaning that the &quot;to page&quot; setting is unset.</para>
            <para>Note: If fromPage() and toPage() both return 0, this indicates that the whole document will be printed.</para>
            <para>The programmer is responsible for reading this setting and printing accordingly.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setFromTo() and fromPage().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.SetPageMargins(System.Double,System.Double,System.Double,System.Double,QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>This function sets the left, top, right and bottom page margins for this printer. The unit of the margins are specified with the unit parameter.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setPageMargins().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.GetPageMargins(System.Double@,System.Double@,System.Double@,System.Double@,QtPrintSupport.QPrinter.Unit)">
            <summary>
            <para>Returns the page margins for this printer in left, top, right, bottom. The unit of the returned margins are specified with the unit parameter.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also pageLayout() and setPageMargins().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinter.SetEngines(QtPrintSupport.QPrintEngine,QtGui.QPaintEngine)">
            <summary>
            <para>This function is used by subclasses of QPrinter to specify custom print and paint engines (printEngine and paintEngine, respectively).</para>
            <para>QPrinter does not take ownership of the engines, so you need to manage these engine instances yourself.</para>
            <para>Note that changing the engines will reset the printer state and all its properties.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also printEngine(), paintEngine(), and setOutputFormat().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.outputFormat">
            <summary>
            <para>Returns the output format for this printer.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setOutputFormat().</para>
            <para></para>
            <para>Sets the output format for this printer to format.</para>
            <para>If format is the same value as currently set then no change will be made.</para>
            <para>If format is NativeFormat then the printerName will be set to the default printer. If there are no valid printers configured then no change will be made. If you want to set NativeFormat with a specific printerName then use setPrinterName().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also outputFormat() and setPrinterName().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PrinterName">
            <summary>
            <para>Returns the printer name. This value is initially set to the name of the default printer.</para>
            <para>See also setPrinterName().</para>
            <para></para>
            <para>Sets the printer name to name.</para>
            <para>If the name is empty then the output format will be set to PdfFormat.</para>
            <para>If the name is not a valid printer then no change will be made.</para>
            <para>If the name is a valid printer then the output format will be set to NativeFormat.</para>
            <para>See also printerName(), isValid(), and setOutputFormat().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.OutputFileName">
            <summary>
            <para>Returns the name of the output file. By default, this is an empty string (indicating that the printer shouldn't print to file).</para>
            <para>See also setOutputFileName() and QPrintEngine::PrintEnginePropertyKey.</para>
            <para></para>
            <para>Sets the name of the output file to fileName.</para>
            <para>Setting a null or empty name (0 or &quot;&quot;) disables printing to a file. Setting a non-empty name enables printing to a file.</para>
            <para>This can change the value of outputFormat(). If the file name has the &quot;.pdf&quot; suffix PDF is generated. If the file name has a suffix other than &quot;.pdf&quot;, the output format used is the one set with setOutputFormat().</para>
            <para>QPrinter uses Qt's cross-platform PDF print engines respectively. If you can produce this format natively, for example OS X can generate PDF's from its print engine, set the output format back to NativeFormat.</para>
            <para>See also outputFileName() and setOutputFormat().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PrintProgram">
            <summary>
            <para>Returns the name of the program that sends the print output to the printer.</para>
            <para>The default is to return an empty string; meaning that QPrinter will try to be smart in a system-dependent way. On X11 only, you can set it to something different to use a specific print program. On the other platforms, this returns an empty string.</para>
            <para>See also setPrintProgram() and setPrinterSelectionOption().</para>
            <para></para>
            <para>Sets the name of the program that should do the print job to printProg.</para>
            <para>On X11, this function sets the program to call with the PDF output. On other platforms, it has no effect.</para>
            <para>See also printProgram().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.DocName">
            <summary>
            <para>Returns the document name.</para>
            <para>See also setDocName() and QPrintEngine::PrintEnginePropertyKey.</para>
            <para></para>
            <para>Sets the document name to name.</para>
            <para>On X11, the document name is for example used as the default output filename in QPrintDialog. Note that the document name does not affect the file name if the printer is printing to a file. Use the setOutputFile() function for this.</para>
            <para>See also docName() and QPrintEngine::PrintEnginePropertyKey.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.Creator">
            <summary>
            <para>Returns the name of the application that created the document.</para>
            <para>See also setCreator().</para>
            <para></para>
            <para>Sets the name of the application that created the document to creator.</para>
            <para>This function is only applicable to the X11 version of Qt. If no creator name is specified, the creator will be set to &quot;Qt&quot; followed by some version number.</para>
            <para>See also creator().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.orientation">
            <summary>
            <para>Returns the orientation setting. This is driver-dependent, but is usually QPrinter::Portrait.</para>
            <para>See also setOrientation() and pageLayout().</para>
            <para></para>
            <para>Sets the print orientation to orientation.</para>
            <para>The orientation can be either QPrinter::Portrait or QPrinter::Landscape.</para>
            <para>The printer driver reads this setting and prints using the specified orientation.</para>
            <para>On Windows and Mac, this option can be changed while printing and will take effect from the next call to newPage().</para>
            <para>See also orientation() and setPageOrientation().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.pageSize">
            <summary>
            <para>Returns the currently used page size.</para>
            <para>See also setPageSize().</para>
            <para></para>
            <para>Sets the size of the a page to size.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setPageSize().</para>
            <para>Sets the printer page size based on newPageSize.</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PageSizeMM">
            <summary>
            <para>Returns the page size in millimeters.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Sets the page size to size. size is specified in millimeters.</para>
            <para>If the size matches a standard QPagedPaintDevice::PageSize then that page size will be used, otherwise QPagedPaintDevice::Custom will be set.</para>
            <para>See also pageSizeMM().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setPageSizeMM().</para>
            <para>Use setPageSize(QPageSize) instead.</para>
            <para>Note that the page size is defined in a portrait layout, regardless of what the current printer orientation is set to.</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PaperSize">
            <summary>
            <para>Returns the printer paper size. The default value is driver-dependent.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setPaperSize() and pageLayout().</para>
            <para></para>
            <para>Sets the printer paper size to newPaperSize if that size is supported. The result is undefined if newPaperSize is not supported.</para>
            <para>The default paper size is driver-dependent.</para>
            <para>This function is useful mostly for setting a default value that the user can override in the print dialog.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also paperSize() and setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PaperName">
            <summary>
            <para>Returns the paper name of the paper set on the printer.</para>
            <para>The default value for this is driver-dependent.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also setPaperName() and pageLayout().</para>
            <para></para>
            <para>Sets the paper used by the printer to paperName.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also paperName() and setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.pageOrder">
            <summary>
            <para>Returns the current page order.</para>
            <para>The default page order is FirstPageFirst.</para>
            <para>See also setPageOrder().</para>
            <para></para>
            <para>Sets the page order to pageOrder.</para>
            <para>The page order can be QPrinter::FirstPageFirst or QPrinter::LastPageFirst. The application is responsible for reading the page order and printing accordingly.</para>
            <para>This function is mostly useful for setting a default value that the user can override in the print dialog.</para>
            <para>This function is only supported under X11.</para>
            <para>See also pageOrder().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.Resolution">
            <summary>
            <para>Returns the current assumed resolution of the printer, as set by setResolution() or by the printer driver.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Requests that the printer prints at dpi or as near to dpi as possible.</para>
            <para>This setting affects the coordinate system as returned by, for example QPainter::viewport().</para>
            <para>This function must be called before QPainter::begin() to have an effect on all platforms.</para>
            <para>See also resolution() and setPaperSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.colorMode">
            <summary>
            <para>Returns the current color mode.</para>
            <para>See also setColorMode().</para>
            <para></para>
            <para>Sets the printer's color mode to newColorMode, which can be either Color or GrayScale.</para>
            <para>See also colorMode().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.CollateCopies">
            <summary>
            <para>Returns true if collation is turned on when multiple copies is selected. Returns false if it is turned off when multiple copies is selected. When collating is turned off the printing of each individual page will be repeated the numCopies() amount before the next page is started. With collating turned on all pages are printed before the next copy of those pages is started.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setCollateCopies().</para>
            <para></para>
            <para>Sets the default value for collation checkbox when the print dialog appears. If collate is true, it will enable setCollateCopiesEnabled(). The default value is false. This value will be changed by what the user presses in the print dialog.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also collateCopies().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.FullPage">
            <summary>
            <para>Returns true if the origin of the printer's coordinate system is at the corner of the page and false if it is at the edge of the printable area.</para>
            <para>See setFullPage() for details and caveats.</para>
            <para>See also setFullPage() and pageLayout().</para>
            <para></para>
            <para>If fp is true, enables support for painting over the entire page; otherwise restricts painting to the printable area reported by the device.</para>
            <para>By default, full page printing is disabled. In this case, the origin of the QPrinter's coordinate system coincides with the top-left corner of the printable area.</para>
            <para>If full page printing is enabled, the origin of the QPrinter's coordinate system coincides with the top-left corner of the paper itself. In this case, the device metrics will report the exact same dimensions as indicated by PaperSize. It may not be possible to print on the entire physical page because of the printer's margins, so the application must account for the margins itself.</para>
            <para>See also fullPage(), pageLayout(), setPageSize(), width(), and height().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.NumCopies">
            <summary>
            <para>Returns the number of copies to be printed. The default value is 1.</para>
            <para>On Windows, OS X and X11 systems that support CUPS, this will always return 1 as these operating systems can internally handle the number of copies.</para>
            <para>On X11, this value will return the number of times the application is required to print in order to match the number specified in the printer setup dialog. This has been done since some printer drivers are not capable of buffering up the copies and in those cases the application must make an explicit call to the print code for each copy.</para>
            <para>Use copyCount() in conjunction with supportsMultipleCopies() instead.</para>
            <para>See also setNumCopies() and actualNumCopies().</para>
            <para></para>
            <para>Sets the number of copies to be printed to numCopies.</para>
            <para>The printer driver reads this setting and prints the specified number of copies.</para>
            <para>Use setCopyCount() instead.</para>
            <para>See also numCopies().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.CopyCount">
            <summary>
            <para>Returns the number of copies that will be printed. The default value is 1.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setCopyCount() and supportsMultipleCopies().</para>
            <para></para>
            <para>Sets the number of copies to be printed to count.</para>
            <para>The printer driver reads this setting and prints the specified number of copies.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also copyCount() and supportsMultipleCopies().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.paperSource">
            <summary>
            <para>Returns the printer's paper source. This is Manual or a printer tray or paper cassette.</para>
            <para>See also setPaperSource().</para>
            <para></para>
            <para>Sets the paper source setting to source.</para>
            <para>Windows only: This option can be changed while printing and will take effect from the next call to newPage()</para>
            <para>See also paperSource().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.Duplex">
            <summary>
            <para>Returns the current duplex mode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setDuplex().</para>
            <para></para>
            <para>Enables double sided printing based on the duplex mode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also duplex().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.FontEmbeddingEnabled">
            <summary>
            <para>Returns true if font embedding is enabled.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setFontEmbeddingEnabled().</para>
            <para></para>
            <para>Enabled or disables font embedding depending on enable.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also fontEmbeddingEnabled().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.DoubleSidedPrinting">
            <summary>
            <para>Returns true if double side printing is enabled.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setDoubleSidedPrinting() and duplex().</para>
            <para></para>
            <para>Enables double sided printing if doubleSided is true; otherwise disables it.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also doubleSidedPrinting() and setDuplex().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.WinPageSize">
            <summary>
            <para>Returns the page size used by the printer under Windows.</para>
            <para>See also setWinPageSize() and pageLayout().</para>
            <para></para>
            <para>Sets the page size to be used by the printer under Windows to pageSize.</para>
            <para>See also winPageSize() and pageLayout().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PrinterSelectionOption">
            <summary>
            <para>Returns the printer options selection string. This is useful only if the print command has been explicitly set.</para>
            <para>The default value (an empty string) implies that the printer should be selected in a system-dependent manner.</para>
            <para>Any other value implies that the given value should be used.</para>
            <para>This function always returns an empty string on Windows and Mac.</para>
            <para>See also setPrinterSelectionOption() and setPrintProgram().</para>
            <para></para>
            <para>Sets the printer to use option to select the printer. option is null by default (which implies that Qt should be smart enough to guess correctly), but it can be set to other values to use a specific printer selection option.</para>
            <para>If the printer selection option is changed while the printer is active, the current print job may or may not be affected.</para>
            <para>This function has no effect on Windows or Mac.</para>
            <para>See also printerSelectionOption() and setPrintProgram().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.printRange">
            <summary>
            <para>Returns the page range of the QPrinter. After the print setup dialog has been opened, this function returns the value selected by the user.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setPrintRange().</para>
            <para></para>
            <para>Sets the print range option in to be range.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also printRange().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.margins">
            <summary>
            <para>Returns the current margins of the paint device. The default is 0.</para>
            <para>Margins are specified in millimeters.</para>
            <para>See also setMargins().</para>
            <para></para>
            <para>Sets the margins to be used to margins.</para>
            <para>Margins are specified in millimeters.</para>
            <para>The margins are purely a hint to the drawing method. They don't affect the coordinate system or clipping.</para>
            <para>See also margins().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setMargins().</para>
            <para>See also setPageMargins().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.PaintEngine">
            <summary>
            <para>Reimplemented from QPaintDevice::paintEngine().</para>
            <para>Returns the paint engine used by the printer.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.IsValid">
            <summary>
            <para>Returns true if the printer currently selected is a valid printer in the system, or a pure PDF printer; otherwise returns false.</para>
            <para>To detect other failures check the output of QPainter::begin() or QPrinter::newPage().</para>
            <para></para>
            <para></para>
            <para>      QPrinter printer;</para>
            <para>      printer.setOutputFormat(QPrinter::PdfFormat);</para>
            <para>      printer.setOutputFileName(&quot;/foobar/nonwritable.pdf&quot;);</para>
            <para>      QPainter painter;</para>
            <para>      if (! painter.begin(&amp;printer)) { // failed to open file</para>
            <para>          qWarning(&quot;failed to open file, is it writable?&quot;);</para>
            <para>          return 1;</para>
            <para>      }</para>
            <para>      painter.drawText(10, 10, &quot;Test&quot;);</para>
            <para>      if (! printer.newPage()) {</para>
            <para>          qWarning(&quot;failed in flushing page to disk, disk full?&quot;);</para>
            <para>          return 1;</para>
            <para>      }</para>
            <para>      painter.drawText(10, 10, &quot;Test 2&quot;);</para>
            <para>      painter.end();</para>
            <para></para>
            <para></para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setPrinterName().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.ActualNumCopies">
            <summary>
            <para>Returns the number of copies that will be printed. The default value is 1.</para>
            <para>This function always returns the actual value specified in the print dialog or using setNumCopies().</para>
            <para>Use copyCount() instead.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setNumCopies() and numCopies().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.SupportsMultipleCopies">
            <summary>
            <para>Returns true if the printer supports printing multiple copies of the same document in one job; otherwise false is returned.</para>
            <para>On most systems this function will return true. However, on X11 systems that do not support CUPS, this function will return false. That means the application has to handle the number of copies by printing the same document the required number of times.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setCopyCount() and copyCount().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.printerState">
            <summary>
            <para>Returns the current state of the printer. This may not always be accurate (for example if the printer doesn't have the capability of reporting its state to the operating system).</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinter.FromPage">
            <summary>
            <para>Returns the number of the first page in a range of pages to be printed (the &quot;from page&quot; setting). Pages in a document are numbered according to the convention that the first page is page 1.</para>
            <para>By default, this function returns a special value of 0, meaning that the &quot;from page&quot; setting is unset.</para>
            <para>Note: If fromPage() and toPage() both return 0, this indicates that the whole document will be printed.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setFromTo() and toPage().</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.PrinterMode">
            <summary>
            <para>This enum describes the mode the printer should work in. It basically presets a certain resolution and working mode.</para>
            <para>Note: When rendering text on a QPrinter device, it is important to realize that the size of text, when specified in points, is independent of the resolution specified for the device itself. Therefore, it may be useful to specify the font size in pixels when combining text with graphics to ensure that their relative sizes are what you expect.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrinterMode.ScreenResolution">
            <summary>Sets the resolution of the print device to the screen resolution. This has the big advantage that the results obtained when painting on the printer will match more or less exactly the visible output on the screen. It is the easiest to use, as font metrics on the screen and on the printer are the same. This is the default value. ScreenResolution will produce a lower quality output than HighResolution and should only be used for drafts.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrinterMode.PrinterResolution">
            <summary>This value is deprecated. It is equivalent to ScreenResolution on Unix and HighResolution on Windows and Mac. Due to the difference between ScreenResolution and HighResolution, use of this value may lead to non-portable printer code.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrinterMode.HighResolution">
            <summary>On Windows, sets the printer resolution to that defined for the printer in use. For PDF printing, sets the resolution of the PDF driver to 1200 dpi.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.DuplexMode">
            <summary>
            <para>This enum is used to indicate whether printing will occur on one or both sides of each sheet of paper (simplex or duplex printing).</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.DuplexMode.DuplexNone">
            <summary>Single sided (simplex) printing only.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.DuplexMode.DuplexAuto">
            <summary>The printer's default setting is used to determine whether duplex printing is used.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.DuplexMode.DuplexLongSide">
            <summary>Both sides of each sheet of paper are used for printing. The paper is turned over its longest edge before the second side is printed</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.DuplexMode.DuplexShortSide">
            <summary>Both sides of each sheet of paper are used for printing. The paper is turned over its shortest edge before the second side is printed</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.Orientation">
            <summary>
            <para>This enum type (not to be confused with Orientation) is used to specify each page's orientation.</para>
            <para>This type interacts with QPrinter::PaperSize and QPrinter::setFullPage() to determine the final size of the page available to the application.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.Orientation.Portrait">
            <summary>the page's height is greater than its width.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.Orientation.Landscape">
            <summary>the page's width is greater than its height.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.PageOrder">
            <summary>
            <para>This enum type is used by QPrinter to tell the application program how to print.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PageOrder.FirstPageFirst">
            <summary>the lowest-numbered page should be printed first.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PageOrder.LastPageFirst">
            <summary>the highest-numbered page should be printed first.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.ColorMode">
            <summary>
            <para>This enum type is used to indicate whether QPrinter should print in color or not.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.ColorMode.GrayScale">
            <summary>print in grayscale, even on color printers.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.ColorMode.Color">
            <summary>print in color if available, otherwise in grayscale.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.PaperSource">
            <summary>
            <para>This enum type specifies what paper source QPrinter is to use. QPrinter does not check that the paper source is available; it just uses this information to try and set the paper source. Whether it will set the paper source depends on whether the printer has that particular source.</para>
            <para>Warning: This is currently only implemented for Windows.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PaperSource.MaxPageSource">
            <summary>Deprecated, use LastPaperSource instead</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PaperSource.CustomSource">
            <summary>A PaperSource defined by the printer that is unknown to Qt</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PaperSource.LastPaperSource">
            <summary>The highest valid PaperSource value, currently CustomSource</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.OutputFormat">
            <summary>
            <para>The OutputFormat enum is used to describe the format QPrinter should use for printing.</para>
            <para>See also outputFormat(), setOutputFormat(), and setOutputFileName().</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.OutputFormat.NativeFormat">
            <summary>QPrinter will print output using a method defined by the platform it is running on. This mode is the default when printing directly to a printer.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.OutputFormat.PdfFormat">
            <summary>QPrinter will generate its output as a searchable PDF file. This mode is the default when printing to a file.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.PrintRange">
            <summary>
            <para>Used to specify the print range selection option.</para>
            <para>See also setPrintRange(), printRange(), and QAbstractPrintDialog::PrintRange.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrintRange.AllPages">
            <summary>All pages should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrintRange.Selection">
            <summary>Only the selection should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrintRange.PageRange">
            <summary>The specified page range should be printed.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrinter.PrintRange.CurrentPage">
            <summary>Only the current page should be printed.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinter.Unit">
            <summary>
            <para>This enum type is used to specify the measurement unit for page and paper sizes.</para>
            <para>Note the difference between Point and DevicePixel. The Point unit is defined to be 1/72th of an inch, while the DevicePixel unit is resolution dependant and is based on the actual pixels, or dots, on the printer.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintEngine">
            <summary>
            <para>The QPrintEngine class defines an interface for how QPrinter interacts with a given printing subsystem.</para>
            </summary>
            <remarks>
            <para>The common case when creating your own print engine is to derive from both QPaintEngine and QPrintEngine. Various properties of a print engine are given with property() and set with setProperty().</para>
            <para></para>
            <para>See also QPaintEngine.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrintEngine.SetProperty(QtPrintSupport.QPrintEngine.PrintEnginePropertyKey,QtCore.QVariant)">
            <summary>
            <para>Sets the print engine's property specified by key to the given value.</para>
            <para>See also property().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintEngine.Property(QtPrintSupport.QPrintEngine.PrintEnginePropertyKey)">
            <summary>
            <para>Returns the print engine's property specified by key.</para>
            <para>See also setProperty().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintEngine.NewPage">
            <summary>
            <para>Instructs the print engine to start a new page. Returns true if the printer was able to create the new page; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintEngine.Abort">
            <summary>
            <para>Instructs the print engine to abort the printing process. Returns true if successful; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintEngine.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
            <para>Returns the metric for the given id.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintEngine.PrinterState">
            <summary>
            <para>Returns the current state of the printer being used by the print engine.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey">
            <summary>
            <para>This enum is used to communicate properties between the print engine and QPrinter. A property may or may not be supported by a given print engine.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_CollateCopies">
            <summary>A boolean value indicating whether the printout should be collated or not.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_ColorMode">
            <summary>Refers to QPrinter::ColorMode, either color or monochrome.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_Creator">
            <summary>A string describing the document's creator.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_DocumentName">
            <summary>A string describing the document name in the spooler.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_FullPage">
            <summary>A boolean describing if the printer should be full page or not.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_NumberOfCopies">
            <summary>Obsolete. An integer specifying the number of copies. Use PPK_CopyCount instead.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_Orientation">
            <summary>Specifies a QPrinter::Orientation value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_OutputFileName">
            <summary>The output file name as a string. An empty file name indicates that the printer should not print to a file.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PageOrder">
            <summary>Specifies a QPrinter::PageOrder value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PageRect">
            <summary>A QRect specifying the page rectangle</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PageSize">
            <summary>Obsolete. Use PPK_PaperSize instead.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PaperRect">
            <summary>A QRect specifying the paper rectangle.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PaperSource">
            <summary>Specifies a QPrinter::PaperSource value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PrinterName">
            <summary>A string specifying the name of the printer.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PrinterProgram">
            <summary>A string specifying the name of the printer program used for printing,</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_Resolution">
            <summary>An integer describing the dots per inch for this printer.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_SupportedResolutions">
            <summary>A list of integer QVariants describing the set of supported resolutions that the printer has.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_WindowsPageSize">
            <summary>An integer specifying a DM_PAPER entry on Windows.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_FontEmbedding">
            <summary>A boolean value indicating whether data for the document's fonts should be embedded in the data sent to the printer.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_Duplex">
            <summary>A boolean value indicating whether both sides of the printer paper should be used for the printout.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PaperSources">
            <summary>Specifies more than one QPrinter::PaperSource value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_CustomPaperSize">
            <summary>A QSizeF specifying a custom paper size in the QPrinter::Point unit.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PageMargins" -->
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_CopyCount">
            <summary>An integer specifying the number of copies to print.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_SupportsMultipleCopies">
            <summary>A boolean value indicating whether or not the printer supports printing multiple copies in one job.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PaperName">
            <summary>A string specifying the name of the paper.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_QPageSize">
            <summary>Set the page size using a QPageSize object.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_QPageMargins">
            <summary>Set the page margins using a QPair of QMarginsF and QPageLayout::Unit.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_QPageLayout">
            <summary>Set the page layout using a QPageLayout object.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_PaperSize">
            <summary>Specifies a QPrinter::PaperSize value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintEngine.PrintEnginePropertyKey.PPK_CustomBase">
            <summary>Basis for extension.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrinterInfo">
            <summary>
            <para>The QPrinterInfo class gives access to information about existing printers.</para>
            </summary>
            <remarks>
            <para>Use the static functions to generate a list of QPrinterInfo objects. Each QPrinterInfo object in the list represents a single printer and can be queried for name, supported paper sizes, and whether or not it is the default printer.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrinterInfo.#ctor">
            <summary>
            <para>Constructs an empty QPrinterInfo object.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinterInfo.#ctor(QtPrintSupport.QPrinterInfo)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinterInfo.#ctor(QtPrintSupport.QPrinter)">
            <summary>
            <para>Constructs a QPrinterInfo object from printer.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinterInfo.MakeAndModel">
            <summary>
            <para>Returns the human-readable make and model of the printer.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrinterInfo.PrinterInfo(System.String)">
            <summary>
            <para>Returns the printer printerName.</para>
            <para>The return value should be checked using isNull() before being used, in case the named printer does not exist.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.PrinterName">
            <summary>
            <para>Returns the name of the printer.</para>
            <para>This is a unique id to identify the printer and may not be human-readable.</para>
            <para>See also QPrinterInfo::description() and QPrinter::setPrinterName().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.Description">
            <summary>
            <para>Returns the human-readable description of the printer.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also QPrinterInfo::printerName().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.Location">
            <summary>
            <para>Returns the human-readable location of the printer.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.IsNull">
            <summary>
            <para>Returns whether this QPrinterInfo object holds a printer definition.</para>
            <para>An empty QPrinterInfo object could result for example from calling defaultPrinter() when there are no printers on the system.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.IsDefault">
            <summary>
            <para>Returns whether this printer is currently the default printer.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.IsRemote">
            <summary>
            <para>Returns whether this printer is a remote network printer.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.State">
            <summary>
            <para>Returns the current state of this printer.</para>
            <para>This state may not always be accurate, depending on the platform, printer driver, or printer itself.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.DefaultPageSize">
            <summary>
            <para>Returns the current default Page Size for this printer.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.SupportsCustomPageSizes">
            <summary>
            <para>Returns whether this printer supports custom page sizes.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.MinimumPhysicalPageSize">
            <summary>
            <para>Returns the minimum physical page size supported by this printer.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also maximumPhysicalPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.MaximumPhysicalPageSize">
            <summary>
            <para>Returns the maximum physical page size supported by this printer.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also minimumPhysicalPageSize().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.DefaultDuplexMode">
            <summary>
            <para>Returns the default duplex mode of this printer.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.AvailablePrinterNames">
            <summary>
            <para>Returns a list of all the available Printer Names on this system.</para>
            <para>It is recommended to use this instead of availablePrinters() as it will be faster on most systems.</para>
            <para>Note that the list may become outdated if changes are made on the local system or remote print server. Only instantiate required QPrinterInfo instances when needed, and always check for validity before calling.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.DefaultPrinterName">
            <summary>
            <para>Returns the current default printer name.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrinterInfo.DefaultPrinter">
            <summary>
            <para>Returns the default printer on the system.</para>
            <para>The return value should be checked using isNull() before being used, in case there is no default printer.</para>
            <para>On some systems it is possible for there to be available printers but none of them set to be the default printer.</para>
            <para>See also isNull(), isDefault(), and availablePrinters().</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintPreviewWidget">
            <summary>
            <para>The QPrintPreviewWidget class provides a widget for previewing page layouts for printer output.</para>
            </summary>
            <remarks>
            <para>QPrintPreviewDialog uses a QPrintPreviewWidget internally, and the purpose of QPrintPreviewWidget is to make it possible to embed the preview into other widgets. It also makes it possible to build a different user interface around it than the default one provided with QPrintPreviewDialog.</para>
            <para>Using QPrintPreviewWidget is straightforward:</para>
            <para>Create the QPrintPreviewWidgetConstruct the QPrintPreviewWidget either by passing in an existing QPrinter object, or have QPrintPreviewWidget create a default constructed QPrinter object for you.</para>
            <para></para>
            <para>Connect the paintRequested() signal to a slot.When the widget needs to generate a set of preview pages, a paintRequested() signal will be emitted from the widget. Connect a slot to this signal, and draw onto the QPrinter passed in as a signal parameter. Call QPrinter::newPage(), to start a new page in the preview.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPrinter, QPrintDialog, QPageSetupDialog, and QPrintPreviewDialog.</para>
            </remarks>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.#ctor(QtPrintSupport.QPrinter,QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>Constructs a QPrintPreviewWidget based on printer and with parent as the parent widget. The widget flags flags are passed on to the QWidget constructor.</para>
            <para>See also QWidget::setWindowFlags().</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.#ctor(QtWidgets.QWidget,QtCore.Qt.WindowType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This will cause QPrintPreviewWidget to create an internal, default constructed QPrinter object, which will be used to generate the preview.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.Print">
            <summary>
            <para>Prints the preview to the printer associated with the preview.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.ZoomIn(System.Double)">
            <summary>
            <para>Zooms the current view in by factor. The default value for factor is 1.1, which means the view will be scaled up by 10%.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.ZoomOut(System.Double)">
            <summary>
            <para>Zooms the current view out by factor. The default value for factor is 1.1, which means the view will be scaled down by 10%.</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.FitToWidth">
            <summary>
            <para>This is a convenience function and is the same as calling setZoomMode(QPrintPreviewWidget::FitToWidth).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.FitInView">
            <summary>
            <para>This is a convenience function and is the same as calling setZoomMode(QPrintPreviewWidget::FitInView).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.SetLandscapeOrientation">
            <summary>
            <para>This is a convenience function and is the same as calling setOrientation(QPrinter::Landscape).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.SetPortraitOrientation">
            <summary>
            <para>This is a convenience function and is the same as calling setOrientation(QPrinter::Portrait).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.SetSinglePageViewMode">
            <summary>
            <para>This is a convenience function and is the same as calling setViewMode(QPrintPreviewWidget::SinglePageView).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.SetFacingPagesViewMode">
            <summary>
            <para>This is a convenience function and is the same as calling setViewMode(QPrintPreviewWidget::FacingPagesView).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.SetAllPagesViewMode">
            <summary>
            <para>This is a convenience function and is the same as calling setViewMode(QPrintPreviewWidget::AllPagesView).</para>
            </summary>
        </member>
        <member name="M:QtPrintSupport.QPrintPreviewWidget.UpdatePreview">
            <summary>
            <para>This function updates the preview, which causes the paintRequested() signal to be emitted.</para>
            </summary>
        </member>
        <member name="E:QtPrintSupport.QPrintPreviewWidget.PaintRequested">
            <summary>
            <para>This signal is emitted when the preview widget needs to generate a set of preview pages. printer is the printer associated with this preview widget.</para>
            </summary>
        </member>
        <member name="E:QtPrintSupport.QPrintPreviewWidget.PreviewChanged">
            <summary>
            <para>This signal is emitted whenever the preview widget has changed some internal state, such as the orientation.</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.Visible">
            <summary>
            <para>This property holds whether the widget is visible.</para>
            <para>Calling setVisible(true) or show() sets the widget to visible status if all its parent widgets up to the window are visible. If an ancestor is not visible, the widget won't become visible until all its ancestors are shown. If its size or position has changed, Qt guarantees that a widget gets move and resize events just before it is shown. If the widget has not been resized yet, Qt will adjust the widget's size to a useful default using adjustSize().</para>
            <para>Calling setVisible(false) or hide() hides a widget explicitly. An explicitly hidden widget will never become visible, even if all its ancestors become visible, unless you show it.</para>
            <para>A widget receives show and hide events when its visibility status changes. Between a hide and a show event, there is no need to waste CPU cycles preparing or displaying information to the user. A video application, for example, might simply stop generating new frames.</para>
            <para>A widget that happens to be obscured by other windows on the screen is considered to be visible. The same applies to iconified windows and windows that exist on another virtual desktop (on platforms that support this concept). A widget receives spontaneous show and hide events when its mapping status is changed by the window system, e.g. a spontaneous hide event when the user minimizes the window, and a spontaneous show event when the window is restored again.</para>
            <para>You almost never have to reimplement the setVisible() function. If you need to change some settings before a widget is shown, use showEvent() instead. If you need to do some delayed initialization use the Polish event delivered to the event() function.</para>
            <para>See also show(), hide(), isHidden(), isVisibleTo(), isMinimized(), showEvent(), and hideEvent().</para>
            <para></para>
            <para>Reimplemented from QWidget::setVisible().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.ZoomFactor">
            <summary>
            <para>Returns the zoom factor of the view.</para>
            <para>See also setZoomFactor().</para>
            <para></para>
            <para>Sets the zoom factor of the view to factor. For example, a value of 1.0 indicates an unscaled view, which is approximately the size the view will have on paper. A value of 0.5 will halve the size of the view, while a value of 2.0 will double the size of the view.</para>
            <para>See also zoomFactor().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.Orientation">
            <summary>
            <para>Returns the current orientation of the preview. This value is obtained from the QPrinter object associated with the preview.</para>
            <para>See also setOrientation().</para>
            <para></para>
            <para>Sets the current orientation to orientation. This value will be set on the QPrinter object associated with the preview.</para>
            <para>See also orientation().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.viewMode">
            <summary>
            <para>Returns the current view mode. The default view mode is SinglePageView.</para>
            <para>See also setViewMode().</para>
            <para></para>
            <para>Sets the view mode to mode. The default view mode is SinglePageView.</para>
            <para>See also viewMode().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.zoomMode">
            <summary>
            <para>Returns the current zoom mode.</para>
            <para>See also setZoomMode(), viewMode(), and setViewMode().</para>
            <para></para>
            <para>Sets the zoom mode to zoomMode. The default zoom mode is FitInView.</para>
            <para>See also zoomMode(), viewMode(), and setViewMode().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.CurrentPage">
            <summary>
            <para>Returns the currently viewed page in the preview.</para>
            <para>See also setCurrentPage().</para>
            <para></para>
            <para>Sets the current page in the preview. This will cause the view to skip to the beginning of page.</para>
            <para>See also currentPage().</para>
            </summary>
        </member>
        <member name="P:QtPrintSupport.QPrintPreviewWidget.PageCount">
            <summary>
            <para>Returns the number of pages in the preview.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtPrintSupport.QPrintPreviewWidget.ViewMode">
            <summary>
            <para>This enum is used to describe the view mode of the preview widget.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ViewMode.SinglePageView">
            <summary>A mode where single pages in the preview is viewed.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ViewMode.FacingPagesView">
            <summary>A mode where the facing pages in the preview is viewed.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ViewMode.AllPagesView">
            <summary>A view mode where all the pages in the preview is viewed.</summary>
        </member>
        <member name="T:QtPrintSupport.QPrintPreviewWidget.ZoomMode">
            <summary>
            <para>This enum is used to describe zoom mode of the preview widget.</para>
            </summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ZoomMode.CustomZoom">
            <summary>The zoom is set to a custom zoom value.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ZoomMode.FitToWidth">
            <summary>This mode fits the current page to the width of the view.</summary>
        </member>
        <member name="F:QtPrintSupport.QPrintPreviewWidget.ZoomMode.FitInView">
            <summary>This mode fits the current page inside the view.</summary>
        </member>
    </members>
</doc>
