<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtLocation.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtLocation.QLocation.Visibility">
            <summary>
            <para>Defines the visibility of a QPlace or QPlaceCategory.</para>
            <para>A particular manager may support one or more visibility scopes. For example a manager from one provider may only provide places that are public to everyone, whilst another may provide both public and private places.</para>
            <para>Note: The meaning of unspecified visibility depends on the context it is used.</para>
            <para>When saving a place or category, the default visibility is unspecified meaning that the manager chooses an appropriate visibility scope for the item.</para>
            <para>When searching for places, unspecified means that places of any scope is returned.</para>
            <para>The VisibilityScope type is a typedef for QFlags&lt;Visibility&gt;. It stores an OR combination of Visibility values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QLocation.Visibility.UnspecifiedVisibility">
            <summary>No explicit visibility has been defined.</summary>
        </member>
        <member name="F:QtLocation.QLocation.Visibility.DeviceVisibility">
            <summary>Places and categories with DeviceVisibility are only stored on the local device.</summary>
        </member>
        <member name="F:QtLocation.QLocation.Visibility.PrivateVisibility">
            <summary>Places and categories with PrivateVisibility are only visible to the current user. The data may be stored either locally or on a remote service or both.</summary>
        </member>
        <member name="F:QtLocation.QLocation.Visibility.PublicVisibility">
            <summary>Places and categories with PublicVisibility are visible to everyone.</summary>
        </member>
        <member name="T:QtLocation.QGeoCodeReply">
            <summary>
            <para>The QGeoCodeReply class manages an operation started by an instance of QGeoCodingManager.</para>
            </summary>
            <remarks>
            <para>Instances of QGeoCodeReply manage the state and results of these operations.</para>
            <para>The isFinished(), error() and errorString() methods provide information on whether the operation has completed and if it completed successfully.</para>
            <para>The finished() and error(QGeoCodeReply::Error,QString) signals can be used to monitor the progress of the operation.</para>
            <para>It is possible that a newly created QGeoCodeReply may be in a finished state, most commonly because an error has occurred. Since such an instance will never emit the finished() or error(QGeoCodeReply::Error,QString) signals, it is important to check the result of isFinished() before making the connections to the signals. The documentation for QGeoCodingManager demonstrates how this might be carried out.</para>
            <para>If the operation completes successfully the results will be able to be accessed with locations().</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoCodeReply.#ctor(QtLocation.QGeoCodeReply.Error,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a geocode reply with a given error and errorString and the specified parent.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodeReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a geocode reply with the specified parent.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodeReply.Abort">
            <summary>
            <para>Cancels the operation immediately.</para>
            <para>This will do nothing if the reply is finished.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodeReply.SetError(QtLocation.QGeoCodeReply.Error,System.String)">
            <summary>
            <para>Sets the error state of this reply to error and the textual representation of the error to errorString.</para>
            <para>This will also cause error() and finished() signals to be emitted, in that order.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodeReply.AddLocation(QtPositioning.QGeoLocation)">
            <summary>
            <para>Adds location to the list of locations in this reply.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodeReply.OnFinished">
            <summary>
            <para>This signal is emitted when this reply has finished processing.</para>
            <para>If error() equals QGeoCodeReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoCodingManager::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para>See also setFinished().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodeReply.OnError">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of this reply. The finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoCodingManager::error() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(geoCodeReply, static_cast&lt;void(QGeoCodeReply::*)(QGeoCodeReply::Error, const QString &amp;)&gt;(&amp;QGeoCodeReply::error),</para>
            <para>      [=](QGeoCodeReply::Error error, const QString &amp;errorString){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.Finished">
            <summary>
            <para>Return true if the operation completed successfully or encountered an error which cause the operation to come to a halt.</para>
            <para></para>
            <para>Sets whether or not this reply has finished to finished.</para>
            <para>If finished is true, this will cause the finished() signal to be emitted.</para>
            <para>If the operation completed successfully, QGeoCodeReply::setLocations() should be called before this function. If an error occurred, QGeoCodeReply::setError() should be used instead.</para>
            <para>See also finished().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.Viewport">
            <summary>
            <para>Returns the viewport which contains the results.</para>
            <para>This function will return 0 if no viewport bias was specified in the QGeoCodingManager function which created this reply.</para>
            <para>See also setViewport().</para>
            <para></para>
            <para>Sets the viewport which contains the results to viewport.</para>
            <para>See also viewport().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.Limit">
            <summary>
            <para>Returns the limit on the number of responses from each data source.</para>
            <para>If no limit was set this function will return -1.</para>
            <para>This may be more than locations().length() if the number of responses was less than the number requested.</para>
            <para>See also setLimit().</para>
            <para></para>
            <para>Sets the limit on the number of responses from each data source to limit.</para>
            <para>If limit is -1 then all available responses will be returned.</para>
            <para>See also limit().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.Offset">
            <summary>
            <para>Returns the offset into the entire result set at which to start fetching results.</para>
            <para>See also setOffset().</para>
            <para></para>
            <para>Sets the offset in the entire result set at which to start fetching result to offset.</para>
            <para>See also offset().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.error">
            <summary>
            <para>Returns the error state of this reply.</para>
            <para>If the result is QGeoCodeReply::NoError then no error has occurred.</para>
            <para>See also setError().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodeReply.ErrorString">
            <summary>
            <para>Returns the textual representation of the error state of this reply.</para>
            <para>If no error has occurred this will return an empty string. It is possible that an error occurred which has no associated textual representation, in which case this will also return an empty string.</para>
            <para>To determine whether an error has occurred, check to see if QGeoCodeReply::error() is equal to QGeoCodeReply::NoError.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoCodeReply.Error">
            <summary>
            <para>Describes an error which prevented the completion of the operation.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.EngineNotSetError">
            <summary>The geocoding manager that was used did not have a QGeoCodingManagerEngine instance associated with it.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.CommunicationError">
            <summary>An error occurred while communicating with the service provider.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.ParseError">
            <summary>The response from the service provider was in an unrecognizable format.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.UnsupportedOptionError">
            <summary>The requested operation or one of the options for the operation are not supported by the service provider.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.CombinationError">
            <summary>An error occurred while results where being combined from multiple sources.</summary>
        </member>
        <member name="F:QtLocation.QGeoCodeReply.Error.UnknownError">
            <summary>An error occurred which does not fit into any of the other categories.</summary>
        </member>
        <member name="T:QtLocation.QGeoCodingManager">
            <summary>
            <para>The QGeoCodingManager class provides support for geocoding operations.</para>
            </summary>
            <remarks>
            <para>The geocode() and reverseGeocode() functions return QGeoCodeReply objects, which manage these operations and report on the result of the operations and any errors which may have occurred.</para>
            <para>The geocode() and reverseGeocode() functions can be used to convert QGeoAddress instances to QGeoCoordinate instances and vice-versa.</para>
            <para>The geocode() function is also overloaded to allow a user to perform a free text geocoding operation, if the string provided can be interpreted as an address it can be geocoded to coordinate information.</para>
            <para>Instances of QGeoCodingManager can be accessed with QGeoServiceProvider::geocodingManager().</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.Geocode(QtPositioning.QGeoAddress,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins the geocoding of address. Geocoding is the process of finding a coordinate that corresponds to a given address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The address data returned in the results may be different from address. This will usually occur if the geocoding service backend uses a different canonical form of addresses or if address was only partially filled out.</para>
            <para>If bounds is non-null and is a valid QGeoShape it will be used to limit the results to those that are contained within bounds. This is particularly useful if address is only partially filled out, as the service will attempt to geocode all matches for the specified data.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.Geocode(System.String,System.Int32,System.Int32,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins geocoding for a location matching address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>If limit is -1 the entire result set will be returned, otherwise at most limit results will be returned.</para>
            <para>The offset parameter is used to ask the geocoding service to not return the first offset results.</para>
            <para>The limit and offset results are used together to implement paging.</para>
            <para>If bounds is non-null and a valid QGeoShape it will be used to limit the results to those that are contained within bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.ReverseGeocode(QtPositioning.QGeoCoordinate,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins the reverse geocoding of coordinate. Reverse geocoding is the process of finding an address that corresponds to a given coordinate.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the reverse geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsReverseGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>At that point QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The coordinate data returned in the results may be different from coordinate. This will usually occur if the reverse geocoding service backend shifts the coordinates to be closer to the matching addresses, or if the backend returns results at multiple levels of detail.</para>
            <para>If multiple results are returned by the reverse geocoding service backend they will be provided in order of specificity. This normally occurs if the backend is configured to reverse geocode across multiple levels of detail. As an example, some services will return address and coordinate pairs for the street address, the city, the state and the country.</para>
            <para>If bounds is non-null and a valid QGeoRectangle it will be used to limit the results to those that are contained within bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.Geocode(QtPositioning.QGeoAddress)">
            <summary>
            <para>Begins the geocoding of address. Geocoding is the process of finding a coordinate that corresponds to a given address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The address data returned in the results may be different from address. This will usually occur if the geocoding service backend uses a different canonical form of addresses or if address was only partially filled out.</para>
            <para>If bounds is non-null and is a valid QGeoShape it will be used to limit the results to those that are contained within bounds. This is particularly useful if address is only partially filled out, as the service will attempt to geocode all matches for the specified data.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.Geocode(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Begins geocoding for a location matching address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>If limit is -1 the entire result set will be returned, otherwise at most limit results will be returned.</para>
            <para>The offset parameter is used to ask the geocoding service to not return the first offset results.</para>
            <para>The limit and offset results are used together to implement paging.</para>
            <para>If bounds is non-null and a valid QGeoShape it will be used to limit the results to those that are contained within bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManager.ReverseGeocode(QtPositioning.QGeoCoordinate)">
            <summary>
            <para>Begins the reverse geocoding of coordinate. Reverse geocoding is the process of finding an address that corresponds to a given coordinate.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the reverse geocoding operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsReverseGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>At that point QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The coordinate data returned in the results may be different from coordinate. This will usually occur if the reverse geocoding service backend shifts the coordinates to be closer to the matching addresses, or if the backend returns results at multiple levels of detail.</para>
            <para>If multiple results are returned by the reverse geocoding service backend they will be provided in order of specificity. This normally occurs if the backend is configured to reverse geocode across multiple levels of detail. As an example, some services will return address and coordinate pairs for the street address, the city, the state and the country.</para>
            <para>If bounds is non-null and a valid QGeoRectangle it will be used to limit the results to those that are contained within bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManager::finished(), QGeoCodingManager::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodingManager.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply::error() equals QGeoCodeReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoCodeReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodingManager.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QGeoCodingManager::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoCodeReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManager.Locale">
            <summary>
            <para>Returns the locale used to hint to this geocoding manager about what language to use for the results.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale to be used by this manager to locale.</para>
            <para>If this geocoding manager supports returning the results in different languages, they will be returned in the language of locale.</para>
            <para>The locale used defaults to the system locale if this is not set.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManager.ManagerName">
            <summary>
            <para>Returns the name of the engine which implements the behaviour of this geocoding manager.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst the plugin implementations.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManager.ManagerVersion">
            <summary>
            <para>Returns the version of the engine which implements the behaviour of this geocoding manager.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst the plugin implementations.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoCodingManagerEngine">
            <summary>
            <para>The QGeoCodingManagerEngine class provides an interface and convenience methods to implementers of QGeoServiceProvider plugins who want to provide support for geocoding operations.</para>
            </summary>
            <remarks>
            <para>In the default implementation, supportsGeocoding() and supportsReverseGeocoding() returns false while geocode() and reverseGeocode() cause QGeoCodeReply::UnsupportedOptionError to occur.</para>
            <para>If the service provider supports geocoding the subclass should provide an implementation of geocode() and call setSupportsGeocoding(true) at some point in time before geocode() is called.</para>
            <para>Similarly, if the service provider supports reverse geocoding the subclass should provide an implementation reverseGeocode() and call setSupportsReverseGeocoding(true) at some point in time before reverseGeocode() is called.</para>
            <para>A subclass of QGeoCodingManagerEngine will often make use of a subclass fo QGeoCodeReply internally, in order to add any engine-specific data (such as a QNetworkReply object for network-based services) to the QGeoCodeReply instances used by the engine.</para>
            <para></para>
            <para>See also QGeoCodingManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoCodingManagerEngine.Geocode(QtPositioning.QGeoAddress,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins the geocoding of address. Geocoding is the process of finding a coordinate that corresponds to a given address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This engine and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The address data returned in the results may be different from address. This will usually occur if the geocoding service backend uses a different canonical form of addresses or if address was only partially filled out.</para>
            <para>If bounds is non-null and a valid QGeoShape it will be used to limit the results to those that are contained by bounds. This is particularly useful if address is only partially filled out, as the service will attempt to geocode all matches for the specified data.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManagerEngine::finished(), QGeoCodingManagerEngine::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManagerEngine.Geocode(System.String,System.Int32,System.Int32,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins geocoding for a location matching address.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the geocoding operation and to return the results of the operation.</para>
            <para>This engine and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>Once the operation has completed, QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>If limit is -1 the entire result set will be returned, otherwise at most limit results will be returned.</para>
            <para>The offset parameter is used to ask the geocoding service to not return the first offset results.</para>
            <para>The limit and offset results are used together to implement paging.</para>
            <para>If bounds is non-null and a valid QGeoShape it will be used to limit the results to those that are contained by bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManagerEngine::finished(), QGeoCodingManagerEngine::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoCodingManagerEngine.ReverseGeocode(QtPositioning.QGeoCoordinate,QtPositioning.QGeoShape)">
            <summary>
            <para>Begins the reverse geocoding of coordinate. Reverse geocoding is the process of finding an address that corresponds to a given coordinate.</para>
            <para>A QGeoCodeReply object will be returned, which can be used to manage the reverse geocoding operation and to return the results of the operation.</para>
            <para>This engine and the returned QGeoCodeReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsReverseGeocoding() returns false an QGeoCodeReply::UnsupportedOptionError will occur.</para>
            <para>At that point QGeoCodeReply::locations() can be used to retrieve the results, which will consist of a list of QGeoLocation objects. These objects represent a combination of coordinate and address data.</para>
            <para>The coordinate data returned in the results may be different from coordinate. This will usually occur if the reverse geocoding service backend shifts the coordinates to be closer to the matching addresses, or if the backend returns results at multiple levels of detail.</para>
            <para>If multiple results are returned by the reverse geocoding service backend they will be provided in order of specificity. This normally occurs if the backend is configured to reverse geocode across multiple levels of detail. As an example, some services will return address and coordinate pairs for the street address, the city, the state and the country.</para>
            <para>If bounds is non-null and a valid QGeoShape it will be used to limit the results to those that are contained by bounds.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoCodingManagerEngine::finished(), QGeoCodingManagerEngine::error(), QGeoCodeReply::finished() or QGeoCodeReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodingManagerEngine.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply::error() equals QGeoCodeReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoCodeReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoCodingManagerEngine.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QGeoCodingManagerEngine::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoCodeReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManagerEngine.Locale">
            <summary>
            <para>Returns the locale used to hint to this geocoding manager about what language to use for the results.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale to be used by this manager to locale.</para>
            <para>If this geocoding manager supports returning the results in different languages, they will be returned in the language of locale.</para>
            <para>The locale used defaults to the system locale if this is not set.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManagerEngine.ManagerName">
            <summary>
            <para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst plugin implementations.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoCodingManagerEngine.ManagerVersion">
            <summary>
            <para>Returns the version of this engine implementation.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst plugin implementations.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoManeuver">
            <summary>
            <para>The QGeoManeuver class represents the information relevant to the point at which two QGeoRouteSegments meet.</para>
            </summary>
            <remarks>
            <para>QGeoRouteSegment instances can be thought of as edges on a routing graph, with QGeoManeuver instances as optional labels attached to the vertices of the graph.</para>
            <para>The most interesting information help in a QGeoManeuver instance is normally the textual navigation to provide and the position at which to provide it, accessible by instructionText() and position() respectively.</para>
            <para>It is also possible to determine if a routing waypoint has been passed by checking if waypoint() returns a valid QGeoCoordinate.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoManeuver.#ctor">
            <summary>
            <para>Constructs a invalid maneuver object.</para>
            <para>The maneuver will remain invalid until one of setPosition(), setInstructionText(), setDirection(), setTimeToNextInstruction(), setDistanceToNextInstruction() or setWaypoint() is called.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoManeuver.#ctor(QtLocation.QGeoManeuver)">
            <summary>
            <para>Constructs a maneuver object from the contents of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoManeuver.op_Equality(QtLocation.QGeoManeuver,QtLocation.QGeoManeuver)">
            <summary>
            <para>Returns whether this maneuver is equal to other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoManeuver.op_Inequality(QtLocation.QGeoManeuver,QtLocation.QGeoManeuver)">
            <summary>
            <para>Returns whether this maneuver is not equal to other.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.Position">
            <summary>
            <para>Returns the position where instructionText() should be displayed.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Sets the position where instructionText() should be displayed to position.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.InstructionText">
            <summary>
            <para>Returns the textual navigation instructions.</para>
            <para>See also setInstructionText().</para>
            <para></para>
            <para>Sets the textual navigation instructions to instructionText.</para>
            <para>See also instructionText().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.Direction">
            <summary>
            <para>Returns the direction associated with the associated instruction.</para>
            <para>See also setDirection().</para>
            <para></para>
            <para>Sets the direction associated with the associated instruction to direction.</para>
            <para>See also direction().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.TimeToNextInstruction">
            <summary>
            <para>Returns the estimated time it will take to travel from the point at which the associated instruction was issued and the point that the next instruction should be issued, in seconds.</para>
            <para>See also setTimeToNextInstruction().</para>
            <para></para>
            <para>Sets the estimated time it will take to travel from the point at which the associated instruction was issued and the point that the next instruction should be issued, in seconds, to secs.</para>
            <para>See also timeToNextInstruction().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.DistanceToNextInstruction">
            <summary>
            <para>Returns the distance, in meters, between the point at which the associated instruction was issued and the point that the next instruction should be issued.</para>
            <para>See also setDistanceToNextInstruction().</para>
            <para></para>
            <para>Sets the distance, in meters, between the point at which the associated instruction was issued and the point that the next instruction should be issued to distance.</para>
            <para>See also distanceToNextInstruction().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.Waypoint">
            <summary>
            <para>Returns the waypoint associated with this maneuver.</para>
            <para>If there is not waypoint associated with this maneuver an invalid QGeoCoordinate will be returned.</para>
            <para>See also setWaypoint().</para>
            <para></para>
            <para>Sets the waypoint associated with this maneuver to coordinate.</para>
            <para>See also waypoint().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoManeuver.IsValid">
            <summary>
            <para>Returns whether this maneuver is valid or not.</para>
            <para>Invalid maneuvers are used when there is no information that needs to be attached to the endpoint of a QGeoRouteSegment instance.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoManeuver.InstructionDirection">
            <summary>
            <para>Describes the change in direction associated with the instruction text that is associated with a QGeoManaeuver.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.NoDirection">
            <summary>There is no direction associated with the instruction text.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionForward">
            <summary>The instruction indicates that the direction of travel does not need to change.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionBearRight">
            <summary>The instruction indicates that the direction of travel should bear to the right.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionLightRight">
            <summary>The instruction indicates that a light turn to the right is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionRight">
            <summary>The instruction indicates that a turn to the right is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionHardRight">
            <summary>The instruction indicates that a hard turn to the right is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionUTurnRight">
            <summary>The instruction indicates that a u-turn to the right is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionUTurnLeft">
            <summary>The instruction indicates that a u-turn to the left is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionHardLeft">
            <summary>The instruction indicates that a hard turn to the left is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionLeft">
            <summary>The instruction indicates that a turn to the left is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionLightLeft">
            <summary>The instruction indicates that a light turn to the left is required.</summary>
        </member>
        <member name="F:QtLocation.QGeoManeuver.InstructionDirection.DirectionBearLeft">
            <summary>The instruction indicates that the direction of travel should bear to the left.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest">
            <summary>
            <para>The QGeoRouteRequest class represents the parameters and restrictions which define a request for routing information.</para>
            </summary>
            <remarks>
            <para>The default state of a QGeoRouteRequest instance will result in a request for basic route segment and navigation maneuvers describing the fastest route by car which covers the given waypoints.</para>
            <para>There may be significant variation in the features supported by different providers of routing information, or even in the features supported by the same provider if different levels of authorization are used.</para>
            <para>There are several functions in QGeoRoutingManager which can be used to check which features are supported with the current provider and authorization level.</para>
            <para></para>
            <para>See also QGeoRoutingManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.#ctor(QtPositioning.QGeoCoordinate,QtPositioning.QGeoCoordinate)">
            <summary>
            <para>Constructs a request to calculate a route between origin and destination.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.#ctor(QtLocation.QGeoRouteRequest)">
            <summary>
            <para>Constructs a route request object from the contents of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.op_Equality(QtLocation.QGeoRouteRequest,QtLocation.QGeoRouteRequest)">
            <summary>
            <para>Returns whether this route request and other are equal.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.op_Inequality(QtLocation.QGeoRouteRequest,QtLocation.QGeoRouteRequest)">
            <summary>
            <para>Returns whether this route request and other are equal.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.SetFeatureWeight(QtLocation.QGeoRouteRequest.FeatureType,QtLocation.QGeoRouteRequest.FeatureWeight)">
            <summary>
            <para>Assigns the weight featureWeight to the feature featureType during the planning of the route.</para>
            <para>By default all features are assigned a weight of NeutralFeatureWeight.</para>
            <para>It is impossible to assign a weight to QGeoRouteRequest::NoFeature.</para>
            <para>See also featureWeight().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteRequest.featureWeight(QtLocation.QGeoRouteRequest.FeatureType)">
            <summary>
            <para>Returns the weight assigned to featureType in the planning of the route.</para>
            <para>If no feature weight has been specified for featureType then NeutralFeatureWeight will be returned.</para>
            <para>See also setFeatureWeight().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteRequest.NumberAlternativeRoutes">
            <summary>
            <para>Returns the number of alternative routes which will be requested.</para>
            <para>See also setNumberAlternativeRoutes().</para>
            <para></para>
            <para>Sets the number of alternative routes to request to alternatives. If alternatives is negative the number of alternative routes is set to 0.</para>
            <para>The default value is 0.</para>
            <para>See also numberAlternativeRoutes().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteRequest.TravelModes">
            <summary>
            <para>Returns the travel modes which this request specifies should be considered during the planning of the route.</para>
            <para>See also setTravelModes().</para>
            <para></para>
            <para>Sets the travel modes which should be considered during the planning of the route to travelModes.</para>
            <para>The default value is QGeoRouteRequest::CarTravel.</para>
            <para>See also travelModes().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteRequest.routeOptimization">
            <summary>
            <para>Returns the optimization criteria which this request specifies should be used while planning the route.</para>
            <para>See also setRouteOptimization().</para>
            <para></para>
            <para>Sets the optimization criteria to use while planning the route to optimization.</para>
            <para>The default value is QGeoRouteRequest::FastestRoute.</para>
            <para>See also routeOptimization().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteRequest.segmentDetail">
            <summary>
            <para>Returns the level of detail which will be used in the representation of routing segments.</para>
            <para>See also setSegmentDetail().</para>
            <para></para>
            <para>Sets the level of detail to use when representing routing segments to segmentDetail.</para>
            <para>See also segmentDetail().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteRequest.maneuverDetail">
            <summary>
            <para>Returns the level of detail which will be used in the representation of routing maneuvers.</para>
            <para>See also setManeuverDetail().</para>
            <para></para>
            <para>Sets the level of detail to use when representing routing maneuvers to maneuverDetail.</para>
            <para>The default value is QGeoRouteRequest::BasicManeuvers.</para>
            <para>See also maneuverDetail().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.TravelMode">
            <summary>
            <para>Defines modes of travel to be used for a route.</para>
            <para>The TravelModes type is a typedef for QFlags&lt;TravelMode&gt;. It stores an OR combination of TravelMode values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.TravelMode.CarTravel">
            <summary>The route will be optimized for someone who is driving a car.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.TravelMode.PedestrianTravel">
            <summary>The route will be optimized for someone who is walking.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.TravelMode.BicycleTravel">
            <summary>The route will be optimized for someone who is riding a bicycle.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.TravelMode.PublicTransitTravel">
            <summary>The route will be optimized for someone who is making use of public transit.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.TravelMode.TruckTravel">
            <summary>The route will be optimized for someone who is driving a truck.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.FeatureType">
            <summary>
            <para>Defines a feature which is important to the planning of a route.</para>
            <para>These values will be used in combination with QGeoRouteRequest::FeatureWeight to determine if they should or should not be part of the route.</para>
            <para>The FeatureTypes type is a typedef for QFlags&lt;FeatureType&gt;. It stores an OR combination of FeatureType values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.NoFeature">
            <summary>Used by QGeoRoutingManager::supportedFeatureTypes() to indicate that no features will be taken into account when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.TollFeature">
            <summary>Consdier tollways when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.HighwayFeature">
            <summary>Consider highways when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.PublicTransitFeature">
            <summary>Consider public transit when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.FerryFeature">
            <summary>Consider ferries when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.TunnelFeature">
            <summary>Consider tunnels when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.DirtRoadFeature">
            <summary>Consider dirt roads when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.ParksFeature">
            <summary>Consider parks when planning the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureType.MotorPoolLaneFeature">
            <summary>Consider motor pool lanes when planning the route.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.FeatureWeight">
            <summary>
            <para>Defines the weight to associate with a feature during the planning of a route.</para>
            <para>These values will be used in combination with QGeoRouteRequest::Feature to determine if they should or should not be part of the route.</para>
            <para>The FeatureWeights type is a typedef for QFlags&lt;FeatureWeight&gt;. It stores an OR combination of FeatureWeight values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureWeight.NeutralFeatureWeight">
            <summary>The presence or absence of the feature will not affect the planning of the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureWeight.PreferFeatureWeight">
            <summary>Routes which contain the feature will be preferred over those that do not.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureWeight.RequireFeatureWeight">
            <summary>Only routes which contain the feature will be considered, otherwise no route will be returned.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureWeight.AvoidFeatureWeight">
            <summary>Routes which do not contain the feature will be preferred over those that do.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.FeatureWeight.DisallowFeatureWeight">
            <summary>Only routes which do not contain the feature will be considered, otherwise no route will be returned.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.RouteOptimization">
            <summary>
            <para>Defines the type of optimization which is applied to the planning of the route.</para>
            <para>The RouteOptimizations type is a typedef for QFlags&lt;RouteOptimization&gt;. It stores an OR combination of RouteOptimization values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.RouteOptimization.ShortestRoute">
            <summary>Minimize the length of the journey.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.RouteOptimization.FastestRoute">
            <summary>Minimize the traveling time for the journey.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.RouteOptimization.MostEconomicRoute">
            <summary>Minimize the cost of the journey.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.RouteOptimization.MostScenicRoute">
            <summary>Maximize the scenic potential of the journey.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.SegmentDetail">
            <summary>
            <para>Defines the amount of route segment information that should be included with the route.</para>
            <para>The SegmentDetails type is a typedef for QFlags&lt;SegmentDetail&gt;. It stores an OR combination of SegmentDetail values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.SegmentDetail.NoSegmentData">
            <summary>No segment data should be included with the route. A route requested with this level of segment detail will initialize QGeoRouteSegment::path() as a straight line between the positions of the previous and next QGeoManeuver instances.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.SegmentDetail.BasicSegmentData">
            <summary>Basic segment data will be included with the route. This will include QGeoRouteSegment::path().</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteRequest.ManeuverDetail">
            <summary>
            <para>Defines the amount of maneuver information that should be included with the route.</para>
            <para>The ManeuverDetails type is a typedef for QFlags&lt;ManeuverDetail&gt;. It stores an OR combination of ManeuverDetail values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.ManeuverDetail.NoManeuvers">
            <summary>No maneuvers should be included with the route.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteRequest.ManeuverDetail.BasicManeuvers">
            <summary>Basic manevuers will be included with the route. This will include QGeoManeuver::instructionText().</summary>
        </member>
        <member name="T:QtLocation.QGeoRoute">
            <summary>
            <para>The QGeoRoute class represents a route between two points.</para>
            </summary>
            <remarks>
            <para>A QGeoRoute object contains high level information about a route, such as the length the route, the estimated travel time for the route, and enough information to render a basic image of the route on a map.</para>
            <para>The QGeoRoute object also contains a list of QGeoRouteSegment objecs which describe subsections of the route in greater detail.</para>
            <para>Routing information is normally requested using QGeoRoutingManager::calculateRoute(), which returns a QGeoRouteReply instance. If the operation is completed successfully the routing information can be accessed with QGeoRouteReply::routes()</para>
            <para></para>
            <para>See also QGeoRoutingManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRoute.#ctor">
            <summary>
            <para>Constructs a route object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRoute.#ctor(QtLocation.QGeoRoute)">
            <summary>
            <para>Constructs a route object from the contents of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRoute.op_Equality(QtLocation.QGeoRoute,QtLocation.QGeoRoute)">
            <summary>
            <para>Returns whether this route and other are equal.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRoute.op_Inequality(QtLocation.QGeoRoute,QtLocation.QGeoRoute)">
            <summary>
            <para>Returns whether this route and other are not equal.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.RouteId">
            <summary>
            <para>Returns the identifier of this route.</para>
            <para>Service providers which support the updating of routes commonly assign identifiers to routes. If this route did not come from such a service provider the function will return an empty string.</para>
            <para>See also setRouteId().</para>
            <para></para>
            <para>Sets the identifier of this route to id.</para>
            <para>Service providers which support the updating of routes commonly assign identifiers to routes. If this route came from such a service provider changing the identifier will probably cause route updates to stop working.</para>
            <para>See also routeId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.Request">
            <summary>
            <para>Returns the route request which describes the criteria used in the calculation of this route.</para>
            <para>See also setRequest().</para>
            <para></para>
            <para>Sets the route request which describes the criteria used in the calculcation of this route to request.</para>
            <para>See also request().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.Bounds">
            <summary>
            <para>Returns a bounding box which encompasses the entire route.</para>
            <para>See also setBounds().</para>
            <para></para>
            <para>Sets the bounding box which encompasses the entire route to bounds.</para>
            <para>See also bounds().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.FirstRouteSegment">
            <summary>
            <para>Returns the first route segment in the route.</para>
            <para>Will return an invalid route segment if there are no route segments associated with the route.</para>
            <para>The remaining route segments can be accessed sequentially with QGeoRouteSegment::nextRouteSegment.</para>
            <para>See also setFirstRouteSegment().</para>
            <para></para>
            <para>Sets the first route segment in the route to routeSegment.</para>
            <para>See also firstRouteSegment().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.TravelTime">
            <summary>
            <para>Returns the estimated amount of time it will take to traverse this route, in seconds.</para>
            <para>See also setTravelTime().</para>
            <para></para>
            <para>Sets the estimated amount of time it will take to traverse this route, in seconds, to secs.</para>
            <para>See also travelTime().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.Distance">
            <summary>
            <para>Returns the distance covered by this route, in meters.</para>
            <para>See also setDistance().</para>
            <para></para>
            <para>Sets the distance covered by this route, in meters, to distance.</para>
            <para>See also distance().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoute.TravelMode">
            <summary>
            <para>Returns the travel mode for the this route.</para>
            <para>This should be one of the travel modes returned by request().travelModes().</para>
            <para>See also setTravelMode().</para>
            <para></para>
            <para>Sets the travel mode for this route to mode.</para>
            <para>This should be one of the travel modes returned by request().travelModes().</para>
            <para>See also travelMode().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoRouteReply">
            <summary>
            <para>The QGeoRouteReply class manages an operation started by an instance of QGeoRoutingManager.</para>
            </summary>
            <remarks>
            <para>Instances of QGeoRouteReply manage the state and results of these operations.</para>
            <para>The isFinished(), error() and errorString() methods provide information on whether the operation has completed and if it completed successfully.</para>
            <para>The finished() and error(QGeoRouteReply::Error,QString) signals can be used to monitor the progress of the operation.</para>
            <para>It is possible that a newly created QGeoRouteReply may be in a finished state, most commonly because an error has occurred. Since such an instance will never emit the finished() or error(QGeoRouteReply::Error,QString) signals, it is important to check the result of isFinished() before making the connections to the signals. The documentation for QGeoRoutingManager demonstrates how this might be carried out.</para>
            <para>If the operation completes successfully the results will be able to be accessed with routes().</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRouteReply.#ctor(QtLocation.QGeoRouteReply.Error,System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a route reply with a given error and errorString and the specified parent.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteReply.#ctor(QtLocation.QGeoRouteRequest,QtCore.QObject)">
            <summary>
            <para>Constructs a route reply object based on request, with the specified parent.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteReply.Abort">
            <summary>
            <para>Cancels the operation immediately.</para>
            <para>This will do nothing if the reply is finished.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteReply.SetError(QtLocation.QGeoRouteReply.Error,System.String)">
            <summary>
            <para>Sets the error state of this reply to error and the textual representation of the error to errorString.</para>
            <para>This will also cause error() and finished() signals to be emitted, in that order.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRouteReply.OnFinished">
            <summary>
            <para>This signal is emitted when this reply has finished processing.</para>
            <para>If error() equals QGeoRouteReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoRoutingManager::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para>See also setFinished().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRouteReply.OnError">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of this reply. The finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoRoutingManager::error() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(geoRouteReply, static_cast&lt;void(QGeoRouteReply::*)(QGeoRouteReply::Error, const QString &amp;)&gt;(&amp;QGeoRouteReply::error),</para>
            <para>      [=](QGeoRouteReply::Error error, const QString &amp;errorString){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteReply.Finished">
            <summary>
            <para>Return true if the operation completed successfully or encountered an error which cause the operation to come to a halt.</para>
            <para></para>
            <para>Sets whether or not this reply has finished to finished.</para>
            <para>If finished is true, this will cause the finished() signal to be emitted.</para>
            <para>If the operation completed successfully, QGeoRouteReply::setRoutes() should be called before this function. If an error occurred, QGeoRouteReply::setError() should be used instead.</para>
            <para>See also finished().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteReply.error">
            <summary>
            <para>Returns the error state of this reply.</para>
            <para>If the result is QGeoRouteReply::NoError then no error has occurred.</para>
            <para>See also setError().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteReply.ErrorString">
            <summary>
            <para>Returns the textual representation of the error state of this reply.</para>
            <para>If no error has occurred this will return an empty string. It is possible that an error occurred which has no associated textual representation, in which case this will also return an empty string.</para>
            <para>To determine whether an error has occurred, check to see if QGeoRouteReply::error() is equal to QGeoRouteReply::NoError.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteReply.Request">
            <summary>
            <para>Returns the route request which specified the route.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoRouteReply.Error">
            <summary>
            <para>Describes an error which prevented the completion of the operation.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.EngineNotSetError">
            <summary>The routing manager that was used did not have a QGeoRoutingManagerEngine instance associated with it.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.CommunicationError">
            <summary>An error occurred while communicating with the service provider.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.ParseError">
            <summary>The response from the service provider was in an unrecognizable format.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.UnsupportedOptionError">
            <summary>The requested operation or one of the options for the operation are not supported by the service provider.</summary>
        </member>
        <member name="F:QtLocation.QGeoRouteReply.Error.UnknownError">
            <summary>An error occurred which does not fit into any of the other categories.</summary>
        </member>
        <member name="T:QtLocation.QGeoRouteSegment">
            <summary>
            <para>The QGeoRouteSegment class represents a segment of a route.</para>
            </summary>
            <remarks>
            <para>A QGeoRouteSegment instance has information about the physical layout of the route segment, the length of the route and estimated time required to traverse the route segment and an optional QGeoManeuver associated with the end of the route segment.</para>
            <para>QGeoRouteSegment instances can be thought of as edges on a routing graph, with QGeoManeuver instances as optional labels attached to the vertices of the graph.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRouteSegment.#ctor">
            <summary>
            <para>Constructs an invalid route segment object.</para>
            <para>The route segment will remain invalid until one of setNextRouteSegment(), setTravelTime(), setDistance(), setPath() or setManeuver() is called.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteSegment.#ctor(QtLocation.QGeoRouteSegment)">
            <summary>
            <para>Constructs a route segment object from the contents of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteSegment.op_Equality(QtLocation.QGeoRouteSegment,QtLocation.QGeoRouteSegment)">
            <summary>
            <para>Returns whether this route segment and other are equal.</para>
            <para>The value of nextRouteSegment() is not considered in the comparison.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRouteSegment.op_Inequality(QtLocation.QGeoRouteSegment,QtLocation.QGeoRouteSegment)">
            <summary>
            <para>Returns whether this route segment and other are not equal.</para>
            <para>The value of nextRouteSegment() is not considered in the comparison.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteSegment.NextRouteSegment">
            <summary>
            <para>Returns the next route segment in the route.</para>
            <para>Will return an invalid route segment if this is the last route segment in the route.</para>
            <para>See also setNextRouteSegment().</para>
            <para></para>
            <para>Sets the next route segment in the route to routeSegment.</para>
            <para>See also nextRouteSegment().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteSegment.TravelTime">
            <summary>
            <para>Returns the estimated amount of time it will take to traverse this segment of the route, in seconds.</para>
            <para>See also setTravelTime().</para>
            <para></para>
            <para>Sets the estimated amount of time it will take to traverse this segment of the route, in seconds, to secs.</para>
            <para>See also travelTime().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteSegment.Distance">
            <summary>
            <para>Returns the distance covered by this segment of the route, in meters.</para>
            <para>See also setDistance().</para>
            <para></para>
            <para>Sets the distance covered by this segment of the route, in meters, to distance.</para>
            <para>See also distance().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteSegment.Maneuver">
            <summary>
            <para>Returns the maneuver for this route segment.</para>
            <para>Will return an invalid QGeoManeuver if no information has been attached to the endpoint of this route segment.</para>
            <para>See also setManeuver().</para>
            <para></para>
            <para>Sets the maneuver for this route segment to maneuver.</para>
            <para>See also maneuver().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRouteSegment.IsValid">
            <summary>
            <para>Returns whether this route segment is valid or not.</para>
            <para>If nextRouteSegment() is called on the last route segment of a route, the returned value will be an invalid route segment.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoRoutingManager">
            <summary>
            <para>The QGeoRoutingManager class provides support for geographic routing operations.</para>
            </summary>
            <remarks>
            <para>The calculateRoute() and updateRoute() methods function QGeoRouteReply objects, which manage these operations and report on the result of the operations and any errors which may have occurred.</para>
            <para>The calculateRoute() function is used to find a route (or routes) that follows a set of waypoints and matches various other criteria. The QGeoRouteRequest class is used to specify this information.</para>
            <para>If supportsRouteUpdates() returns true then the QGeoRoutingManager supports updating route information based on position updates. This will cause the travel time and distance estimates to be updated, and any QGeoRouteSegments already traversed to be removed from the route.</para>
            <para>The updates can be triggered with the updateRoute() function, which makes use of the QGeoPositionInfo instances emitted as position updates by QGeoPositionInfoSource.</para>
            <para>Instances of QGeoRoutingManager can be accessed with QGeoServiceProvider::routingManager().</para>
            <para>A small example of the usage of QGeoRoutingManager and QGeoRouteRequests follows:</para>
            <para></para>
            <para></para>
            <para>  class MyRouteHandler : public QObject</para>
            <para>  {</para>
            <para>      Q_OBJECT</para>
            <para>  public:</para>
            <para>      MyRouteHandler(QGeoRoutingManager *routingManager,</para>
            <para>                     const QGeoCoordinate &amp;origin,</para>
            <para>                     const QGeoCoordinate &amp;destination) {</para>
            <para></para>
            <para>          QGeoRouteRequest request(origin, destination);</para>
            <para></para>
            <para>          // The request defaults to the fastest route by car, which is</para>
            <para>          // equivalent to:</para>
            <para>          // request.setTravelMode(QGeoRouteRequest::CarTravel);</para>
            <para>          // request.setRouteOptimization(QGeoRouteRequest::FastestRoute);</para>
            <para></para>
            <para>          request.setAvoidFeatureTypes(QGeoRouteRequest::AvoidTolls);</para>
            <para>          request.setAvoidFeatureTypes(QGeoRouteRequest::AvoidMotorPoolLanes);</para>
            <para></para>
            <para>          QGeoRouteRequest::AvoidFeaturesTypes avoidableFeatures = routingManager-&gt;supportedAvoidFeatureTypes();</para>
            <para></para>
            <para>          if (!(avoidableFeatures &amp; request.avoidFeatureTypes())) {</para>
            <para>              // ... inform the user that the routing manager does not</para>
            <para>              // provide support for avoiding tolls and/or motor pool lanes ...</para>
            <para>              return;</para>
            <para>          }</para>
            <para></para>
            <para>          QGeoRouteReply *reply = routingManager-&gt;calculateRoute(request);</para>
            <para></para>
            <para>          if (reply-&gt;isFinished()) {</para>
            <para>              if (reply-&gt;error() == QGeoRouteReply::NoError) {</para>
            <para>                  routeCalculated(reply);</para>
            <para>              } else {</para>
            <para>                  routeError(reply, reply-&gt;error(), reply-&gt;errorString());</para>
            <para>              }</para>
            <para>              return;</para>
            <para>          }</para>
            <para></para>
            <para>          connect(routingManager,</para>
            <para>                  SIGNAL(finished(QGeoRouteReply*)),</para>
            <para>                  this,</para>
            <para>                  SLOT(routeCalculated(QGeoRouteReply*)));</para>
            <para></para>
            <para>          connect(routingManager,</para>
            <para>                  SIGNAL(error(QGeoRouteReply*,QGeoRouteReply::Error,QString)),</para>
            <para>                  this,</para>
            <para>                  SLOT(routeError(QGeoRouteReply*,QGeoRouteReply::Error,QString)));</para>
            <para>      }</para>
            <para></para>
            <para>  private slots:</para>
            <para>      void routeCalculated(QGeoRouteReply *reply)</para>
            <para>      {</para>
            <para>          // A route request can ask for several alternative routes ...</para>
            <para>          if (reply-&gt;routes().size() != 0) {</para>
            <para></para>
            <para>              // ... but by default it will only get a single route</para>
            <para>              QGeoRoute route = reply-&gt;routes().at(0);</para>
            <para></para>
            <para>              //... now we have to make use of the route ...</para>
            <para>          }</para>
            <para></para>
            <para>          reply-&gt;deleteLater();</para>
            <para>      }</para>
            <para></para>
            <para>      void routeError(QGeoRouteReply *reply, QGeoRouteReply:Error error, const QString &amp;errorString)</para>
            <para>      {</para>
            <para>          // ... inform the user that an error has occurred ...</para>
            <para>          reply-&gt;deleteLater();</para>
            <para>      }</para>
            <para>  };</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRoutingManager.CalculateRoute(QtLocation.QGeoRouteRequest)">
            <summary>
            <para>Begins the calculation of the route specified by request.</para>
            <para>A QGeoRouteReply object will be returned, which can be used to manage the routing operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoRouteReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>Once the operation has completed, QGeoRouteReply::routes can be used to retrieve the calculated route or routes.</para>
            <para>If request includes features which are not supported by this manager, as reported by the methods in this manager, then a QGeoRouteReply::UnsupportedOptionError will occur.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoRoutingManager::finished(), QGeoRoutingManager::error(), QGeoRouteReply::finished() or QGeoRouteReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRoutingManager.UpdateRoute(QtLocation.QGeoRoute,QtPositioning.QGeoCoordinate)">
            <summary>
            <para>Begins the process of updating route based on the current position position.</para>
            <para>A QGeoRouteReply object will be returned, which can be used to manage the routing operation and to return the results of the operation.</para>
            <para>This manager and the returned QGeoRouteReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsRouteUpdates() returns false an QGeoRouteReply::UnsupportedOptionError will occur.</para>
            <para>Once the operation has completed, QGeoRouteReply::routes can be used to retrieve the updated route.</para>
            <para>The returned route could be entirely different to the original route, especially if position is far away from the initial route. Otherwise the route will be similar, although the remaining time and distance will be updated and any segments of the original route which have been traversed will be removed.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoRoutingManager::finished(), QGeoRoutingManager::error(), QGeoRouteReply::finished() or QGeoRouteReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRoutingManager.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply::error() equals QGeoRouteReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoRouteReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRoutingManager.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QGeoRoutingManager::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoRouteReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.Locale">
            <summary>
            <para>Returns the locale used to hint to this routing manager about what language to use for addresses and instructions.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale to be used by this manager to locale.</para>
            <para>If this routing manager supports returning addresses and instructions in different languages, they will be returned in the language of locale.</para>
            <para>The locale used defaults to the system locale if this is not set.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.MeasurementSystem">
            <summary>
            <para>Returns the measurement system used by this manager.</para>
            <para>If setMeasurementSystem() has been called then the value returned by this function may be different to that returned by locale().measurementSystem(). In which case the value returned by this function is what will be used by the manager.</para>
            <para>See also setMeasurementSystem() and setLocale().</para>
            <para></para>
            <para>Sets the measurement system used by this manager to system.</para>
            <para>The measurement system can be set independently of the locale. Both setLocale() and this function set the measurement system. The value set by the last function called will be used.</para>
            <para>See also measurementSystem(), locale(), and setLocale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.ManagerName">
            <summary>
            <para>Returns the name of the engine which implements the behaviour of this routing manager.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst the plugin implementations.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.ManagerVersion">
            <summary>
            <para>Returns the version of the engine which implements the behaviour of this routin manager.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst the plugin implementations.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedTravelModes">
            <summary>
            <para>Returns the travel modes supported by this manager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedFeatureTypes">
            <summary>
            <para>Returns the types of features that this manager can take into account during route planning.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedFeatureWeights">
            <summary>
            <para>Returns the weightings which this manager can apply to different features during route planning.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedRouteOptimizations">
            <summary>
            <para>Returns the route optimizations supported by this manager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedSegmentDetails">
            <summary>
            <para>Returns the levels of detail for routing segments which can be requested with this manager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManager.SupportedManeuverDetails">
            <summary>
            <para>Returns the levels of detail for navigation maneuvers which can be requested by this manager.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoRoutingManagerEngine">
            <summary>
            <para>The QGeoRoutingManagerEngine class provides an interface and convenience methods to implementers of QGeoServiceProvider plugins who want to provide access to geographic routing information.</para>
            </summary>
            <remarks>
            <para>Subclasses of QGeoRoutingManagerEngine need to provide an implementation of calculateRoute().</para>
            <para>In the default implementation, supportsRouteUpdates() returns false and updateRoute() returns a QGeoRouteReply object containing a QGeoRouteReply::UnsupportedOptionError.</para>
            <para>If the routing service supports updating routes as they are being traveled, the subclass should provide an implementation of updateRoute() and call setSupportsRouteUpdates(true) at some point in time before updateRoute() is called.</para>
            <para>The function setSupportsRouteUpdates() is one of several functions which configure the reported capabilities of the engine. If the capabilities of an engine differ from the default values these functions should be used so that the reported capabilities are accurate.</para>
            <para>It is important that this is done before calculateRoute(), updateRoute() or any of the capability reporting functions are used to prevent incorrect or inconsistent behavior.</para>
            <para>A subclass of QGeoRouteManagerEngine will often make use of a subclass fo QGeoRouteReply internally, in order to add any engine-specific data (such as a QNetworkReply object for network-based services) to the QGeoRouteReply instances used by the engine.</para>
            <para></para>
            <para>See also QGeoRoutingManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoRoutingManagerEngine.CalculateRoute(QtLocation.QGeoRouteRequest)">
            <summary>
            <para>Begins the calculation of the route specified by request.</para>
            <para>A QGeoRouteReply object will be returned, which can be used to manage the routing operation and to return the results of the operation.</para>
            <para>This engine and the returned QGeoRouteReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>Once the operation has completed, QGeoRouteReply::routes can be used to retrieve the calculated route or routes.</para>
            <para>If request includes features which are not supported by this engine, as reported by the methods in this engine, then a QGeoRouteReply::UnsupportedOptionError will occur.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoRoutingManagerEngine::finished(), QGeoRoutingManagerEngine::error(), QGeoRouteReply::finished() or QGeoRouteReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoRoutingManagerEngine.UpdateRoute(QtLocation.QGeoRoute,QtPositioning.QGeoCoordinate)">
            <summary>
            <para>Begins the process of updating route based on the current position position.</para>
            <para>A QGeoRouteReply object will be returned, which can be used to manage the routing operation and to return the results of the operation.</para>
            <para>This engine and the returned QGeoRouteReply object will emit signals indicating if the operation completes or if errors occur.</para>
            <para>If supportsRouteUpdates() returns false an QGeoRouteReply::UnsupportedOptionError will occur.</para>
            <para>Once the operation has completed, QGeoRouteReply::routes can be used to retrieve the updated route.</para>
            <para>The returned route could be entirely different to the original route, especially if position is far enough away from the initial route. Otherwise the route will be similar, although the remaining time and distance will be updated and any segments of the original route which have been traversed will be removed.</para>
            <para>The user is responsible for deleting the returned reply object, although this can be done in the slot connected to QGeoRoutingManagerEngine::finished(), QGeoRoutingManagerEngine::error(), QGeoRouteReply::finished() or QGeoRouteReply::error() with deleteLater().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRoutingManagerEngine.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply::error() equals QGeoRouteReply::NoError then the processing finished successfully.</para>
            <para>This signal and QGeoRouteReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QGeoRoutingManagerEngine.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QGeoRoutingManagerEngine::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error.</para>
            <para>This signal and QGeoRouteReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.Locale">
            <summary>
            <para>Returns the locale used to hint to this routing manager about what language to use for addresses and instructions.</para>
            <para>See also setLocale().</para>
            <para></para>
            <para>Sets the locale to be used by this manager to locale.</para>
            <para>If this routing manager supports returning addresses and instructions in different languages, they will be returned in the language of locale.</para>
            <para>The locale used defaults to the system locale if this is not set.</para>
            <para>See also locale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.MeasurementSystem">
            <summary>
            <para>Returns the measurement system used by this manager.</para>
            <para>If setMeasurementSystem() has been called then the value returned by this function may be different to that returned by locale().measurementSystem(). In which case the value returned by this function is what will be used by the manager.</para>
            <para>See also setMeasurementSystem() and setLocale().</para>
            <para></para>
            <para>Sets the measurement system used by this manager to system.</para>
            <para>The measurement system can be set independently of the locale. Both setLocale() and this function set the measurement system. The value set by the last function called will be used.</para>
            <para>See also measurementSystem(), locale(), and setLocale().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedTravelModes">
            <summary>
            <para>Returns the travel modes supported by this engine.</para>
            <para>See also setSupportedTravelModes().</para>
            <para></para>
            <para>Sets the travel modes supported by this engine to travelModes.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no travel modes at all.</para>
            <para>See also supportedTravelModes().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedFeatureTypes">
            <summary>
            <para>Returns the types of features that this engine can take into account during route planning.</para>
            <para>See also setSupportedFeatureTypes().</para>
            <para></para>
            <para>Sets the types of features that this engine can take into account during route planning to featureTypes.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no feature types at all.</para>
            <para>See also supportedFeatureTypes().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedFeatureWeights">
            <summary>
            <para>Returns the weightings which this engine can apply to different features during route planning.</para>
            <para>See also setSupportedFeatureWeights().</para>
            <para></para>
            <para>Sets the weightings which this engine can apply to different features during route planning to featureWeights.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no feature weights at all.</para>
            <para>See also supportedFeatureWeights().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedRouteOptimizations">
            <summary>
            <para>Returns the route optimizations supported by this engine.</para>
            <para>See also setSupportedRouteOptimizations().</para>
            <para></para>
            <para>Sets the route optimizations supported by this engine to optimizations.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no route optimizations at all.</para>
            <para>See also supportedRouteOptimizations().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedSegmentDetails">
            <summary>
            <para>Returns the levels of detail for routing segments which can be requested by this engine.</para>
            <para>See also setSupportedSegmentDetails().</para>
            <para></para>
            <para>Sets the levels of detail for routing segments which can be requested by this engine to segmentDetails.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no segment detail at all.</para>
            <para>See also supportedSegmentDetails().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.SupportedManeuverDetails">
            <summary>
            <para>Returns the levels of detail for navigation maneuvers which can be requested by this engine.</para>
            <para>See also setSupportedManeuverDetails().</para>
            <para></para>
            <para>Sets the levels of detail for navigation maneuvers which can be requested by this engine to maneuverDetails.</para>
            <para>It is important that subclasses use this method to ensure that the engine reports its capabilities correctly. If this function is not used the engine will report that it supports no maneuver details at all.</para>
            <para>See also supportedManeuverDetails().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.ManagerName">
            <summary>
            <para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst plugin implementations.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoRoutingManagerEngine.ManagerVersion">
            <summary>
            <para>Returns the version of this engine implementation.</para>
            <para>The combination of managerName() and managerVersion() should be unique amongst plugin implementations.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider">
            <summary>
            <para>The QGeoServiceProvider class aggregates access to services which provide geographical information.</para>
            </summary>
            <remarks>
            <para>The Maps and Navigation API allows people to access various kinds of geographical information, including functionality to perform geocoding, routing and the display of maps. The QGeoServiceProvider aggregates the access to a set of these services that are provided by a single vendor.</para>
            <para>It is possible to mix and match service providers for the various domains, so that a geocoding manager from one service provider can be used with a geographic routing manager from another service provider.</para>
            <para>This is not recommended unless the client is able to verify that the data provided by the different services are compatible, as differences in the underlying data sets could cause serious incongruences between the services.</para>
            <para>Subclasses of QGeoServiceProvider guarantee that the different services that they provide are interoperable.</para>
            <para>At this point there are two GeoServices plugins packaged with Qt. They are accessible using their provider names:</para>
            <para></para>
            <para>&quot;mapbox&quot; -&gt; Mapbox service</para>
            <para>&quot;here&quot; -&gt; HERE Services</para>
            <para>&quot;osm&quot; -&gt; OpenStreetMap Services</para>
            <para></para>
            <para>Each service provider must follow a naming convention for their service specific parameter names/keys. They use the provider name as prefix for all their parameter names. For example, the HERE service provider requires the here.app_id parameter. When a provider is loaded only those parameters are passed on whose parameter names start with the provider name. This avoids the sharing sensitive parameters such as confidential token or app_id parameters with other plugins.</para>
            <para>Please check the GeoServices plugin specific documentation to obtain a complete list of the available parameter names/keys and values.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QGeoServiceProvider.SetLocale(QtCore.QLocale)">
            <summary>
            <para>Sets the locale used by this service provider to locale. If the relevant features (see LocalizedMappingFeature etc), this will change the languages, units and other locale-specific attributes of the provider's data.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QGeoServiceProvider.SetAllowExperimental(System.Boolean)">
            <summary>
            <para>Sets whether experimental plugins are considered when locating the correct plugin library for this service provider to allow.</para>
            <para>Important: this will destroy any existing managers held by this service provider instance. You should be sure not to attempt to use any pointers that you have previously retrieved after calling this method.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.AvailableServiceProviders">
            <summary>
            <para>Returns a list of names of the available service providers, for use with the QGeoServiceProvider constructors.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.RoutingFeatures">
            <summary>
            <para>Returns the routing features supported by the geo service provider.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.GeocodingFeatures">
            <summary>
            <para>Returns the geocoding features supported by the geo service provider.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.MappingFeatures">
            <summary>
            <para>Returns the mapping features supported by the geo service provider.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.PlacesFeatures">
            <summary>
            <para>Returns the places features supported by the geo service provider.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.GeocodingManager">
            <summary>
            <para>Returns the QGeoCodingManager made available by the service provider.</para>
            <para>This function will return 0 if the service provider does not provide any geocoding services.</para>
            <para>This function will attempt to construct a QGeoCodingManager instance when it is called for the first time. If the attempt is successful the QGeoCodingManager will be cached, otherwise each call of this function will attempt to construct a QGeoCodingManager instance until the construction is successful.</para>
            <para>The QGeoCodingManager is owned by this QGeoServiceProvider and should not be deleted separately. Users should assume that deleting the QGeoServiceProvider renders the pointer returned by this method invalid.</para>
            <para>After this function has been called, error() and errorString() will report any errors which occurred during the construction of the QGeoCodingManager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.RoutingManager">
            <summary>
            <para>Returns the QGeoRoutingManager made available by the service provider.</para>
            <para>This function will return 0 if the service provider does not provide any geographic routing services.</para>
            <para>This function will attempt to construct a QGeoRoutingManager instance when it is called for the first time. If the attempt is successful the QGeoRoutingManager will be cached, otherwise each call of this function will attempt to construct a QGeoRoutingManager instance until the construction is successful.</para>
            <para>The QGeoRoutingManager is owned by this QGeoServiceProvider and should not be deleted separately. Users should assume that deleting the QGeoServiceProvider renders the pointer returned by this method invalid.</para>
            <para>After this function has been called, error() and errorString() will report any errors which occurred during the construction of the QGeoRoutingManager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.PlaceManager">
            <summary>
            <para>Returns the QPlaceManager made available by the service provider.</para>
            <para>This function will attempt to construct a QPlaceManager instance when it is called for the first time. If the attempt is successful the QPlaceManager will be cached, otherwise each call of this function will attempt to construct a QPlace instance until the construction is successful.</para>
            <para>The QGeoPlaceManager is owned by this QGeoServiceProvider and should not be deleted separately. Users should assume that deleting the QGeoServiceProvider renders the pointer returned by this method invalid.</para>
            <para>After this function has been called, error() and errorString() will report any errors which occurred during the construction of the QPlaceManager.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.error">
            <summary>
            <para>Returns an error code describing the error which occurred during the last operation that was performed by this class.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QGeoServiceProvider.ErrorString">
            <summary>
            <para>Returns a string describing the error which occurred during the last operation that was performed by this class.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider.Error">
            <summary>
            <para>Describes an error related to the loading and setup of a service provider plugin.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.Error.NoError">
            <summary>No error has occurred.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.Error.NotSupportedError">
            <summary>The plugin does not support this functionality.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.Error.UnknownParameterError">
            <summary>The plugin did not recognize one of the parameters it was given.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.Error.MissingRequiredParameterError">
            <summary>The plugin did not find one of the parameters it was expecting.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.Error.ConnectionError">
            <summary>The plugin could not connect to its backend service or database.</summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider.RoutingFeature">
            <summary>
            <para>Describes the routing features supported by the geo service provider.</para>
            <para>The RoutingFeatures type is a typedef for QFlags&lt;RoutingFeature&gt;. It stores an OR combination of RoutingFeature values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.NoRoutingFeatures">
            <summary>No routing features are supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.OnlineRoutingFeature">
            <summary>Online routing is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.OfflineRoutingFeature">
            <summary>Offline routing is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.LocalizedRoutingFeature">
            <summary>Supports returning routes with localized addresses and instructions.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.RouteUpdatesFeature">
            <summary>Updating an existing route based on the current position is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.AlternativeRoutesFeature">
            <summary>Supports returning alternative routes.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.ExcludeAreasRoutingFeature">
            <summary>Supports specifying a areas which the returned route must not cross.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.RoutingFeature.AnyRoutingFeatures">
            <summary>Matches a geo service provider that provides any routing features.</summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider.GeocodingFeature">
            <summary>
            <para>Describes the geocoding features supported by the geo service provider.</para>
            <para>The GeocodingFeatures type is a typedef for QFlags&lt;GeocodingFeature&gt;. It stores an OR combination of GeocodingFeature values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.NoGeocodingFeatures">
            <summary>No geocoding features are supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.OnlineGeocodingFeature">
            <summary>Online geocoding is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.OfflineGeocodingFeature">
            <summary>Offline geocoding is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.ReverseGeocodingFeature">
            <summary>Reverse geocoding is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.LocalizedGeocodingFeature">
            <summary>Supports returning geocoding results with localized addresses.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.GeocodingFeature.AnyGeocodingFeatures">
            <summary>Matches a geo service provider that provides any geocoding features.</summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider.MappingFeature">
            <summary>
            <para>Describes the mapping features supported by the geo service provider.</para>
            <para>The MappingFeatures type is a typedef for QFlags&lt;MappingFeature&gt;. It stores an OR combination of MappingFeature values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.MappingFeature.NoMappingFeatures">
            <summary>No mapping features are supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.MappingFeature.OnlineMappingFeature">
            <summary>Online mapping is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.MappingFeature.OfflineMappingFeature">
            <summary>Offline mapping is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.MappingFeature.LocalizedMappingFeature">
            <summary>Supports returning localized map data.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.MappingFeature.AnyMappingFeatures">
            <summary>Matches a geo service provider that provides any mapping features.</summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProvider.PlacesFeature">
            <summary>
            <para>Describes the places features supported by the geo service provider.</para>
            <para>The PlacesFeatures type is a typedef for QFlags&lt;PlacesFeature&gt;. It stores an OR combination of PlacesFeature values.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.NoPlacesFeatures">
            <summary>No places features are supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.OnlinePlacesFeature">
            <summary>Online places is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.OfflinePlacesFeature">
            <summary>Offline places is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.SavePlaceFeature">
            <summary>Saving places is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.RemovePlaceFeature">
            <summary>Removing or deleting places is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.SaveCategoryFeature">
            <summary>Saving categories is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.RemoveCategoryFeature">
            <summary>Removing or deleting categories is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.PlaceRecommendationsFeature">
            <summary>Searching for recommended places similar to another place is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.SearchSuggestionsFeature">
            <summary>Search suggestions is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.LocalizedPlacesFeature">
            <summary>Supports returning localized place data.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.NotificationsFeature">
            <summary>Notifications of place and category changes is supported.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.PlaceMatchingFeature">
            <summary>Supports matching places from two different geo service providers.</summary>
        </member>
        <member name="F:QtLocation.QGeoServiceProvider.PlacesFeature.AnyPlacesFeatures">
            <summary>Matches a geo service provider that provides any places features.</summary>
        </member>
        <member name="T:QtLocation.QGeoServiceProviderFactory">
            <summary>
            <para>The QGeoServiceProviderFactory class is a factory class used as the plugin interface for services related to geographical information.</para>
            </summary>
            <remarks>
            <para>Implementers must provide a unique combination of providerName() and providerVersion() per plugin.</para>
            <para>The other functions should be overridden if the plugin supports the associated set of functionality.</para>
            </remarks>
        </member>
        <member name="T:QtLocation.QPlaceCategory">
            <summary>
            <para>The QPlaceCategory class represents a category that a QPlace can be associated with.</para>
            </summary>
            <remarks>
            <para>Categories are used to search for places based on the categories they are associated with. The list/tree of available categories can be obtained from QPlaceManager. The QPlaceSearchRequest::setCategories() function can be used to limit the search results to places with the specified categories.</para>
            <para>If the QGeoServiceProvider supports it, categories can be created and removed. This functionality is available in the QPlaceManager class.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceCategory.#ctor">
            <summary>
            <para>Constructs a category.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceCategory.#ctor(QtLocation.QPlaceCategory)">
            <summary>
            <para>Constructs a category which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceCategory.op_Equality(QtLocation.QPlaceCategory,QtLocation.QPlaceCategory)">
            <summary>
            <para>Returns true if other is equal to this category; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceCategory.op_Inequality(QtLocation.QPlaceCategory,QtLocation.QPlaceCategory)">
            <summary>
            <para>Returns true if other is not equal to this category; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceCategory.CategoryId">
            <summary>
            <para>Returns the identifier of the category. The category identifier is a string which uniquely identifies this category within a particular QPlaceManager. The identifier is only meaningful to the QPlaceManager that generated it and is not transferable between managers.</para>
            <para>See also setCategoryId().</para>
            <para></para>
            <para>Sets the identifier of the category.</para>
            <para>See also categoryId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceCategory.Name">
            <summary>
            <para>Returns the name of category.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the category.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceCategory.Visibility">
            <summary>
            <para>Returns the visibility of the category.</para>
            <para>See also setVisibility().</para>
            <para></para>
            <para>Sets the visibility of the category.</para>
            <para>See also visibility().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceCategory.Icon">
            <summary>
            <para>Returns the icon associated with the category.</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the icon of the category.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceCategory.IsEmpty">
            <summary>
            <para>Returns a boolean indicating whether the all the fields of the place category are empty or not.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceContent">
            <summary>
            <para>The QPlaceContent class serves as the base class for rich content types.</para>
            </summary>
            <remarks>
            <para>Rich content such as images, reviews and editorials inherit from the QPlaceContent class which contains common properties such as an attribution string and content contributor, which may take the form of a user and/or supplier. It is possible that a user from a supplier is contributing content, hence both fields could be filled in simultaneously.</para>
            <para>Note: Some providers may require that the attribution string be displayed to the user whenever a piece of content is viewed.</para>
            <para>Conversion between QPlaceContent and it's subclasses can be easily performed without casting. Due to the way it has been implemented, object slicing is not an issue, the following code is valid:</para>
            <para></para>
            <para></para>
            <para>  QPlaceImage image;</para>
            <para>  image.setUrl(QUrl(&quot;www.example.com&quot;));</para>
            <para></para>
            <para>  QPlaceContent content = image;</para>
            <para></para>
            <para>  QPlaceImage image2;</para>
            <para>  image2 = content;</para>
            <para>  qDebug() &lt;&lt; image2.url(); //image2.url() == &quot;www.example.com&quot;</para>
            <para></para>
            <para></para>
            <para>The rich content of a place is typically made available as paginated items. The ability to convert between QPlaceContent and it's subclasses means that code which handles the mechanics of paging can be easily shared for each of the sub types.</para>
            <para>At present the QPlaceContent class is not extensible by 3rd parties.</para>
            <para>Note: The Places API considers content objects to be 'retrieve-only' objects. Submission of content to a provider is not a supported use case.</para>
            <para></para>
            <para>See also QPlaceImage, QPlaceReview, and QPlaceEditorial.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceContent.#ctor">
            <summary>
            <para>Constructs an default content object which has no type.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContent.#ctor(QtLocation.QPlaceContent)">
            <summary>
            <para>Constructs a new copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContent.op_Equality(QtLocation.QPlaceContent,QtLocation.QPlaceContent)">
            <summary>
            <para>Returns true if this content object is equivalent to other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContent.op_Inequality(QtLocation.QPlaceContent,QtLocation.QPlaceContent)">
            <summary>
            <para>Returns true if this content object is not equivalent to other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContent.Supplier">
            <summary>
            <para>Returns the supplier who contributed this content.</para>
            <para>See also setSupplier().</para>
            <para></para>
            <para>Sets the supplier of the content.</para>
            <para>See also supplier().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContent.User">
            <summary>
            <para>Returns the user who contributed this content.</para>
            <para>See also setUser().</para>
            <para></para>
            <para>Sets the user who contributed this content.</para>
            <para>See also user().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContent.Attribution">
            <summary>
            <para>Returns a rich text attribution string.</para>
            <para>Note: Some providers may require that the attribution of a particular content item always be displayed when the content item is shown.</para>
            <para>See also setAttribution().</para>
            <para></para>
            <para>Sets a rich text attribution string for this content item.</para>
            <para>See also attribution().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContent.type">
            <summary>
            <para>Returns the content type.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceContent.Type">
            <summary>
            <para>Defines the type of content.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceContent.Type.NoType">
            <summary>The content object is default constructed, any other content type may be assigned to this content object.</summary>
        </member>
        <member name="F:QtLocation.QPlaceContent.Type.ImageType">
            <summary>The content object is an image.</summary>
        </member>
        <member name="F:QtLocation.QPlaceContent.Type.ReviewType">
            <summary>The content object is a review.</summary>
        </member>
        <member name="F:QtLocation.QPlaceContent.Type.EditorialType">
            <summary>The content object is an editorial</summary>
        </member>
        <member name="T:QtLocation.QPlaceRatings">
            <summary>
            <para>The QPlaceRatings class holds rating information about a place.</para>
            </summary>
            <remarks>
            <para>Rating information is used to describe how good a place is conceived to be. Typically this information is visualized as a number of stars. The average() function returns an aggregated ratings value out of a possible maximum as given by the maximum() function.</para>
            <para></para>
            <para></para>
            <para>  qDebug() &lt;&lt; QString(&quot;This place rated &quot;) + place.ratings().average()</para>
            <para>              + &quot;out of &quot; + place.ratings().maximum() + &quot;stars&quot;;</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceRatings.#ctor">
            <summary>
            <para>Constructs a new ratings object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceRatings.#ctor(QtLocation.QPlaceRatings)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceRatings.op_Equality(QtLocation.QPlaceRatings,QtLocation.QPlaceRatings)">
            <summary>
            <para>Returns true if other is equal to this ratings object, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceRatings.op_Inequality(QtLocation.QPlaceRatings,QtLocation.QPlaceRatings)">
            <summary>
            <para>Returns true if other is not equal to this ratings object, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceRatings.Average">
            <summary>
            <para>Returns the average value of individual ratings.</para>
            <para>See also setAverage().</para>
            <para></para>
            <para>Sets the average value of the ratings.</para>
            <para>See also average().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceRatings.Count">
            <summary>
            <para>Returns the total number of individual ratings.</para>
            <para>See also setCount().</para>
            <para></para>
            <para>Sets the total number of individual ratings to count.</para>
            <para>See also count().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceRatings.Maximum">
            <summary>
            <para>Returns the maximum possible rating value.</para>
            <para>See also setMaximum().</para>
            <para></para>
            <para>Sets the maximum possible rating value to max.</para>
            <para>See also maximum().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceRatings.IsEmpty">
            <summary>
            <para>Returns true if all fields of the place ratings are 0; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceReview">
            <summary>
            <para>The QPlaceReview class represents a review of a place.</para>
            </summary>
            <remarks>
            <para>Each QPlaceReview has a number of properties such as a title, text, date of submission and rating; in addition to those properties inherited from QPlaceContent.</para>
            <para>Note: The Places API only supports reviews as 'retrieve-only' objects. Submitting reviews to a provider is not a supported use case.</para>
            <para></para>
            <para>See also QPlaceContent and QPlaceEditorial.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceReview.#ctor">
            <summary>
            <para>Constructs a new review object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceReview.#ctor(QtLocation.QPlaceContent)">
            <summary>
            <para>Constructs a copy of other, otherwise constructs a default review object.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.DateTime">
            <summary>
            <para>Returns the date and time that the review was submitted.</para>
            <para>See also setDateTime().</para>
            <para></para>
            <para>Sets the date and time that the review was submitted to dateTime.</para>
            <para>See also dateTime().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.Text">
            <summary>
            <para>Returns a textual description of the place.</para>
            <para>Depending on the provider the text could be rich (HTML based) or plain text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets text of the review.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.Language">
            <summary>
            <para>Returns the language of the review. Typically this would be a language code in the 2 letter ISO 639-1 format.</para>
            <para>See also setLanguage().</para>
            <para></para>
            <para>Sets the language of the review. Typically this would be a language code in the 2 letter ISO 639-1 format.</para>
            <para>See also language().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.Rating">
            <summary>
            <para>Returns this review's rating of the place.</para>
            <para>See also setRating().</para>
            <para></para>
            <para>Sets the review's rating of the place.</para>
            <para>See also rating().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.ReviewId">
            <summary>
            <para>Returns the review's identifier.</para>
            <para>See also setReviewId().</para>
            <para></para>
            <para>Sets the identifier of the review.</para>
            <para>See also reviewId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReview.Title">
            <summary>
            <para>Returns the title of the review.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the title of the review.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceAttribute">
            <summary>
            <para>The QPlaceAttribute class represents generic attribute information about a place.</para>
            </summary>
            <remarks>
            <para>A QPlaceAttribute instance stores an additional piece of information about a place that is not otherwise exposed through the QPlace class. A QPlaceAttribute encapsulates a localized label which describes the attribute and rich text string representing the attribute's value. Generally, both are intended to be displayed to the end-user as is.</para>
            <para>Some plugins may not support attributes at all, others may only support a certain set, others still may support a dynamically changing set of attributes over time or even allow attributes to be arbitrarily defined by the client application. The attributes could also vary on a place by place basis, for example one place may have opening hours while another does not. Consult the plugin references for details.</para>
            <para></para>
            <para>Attribute Types</para>
            <para>The QPlaceAttribute class defines some constant strings which characterize standard attribute types.</para>
            <para></para>
            <para>QPlaceAttribute::OpeningHours</para>
            <para>QPlaceAttribute::Payment</para>
            <para>QPlaceAttribute::Provider</para>
            <para></para>
            <para>There is a class of attribute types of the format x_id_&lt;provider&gt; for example x_id_here. This class of attributes is a set of alternative identifiers of the place, from the specified provider's perspective.</para>
            <para>The above types are used to access and modify attributes in QPlace via:</para>
            <para></para>
            <para>QPlace::extendedAttribute()</para>
            <para>QPlace::setExtendedAttribute()</para>
            <para>QPlace::removeExtendedAttribute()</para>
            <para>QPlace::removeExtendedAttribute()</para>
            <para></para>
            <para>The attribute type is a string type so that providers are able to introduce new attributes as necessary. Custom attribute types should always be prefixed by a qualifier in order to avoid conflicts.</para>
            <para></para>
            <para>User Readable and Non-User Readable Attributes</para>
            <para>Some attributes may not be intended to be readable by end users, the label field of such attributes are empty to indicate this fact.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceAttribute.#ctor">
            <summary>
            <para>Constructs an attribute.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceAttribute.#ctor(QtLocation.QPlaceAttribute)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceAttribute.op_Equality(QtLocation.QPlaceAttribute,QtLocation.QPlaceAttribute)">
            <summary>
            <para>Returns true if other is equal to this attribute, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceAttribute.op_Inequality(QtLocation.QPlaceAttribute,QtLocation.QPlaceAttribute)">
            <summary>
            <para>Returns true if other is not equal to this attribute, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.OpeningHours">
            <summary>
            <para>Specifies the opening hours.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.Payment">
            <summary>
            <para>The constant to specify an attribute that defines the methods of payment.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.Provider">
            <summary>
            <para>The constant to specify an attribute that defines which provider the place came from.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.Label">
            <summary>
            <para>Returns a localized label describing the attribute.</para>
            <para>See also setLabel().</para>
            <para></para>
            <para>Sets the label of the attribute.</para>
            <para>See also label().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.Text">
            <summary>
            <para>Returns a piece of rich text representing the attribute value.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the text of the attribute.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceAttribute.IsEmpty">
            <summary>
            <para>Returns a boolean indicating whether the all the fields of the place attribute are empty or not.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceContactDetail">
            <summary>
            <para>The QPlaceContactDetail class represents a contact detail such as a phone number or website url.</para>
            </summary>
            <remarks>
            <para>The detail consists of a label and value. The label is a localized string that can be presented to the end user that describes that detail value which is the actual phone number, email address and so on.</para>
            <para></para>
            <para>Contact Types</para>
            <para>The QPlaceContactDetail class defines some constant strings which characterize standard contact types.</para>
            <para></para>
            <para>QPlaceContactDetail::Phone</para>
            <para>QPlaceContactDetail::Email</para>
            <para>QPlaceContactDetail::Website</para>
            <para>QPlaceContactDetail::Fax</para>
            <para></para>
            <para>These types are used to access and modify contact details in QPlace via:</para>
            <para></para>
            <para>QPlace::contactDetails()</para>
            <para>QPlace::setContactDetails()</para>
            <para>QPlace::appendContactDetail()</para>
            <para>QPlace::contactTypes()</para>
            <para></para>
            <para>The contact type is intended to be a string type so that providers are able to introduce new contact types if necessary.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceContactDetail.#ctor">
            <summary>
            <para>Constructs a contact detail.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContactDetail.#ctor(QtLocation.QPlaceContactDetail)">
            <summary>
            <para>Creates a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContactDetail.op_Equality(QtLocation.QPlaceContactDetail,QtLocation.QPlaceContactDetail)">
            <summary>
            <para>Returns true if other is equal to this contact detail, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContactDetail.op_Inequality(QtLocation.QPlaceContactDetail,QtLocation.QPlaceContactDetail)">
            <summary>
            <para>Returns true if other is not equal to this contact detail, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContactDetail.Clear">
            <summary>
            <para>Clears the contact detail.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Phone">
            <summary>
            <para>The constant to specify phone contact details</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Email">
            <summary>
            <para>The constant to specify email contact details.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Website">
            <summary>
            <para>The constant used to specify website contact details.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Fax">
            <summary>
            <para>The constant used to specify fax contact details.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Label">
            <summary>
            <para>Returns a label describing the contact detail.</para>
            <para>The label can potentially be localized. The language is dependent on the entity that sets it, typically this is the manager from which the places are sourced. The QPlaceManager::locales() field defines what language is used.</para>
            <para>See also setLabel().</para>
            <para></para>
            <para>Sets the label of the contact detail.</para>
            <para>See also label().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContactDetail.Value">
            <summary>
            <para>Returns the value of the contact detail.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Sets the value of this contact detail.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlace">
            <summary>
            <para>The QPlace class represents a set of data about a place.</para>
            </summary>
            <remarks>
            <para>A place is a point of interest, it could be a favorite restaurant, a park or someone's home. A QPlace object represents a place by acting as a container for various information about that place.</para>
            <para>This information can be divided into 2 broad classifications</para>
            <para></para>
            <para>Details</para>
            <para>Rich content</para>
            <para></para>
            <para>The place details consist of properties of the place, such as the name, location, contact information and so on. When a place is returned during a search, these details are filled in. Sometimes in order to save bandwidth, there are further details about the place that can be retrieved on an individual place by place basis, if the user is interested. The QPlace::detailsFetched() function can be queried to see if all available details have been fetched, and if not, QPlaceManager::getPlaceDetails() can be used to retrieve them. Precisely which details are populated during a search and which need to be fetched individually may vary from provider to provider. See plugin documentation for more details.</para>
            <para>The rich content of a place consists of items such as images, reviews and editorials. Potentially there may be many rich content items, so they are treated separately from the place details. They can be retrieved in a paged fashion via QPlaceManager::getPlaceContent(). If necessary, the content may be assigned to a place so it can act as a convenient container.</para>
            <para></para>
            <para>Contact Information</para>
            <para>The contact information of a place is based around a common set of contact types. To retrieve all the phone numbers of a place, one would do:</para>
            <para></para>
            <para></para>
            <para>  if (place.contactTypes().contains(QPlaceContactDetail::Phone)) {</para>
            <para>      foreach (const QPlaceContactDetail &amp;number, place.contactDetails(QPlaceContactDetail::Phone))</para>
            <para>          qDebug() &lt;&lt; number.label() &lt;&lt; &quot;:&quot; &lt;&lt; number.value();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The contact types are string values by design to allow for providers to introduce new contact types.</para>
            <para>For convenience there are a set of functions which return the value of the first contact detail of each type.</para>
            <para></para>
            <para>QPlace::primaryPhone()</para>
            <para>QPlace::primaryEmail()</para>
            <para>QPlace::primaryWebsite()</para>
            <para>QPlace::primaryFax()</para>
            <para></para>
            <para></para>
            <para>Extended Attributes</para>
            <para>Places may have additional attributes which are not covered in the formal API. Similar to contacts attributes are based around a common set of attribute types. To retrieve an extended attribute one would do:</para>
            <para></para>
            <para></para>
            <para>  if (place.extendedAttributeTypes().contains(QPlaceAttribute::OpeningHours))</para>
            <para>      qDebug() &lt;&lt; place.extendedAttribute(QPlaceAttribute::OpeningHours).text();</para>
            <para></para>
            <para></para>
            <para>The attribute types are string values by design to allow providers to introduce new attribute types.</para>
            <para></para>
            <para>Content</para>
            <para>The QPlace object is only meant to be a convenient container to hold rich content such as images, reviews and so on. Retrieval of content should happen via QPlaceManager::getPlaceContent().</para>
            <para>The content is stored as a QPlaceContent::Collection which contains both the index of the content, as well as the content itself. This enables developers to check whether a particular item has already been retrieved and if not, then request that content.</para>
            <para></para>
            <para>Attribution</para>
            <para>Places have a field for a rich text attribution string. Some providers may require that the attribution be shown when a place is displayed to a user.</para>
            <para></para>
            <para>Categories</para>
            <para>Different categories may be assigned to a place to indicate that the place is associated with those categories. When saving a place, the only meaningful data is the category id, the rest of the category data is effectively ignored. The category must already exist before saving the place (it is not possible to create a new category, assign it to the place, save the place and expect the category to be created).</para>
            <para></para>
            <para>Saving Caveats</para>
            <para>The Places API is currently designed for only saving core details. Saving rich content like images and reviews or details like supplier and rating is not a supported use case. Typically a manager will generally ignore these fields upon save and may produce a warning message if they are populated.</para>
            <para>The Places API only supports saving of the following core details:</para>
            <para></para>
            <para>name</para>
            <para>place id</para>
            <para>location</para>
            <para>contact details</para>
            <para>icon</para>
            <para>categories (tag-like names to describe a place)</para>
            <para>visibility scope</para>
            <para></para>
            <para>It is possible that providers may only support a subset of these. See the plugin documentation for more details.</para>
            <para>Saving of properties such as the rating, extended attributes, images, reviews, editorials and supplier is explicitly not supported by the Places API.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlace.#ctor">
            <summary>
            <para>Constructs an empty place object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.#ctor(QtLocation.QPlace)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.op_Equality(QtLocation.QPlace,QtLocation.QPlace)">
            <summary>
            <para>Returns true if other is equal to this place, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.op_Inequality(QtLocation.QPlace,QtLocation.QPlace)">
            <summary>
            <para>Returns true if other is not equal to this place, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.SetCategory(QtLocation.QPlaceCategory)">
            <summary>
            <para>Sets a single category that this place belongs to.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.TotalContentCount(QtLocation.QPlaceContent.Type)">
            <summary>
            <para>Returns the total count of content objects of the given type. This total count indicates how many the manager/provider should have available. (As opposed to how many objects this place instance is currently assigned).</para>
            <para>A negative count indicates that the total number of items is unknown. By default the total content count is set to 0.</para>
            <para>See also setTotalContentCount().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.SetTotalContentCount(QtLocation.QPlaceContent.Type,System.Int32)">
            <summary>
            <para>Sets the totalCount of content objects of the given type.</para>
            <para>See also totalContentCount().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.ExtendedAttribute(System.String)">
            <summary>
            <para>Returns the exteded attribute corresponding to the specified attributeType. If the place does not have that particular attribute type, a default constructed QPlaceExtendedAttribute is returned.</para>
            <para>See also setExtendedAttribute().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.SetExtendedAttribute(System.String,QtLocation.QPlaceAttribute)">
            <summary>
            <para>Assigns an attribute of the given attributeType to a place. If the given attributeType already exists in the place, then it is overwritten.</para>
            <para>If attribute is a default constructed QPlaceAttribute, then the attributeType is removed from the place which means it will not be listed by QPlace::extendedAttributeTypes().</para>
            <para>See also extendedAttribute().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.RemoveExtendedAttribute(System.String)">
            <summary>
            <para>Remove the attribute of attributeType from the place.</para>
            <para>The attribute will no longer be listed by QPlace::extendedAttributeTypes()</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.ContactTypes">
            <summary>
            <para>Returns the type of contact details this place has.</para>
            <para>See QPlaceContactDetail for a list of common contact types.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.AppendContactDetail(System.String,QtLocation.QPlaceContactDetail)">
            <summary>
            <para>Appends a contact detail of a specified contactType.</para>
            <para>See QPlaceContactDetail for a list of common contact types.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlace.RemoveContactDetails(System.String)">
            <summary>
            <para>Removes all the contact details of a given contactType.</para>
            <para>The contactType is no longer returned when QPlace::contactTypes() is called.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Location">
            <summary>
            <para>Returns the location of the place.</para>
            <para>See also setLocation().</para>
            <para></para>
            <para>Sets the location of the place.</para>
            <para>See also location().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Ratings">
            <summary>
            <para>Returns an aggregated rating of the place.</para>
            <para>See also setRatings().</para>
            <para></para>
            <para>Sets the aggregated rating of the place.</para>
            <para>See also ratings().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Supplier">
            <summary>
            <para>Returns the supplier of this place.</para>
            <para>See also setSupplier().</para>
            <para></para>
            <para>Sets the supplier of this place to supplier.</para>
            <para>See also supplier().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Attribution">
            <summary>
            <para>Returns a rich text attribution string of the place. Note, some providers may have a requirement where the attribution must be shown whenever a place is displayed to an end user.</para>
            <para>See also setAttribution().</para>
            <para></para>
            <para>Sets the attribution string of the place.</para>
            <para>See also attribution().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Icon">
            <summary>
            <para>Returns the icon of the place.</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the icon of the place.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Name">
            <summary>
            <para>Returns the name of the place.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the place.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.PlaceId">
            <summary>
            <para>Returns the identifier of the place. The place identifier is only meaningful to the QPlaceManager that generated it and is not transferable between managers. The place identifier is not guaranteed to be universally unique, but unique for the manager that generated it.</para>
            <para>See also setPlaceId().</para>
            <para></para>
            <para>Sets the identifier of the place.</para>
            <para>See also placeId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.DetailsFetched">
            <summary>
            <para>Returns true if the details of this place have been fetched, otherwise returns false.</para>
            <para>See also setDetailsFetched().</para>
            <para></para>
            <para>Sets whether the details of this place have been fetched or not.</para>
            <para>See also detailsFetched().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.Visibility">
            <summary>
            <para>Returns the visibility of the place.</para>
            <para>The default visibility of a new place is set to QtLocatin::Unspecified visibility. If a place is saved with unspecified visibility the backend chooses an appropriate default visibility to use when saving.</para>
            <para>See also setVisibility().</para>
            <para></para>
            <para>Sets the visibility of the place to visibility.</para>
            <para>See also visibility().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.PrimaryPhone">
            <summary>
            <para>Returns the primary phone number for this place. This accesses the first contact detail of the phone number type. If no phone details exist, then an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.PrimaryFax">
            <summary>
            <para>Returns the primary fax number for this place. This convenience function accesses the first contact detail of the fax type. If no fax details exist, then an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.PrimaryEmail">
            <summary>
            <para>Returns the primary email address for this place. This convenience function accesses the first contact detail of the email type. If no email addresses exist, then an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.PrimaryWebsite">
            <summary>
            <para>Returns the primary website of the place. This convenience function accesses the first contact detail of the website type. If no websites exist, then an empty string is returned.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.ExtendedAttributeTypes">
            <summary>
            <para>Returns the types of extended attributes that this place has.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlace.IsEmpty">
            <summary>
            <para>Returns a boolean indicating whether the all the fields of the place are empty or not.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceReply">
            <summary>
            <para>The QPlaceReply class manages an operation started by an instance of QPlaceManager and serves as a base class for more specialized replies.</para>
            </summary>
            <remarks>
            <para>The QPlaceReply and each of its specialized subclasses manage the state and results of their corresponding operations. The QPlaceReply itself is used for operations that have no results, that is, it only necessary to know if the operation succeeded or failed.</para>
            <para>The finished() signal can be used to monitor the progress of an operation. Once an operation is complete, the error() and errorString() methods provide information on whether the operation completed successfully. If successful, the reply will contain the results for that operation, that is, each subclass will have appropriate functions to retrieve the results of an operation.</para>
            <para></para>
            <para>See also QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a reply object with a given parent.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceReply.Abort">
            <summary>
            <para>Aborts the operation.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceReply.SetError(QtLocation.QPlaceReply.Error,System.String)">
            <summary>
            <para>Sets the error and errorString of the reply. This function does not cause the QPlaceReply::error(QPlaceReply::Error, const QString &amp;errorString) signal to be emitted.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceReply.OnFinished">
            <summary>
            <para>This signal is emitted when this reply has finished processing.</para>
            <para>If error() equals QPlaceReply::NoError then the processing finished successfully.</para>
            <para>This signal and QPlaceManager::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para>See also setFinished().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceReply.OnError">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of this reply. The finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error meant for developers and not end users.</para>
            <para>This signal and QPlaceManager::error() will be emitted at the same time.</para>
            <para>Note: Do not delete this reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            <para></para>
            <para>Note:</para>
            <para> Signal </para>
            <para>error</para>
            <para> is overloaded in this class. To connect to this one using the function pointer syntax, you must specify the signal type in a static cast, as shown in this example:</para>
            <para></para>
            <para></para>
            <para>  connect(placeReply, static_cast&lt;void(QPlaceReply::*)(QPlaceReply::Error, const QString &amp;)&gt;(&amp;QPlaceReply::error),</para>
            <para>      [=](QPlaceReply::Error error, const QString &amp;errorString){ /* ... */ });</para>
            <para></para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReply.Finished">
            <summary>
            <para>Return true if the reply has completed.</para>
            <para></para>
            <para>Sets the status of whether the reply is finished or not. This function does not cause the finished() signal to be emitted.</para>
            <para>See also finished().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReply.error">
            <summary>
            <para>Returns the error code.</para>
            <para>See also setError().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReply.type">
            <summary>
            <para>Returns the type of the reply.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceReply.ErrorString">
            <summary>
            <para>Returns the error string of the reply. The error string is intended to be used by developers only and is not fit to be displayed to an end user.</para>
            <para>If no error has occurred, the string is empty.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceReply.Error">
            <summary>
            <para>Describes an error which occurred during an operation.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.NoError">
            <summary>No error has occurred</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.PlaceDoesNotExistError">
            <summary>A specified place could not be found</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.CategoryDoesNotExistError">
            <summary>A specified category could not be found</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.CommunicationError">
            <summary>An error occurred communicating with the service provider.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.ParseError">
            <summary>The response from the service provider or an import file was in an unrecognizable format</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.PermissionsError">
            <summary>The operation failed because of insufficient permissions.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.UnsupportedError">
            <summary>The operation was not supported by the service provider.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.BadArgumentError">
            <summary>. A parameter that was provided was invalid.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.CancelError">
            <summary>The operation was canceled.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Error.UnknownError">
            <summary>An error occurred which does not fit into any of the other categories.</summary>
        </member>
        <member name="T:QtLocation.QPlaceReply.Type">
            <summary>
            <para>Describes the reply's type.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.Reply">
            <summary>This is a generic reply.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.DetailsReply">
            <summary>This is a reply for the retrieval of place details</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.SearchReply">
            <summary>This is a reply for the place search operation.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.SearchSuggestionReply">
            <summary>This is a reply for a search suggestion operation.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.ContentReply">
            <summary>This is a reply for content associated with a place.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.IdReply">
            <summary>This is a reply that returns an identifier of a place or category. Typically used for place or category save and remove operations.</summary>
        </member>
        <member name="F:QtLocation.QPlaceReply.Type.MatchReply">
            <summary>This is a reply that returns places that match those from another provider.</summary>
        </member>
        <member name="T:QtLocation.QPlaceContentRequest">
            <summary>
            <para>The QPlaceContentRequest class represents the parameters of a content request.</para>
            </summary>
            <remarks>
            <para>The QPlaceContentRequest class is used in conjunction with a QPlaceManager to retrieve rich content like images and reviews in a paginated fashion. The following code would request a set of 5 images from the 10th index:</para>
            <para></para>
            <para></para>
            <para>  QPlaceContentRequest request;</para>
            <para>  request.setContentType(QPlaceContent::ImageType);</para>
            <para>  request.setPlaceId(place.placeId());</para>
            <para>  request.setLimit(5);</para>
            <para></para>
            <para>  QPlaceContentReply *contentReply = manager-&gt;getPlaceContent(request);</para>
            <para>  //..connect signals..//</para>
            <para>      ...</para>
            <para>      ...</para>
            <para>  void contentHandler() {</para>
            <para>      if (contentReply-&gt;error() == QPlaceReply::NoError)  {</para>
            <para>          place.insertContent(contentReply-&gt;request().contentType(),</para>
            <para>                              contentReply-&gt;content());</para>
            <para>      }</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPlaceContentReply.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceContentRequest.#ctor">
            <summary>
            <para>Constructs a new request object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContentRequest.#ctor(QtLocation.QPlaceContentRequest)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContentRequest.op_Equality(QtLocation.QPlaceContentRequest,QtLocation.QPlaceContentRequest)">
            <summary>
            <para>Returns true if other is equal to this content request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContentRequest.op_Inequality(QtLocation.QPlaceContentRequest,QtLocation.QPlaceContentRequest)">
            <summary>
            <para>Returns true if other is not equal to this content request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceContentRequest.Clear">
            <summary>
            <para>Clears the content request.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentRequest.ContentType">
            <summary>
            <para>Returns the type of content to be requested, for example reviews or images</para>
            <para>See also setContentType().</para>
            <para></para>
            <para>Sets the type of content to be requested.</para>
            <para>See also contentType().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentRequest.PlaceId">
            <summary>
            <para>Returns the identifier of the place content is to be fetched for.</para>
            <para>See also setPlaceId().</para>
            <para></para>
            <para>Sets the identifier of the place to fetch content for to identifier.</para>
            <para>See also placeId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentRequest.ContentContext">
            <summary>
            <para>Returns backend specific additional content context associated with this place content request.</para>
            <para>See also setContentContext().</para>
            <para></para>
            <para>Sets the content context to context.</para>
            <para>Note: This method is intended to be used by geo service plugins when returning place content results.</para>
            <para>The content context is used by backends to store additional content context related to the content request. Other relevant fields should also be filled in. For example, if the content request is for image content the content type should also be set with setContentType(). The content context allows additional context to be kept which is not directly accessible via the Qt Location API.</para>
            <para>The content context can be of any type storable in a QVariant. The value of the content context is not intended to be used directly by applications.</para>
            <para>See also contentContext().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentRequest.Limit">
            <summary>
            <para>Returns the maximum number of content items to retrieve.</para>
            <para>A negative value for limit means that it is undefined. It is left up to the backend provider to choose an appropriate number of items to return.</para>
            <para>The default limit is -1.</para>
            <para>See also setLimit().</para>
            <para></para>
            <para>Set the maximum number of content items to retrieve to limit.</para>
            <para>See also limit().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceContentReply">
            <summary>
            <para>The QPlaceContentReply class manages a content retrieval operation started by an instance of QPlaceManager.</para>
            </summary>
            <remarks>
            <para>See Fetching Rich Content for an example on how to use a content reply.</para>
            <para></para>
            <para>See also QPlaceContentRequest and QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceContentReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a content reply with a given parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentReply.TotalCount">
            <summary>
            <para>Returns the total number of content objects for a place. If the total number of content objects cannot be counted, a value of -1 is returned. This count only refers to the total count for a single content type, that is, the content type that was specified when content was requested with the QPlaceManager.</para>
            <para>See also setTotalCount().</para>
            <para></para>
            <para>Sets the total number of content objects for a place.</para>
            <para>See also totalCount().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentReply.Request">
            <summary>
            <para>Returns the content request that was used to generate this reply.</para>
            <para>See also setRequest().</para>
            <para></para>
            <para>Sets the content request used to generate this this reply.</para>
            <para>See also request().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentReply.PreviousPageRequest">
            <summary>
            <para>Returns a place content request that can be used to request the previous batch of place content results.</para>
            <para>See also setPreviousPageRequest().</para>
            <para></para>
            <para>Sets the place content request that can be used to request the previous batch of place content results to previous.</para>
            <para>See also previousPageRequest().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentReply.NextPageRequest">
            <summary>
            <para>Returns a place content request that can be used to request the next batch of place content results.</para>
            <para>See also setNextPageRequest().</para>
            <para></para>
            <para>Sets the place content request that can be used to request the next batch of place content results to next.</para>
            <para>See also nextPageRequest().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceContentReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns the type of reply.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceDetailsReply">
            <summary>
            <para>The QPlaceDetailsReply class manages a place details fetch operation started by an instance of QPlaceManager.</para>
            </summary>
            <remarks>
            <para>See Fetching Place Details for an example on how to use a details reply.</para>
            <para></para>
            <para>See also QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceDetailsReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a details reply with a given parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceDetailsReply.Place">
            <summary>
            <para>Returns the place that was fetched.</para>
            <para>See also setPlace().</para>
            <para></para>
            <para>Sets the fetched place of the reply.</para>
            <para>See also place().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceDetailsReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns the type of reply.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceEditorial">
            <summary>
            <para>The QPlaceEditorial class represents a publisher's article describing a place.</para>
            </summary>
            <remarks>
            <para>Each QPlaceEditorial has a title, text and language; in addition to those properties inherited from QPlaceContent.</para>
            <para>Note: The Places API only supports editorials as 'retrieve-only' objects. Submitting editorials to a provider is not a supported use case.</para>
            <para></para>
            <para>See also QPlaceContent.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceEditorial.#ctor">
            <summary>
            <para>Constructs a new editorial object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceEditorial.#ctor(QtLocation.QPlaceContent)">
            <summary>
            <para>Constructs a copy of other if possible, otherwise constructs a default editorial object.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceEditorial.Text">
            <summary>
            <para>Returns a textual description of the place.</para>
            <para>Depending upon the provider, the editorial text could be either rich(HTML based) text or plain text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the text of the editorial.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceEditorial.Title">
            <summary>
            <para>Returns the title of the editorial.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the title of the editorial.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceEditorial.Language">
            <summary>
            <para>Returns the language of the editorial. Typically this would be a language code in the 2 letter ISO 639-1 format.</para>
            <para>See also setLanguage().</para>
            <para></para>
            <para>Sets the language of the editorial. Typically this would be a language code in the 2 letter ISO 639-1 format.</para>
            <para>See also language().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceIcon">
            <summary>
            <para>The QPlaceIcon class represents an icon.</para>
            </summary>
            <remarks>
            <para>The typical usage of an icon is to use the url() function to specify a preferred icon size.</para>
            <para></para>
            <para></para>
            <para>  QUrl iconSourceUrl = place.icon().url(QSize(32,32));</para>
            <para></para>
            <para>  //A default icon may also be requested like so</para>
            <para>  iconSourceUrl = place.icon().url();</para>
            <para></para>
            <para></para>
            <para>The icons are typically backend dependent, if a manager backend does not support a given size, the URL of the icon that most closely matches those parameters is returned.</para>
            <para>The icon class also has a key-value set of parameters. The precise key one needs to use depends on the plugin being used. These parameters influence which icon URL is returned by the manager and may also be used to specify icon URL locations when saving icons.</para>
            <para>If there is only ever one image for an icon, then QPlaceIcon::SingleUrl can be used as a parameter key with a QUrl as the associated value. If this key is set, then the url() function will always return the specified URL and not defer to any manager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceIcon.#ctor">
            <summary>
            <para>Constructs an icon.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceIcon.#ctor(QtLocation.QPlaceIcon)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceIcon.op_Equality(QtLocation.QPlaceIcon,QtLocation.QPlaceIcon)">
            <summary>
            <para>Returns true if this icon is equal to other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceIcon.op_Inequality(QtLocation.QPlaceIcon,QtLocation.QPlaceIcon)">
            <summary>
            <para>Returns true if other is not equal to this icon, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceIcon.Url(QtCore.QSize)">
            <summary>
            <para>Returns an icon URL according to the given size.</para>
            <para>If no manager has been assigned to the icon, and the parameters do not contain the QPlaceIcon::SingleUrl key, a default constructed QUrl is returned.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceIcon.Url">
            <summary>
            <para>Returns an icon URL according to the given size.</para>
            <para>If no manager has been assigned to the icon, and the parameters do not contain the QPlaceIcon::SingleUrl key, a default constructed QUrl is returned.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIcon.SingleUrl">
            <summary>
            <para>This variable holds parameter key for an icon that only has a single image URL.</para>
            <para>The parameter value to be used with this key is a QUrl. An icon with this parameter set will always return the specified URL regardless of the requested size when url() is called.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIcon.Manager">
            <summary>
            <para>Returns the manager that this icon is associated with.</para>
            <para>See also setManager().</para>
            <para></para>
            <para>Sets the manager that this icon is associated with. The icon does not take ownership of the pointer.</para>
            <para>See also manager().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIcon.IsEmpty">
            <summary>
            <para>Returns a boolean indicating whether the all the fields of the icon are empty or not.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceIdReply">
            <summary>
            <para>The QPlaceIdReply class manages operations which return an identifier such as saving and removal operations of places and categories.</para>
            </summary>
            <remarks>
            <para>The QPlaceIdReply can be considered a multipurpose reply in that it can be used to save places, save categories, remove places and remove categories. In each case it returns an identifier of the place or category that was added, modified or removed.</para>
            <para>See Saving a place for an example of how to use an identifier reply.</para>
            <para></para>
            <para>See also QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceIdReply.#ctor(QtLocation.QPlaceIdReply.OperationType,QtCore.QObject)">
            <summary>
            <para>Constructs a reply which contains the identifier of the object operated upon. The reply is for the given operationType and with parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIdReply.Id">
            <summary>
            <para>Returns the relevant identifier for the operation. For example for a save place operation, the identifier is that of the saved place. For a category removal operation, it is the identifier of the category that was removed.</para>
            <para>See also setId().</para>
            <para></para>
            <para>Sets the identifier of the reply.</para>
            <para>See also id().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIdReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns the type of reply.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceIdReply.operationType">
            <summary>
            <para>Returns the operation type of the reply. This means whether this identifier reply was for a save place operation, remove category operation and so on.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceIdReply.OperationType">
            <summary>
            <para>Defines the type of operation that was used to generate this reply.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceIdReply.OperationType.SavePlace">
            <summary>The reply was created for a save place operation</summary>
        </member>
        <member name="F:QtLocation.QPlaceIdReply.OperationType.SaveCategory">
            <summary>The reply was created for a save category operation</summary>
        </member>
        <member name="F:QtLocation.QPlaceIdReply.OperationType.RemovePlace">
            <summary>The reply was created for a remove place operation.</summary>
        </member>
        <member name="F:QtLocation.QPlaceIdReply.OperationType.RemoveCategory">
            <summary>The reply was created for a remove category operation.</summary>
        </member>
        <member name="T:QtLocation.QPlaceSupplier">
            <summary>
            <para>The QPlaceSupplier class represents a supplier of a place or content associated with a place.</para>
            </summary>
            <remarks>
            <para>Each instance represents a set of data about a supplier, which can include supplier's name, url and icon. The supplier is typically a business or organization.</para>
            <para>Note: The Places API only supports suppliers as 'retrieve-only' objects. Submitting suppliers to a provider is not a supported use case.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceSupplier.#ctor">
            <summary>
            <para>Constructs a new supplier object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSupplier.#ctor(QtLocation.QPlaceSupplier)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSupplier.op_Equality(QtLocation.QPlaceSupplier,QtLocation.QPlaceSupplier)">
            <summary>
            <para>Returns true if this supplier is equal to other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSupplier.op_Inequality(QtLocation.QPlaceSupplier,QtLocation.QPlaceSupplier)">
            <summary>
            <para>Returns true if this supplier is not equal to other, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSupplier.Name">
            <summary>
            <para>Returns the name of the supplier which can be displayed to the user.</para>
            <para>The name can potentially be localized. The language is dependent on the entity that sets it, typically this is the QPlaceManager. The QPlaceManager::locales() field defines what language is used.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the supplier.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSupplier.SupplierId">
            <summary>
            <para>Returns the identifier of the supplier. The identifier is unique to the manager backend which provided the supplier and is generally not suitable for displaying to the user.</para>
            <para>See also setSupplierId().</para>
            <para></para>
            <para>Sets the identifier of the supplier.</para>
            <para>See also supplierId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSupplier.Url">
            <summary>
            <para>Returns the URL of the supplier's website.</para>
            <para>See also setUrl().</para>
            <para></para>
            <para>Sets the url of the supplier's website.</para>
            <para>See also url().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSupplier.Icon">
            <summary>
            <para>Returns the icon of the supplier.</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the icon of the supplier.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSupplier.IsEmpty">
            <summary>
            <para>Returns true if all fields of the place supplier are 0; otherwise returns false.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceImage">
            <summary>
            <para>The QPlaceImage class represents a reference to an image.</para>
            </summary>
            <remarks>
            <para>Each QPlaceImage represents a set of metadata about an image such as it's url, identifier and MIME type. These are properties in addition to those provided by QPlaceContent.</para>
            <para>Note: The Places API only supports images as 'retrieve-only' objects. Submitting images to a provider is not a supported use case.</para>
            <para></para>
            <para>See also QPlaceContent.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceImage.#ctor">
            <summary>
            <para>Constructs an new QPlaceImage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceImage.#ctor(QtLocation.QPlaceContent)">
            <summary>
            <para>Constructs a copy of other if possible, otherwise constructs a default image.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceImage.Url">
            <summary>
            <para>Returns the image's url.</para>
            <para>See also setUrl().</para>
            <para></para>
            <para>Sets the image's url.</para>
            <para>See also url().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceImage.ImageId">
            <summary>
            <para>Returns the image's identifier.</para>
            <para>See also setImageId().</para>
            <para></para>
            <para>Sets image's identifier.</para>
            <para>See also imageId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceImage.MimeType">
            <summary>
            <para>Returns the image's MIME type.</para>
            <para>See also setMimeType().</para>
            <para></para>
            <para>Sets image's MIME type.</para>
            <para>See also mimeType().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchResult">
            <summary>
            <para>The QPlaceSearchResult class is the base class for search results.</para>
            </summary>
            <remarks>
            <para>A list of search results can be retrieved from the QPlaceSearchReply after it has successfully completed the request. Common to all search results are the title and icon, which can be used to present the search result to the user.</para>
            <para>The intended usage is that depending on the type, the search result can be converted to a more detailed subclass like so:</para>
            <para></para>
            <para></para>
            <para>  if (result.type() == QPlaceSearchResult::PlaceResult) {</para>
            <para>      QPlaceResult placeResult = result;</para>
            <para>      qDebug() &lt;&lt; placeResult.place().name();</para>
            <para>      qDebug() &lt;&lt; placeResult.place().location().coordinate();</para>
            <para>      qDebug() &lt;&lt; placeResult.distance();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The implementation is handled in such a way that object slicing is not an issue. It is not expected that client applications or backend plugins instantiate a QPlaceSearchResult directly, but rather client applications simply convert to search result subclasses and backend plugins only instantiate subclasses.</para>
            <para></para>
            <para>See also QPlaceResult.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceSearchResult.#ctor">
            <summary>
            <para>Constructs a new search result.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchResult.#ctor(QtLocation.QPlaceSearchResult)">
            <summary>
            <para>Constructs a copy of other</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchResult.op_Equality(QtLocation.QPlaceSearchResult,QtLocation.QPlaceSearchResult)">
            <summary>
            <para>Returns true if other is equal to this search result, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchResult.op_Inequality(QtLocation.QPlaceSearchResult,QtLocation.QPlaceSearchResult)">
            <summary>
            <para>Returns true if other not equal to this search result, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchResult.Title">
            <summary>
            <para>Returns the title of the search result. This string can be used to display the search result to the user.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the title of the search result to title.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchResult.Icon">
            <summary>
            <para>Returns an icon that can be used to represent the search result.</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the icon of the search result to icon.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchResult.Type">
            <summary>
            <para>Returns the result type.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchResult.SearchResultType">
            <summary>
            <para>Defines the type of search result</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchResult.SearchResultType.UnknownSearchResult">
            <summary>The contents of the search result are unknown.</summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchResult.SearchResultType.PlaceResult">
            <summary>The search result contains a place.</summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchResult.SearchResultType.ProposedSearchResult">
            <summary>The search result contains a proposed search which may be relevant.</summary>
        </member>
        <member name="T:QtLocation.QPlaceMatchRequest">
            <summary>
            <para>The QPlaceMatchRequest class is used to find places from one manager that match those from another. It represents a set of request parameters.</para>
            </summary>
            <remarks>
            <para>Places from another manager that may have corresponding/matching places in the current manager are assigned using setPlaces() or setResults(). A set of further parameters are specified which determines the criteria for matching.</para>
            <para>The typical key for matching is the QPlaceMatchRequest::AlternativeId, the value is an alternative identifier attribute type of the format x_id_&lt;provider name&gt; for example x_id_here. The provider name is name supplied to the QGeoServiceProvider instance.</para>
            <para>See Matching places between managers for an example on how to use a match request.</para>
            <para></para>
            <para>See also QPlaceMatchReply and QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceMatchRequest.#ctor">
            <summary>
            <para>Default constructor. Constructs a new request object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceMatchRequest.#ctor(QtLocation.QPlaceMatchRequest)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceMatchRequest.op_Equality(QtLocation.QPlaceMatchRequest,QtLocation.QPlaceMatchRequest)">
            <summary>
            <para>Returns true if other is equal to this match request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceMatchRequest.op_Inequality(QtLocation.QPlaceMatchRequest,QtLocation.QPlaceMatchRequest)">
            <summary>
            <para>Returns true if other is not equal to this match request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceMatchRequest.Clear">
            <summary>
            <para>Clears the match request.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceMatchRequest.AlternativeId">
            <summary>
            <para>The key to specify that matching is to be accomplished via an alternative place identifier.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceMatchReply">
            <summary>
            <para>The QPlaceMatchReply class manages a place matching operation started by an instance of QPlaceManager.</para>
            </summary>
            <remarks>
            <para>If the operation is successful, the number of places in the reply matches those in the request. If a particular place in the request is not found, a default constructed place is used as a place holder in the reply. In this way, there is always a one is to one relationship between input places in the request, and output places in the reply.</para>
            <para>If the operation is not successful the number of places is always zero.</para>
            <para>See Matching places between managers for an example on how to use a match reply.</para>
            <para></para>
            <para>See also QPlaceMatchRequest and QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceMatchReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a match reply with a given parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceMatchReply.Request">
            <summary>
            <para>Returns the match request that was used to generate this reply.</para>
            <para>See also setRequest().</para>
            <para></para>
            <para>Sets the match request used to generate this reply.</para>
            <para>See also request().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceMatchReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns the type of reply.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchSuggestionReply">
            <summary>
            <para>The QPlaceSearchSuggestionReply class manages a search suggestion operation started by an instance of QPlaceManager.</para>
            </summary>
            <remarks>
            <para>On successful completion of the operation, the reply will contain a list of search term suggestions. See Search Suggestions for an example on how to use a search suggestion reply.</para>
            <para></para>
            <para>See also QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceSearchSuggestionReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a search suggestion reply with a given parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchSuggestionReply.Suggestions">
            <summary>
            <para>Returns the search term suggestions.</para>
            <para>See also setSuggestions().</para>
            <para></para>
            <para>Sets the search term suggestions.</para>
            <para>See also suggestions().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchSuggestionReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns type of reply.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchRequest">
            <summary>
            <para>The QPlaceSearchRequest class represents the set of parameters for a search request.</para>
            </summary>
            <remarks>
            <para>A typical search request may look like the following:</para>
            <para></para>
            <para></para>
            <para>  QPlaceSearchRequest searchRequest;</para>
            <para>  searchRequest.setSearchTerm(&quot;Fast food&quot;); //search term for what we are interested in</para>
            <para></para>
            <para>  //set a search center</para>
            <para>  searchRequest.setSearchArea(QGeoCircle(QGeoCoordinate(2.3, 48.87)));</para>
            <para></para>
            <para>  //set a distance hint as a relevancy hint.</para>
            <para>  //closer places have greater weighting in the ranking of results.</para>
            <para>  searchRequest.setRelevanceHint(QPlaceSearchRequest::DistanceHint);</para>
            <para></para>
            <para>  //use limit to adjust pagination.</para>
            <para>  //this limits the number of place results to 5 per page.</para>
            <para>  searchRequest.setLimit(5);</para>
            <para></para>
            <para>  //provide some categories to narrow down search</para>
            <para>  QList&lt;QPlaceCategory&gt; categories;</para>
            <para>  categories &lt;&lt; diner &lt;&lt; restaurant;</para>
            <para>  searchRequest.setCategories(categories);</para>
            <para></para>
            <para></para>
            <para>Note that specifying a search center can be done by setting a circular search area that has a center but no radius. The default radius is set to -1, which indicates an undefined radius. The provider will interpret this as being free to choose its own default radius.</para>
            <para>The QPlaceSearchRequest is primarily used with the QPlaceManager to search for places, however it is also used to provide parameters for generating search term suggestions. Note that in this context only some of the parameters may be relevant. For example, the search area is useful in narrowing down relevant search suggestions, while other parameters such as relevance hint are not so applicable.</para>
            <para>Also be aware that providers may vary by which parameters they support for example some providers may not support paging while others do, some providers may honor relevance hints while others may completely ignore them, see the plugin documentation for more details.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.#ctor">
            <summary>
            <para>Default constructor. Constructs an new request object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.#ctor(QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.op_Equality(QtLocation.QPlaceSearchRequest,QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Returns true if other is equal to this search request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.op_Inequality(QtLocation.QPlaceSearchRequest,QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Returns true if other is not equal to this search request, otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.SetCategory(QtLocation.QPlaceCategory)">
            <summary>
            <para>Sets the search request to search by a single category</para>
            <para>See also setCategories().</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceSearchRequest.Clear">
            <summary>
            <para>Clears the search request.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.SearchTerm">
            <summary>
            <para>Returns the search term.</para>
            <para>See also setSearchTerm().</para>
            <para></para>
            <para>Sets the search term.</para>
            <para>See also searchTerm().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.SearchArea">
            <summary>
            <para>Returns the search area which will be used to limit search results. The default search area is an invalid QGeoShape, indicating that no specific search area is defined.</para>
            <para>See also setSearchArea().</para>
            <para></para>
            <para>Sets the search request to search within the given area.</para>
            <para>See also searchArea().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.RecommendationId">
            <summary>
            <para>Returns the place id which will be used to search for recommendations for similar places.</para>
            <para>See also setRecommendationId().</para>
            <para></para>
            <para>Sets the placeId which will be used to search for recommendations.</para>
            <para>See also recommendationId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.SearchContext">
            <summary>
            <para>Returns backend specific additional search context associated with this place search request. The search context is typically set as part of a proposed search results.</para>
            <para>See also setSearchContext().</para>
            <para></para>
            <para>Sets the search context to context.</para>
            <para>Note: This method is intended to be used by geo service plugins when returning search results of type QPlaceSearchResult::ProposedSearchResult.</para>
            <para>The search context is used by backends to store additional search context related to the search request. Other relevant fields should also be filled in. For example, if the search context encodes a text search the search term should also be set with setSearchTerm(). The search context allows additional search context to be kept which is not directly accessible via the Qt Location API.</para>
            <para>The search context can be of any type storable in a QVariant. The value of the search context is not intended to be use directly by applications.</para>
            <para>See also searchContext().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.VisibilityScope">
            <summary>
            <para>Returns the visibility scope used when searching for places. The default value is QLocation::UnspecifiedVisibility meaning that no explicit scope has been assigned. Places of any scope may be returned during the search.</para>
            <para>See also setVisibilityScope().</para>
            <para></para>
            <para>Sets the visibility scope used when searching for places.</para>
            <para>See also visibilityScope().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.relevanceHint">
            <summary>
            <para>Returns the relevance hint of the request. The hint is given to the provider to help but not dictate the ranking of results. For example providing a distance hint may give closer places a higher ranking but it doesn't necessarily mean that he results will be ordered strictly according to distance.</para>
            <para>See also setRelevanceHint().</para>
            <para></para>
            <para>Sets the relevance hint to be used when searching for a place.</para>
            <para>See also relevanceHint().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchRequest.Limit">
            <summary>
            <para>Returns the maximum number of search results to retrieve.</para>
            <para>A negative value for limit means that it is undefined. It is left up to the backend provider to choose an appropriate number of results to return. The default limit is -1.</para>
            <para>See also setLimit().</para>
            <para></para>
            <para>Set the maximum number of search results to retrieve to limit.</para>
            <para>See also limit().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchRequest.RelevanceHint">
            <summary>
            <para>Defines hints to help rank place results.</para>
            </summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchRequest.RelevanceHint.UnspecifiedHint">
            <summary>No explicit hint has been specified.</summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchRequest.RelevanceHint.DistanceHint">
            <summary>Distance to a search center is relevant for the user. Closer places are more highly weighted. This hint is only useful if a circular search area is used in the query.</summary>
        </member>
        <member name="F:QtLocation.QPlaceSearchRequest.RelevanceHint.LexicalPlaceNameHint">
            <summary>Alphabetic ordering of places according to name is relevant to the user.</summary>
        </member>
        <member name="T:QtLocation.QPlaceManager">
            <summary>
            <para>The QPlaceManager class provides the interface which allows clients to access places stored in a particular backend.</para>
            </summary>
            <remarks>
            <para>The following table gives an overview of the functionality provided by the QPlaceManager</para>
            <para></para>
            <para>FunctionalityDescription</para>
            <para>Searching for places	Using set of parameters such as a search term and search area, relevant places can be returned to the user.</para>
            <para>Categories	Places can be classified as belonging to different categories. The manager supports access to these categories.</para>
            <para>Search term suggestions	Given a partially complete search term, a list of potential search terms can be given.</para>
            <para>Recommendations	Given an existing place, a set of similar recommended places can be suggested to the user.</para>
            <para>Rich Content	Rich content such as images, reviews etc can be retrieved in a paged fashion.</para>
            <para>Place or Category management	Places and categories may be saved and removed. It is possible for notifications to be given when this happens.</para>
            <para>Localization	Different locales may be specified to return place data in different languages.</para>
            <para></para>
            <para></para>
            <para>Obtaining a QPlaceManager Instance</para>
            <para>Creation of a QPlaceManager is facilitated by the QGeoServiceProvider. See Initializing a manager for an example on how to create a manager.</para>
            <para></para>
            <para>Asynchronous Interface</para>
            <para>The QPlaceManager class provides an abstraction of the datastore which contains place information. The functions provided by the QPlaceManager and primarily asynchronous and follow a request-reply model. Typically a request is given to the manager, consisting of a various set of parameters and a reply object is created. The reply object has a signal to notify when the request is done, and once completed, the reply contains the results of the request, along with any errors that occurred, if any.</para>
            <para>An asynchronous request is generally handled as follows:</para>
            <para></para>
            <para></para>
            <para>  //1) Make an appropriate request</para>
            <para>  QPlaceSearchRequest searchRequest;</para>
            <para>  searchRequest.setSearchTerm(&quot;ice cream&quot;);</para>
            <para>  searchRequest.setSearchArea(QGeoCircle(QGeoCoordinate(12.34, 56.78)));</para>
            <para></para>
            <para>  //2) Use the manager to initiate a request and retrieve a reply object</para>
            <para>  QPlaceSearchReply * searchReply = manager-&gt;search(searchRequest);</para>
            <para></para>
            <para>  //3) Connect the reply object to a slot which is invoked upon operation completion</para>
            <para>  connect(searchReply, SIGNAL(finished()), this, SLOT(processSearchReply()));</para>
            <para>      ...</para>
            <para>      ...</para>
            <para>  //4) Have the slot appropriately process the results of the operation</para>
            <para>  void processSearchReply() {</para>
            <para>      if (searchReply-&gt;error() == QPlaceReply::NoError) {</para>
            <para>          foreach (const QPlaceSearchResult &amp;result, searchReply-&gt;results()) {</para>
            <para>              if (result.type() == QPlaceSearchResult::PlaceResult)</para>
            <para>                  qDebug() &lt;&lt; &quot;Title:&quot; &lt;&lt; result.title();</para>
            <para>          }</para>
            <para>      }</para>
            <para></para>
            <para>  //5) Discard the rely object when done.</para>
            <para>      searchReply-&gt;deleteLater();</para>
            <para>      searchReply = 0;</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>See Common Operations for a list of examples demonstrating how the QPlaceManger is used.</para>
            <para></para>
            <para>Category Initialization</para>
            <para>Sometime during startup of an application, the initializeCategories() function should be called to setup the categories. Initializing the categories enables the usage of the following functions:</para>
            <para></para>
            <para>QPlaceManager::childCategories()</para>
            <para>QPlaceManager::category()</para>
            <para>QPlaceManager::parentCategoryId()</para>
            <para>QPlaceManager::childCategoryIds();</para>
            <para></para>
            <para>If the categories need to be refreshed or reloaded, the initializeCategories() function may be called again.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceManager.GetPlaceDetails(System.String)">
            <summary>
            <para>Retrieves a details of place corresponding to the given placeId.</para>
            <para>See Fetching Place Details for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.GetPlaceContent(QtLocation.QPlaceContentRequest)">
            <summary>
            <para>Retrieves content for a place according to the parameters specified in request.</para>
            <para>See Fetching Rich Content for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.Search(QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Searches for places according to the parameters specified in request.</para>
            <para>See Discovery/Search for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.SearchSuggestions(QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Requests a set of search term suggestions according to the parameters specified in request. The request can hold the incomplete search term, along with other data such as a search area to narrow down relevant results.</para>
            <para>See Search Suggestions for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.SavePlace(QtLocation.QPlace)">
            <summary>
            <para>Saves a specified place.</para>
            <para>See Saving a place cpp for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.RemovePlace(System.String)">
            <summary>
            <para>Removes the place corresponding to placeId from the manager.</para>
            <para>See Removing a place cpp for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.SaveCategory(QtLocation.QPlaceCategory,System.String)">
            <summary>
            <para>Saves a category that is a child of the category specified by parentId. An empty parentId means category is saved as a top level category.</para>
            <para>See Saving a category for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.RemoveCategory(System.String)">
            <summary>
            <para>Removes the category corresponding to categoryId from the manager.</para>
            <para>See Removing a category for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.InitializeCategories">
            <summary>
            <para>Initializes the categories of the manager.</para>
            <para>See Using Categories for an example of usage.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.ParentCategoryId(System.String)">
            <summary>
            <para>Returns the parent category identifier of the category corresponding to categoryId.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.ChildCategoryIds(System.String)">
            <summary>
            <para>Returns the child category identifiers of the category corresponding to parentId. If parentId is empty then all top level category identifiers are returned.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.Category(System.String)">
            <summary>
            <para>Returns the category corresponding to the given categoryId.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.SetLocale(QtCore.QLocale)">
            <summary>
            <para>Convenience function which sets the manager's list of preferred locales to a single locale.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.CompatiblePlace(QtLocation.QPlace)">
            <summary>
            <para>Returns a pruned or modified version of the original place which is suitable to be saved into this manager.</para>
            <para>Only place details that are supported by this manager is present in the modified version. Manager specific data such as the place id, is not copied over from the original.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManager.MatchingPlaces(QtLocation.QPlaceMatchRequest)">
            <summary>
            <para>Returns a reply which contains a list of places which correspond/match those specified in the request. The places specified in the request come from a different manager.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply-&gt;error() equals QPlaceReply::NoError then the processing finished successfully.</para>
            <para>This signal and QPlaceReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QPlaceManager::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error meant for developers and not end users.</para>
            <para>This signal and QPlaceReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.PlaceAdded">
            <summary>
            <para>This signal is emitted if a place has been added to the manager engine's datastore. The particular added place is specified by placeId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.PlaceUpdated">
            <summary>
            <para>This signal is emitted if a place has been modified in the manager's datastore. The particular modified place is specified by placeId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.PlaceRemoved">
            <summary>
            <para>This signal is emitted if a place has been removed from the manager's datastore. The particular place that has been removed is specified by placeId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.CategoryAdded">
            <summary>
            <para>This signal is emitted if a category has been added to the manager's datastore. The parent of the category is specified by parentId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.CategoryUpdated">
            <summary>
            <para>This signal is emitted if a category has been modified in the manager's datastore. The parent of the modified category is specified by parentId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.CategoryRemoved">
            <summary>
            <para>This signal is emitted when the category corresponding to categoryId has been removed from the manager's datastore. The parent of the removed category is specified by parentId.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManager.DataChanged">
            <summary>
            <para>This signal is emitted by the manager if there are large scale changes to its underlying datastore and the manager considers these changes radical enough to require clients to reload all data.</para>
            <para>If the signal is emitted, no other signals will be emitted for the associated changes.</para>
            <para>This signal is only emitted by managers that support the QPlaceManager::NotificationsFeature.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceManager.ManagerName">
            <summary>
            <para>Returns the name of the manager</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceManager.ManagerVersion">
            <summary>
            <para>Returns the manager version.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceManagerEngine">
            <summary>
            <para>The QPlaceManagerEngine class provides an interface for implementers of QGeoServiceProvider plugins who want to provide access to place functionality.</para>
            </summary>
            <remarks>
            <para>Application developers need not concern themselves with the QPlaceManagerEngine. Backend implementers however will need to derive from QPlaceManagerEngine and provide implementations for the abstract virtual functions.</para>
            <para>For more information on writing a backend see the Places Backend documentation.</para>
            <para></para>
            <para>See also QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.GetPlaceDetails(System.String)">
            <summary>
            <para>Retrieves details of place corresponding to the given placeId.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.GetPlaceContent(QtLocation.QPlaceContentRequest)">
            <summary>
            <para>Retrieves content for a place according to the parameters specified in request.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.Search(QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Searches for places according to the parameters specified in request.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.SearchSuggestions(QtLocation.QPlaceSearchRequest)">
            <summary>
            <para>Requests a set of search term suggestions according to the parameters specified in request.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.SavePlace(QtLocation.QPlace)">
            <summary>
            <para>Saves a specified place to the manager engine's datastore.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.RemovePlace(System.String)">
            <summary>
            <para>Removes the place corresponding to placeId from the manager engine's datastore.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.SaveCategory(QtLocation.QPlaceCategory,System.String)">
            <summary>
            <para>Saves a category that is a child of the category specified by parentId. An empty parentId means category is saved as a top level category.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.RemoveCategory(System.String)">
            <summary>
            <para>Removes the category corresponding to categoryId from the manager engine's datastore.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.InitializeCategories">
            <summary>
            <para>Initializes the categories of the manager engine.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.ParentCategoryId(System.String)">
            <summary>
            <para>Returns the parent category identifier of the category corresponding to categoryId.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.ChildCategoryIds(System.String)">
            <summary>
            <para>Returns the child category identifiers of the category corresponding to categoryId. If categoryId is empty then all top level category identifiers are returned.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.Category(System.String)">
            <summary>
            <para>Returns the category corresponding to the given categoryId.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.ConstructIconUrl(QtLocation.QPlaceIcon,QtCore.QSize)">
            <summary>
            <para>QUrl QPlaceManagerEngine::constructIconUrl(const QPlaceIcon &amp;icon, const QSize &amp;size)</para>
            <para>Constructs an icon url from a given icon, size. The URL of the icon image that most closely matches the given parameters is returned.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.CompatiblePlace(QtLocation.QPlace)">
            <summary>
            <para>Returns a pruned or modified version of the original place which is suitable to be saved by the manager engine.</para>
            <para>Only place details that are supported by this manager is present in the modified version. Manager specific data such as the place id, is not copied over from the original.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceManagerEngine.MatchingPlaces(QtLocation.QPlaceMatchRequest)">
            <summary>
            <para>Returns a reply which contains a list of places which correspond/match those specified in request.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.Finished">
            <summary>
            <para>This signal is emitted when reply has finished processing.</para>
            <para>If reply-&gt;error() equals QPlaceReply::NoError then the processing finished successfully.</para>
            <para>This signal and QPlaceReply::finished() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.Error">
            <summary>
            <para>This signal is emitted when an error has been detected in the processing of reply. The QPlaceManager::finished() signal will probably follow.</para>
            <para>The error will be described by the error code error. If errorString is not empty it will contain a textual description of the error meant for developers and not end users.</para>
            <para>This signal and QPlaceReply::error() will be emitted at the same time.</para>
            <para>Note: Do not delete the reply object in the slot connected to this signal. Use deleteLater() instead.</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.PlaceAdded">
            <summary>
            <para>This signal is emitted if a place has been added to the manager engine's datastore. The particular added place is specified by placeId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.PlaceUpdated">
            <summary>
            <para>This signal is emitted if a place has been modified in the manager engine's datastore. The particular modified place is specified by placeId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.PlaceRemoved">
            <summary>
            <para>This signal is emitted if a place has been removed from the manager engine's datastore. The particular place that has been removed is specified by placeId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.CategoryAdded">
            <summary>
            <para>This signal is emitted if a category has been added to the manager engine's datastore. The parent of the category is specified by parentId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.CategoryUpdated">
            <summary>
            <para>This signal is emitted if a category has been modified in the manager engine's datastore. The parent of the modified category is specified by parentId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.CategoryRemoved">
            <summary>
            <para>This signal is emitted when the category corresponding to categoryId has been removed from the manager engine's datastore. The parent of the removed category is specified by parentId.</para>
            <para>This signal is only emitted by manager engines that support the QPlaceManager::NotificationsFeature.</para>
            <para>See also dataChanged().</para>
            </summary>
        </member>
        <member name="E:QtLocation.QPlaceManagerEngine.DataChanged">
            <summary>
            <para>*</para>
            <para>This signal is emitted by the engine if there are large scale changes to its underlying datastore and the engine considers these changes radical enough to require clients to reload all data.</para>
            <para>If the signal is emitted, no other signals will be emitted for the associated changes.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceManagerEngine.ManagerName">
            <summary>
            <para>Returns the name which this engine implementation uses to distinguish itself from the implementations provided by other plugins.</para>
            <para>The manager name is automatically set to be the same as the QGeoServiceProviderFactory::providerName().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceManagerEngine.ManagerVersion">
            <summary>
            <para>Returns the version of this engine implementation.</para>
            <para>The manager version is automatically set to be the same as the QGeoServiceProviderFactory::providerVersion().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceManagerEngine.Manager">
            <summary>
            <para>Returns the manager instance used to create this engine.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceProposedSearchResult">
            <summary>
            <para>The QPlaceProposedSearchResult class represents a search result containing a proposed search.</para>
            </summary>
            <remarks>
            <para>See also QPlaceSearchResult.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceProposedSearchResult.#ctor">
            <summary>
            <para>Constructs a new proposed search result.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceProposedSearchResult.#ctor(QtLocation.QPlaceSearchResult)">
            <summary>
            <para>Contructs a copy of other if possible, otherwise constructs a default proposed search result.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceProposedSearchResult.SearchRequest">
            <summary>
            <para>Returns a place search request that can be used to perform an additional proposed search.</para>
            <para>See also setSearchRequest().</para>
            <para></para>
            <para>Sets the proposed search request to request.</para>
            <para>See also searchRequest().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceResult">
            <summary>
            <para>The QPlaceResult class represents a search result containing a place.</para>
            </summary>
            <remarks>
            <para>The PlaceResult holds the distance to the place from the center of the search request, an instance of the place and an indication of whether the result is sponsored or organic.</para>
            <para>The intended usage is that a QPlaceSearchResult can be converted into a QPlaceResult like so:</para>
            <para></para>
            <para></para>
            <para>  if (result.type() == QPlaceSearchResult::PlaceResult) {</para>
            <para>      QPlaceResult placeResult = result;</para>
            <para>      qDebug() &lt;&lt; placeResult.place().name();</para>
            <para>      qDebug() &lt;&lt; placeResult.place().location().coordinate();</para>
            <para>      qDebug() &lt;&lt; placeResult.distance();</para>
            <para>  }</para>
            <para></para>
            <para></para>
            <para>The implementation is handled in such a way that object slicing is not an issue.</para>
            <para></para>
            <para>See also QPlaceSearchResult.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceResult.#ctor">
            <summary>
            <para>Constructs a new place result object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceResult.#ctor(QtLocation.QPlaceSearchResult)">
            <summary>
            <para>Constructs a copy of other if possible, otherwise constructs a default place result.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceResult.Distance">
            <summary>
            <para>Returns the distance of the place to the search center. This field is only relevant provided the search request contained a search area with a search center. Otherwise, the distance is NaN indicating an undefined distance. The default value for distance is NaN.</para>
            <para>See also setDistance().</para>
            <para></para>
            <para>Set the distance of the search result's place from a search center.</para>
            <para>See also distance().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceResult.Place">
            <summary>
            <para>Returns the place of the search result.</para>
            <para>See also setPlace().</para>
            <para></para>
            <para>Sets the place that this result refers to.</para>
            <para>See also place().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceResult.Sponsored">
            <summary>
            <para>Returns true if the result is a sponsored result.</para>
            <para>See also setSponsored().</para>
            <para></para>
            <para>Sets whether the result is a sponsored result or not.</para>
            <para>See also isSponsored().</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceSearchReply">
            <summary>
            <para>The QPlaceSearchReply class manages a place search operation started by an instance of QPlaceManager.</para>
            </summary>
            <remarks>
            <para>See Discovery/Search for an example on how to use a search reply.</para>
            <para></para>
            <para>See also QPlaceSearchRequest and QPlaceManager.</para>
            </remarks>
        </member>
        <member name="M:QtLocation.QPlaceSearchReply.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a search reply with a given parent.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchReply.Request">
            <summary>
            <para>Returns the search request that was used to generate this reply.</para>
            <para>See also setRequest().</para>
            <para></para>
            <para>Sets the search request used to generate this reply.</para>
            <para>See also request().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchReply.PreviousPageRequest">
            <summary>
            <para>Returns a place search request which can be used to request the previous page of search results. An empty place search request is returned if there is no previous page of results.</para>
            <para>See also nextPageRequest() and setPreviousPageRequest().</para>
            <para></para>
            <para>Sets the previous page of search results request to previous.</para>
            <para>See also previousPageRequest().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchReply.NextPageRequest">
            <summary>
            <para>Returns a place search request which can be used to request the next page of search results. An empty place search request is returned if there is no next page of results.</para>
            <para>See also previousPageRequest() and setNextPageRequest().</para>
            <para></para>
            <para>Sets the next page of search results request to next.</para>
            <para>See also nextPageRequest().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceSearchReply.type">
            <summary>
            <para>Reimplemented from QPlaceReply::type().</para>
            <para>Returns the type of reply.</para>
            </summary>
        </member>
        <member name="T:QtLocation.QPlaceUser">
            <summary>
            <para>The QPlaceUser class represents an individual user.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceUser.#ctor">
            <summary>
            <para>Constructs a new user object.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceUser.#ctor(QtLocation.QPlaceUser)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceUser.op_Equality(QtLocation.QPlaceUser,QtLocation.QPlaceUser)">
            <summary>
            <para>Returns true if this user is equal to other. Otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtLocation.QPlaceUser.op_Inequality(QtLocation.QPlaceUser,QtLocation.QPlaceUser)">
            <summary>
            <para>Returns true if other is not equal to this user, otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceUser.UserId">
            <summary>
            <para>Returns the identifier of the user.</para>
            <para>See also setUserId().</para>
            <para></para>
            <para>Sets the identifier of the user.</para>
            <para>See also userId().</para>
            </summary>
        </member>
        <member name="P:QtLocation.QPlaceUser.Name">
            <summary>
            <para>Returns the name of the user.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the user.</para>
            <para>See also name().</para>
            </summary>
        </member>
    </members>
</doc>
