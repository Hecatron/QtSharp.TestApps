<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtPurchasing.Sharp</name>
    </assembly>
    <members>
        <member name="T:QtPurchasing.QInAppProduct">
            <summary>
            <para>A product registered in the store</para>
            </summary>
            <remarks>
            <para>QInAppProduct encapsulates a product in the external store after it has been registered in QInAppStore and confirmed to exist. It has an identifier which matches the identifier of the product in the external store, it has a price which is retrieved from the external store, and it has a product type.</para>
            <para>The product type can be either Consumable or Unlockable. The former type of products can be purchased any number of times as long as each transaction is finalized explicitly by the application. The latter type can only be purchased once.</para>
            </remarks>
        </member>
        <member name="M:QtPurchasing.QInAppProduct.Purchase">
            <summary>
            <para>Launches the purchase flow for this product. The purchase is done asynchronously. When the purchase has either been completed successfully or failed for some reason, the QInAppStore instance containing this product will emit a QInAppStore::transactionReady() signal with information about the transaction.</para>
            <para>See also QInAppTransaction.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppProduct.Identifier">
            <summary>
            <para>This property holds the identifier of the product. It matches the identifier which is registered in the external store.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppProduct.productType">
            <summary>
            <para>This property holds the type of the product. This can either be Consumable or Unlockable. The former are products which can be purchased any number of times (granted that each transaction is explicitly finalized by the application first) and the latter are products which can only be purchased once per user.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppProduct.Price">
            <summary>
            <para>This property holds the price of the product as reported by the external store. This is the full price including currency, usually in the locale of the current user.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppProduct.Title">
            <summary>
            <para>This property holds the title of the product as reported by the external store. This title is returned from the store in the locale language if available.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppProduct.Description">
            <summary>
            <para>This property holds the description of the product as reported by the external store. This description is returned from the store in the locale language if available.</para>
            </summary>
        </member>
        <member name="T:QtPurchasing.QInAppProduct.ProductType">
            <summary>
            <para>This enum type is used to specify the product type when registering the product.</para>
            </summary>
        </member>
        <member name="F:QtPurchasing.QInAppProduct.ProductType.Consumable">
            <summary>The product is consumable, meaning that once the transaction for a purchase of the product has been finalized, it can be purchased again.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppProduct.ProductType.Unlockable">
            <summary>The product is unlockable, meaning that it can only be purchased once per user. Purchases of unlockable products can be restored using the QInAppStore::restorePurchases().</summary>
        </member>
        <member name="T:QtPurchasing.QInAppStore">
            <summary>
            <para>The main entry point for managing in-app purchases</para>
            </summary>
            <remarks>
            <para>QInAppStore is used for managing in-app purchases in your application in a cross-platform way.</para>
            <para></para>
            <para>Using the QInAppStore</para>
            <para>In general there are two steps to completing an in-app purchase using the API:</para>
            <para></para>
            <para>Initialize the store</para>
            <para>Upon start-up of your application, connect all signals in QInAppStore to related slots in your own QObject. Then use the registerProduct() function to register the ID of each product you expect to find registered in the external store, as well as its type.</para>
            <para>Registering a product is asynchronous, and will at some point yield one of the following two signals: 1. productRegistered() if the product was found in the external store with a matching type. 2. productUnknown() if the product was not found in the external store with the type you specified.</para>
            <para>In addition, a transactionReady() signal may be emitted for any existing transaction which has not yet been finalized. At this point, you should check if the transaction has previously been registered. If it hasn't, register it right away. Finally, call QInAppTransaction::finalize() on the transaction.</para>
            <para></para>
            <para>Complete a purchase</para>
            <para>Once the items have been successfully registered in the store, you can purchase them. Get the previously registered QInAppProduct using registeredProduct() and call QInAppProduct::purchase(). This call is also asynchronous.</para>
            <para>At some point later on, the transactionReady() signal will be emitted for the purchase. Check QInAppTransaction::status() to see if the purchase was completed successfully. If it was, then you must save the information about the purchase in a safe way, so that the application can restore it later.</para>
            <para>When you are done, call QInAppTransaction::finalize(), regardless of its status. Transactions which are not finalized will be emitted again the next time your application calls registerProduct() for the same product.</para>
            <para>Note: Please mind that QInAppStore does not save the purchased state of items in the store for you. The application should store this information in a safe way upon receiving the transactionReady() signal, before calling QInAppTransaction::finalize().</para>
            <para></para>
            <para>Types of purchases</para>
            <para>There are two types of purchases supported by QInAppStore: QInAppProduct::Consumable and QInAppProduct::Unlockable. The former will be consumed when the transaction is completed and QInAppTransaction::finalize() is called, meaning that it can be purchased again, any number of times. Unlockable items can only be purchased once.</para>
            <para>Consumable products are temporary and can be purchased multiple times. Examples could be a day-ticket on the bus or a magic sword in a computer game. Note that when purchasing the same product multiple times, you should call QInAppTransaction::finalize() on each transaction before you can purchase the same product again.</para>
            <para>Unlockable products are products that a user will buy once, and the purchase of these items will be persistent. It can typically be used for things like unlocking content or functionality in the application.</para>
            <para></para>
            <para>Restoring purchases</para>
            <para>If your application has unlockable products, and does not store the purchase states of these products in a way which makes it possible to restore them when the user reinstalls the application, you should provide a way for the user to restore the purchases manually.</para>
            <para>Call the restorePurchases() function to begin this process. Granted that the remote store supports it, you will then at some point get transactionReady() for each unlockable item which has previously been purchased by the current user.</para>
            <para>Save the purchase state of each product and call QInAppTransaction::finalize() as you would for a regular purchase.</para>
            <para>Since restorePurchases() may, on some platforms, cause the user to be prompted for their password, it should usually be called as a reaction to user input. For instance applications can have a button in the UI which will trigger restorePurchases() and which users can hit manually if they have reinstalled the application (or installed it on a new device) and need to unlock the features that they have previously paid for.</para>
            <para>Note: This depends on support for this functionality in the remote store. If the remote store does not save the purchase state of unlockable products for you, the call will yield no transactionReady() signals, as if no products have been purchased. Both the Android and OS X / iOS backends support restoring unlockable products.</para>
            </remarks>
        </member>
        <member name="M:QtPurchasing.QInAppStore.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QInAppStore with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppStore.RestorePurchases">
            <summary>
            <para>Requests existing purchases of unlockable items and will yield a transactionReady() signal for each unlockable product that the remote store confirms have previously been purchased by the current user.</para>
            <para>This function can typically be used for restoring unlockable products when the application has been reinstalled and lost the saved purchase states.</para>
            <para>Note: Calling this function may prompt the user for their password on some platforms.</para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppStore.RegisterProduct(QtPurchasing.QInAppProduct.ProductType,System.String)">
            <summary>
            <para>Registers a product identified by identifier and with the given productType. The identifier must match the identifier of the product in the remote store. If the remote store differentiates between consumable and unlockable products, the productType must also match this.</para>
            <para>Calling this function will asynchronously yield either a productRegistered() or a productUnknown() signal. It may also yield a transactionReady() signal if there is a pending transaction for the product which has not yet been finalized.</para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppStore.RegisteredProduct(System.String)">
            <summary>
            <para>Returns the previously registered product uniquely known by the identifier.</para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppStore.SetPlatformProperty(System.String,System.String)">
            <summary>
            <para>Sets the platform specific property given by propertyName to value. This can be used to pass information to the platform implementation. The properties will be silently ignored on other platforms.</para>
            <para>Currently, the only supported platform property is &quot;AndroidPublicKey&quot; which is used by the Android backend to verify purchases. If it is not set, purchases will be accepted with no verification. (You can also do the verification manually by getting the signature from the QInAppTransaction object for the purchase.) For more information, see the Android documentation for billing security.</para>
            </summary>
        </member>
        <member name="E:QtPurchasing.QInAppStore.ProductRegistered">
            <summary>
            <para>This signal is emitted when information about a product has been collected from the remote store. It is emitted as a reaction to a registerProduct() call for the same product.</para>
            <para>See also productUnknown().</para>
            </summary>
        </member>
        <member name="E:QtPurchasing.QInAppStore.ProductUnknown">
            <summary>
            <para>This signal is emitted when the product named identifier was registered using registerProduct() and matching information could not be provided by the remote store. The productType matches the product type which was originally passed to registerProduct().</para>
            <para>See also productRegistered().</para>
            </summary>
        </member>
        <member name="E:QtPurchasing.QInAppStore.TransactionReady">
            <summary>
            <para>This signal is emitted whenever there is a transaction which needs to be finalized. It is emitted either when a purchase request has been made for a product, when restorePurchases() has been called and the product was previously purchased, or when registerProduct() was called for a product and there was a pending transaction for the product which had not yet been finalized.</para>
            </summary>
        </member>
        <member name="T:QtPurchasing.QInAppTransaction">
            <summary>
            <para>Contains information about a transaction in the external app store</para>
            </summary>
            <remarks>
            <para>QInAppTransaction contains information about a transaction in the external app store and is usually provided as a result of calling QInAppProduct::purchase(). When the purchase flow has been completed by the user (confirming the purchase, for instance by entering their password), the QInAppStore instance containing the product will emit a QInAppStore::transactionReady() signal with data about the transaction.</para>
            <para>The status() provides information on whether the transaction was successful or not. If it was successful, then the application should take appropriate action. When the necessary action has been performed, finalize() should be called. The finalize() function should be called regardless of the status of the transaction.</para>
            <para>It is important that the application stores the purchase information before calling finalize(). If a transaction is not finalized (for example because the application was interrupted before it had a chance to save the information), then the transaction will be emitted again the next time the product is registered by QInAppStore::registerProduct().</para>
            <para>Transactions can also be emitted after calling QInAppStore::restorePurchases(), at which point a new transaction will be emitted for each previously purchased unlockable product with the status of PurchaseRestored.</para>
            <para>Note: Since transactions may under certain circumstances be emitted for the same transaction several times, the application should always check if the transaction has been registered before. Do not expect each transaction to be unique.</para>
            </remarks>
        </member>
        <member name="M:QtPurchasing.QInAppTransaction.OrderId">
            <summary>
            <para>This property holds a unique identifier for this transaction. This value may be an empty string if no transaction was registered (for example for canceled purchases).</para>
            <para>Access functions:</para>
            <para></para>
            <para> virtual QString 	orderId() const</para>
            <para></para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppTransaction.Finalize">
            <summary>
            <para>Call this when the application has finished performing all necessary reactions to the purchase. If the status is PurchaseApproved, the application should store the information about the transaction in a safe way before finalizing it. All transactions should be finalized.</para>
            </summary>
        </member>
        <member name="M:QtPurchasing.QInAppTransaction.PlatformProperty(System.String)">
            <summary>
            <para>Returns the platform-specific property given by propertyName.</para>
            <para>The following properties are available on Google Play:</para>
            <para></para>
            <para>AndroidSignature: The signature of the transaction, as given by the private key for the application.</para>
            <para>AndroidPurchaseData: The purchase data returned by the Google Play store.</para>
            <para></para>
            <para>These properties can be used to verify the purchase using the public key of your application. It is also possible to have the back-end verify the purchases by passing in the public key before registering products, using QInAppStore::setPlatformProperty().</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppTransaction.Product">
            <summary>
            <para>This property holds the product which is the object of this transaction.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QInAppProduct *	product() const</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppTransaction.failureReason">
            <summary>
            <para>This property holds the reason for the failure if the transaction's status is PurchaseFailed. If the purchase was canceled by the user, the failure reason will be CanceledByUser. If the purchase failed due to an error, it will be ErrorOccurred. If the purchase did not fail, the failure reason will be NoFailure.</para>
            <para>See also errorString and status.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppTransaction.ErrorString">
            <summary>
            <para>This property holds a string describing the error if the transaction failed due to an error. The contents of the error string is platform-specific.</para>
            <para>See also failureReason and status.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppTransaction.Timestamp">
            <summary>
            <para>This property holds the timestamp of the transaction. The timestamp can be invalid if there is no valid transaction, for example if the user canceled the purchase.</para>
            <para>See also orderId.</para>
            </summary>
        </member>
        <member name="P:QtPurchasing.QInAppTransaction.Status">
            <summary>
            <para>This property holds the status of the transaction. If the purchase was successfully completed, the status will be PurchaseApproved. If the purchase failed or was unsuccessful then the status will be PurchaseFailed. If the transaction was restored as a result of calling QInAppStore::restorePurchases() then the status will be PurchaseRestored.</para>
            </summary>
        </member>
        <member name="T:QtPurchasing.QInAppTransaction.TransactionStatus">
            <summary>
            <para>This enum type is used to specify the status of the transaction.</para>
            </summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.TransactionStatus.Unknown">
            <summary>The transaction status has not been set.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.TransactionStatus.PurchaseApproved">
            <summary>The purchase was successfully completed.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.TransactionStatus.PurchaseFailed">
            <summary>The purchase was not completed for some reason. This could be because the user canceled the transaction, but it could also for example be caused by a missing network connection.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.TransactionStatus.PurchaseRestored">
            <summary>The product has previously been purchased and the purchase has now been restored as a result of calling QInAppStore::restorePurchases().</summary>
        </member>
        <member name="T:QtPurchasing.QInAppTransaction.FailureReason">
            <summary>
            <para>This enum type specifies the reason for failure if a transaction has the PurchaseFailed status.</para>
            </summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.FailureReason.NoFailure">
            <summary>The status of the transaction is not PurchaseFailed.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.FailureReason.CanceledByUser">
            <summary>The transaction was manually canceled by the user.</summary>
        </member>
        <member name="F:QtPurchasing.QInAppTransaction.FailureReason.ErrorOccurred">
            <summary>An error occurred, preventing the transaction from completing. See the errorString property for more information on the precise error that occurred.</summary>
        </member>
    </members>
</doc>
