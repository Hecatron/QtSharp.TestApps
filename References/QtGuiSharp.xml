<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QtGuiSharp</name>
    </assembly>
    <members>
        <member name="M:QtGui.qrgb.QRed(System.UInt32)">
            <summary>
            <para>Returns the red component of the ARGB quadruplet rgb.</para>
            <para>See also qRgb() and QColor::red().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QGreen(System.UInt32)">
            <summary>
            <para>Returns the green component of the ARGB quadruplet rgb.</para>
            <para>See also qRgb() and QColor::green().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QBlue(System.UInt32)">
            <summary>
            <para>Returns the blue component of the ARGB quadruplet rgb.</para>
            <para>See also qRgb() and QColor::blue().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QAlpha(System.UInt32)">
            <summary>
            <para>Returns the alpha component of the ARGB quadruplet rgba.</para>
            <para>See also qRgb() and QColor::alpha().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns the ARGB quadruplet (255, r, g, b).</para>
            <para>See also qRgba(), qRed(), qGreen(), and qBlue().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QRgba(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns the ARGB quadruplet (a, r, g, b).</para>
            <para>See also qRgb(), qRed(), qGreen(), and qBlue().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QGray(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Returns a gray value (0 to 255) from the (r, g, b)
            triplet.</para>
            <para>The gray value is calculated using the formula (r * 11 + g * 16 +
            b * 5)/32.</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QGray(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a gray value (0 to 255) from the given ARGB quadruplet
            rgb.</para>
            <para>The gray value is calculated using the formula (R * 11 + G * 16 +
            B * 5)/32; the alpha-channel is ignored.</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QPremultiply(System.UInt32)">
            <summary>
            <para>Converts an unpremultiplied ARGB quadruplet rgb into a
            premultiplied ARGB quadruplet.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qUnpremultiply().</para>
            </summary>
        </member>
        <member name="M:QtGui.qrgb.QUnpremultiply(System.UInt32)">
            <summary>
            <para>Converts a premultiplied ARGB quadruplet rgb into an
            unpremultiplied ARGB quadruplet.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also qPremultiply().</para>
            </summary>
        </member>
        <member name="T:QtGui.QColor">
            <summary>
            <para>The QColor class provides colors based on RGB, HSV or CMYK
            values.</para>
            </summary>
            <remarks>
            <para>A color is normally specified in terms of RGB (red, green, and
            blue) components, but it is also possible to specify it in terms of HSV
            (hue, saturation, and value) and CMYK (cyan, magenta, yellow and black)
            components. In addition a color can be specified using a color name. The
            color name can be any of the SVG 1.0 color names.</para>
            <para></para>
            <para> RGBHSVCMYK</para>
            <para>	</para>
            <para></para>
            <para>The QColor constructor creates the color based on RGB values. To
            create a QColor based on either HSV or CMYK values, use the toHsv() and
            toCmyk() functions respectively. These functions return a copy of the color
            using the desired format. In addition the static fromRgb(), fromHsv() and
            fromCmyk() functions create colors from the specified values.
            Alternatively, a color can be converted to any of the three formats using
            the convertTo() function (returning a copy of the color in the desired
            format), or any of the setRgb(), setHsv() and setCmyk() functions altering
            this color's format. The spec() function tells how the color was
            specified.</para>
            <para>A color can be set by passing an RGB string (such as
            &quot;#112233&quot;), or an ARGB string (such as &quot;#ff112233&quot;) or
            a color name (such as &quot;blue&quot;), to the setNamedColor() function.
            The color names are taken from the SVG 1.0 color names. The name() function
            returns the name of the color in the format &quot;#RRGGBB&quot;. Colors can
            also be set using setRgb(), setHsv() and setCmyk(). To get a lighter or
            darker color use the lighter() and darker() functions respectively.</para>
            <para>The isValid() function indicates whether a QColor is legal at
            all. For example, a RGB color with RGB values out of range is illegal. For
            performance reasons, QColor mostly disregards illegal colors, and for that
            reason, the result of using an invalid color is undefined.</para>
            <para>The color components can be retrieved individually, e.g with
            red(), hue() and cyan(). The values of the color components can also be
            retrieved in one go using the getRgb(), getHsv() and getCmyk() functions.
            Using the RGB color model, the color components can in addition be accessed
            with rgb().</para>
            <para>There are several related non-members: QRgb is a typdef for an
            unsigned int representing the RGB value triplet (r, g, b). Note that it
            also can hold a value for the alpha-channel (for more information, see the
            Alpha-Blended Drawing section). The qRed(), qBlue() and qGreen() functions
            return the respective component of the given QRgb value, while the qRgb()
            and qRgba() functions create and return the QRgb triplet based on the given
            component values. Finally, the qAlpha() function returns the alpha
            component of the provided QRgb, and the qGray() function calculates and
            return a gray value based on the given value.</para>
            <para>QColor is platform and device independent. The QColormap class
            maps the color to the hardware.</para>
            <para>For more information about painting in general, see the Paint
            System documentation.</para>
            <para></para>
            <para>Integer vs. Floating Point Precision</para>
            <para>QColor supports floating point precision and provides floating
            point versions of all the color components functions, e.g. getRgbF(),
            hueF() and fromCmykF(). Note that since the components are stored using
            16-bit integers, there might be minor deviations between the values set
            using, for example, setRgbF() and the values returned by the getRgbF()
            function due to rounding.</para>
            <para>While the integer based functions take values in the range 0-255
            (except hue() which must have values within the range 0-359), the floating
            point functions accept values in the range 0.0 - 1.0.</para>
            <para></para>
            <para>Alpha-Blended Drawing</para>
            <para>QColor also support alpha-blended outlining and filling. The
            alpha channel of a color specifies the transparency effect, 0 represents a
            fully transparent color, while 255 represents a fully opaque color. For
            example:</para>
            <para>// Specify semi-transparent red</para>
            <para>painter.setBrush(QColor(255, 0, 0, 127));</para>
            <para>painter.drawRect(0, 0, width()/2, height());</para>
            <para></para>
            <para>// Specify semi-transparent blue</para>
            <para>painter.setBrush(QColor(0, 0, 255, 127));</para>
            <para>painter.drawRect(0, 0, width(), height()/2);</para>
            <para>The code above produces the following output:</para>
            <para></para>
            <para>The alpha channel of a color can be retrieved and set using the
            alpha() and setAlpha() functions if its value is an integer, and alphaF()
            and setAlphaF() if its value is qreal (double). By default, the
            alpha-channel is set to 255 (opaque). To retrieve and set all the RGB color
            components (including the alpha-channel) in one go, use the rgba() and
            setRgba() functions.</para>
            <para></para>
            <para>Predefined Colors</para>
            <para>There are 20 predefined QColors described by the Qt::GlobalColor
            enum, including black, white, primary and secondary colors, darker versions
            of these colors and three shades of gray. QColor also recognizes a variety
            of color names; the static colorNames() function returns a QStringList
            color names that QColor knows about.</para>
            <para></para>
            <para>Additionally, the Qt::color0, Qt::color1 and Qt::transparent
            colors are used for special purposes.</para>
            <para>Qt::color0 (zero pixel value) and Qt::color1 (non-zero pixel
            value) are special colors for drawing in QBitmaps. Painting with Qt::color0
            sets the bitmap bits to 0 (transparent; i.e., background), and painting
            with Qt::color1 sets the bits to 1 (opaque; i.e., foreground).</para>
            <para>Qt::transparent is used to indicate a transparent pixel. When
            painting with this value, a pixel value will be used that is appropriate
            for the underlying pixel format in use.</para>
            <para></para>
            <para>The HSV Color Model</para>
            <para>The RGB model is hardware-oriented. Its representation is close
            to what most monitors show. In contrast, HSV represents color in a way more
            suited to the human perception of color. For example, the relationships
            &quot;stronger than&quot;, &quot;darker than&quot;, and &quot;the opposite
            of&quot; are easily expressed in HSV but are much harder to express in
            RGB.</para>
            <para>HSV, like RGB, has three components:</para>
            <para></para>
            <para>H, for hue, is in the range 0 to 359 if the color is chromatic
            (not gray), or meaningless if it is gray. It represents degrees on the
            color wheel familiar to most people. Red is 0 (degrees), green is 120, and
            blue is 240.</para>
            <para></para>
            <para>S, for saturation, is in the range 0 to 255, and the bigger it
            is, the stronger the color is. Grayish colors have saturation near 0; very
            strong colors have saturation near 255.</para>
            <para></para>
            <para>V, for value, is in the range 0 to 255 and represents lightness
            or brightness of the color. 0 is black; 255 is as far from black as
            possible.</para>
            <para></para>
            <para></para>
            <para>Here are some examples: pure red is H=0, S=255, V=255; a dark
            red, moving slightly towards the magenta, could be H=350 (equivalent to
            -10), S=255, V=180; a grayish light red could have H about 0 (say 350-359
            or 0-10), S about 50-100, and S=255.</para>
            <para>Qt returns a hue value of -1 for achromatic colors. If you pass a
            hue value that is too large, Qt forces it into range. Hue 360 or 720 is
            treated as 0; hue 540 is treated as 180.</para>
            <para>In addition to the standard HSV model, Qt provides an
            alpha-channel to feature alpha-blended drawing.</para>
            <para></para>
            <para>The HSL Color Model</para>
            <para>HSL is similar to HSV. Instead of value parameter from HSV, HSL
            has the lightness parameter. The lightness parameter goes from black to
            color and from color to white. If you go outside at the night its black or
            dark gray. At day its colorful but if you look in a really strong light a
            things they are going to white and wash out.</para>
            <para></para>
            <para>The CMYK Color Model</para>
            <para>While the RGB and HSV color models are used for display on
            computer monitors, the CMYK model is used in the four-color printing
            process of printing presses and some hard-copy devices.</para>
            <para>CMYK has four components, all in the range 0-255: cyan (C),
            magenta (M), yellow (Y) and black (K). Cyan, magenta and yellow are called
            subtractive colors; the CMYK color model creates color by starting with a
            white surface and then subtracting color by applying the appropriate
            components. While combining cyan, magenta and yellow gives the color black,
            subtracting one or more will yield any other color. When combined in
            various percentages, these three colors can create the entire spectrum of
            colors.</para>
            <para>Mixing 100 percent of cyan, magenta and yellow does produce
            black, but the result is unsatisfactory since it wastes ink, increases
            drying time, and gives a muddy colour when printing. For that reason, black
            is added in professional printing to provide a solid black tone; hence the
            term 'four color process'.</para>
            <para>In addition to the standard CMYK model, Qt provides an
            alpha-channel to feature alpha-blended drawing.</para>
            <para></para>
            <para>See also QPalette, QBrush, and
            QApplication::setColorSpec().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QColor.#ctor">
            <summary>
            <para>Constructs an invalid color with the RGB value (0, 0, 0). An
            invalid color is a color that is not properly set up for the underlying
            window system.</para>
            <para>The alpha value of an invalid color is unspecified.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.#ctor(QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs a new color with a color value of color.</para>
            <para>See also isValid() and Predefined Colors.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a color with the RGB value r, g, b, and the
            alpha-channel (transparency) value of a.</para>
            <para>The color is left invalid if any of the arguments are
            invalid.</para>
            <para>See also setRgba() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.#ctor(System.UInt32)">
            <summary>
            <para>Constructs a color with the value color. The alpha component is
            ignored and set to solid.</para>
            <para>See also fromRgb() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.#ctor(System.String)">
            <summary>
            <para>Constructs a named color in the same way as setNamedColor() using
            the given name.</para>
            <para>The color is left invalid if the name cannot be parsed.</para>
            <para>See also setNamedColor(), name(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.#ctor(QtGui.QColor)">
            <summary>
            <para>Constructs a color that is a copy of color.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Name">
            <summary>
            <para>Returns the name of the color in the format &quot;#RRGGBB&quot;;
            i.e. a &quot;#&quot; character followed by three two-digit hexadecimal
            numbers.</para>
            <para>See also setNamedColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Name(QtGui.QColor.NameFormat)">
            <summary>
            <para>Returns the name of the color in the specified format.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setNamedColor() and NameFormat.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetNamedColor(System.String)">
            <summary>
            <para>Sets the RGB value of this QColor to name, which may be in one of
            these formats:</para>
            <para></para>
            <para>#RGB (each of R, G, and B is a single hex digit)</para>
            <para>#RRGGBB</para>
            <para>#AARRGGBB (Since 5.2)</para>
            <para>#RRRGGGBBB</para>
            <para>#RRRRGGGGBBBB</para>
            <para>A name from the list of colors defined in the list of SVG color
            keyword names provided by the World Wide Web Consortium; for example,
            &quot;steelblue&quot; or &quot;gainsboro&quot;. These color names work on
            all platforms. Note that these color names are not the same as defined by
            the Qt::GlobalColor enums, e.g. &quot;green&quot; and Qt::green does not
            refer to the same color.</para>
            <para>transparent - representing the absence of a color.</para>
            <para></para>
            <para>The color is invalid if name cannot be parsed.</para>
            <para>See also QColor(), name(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetRgb(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by r, g, b, and a, to the red,
            green, blue, and alpha-channel (transparency) components of the color's RGB
            value.</para>
            <para>These components can be retrieved individually using the red(),
            green(), blue() and alpha() functions.</para>
            <para>See also rgb() and setRgb().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetRgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the RGB value to r, g, b and the alpha value to a.</para>
            <para>All the values must be in the range 0-255.</para>
            <para>See also rgb(), getRgb(), and setRgbF().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetRgbF(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by r, g, b, and a, to the red,
            green, blue, and alpha-channel (transparency) components of the color's RGB
            value.</para>
            <para>These components can be retrieved individually using the redF(),
            greenF(), blueF() and alphaF() functions.</para>
            <para>See also rgb() and setRgb().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetRgbF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the color channels of this color to r (red), g (green), b
            (blue) and a (alpha, transparency).</para>
            <para>All values must be in the range 0.0-1.0.</para>
            <para>See also rgb(), getRgbF(), and setRgb().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsv(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by h, s, v, and a, to the hue,
            saturation, value, and alpha-channel (transparency) components of the
            color's HSV value.</para>
            <para>These components can be retrieved individually using the hue(),
            saturation(), value() and alpha() functions.</para>
            <para>See also setHsv() and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetHsv(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets a HSV color value; h is the hue, s is the saturation, v is
            the value and a is the alpha component of the HSV color.</para>
            <para>The saturation, value and alpha-channel values must be in the
            range 0-255, and the hue value must be greater than -1.</para>
            <para>See also getHsv(), setHsvF(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsvF(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by h, s, v, and a, to the hue,
            saturation, value, and alpha-channel (transparency) components of the
            color's HSV value.</para>
            <para>These components can be retrieved individually using the hueF(),
            saturationF(), valueF() and alphaF() functions.</para>
            <para>See also setHsv() and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetHsvF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets a HSV color value; h is the hue, s is the saturation, v is
            the value and a is the alpha component of the HSV color.</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>See also getHsvF(), setHsv(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetCmyk(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by c, m, y, k, and a, to the cyan,
            magenta, yellow, black, and alpha-channel (transparency) components of the
            color's CMYK value.</para>
            <para>These components can be retrieved individually using the cyan(),
            magenta(), yellow(), black() and alpha() functions.</para>
            <para>See also setCmyk() and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetCmyk(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the color to CMYK values, c (cyan), m (magenta), y (yellow),
            k (black), and a (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0-255.</para>
            <para>See also getCmyk(), setCmykF(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetCmykF(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by c, m, y, k, and a, to the cyan,
            magenta, yellow, black, and alpha-channel (transparency) components of the
            color's CMYK value.</para>
            <para>These components can be retrieved individually using the cyanF(),
            magentaF(), yellowF(), blackF() and alphaF() functions.</para>
            <para>See also setCmykF() and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetCmykF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the color to CMYK values, c (cyan), m (magenta), y (yellow),
            k (black), and a (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>See also getCmykF(), setCmyk(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsl(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by h, s, l, and a, to the hue,
            saturation, lightness, and alpha-channel (transparency) components of the
            color's HSL value.</para>
            <para>These components can be retrieved individually using the
            hueHsl(), saturationHsl(), lightness() and alpha() functions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setHsl().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetHsl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets a HSL color value; h is the hue, s is the saturation, l is
            the lightness and a is the alpha component of the HSL color.</para>
            <para>The saturation, value and alpha-channel values must be in the
            range 0-255, and the hue value must be greater than -1.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also getHsl() and setHslF().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHslF(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by h, s, l, and a, to the hue,
            saturation, lightness, and alpha-channel (transparency) components of the
            color's HSL value.</para>
            <para>These components can be retrieved individually using the
            hueHslF(), saturationHslF(), lightnessF() and alphaF() functions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setHsl().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.SetHslF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets a HSL color lightness; h is the hue, s is the saturation, l
            is the lightness and a is the alpha component of the HSL color.</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also getHslF() and setHsl().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.ToRgb">
            <summary>
            <para>Create and returns an RGB QColor based on this color.</para>
            <para>See also fromRgb(), convertTo(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.ToHsv">
            <summary>
            <para>Creates and returns an HSV QColor based on this color.</para>
            <para>See also fromHsv(), convertTo(), isValid(), and The HSV Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.ToCmyk">
            <summary>
            <para>Creates and returns a CMYK QColor based on this color.</para>
            <para>See also fromCmyk(), convertTo(), isValid(), and The CMYK Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.ToHsl">
            <summary>
            <para>Creates and returns an HSL QColor based on this color.</para>
            <para>See also fromHsl(), convertTo(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.ConvertTo(QtGui.QColor.Spec)">
            <summary>
            <para>Creates a copy of this color in the format specified by
            colorSpec.</para>
            <para>See also spec(), toCmyk(), toHsv(), toRgb(), and
            isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Light(System.Int32)">
            <summary>
            <para>Use lighter(factor) instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Lighter(System.Int32)">
            <summary>
            <para>Returns a lighter (or darker) color, but does not change this
            object.</para>
            <para>If the factor is greater than 100, this functions returns a
            lighter color. Setting factor to 150 returns a color that is 50% brighter.
            If the factor is less than 100, the return color is darker, but we
            recommend using the darker() function for this purpose. If the factor is 0
            or negative, the return value is unspecified.</para>
            <para>The function converts the current RGB color to HSV, multiplies
            the value (V) component by factor and converts the color back to
            RGB.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also darker() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Dark(System.Int32)">
            <summary>
            <para>Use darker(factor) instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.Darker(System.Int32)">
            <summary>
            <para>Returns a darker (or lighter) color, but does not change this
            object.</para>
            <para>If the factor is greater than 100, this functions returns a
            darker color. Setting factor to 300 returns a color that has one-third the
            brightness. If the factor is less than 100, the return color is lighter,
            but we recommend using the lighter() function for this purpose. If the
            factor is 0 or negative, the return value is unspecified.</para>
            <para>The function converts the current RGB color to HSV, divides the
            value (V) component by factor and converts the color back to RGB.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also lighter() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.op_Equality(QtGui.QColor,QtGui.QColor)">
            <summary>
            <para>Returns true if this color has the same RGB and alpha values as
            color; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.op_Inequality(QtGui.QColor,QtGui.QColor)">
            <summary>
            <para>Returns true if this color has a different RGB and alpha values
            from color; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.op_Implicit(QtGui.QColor)~QtCore.QVariant">
            <summary>
            <para>Returns the color as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetRgb(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by r, g, b, and a, to the red,
            green, blue, and alpha-channel (transparency) components of the color's RGB
            value.</para>
            <para>These components can be retrieved individually using the red(),
            green(), blue() and alpha() functions.</para>
            <para>See also rgb() and setRgb().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetRgbF(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by r, g, b, and a, to the red,
            green, blue, and alpha-channel (transparency) components of the color's RGB
            value.</para>
            <para>These components can be retrieved individually using the redF(),
            greenF(), blueF() and alphaF() functions.</para>
            <para>See also rgb() and setRgb().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsv(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by h, s, v, and a, to the hue,
            saturation, value, and alpha-channel (transparency) components of the
            color's HSV value.</para>
            <para>These components can be retrieved individually using the hue(),
            saturation(), value() and alpha() functions.</para>
            <para>See also setHsv() and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsvF(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by h, s, v, and a, to the hue,
            saturation, value, and alpha-channel (transparency) components of the
            color's HSV value.</para>
            <para>These components can be retrieved individually using the hueF(),
            saturationF(), valueF() and alphaF() functions.</para>
            <para>See also setHsv() and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetCmyk(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by c, m, y, k, and a, to the cyan,
            magenta, yellow, black, and alpha-channel (transparency) components of the
            color's CMYK value.</para>
            <para>These components can be retrieved individually using the cyan(),
            magenta(), yellow(), black() and alpha() functions.</para>
            <para>See also setCmyk() and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetCmykF(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by c, m, y, k, and a, to the cyan,
            magenta, yellow, black, and alpha-channel (transparency) components of the
            color's CMYK value.</para>
            <para>These components can be retrieved individually using the cyanF(),
            magentaF(), yellowF(), blackF() and alphaF() functions.</para>
            <para>See also setCmykF() and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHsl(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>Sets the contents pointed to by h, s, l, and a, to the hue,
            saturation, lightness, and alpha-channel (transparency) components of the
            color's HSL value.</para>
            <para>These components can be retrieved individually using the
            hueHsl(), saturationHsl(), lightness() and alpha() functions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setHsl().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.GetHslF(System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>Sets the contents pointed to by h, s, l, and a, to the hue,
            saturation, lightness, and alpha-channel (transparency) components of the
            color's HSL value.</para>
            <para>These components can be retrieved individually using the
            hueHslF(), saturationHslF(), lightnessF() and alphaF() functions.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setHsl().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromRgb(System.UInt32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the given QRgb value rgb.</para>
            <para>The alpha component of rgb is ignored (i.e. it is automatically
            set to 255), use the fromRgba() function to include the alpha-channel
            specified by the given QRgb value.</para>
            <para>See also fromRgba(), fromRgbF(), toRgb(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromRgba(System.UInt32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the given QRgb value rgba.</para>
            <para>Unlike the fromRgb() function, the alpha-channel specified by the
            given QRgb value is included.</para>
            <para>See also fromRgb() and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromRgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the RGB color values, r (red), g (green), b (blue), and a
            (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0-255.</para>
            <para>See also toRgb(), fromRgbF(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromRgbF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the RGB color values, r (red), g (green), b (blue), and a
            (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>See also fromRgb(), toRgb(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromHsv(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the HSV color values, h (hue), s (saturation), v (value), and a
            (alpha-channel, i.e. transparency).</para>
            <para>The value of s, v, and a must all be in the range 0-255; the
            value of h must be in the range 0-359.</para>
            <para>See also toHsv(), fromHsvF(), isValid(), and The HSV Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromHsvF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Static convenience function that returns a QColor constructed
            from the HSV color values, h (hue), s (saturation), v (value), and a
            (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>See also toHsv(), fromHsv(), isValid(), and The HSV Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromCmyk(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the given CMYK color values: c (cyan), m (magenta), y (yellow), k
            (black), and a (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0-255.</para>
            <para>See also toCmyk(), fromCmykF(), isValid(), and The CMYK Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromCmykF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Static convenience function that returns a QColor constructed
            from the given CMYK color values: c (cyan), m (magenta), y (yellow), k
            (black), and a (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>See also toCmyk(), fromCmyk(), isValid(), and The CMYK Color
            Model.</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromHsl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Static convenience function that returns a QColor constructed
            from the HSV color values, h (hue), s (saturation), l (lightness), and a
            (alpha-channel, i.e. transparency).</para>
            <para>The value of s, l, and a must all be in the range 0-255; the
            value of h must be in the range 0-359.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also toHsl(), fromHslF(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.FromHslF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Static convenience function that returns a QColor constructed
            from the HSV color values, h (hue), s (saturation), l (lightness), and a
            (alpha-channel, i.e. transparency).</para>
            <para>All the values must be in the range 0.0-1.0.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also toHsl(), fromHsl(), and isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QColor.IsValidColor(System.String)">
            <summary>
            <para>Returns true if the name is a valid color name and can be used to
            construct a valid QColor object, otherwise returns false.</para>
            <para>It uses the same algorithm used in setNamedColor().</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setNamedColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Alpha">
            <summary>
            <para>Returns the alpha color component of this color.</para>
            <para>See also setAlpha(), alphaF(), and Alpha-Blended Drawing.</para>
            <para></para>
            <para>Sets the alpha of this color to alpha. Integer alpha is specified
            in the range 0-255.</para>
            <para>See also alpha(), alphaF(), and Alpha-Blended Drawing.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.AlphaF">
            <summary>
            <para>Returns the alpha color component of this color.</para>
            <para>See also setAlphaF(), alpha(), and Alpha-Blended Drawing.</para>
            <para></para>
            <para>Sets the alpha of this color to alpha. qreal alpha is specified
            in the range 0.0-1.0.</para>
            <para>See also alphaF(), alpha(), and Alpha-Blended Drawing.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Red">
            <summary>
            <para>Returns the red color component of this color.</para>
            <para>See also setRed(), redF(), and getRgb().</para>
            <para></para>
            <para>Sets the red color component of this color to red. Integer
            components are specified in the range 0-255.</para>
            <para>See also red(), redF(), and setRgb().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Green">
            <summary>
            <para>Returns the green color component of this color.</para>
            <para>See also setGreen(), greenF(), and getRgb().</para>
            <para></para>
            <para>Sets the green color component of this color to green. Integer
            components are specified in the range 0-255.</para>
            <para>See also green(), greenF(), and setRgb().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Blue">
            <summary>
            <para>Returns the blue color component of this color.</para>
            <para>See also setBlue(), blueF(), and getRgb().</para>
            <para></para>
            <para>Sets the blue color component of this color to blue. Integer
            components are specified in the range 0-255.</para>
            <para>See also blue(), blueF(), and setRgb().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.RedF">
            <summary>
            <para>Returns the red color component of this color.</para>
            <para>See also setRedF(), red(), and getRgbF().</para>
            <para></para>
            <para>Sets the red color component of this color to red. Float
            components are specified in the range 0.0-1.0.</para>
            <para>See also redF(), red(), and setRgbF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.GreenF">
            <summary>
            <para>Returns the green color component of this color.</para>
            <para>See also setGreenF(), green(), and getRgbF().</para>
            <para></para>
            <para>Sets the green color component of this color to green. Float
            components are specified in the range 0.0-1.0.</para>
            <para>See also greenF(), green(), and setRgbF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.BlueF">
            <summary>
            <para>Returns the blue color component of this color.</para>
            <para>See also setBlueF(), blue(), and getRgbF().</para>
            <para></para>
            <para>Sets the blue color component of this color to blue. Float
            components are specified in the range 0.0-1.0.</para>
            <para>See also blueF(), blue(), and setRgbF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Rgba">
            <summary>
            <para>Returns the RGB value of the color, including its alpha.</para>
            <para>For an invalid color, the alpha value of the returned color is
            unspecified.</para>
            <para>See also setRgba() and rgb().</para>
            <para></para>
            <para>Sets the RGB value to rgba, including its alpha.</para>
            <para>See also rgba() and rgb().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Rgb">
            <summary>
            <para>Returns the RGB value of the color. The alpha value is
            opaque.</para>
            <para>See also setRgb(), getRgb(), and rgba().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Sets the RGB value to rgb. The alpha value is set to
            opaque.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.IsValid">
            <summary>
            <para>Returns true if the color is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.ColorNames">
            <summary>
            <para>Returns a QStringList containing the color names Qt knows
            about.</para>
            <para>See also Predefined Colors.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.spec">
            <summary>
            <para>Returns how the color was specified.</para>
            <para>See also Spec and convertTo().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Hue">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>The color is implicitly converted to HSV.</para>
            <para>See also hsvHue(), hueF(), getHsv(), and The HSV Color
            Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Saturation">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>The color is implicitly converted to HSV.</para>
            <para>See also hsvSaturation(), saturationF(), getHsv(), and The HSV
            Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HsvHue">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>See also hueF(), getHsv(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HsvSaturation">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>See also saturationF(), getHsv(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Value">
            <summary>
            <para>Returns the value color component of this color.</para>
            <para>See also valueF(), getHsv(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HueF">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>The color is implicitly converted to HSV.</para>
            <para>See also hsvHueF(), hue(), getHsvF(), and The HSV Color
            Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.SaturationF">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>The color is implicitly converted to HSV.</para>
            <para>See also hsvSaturationF(), saturation(), getHsvF(), and The HSV
            Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HsvHueF">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>See also hue(), getHsvF(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HsvSaturationF">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>See also saturation(), getHsvF(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.ValueF">
            <summary>
            <para>Returns the value color component of this color.</para>
            <para>See also value(), getHsvF(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Cyan">
            <summary>
            <para>Returns the cyan color component of this color.</para>
            <para>See also cyanF(), getCmyk(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Magenta">
            <summary>
            <para>Returns the magenta color component of this color.</para>
            <para>See also magentaF(), getCmyk(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Yellow">
            <summary>
            <para>Returns the yellow color component of this color.</para>
            <para>See also yellowF(), getCmyk(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Black">
            <summary>
            <para>Returns the black color component of this color.</para>
            <para>See also blackF(), getCmyk(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.CyanF">
            <summary>
            <para>Returns the cyan color component of this color.</para>
            <para>See also cyan(), getCmykF(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.MagentaF">
            <summary>
            <para>Returns the magenta color component of this color.</para>
            <para>See also magenta(), getCmykF(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.YellowF">
            <summary>
            <para>Returns the yellow color component of this color.</para>
            <para>See also yellow(), getCmykF(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.BlackF">
            <summary>
            <para>Returns the black color component of this color.</para>
            <para>See also black(), getCmykF(), and The CMYK Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HslHue">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also getHslF() and getHsl().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HslSaturation">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also saturationF(), getHsv(), and The HSV Color Model.</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.Lightness">
            <summary>
            <para>Returns the lightness color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also lightnessF() and getHsl().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HslHueF">
            <summary>
            <para>Returns the hue color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also hue() and getHslF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.HslSaturationF">
            <summary>
            <para>Returns the saturation color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also saturationF() and getHslF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QColor.LightnessF">
            <summary>
            <para>Returns the lightness color component of this color.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also value() and getHslF().</para>
            </summary>
        </member>
        <member name="T:QtGui.QColor.Spec">
            <summary>
            <para>The type of color specified, either RGB, HSV, CMYK or HSL.</para>
            <para>See also spec() and convertTo().</para>
            </summary>
        </member>
        <member name="T:QtGui.QColor.NameFormat">
            <summary>
            <para>How to format the output of the name() function</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="F:QtGui.QColor.NameFormat.HexRgb">
            <summary>#RRGGBB A "#" character followed by three two-digit hexadecimal numbers (i.e. #RRGGBB).</summary>
        </member>
        <member name="F:QtGui.QColor.NameFormat.HexArgb">
            <summary>#AARRGGBB A "#" character followed by four two-digit hexadecimal numbers (i.e. #AARRGGBB).</summary>
        </member>
        <member name="T:QtGui.QRegion">
            <summary>
            <para>The QRegion class specifies a clip region for a painter.</para>
            </summary>
            <remarks>
            <para>QRegion is used with QPainter::setClipRegion() to limit the paint
            area to what needs to be painted. There is also a QWidget::repaint()
            function that takes a QRegion parameter. QRegion is the best tool for
            minimizing the amount of screen area to be updated by a repaint.</para>
            <para>This class is not suitable for constructing shapes for rendering,
            especially as outlines. Use QPainterPath to create paths and shapes for use
            with QPainter.</para>
            <para>QRegion is an implicitly shared class.</para>
            <para></para>
            <para>Creating and Using Regions</para>
            <para>A region can be created from a rectangle, an ellipse, a polygon
            or a bitmap. Complex regions may be created by combining simple regions
            using united(), intersected(), subtracted(), or xored() (exclusive or). You
            can move a region using translate().</para>
            <para>You can test whether a region isEmpty() or if it contains() a
            QPoint or QRect. The bounding rectangle can be found with
            boundingRect().</para>
            <para>The function rects() gives a decomposition of the region into
            rectangles.</para>
            <para>Example of using complex regions:</para>
            <para>void MyWidget::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QRegion r1(QRect(100, 100, 200, 80),    // r1: elliptic
            region</para>
            <para>               QRegion::Ellipse);</para>
            <para>    QRegion r2(QRect(100, 120, 90, 30));    // r2: rectangular
            region</para>
            <para>    QRegion r3 = r1.intersected(r2);        // r3:
            intersection</para>
            <para></para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setClipRegion(r3);</para>
            <para>    ...                                     // paint clipped
            graphics</para>
            <para>}</para>
            <para></para>
            <para>Additional License Information</para>
            <para>On Embedded Linux, Windows CE and X11 platforms, parts of this
            class rely on code obtained under the following licenses:</para>
            <para>Copyright (c) 1987 X Consortium</para>
            <para>Permission is hereby granted, free of charge, to any person
            obtaining a copy of this software and associated documentation files (the
            &quot;Software&quot;), to deal in the Software without restriction,
            including without limitation the rights to use, copy, modify, merge,
            publish, distribute, sublicense, and/or sell copies of the Software, and to
            permit persons to whom the Software is furnished to do so, subject to the
            following conditions:</para>
            <para>The above copyright notice and this permission notice shall be
            included in all copies or substantial portions of the Software.</para>
            <para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF
            ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
            OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
            IN NO EVENT SHALL THE X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR
            OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
            ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
            DEALINGS IN THE SOFTWARE.</para>
            <para>Except as contained in this notice, the name of the X Consortium
            shall not be used in advertising or otherwise to promote the sale, use or
            other dealings in this Software without prior written authorization from
            the X Consortium.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Copyright 1987 by Digital Equipment Corporation, Maynard,
            Massachusetts.</para>
            <para>All Rights Reserved</para>
            <para>Permission to use, copy, modify, and distribute this software and
            its documentation for any purpose and without fee is hereby granted,
            provided that the above copyright notice appear in all copies and that both
            that copyright notice and this permission notice appear in supporting
            documentation, and that the name of Digital not be used in advertising or
            publicity pertaining to distribution of the software without specific,
            written prior permission.</para>
            <para>DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
            INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
            EVENT SHALL DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
            DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
            PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
            ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
            SOFTWARE.</para>
            <para></para>
            <para></para>
            <para>See also QPainter::setClipRegion(), QPainter::setClipRect(), and
            QPainterPath.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QRegion.#ctor">
            <summary>
            <para>Constructs an empty region.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QRegion.RegionType)">
            <summary>
            <para>Constructs a rectangular or elliptic region.</para>
            <para>If t is Rectangle, the region is the filled rectangle (x, y, w,
            h). If t is Ellipse, the region is the filled ellipse with center at (x + w
            / 2, y + h / 2) and size (w ,h).</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.#ctor(QtCore.QRect,QtGui.QRegion.RegionType)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Create a region based on the rectange r with region type
            t.</para>
            <para>If the rectangle is invalid a null region will be created.</para>
            <para>See also QRegion::RegionType.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.#ctor(QtGui.QPolygon,QtCore.Qt.FillRule)">
            <summary>
            <para>Constructs a polygon region from the point array a with the fill
            rule specified by fillRule.</para>
            <para>If fillRule is Qt::WindingFill, the polygon region is defined
            using the winding algorithm; if it is Qt::OddEvenFill, the odd-even fill
            algorithm is used.</para>
            <para>Warning: This constructor can be used to create complex regions
            that will slow down painting when used.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.#ctor(QtGui.QRegion)">
            <summary>
            <para>Constructs a new region which is equal to region r.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.#ctor(QtGui.QBitmap)">
            <summary>
            <para>Constructs a region from the bitmap bm.</para>
            <para>The resulting region consists of the pixels in bitmap bm that are
            Qt::color1, as if each pixel was a 1 by 1 rectangle.</para>
            <para>This constructor may create complex regions that will slow down
            painting when used. Note that drawing masked pixmaps can be done much
            faster using QPixmap::setMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Swap(QtGui.QRegion)">
            <summary>
            <para>Swaps region other with this region. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Contains(QtCore.QPoint)">
            <summary>
            <para>Returns true if the region contains the point p; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Contains(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the region overlaps the rectangle r; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Translate(System.Int32,System.Int32)">
            <summary>
            <para>Translates (moves) the region dx along the X axis and dy along
            the Y axis.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Translate(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates the region point.x() along the x axis and point.y()
            along the y axis, relative to the current position. Positive values move
            the region to the right and down.</para>
            <para>Translates to the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Translated(System.Int32,System.Int32)">
            <summary>
            <para>Returns a copy of the region that is translated dx along the x
            axis and dy along the y axis, relative to the current position. Positive
            values move the region to the right and down.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Translated(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the regtion that is translated p.x() along the
            x axis and p.y() along the y axis, relative to the current position.
            Positive values move the rectangle to the right and down.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.United(QtGui.QRegion)">
            <summary>
            <para>Returns a region which is the union of this region and r.</para>
            <para></para>
            <para>The figure shows the union of two elliptical regions.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersected(), subtracted(), and xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.United(QtCore.QRect)">
            <summary>
            <para>Returns a region which is the union of this region and the given
            rect.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also intersected(), subtracted(), and xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Intersected(QtGui.QRegion)">
            <summary>
            <para>Returns a region which is the intersection of this region and
            r.</para>
            <para></para>
            <para>The figure shows the intersection of two elliptical
            regions.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also subtracted(), united(), and xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Intersected(QtCore.QRect)">
            <summary>
            <para>Returns a region which is the intersection of this region and the
            given rect.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also subtracted(), united(), and xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Subtracted(QtGui.QRegion)">
            <summary>
            <para>Returns a region which is r subtracted from this region.</para>
            <para></para>
            <para>The figure shows the result when the ellipse on the right is
            subtracted from the ellipse on the left (left - right).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersected(), united(), and xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Xored(QtGui.QRegion)">
            <summary>
            <para>Returns a region which is the exclusive or (XOR) of this region
            and r.</para>
            <para></para>
            <para>The figure shows the exclusive or of two elliptical
            regions.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also intersected(), united(), and subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Intersects(QtGui.QRegion)">
            <summary>
            <para>Returns true if this region intersects with region, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.Intersects(QtCore.QRect)">
            <summary>
            <para>Returns true if this region intersects with rect, otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.SetRects(QtCore.QRect,System.Int32)">
            <summary>
            <para>Sets the region using the array of rectangles specified by rects
            and number. The rectangles must be optimally Y-X sorted and follow these
            restrictions:</para>
            <para></para>
            <para>The rectangles must not intersect.</para>
            <para>All rectangles with a given top coordinate must have the same
            height.</para>
            <para>No two rectangles may abut horizontally (they should be combined
            into a single wider rectangle in that case).</para>
            <para>The rectangles must be sorted in ascending order, with Y as the
            major sort key and X as the minor sort key.</para>
            <para></para>
            <para>See also rects().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_BitwiseOr(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Applies the united() function to this region and r. r1|r2 is
            equivalent to r1.united(r2).</para>
            <para>See also united() and operator+().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Addition(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Applies the united() function to this region and r. r1+r2 is
            equivalent to r1.united(r2).</para>
            <para>See also united() and operator|().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Addition(QtGui.QRegion,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_BitwiseAnd(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Applies the intersected() function to this region and r.
            r1&amp;r2 is equivalent to r1.intersected(r2).</para>
            <para>See also intersected().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_BitwiseAnd(QtGui.QRegion,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Subtraction(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Applies the subtracted() function to this region and r. r1-r2 is
            equivalent to r1.subtracted(r2).</para>
            <para>See also subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_ExclusiveOr(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Applies the xored() function to this region and r. r1^r2 is
            equivalent to r1.xored(r2).</para>
            <para>See also xored().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Equality(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Returns true if the region is equal to r; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Inequality(QtGui.QRegion,QtGui.QRegion)">
            <summary>
            <para>Returns true if this region is different from the other region;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Implicit(QtGui.QRegion)~QtCore.QVariant">
            <summary>
            <para>Returns the region as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Multiply(QtGui.QRegion,QtGui.QMatrix)">
            <summary>
            <para>This is the same as matrix.map(region).</para>
            <para>See also QMatrix::map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegion.op_Multiply(QtGui.QRegion,QtGui.QTransform)">
            <summary>
            <para>This is the same as matrix.map(region).</para>
            <para>See also QTransform::map().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRegion.IsEmpty">
            <summary>
            <para>Returns true if the region is empty; otherwise returns false. An
            empty region is a region that contains no points.</para>
            <para>Example:</para>
            <para>QRegion r1(10, 10, 20, 20);</para>
            <para>r1.isEmpty();               // false</para>
            <para></para>
            <para>QRegion r3;</para>
            <para>r3.isEmpty();               // true</para>
            <para></para>
            <para>QRegion r2(40, 40, 20, 20);</para>
            <para>r3 = r1.intersected(r2);    // r3: intersection of r1 and
            r2</para>
            <para>r3.isEmpty();               // true</para>
            <para></para>
            <para>r3 = r1.united(r2);         // r3: union of r1 and r2</para>
            <para>r3.isEmpty();               // false</para>
            </summary>
        </member>
        <member name="P:QtGui.QRegion.IsNull">
            <summary>
            <para>Returns true if the region is empty; otherwise returns false. An
            empty region is a region that contains no points. This function is the same
            as isEmpty</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRegion.BoundingRect">
            <summary>
            <para>Returns the bounding rectangle of this region. An empty region
            gives a rectangle that is QRect::isNull().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRegion.RectCount">
            <summary>
            <para>Returns the number of rectangles that will be returned in
            rects().</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtGui.QRegion.RegionType">
            <summary>
            <para>Specifies the shape of the region to be created.</para>
            </summary>
        </member>
        <member name="F:QtGui.QRegion.RegionType.Rectangle">
            <summary>the region covers the entire rectangle.</summary>
        </member>
        <member name="F:QtGui.QRegion.RegionType.Ellipse">
            <summary>the region is an ellipse inside the rectangle.</summary>
        </member>
        <member name="T:QtGui.QKeySequence">
            <summary>
            <para>The QKeySequence class encapsulates a key sequence as used by
            shortcuts.</para>
            </summary>
            <remarks>
            <para>In its most common form, a key sequence describes a combination
            of keys that must be used together to perform some action. Key sequences
            are used with QAction objects to specify which keyboard shortcuts can be
            used to trigger actions.</para>
            <para>Key sequences can be constructed for use as keyboard shortcuts in
            three different ways:</para>
            <para></para>
            <para>For standard shortcuts, a standard key can be used to request the
            platform-specific key sequence associated with each shortcut.</para>
            <para>For custom shortcuts, human-readable strings such as
            &quot;Ctrl+X&quot; can be used, and these can be translated into the
            appropriate shortcuts for users of different languages. Translations are
            made in the &quot;QShortcut&quot; context.</para>
            <para>For hard-coded shortcuts, integer key codes can be specified with
            a combination of values defined by the Qt::Key and Qt::Modifier enum
            values. Each key code consists of a single Qt::Key value and zero or more
            modifiers, such as Qt::SHIFT, Qt::CTRL, Qt::ALT and Qt::META.</para>
            <para></para>
            <para>For example, Ctrl P might be a sequence used as a shortcut for
            printing a document, and can be specified in any of the following
            ways:</para>
            <para>QKeySequence(QKeySequence::Print);</para>
            <para>QKeySequence(tr(&quot;Ctrl+P&quot;));</para>
            <para>QKeySequence(tr(&quot;Ctrl+p&quot;));</para>
            <para>QKeySequence(Qt::CTRL + Qt::Key_P);</para>
            <para>Note that, for letters, the case used in the specification string
            does not matter. In the above examples, the user does not need to hold down
            the Shift key to activate a shortcut specified with &quot;Ctrl+P&quot;.
            However, for other keys, the use of Shift as an unspecified extra modifier
            key can lead to confusion for users of an application whose keyboards have
            different layouts to those used by the developers. See the Keyboard Layout
            Issues section below for more details.</para>
            <para>It is preferable to use standard shortcuts where possible. When
            creating key sequences for non-standard shortcuts, you should use
            human-readable strings in preference to hard-coded integer values.</para>
            <para>QKeySequence objects can be cast to a QString to obtain a
            human-readable translated version of the sequence. Similarly, the
            toString() function produces human-readable strings for use in menus. On
            Mac OS X, the appropriate symbols are used to describe keyboard shortcuts
            using special keys on the Macintosh keyboard.</para>
            <para>An alternative way to specify hard-coded key codes is to use the
            Unicode code point of the character; for example, 'A' gives the same key
            sequence as Qt::Key_A.</para>
            <para>Note: On Mac OS X, references to &quot;Ctrl&quot;, Qt::CTRL,
            Qt::Control and Qt::ControlModifier correspond to the Command keys on the
            Macintosh keyboard, and references to &quot;Meta&quot;, Qt::META, Qt::Meta
            and Qt::MetaModifier correspond to the Control keys. Developers on Mac OS X
            can use the same shortcut descriptions across all platforms, and their
            applications will automatically work as expected on Mac OS X.</para>
            <para></para>
            <para>Standard Shortcuts</para>
            <para>QKeySequence defines many standard keyboard shortcuts to reduce
            the amount of effort required when setting up actions in a typical
            application. The table below shows some common key sequences that are often
            used for these standard shortcuts by applications on four widely-used
            platforms. Note that on Mac OS X, the Ctrl value corresponds to the Command
            keys on the Macintosh keyboard, and the Meta value corresponds to the
            Control keys.</para>
            <para></para>
            <para> StandardKeyWindowsMac OS XKDEGNOME</para>
            <para>HelpContents	F1	Ctrl+?	F1	F1</para>
            <para>WhatsThis	Shift+F1	Shift+F1	Shift+F1	Shift+F1</para>
            <para>Open	Ctrl+O	Ctrl+O	Ctrl+O	Ctrl+O</para>
            <para>Close	Ctrl+F4, Ctrl+W	Ctrl+W, Ctrl+F4	Ctrl+W	Ctrl+W</para>
            <para>Save	Ctrl+S	Ctrl+S	Ctrl+S	Ctrl+S</para>
            <para>Quit	Ctrl+Q	Qtrl+Q	Qtrl+Q</para>
            <para>SaveAs	Ctrl+Shift+S	Ctrl+Shift+S</para>
            <para>New	Ctrl+N	Ctrl+N	Ctrl+N	Ctrl+N</para>
            <para>Delete	Del	Del, Meta+D	Del, Ctrl+D	Del, Ctrl+D</para>
            <para>Cut	Ctrl+X, Shift+Del	Ctrl+X, Meta+K	Ctrl+X, F20, Shift+Del
            Ctrl+X, F20, Shift+Del</para>
            <para>Copy	Ctrl+C, Ctrl+Ins	Ctrl+C	Ctrl+C, F16, Ctrl+Ins	Ctrl+C, F16,
            Ctrl+Ins</para>
            <para>Paste	Ctrl+V, Shift+Ins	Ctrl+V, Meta+Y	Ctrl+V, F18, Shift+Ins
            Ctrl+V, F18, Shift+Ins</para>
            <para>Preferences	Ctrl+,	</para>
            <para>Undo	Ctrl+Z, Alt+Backspace	Ctrl+Z	Ctrl+Z, F14	Ctrl+Z, F14</para>
            <para>Redo	Ctrl+Y, Shift+Ctrl+Z, Alt+Shift+Backspace	Ctrl+Shift+Z
            Ctrl+Shift+Z	Ctrl+Shift+Z</para>
            <para>Back	Alt+Left, Backspace	Ctrl+[	Alt+Left	Alt+Left</para>
            <para>Forward	Alt+Right, Shift+Backspace	Ctrl+]	Alt+Right
            Alt+Right</para>
            <para>Refresh	F5	F5	F5	Ctrl+R, F5</para>
            <para>ZoomIn	Ctrl+Plus	Ctrl+Plus	Ctrl+Plus	Ctrl+Plus</para>
            <para>ZoomOut	Ctrl+Minus	Ctrl+Minus	Ctrl+Minus	Ctrl+Minus</para>
            <para>FullScreen	F11, Alt+Enter	Ctrl+Meta+F	F11, Ctrl+Shift+F
            Ctrl+F11</para>
            <para>Print	Ctrl+P	Ctrl+P	Ctrl+P	Ctrl+P</para>
            <para>AddTab	Ctrl+T	Ctrl+T	Ctrl+Shift+N, Ctrl+T	Ctrl+T</para>
            <para>NextChild	Ctrl+Tab, Forward, Ctrl+F6	Ctrl+}, Forward, Ctrl+Tab
            Ctrl+Tab, Forward, Ctrl+Comma	Ctrl+Tab, Forward</para>
            <para>PreviousChild	Ctrl+Shift+Tab, Back, Ctrl+Shift+F6	Ctrl+{, Back,
            Ctrl+Shift+Tab	Ctrl+Shift+Tab, Back, Ctrl+Period	Ctrl+Shift+Tab,
            Back</para>
            <para>Find	Ctrl+F	Ctrl+F	Ctrl+F	Ctrl+F</para>
            <para>FindNext	F3, Ctrl+G	Ctrl+G	F3	Ctrl+G, F3</para>
            <para>FindPrevious	Shift+F3, Ctrl+Shift+G	Ctrl+Shift+G	Shift+F3
            Ctrl+Shift+G, Shift+F3</para>
            <para>Replace	Ctrl+H	(none)	Ctrl+R	Ctrl+H</para>
            <para>SelectAll	Ctrl+A	Ctrl+A	Ctrl+A	Ctrl+A</para>
            <para>Deselect	Ctrl+Shift+A	Ctrl+Shift+A</para>
            <para>Bold	Ctrl+B	Ctrl+B	Ctrl+B	Ctrl+B</para>
            <para>Italic	Ctrl+I	Ctrl+I	Ctrl+I	Ctrl+I</para>
            <para>Underline	Ctrl+U	Ctrl+U	Ctrl+U	Ctrl+U</para>
            <para>MoveToNextChar	Right	Right, Meta+F	Right	Right</para>
            <para>MoveToPreviousChar	Left	Left, Meta+B	Left	Left</para>
            <para>MoveToNextWord	Ctrl+Right	Alt+Right	Ctrl+Right	Ctrl+Right</para>
            <para>MoveToPreviousWord	Ctrl+Left	Alt+Left	Ctrl+Left	Ctrl+Left</para>
            <para>MoveToNextLine	Down	Down, Meta+N	Down	Down</para>
            <para>MoveToPreviousLine	Up	Up, Meta+P	Up	Up</para>
            <para>MoveToNextPage	PgDown	PgDown, Alt+PgDown, Meta+Down, Meta+PgDown,
            Meta+V	PgDown	PgDown</para>
            <para>MoveToPreviousPage	PgUp	PgUp, Alt+PgUp, Meta+Up, Meta+PgUp	PgUp
            PgUp</para>
            <para>MoveToStartOfLine	Home	Ctrl+Left, Meta+Left	Home	Home</para>
            <para>MoveToEndOfLine	End	Ctrl+Right, Meta+Right	End, Ctrl+E	End,
            Ctrl+E</para>
            <para>MoveToStartOfBlock	(none)	Alt+Up, Meta+A	(none)	(none)</para>
            <para>MoveToEndOfBlock	(none)	Alt+Down, Meta+E	(none)	(none)</para>
            <para>MoveToStartOfDocument	Ctrl+Home	Ctrl+Up, Home	Ctrl+Home
            Ctrl+Home</para>
            <para>MoveToEndOfDocument	Ctrl+End	Ctrl+Down, End	Ctrl+End
            Ctrl+End</para>
            <para>SelectNextChar	Shift+Right	Shift+Right	Shift+Right
            Shift+Right</para>
            <para>SelectPreviousChar	Shift+Left	Shift+Left	Shift+Left
            Shift+Left</para>
            <para>SelectNextWord	Ctrl+Shift+Right	Alt+Shift+Right	Ctrl+Shift+Right
            Ctrl+Shift+Right</para>
            <para>SelectPreviousWord	Ctrl+Shift+Left	Alt+Shift+Left	Ctrl+Shift+Left
            Ctrl+Shift+Left</para>
            <para>SelectNextLine	Shift+Down	Shift+Down	Shift+Down	Shift+Down</para>
            <para>SelectPreviousLine	Shift+Up	Shift+Up	Shift+Up	Shift+Up</para>
            <para>SelectNextPage	Shift+PgDown	Shift+PgDown	Shift+PgDown
            Shift+PgDown</para>
            <para>SelectPreviousPage	Shift+PgUp	Shift+PgUp	Shift+PgUp
            Shift+PgUp</para>
            <para>SelectStartOfLine	Shift+Home	Ctrl+Shift+Left	Shift+Home
            Shift+Home</para>
            <para>SelectEndOfLine	Shift+End	Ctrl+Shift+Right	Shift+End
            Shift+End</para>
            <para>SelectStartOfBlock	(none)	Alt+Shift+Up, Meta+Shift+A	(none)
            (none)</para>
            <para>SelectEndOfBlock	(none)	Alt+Shift+Down, Meta+Shift+E	(none)
            (none)</para>
            <para>SelectStartOfDocument	Ctrl+Shift+Home	Ctrl+Shift+Up, Shift+Home
            Ctrl+Shift+Home	Ctrl+Shift+Home</para>
            <para>SelectEndOfDocument	Ctrl+Shift+End	Ctrl+Shift+Down, Shift+End
            Ctrl+Shift+End	Ctrl+Shift+End</para>
            <para>DeleteStartOfWord	Ctrl+Backspace	Alt+Backspace	Ctrl+Backspace
            Ctrl+Backspace</para>
            <para>DeleteEndOfWord	Ctrl+Del	(none)	Ctrl+Del	Ctrl+Del</para>
            <para>DeleteEndOfLine	(none)	(none)	Ctrl+K	Ctrl+K</para>
            <para>DeleteCompleteLine	(none)	(none)	Ctrl+U	Ctrl+U</para>
            <para>InsertParagraphSeparator	Enter	Enter	Enter	Enter</para>
            <para>InsertLineSeparator	Shift+Enter	Meta+Enter, Meta+O	Shift+Enter
            Shift+Enter</para>
            <para>Backspace	(none)	Meta+H	(none)	(none)</para>
            <para></para>
            <para>Note that, since the key sequences used for the standard
            shortcuts differ between platforms, you still need to test your shortcuts
            on each platform to ensure that you do not unintentionally assign the same
            key sequence to many actions.</para>
            <para></para>
            <para>Keyboard Layout Issues</para>
            <para>Many key sequence specifications are chosen by developers based
            on the layout of certain types of keyboard, rather than choosing keys that
            represent the first letter of an action's name, such as Ctrl S
            (&quot;Ctrl+S&quot;) or Ctrl C (&quot;Ctrl+C&quot;). Additionally, because
            certain symbols can only be entered with the help of modifier keys on
            certain keyboard layouts, key sequences intended for use with one keyboard
            layout may map to a different key, map to no keys at all, or require an
            additional modifier key to be used on different keyboard layouts.</para>
            <para>For example, the shortcuts, Ctrl plus and Ctrl minus, are often
            used as shortcuts for zoom operations in graphics applications, and these
            may be specified as &quot;Ctrl++&quot; and &quot;Ctrl+-&quot; respectively.
            However, the way these shortcuts are specified and interpreted depends on
            the keyboard layout. Users of Norwegian keyboards will note that the + and
            - keys are not adjacent on the keyboard, but will still be able to activate
            both shortcuts without needing to press the Shift key. However, users with
            British keyboards will need to hold down the Shift key to enter the +
            symbol, making the shortcut effectively the same as
            &quot;Ctrl+Shift+=&quot;.</para>
            <para>Although some developers might resort to fully specifying all the
            modifiers they use on their keyboards to activate a shortcut, this will
            also result in unexpected behavior for users of different keyboard
            layouts.</para>
            <para>For example, a developer using a British keyboard may decide to
            specify &quot;Ctrl+Shift+=&quot; as the key sequence in order to create a
            shortcut that coincidentally behaves in the same way as Ctrl plus. However,
            the = key needs to be accessed using the Shift key on Norwegian keyboard,
            making the required shortcut effectively Ctrl Shift Shift = (an impossible
            key combination).</para>
            <para>As a result, both human-readable strings and hard-coded key codes
            can both be problematic to use when specifying a key sequence that can be
            used on a variety of different keyboard layouts. Only the use of standard
            shortcuts guarantees that the user will be able to use the shortcuts that
            the developer intended.</para>
            <para>Despite this, we can address this issue by ensuring that
            human-readable strings are used, making it possible for translations of key
            sequences to be made for users of different languages. This approach will
            be successful for users whose keyboards have the most typical layout for
            the language they are using.</para>
            <para></para>
            <para>GNU Emacs Style Key Sequences</para>
            <para>Key sequences similar to those used in GNU Emacs, allowing up to
            four key codes, can be created by using the multiple argument constructor,
            or by passing a human-readable string of comma-separated key
            sequences.</para>
            <para>For example, the key sequence, Ctrl X followed by Ctrl C, can be
            specified using either of the following ways:</para>
            <para>QKeySequence(tr(&quot;Ctrl+X, Ctrl+C&quot;));</para>
            <para>QKeySequence(Qt::CTRL + Qt::Key_X, Qt::CTRL + Qt::Key_C);</para>
            <para>Warning: A QApplication instance must have been constructed
            before a QKeySequence is created; otherwise, your application may
            crash.</para>
            <para></para>
            <para>See also QShortcut.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QKeySequence.#ctor">
            <summary>
            <para>Constructs an empty key sequence.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.#ctor(System.String,QtGui.QKeySequence.SequenceFormat)">
            <summary>
            <para>Creates a key sequence from the key string, based on
            format.</para>
            <para>For example &quot;Ctrl+O&quot; gives CTRL+'O'. The strings
            &quot;Ctrl&quot;, &quot;Shift&quot;, &quot;Alt&quot; and &quot;Meta&quot;
            are recognized, as well as their translated equivalents in the
            &quot;QShortcut&quot; context (using QObject::tr()).</para>
            <para>Up to four key codes may be entered by separating them with
            commas, e.g. &quot;Alt+X,Ctrl+S,Q&quot;.</para>
            <para>This constructor is typically used with tr(), so that shortcut
            keys can be replaced in translations:</para>
            <para>QMenu *file = new QMenu(this);</para>
            <para>file-&gt;addAction(tr(&quot;&amp;Open...&quot;), this,
            SLOT(open()),</para>
            <para>                  QKeySequence(tr(&quot;Ctrl+O&quot;,
            &quot;File|Open&quot;)));</para>
            <para>Note the &quot;File|Open&quot; translator comment. It is by no
            means necessary, but it provides some context for the human
            translator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a key sequence with up to 4 keys k1, k2, k3 and
            k4.</para>
            <para>The key codes are listed in Qt::Key and can be combined with
            modifiers (see Qt::Modifier) such as Qt::SHIFT, Qt::CTRL, Qt::ALT, or
            Qt::META.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.#ctor(QtGui.QKeySequence)">
            <summary>
            <para>Copy constructor. Makes a copy of keysequence.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.#ctor(QtGui.QKeySequence.StandardKey)">
            <summary>
            <para>Constructs a QKeySequence object for the given key. The result
            will depend on the currently running platform.</para>
            <para>The resulting object will be based on the first element in the
            list of key bindings for the key.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.ToString(QtGui.QKeySequence.SequenceFormat)">
            <summary>
            <para>Return a string representation of the key sequence, based on
            format.</para>
            <para>For example, the value Qt::CTRL+Qt::Key_O results in
            &quot;Ctrl+O&quot;. If the key sequence has multiple key codes, each is
            separated by commas in the string returned, such as &quot;Alt+X, Ctrl+Y,
            Z&quot;. The strings, &quot;Ctrl&quot;, &quot;Shift&quot;, etc. are
            translated using QObject::tr() in the &quot;QShortcut&quot; context.</para>
            <para>If the key sequence has no keys, an empty string is
            returned.</para>
            <para>On Mac OS X, the string returned resembles the sequence that is
            shown in the menu bar.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also fromString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.Matches(QtGui.QKeySequence)">
            <summary>
            <para>Matches the sequence with seq. Returns ExactMatch if successful,
            PartialMatch if seq matches incompletely, and NoMatch if the sequences have
            nothing in common. Returns NoMatch if seq is shorter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_Implicit(QtGui.QKeySequence)~QtCore.QVariant">
            <summary>
            <para>Returns the key sequence as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.Swap(QtGui.QKeySequence)">
            <summary>
            <para>Swaps key sequence other with this key sequence. This operation
            is very fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_Equality(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Returns true if this key sequence is equal to the other key
            sequence; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_Inequality(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Returns true if this key sequence is not equal to the other key
            sequence; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_LessThan(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Provides an arbitrary comparison of this key sequence and other
            key sequence. All that is guaranteed is that the operator returns false if
            both key sequences are equal and that (ks1 &lt; ks2) == !( ks2 &lt; ks1) if
            the key sequences are not equal.</para>
            <para>This function is useful in some circumstances, for example if you
            want to use QKeySequence objects as keys in a QMap.</para>
            <para>See also operator==(), operator!=(), operator&gt;(),
            operator&lt;=(), and operator&gt;=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_GreaterThan(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Returns true if this key sequence is larger than the other key
            sequence; otherwise returns false.</para>
            <para>See also operator==(), operator!=(), operator&lt;(),
            operator&lt;=(), and operator&gt;=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_LessThanOrEqual(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Returns true if this key sequence is smaller or equal to the
            other key sequence; otherwise returns false.</para>
            <para>See also operator==(), operator!=(), operator&lt;(),
            operator&gt;(), and operator&gt;=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.op_GreaterThanOrEqual(QtGui.QKeySequence,QtGui.QKeySequence)">
            <summary>
            <para>Returns true if this key sequence is larger or equal to the other
            key sequence; otherwise returns false.</para>
            <para>See also operator==(), operator!=(), operator&lt;(),
            operator&gt;(), and operator&lt;=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.FromString(System.String,QtGui.QKeySequence.SequenceFormat)">
            <summary>
            <para>Return a QKeySequence from the string str based on format.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also toString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeySequence.Mnemonic(System.String)">
            <summary>
            <para>Returns the shortcut key sequence for the mnemonic in text, or an
            empty key sequence if no mnemonics are found.</para>
            <para>For example, mnemonic(&quot;E&amp;xit&quot;) returns
            Qt::ALT+Qt::Key_X, mnemonic(&quot;&amp;Quit&quot;) returns ALT+Key_Q, and
            mnemonic(&quot;Quit&quot;) returns an empty QKeySequence.</para>
            <para>We provide a list of common mnemonics in English. At the time of
            writing, Microsoft and Open Group do not appear to have issued equivalent
            recommendations for other languages.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeySequence.Item(System.UInt32)">
            <summary>
            <para>Returns a reference to the element at position index in the key
            sequence. This can only be used to read an element.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeySequence.Count">
            <summary>
            <para>Returns the number of keys in the key sequence. The maximum is
            4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeySequence.IsEmpty">
            <summary>
            <para>Returns true if the key sequence is empty; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QKeySequence.StandardKey">
            <summary>
            <para>This enum represent standard key bindings. They can be used to
            assign platform dependent keyboard shortcuts to a QAction.</para>
            <para>Note that the key bindings are platform dependent. The currently
            bound shortcuts can be queried using keyBindings().</para>
            <para>This enum was introduced or modified in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.UnknownKey">
            <summary>Unbound key.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.HelpContents">
            <summary>Open help contents.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.WhatsThis">
            <summary>Activate "what's this".</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Open">
            <summary>Open document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Close">
            <summary>Close document/tab.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Save">
            <summary>Save document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.New">
            <summary>Create new document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Delete">
            <summary>Delete.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Cut">
            <summary>Cut.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Copy">
            <summary>Copy.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Paste">
            <summary>Paste.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Undo">
            <summary>Undo.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Redo">
            <summary>Redo.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Back">
            <summary>Navigate back.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Forward">
            <summary>Navigate forward.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Refresh">
            <summary>Refresh or reload current document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.ZoomIn">
            <summary>Zoom in.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.ZoomOut">
            <summary>Zoom out.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Print">
            <summary>Print document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.AddTab">
            <summary>Add new tab.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.NextChild">
            <summary>Navigate to next tab or child window.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.PreviousChild">
            <summary>Navigate to previous tab or child window.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Find">
            <summary>Find in document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.FindNext">
            <summary>Find next result.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.FindPrevious">
            <summary>Find previous result.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Replace">
            <summary>Find and replace.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectAll">
            <summary>Select all text.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Bold">
            <summary>Bold text.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Italic">
            <summary>Italic text.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Underline">
            <summary>Underline text.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToNextChar">
            <summary>Move cursor to next character.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToPreviousChar">
            <summary>Move cursor to previous character.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToNextWord">
            <summary>Move cursor to next word.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToPreviousWord">
            <summary>Move cursor to previous word.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToNextLine">
            <summary>Move cursor to next line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToPreviousLine">
            <summary>Move cursor to previous line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToNextPage">
            <summary>Move cursor to next page.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToPreviousPage">
            <summary>Move cursor to previous page.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToStartOfLine">
            <summary>Move cursor to start of line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToEndOfLine">
            <summary>Move cursor to end of line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToStartOfBlock">
            <summary>Move cursor to start of a block. This shortcut is only used on OS X.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToEndOfBlock">
            <summary>Move cursor to end of block. This shortcut is only used on the OS X.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToStartOfDocument">
            <summary>Move cursor to start of document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.MoveToEndOfDocument">
            <summary>Move cursor to end of document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectNextChar">
            <summary>Extend selection to next character.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectPreviousChar">
            <summary>Extend selection to previous character.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectNextWord">
            <summary>Extend selection to next word.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectPreviousWord">
            <summary>Extend selection to previous word.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectNextLine">
            <summary>Extend selection to next line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectPreviousLine">
            <summary>Extend selection to previous line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectNextPage">
            <summary>Extend selection to next page.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectPreviousPage">
            <summary>Extend selection to previous page.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectStartOfLine">
            <summary>Extend selection to start of line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectEndOfLine">
            <summary>Extend selection to end of line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectStartOfBlock">
            <summary>Extend selection to the start of a text block. This shortcut is only used on OS X.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectEndOfBlock">
            <summary>Extend selection to the end of a text block. This shortcut is only used on OS X.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectStartOfDocument">
            <summary>Extend selection to start of document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SelectEndOfDocument">
            <summary>Extend selection to end of document.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.DeleteStartOfWord">
            <summary>Delete the beginning of a word up to the cursor.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.DeleteEndOfWord">
            <summary>Delete word from the end of the cursor.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.DeleteEndOfLine">
            <summary>Delete end of line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.InsertParagraphSeparator">
            <summary>Insert a new paragraph.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.InsertLineSeparator">
            <summary>Insert a new line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.SaveAs">
            <summary>Save document after prompting the user for a file name.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Preferences">
            <summary>Open the preferences dialog.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Quit">
            <summary>Quit the application.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.FullScreen">
            <summary>Toggle the window state to/from full screen.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Deselect">
            <summary>Deselect text. Since 5.1</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.DeleteCompleteLine">
            <summary>Delete the entire line.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.StandardKey.Backspace">
            <summary>Delete previous character.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.SequenceFormat.NativeText">
            <summary>The key sequence as a platform specific string. This means that it will be shown translated and on the Mac it will resemble a key sequence from the menu bar. This enum is best used when you want to display the string to the user.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.SequenceFormat.PortableText">
            <summary>The key sequence is given in a "portable" format, suitable for reading and writing to a file. In many cases, it will look similar to the native text on Windows and X11.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.SequenceMatch.NoMatch">
            <summary>The key sequences are different; not even partially matching.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.SequenceMatch.PartialMatch">
            <summary>The key sequences match partially, but are not the same.</summary>
        </member>
        <member name="F:QtGui.QKeySequence.SequenceMatch.ExactMatch">
            <summary>The key sequences are the same.</summary>
        </member>
        <member name="T:QtGui.QVector2D">
            <summary>
            <para>The QVector2D class represents a vector or vertex in 2D
            space.</para>
            </summary>
            <remarks>
            <para>The QVector2D class can also be used to represent vertices in 2D
            space. We therefore do not need to provide a separate vertex class.</para>
            <para></para>
            <para>See also QVector3D, QVector4D, and QQuaternion.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QVector2D.#ctor">
            <summary>
            <para>Constructs a null vector, i.e. with coordinates (0, 0).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.#ctor(System.Single,System.Single)">
            <summary>
            <para>Constructs a vector with coordinates (xpos, ypos).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.#ctor(QtCore.QPoint)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D
            point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.#ctor(QtCore.QPointF)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D
            point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.#ctor(QtGui.QVector3D)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 3D vector.
            The z coordinate of vector is dropped.</para>
            <para>See also toVector3D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.#ctor(QtGui.QVector4D)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 3D vector.
            The z and w coordinates of vector are dropped.</para>
            <para>See also toVector4D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.Normalize">
            <summary>
            <para>Normalizes the currect vector in place. Nothing happens if this
            vector is a null vector or the length of the vector is very close to
            1.</para>
            <para>See also length() and normalized().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.DistanceToPoint(QtGui.QVector2D)">
            <summary>
            <para>Returns the distance from this vertex to a point defined by the
            vertex point.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also distanceToLine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.DistanceToLine(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns the distance that this vertex is from a line defined by
            point and the unit vector direction.</para>
            <para>If direction is a null vector, then it does not define a line. In
            that case, the distance from point to this vertex is returned.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also distanceToPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.ToVector3D">
            <summary>
            <para>Returns the 3D form of this 2D vector, with the z coordinate set
            to zero.</para>
            <para>See also toVector4D() and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.ToVector4D">
            <summary>
            <para>Returns the 4D form of this 2D vector, with the z and w
            coordinates set to zero.</para>
            <para>See also toVector3D() and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.ToPoint">
            <summary>
            <para>Returns the QPoint form of this 2D vector.</para>
            <para>See also toPointF() and toVector3D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.ToPointF">
            <summary>
            <para>Returns the QPointF form of this 2D vector.</para>
            <para>See also toPoint() and toVector3D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Implicit(QtGui.QVector2D)~QtCore.QVariant">
            <summary>
            <para>Returns the 2D vector as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.DotProduct(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns the dot product of v1 and v2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Equality(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns true if v1 is equal to v2; otherwise returns false. This
            operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Inequality(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns true if v1 is not equal to v2; otherwise returns false.
            This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Addition(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns a QVector2D object that is the sum of the given vectors,
            v1 and v2; each component is added separately.</para>
            <para>See also QVector2D::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Subtraction(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns a QVector2D object that is formed by subtracting v2 from
            v1; each component is subtracted separately.</para>
            <para>See also QVector2D::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Multiply(System.Single,QtGui.QVector2D)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector2D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Multiply(QtGui.QVector2D,System.Single)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector2D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Multiply(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Multiplies the components of v1 by the corresponding components
            in v2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_UnaryNegation(QtGui.QVector2D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QVector2D object that is formed by changing the sign of
            the components of the given vector.</para>
            <para>Equivalent to QVector2D(0,0) - vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Division(QtGui.QVector2D,System.Single)">
            <summary>
            <para>Returns the QVector2D object formed by dividing all three
            components of the given vector by the given divisor.</para>
            <para>See also QVector2D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.op_Division(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns the QVector2D object formed by dividing components of the
            given vector by a respective components of the given divisor.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QVector2D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector2D.QFuzzyCompare(QtGui.QVector2D,QtGui.QVector2D)">
            <summary>
            <para>Returns true if v1 and v2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.Item(System.Int32)">
            <summary>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 2).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para></para>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 2).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.X">
            <summary>
            <para>Returns the x coordinate of this point.</para>
            <para>See also setX() and y().</para>
            <para></para>
            <para>Sets the x coordinate of this point to the given x
            coordinate.</para>
            <para>See also x() and setY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.Y">
            <summary>
            <para>Returns the y coordinate of this point.</para>
            <para>See also setY() and x().</para>
            <para></para>
            <para>Sets the y coordinate of this point to the given y
            coordinate.</para>
            <para>See also y() and setX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.IsNull">
            <summary>
            <para>Returns true if the x and y coordinates are set to 0.0, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.Length">
            <summary>
            <para>Returns the length of the vector from the origin.</para>
            <para>See also lengthSquared() and normalized().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.LengthSquared">
            <summary>
            <para>Returns the squared length of the vector from the origin. This is
            equivalent to the dot product of the vector with itself.</para>
            <para>See also length() and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector2D.Normalized">
            <summary>
            <para>Returns the normalized unit vector form of this vector.</para>
            <para>If this vector is null, then a null vector is returned. If the
            length of the vector is very close to 1, then the vector will be returned
            as-is. Otherwise the normalized form of the vector of length 1 will be
            returned.</para>
            <para>See also length() and normalize().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTouchDevice">
            <summary>
            <para>The QTouchDevice class describes the device from which touch
            events originate.</para>
            </summary>
            <remarks>
            <para>Each QTouchEvent contains a QTouchDevice pointer to allow
            accessing device-specific properties like type and capabilities. It is the
            responsibility of the platform or generic plug-ins to register the
            available touch devices via QWindowSystemInterface before generating any
            touch events. Applications do not need to instantiate this class, they
            should just access the global instances pointed to by
            QTouchEvent::device().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTouchDevice.#ctor">
            <summary>
            <para>Creates a new touch device instance. By default the name is
            empty, the only capability is Position and type is TouchScreen.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchDevice.Name">
            <summary>
            <para>Returns the touch device name.</para>
            <para>This string may often be empty. It is however useful for systems
            that have more than one touch input device because there it can be used to
            differentiate between the devices (i.e. to tell from which device a
            QTouchEvent originates from).</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name (a unique identifier) for the device. In most
            systems it is enough to leave this unset and keep the default empty name.
            This identifier becomes important when having multiple touch devices and a
            need to differentiate between them.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchDevice.Type">
            <summary>
            <para>Returns the touch device type.</para>
            <para>See also setType().</para>
            <para></para>
            <para>Sets the device type devType.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchDevice.Capabilities">
            <summary>
            <para>Returns the touch device capabilities.</para>
            <para>See also setCapabilities().</para>
            <para></para>
            <para>Sets the capabilities caps supported by the device and its
            driver.</para>
            <para>See also capabilities().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchDevice.MaximumTouchPoints">
            <summary>
            <para>Returns the maximum number of simultaneous touch points (fingers)
            that can be detected.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also setMaximumTouchPoints().</para>
            <para></para>
            <para>Sets the maximum number of simultaneous touchpoints max supported
            by the device and its driver.</para>
            <para>See also maximumTouchPoints().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTouchDevice.DeviceType">
            <summary>
            <para>This enum represents the type of device that generated a
            QTouchEvent.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTouchDevice.DeviceType.TouchScreen">
            <summary>In this type of device, the touch surface and display are integrated. This means the surface and display typically have the same size, such that there is a direct relationship between the touch points' physical positions and the coordinate reported by QTouchEvent::TouchPoint. As a result, Qt allows the user to interact directly with multiple QWidgets and QGraphicsItems at the same time.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.DeviceType.TouchPad">
            <summary>In this type of device, the touch surface is separate from the display. There is not a direct relationship between the physical touch location and the on-screen coordinates. Instead, they are calculated relative to the current mouse position, and the user must use the touch-pad to move this reference point. Unlike touch-screens, Qt allows users to only interact with a single QWidget or QGraphicsItem at a time.</summary>
        </member>
        <member name="T:QtGui.QTouchDevice.CapabilityFlag">
            <summary>
            <para>This enum is used with QTouchDevice::capabilities() to indicate
            what kind of information the touch device or its driver can provide.</para>
            <para>The Capabilities type is a typedef for
            QFlags&lt;CapabilityFlag&gt;. It stores an OR combination of CapabilityFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.Position">
            <summary>Indicates that position information is available, meaning that the pos() family of functions in the touch points return valid points.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.Area">
            <summary>Indicates that touch area information is available, meaning that the rect() family of functions in the touch points return valid rectangles.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.Pressure">
            <summary>Indicates that pressure information is available, meaning that pressure() returns a valid value.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.Velocity">
            <summary>Indicates that velocity information is available, meaning that velocity() returns a valid vector.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.RawPositions">
            <summary>Indicates that the list returned by QTouchEvent::TouchPoint::rawScreenPositions() may contain one or more positions for each touch point. This is relevant when the touch input gets filtered or corrected on driver level.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.NormalizedPosition">
            <summary>Indicates that the normalized position is available, meaning that normalizedPos() returns a valid value.</summary>
        </member>
        <member name="F:QtGui.QTouchDevice.CapabilityFlag.MouseEmulation">
            <summary>Indicates that the device synthesizes mouse events. This enum value has been introduced in Qt 5.5.</summary>
        </member>
        <member name="T:QtGui.QInputEvent">
            <summary>
            <para>The QInputEvent class is the base class for events that describe
            user input.</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifier flags that existed immediately
            before the event occurred.</para>
            <para>See also QGuiApplication::keyboardModifiers().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputEvent.Timestamp">
            <summary>
            <para>Returns the window system's timestamp for this event.</para>
            </summary>
        </member>
        <member name="T:QtGui.QEnterEvent">
            <summary>
            <para>The QEnterEvent class contains parameters that describe an enter
            event.</para>
            </summary>
            <remarks>
            <para>Enter events occur when the mouse cursor enters a window or a
            widget.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QEnterEvent.#ctor(QtCore.QPointF,QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Constructs an enter event object.</para>
            <para>The points localPos, windowPos and screenPos specify the mouse
            cursor's position relative to the receiving widget or item, window, and
            screen, respectively.</para>
            </summary>
        </member>
        <member name="T:QtGui.QMouseEvent">
            <summary>
            <para>The QMouseEvent class contains parameters that describe a mouse
            event.</para>
            </summary>
            <remarks>
            <para>Mouse events occur when a mouse button is pressed or released
            inside a widget, or when the mouse cursor is moved.</para>
            <para>Mouse move events will occur only when a mouse button is pressed
            down, unless mouse tracking has been enabled with
            QWidget::setMouseTracking().</para>
            <para>Qt automatically grabs the mouse when a mouse button is pressed
            inside a widget; the widget will continue to receive mouse events until the
            last mouse button is released.</para>
            <para>A mouse event contains a special accept flag that indicates
            whether the receiver wants the event. You should call ignore() if the mouse
            event is not handled by your widget. A mouse event is propagated up the
            parent widget chain until a widget accepts it with accept(), or an event
            filter consumes it.</para>
            <para>Note: If a mouse event is propagated to a widget for which
            Qt::WA_NoMousePropagation has been set, that mouse event will not be
            propagated further up the parent widget chain.</para>
            <para>The state of the keyboard modifier keys can be found by calling
            the modifiers() function, inherited from QInputEvent.</para>
            <para>The functions pos(), x(), and y() give the cursor position
            relative to the widget that receives the mouse event. If you move the
            widget as a result of the mouse event, use the global position returned by
            globalPos() to avoid a shaking motion.</para>
            <para>The QWidget::setEnabled() function can be used to enable or
            disable mouse and keyboard events for a widget.</para>
            <para>Reimplement the QWidget event handlers,
            QWidget::mousePressEvent(), QWidget::mouseReleaseEvent(),
            QWidget::mouseDoubleClickEvent(), and QWidget::mouseMoveEvent() to receive
            mouse events in your own widgets.</para>
            <para></para>
            <para>See also QWidget::setMouseTracking(), QWidget::grabMouse(), and
            QCursor::pos().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QMouseEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.Qt.MouseButton,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a mouse event object.</para>
            <para>The type parameter must be one of QEvent::MouseButtonPress,
            QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick, or
            QEvent::MouseMove.</para>
            <para>The localPos is the mouse cursor's position relative to the
            receiving widget or item. The window position is set to the same value as
            localPos. The button that caused the event is given as a value from the
            Qt::MouseButton enum. If the event type is MouseMove, the appropriate
            button for this event is Qt::NoButton. The mouse and keyboard states at the
            time of the event are specified by buttons and modifiers.</para>
            <para>The screenPos() is initialized to QCursor::pos(), which may not
            be appropriate. Use the other constructor to specify the global position
            explicitly.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMouseEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.QPointF,QtCore.Qt.MouseButton,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a mouse event object.</para>
            <para>The type parameter must be QEvent::MouseButtonPress,
            QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick, or
            QEvent::MouseMove.</para>
            <para>The localPos is the mouse cursor's position relative to the
            receiving widget or item. The cursor's position in screen coordinates is
            specified by screenPos. The window position is set to the same value as
            localPos. The button that caused the event is given as a value from the
            Qt::MouseButton enum. If the event type is MouseMove, the appropriate
            button for this event is Qt::NoButton. buttons is the state of all buttons
            at the time of the event, modifiers the state of all keyboard
            modifiers.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMouseEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.QPointF,QtCore.QPointF,QtCore.Qt.MouseButton,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a mouse event object.</para>
            <para>The type parameter must be QEvent::MouseButtonPress,
            QEvent::MouseButtonRelease, QEvent::MouseButtonDblClick, or
            QEvent::MouseMove.</para>
            <para>The points localPos, windowPos and screenPos specify the mouse
            cursor's position relative to the receiving widget or item, window, and
            screen, respectively.</para>
            <para>The button that caused the event is given as a value from the
            Qt::MouseButton enum. If the event type is MouseMove, the appropriate
            button for this event is Qt::NoButton. buttons is the state of all buttons
            at the time of the event, modifiers the state of all keyboard
            modifiers.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor, relative to the widget
            that received the event.</para>
            <para>If you move the widget as a result of the mouse event, use the
            global position returned by globalPos() to avoid a shaking motion.</para>
            <para>See also x(), y(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.GlobalPos">
            <summary>
            <para>Returns the global position of the mouse cursor at the time of
            the event. This is important on asynchronous window systems like X11.
            Whenever you move your widgets around in response to mouse events,
            globalPos() may differ a lot from the current pointer position
            QCursor::pos(), and from QWidget::mapToGlobal(pos()).</para>
            <para>See also globalX() and globalY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.X">
            <summary>
            <para>Returns the x position of the mouse cursor, relative to the
            widget that received the event.</para>
            <para>See also y() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Y">
            <summary>
            <para>Returns the y position of the mouse cursor, relative to the
            widget that received the event.</para>
            <para>See also x() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.GlobalX">
            <summary>
            <para>Returns the global x position of the mouse cursor at the time of
            the event.</para>
            <para>See also globalY() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.GlobalY">
            <summary>
            <para>Returns the global y position of the mouse cursor at the time of
            the event.</para>
            <para>See also globalX() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.LocalPos">
            <summary>
            <para>Returns the position of the mouse cursor as a QPointF, relative
            to the widget or item that received the event.</para>
            <para>If you move the widget as a result of the mouse event, use the
            screen position returned by screenPos() to avoid a shaking motion.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also x(), y(), windowPos(), and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.WindowPos">
            <summary>
            <para>Returns the position of the mouse cursor as a QPointF, relative
            to the window that received the event.</para>
            <para>If you move the widget as a result of the mouse event, use the
            global position returned by globalPos() to avoid a shaking motion.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also x(), y(), pos(), localPos(), and screenPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.ScreenPos">
            <summary>
            <para>Returns the position of the mouse cursor as a QPointF, relative
            to the screen that received the event.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also x(), y(), pos(), localPos(), and windowPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Button">
            <summary>
            <para>Returns the button that caused the event.</para>
            <para>Note that the returned value is always Qt::NoButton for mouse
            move events.</para>
            <para>See also buttons() and Qt::MouseButton.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Buttons">
            <summary>
            <para>Returns the button state when the event was generated. The button
            state is a combination of Qt::LeftButton, Qt::RightButton, Qt::MidButton
            using the OR operator. For mouse move events, this is all buttons that are
            pressed down. For mouse press and double click events this includes the
            button that caused the event. For mouse release events this excludes the
            button that caused the event.</para>
            <para>See also button() and Qt::MouseButton.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Source">
            <summary>
            <para>Returns information about the mouse event source.</para>
            <para>The mouse event source can be used to distinguish between genuine
            and artificial mouse events. The latter are events that are synthesized
            from touch events by the operating system or Qt itself.</para>
            <para>Note: Many platforms provide no such information. On such
            platforms Qt::MouseEventNotSynthesized is returned always.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also Qt::MouseEventSource and
            QGraphicsSceneMouseEvent::source().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMouseEvent.Flags">
            <summary>
            <para>Returns the mouse event flags.</para>
            <para>The mouse event flags provide additional information about a
            mouse event.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also Qt::MouseEventFlag and
            QGraphicsSceneMouseEvent::flags().</para>
            </summary>
        </member>
        <member name="T:QtGui.QHoverEvent">
            <summary>
            <para>The QHoverEvent class contains parameters that describe a mouse
            event.</para>
            </summary>
            <remarks>
            <para>Mouse events occur when a mouse cursor is moved into, out of, or
            within a widget, and if the widget has the Qt::WA_Hover attribute.</para>
            <para>The function pos() gives the current cursor position, while
            oldPos() gives the old mouse position.</para>
            <para>There are a few similarities between the events
            QEvent::HoverEnter and QEvent::HoverLeave, and the events QEvent::Enter and
            QEvent::Leave. However, they are slightly different because we do an
            update() in the event handler of HoverEnter and HoverLeave.</para>
            <para>QEvent::HoverMove is also slightly different from
            QEvent::MouseMove. Let us consider a top-level window A containing a child
            B which in turn contains a child C (all with mouse tracking
            enabled):</para>
            <para></para>
            <para>Now, if you move the cursor from the top to the bottom in the
            middle of A, you will get the following QEvent::MouseMove events:</para>
            <para></para>
            <para>A::MouseMove</para>
            <para>B::MouseMove</para>
            <para>C::MouseMove</para>
            <para></para>
            <para>You will get the same events for QEvent::HoverMove, except that
            the event always propagates to the top-level regardless whether the event
            is accepted or not. It will only stop propagating with the
            Qt::WA_NoMousePropagation attribute.</para>
            <para>In this case the events will occur in the following way:</para>
            <para></para>
            <para>A::HoverMove</para>
            <para>A::HoverMove, B::HoverMove</para>
            <para>A::HoverMove, B::HoverMove, C::HoverMove</para>
            <para></para>
            </remarks>
        </member>
        <member name="M:QtGui.QHoverEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.QPointF,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a hover event object.</para>
            <para>The type parameter must be QEvent::HoverEnter,
            QEvent::HoverLeave, or QEvent::HoverMove.</para>
            <para>The pos is the current mouse cursor's position relative to the
            receiving widget, while oldPos is its previous such position. modifiers
            hold the state of all keyboard modifiers at the time of the event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QHoverEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor, relative to the widget
            that received the event.</para>
            <para>On QEvent::HoverLeave events, this position will always be
            QPoint(-1, -1).</para>
            <para>See also oldPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHoverEvent.OldPos">
            <summary>
            <para>Returns the previous position of the mouse cursor, relative to
            the widget that received the event. If there is no previous position,
            oldPos() will return the same position as pos().</para>
            <para>On QEvent::HoverEnter events, this position will always be
            QPoint(-1, -1).</para>
            <para>See also pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHoverEvent.PosF">
            <summary>
            <para>Returns the position of the mouse cursor, relative to the widget
            that received the event.</para>
            <para>On QEvent::HoverLeave events, this position will always be
            QPointF(-1, -1).</para>
            <para>See also oldPosF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHoverEvent.OldPosF">
            <summary>
            <para>Returns the previous position of the mouse cursor, relative to
            the widget that received the event. If there is no previous position,
            oldPosF() will return the same position as posF().</para>
            <para>On QEvent::HoverEnter events, this position will always be
            QPointF(-1, -1).</para>
            <para>See also posF().</para>
            </summary>
        </member>
        <member name="T:QtGui.QWheelEvent">
            <summary>
            <para>The QWheelEvent class contains parameters that describe a wheel
            event.</para>
            </summary>
            <remarks>
            <para>Wheel events are sent to the widget under the mouse cursor, but
            if that widget does not handle the event they are sent to the focus widget.
            Wheel events are generated for both mouse wheels and trackpad scroll
            gestures. There are two ways to read the wheel event delta: angleDelta()
            returns the delta in wheel degrees. This value is always provided.
            pixelDelta() returns the delta in screen pixels and is available on
            platforms that have high-resolution trackpads, such as Mac OS X. If that is
            the case, source() will return Qt::MouseEventSynthesizedBySystem.</para>
            <para>The functions pos() and globalPos() return the mouse cursor's
            location at the time of the event.</para>
            <para>A wheel event contains a special accept flag that indicates
            whether the receiver wants the event. You should call ignore() if you do
            not handle the wheel event; this ensures that it will be sent to the parent
            widget.</para>
            <para>The QWidget::setEnabled() function can be used to enable or
            disable mouse and keyboard events for a widget.</para>
            <para>The event handler QWidget::wheelEvent() receives wheel
            events.</para>
            <para></para>
            <para>See also QMouseEvent and QWidget::grabMouse().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QWheelEvent.#ctor(QtCore.QPointF,System.Int32,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.Qt.Orientation)">
            <summary>
            <para>Constructs a wheel event object.</para>
            <para>Use the constructor taking angleDelta and pixelDelta QPoints
            instead.</para>
            <para>The position, pos, is the location of the mouse cursor within the
            widget. The globalPos() is initialized to QCursor::pos() which is usually,
            but not always, correct. Use the other constructor if you need to specify
            the global position explicitly.</para>
            <para>The buttons describe the state of the mouse buttons at the time
            of the event, delta contains the rotation distance, modifiers holds the
            keyboard modifier flags at the time of the event, and orient holds the
            wheel's orientation.</para>
            <para>See also pos(), pixelDelta(), and angleDelta().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWheelEvent.#ctor(QtCore.QPointF,QtCore.QPointF,System.Int32,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.Qt.Orientation)">
            <summary>
            <para>Constructs a wheel event object.</para>
            <para>Use the constructor taking angleDelta and pixelDelta QPoints
            instead.</para>
            <para>The pos provides the location of the mouse cursor within the
            widget. The position in global coordinates is specified by globalPos. delta
            contains the rotation distance, modifiers holds the keyboard modifier flags
            at the time of the event, and orient holds the wheel's orientation.</para>
            <para>See also pos(), pixelDelta(), and angleDelta().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWheelEvent.#ctor(QtCore.QPointF,QtCore.QPointF,QtCore.QPoint,QtCore.QPoint,System.Int32,QtCore.Qt.Orientation,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a wheel event object.</para>
            <para>The pos provides the location of the mouse cursor within the
            window. The position in global coordinates is specified by
            globalPos.</para>
            <para>pixelDelta contains the scrolling distance in pixels on screen,
            while angleDelta contains the wheel rotation distance. pixelDelta is
            optional and can be null.</para>
            <para>The mouse and keyboard states at the time of the event are
            specified by buttons and modifiers.</para>
            <para>For backwards compatibility, the event can also hold
            monodirectional wheel event data: qt4Delta specifies the rotation, and
            qt4Orientation the direction.</para>
            <para>The phase() is initialized to Qt::ScrollUpdate. Use the other
            constructor to specify the phase explicitly.</para>
            <para>See also posF(), globalPosF(), angleDelta(), and
            pixelDelta().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWheelEvent.#ctor(QtCore.QPointF,QtCore.QPointF,QtCore.QPoint,QtCore.QPoint,System.Int32,QtCore.Qt.Orientation,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.Qt.ScrollPhase)">
            <summary>
            <para>Constructs a wheel event object.</para>
            <para>The pos provides the location of the mouse cursor within the
            window. The position in global coordinates is specified by
            globalPos.</para>
            <para>pixelDelta contains the scrolling distance in pixels on screen,
            while angleDelta contains the wheel rotation distance. pixelDelta is
            optional and can be null.</para>
            <para>The mouse and keyboard states at the time of the event are
            specified by buttons and modifiers.</para>
            <para>For backwards compatibility, the event can also hold
            monodirectional wheel event data: qt4Delta specifies the rotation, and
            qt4Orientation the direction.</para>
            <para>The scrolling phase of the event is specified by phase.</para>
            <para>See also posF(), globalPosF(), angleDelta(), pixelDelta(), and
            phase().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWheelEvent.#ctor(QtCore.QPointF,QtCore.QPointF,QtCore.QPoint,QtCore.QPoint,System.Int32,QtCore.Qt.Orientation,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.Qt.ScrollPhase,QtCore.Qt.MouseEventSource)">
            <summary>
            <para>Constructs a wheel event object.</para>
            <para>The pos provides the location of the mouse cursor within the
            window. The position in global coordinates is specified by
            globalPos.</para>
            <para>pixelDelta contains the scrolling distance in pixels on screen,
            while angleDelta contains the wheel rotation distance. pixelDelta is
            optional and can be null.</para>
            <para>The mouse and keyboard states at the time of the event are
            specified by buttons and modifiers.</para>
            <para>For backwards compatibility, the event can also hold
            monodirectional wheel event data: qt4Delta specifies the rotation, and
            qt4Orientation the direction.</para>
            <para>The scrolling phase of the event is specified by phase.</para>
            <para>If the wheel event comes from a physical mouse wheel, source is
            set to Qt::MouseEventNotSynthesized. If it comes from a gesture detected by
            the operating system, or from a non-mouse hardware device, such that
            pixelDelta is directly related to finger movement, source is set to
            Qt::MouseEventSynthesizedBySystem. If it comes from Qt, source would be set
            to Qt::MouseEventSynthesizedByQt.</para>
            <para>See also posF(), globalPosF(), angleDelta(), pixelDelta(), and
            phase().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.PixelDelta">
            <summary>
            <para>Returns the scrolling distance in pixels on screen. This value is
            provided on platforms that support high-resolution pixel-based delta
            values, such as Mac OS X. The value should be used directly to scroll
            content on screen.</para>
            <para>Example:</para>
            <para>void MyWidget::wheelEvent(QWheelEvent *event)</para>
            <para>{</para>
            <para>    QPoint numPixels = event-&gt;pixelDelta();</para>
            <para>    QPoint numDegrees = event-&gt;angleDelta() / 8;</para>
            <para></para>
            <para>    if (!numPixels.isNull()) {</para>
            <para>        scrollWithPixels(numPixels);</para>
            <para>    } else if (!numDegrees.isNull()) {</para>
            <para>        QPoint numSteps = numDegrees / 15;</para>
            <para>        scrollWithDegrees(numSteps);</para>
            <para>    }</para>
            <para></para>
            <para>    event-&gt;accept();</para>
            <para>}</para>
            <para>Note: On platforms that support scrolling phases, the delta may
            be null when:</para>
            <para></para>
            <para>scrolling is about to begin, but the distance did not yet change
            (Qt::ScrollBegin),</para>
            <para>or scrolling has ended and the distance did not change anymore
            (Qt::ScrollEnd).</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.AngleDelta">
            <summary>
            <para>Returns the distance that the wheel is rotated, in eighths of a
            degree. A positive value indicates that the wheel was rotated forwards away
            from the user; a negative value indicates that the wheel was rotated
            backwards toward the user.</para>
            <para>Most mouse types work in steps of 15 degrees, in which case the
            delta value is a multiple of 120; i.e., 120 units * 1/8 = 15
            degrees.</para>
            <para>However, some mice have finer-resolution wheels and send delta
            values that are less than 120 units (less than 15 degrees). To support this
            possibility, you can either cumulatively add the delta values from events
            until the value of 120 is reached, then scroll the widget, or you can
            partially scroll the widget in response to each wheel event.</para>
            <para>Example:</para>
            <para>void MyWidget::wheelEvent(QWheelEvent *event)</para>
            <para>{</para>
            <para>    QPoint numPixels = event-&gt;pixelDelta();</para>
            <para>    QPoint numDegrees = event-&gt;angleDelta() / 8;</para>
            <para></para>
            <para>    if (!numPixels.isNull()) {</para>
            <para>        scrollWithPixels(numPixels);</para>
            <para>    } else if (!numDegrees.isNull()) {</para>
            <para>        QPoint numSteps = numDegrees / 15;</para>
            <para>        scrollWithDegrees(numSteps);</para>
            <para>    }</para>
            <para></para>
            <para>    event-&gt;accept();</para>
            <para>}</para>
            <para>Note: On platforms that support scrolling phases, the delta may
            be null when:</para>
            <para></para>
            <para>scrolling is about to begin, but the distance did not yet change
            (Qt::ScrollBegin),</para>
            <para>or scrolling has ended and the distance did not change anymore
            (Qt::ScrollEnd).</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Delta">
            <summary>
            <para>This function has been deprecated, use pixelDelta() or
            angleDelta() instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Orientation">
            <summary>
            <para>Returns the wheel's orientation.</para>
            <para>Use angleDelta() instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor relative to the widget
            that received the event.</para>
            <para>If you move your widgets around in response to mouse events, use
            globalPos() instead of this function.</para>
            <para>See also x(), y(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.GlobalPos">
            <summary>
            <para>Returns the global position of the mouse pointer at the time of
            the event. This is important on asynchronous window systems such as X11;
            whenever you move your widgets around in response to mouse events,
            globalPos() can differ a lot from the current cursor position returned by
            QCursor::pos().</para>
            <para>See also globalX() and globalY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.X">
            <summary>
            <para>Returns the x position of the mouse cursor, relative to the
            widget that received the event.</para>
            <para>See also y() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Y">
            <summary>
            <para>Returns the y position of the mouse cursor, relative to the
            widget that received the event.</para>
            <para>See also x() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.GlobalX">
            <summary>
            <para>Returns the global x position of the mouse cursor at the time of
            the event.</para>
            <para>See also globalY() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.GlobalY">
            <summary>
            <para>Returns the global y position of the mouse cursor at the time of
            the event.</para>
            <para>See also globalX() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.PosF">
            <summary>
            <para>Returns the position of the mouse cursor relative to the widget
            that received the event.</para>
            <para>If you move your widgets around in response to mouse events, use
            globalPosF() instead of this function.</para>
            <para>See also globalPosF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.GlobalPosF">
            <summary>
            <para>Returns the global position of the mouse pointer at the time of
            the event. This is important on asynchronous window systems such as X11;
            whenever you move your widgets around in response to mouse events,
            globalPosF() can differ a lot from the current cursor position returned by
            QCursor::pos().</para>
            <para>See also posF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Buttons">
            <summary>
            <para>Returns the mouse state when the event occurred.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Phase">
            <summary>
            <para>Returns the scrolling phase of this wheel event.</para>
            <para>Note: The Qt::ScrollBegin and Qt::ScrollEnd phases are currently
            supported only on Mac OS X.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWheelEvent.Source">
            <summary>
            <para>Returns information about the wheel event source.</para>
            <para>The source can be used to distinguish between events that come
            from a mouse with a physical wheel and events that are generated by some
            other means, such as a flick gesture on a touchpad.</para>
            <para>Note: Many platforms provide no such information. On such
            platforms Qt::MouseEventNotSynthesized is returned always.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Qt::MouseEventSource.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTabletEvent">
            <summary>
            <para>The QTabletEvent class contains parameters that describe a Tablet
            event.</para>
            </summary>
            <remarks>
            <para>Tablet events are generated from tablet peripherals such as Wacom
            tablets and various other brands, and electromagnetic stylus devices
            included with some types of tablet computers. (It is not the same as
            QTouchEvent which a touchscreen generates, even when a passive stylus is
            used on a touchscreen.)</para>
            <para>Tablet events are similar to mouse events; for example, the x(),
            y(), pos(), globalX(), globalY(), and globalPos() accessors provide the
            cursor position, and you can see which buttons() are pressed (pressing the
            stylus tip against the tablet surface is equivalent to a left mouse
            button). But tablet events also pass through some extra information that
            the tablet device driver provides; for example, you might want to do
            subpixel rendering with higher resolution coordinates (hiResGlobalX() and
            hiResGlobalY()), adjust color brightness based on the pressure() of the
            tool against the tablet surface, use different brushes depending on the
            type of tool in use (device()), modulate the brush shape in some way
            according to the X-axis and Y-axis tilt of the tool with respect to the
            tablet surface (xTilt() and yTilt()), and use a virtual eraser instead of a
            brush if the user switches to the other end of a double-ended stylus
            (pointerType()).</para>
            <para>Every event contains an accept flag that indicates whether the
            receiver wants the event. You should call QTabletEvent::accept() if you
            handle the tablet event; otherwise it will be sent to the parent widget.
            The exception are TabletEnterProximity and TabletLeaveProximity events:
            these are only sent to QApplication and do not check whether or not they
            are accepted.</para>
            <para>The QWidget::setEnabled() function can be used to enable or
            disable mouse, tablet and keyboard events for a widget.</para>
            <para>The event handler QWidget::tabletEvent() receives TabletPress,
            TabletRelease and TabletMove events. Qt will first send a tablet event,
            then if it is not accepted by any widget, it will send a mouse event. This
            allows users of applications that are not designed for tablets to use a
            tablet like a mouse. However high-resolution drawing applications should
            handle the tablet events, because they can occur at a higher frequency,
            which is a benefit for smooth and accurate drawing. If the tablet events
            are rejected, the synthetic mouse events may be compressed for
            efficiency.</para>
            <para>New in Qt 5.4: QTabletEvent includes all information available
            from the device, including QTabletEvent::buttons(). Previously it was not
            possible to accept all tablet events and also know which stylus buttons
            were pressed.</para>
            <para>Note that pressing the stylus button while the stylus hovers over
            the tablet will generate a button press on some types of tablets, while on
            other types it will be necessary to press the stylus against the tablet
            surface in order to register the simultaneous stylus button press.</para>
            <para></para>
            <para>Notes for X11 Users</para>
            <para>If the tablet is configured in xorg.conf to use the Wacom driver,
            there will be separate XInput &quot;devices&quot; for the stylus, eraser,
            and (optionally) cursor and touchpad. Qt recognizes these by their names.
            Otherwise, if the tablet is configured to use the evdev driver, there will
            be only one device and applications may not be able to distinguish the
            stylus from the eraser.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTabletEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.QPointF,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,QtCore.Qt.KeyboardModifier,System.Int64)">
            <summary>
            <para>Construct a tablet event of the given type.</para>
            <para>The pos parameter indicates where the event occurred in the
            widget; globalPos is the corresponding position in absolute
            coordinates.</para>
            <para>pressure contains the pressure exerted on the device.</para>
            <para>pointerType describes the type of pen that is being used.</para>
            <para>xTilt and yTilt contain the device's degree of tilt from the x
            and y axes respectively.</para>
            <para>keyState specifies which keyboard modifiers are pressed (e.g.,
            Ctrl).</para>
            <para>The uniqueID parameter contains the unique ID for the current
            device.</para>
            <para>The z parameter contains the coordinate of the device on the
            tablet, this is usually given by a wheel on 4D mouse. If the device does
            not support a Z-axis, pass zero here.</para>
            <para>The tangentialPressure parameter contins the tangential pressure
            of an air brush. If the device does not support tangential pressure, pass 0
            here.</para>
            <para>rotation contains the device's rotation in degrees. 4D mice
            support rotation. If the device does not support rotation, pass 0
            here.</para>
            <para>See also pos(), globalPos(), device(), pressure(), xTilt(),
            yTilt(), uniqueId(), rotation(), tangentialPressure(), and z().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTabletEvent.#ctor(QtCore.QEvent.Type,QtCore.QPointF,QtCore.QPointF,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Int32,QtCore.Qt.KeyboardModifier,System.Int64,QtCore.Qt.MouseButton,QtCore.Qt.MouseButton)">
            <summary>
            <para>Construct a tablet event of the given type.</para>
            <para>The pos parameter indicates where the event occurred in the
            widget; globalPos is the corresponding position in absolute
            coordinates.</para>
            <para>pressure contains the pressure exerted on the device.</para>
            <para>pointerType describes the type of pen that is being used.</para>
            <para>xTilt and yTilt contain the device's degree of tilt from the x
            and y axes respectively.</para>
            <para>keyState specifies which keyboard modifiers are pressed (e.g.,
            Ctrl).</para>
            <para>The uniqueID parameter contains the unique ID for the current
            device.</para>
            <para>The z parameter contains the coordinate of the device on the
            tablet, this is usually given by a wheel on 4D mouse. If the device does
            not support a Z-axis, pass zero here.</para>
            <para>The tangentialPressure parameter contins the tangential pressure
            of an air brush. If the device does not support tangential pressure, pass 0
            here.</para>
            <para>rotation contains the device's rotation in degrees. 4D mice and
            the Wacom Art Pen support rotation. If the device does not support
            rotation, pass 0 here.</para>
            <para>The button that caused the event is given as a value from the
            Qt::MouseButton enum. If the event type is not TabletPress or
            TabletRelease, the appropriate button for this event is
            Qt::NoButton.</para>
            <para>buttons is the state of all buttons at the time of the
            event.</para>
            <para>See also pos(), globalPos(), device(), pressure(), xTilt(),
            yTilt(), uniqueId(), rotation(), tangentialPressure(), and z().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Pos">
            <summary>
            <para>Returns the position of the device, relative to the widget that
            received the event.</para>
            <para>If you move widgets around in response to mouse events, use
            globalPos() instead of this function.</para>
            <para>See also x(), y(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.GlobalPos">
            <summary>
            <para>Returns the global position of the device at the time of the
            event. This is important on asynchronous windows systems like X11; whenever
            you move your widgets around in response to mouse events, globalPos() can
            differ significantly from the current position QCursor::pos().</para>
            <para>See also globalX(), globalY(), and hiResGlobalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.PosF">
            <summary>
            <para>Returns the position of the device, relative to the widget that
            received the event.</para>
            <para>If you move widgets around in response to mouse events, use
            globalPosF() instead of this function.</para>
            <para>See also globalPosF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.GlobalPosF">
            <summary>
            <para>Returns the global position of the device at the time of the
            event. This is important on asynchronous windows systems like X11; whenever
            you move your widgets around in response to mouse events, globalPosF() can
            differ significantly from the current position QCursor::pos().</para>
            <para>See also posF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.X">
            <summary>
            <para>Returns the x position of the device, relative to the widget that
            received the event.</para>
            <para>See also y() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Y">
            <summary>
            <para>Returns the y position of the device, relative to the widget that
            received the event.</para>
            <para>See also x() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.GlobalX">
            <summary>
            <para>Returns the global x position of the mouse pointer at the time of
            the event.</para>
            <para>See also globalY(), globalPos(), and hiResGlobalX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.GlobalY">
            <summary>
            <para>Returns the global y position of the tablet device at the time of
            the event.</para>
            <para>See also globalX(), globalPos(), and hiResGlobalY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.HiResGlobalX">
            <summary>
            <para>The high precision x position of the tablet device.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.HiResGlobalY">
            <summary>
            <para>The high precision y position of the tablet device.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Device">
            <summary>
            <para>Returns the type of device that generated the event.</para>
            <para>See also TabletDevice.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.pointerType">
            <summary>
            <para>Returns the type of point that generated the event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.UniqueId">
            <summary>
            <para>Returns a unique ID for the current device, making it possible to
            differentiate between multiple devices being used at the same time on the
            tablet.</para>
            <para>Support of this feature is dependent on the tablet.</para>
            <para>Values for the same device may vary from OS to OS.</para>
            <para>Later versions of the Wacom driver for Linux will now report the
            ID information. If you have a tablet that supports unique ID and are not
            getting the information on Linux, consider upgrading your driver.</para>
            <para>As of Qt 4.2, the unique ID is the same regardless of the
            orientation of the pen. Earlier versions would report a different value
            when using the eraser-end versus the pen-end of the stylus on some
            OS's.</para>
            <para>See also pointerType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Pressure">
            <summary>
            <para>Returns the pressure for the device. 0.0 indicates that the
            stylus is not on the tablet, 1.0 indicates the maximum amount of pressure
            for the stylus.</para>
            <para>See also tangentialPressure().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Z">
            <summary>
            <para>Returns the z position of the device. Typically this is
            represented by a wheel on a 4D Mouse. If the device does not support a
            Z-axis, this value is always zero. This is not the same as pressure.</para>
            <para>See also pressure().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.TangentialPressure">
            <summary>
            <para>Returns the tangential pressure for the device. This is typically
            given by a finger wheel on an airbrush tool. The range is from -1.0 to 1.0.
            0.0 indicates a neutral position. Current airbrushes can only move in the
            positive direction from the neutrual position. If the device does not
            support tangential pressure, this value is always 0.0.</para>
            <para>See also pressure().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Rotation">
            <summary>
            <para>Returns the rotation of the current device in degress. This is
            usually given by a 4D Mouse. If the device does not support rotation this
            value is always 0.0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.XTilt">
            <summary>
            <para>Returns the angle between the device (a pen, for example) and the
            perpendicular in the direction of the x axis. Positive values are towards
            the tablet's physical right. The angle is in the range -60 to +60
            degrees.</para>
            <para></para>
            <para>See also yTilt().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.YTilt">
            <summary>
            <para>Returns the angle between the device (a pen, for example) and the
            perpendicular in the direction of the y axis. Positive values are towards
            the bottom of the tablet. The angle is within the range -60 to +60
            degrees.</para>
            <para>See also xTilt().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Button">
            <summary>
            <para>Returns the button that caused the event.</para>
            <para>Note that the returned value is always Qt::NoButton for
            TabletMove, TabletEnterProximity and TabletLeaveProximity events.</para>
            <para>See also buttons() and Qt::MouseButton.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTabletEvent.Buttons">
            <summary>
            <para>Returns the button state when the event was generated. The button
            state is a combination of buttons from the Qt::MouseButton enum using the
            OR operator. For TabletMove events, this is all buttons that are pressed
            down. For TabletPress events this includes the button that caused the
            event. For TabletRelease events this excludes the button that caused the
            event.</para>
            <para>See also button() and Qt::MouseButton.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTabletEvent.TabletDevice">
            <summary>
            <para>This enum defines what type of device is generating the
            event.</para>
            <para>This enum was introduced or modified in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.NoDevice">
            <summary>No device, or an unknown device.</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.Puck">
            <summary>A Puck (a device that is similar to a flat mouse with a transparent circle with cross-hairs).</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.Stylus">
            <summary>A Stylus.</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.Airbrush">
            <summary>An airbrush</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.FourDMouse">
            <summary>A 4D Mouse.</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.TabletDevice.RotationStylus">
            <summary>A special stylus that also knows about rotation (a 6D stylus).</summary>
        </member>
        <member name="T:QtGui.QTabletEvent.PointerType">
            <summary>
            <para>This enum defines what type of point is generating the
            event.</para>
            <para>See also pointerType().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTabletEvent.PointerType.UnknownPointer">
            <summary>An unknown device.</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.PointerType.Pen">
            <summary>Tip end of a stylus-like device (the narrow end of the pen).</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.PointerType.Cursor">
            <summary>Any puck-like device.</summary>
        </member>
        <member name="F:QtGui.QTabletEvent.PointerType.Eraser">
            <summary>Eraser end of a stylus-like device (the broad end of the pen).</summary>
        </member>
        <member name="T:QtGui.QNativeGestureEvent">
            <summary>
            <para>The QNativeGestureEvent class contains parameters that describe a
            gesture event.</para>
            </summary>
            <remarks>
            <para>Native gesture events are generated by the operating system,
            typically by interpreting touch events. Gesture events are high-level
            events such as zoom or rotate.</para>
            <para></para>
            <para> Event TypeDescriptionTouch equence</para>
            <para>Qt::ZoomNativeGesture	Magnification delta in percent.	OS X:
            Two-finger pinch.</para>
            <para>Qt::SmartZoomNativeGesture	Boolean magnification state.	OS X:
            Two-finger douple tap (trackpad) / One-finger douple tap (magic
            mouse).</para>
            <para>Qt::RotateNativeGesture	Rotation delta in degrees.	OS X:
            Two-finger rotate.</para>
            <para></para>
            <para>In addition, BeginNativeGesture and EndNativeGesture are sent
            before and after gesture event streams:</para>
            <para>BeginNativeGesture ZoomNativeGesture ZoomNativeGesture
            ZoomNativeGesture EndNativeGesture</para>
            <para></para>
            <para>See also Qt::NativeGestureType and QGestureEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QNativeGestureEvent.#ctor(QtCore.Qt.NativeGestureType,QtCore.QPointF,QtCore.QPointF,QtCore.QPointF,System.Double,System.UInt32,System.UInt64)">
            <summary>
            <para>Constructs a native gesture event of type type.</para>
            <para>The points localPos, windowPos and screenPos specify the gesture
            position relative to the receiving widget or item, window, and screen,
            respectively.</para>
            <para>realValue is the OS X event parameter, sequenceId and intValue
            are the Windows event parameters.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.GestureType">
            <summary>
            <para>Returns the gesture type.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.Value">
            <summary>
            <para>Returns the gesture value. The value should be interpreted based
            on the gesture type. For example, a Zoom gesture provides a scale factor
            while a Rotate gesture provides a rotation delta.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also QNativeGestureEvent and gestureType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.Pos">
            <summary>
            <para>Returns the position of the mouse cursor, relative to the widget
            or item that received the event.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.GlobalPos">
            <summary>
            <para>Returns the position of the gesture as a QPointF in screen
            coordinates</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.LocalPos">
            <summary>
            <para>Returns the position of the gesture as a QPointF, relative to the
            widget or item that received the event.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.WindowPos">
            <summary>
            <para>Returns the position of the gesture as a QPointF, relative to the
            window that received the event.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QNativeGestureEvent.ScreenPos">
            <summary>
            <para>Returns the position of the gesture as a QPointF in screen
            coordinates.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtGui.QKeyEvent">
            <summary>
            <para>The QKeyEvent class describes a key event.</para>
            </summary>
            <remarks>
            <para>Key events are sent to the widget with keyboard input focus when
            keys are pressed or released.</para>
            <para>A key event contains a special accept flag that indicates whether
            the receiver will handle the key event. This flag is set by default, so
            there is no need to call accept() when acting on a key event. Calling
            ignore() on a key event will propagate it to the parent widget. The event
            is propagated up the parent widget chain until a widget accepts it or an
            event filter consumes it.</para>
            <para>The QWidget::setEnable() function can be used to enable or
            disable mouse and keyboard events for a widget.</para>
            <para>The event handlers QWidget::keyPressEvent(),
            QWidget::keyReleaseEvent(), QGraphicsItem::keyPressEvent() and
            QGraphicsItem::keyReleaseEvent() receive key events.</para>
            <para></para>
            <para>See also QFocusEvent and QWidget::grabKeyboard().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QKeyEvent.#ctor(QtCore.QEvent.Type,System.Int32,QtCore.Qt.KeyboardModifier,System.String,System.Boolean,System.UInt16)">
            <summary>
            <para>Constructs a key event object.</para>
            <para>The type parameter must be QEvent::KeyPress, QEvent::KeyRelease,
            or QEvent::ShortcutOverride.</para>
            <para>Int key is the code for the Qt::Key that the event loop should
            listen for. If key is 0, the event is not a result of a known key; for
            example, it may be the result of a compose sequence or keyboard macro. The
            modifiers holds the keyboard modifiers, and the given text is the Unicode
            text that the key generated. If autorep is true, isAutoRepeat() will be
            true. count is the number of keys involved in the event.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeyEvent.#ctor(QtCore.QEvent.Type,System.Int32,QtCore.Qt.KeyboardModifier,System.UInt32,System.UInt32,System.UInt32,System.String,System.Boolean,System.UInt16)">
            <summary>
            <para>Constructs a key event object.</para>
            <para>The type parameter must be QEvent::KeyPress, QEvent::KeyRelease,
            or QEvent::ShortcutOverride.</para>
            <para>Int key is the code for the Qt::Key that the event loop should
            listen for. If key is 0, the event is not a result of a known key; for
            example, it may be the result of a compose sequence or keyboard macro. The
            modifiers holds the keyboard modifiers, and the given text is the Unicode
            text that the key generated. If autorep is true, isAutoRepeat() will be
            true. count is the number of keys involved in the event.</para>
            <para>In addition to the normal key event data, also contains
            nativeScanCode, nativeVirtualKey and nativeModifiers. This extra data is
            used by the shortcut system, to determine which shortcuts to
            trigger.</para>
            </summary>
        </member>
        <member name="M:QtGui.QKeyEvent.Matches(QtGui.QKeySequence.StandardKey)">
            <summary>
            <para>Returns true if the key event matches the given standard key;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.Key">
            <summary>
            <para>Returns the code of the key that was pressed or released.</para>
            <para>See Qt::Key for the list of keyboard codes. These codes are
            independent of the underlying window system. Note that this function does
            not distinguish between capital and non-capital letters, use the text()
            function (returning the Unicode text the key generated) for this
            purpose.</para>
            <para>A value of either 0 or Qt::Key_unknown means that the event is
            not the result of a known key; for example, it may be the result of a
            compose sequence, a keyboard macro, or due to key event compression.</para>
            <para>See also Qt::WA_KeyCompression.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.Modifiers">
            <summary>
            <para>Returns the keyboard modifier flags that existed immediately
            after the event occurred.</para>
            <para>Warning: This function cannot always be trusted. The user can
            confuse it by pressing both Shift keys simultaneously and releasing one of
            them, for example.</para>
            <para>See also QGuiApplication::keyboardModifiers().</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.Text">
            <summary>
            <para>Returns the Unicode text that this key generated.</para>
            <para>Return values when modifier keys such as Shift, Control, Alt, and
            Meta are pressed differ among platforms and could return an empty
            string.</para>
            <para>Note: key() will always return a valid value, independent of
            modifier keys.</para>
            <para>See also Qt::WA_KeyCompression.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.IsAutoRepeat">
            <summary>
            <para>Returns true if this event comes from an auto-repeating key;
            returns false if it comes from an initial key press.</para>
            <para>Note that if the event is a multiple-key compressed event that is
            partly due to auto-repeat, this function could return either true or false
            indeterminately.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.Count">
            <summary>
            <para>Returns the number of keys involved in this event. If text() is
            not empty, this is simply the length of the string.</para>
            <para>See also Qt::WA_KeyCompression.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.NativeScanCode">
            <summary>
            <para>Returns the native scan code of the key event. If the key event
            does not contain this data 0 is returned.</para>
            <para>Note: The native scan code may be 0, even if the key event
            contains extended information.</para>
            <para>Note: On Mac OS/X, this function is not useful, because there is
            no way to get the scan code from Carbon or Cocoa. The function always
            returns 1 (or 0 in the case explained above).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.NativeVirtualKey">
            <summary>
            <para>Returns the native virtual key, or key sym of the key event. If
            the key event does not contain this data 0 is returned.</para>
            <para>Note: The native virtual key may be 0, even if the key event
            contains extended information.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QKeyEvent.NativeModifiers">
            <summary>
            <para>Returns the native modifiers of a key event. If the key event
            does not contain this data 0 is returned.</para>
            <para>Note: The native modifiers may be 0, even if the key event
            contains extended information.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtGui.QFocusEvent">
            <summary>
            <para>The QFocusEvent class contains event parameters for widget focus
            events.</para>
            </summary>
            <remarks>
            <para>Focus events are sent to widgets when the keyboard input focus
            changes. Focus events occur due to mouse actions, key presses (such as Tab
            or Backtab), the window system, popup menus, keyboard shortcuts, or other
            application-specific reasons. The reason for a particular focus event is
            returned by reason() in the appropriate event handler.</para>
            <para>The event handlers QWidget::focusInEvent(),
            QWidget::focusOutEvent(), QGraphicsItem::focusInEvent and
            QGraphicsItem::focusOutEvent() receive focus events.</para>
            <para></para>
            <para>See also QWidget::setFocus(), QWidget::setFocusPolicy(), and
            Keyboard Focus in Widgets.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFocusEvent.#ctor(QtCore.QEvent.Type,QtCore.Qt.FocusReason)">
            <summary>
            <para>Constructs a focus event object.</para>
            <para>The type parameter must be either QEvent::FocusIn or
            QEvent::FocusOut. The reason describes the cause of the change in
            focus.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFocusEvent.GotFocus">
            <summary>
            <para>Returns true if type() is QEvent::FocusIn; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFocusEvent.LostFocus">
            <summary>
            <para>Returns true if type() is QEvent::FocusOut; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFocusEvent.Reason">
            <summary>
            <para>Returns the reason for this focus event.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPaintEvent">
            <summary>
            <para>The QPaintEvent class contains event parameters for paint
            events.</para>
            </summary>
            <remarks>
            <para>Paint events are sent to widgets that need to update themselves,
            for instance when part of a widget is exposed because a covering widget was
            moved.</para>
            <para>The event contains a region() that needs to be updated, and a
            rect() that is the bounding rectangle of that region. Both are provided
            because many widgets cannot make much use of region(), and rect() can be
            much faster than region().boundingRect().</para>
            <para></para>
            <para>Automatic Clipping</para>
            <para>Painting is clipped to region() during the processing of a paint
            event. This clipping is performed by Qt's paint system and is independent
            of any clipping that may be applied to a QPainter used to draw on the paint
            device.</para>
            <para>As a result, the value returned by QPainter::clipRegion() on a
            newly-constructed QPainter will not reflect the clip region that is used by
            the paint system.</para>
            <para></para>
            <para>See also QPainter, QWidget::update(), QWidget::repaint(), and
            QWidget::paintEvent().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPaintEvent.#ctor(QtGui.QRegion)">
            <summary>
            <para>Constructs a paint event object with the region that needs to be
            updated. The region is specified by paintRegion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEvent.#ctor(QtCore.QRect)">
            <summary>
            <para>Constructs a paint event object with the rectangle that needs to
            be updated. The region is specified by paintRect.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEvent.Rect">
            <summary>
            <para>Returns the rectangle that needs to be updated.</para>
            <para>See also region() and QPainter::setClipRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEvent.Region">
            <summary>
            <para>Returns the region that needs to be updated.</para>
            <para>See also rect() and QPainter::setClipRegion().</para>
            </summary>
        </member>
        <member name="T:QtGui.QMoveEvent">
            <summary>
            <para>The QMoveEvent class contains event parameters for move
            events.</para>
            </summary>
            <remarks>
            <para>Move events are sent to widgets that have been moved to a new
            position relative to their parent.</para>
            <para>The event handler QWidget::moveEvent() receives move
            events.</para>
            <para></para>
            <para>See also QWidget::move() and QWidget::setGeometry().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QMoveEvent.#ctor(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Constructs a move event with the new and old widget positions,
            pos and oldPos respectively.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMoveEvent.Pos">
            <summary>
            <para>Returns the new position of the widget. This excludes the window
            frame for top level widgets.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMoveEvent.OldPos">
            <summary>
            <para>Returns the old position of the widget.</para>
            </summary>
        </member>
        <member name="T:QtGui.QExposeEvent">
            <summary>
            <para>The QExposeEvent class contains event parameters for expose
            events.</para>
            </summary>
            <remarks>
            <para>Expose events are sent to windows when an area of the window is
            invalidated or window visibility in the windowing system changes.</para>
            <para>The event handler QWindow::exposeEvent() receives expose
            events.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QExposeEvent.#ctor(QtGui.QRegion)">
            <summary>
            <para>Constructs an expose event for the given exposeRegion which must
            be in local coordinates.</para>
            </summary>
        </member>
        <member name="P:QtGui.QExposeEvent.Region">
            <summary>
            <para>Returns the window area that has been exposed. The region is
            given in local coordinates.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPlatformSurfaceEvent">
            <summary>
            <para>The QPlatformSurfaceEvent class is used to notify about native
            platform surface events.</para>
            </summary>
            <remarks>
            <para>Platform window events are synchronously sent to windows and
            offscreen surfaces when their underlying native surfaces are created or are
            about to be destroyed.</para>
            <para>Applications can respond to these events to know when the
            underlying platform surface exists.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPlatformSurfaceEvent.#ctor(QtGui.QPlatformSurfaceEvent.SurfaceEventType)">
            <summary>
            <para>Constructs a platform surface event for the given
            surfaceEventType.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPlatformSurfaceEvent.surfaceEventType">
            <summary>
            <para>Returns the specific type of platform surface event.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPlatformSurfaceEvent.SurfaceEventType">
            <summary>
            <para>This enum describes the type of platform surface event. The
            possible types are:</para>
            <para>The SurfaceAboutToBeDestroyed event type is useful as a means of
            stopping rendering to a platform window before it is destroyed.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPlatformSurfaceEvent.SurfaceEventType.SurfaceCreated">
            <summary>The underlying native surface has been created</summary>
        </member>
        <member name="F:QtGui.QPlatformSurfaceEvent.SurfaceEventType.SurfaceAboutToBeDestroyed">
            <summary>The underlying native surface will be destroyed immediately after this event</summary>
        </member>
        <member name="T:QtGui.QResizeEvent">
            <summary>
            <para>The QResizeEvent class contains event parameters for resize
            events.</para>
            </summary>
            <remarks>
            <para>Resize events are sent to widgets that have been resized.</para>
            <para>The event handler QWidget::resizeEvent() receives resize
            events.</para>
            <para></para>
            <para>See also QWidget::resize() and QWidget::setGeometry().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QResizeEvent.#ctor(QtCore.QSize,QtCore.QSize)">
            <summary>
            <para>Constructs a resize event with the new and old widget sizes, size
            and oldSize respectively.</para>
            </summary>
        </member>
        <member name="P:QtGui.QResizeEvent.Size">
            <summary>
            <para>Returns the new size of the widget. This is the same as
            QWidget::size().</para>
            </summary>
        </member>
        <member name="P:QtGui.QResizeEvent.OldSize">
            <summary>
            <para>Returns the old size of the widget.</para>
            </summary>
        </member>
        <member name="T:QtGui.QCloseEvent">
            <summary>
            <para>The QCloseEvent class contains parameters that describe a close
            event.</para>
            </summary>
            <remarks>
            <para>Close events are sent to widgets that the user wants to close,
            usually by choosing &quot;Close&quot; from the window menu, or by clicking
            the X title bar button. They are also sent when you call QWidget::close()
            to close a widget programmatically.</para>
            <para>Close events contain a flag that indicates whether the receiver
            wants the widget to be closed or not. When a widget accepts the close
            event, it is hidden (and destroyed if it was created with the
            Qt::WA_DeleteOnClose flag). If it refuses to accept the close event nothing
            happens. (Under X11 it is possible that the window manager will forcibly
            close the window; but at the time of writing we are not aware of any window
            manager that does this.)</para>
            <para>The event handler QWidget::closeEvent() receives close events.
            The default implementation of this event handler accepts the close event.
            If you do not want your widget to be hidden, or want some special handing,
            you should reimplement the event handler and ignore() the event.</para>
            <para>The closeEvent() in the Application example shows a close event
            handler that asks whether to save a document before closing.</para>
            <para>If you want the widget to be deleted when it is closed, create it
            with the Qt::WA_DeleteOnClose flag. This is very useful for independent
            top-level windows in a multi-window application.</para>
            <para>QObjects emits the destroyed() signal when they are
            deleted.</para>
            <para>If the last top-level window is closed, the
            QGuiApplication::lastWindowClosed() signal is emitted.</para>
            <para>The isAccepted() function returns true if the event's receiver
            has agreed to close the widget; call accept() to agree to close the widget
            and call ignore() if the receiver of this event does not want the widget to
            be closed.</para>
            <para></para>
            <para>See also QWidget::close(), QWidget::hide(), QObject::destroyed(),
            QCoreApplication::exec(), QCoreApplication::quit(), and
            QGuiApplication::lastWindowClosed().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QCloseEvent.#ctor">
            <summary>
            <para>Constructs a close event object.</para>
            <para>See also accept().</para>
            </summary>
        </member>
        <member name="T:QtGui.QIconDragEvent">
            <summary>
            <para>The QIconDragEvent class indicates that a main icon drag has
            begun.</para>
            </summary>
            <remarks>
            <para>Icon drag events are sent to widgets when the main icon of a
            window has been dragged away. On Mac OS X, this happens when the proxy icon
            of a window is dragged off the title bar.</para>
            <para>It is normal to begin using drag and drop in response to this
            event.</para>
            <para></para>
            <para>See also Drag and Drop, QMimeData, and QDrag.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QIconDragEvent.#ctor">
            <summary>
            <para>Constructs an icon drag event object with the accept flag set to
            false.</para>
            <para>See also accept().</para>
            </summary>
        </member>
        <member name="T:QtGui.QShowEvent">
            <summary>
            <para>The QShowEvent class provides an event that is sent when a widget
            is shown.</para>
            </summary>
            <remarks>
            <para>There are two kinds of show events: show events caused by the
            window system (spontaneous), and internal show events. Spontaneous
            (QEvent::spontaneous()) show events are sent just after the window system
            shows the window; they are also sent when a top-level window is redisplayed
            after being iconified. Internal show events are delivered just before the
            widget becomes visible.</para>
            <para></para>
            <para>See also QHideEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QShowEvent.#ctor">
            <summary>
            <para>Constructs a QShowEvent.</para>
            </summary>
        </member>
        <member name="T:QtGui.QHideEvent">
            <summary>
            <para>The QHideEvent class provides an event which is sent after a
            widget is hidden.</para>
            </summary>
            <remarks>
            <para>This event is sent just before QWidget::hide() returns, and also
            when a top-level window has been hidden (iconified) by the user.</para>
            <para>If spontaneous() is true, the event originated outside the
            application. In this case, the user hid the window using the window manager
            controls, either by iconifying the window or by switching to another
            virtual desktop where the window is not visible. The window will become
            hidden but not withdrawn. If the window was iconified,
            QWidget::isMinimized() returns true.</para>
            <para></para>
            <para>See also QShowEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QHideEvent.#ctor">
            <summary>
            <para>Constructs a QHideEvent.</para>
            </summary>
        </member>
        <member name="T:QtGui.QContextMenuEvent">
            <summary>
            <para>The QContextMenuEvent class contains parameters that describe a
            context menu event.</para>
            </summary>
            <remarks>
            <para>Context menu events are sent to widgets when a user performs an
            action associated with opening a context menu. The actions required to open
            context menus vary between platforms; for example, on Windows, pressing the
            menu button or clicking the right mouse button will cause this event to be
            sent.</para>
            <para>When this event occurs it is customary to show a QMenu with a
            context menu, if this is relevant to the context.</para>
            <para>Context menu events contain a special accept flag that indicates
            whether the receiver accepted the event. If the event handler does not
            accept the event then, if possible, whatever triggered the event will be
            handled as a regular input event.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QContextMenuEvent.#ctor(QtGui.QContextMenuEvent.Reason,QtCore.QPoint,QtCore.QPoint,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a context menu event object with the accept parameter
            flag set to false.</para>
            <para>The reason parameter must be QContextMenuEvent::Mouse or
            QContextMenuEvent::Keyboard.</para>
            <para>The pos parameter specifies the mouse position relative to the
            receiving widget. globalPos is the mouse position in absolute coordinates.
            The modifiers holds the keyboard modifiers.</para>
            </summary>
        </member>
        <member name="M:QtGui.QContextMenuEvent.#ctor(QtGui.QContextMenuEvent.Reason,QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Constructs a context menu event object with the accept parameter
            flag set to false.</para>
            <para>The reason parameter must be QContextMenuEvent::Mouse or
            QContextMenuEvent::Keyboard.</para>
            <para>The pos parameter specifies the mouse position relative to the
            receiving widget. globalPos is the mouse position in absolute
            coordinates.</para>
            </summary>
        </member>
        <member name="M:QtGui.QContextMenuEvent.#ctor(QtGui.QContextMenuEvent.Reason,QtCore.QPoint)">
            <summary>
            <para>Constructs a context menu event object with the accept parameter
            flag set to false.</para>
            <para>The reason parameter must be QContextMenuEvent::Mouse or
            QContextMenuEvent::Keyboard.</para>
            <para>The pos parameter specifies the mouse position relative to the
            receiving widget.</para>
            <para>The globalPos() is initialized to QCursor::pos(), which may not
            be appropriate. Use the other constructor to specify the global position
            explicitly.</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.X">
            <summary>
            <para>Returns the x position of the mouse pointer, relative to the
            widget that received the event.</para>
            <para>See also y() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.Y">
            <summary>
            <para>Returns the y position of the mouse pointer, relative to the
            widget that received the event.</para>
            <para>See also x() and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.GlobalX">
            <summary>
            <para>Returns the global x position of the mouse pointer at the time of
            the event.</para>
            <para>See also globalY() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.GlobalY">
            <summary>
            <para>Returns the global y position of the mouse pointer at the time of
            the event.</para>
            <para>See also globalX() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.Pos">
            <summary>
            <para>Returns the position of the mouse pointer relative to the widget
            that received the event.</para>
            <para>See also x(), y(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.GlobalPos">
            <summary>
            <para>Returns the global position of the mouse pointer at the time of
            the event.</para>
            <para>See also x(), y(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QContextMenuEvent.reason">
            <summary>
            <para>Returns the reason for this context event.</para>
            </summary>
        </member>
        <member name="T:QtGui.QContextMenuEvent.Reason">
            <summary>
            <para>This enum describes the reason why the event was sent.</para>
            </summary>
        </member>
        <member name="F:QtGui.QContextMenuEvent.Reason.Mouse">
            <summary>The mouse caused the event to be sent. Normally this means the right mouse button was clicked, but this is platform dependent.</summary>
        </member>
        <member name="F:QtGui.QContextMenuEvent.Reason.Keyboard">
            <summary>The keyboard caused this event to be sent. On Windows, this means the menu button was pressed.</summary>
        </member>
        <member name="F:QtGui.QContextMenuEvent.Reason.Other">
            <summary>The event was sent by some other means (i.e. not by the mouse or keyboard).</summary>
        </member>
        <member name="T:QtGui.QInputMethodEvent">
            <summary>
            <para>The QInputMethodEvent class provides parameters for input method
            events.</para>
            </summary>
            <remarks>
            <para>Input method events are sent to widgets when an input method is
            used to enter text into a widget. Input methods are widely used to enter
            text for languages with non-Latin alphabets.</para>
            <para>Note that when creating custom text editing widgets, the
            Qt::WA_InputMethodEnabled window attribute must be set explicitly (using
            the QWidget::setAttribute() function) in order to receive input method
            events.</para>
            <para>The events are of interest to authors of keyboard entry widgets
            who want to be able to correctly handle languages with complex character
            input. Text input in such languages is usually a three step process:</para>
            <para></para>
            <para>Starting to ComposeWhen the user presses the first key on a
            keyboard, an input context is created. This input context will contain a
            string of the typed characters.</para>
            <para></para>
            <para>ComposingWith every new key pressed, the input method will try to
            create a matching string for the text typed so far called preedit string.
            While the input context is active, the user can only move the cursor inside
            the string belonging to this input context.</para>
            <para></para>
            <para>CompletingAt some point, the user will activate a user interface
            component (perhaps using a particular key) where they can choose from a
            number of strings matching the text they have typed so far. The user can
            either confirm their choice cancel the input; in either case the input
            context will be closed.</para>
            <para></para>
            <para></para>
            <para>QInputMethodEvent models these three stages, and transfers the
            information needed to correctly render the intermediate result. A
            QInputMethodEvent has two main parameters: preeditString() and
            commitString(). The preeditString() parameter gives the currently active
            preedit string. The commitString() parameter gives a text that should get
            added to (or replace parts of) the text of the editor widget. It usually is
            a result of the input operations and has to be inserted to the widgets text
            directly before the preedit string.</para>
            <para>If the commitString() should replace parts of the of the text in
            the editor, replacementLength() will contain the number of characters to be
            replaced. replacementStart() contains the position at which characters are
            to be replaced relative from the start of the preedit string.</para>
            <para>A number of attributes control the visual appearance of the
            preedit string (the visual appearance of text outside the preedit string is
            controlled by the widget only). The AttributeType enum describes the
            different attributes that can be set.</para>
            <para>A class implementing QWidget::inputMethodEvent() or
            QGraphicsItem::inputMethodEvent() should at least understand and honor the
            TextFormat and Cursor attributes.</para>
            <para>Since input methods need to be able to query certain properties
            from the widget or graphics item, subclasses must also implement
            QWidget::inputMethodQuery() and QGraphicsItem::inputMethodQuery(),
            respectively.</para>
            <para>When receiving an input method event, the text widget has to
            performs the following steps:</para>
            <para></para>
            <para>If the widget has selected text, the selected text should get
            removed.</para>
            <para>Remove the text starting at replacementStart() with length
            replacementLength() and replace it by the commitString(). If
            replacementLength() is 0, replacementStart() gives the insertion position
            for the commitString().When doing replacement the area of the preedit
            string is ignored, thus a replacement starting at -1 with a length of 2
            will remove the last character before the preedit string and the first
            character afterwards, and insert the commit string directly before the
            preedit string.</para>
            <para>If the widget implements undo/redo, this operation gets added to
            the undo stack.</para>
            <para></para>
            <para>If there is no current preedit string, insert the preeditString()
            at the current cursor position; otherwise replace the previous
            preeditString with the one received from this event.If the widget
            implements undo/redo, the preeditString() should not influence the
            undo/redo stack in any way.</para>
            <para>The widget should examine the list of attributes to apply to the
            preedit string. It has to understand at least the TextFormat and Cursor
            attributes and render them as specified.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QInputMethod.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QInputMethodEvent.#ctor">
            <summary>
            <para>Constructs an event of type QEvent::InputMethod. The
            attributes(), preeditString(), commitString(), replacementStart(), and
            replacementLength() are initialized to default values.</para>
            <para>See also setCommitString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodEvent.#ctor(QtGui.QInputMethodEvent)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodEvent.SetCommitString(System.String,System.Int32,System.Int32)">
            <summary>
            <para>Sets the commit string to commitString.</para>
            <para>The commit string is the text that should get added to (or
            replace parts of) the text of the editor widget. It usually is a result of
            the input operations and has to be inserted to the widgets text directly
            before the preedit string.</para>
            <para>If the commit string should replace parts of the of the text in
            the editor, replaceLength specifies the number of characters to be
            replaced. replaceFrom specifies the position at which characters are to be
            replaced relative from the start of the preedit string.</para>
            <para>See also commitString(), replacementStart(), and
            replacementLength().</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodEvent.PreeditString">
            <summary>
            <para>Returns the preedit text, i.e. the text before the user started
            editing it.</para>
            <para>See also commitString() and attributes().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethodEvent.CommitString">
            <summary>
            <para>Returns the text that should get added to (or replace parts of)
            the text of the editor widget. It usually is a result of the input
            operations and has to be inserted to the widgets text directly before the
            preedit string.</para>
            <para>See also setCommitString(), preeditString(), replacementStart(),
            and replacementLength().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethodEvent.ReplacementStart">
            <summary>
            <para>Returns the position at which characters are to be replaced
            relative from the start of the preedit string.</para>
            <para>See also replacementLength() and setCommitString().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethodEvent.ReplacementLength">
            <summary>
            <para>Returns the number of characters to be replaced in the preedit
            string.</para>
            <para>See also replacementStart() and setCommitString().</para>
            </summary>
        </member>
        <member name="T:QtGui.QInputMethodEvent.AttributeType">
            <summary>
            <para>See also Attribute.</para>
            </summary>
        </member>
        <member name="F:QtGui.QInputMethodEvent.AttributeType.TextFormat">
            <summary>A QTextCharFormat for the part of the preedit string specified by start and length. value contains a QVariant of type QTextFormat specifying rendering of this part of the preedit string. There should be at most one format for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined. A conforming implementation has to at least honor the backgroundColor, textColor and fontUnderline properties of the format.</summary>
        </member>
        <member name="F:QtGui.QInputMethodEvent.AttributeType.Cursor">
            <summary>If set, a cursor should be shown inside the preedit string at position start. The length variable determines whether the cursor is visible or not. If the length is 0 the cursor is invisible. If value is a QVariant of type QColor this color will be used for rendering the cursor, otherwise the color of the surrounding text will be used. There should be at most one Cursor attribute per event. If several are specified the behaviour is undefined.</summary>
        </member>
        <member name="F:QtGui.QInputMethodEvent.AttributeType.Language">
            <summary>The variant contains a QLocale object specifying the language of a certain part of the preedit string. There should be at most one language set for every part of the preedit string. If several are specified for any character in the string the behavior is undefined.</summary>
        </member>
        <member name="F:QtGui.QInputMethodEvent.AttributeType.Ruby">
            <summary>The ruby text for a part of the preedit string. There should be at most one ruby text set for every part of the preedit string. If several are specified for any character in the string the behaviour is undefined.</summary>
        </member>
        <member name="F:QtGui.QInputMethodEvent.AttributeType.Selection">
            <summary>If set, the edit cursor should be moved to the specified position in the editor text contents. In contrast with Cursor, this attribute does not work on the preedit text, but on the surrounding text. The cursor will be moved after the commit string has been committed, and the preedit string will be located at the new edit position. The start position specifies the new position and the length variable can be used to set a selection starting from that point. The value is unused.</summary>
        </member>
        <member name="T:QtGui.QInputMethodEvent.Attribute">
            <summary>
            <para>The QInputMethodEvent::Attribute class stores an input method
            attribute.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodEvent.Attribute.#ctor(QtGui.QInputMethodEvent.AttributeType,System.Int32,System.Int32,QtCore.QVariant)">
            <summary>
            <para>Constructs an input method attribute. type specifies the type of
            attribute, start and length the position of the attribute, and value the
            value of the attribute.</para>
            </summary>
        </member>
        <member name="T:QtGui.QInputMethodQueryEvent">
            <summary>
            <para>The QInputMethodQueryEvent class provides an event sent by the
            input context to input objects.</para>
            </summary>
            <remarks>
            <para>It is used by the input method to query a set of properties of
            the object to be able to support complex input method operations as support
            for surrounding text and reconversions.</para>
            <para>queries() specifies which properties are queried.</para>
            <para>The object should call setValue() on the event to fill in the
            requested data before calling accept().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QInputMethodQueryEvent.#ctor(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Constructs a query event for properties given by queries.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodQueryEvent.SetValue(QtCore.Qt.InputMethodQuery,QtCore.QVariant)">
            <summary>
            <para>Sets property query to value.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethodQueryEvent.Value(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Returns value of the property query.</para>
            <para>See also setValue().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethodQueryEvent.Queries">
            <summary>
            <para>Returns the properties queried by the event.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDropEvent">
            <summary>
            <para>The QDropEvent class provides an event which is sent when a drag
            and drop action is completed.</para>
            </summary>
            <remarks>
            <para>When a widget accepts drop events, it will receive this event if
            it has accepted the most recent QDragEnterEvent or QDragMoveEvent sent to
            it.</para>
            <para>The drop event contains a proposed action, available from
            proposedAction(), for the widget to either accept or ignore. If the action
            can be handled by the widget, you should call the acceptProposedAction()
            function. Since the proposed action can be a combination of Qt::DropAction
            values, it may be useful to either select one of these values as a default
            action or ask the user to select their preferred action.</para>
            <para>If the proposed drop action is not suitable, perhaps because your
            custom widget does not support that action, you can replace it with any of
            the possible drop actions by calling setDropAction() with your preferred
            action. If you set a value that is not present in the bitwise OR
            combination of values returned by possibleActions(), the default copy
            action will be used. Once a replacement drop action has been set, call
            accept() instead of acceptProposedAction() to complete the drop
            operation.</para>
            <para>The mimeData() function provides the data dropped on the widget
            in a QMimeData object. This contains information about the MIME type of the
            data in addition to the data itself.</para>
            <para></para>
            <para>See also QMimeData, QDrag, and Drag and Drop.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDropEvent.#ctor(QtCore.QPointF,QtCore.Qt.DropAction,QtCore.QMimeData,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.QEvent.Type)">
            <summary>
            <para>Constructs a drop event of a certain type corresponding to a drop
            at the point specified by pos in the destination widget's coordinate
            system.</para>
            <para>The actions indicate which types of drag and drop operation can
            be performed, and the drag data is stored as MIME-encoded data in
            data.</para>
            <para>The states of the mouse buttons and keyboard modifiers at the
            time of the drop are specified by buttons and modifiers.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDropEvent.AcceptProposedAction">
            <summary>
            <para>Sets the drop action to be the proposed action.</para>
            <para>See also setDropAction(), proposedAction(), and accept().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.DropAction">
            <summary>
            <para>Returns the action to be performed on the data by the target.
            This may be different from the action supplied in proposedAction() if you
            have called setDropAction() to explicitly choose a drop action.</para>
            <para>See also setDropAction().</para>
            <para></para>
            <para>Sets the action to be performed on the data by the target. Use
            this to override the proposed action with one of the possible
            actions.</para>
            <para>If you set a drop action that is not one of the possible actions,
            the drag and drop operation will default to a copy operation.</para>
            <para>Once you have supplied a replacement drop action, call accept()
            instead of acceptProposedAction().</para>
            <para>See also dropAction().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.Pos">
            <summary>
            <para>Returns the position where the drop was made.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.PosF">
            <summary>
            <para>Returns the position where the drop was made.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.MouseButtons">
            <summary>
            <para>Returns the mouse buttons that are pressed..</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.KeyboardModifiers">
            <summary>
            <para>Returns the modifier keys that are pressed.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.PossibleActions">
            <summary>
            <para>Returns an OR-combination of possible drop actions.</para>
            <para>See also dropAction().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.ProposedAction">
            <summary>
            <para>Returns the proposed drop action.</para>
            <para>See also dropAction().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.Source">
            <summary>
            <para>If the source of the drag operation is a widget in this
            application, this function returns that source; otherwise it returns 0. The
            source of the operation is the first parameter to the QDrag object used
            instantiate the drag.</para>
            <para>This is useful if your widget needs special behavior when
            dragging to itself.</para>
            <para>See also QDrag::QDrag().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDropEvent.MimeData">
            <summary>
            <para>Returns the data that was dropped on the widget and its
            associated MIME type information.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDragMoveEvent">
            <summary>
            <para>The QDragMoveEvent class provides an event which is sent while a
            drag and drop action is in progress.</para>
            </summary>
            <remarks>
            <para>A widget will receive drag move events repeatedly while the drag
            is within its boundaries, if it accepts drop events and enter events. The
            widget should examine the event to see what kind of data it provides, and
            call the accept() function to accept the drop if appropriate.</para>
            <para>The rectangle supplied by the answerRect() function can be used
            to restrict drops to certain parts of the widget. For example, we can check
            whether the rectangle intersects with the geometry of a certain child
            widget and only call acceptProposedAction() if that is the case.</para>
            <para>Note that this class inherits most of its functionality from
            QDropEvent.</para>
            <para></para>
            <para>See also QDragEnterEvent, QDragLeaveEvent, and QDropEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDragMoveEvent.#ctor(QtCore.QPoint,QtCore.Qt.DropAction,QtCore.QMimeData,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier,QtCore.QEvent.Type)">
            <summary>
            <para>Creates a QDragMoveEvent of the required type indicating that the
            mouse is at position pos given within a widget.</para>
            <para>The mouse and keyboard states are specified by buttons and
            modifiers, and the actions describe the types of drag and drop operation
            that are possible. The drag data is passed as MIME-encoded information in
            data.</para>
            <para>Warning: Do not attempt to create a QDragMoveEvent yourself.
            These objects rely on Qt's internal state.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDragMoveEvent.Accept">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Calls QDropEvent::accept().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDragMoveEvent.Ignore">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Calls QDropEvent::ignore().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDragMoveEvent.Accept(QtCore.QRect)">
            <summary>
            <para>The same as accept(), but also notifies that future moves will
            also be acceptable if they remain within the rectangle given on the widget.
            This can improve performance, but may also be ignored by the underlying
            system.</para>
            <para>If the rectangle is empty, drag move events will be sent
            continuously. This is useful if the source is scrolling in a timer
            event.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDragMoveEvent.Ignore(QtCore.QRect)">
            <summary>
            <para>The opposite of the accept(const QRect&amp;) function. Moves
            within the rectangle are not acceptable, and will be ignored.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDragMoveEvent.AnswerRect">
            <summary>
            <para>Returns the rectangle in the widget where the drop will occur if
            accepted. You can use this information to restrict drops to certain places
            on the widget.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDragEnterEvent">
            <summary>
            <para>The QDragEnterEvent class provides an event which is sent to a
            widget when a drag and drop action enters it.</para>
            </summary>
            <remarks>
            <para>A widget must accept this event in order to receive the drag move
            events that are sent while the drag and drop action is in progress. The
            drag enter event is always immediately followed by a drag move
            event.</para>
            <para>QDragEnterEvent inherits most of its functionality from
            QDragMoveEvent, which in turn inherits most of its functionality from
            QDropEvent.</para>
            <para></para>
            <para>See also QDragLeaveEvent, QDragMoveEvent, and QDropEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDragEnterEvent.#ctor(QtCore.QPoint,QtCore.Qt.DropAction,QtCore.QMimeData,QtCore.Qt.MouseButton,QtCore.Qt.KeyboardModifier)">
            <summary>
            <para>Constructs a QDragEnterEvent that represents a drag entering a
            widget at the given point with mouse and keyboard states specified by
            buttons and modifiers.</para>
            <para>The drag data is passed as MIME-encoded information in data, and
            the specified actions describe the possible types of drag and drop
            operation that can be performed.</para>
            <para>Warning: Do not create a QDragEnterEvent yourself since these
            objects rely on Qt's internal state.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDragLeaveEvent">
            <summary>
            <para>The QDragLeaveEvent class provides an event that is sent to a
            widget when a drag and drop action leaves it.</para>
            </summary>
            <remarks>
            <para>This event is always preceded by a QDragEnterEvent and a series
            of QDragMoveEvents. It is not sent if a QDropEvent is sent instead.</para>
            <para></para>
            <para>See also QDragEnterEvent, QDragMoveEvent, and QDropEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDragLeaveEvent.#ctor">
            <summary>
            <para>Constructs a QDragLeaveEvent.</para>
            <para>Warning: Do not create a QDragLeaveEvent yourself since these
            objects rely on Qt's internal state.</para>
            </summary>
        </member>
        <member name="T:QtGui.QHelpEvent">
            <summary>
            <para>The QHelpEvent class provides an event that is used to request
            helpful information about a particular point in a widget.</para>
            </summary>
            <remarks>
            <para>This event can be intercepted in applications to provide tooltips
            or &quot;What's This?&quot; help for custom widgets. The type() can be
            either QEvent::ToolTip or QEvent::WhatsThis.</para>
            <para></para>
            <para>See also QToolTip, QWhatsThis, QStatusTipEvent, and
            QWhatsThisClickedEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QHelpEvent.#ctor(QtCore.QEvent.Type,QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>Constructs a help event with the given type corresponding to the
            widget-relative position specified by pos and the global position specified
            by globalPos.</para>
            <para>type must be either QEvent::ToolTip or QEvent::WhatsThis.</para>
            <para>See also pos() and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.X">
            <summary>
            <para>Same as pos().x().</para>
            <para>See also y(), pos(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.Y">
            <summary>
            <para>Same as pos().y().</para>
            <para>See also x(), pos(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.GlobalX">
            <summary>
            <para>Same as globalPos().x().</para>
            <para>See also x(), globalY(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.GlobalY">
            <summary>
            <para>Same as globalPos().y().</para>
            <para>See also y(), globalX(), and globalPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.Pos">
            <summary>
            <para>Returns the mouse cursor position when the event was generated,
            relative to the widget to which the event is dispatched.</para>
            <para>See also globalPos(), x(), and y().</para>
            </summary>
        </member>
        <member name="P:QtGui.QHelpEvent.GlobalPos">
            <summary>
            <para>Returns the mouse cursor position when the event was generated in
            global coordinates.</para>
            <para>See also pos(), globalX(), and globalY().</para>
            </summary>
        </member>
        <member name="T:QtGui.QStatusTipEvent">
            <summary>
            <para>The QStatusTipEvent class provides an event that is used to show
            messages in a status bar.</para>
            </summary>
            <remarks>
            <para>Status tips can be set on a widget using the
            QWidget::setStatusTip() function. They are shown in the status bar when the
            mouse cursor enters the widget. For example:</para>
            <para></para>
            <para> MainWindow::MainWindow(QWidget *parent)</para>
            <para>    : QMainWindow(parent)</para>
            <para>{</para>
            <para>    QWidget *myWidget = new QWidget;</para>
            <para>    myWidget-&gt;setStatusTip(tr(&quot;This is my
            widget.&quot;));</para>
            <para></para>
            <para>    setCentralWidget(myWidget);</para>
            <para>    ...</para>
            <para>}</para>
            <para>	</para>
            <para></para>
            <para>Status tips can also be set on actions using the
            QAction::setStatusTip() function:</para>
            <para></para>
            <para> MainWindow::MainWindow(QWidget *parent)</para>
            <para>    : QMainWindow(parent)</para>
            <para>{</para>
            <para>    QMenu *fileMenu =
            menuBar()-&gt;addMenu(tr(&quot;File&quot;));</para>
            <para></para>
            <para>    QAction *newAct = new QAction(tr(&quot;&amp;New&quot;),
            this);</para>
            <para>    newAct-&gt;setStatusTip(tr(&quot;Create a new
            file.&quot;));</para>
            <para>    fileMenu-&gt;addAction(newAct);</para>
            <para>    ...</para>
            <para>}</para>
            <para>	</para>
            <para></para>
            <para>Finally, status tips are supported for the item view classes
            through the Qt::StatusTipRole enum value.</para>
            <para></para>
            <para>See also QStatusBar, QHelpEvent, and
            QWhatsThisClickedEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QStatusTipEvent.#ctor(System.String)">
            <summary>
            <para>Constructs a status tip event with the text specified by
            tip.</para>
            <para>See also tip().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStatusTipEvent.Tip">
            <summary>
            <para>Returns the message to show in the status bar.</para>
            <para>See also QStatusBar::showMessage().</para>
            </summary>
        </member>
        <member name="T:QtGui.QWhatsThisClickedEvent">
            <summary>
            <para>The QWhatsThisClickedEvent class provides an event that can be
            used to handle hyperlinks in a &quot;What's This?&quot; text.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also QWhatsThis, QHelpEvent, and QStatusTipEvent.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QWhatsThisClickedEvent.#ctor(System.String)">
            <summary>
            <para>Constructs an event containing a URL specified by href when a
            link is clicked in a &quot;What's This?&quot; message.</para>
            <para>See also href().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWhatsThisClickedEvent.Href">
            <summary>
            <para>Returns the URL that was clicked by the user in the &quot;What's
            This?&quot; text.</para>
            </summary>
        </member>
        <member name="T:QtGui.QActionEvent">
            <summary>
            <para>The QActionEvent class provides an event that is generated when a
            QAction is added, removed, or changed.</para>
            </summary>
            <remarks>
            <para>Actions can be added to widgets using QWidget::addAction(). This
            generates an ActionAdded event, which you can handle to provide custom
            behavior. For example, QToolBar reimplements QWidget::actionEvent() to
            create QToolButtons for the actions.</para>
            <para></para>
            <para>See also QAction, QWidget::addAction(), QWidget::removeAction(),
            and QWidget::actions().</para>
            </remarks>
        </member>
        <member name="T:QtGui.QFileOpenEvent">
            <summary>
            <para>The QFileOpenEvent class provides an event that will be sent when
            there is a request to open a file or a URL.</para>
            </summary>
            <remarks>
            <para>File open events will be sent to the QApplication::instance()
            when the operating system requests that a file or URL should be opened.
            This is a high-level event that can be caused by different user actions
            depending on the user's desktop environment; for example, double clicking
            on an file icon in the Finder on Mac OS X.</para>
            <para>This event is only used to notify the application of a request.
            It may be safely ignored.</para>
            <para>Note: This class is currently supported for Mac OS X only.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFileOpenEvent.OpenFile(QtCore.QFile,QtCore.QIODevice.OpenModeFlag)">
            <summary>
            <para>Opens a QFile on the file referenced by this event in the mode
            specified by flags. Returns true if successful; otherwise returns
            false.</para>
            <para>This is necessary as some files cannot be opened by name, but
            require specific information stored in this event.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFileOpenEvent.File">
            <summary>
            <para>Returns the file that is being opened.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFileOpenEvent.Url">
            <summary>
            <para>Returns the url that is being opened.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtGui.QShortcutEvent">
            <summary>
            <para>The QShortcutEvent class provides an event which is generated
            when the user presses a key combination.</para>
            </summary>
            <remarks>
            <para>Normally you do not need to use this class directly; QShortcut
            provides a higher-level interface to handle shortcut keys.</para>
            <para></para>
            <para>See also QShortcut.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QShortcutEvent.#ctor(QtGui.QKeySequence,System.Int32,System.Boolean)">
            <summary>
            <para>Constructs a shortcut event for the given key press, associated
            with the QShortcut ID id.</para>
            <para>ambiguous specifies whether there is more than one QShortcut for
            the same key sequence.</para>
            </summary>
        </member>
        <member name="P:QtGui.QShortcutEvent.Key">
            <summary>
            <para>Returns the key sequence that triggered the event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QShortcutEvent.ShortcutId">
            <summary>
            <para>Returns the ID of the QShortcut object for which this event was
            generated.</para>
            <para>See also QShortcut::id().</para>
            </summary>
        </member>
        <member name="P:QtGui.QShortcutEvent.IsAmbiguous">
            <summary>
            <para>Returns true if the key sequence that triggered the event is
            ambiguous.</para>
            <para>See also QShortcut::activatedAmbiguously().</para>
            </summary>
        </member>
        <member name="T:QtGui.QWindowStateChangeEvent">
            <summary>
            <para>The QWindowStateChangeEvent class provides the window state
            before a window state change.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindowStateChangeEvent.OldState">
            <summary>
            <para>Returns the state of the window before the change.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTouchEvent">
            <summary>
            <para>The QTouchEvent class contains parameters that describe a touch
            event.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Enabling Touch Events</para>
            <para>Touch events occur when pressing, releasing, or moving one or
            more touch points on a touch device (such as a touch-screen or track-pad).
            To receive touch events, widgets have to have the Qt::WA_AcceptTouchEvents
            attribute set and graphics items need to have the acceptTouchEvents
            attribute set to true.</para>
            <para>When using QAbstractScrollArea based widgets, you should enable
            the Qt::WA_AcceptTouchEvents attribute on the scroll area's
            viewport.</para>
            <para>Similarly to QMouseEvent, Qt automatically grabs each touch point
            on the first press inside a widget, and the widget will receive all updates
            for the touch point until it is released. Note that it is possible for a
            widget to receive events for numerous touch points, and that multiple
            widgets may be receiving touch events at the same time.</para>
            <para></para>
            <para>Event Handling</para>
            <para>All touch events are of type QEvent::TouchBegin,
            QEvent::TouchUpdate, QEvent::TouchEnd or QEvent::TouchCancel. Reimplement
            QWidget::event() or QAbstractScrollArea::viewportEvent() for widgets and
            QGraphicsItem::sceneEvent() for items in a graphics view to receive touch
            events.</para>
            <para>Unlike widgets, QWindows receive touch events always, there is no
            need to opt in. When working directly with a QWindow, it is enough to
            reimplement QWindow::touchEvent().</para>
            <para>The QEvent::TouchUpdate and QEvent::TouchEnd events are sent to
            the widget or item that accepted the QEvent::TouchBegin event. If the
            QEvent::TouchBegin event is not accepted and not filtered by an event
            filter, then no further touch events are sent until the next
            QEvent::TouchBegin.</para>
            <para>Some systems may send an event of type QEvent::TouchCancel. Upon
            receiving this event applications are requested to ignore the entire active
            touch sequence. For example in a composited system the compositor may
            decide to treat certain gestures as system-wide gestures. Whenever such a
            decision is made (the gesture is recognized), the clients will be notified
            with a QEvent::TouchCancel event so they can update their state
            accordingly.</para>
            <para>The touchPoints() function returns a list of all touch points
            contained in the event. Note that this list may be empty, for example in
            case of a QEvent::TouchCancel event. Information about each touch point can
            be retrieved using the QTouchEvent::TouchPoint class. The
            Qt::TouchPointState enum describes the different states that a touch point
            may have.</para>
            <para>Note: The list of touchPoints() will never be partial: A touch
            event will always contain a touch point for each existing physical touch
            contacts targetting the window or widget to which the event is sent. For
            instance, assuming that all touches target the same window or widget, an
            event with a condition of touchPoints().count()==2 is guaranteed to imply
            that the number of fingers touching the touchscreen or touchpad is exactly
            two.</para>
            <para></para>
            <para>Event Delivery and Propagation</para>
            <para>By default, QGuiApplication translates the first touch point in a
            QTouchEvent into a QMouseEvent. This makes it possible to enable touch
            events on existing widgets that do not normally handle QTouchEvent. See
            below for information on some special considerations needed when doing
            this.</para>
            <para>QEvent::TouchBegin is the first touch event sent to a widget. The
            QEvent::TouchBegin event contains a special accept flag that indicates
            whether the receiver wants the event. By default, the event is accepted.
            You should call ignore() if the touch event is not handled by your widget.
            The QEvent::TouchBegin event is propagated up the parent widget chain until
            a widget accepts it with accept(), or an event filter consumes it. For
            QGraphicsItems, the QEvent::TouchBegin event is propagated to items under
            the mouse (similar to mouse event propagation for QGraphicsItems).</para>
            <para></para>
            <para>Touch Point Grouping</para>
            <para>As mentioned above, it is possible that several widgets can be
            receiving QTouchEvents at the same time. However, Qt makes sure to never
            send duplicate QEvent::TouchBegin events to the same widget, which could
            theoretically happen during propagation if, for example, the user touched 2
            separate widgets in a QGroupBox and both widgets ignored the
            QEvent::TouchBegin event.</para>
            <para>To avoid this, Qt will group new touch points together using the
            following rules:</para>
            <para></para>
            <para>When the first touch point is detected, the destination widget is
            determined firstly by the location on screen and secondly by the
            propagation rules.</para>
            <para>When additional touch points are detected, Qt first looks to see
            if there are any active touch points on any ancestor or descendent of the
            widget under the new touch point. If there are, the new touch point is
            grouped with the first, and the new touch point will be sent in a single
            QTouchEvent to the widget that handled the first touch point. (The widget
            under the new touch point will not receive an event).</para>
            <para></para>
            <para>This makes it possible for sibling widgets to handle touch events
            independently while making sure that the sequence of QTouchEvents is always
            correct.</para>
            <para></para>
            <para>Mouse Events and Touch Event Synthesizing</para>
            <para>QTouchEvent delivery is independent from that of QMouseEvent. The
            application flags Qt::AA_SynthesizeTouchForUnhandledMouseEvents and
            Qt::AA_SynthesizeMouseForUnhandledTouchEvents can be used to enable or
            disable automatic synthesizing of touch events to mouse events and mouse
            events to touch events.</para>
            <para></para>
            <para>Caveats</para>
            <para></para>
            <para>As mentioned above, enabling touch events means multiple widgets
            can be receiving touch events simultaneously. Combined with the default
            QWidget::event() handling for QTouchEvents, this gives you great
            flexibility in designing touch user interfaces. Be aware of the
            implications. For example, it is possible that the user is moving a QSlider
            with one finger and pressing a QPushButton with another. The signals
            emitted by these widgets will be interleaved.</para>
            <para>Recursion into the event loop using one of the exec() methods
            (e.g., QDialog::exec() or QMenu::exec()) in a QTouchEvent event handler is
            not supported. Since there are multiple event recipients, recursion may
            cause problems, including but not limited to lost events and unexpected
            infinite recursion.</para>
            <para>QTouchEvents are not affected by a mouse grab or an active pop-up
            widget. The behavior of QTouchEvents is undefined when opening a pop-up or
            grabbing the mouse while there are more than one active touch
            points.</para>
            <para></para>
            <para></para>
            <para>See also QTouchEvent::TouchPoint, Qt::TouchPointState,
            Qt::WA_AcceptTouchEvents, and QGraphicsItem::acceptTouchEvents().</para>
            </remarks>
        </member>
        <member name="P:QtGui.QTouchEvent.Window">
            <summary>
            <para>Returns the window on which the event occurred. Useful for doing
            global-local mapping on data like rawScreenPositions() which, for
            performance reasons, only stores the global positions in the touch
            event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.Target">
            <summary>
            <para>Returns the target object within the window on which the event
            occurred. This is typically a QWidget or a QQuickItem. May be 0 when no
            specific target is available.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPointStates">
            <summary>
            <para>Returns a bitwise OR of all the touch point states for this
            event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.Device">
            <summary>
            <para>Returns the touch device from which this touch event
            originates.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTouchEvent.TouchPoint">
            <summary>
            <para>The TouchPoint class provides information about a touch point in
            a QTouchEvent.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Id">
            <summary>
            <para>Returns the id number of this touch point.</para>
            <para>Do not assume that id numbers start at zero or that they are
            sequential. Such an assumption is often false due to the way the underlying
            drivers work.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Pos">
            <summary>
            <para>Returns the position of this touch point, relative to the widget
            or QGraphicsItem that received the event.</para>
            <para>See also startPos(), lastPos(), screenPos(), scenePos(), and
            normalizedPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.ScenePos">
            <summary>
            <para>Returns the scene position of this touch point.</para>
            <para>The scene position is the position in QGraphicsScene coordinates
            if the QTouchEvent is handled by a QGraphicsItem::touchEvent()
            reimplementation, and identical to the screen position for widgets.</para>
            <para>See also startScenePos(), lastScenePos(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.ScreenPos">
            <summary>
            <para>Returns the screen position of this touch point.</para>
            <para>See also startScreenPos(), lastScreenPos(), and pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.NormalizedPos">
            <summary>
            <para>Returns the normalized position of this touch point.</para>
            <para>The coordinates are normalized to the size of the touch device,
            i.e. (0,0) is the top-left corner and (1,1) is the bottom-right
            corner.</para>
            <para>See also startNormalizedPos(), lastNormalizedPos(), and
            pos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.StartPos">
            <summary>
            <para>Returns the starting position of this touch point, relative to
            the widget or QGraphicsItem that received the event.</para>
            <para>See also pos() and lastPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.StartScenePos">
            <summary>
            <para>Returns the starting scene position of this touch point.</para>
            <para>The scene position is the position in QGraphicsScene coordinates
            if the QTouchEvent is handled by a QGraphicsItem::touchEvent()
            reimplementation, and identical to the screen position for widgets.</para>
            <para>See also scenePos() and lastScenePos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.StartScreenPos">
            <summary>
            <para>Returns the starting screen position of this touch point.</para>
            <para>See also screenPos() and lastScreenPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.StartNormalizedPos">
            <summary>
            <para>Returns the normalized starting position of this touch
            point.</para>
            <para>The coordinates are normalized to the size of the touch device,
            i.e. (0,0) is the top-left corner and (1,1) is the bottom-right
            corner.</para>
            <para>See also normalizedPos() and lastNormalizedPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.LastPos">
            <summary>
            <para>Returns the position of this touch point from the previous touch
            event, relative to the widget or QGraphicsItem that received the
            event.</para>
            <para>See also pos() and startPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.LastScenePos">
            <summary>
            <para>Returns the scene position of this touch point from the previous
            touch event.</para>
            <para>The scene position is the position in QGraphicsScene coordinates
            if the QTouchEvent is handled by a QGraphicsItem::touchEvent()
            reimplementation, and identical to the screen position for widgets.</para>
            <para>See also scenePos() and startScenePos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.LastScreenPos">
            <summary>
            <para>Returns the screen position of this touch point from the previous
            touch event.</para>
            <para>See also screenPos() and startScreenPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.LastNormalizedPos">
            <summary>
            <para>Returns the normalized position of this touch point from the
            previous touch event.</para>
            <para>The coordinates are normalized to the size of the touch device,
            i.e. (0,0) is the top-left corner and (1,1) is the bottom-right
            corner.</para>
            <para>See also normalizedPos() and startNormalizedPos().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Rect">
            <summary>
            <para>Returns the rect for this touch point, relative to the widget or
            QGraphicsItem that received the event. The rect is centered around the
            point returned by pos().</para>
            <para>Note: This function returns an empty rect if the device does not
            report touch point sizes.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.SceneRect">
            <summary>
            <para>Returns the rect for this touch point in scene
            coordinates.</para>
            <para>Note: This function returns an empty rect if the device does not
            report touch point sizes.</para>
            <para>See also scenePos() and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.ScreenRect">
            <summary>
            <para>Returns the rect for this touch point in screen
            coordinates.</para>
            <para>Note: This function returns an empty rect if the device does not
            report touch point sizes.</para>
            <para>See also screenPos() and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Pressure">
            <summary>
            <para>Returns the pressure of this touch point. The return value is in
            the range 0.0 to 1.0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Velocity">
            <summary>
            <para>Returns a velocity vector for this touch point. The vector is in
            the screen's coordinate system, using pixels per seconds for the
            magnitude.</para>
            <para>Note: The returned vector is only valid if the touch device's
            capabilities include QTouchDevice::Velocity.</para>
            <para>See also QTouchDevice::capabilities() and device().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.Flags">
            <summary>
            <para>Returns additional information about the touch point.</para>
            <para>See also QTouchEvent::TouchPoint::InfoFlags.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTouchEvent.TouchPoint.State">
            <summary>
            <para>Returns the current state of this touch point.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTouchEvent.TouchPoint.InfoFlag">
            <summary>
            <para>The values of this enum describe additional information about a
            touch point.</para>
            <para>The InfoFlags type is a typedef for QFlags&lt;InfoFlag&gt;. It
            stores an OR combination of InfoFlag values.</para>
            </summary>
        </member>
        <member name="T:QtGui.QScrollPrepareEvent">
            <summary>
            <para>The QScrollPrepareEvent class is sent in preparation of
            scrolling.</para>
            </summary>
            <remarks>
            <para>The scroll prepare event is sent before scrolling (usually by
            QScroller) is started. The object receiving this event should set
            viewportSize, maxContentPos and contentPos. It also should accept this
            event to indicate that scrolling should be started.</para>
            <para>It is not guaranteed that a QScrollEvent will be sent after an
            acceepted QScrollPrepareEvent, e.g. in a case where the maximum content
            position is (0,0).</para>
            <para></para>
            <para>See also QScrollEvent and QScroller.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QScrollPrepareEvent.#ctor(QtCore.QPointF)">
            <summary>
            <para>Creates new QScrollPrepareEvent The startPos is the position of a
            touch or mouse event that started the scrolling.</para>
            </summary>
        </member>
        <member name="M:QtGui.QScrollPrepareEvent.StartPos">
            <summary>
            <para>Returns the position of the touch or mouse event that started the
            scrolling.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollPrepareEvent.ViewportSize">
            <summary>
            <para>Returns size of the area that is to be scrolled as set by
            setViewportSize</para>
            <para>See also setViewportSize().</para>
            <para></para>
            <para>Sets the size of the area that is to be scrolled to size.</para>
            <para>See also viewportSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollPrepareEvent.ContentPosRange">
            <summary>
            <para>Returns the range of coordinates for the content as set by
            setContentPosRange().</para>
            <para>See also setContentPosRange().</para>
            <para></para>
            <para>Sets the range of content coordinates to rect.</para>
            <para>See also contentPosRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollPrepareEvent.ContentPos">
            <summary>
            <para>Returns the current position of the content as set by
            setContentPos.</para>
            <para>See also setContentPos().</para>
            <para></para>
            <para>Sets the current content position to pos.</para>
            <para>See also contentPos().</para>
            </summary>
        </member>
        <member name="T:QtGui.QScrollEvent">
            <summary>
            <para>The QScrollEvent class is sent when scrolling.</para>
            </summary>
            <remarks>
            <para>The scroll event is sent to indicate that the receiver should be
            scrolled. Usually the receiver should be something visual like QWidget or
            QGraphicsObject.</para>
            <para>Some care should be taken that no conflicting QScrollEvents are
            sent from two sources. Using QScroller::scrollTo is save however.</para>
            <para></para>
            <para>See also QScrollPrepareEvent and QScroller.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QScrollEvent.#ctor(QtCore.QPointF,QtCore.QPointF,QtGui.QScrollEvent.ScrollState)">
            <summary>
            <para>Creates a new QScrollEvent contentPos is the new content
            position, overshootDistance is the new overshoot distance while scrollState
            indicates if this scroll event is the first one, the last one or some event
            in between.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollEvent.ContentPos">
            <summary>
            <para>Returns the new scroll position.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollEvent.OvershootDistance">
            <summary>
            <para>Returns the new overshoot distance. See QScroller for an
            explanation of the term overshoot.</para>
            <para>See also QScroller.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScrollEvent.scrollState">
            <summary>
            <para>Returns the current scroll state as a combination of
            ScrollStateFlag values. ScrollStarted (or ScrollFinished) will be set, if
            this scroll event is the first (or last) event in a scrolling activity.
            Please note that both values can be set at the same time, if the activity
            consists of a single QScrollEvent. All other scroll events in between will
            have their state set to ScrollUpdated.</para>
            <para>A widget could for example revert selections when scrolling is
            started and stopped.</para>
            </summary>
        </member>
        <member name="T:QtGui.QScrollEvent.ScrollState">
            <summary>
            <para>This enum describes the states a scroll event can have.</para>
            <para>See also QScrollEvent::scrollState().</para>
            </summary>
        </member>
        <member name="F:QtGui.QScrollEvent.ScrollState.ScrollStarted">
            <summary>Set for the first scroll event of a scroll activity.</summary>
        </member>
        <member name="F:QtGui.QScrollEvent.ScrollState.ScrollUpdated">
            <summary>Set for all but the first and the last scroll event of a scroll activity.</summary>
        </member>
        <member name="F:QtGui.QScrollEvent.ScrollState.ScrollFinished">
            <summary>Set for the last scroll event of a scroll activity.</summary>
        </member>
        <member name="T:QtGui.QAccessible">
            <summary>
            <para>The QAccessible class provides enums and static functions related
            to accessibility.</para>
            </summary>
            <remarks>
            <para>This class is part of Accessibility for QWidget
            Applications.</para>
            <para>Accessible applications can be used by people who are not able to
            use applications by conventional means.</para>
            <para>The functions in this class are used for communication between
            accessible applications (also called AT Servers) and accessibility tools
            (AT Clients), such as screen readers and braille displays. Clients and
            servers communicate in the following way:</para>
            <para></para>
            <para>AT Servers notify the clients about events through calls to the
            updateAccessibility() function.</para>
            <para>AT Clients request information about the objects in the server.
            The QAccessibleInterface class is the core interface, and encapsulates this
            information in a pure virtual API. Implementations of the interface are
            provided by Qt through the queryAccessibleInterface() API.</para>
            <para></para>
            <para>The communication between servers and clients is initialized by
            the setRootObject() function. Function pointers can be installed to replace
            or extend the default behavior of the static functions in
            QAccessible.</para>
            <para>Qt supports Microsoft Active Accessibility (MSAA), Mac OS X
            Accessibility, and the Unix/X11 AT-SPI standard. Other backends can be
            supported using QAccessibleBridge.</para>
            <para>In the Unix/X11 AT-SPI implementation, applications become
            accessible when two conditions are met:</para>
            <para></para>
            <para>org.a11y.Status.IsEnabled DBus property is true</para>
            <para>org.a11y.Status.ScreenReaderEnabled DBus property is true</para>
            <para></para>
            <para>An alternative to setting the DBus AT-SPI properties is to set
            the QT_LINUX_ACCESSIBILITY_ALWAYS_ON environment variable.</para>
            <para>In addition to QAccessible's static functions, Qt offers one
            generic interface, QAccessibleInterface, that can be used to wrap all
            widgets and objects (e.g., QPushButton). This single interface provides all
            the metadata necessary for the assistive technologies. Qt provides
            implementations of this interface for its built-in widgets as
            plugins.</para>
            <para>When you develop custom widgets, you can create custom subclasses
            of QAccessibleInterface and distribute them as plugins (using
            QAccessiblePlugin) or compile them into the application. Likewise, Qt's
            predefined accessibility support can be built as plugin (the default) or
            directly into the Qt library. The main advantage of using plugins is that
            the accessibility classes are only loaded into memory if they are actually
            used; they don't slow down the common case where no assistive technology is
            being used.</para>
            <para>Qt also includes two convenience classes, QAccessibleObject and
            QAccessibleWidget, that inherit from QAccessibleInterface and provide the
            lowest common denominator of metadata (e.g., widget geometry, window title,
            basic help text). You can use them as base classes when wrapping your
            custom QObject or QWidget subclasses.</para>
            <para></para>
            <para>See also QAccessibleInterface.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessible.InstallFactory(QtGui.QAccessible.InterfaceFactory)">
            <summary>
            <para>Installs the InterfaceFactory factory. The last factory added is
            the first one used by queryAccessibleInterface().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.RemoveFactory(QtGui.QAccessible.InterfaceFactory)">
            <summary>
            <para>Removes factory from the list of installed
            InterfaceFactories.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.QueryAccessibleInterface(QtCore.QObject)">
            <summary>
            <para>If a QAccessibleInterface implementation exists for the given
            object, this function returns a pointer to the implementation; otherwise it
            returns 0.</para>
            <para>The function calls all installed factory functions (from most
            recently installed to least recently installed) until one is found that
            provides an interface for the class of object. If no factory can provide an
            accessibility implementation for the class the function loads installed
            accessibility plugins, and tests if any of the plugins can provide the
            implementation.</para>
            <para>If no implementation for the object's class is available, the
            function tries to find an implementation for the object's parent class,
            using the above strategy.</para>
            <para>All interfaces are managed by an internal cache and should not be
            deleted.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.UniqueId(QtGui.QAccessibleInterface)">
            <summary>
            <para>Returns the unique ID for the QAccessibleInterface iface.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.AccessibleInterface(System.UInt32)">
            <summary>
            <para>Returns the QAccessibleInterface belonging to the id.</para>
            <para>Returns 0 if the id is invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.RegisterAccessibleInterface(QtGui.QAccessibleInterface)">
            <summary>
            <para>Call this function to ensure that manually created interfaces are
            properly memory managed.</para>
            <para>Must only be called exactly once per interface iface. This is
            implicitly called when calling queryAccessibleInterface, calling this
            function is only required when QAccessibleInterfaces are instantiated with
            the &quot;new&quot; operator. This is not recommended, whenever possible
            use the default functions and let queryAccessibleInterface() take care of
            this.</para>
            <para>When it is necessary to reimplement the
            QAccessibleInterface::child() function and returning the child after
            constructing it, this function needs to be called.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.DeleteAccessibleInterface(System.UInt32)">
            <summary>
            <para>Removes the interface belonging to this id from the cache and
            deletes it. The id becomes invalid an may be re-used by the cache.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.UpdateAccessibility(QtGui.QAccessibleEvent)">
            <summary>
            <para>Notifies about a change that might be relevant for accessibility
            clients.</para>
            <para>event provides details about the change. These include the source
            of the change and the nature of the change. The event should contain enough
            information give meaningful notifications.</para>
            <para>For example, the type ValueChange indicates that the position of
            a slider has been changed.</para>
            <para>Call this function whenever the state of your accessible object
            or one of its sub-elements has been changed either programmatically (e.g.
            by calling QLabel::setText()) or by user interaction.</para>
            <para>If there are no accessibility tools listening to this event, the
            performance penalty for calling this function is small, but if determining
            the parameters of the call is expensive you can test
            QAccessible::isActive() to avoid unnecessary computation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessible.SetRootObject(QtCore.QObject)">
            <summary>
            <para>Sets the root object of the accessible objects of this
            application to object. All other accessible objects are reachable using
            object navigation from the root object.</para>
            <para>Normally, it isn't necessary to call this function, because Qt
            sets the QApplication object as the root object immediately before the
            event loop is entered in QApplication::exec().</para>
            <para>Use QAccessible::installRootObjectHandler() to redirect the
            function call to a customized handler function.</para>
            <para>See also queryAccessibleInterface().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessible.Active">
            <summary>
            <para>Returns true if the platform requested accessibility
            information.</para>
            <para>This function will return false until a tool such as a screen
            reader accessed the accessibility framework. It is still possible to use
            QAccessible::queryAccessibleInterface() even if accessibility is not
            active. But there will be no notifications sent to the platform.</para>
            <para>It is recommended to use this function to prevent expensive
            notifications via updateAccessibility() when they are not needed.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessible.Event">
            <summary>
            <para>This enum type defines accessible event types.</para>
            <para>Internal: Used when creating subclasses of
            QAccessibleEvent.</para>
            <para>The values for this enum are defined to be the same as those
            defined in the IAccessible2 and MSAA specifications.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.SoundPlayed">
            <summary>A sound has been played by an object The QAccessible::State of an object has changed. This value is used internally for the QAccessibleStateChangeEvent.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.Alert">
            <summary>A system alert (e.g., a message from a QMessageBox)</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ForegroundChanged">
            <summary>A window has been activated (i.e., a new window has gained focus on the desktop).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.MenuStart">
            <summary>A menu has been opened on the menubar (Qt uses PopupMenuStart for all menus).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.MenuEnd">
            <summary>A menu has been closed (Qt uses PopupMenuEnd for all menus).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.PopupMenuStart">
            <summary>A pop-up menu has opened.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.PopupMenuEnd">
            <summary>A pop-up menu has closed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ContextHelpStart">
            <summary>Context help (QWhatsThis) for an object is initiated.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ContextHelpEnd">
            <summary>Context help (QWhatsThis) for an object is finished.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DragDropStart">
            <summary>A drag and drop operation is about to be initiated.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DragDropEnd">
            <summary>A drag and drop operation is about to finished.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DialogStart">
            <summary>A dialog (QDialog) has been set visible.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DialogEnd">
            <summary>A dialog (QDialog) has been hidden</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ScrollingStart">
            <summary>A scrollbar scroll operation is about to start; this may be caused by a mouse press on the slider handle, for example.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ScrollingEnd">
            <summary>A scrollbar scroll operation has ended (the mouse has released the slider handle).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.MenuCommand">
            <summary>A menu item is triggered.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ActionChanged">
            <summary>An action has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DocumentContentChanged">
            <summary>The contents of a text document have changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DocumentLoadComplete">
            <summary>A document has been loaded.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DocumentLoadStopped">
            <summary>A document load has been stopped.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DocumentReload">
            <summary>A document reload has been initiated.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HyperlinkEndIndexChanged">
            <summary>The end position of the display text for a hypertext link has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HyperlinkNumberOfAnchorsChanged">
            <summary>The number of anchors in a hypertext link has changed, perhaps because the display text has been split to provide more than one link.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HyperlinkSelectedLinkChanged">
            <summary>The link for the selected hypertext link has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HypertextLinkActivated">
            <summary>A hypertext link has been activated, perhaps by being clicked or via a key press.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HypertextLinkSelected">
            <summary>A hypertext link has been selected.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HyperlinkStartIndexChanged">
            <summary>The start position of the display text for a hypertext link has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HypertextChanged">
            <summary>The display text for a hypertext link has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableCaptionChanged">
            <summary>A table caption has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableColumnDescriptionChanged">
            <summary>The description of a table column, typically found in the column's header, has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableColumnHeaderChanged">
            <summary>A table column header has been changed. The model providing data for a table has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableRowDescriptionChanged">
            <summary>The description of a table row, typically found in the row's header, has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableRowHeaderChanged">
            <summary>A table row header has been changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TableSummaryChanged">
            <summary>The summary of a table has been changed. The caret has moved in an editable widget. The caret represents the cursor position in an editable widget with the input focus.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.TextColumnChanged">
            <summary>A text column has been changed. Text has been inserted into an editable widget. Text has been removed from an editable widget. The selected text has changed in an editable widget. The text has been update in an editable widget. The QAccessible::Value of an object has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ObjectCreated">
            <summary>A new object is created.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ObjectDestroyed">
            <summary>An object is deleted.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ObjectShow">
            <summary>An object is displayed; for example, with QWidget::show().</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ObjectHide">
            <summary>An object is hidden; for example, with QWidget::hide(). Any children the object that is hidden has do not send this event. It is not sent when an object is hidden as it is being obcured by others.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ObjectReorder">
            <summary>A layout or item view has added, removed, or moved an object (Qt does not use this event).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.Focus">
            <summary>An object has gained keyboard focus.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.Selection">
            <summary>The selection has changed in a menu or item view.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.SelectionAdd">
            <summary>An item has been added to the selection in an item view.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.SelectionRemove">
            <summary>An item has been removed from an item view selection.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.SelectionWithin">
            <summary>Several changes to a selection has occurred in an item view.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.LocationChanged">
            <summary>An object's location on the screen has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.NameChanged">
            <summary>The QAccessible::Name property of an object has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DescriptionChanged">
            <summary>The object's QAccessible::Description changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.ParentChanged">
            <summary>An object's parent object changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.HelpChanged">
            <summary>The QAccessible::Help text property of an object has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.DefaultActionChanged">
            <summary>The default QAccessible::Action for the accessible object has changed.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Event.AcceleratorChanged">
            <summary>The keyboard accelerator for an action has been changed.</summary>
        </member>
        <member name="T:QtGui.QAccessible.Role">
            <summary>
            <para>This enum defines the role of an accessible object. The roles
            are:</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.NoRole">
            <summary>The object has no role. This usually indicates an invalid object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.TitleBar">
            <summary>The title bar caption of a window.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.MenuBar">
            <summary>A menu bar from which menus are opened by the user.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ScrollBar">
            <summary>A scroll bar, which allows the user to scroll the visible area.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Grip">
            <summary>A grip that the user can drag to change the size of widgets.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Sound">
            <summary>An object that represents a sound.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Cursor">
            <summary>An object that represents the mouse cursor.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Caret">
            <summary>An object that represents the system caret (text cursor).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.AlertMessage">
            <summary>An object that is used to alert the user.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Window">
            <summary>A top level window.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Client">
            <summary>The client area in a window.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.PopupMenu">
            <summary>A menu which lists options that the user can select to perform an action.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.MenuItem">
            <summary>An item in a menu or menu bar.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ToolTip">
            <summary>A tool tip which provides information about other objects.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Application">
            <summary>The application's main window.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Document">
            <summary>A document, for example in an office application.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Pane">
            <summary>A generic container.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Chart">
            <summary>An object that displays a graphical representation of data.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Dialog">
            <summary>A dialog box.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Border">
            <summary>An object that represents a border.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Grouping">
            <summary>An object that represents a logical grouping of other objects.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Separator">
            <summary>A separator that divides space into logical areas.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ToolBar">
            <summary>A tool bar, which groups widgets that the user accesses frequently.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.StatusBar">
            <summary>A status bar.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Table">
            <summary>A table representing data in a grid of rows and columns.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ColumnHeader">
            <summary>A header for a column of data.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.RowHeader">
            <summary>A header for a row of data.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Column">
            <summary>A column of cells, usually within a table.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Row">
            <summary>A row of cells, usually within a table.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Cell">
            <summary>A cell in a table.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Link">
            <summary>A link to something else.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.HelpBalloon">
            <summary>An object that displays help in a separate, short lived window.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Assistant">
            <summary>An object that provids interactive help.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.List">
            <summary>A list of items, from which the user can select one or more items.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ListItem">
            <summary>An item in a list of items.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Tree">
            <summary>A list of items in a tree structure.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.TreeItem">
            <summary>An item in a tree structure.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.PageTab">
            <summary>A page tab that the user can select to switch to a different page in a dialog.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.PropertyPage">
            <summary>A property page where the user can change options and settings.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Indicator">
            <summary>An indicator that represents a current value or item.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Graphic">
            <summary>A graphic or picture, e.g. an icon.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.StaticText">
            <summary>Static text, such as labels for other widgets.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.EditableText">
            <summary>Editable text such as a line or text edit.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Button">
            <summary>A button.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.CheckBox">
            <summary>An object that represents an option that can be checked or unchecked. Some options provide a "mixed" state, e.g. neither checked nor unchecked.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.RadioButton">
            <summary>An object that represents an option that is mutually exclusive with other options.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ComboBox">
            <summary>A list of choices that the user can select from.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ProgressBar">
            <summary>The object displays the progress of an operation in progress.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Dial">
            <summary>An object that represents a dial or knob.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.HotkeyField">
            <summary>A hotkey field that allows the user to enter a key sequence.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Slider">
            <summary>A slider that allows the user to select a value within a given range.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.SpinBox">
            <summary>A spin box widget that allows the user to enter a value within a given range.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Canvas">
            <summary>An object that displays graphics that the user can interact with.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Animation">
            <summary>An object that displays an animation.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Equation">
            <summary>An object that represents a mathematical equation.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ButtonDropDown">
            <summary>A button that drops down a list of items.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ButtonMenu">
            <summary>A button that drops down a menu.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ButtonDropGrid">
            <summary>A button that drops down a grid.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Whitespace">
            <summary>Blank space between other objects.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.PageTabList">
            <summary>A list of page tabs.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Clock">
            <summary>A clock displaying time.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Splitter">
            <summary>A splitter distributing available space between its child widgets.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.LayeredPane">
            <summary>An object that can contain layered children, e.g. in a stack.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Terminal">
            <summary>A terminal or command line interface.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Desktop">
            <summary>The object represents the desktop or workspace.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Paragraph">
            <summary>A paragraph of text (usually found in documents).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.WebDocument">
            <summary>HTML document, usually in a browser.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Section">
            <summary>A section (in a document).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ColorChooser">
            <summary>A dialog that lets the user choose a color.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Footer">
            <summary>A footer in a page (usually in documents).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Form">
            <summary>A web form containing controls.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Heading">
            <summary>A heading in a document.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.Note">
            <summary>A section whose content is parenthetic or ancillary to the main content of the resource.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.ComplementaryContent">
            <summary>A part of the document or web page that is complementary to the main content, usually a landmark (see WAI-ARIA).</summary>
        </member>
        <member name="F:QtGui.QAccessible.Role.UserRole">
            <summary>The first value to be used for user defined roles.</summary>
        </member>
        <member name="T:QtGui.QAccessible.Text">
            <summary>
            <para>This enum specifies string information that an accessible object
            returns.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.Name">
            <summary>The name of the object. This can be used both as an identifier or a short description by accessible clients.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.Description">
            <summary>A short text describing the object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.Value">
            <summary>The value of the object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.Help">
            <summary>A longer text giving information about how to use the object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.Accelerator">
            <summary>The keyboard shortcut that executes the object's default action.</summary>
        </member>
        <member name="F:QtGui.QAccessible.Text.UserText">
            <summary>The first value to be used for user defined text.</summary>
        </member>
        <member name="T:QtGui.QAccessible.RelationFlag">
            <summary>
            <para>This enum type defines bit flags that can be combined to indicate
            the relationship between two accessible objects.</para>
            <para>Implementations of relations() return a combination of these
            flags. Some values are mutually exclusive.</para>
            <para>The Relation type is a typedef for QFlags&lt;RelationFlag&gt;. It
            stores an OR combination of RelationFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.RelationFlag.Label">
            <summary>The first object is the label of the second object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.RelationFlag.Labelled">
            <summary>The first object is labelled by the second object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.RelationFlag.Controller">
            <summary>The first object controls the second object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.RelationFlag.Controlled">
            <summary>The first object is controlled by the second object.</summary>
        </member>
        <member name="F:QtGui.QAccessible.RelationFlag.AllRelations">
            <summary>Used as a mask to specify that we are interesting in information about all relations</summary>
        </member>
        <member name="T:QtGui.QAccessible.InterfaceType">
            <summary>
            <para>QAccessibleInterface supports several sub interfaces. In order to
            provide more information about some objects, their accessible
            representation should implement one or more of these interfaces.</para>
            <para>Note: When subclassing one of these interfaces,
            QAccessibleInterface::interface_cast() needs to be implemented.</para>
            <para>See also QAccessibleInterface::interface_cast(),
            QAccessibleTextInterface, QAccessibleValueInterface,
            QAccessibleActionInterface, QAccessibleTableInterface, and
            QAccessibleTableCellInterface.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.InterfaceType.TextInterface">
            <summary>For text that supports selections or is more than one line. Simple labels do not need to implement this interface. For text that can be edited by the user.</summary>
        </member>
        <member name="F:QtGui.QAccessible.InterfaceType.ValueInterface">
            <summary>For objects that are used to manipulate a value, for example slider or scroll bar.</summary>
        </member>
        <member name="F:QtGui.QAccessible.InterfaceType.ActionInterface">
            <summary>For interactive objects that allow the user to trigger an action. Basically everything that allows for example mouse interaction. For objects that represent an image. This interface is generally less important.</summary>
        </member>
        <member name="F:QtGui.QAccessible.InterfaceType.TableInterface">
            <summary>For lists, tables and trees.</summary>
        </member>
        <member name="F:QtGui.QAccessible.InterfaceType.TableCellInterface">
            <summary>For cells in a TableInterface object.</summary>
        </member>
        <member name="T:QtGui.QAccessible.TextBoundaryType">
            <summary>
            <para>This enum describes different types of text boundaries. It
            follows the IAccessible2 API and is used in the
            QAccessibleTextInterface.</para>
            <para>See also QAccessibleTextInterface.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.CharBoundary">
            <summary>Use individual characters as boundary.</summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.WordBoundary">
            <summary>Use words as boundaries.</summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.SentenceBoundary">
            <summary>Use sentences as boundary.</summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.ParagraphBoundary">
            <summary>Use paragraphs as boundary.</summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.LineBoundary">
            <summary>Use newlines as boundary.</summary>
        </member>
        <member name="F:QtGui.QAccessible.TextBoundaryType.NoBoundary">
            <summary>No boundary (use the whole text).</summary>
        </member>
        <member name="T:QtGui.QAccessible.State">
            <summary>
            <para>This structure defines bit flags that indicate the state of an
            accessible object. The values are:</para>
            </summary>
            <remarks>
            <para>ConstantDescription</para>
            <para>active	The object is the active window or the active sub-element
            in a container (that would get focus when focusing the container).</para>
            <para>adjustable	The object represents an adjustable value, e.g.
            sliders.</para>
            <para>animated	The object's appearance changes frequently.</para>
            <para>busy	The object cannot accept input at the moment.</para>
            <para>checkable	The object is checkable.</para>
            <para>checked	The object's check box is checked.</para>
            <para>checkStateMixed	The third state of checkboxes (half checked in
            tri-state check boxes).</para>
            <para>collapsed	The object is collapsed, e.g. a closed listview item,
            or an iconified window.</para>
            <para>defaultButton	The object represents the default button in a
            dialog.</para>
            <para>defunct	The object no longer exists.</para>
            <para>editable	The object has a text carret (and often implements the
            text interface).</para>
            <para>expandable	The object is expandable, mostly used for cells in a
            tree view.</para>
            <para>expanded	The object is expanded, currently its children are
            visible.</para>
            <para>extSelectable	The object supports extended selection.</para>
            <para>focusable	The object can receive focus. Only objects in the
            active window can receive focus.</para>
            <para>focused	The object has keyboard focus.</para>
            <para>hasPopup	The object opens a popup.</para>
            <para>hotTracked	The object's appearance is sensitive to the mouse
            cursor position.</para>
            <para>invalid	The object is no longer valid (because it has been
            deleted).</para>
            <para>invalidEntry	Input validation current input invalid.</para>
            <para>invisible	The object is not visible to the user.</para>
            <para>linked	The object is linked to another object, e.g. a
            hyperlink.</para>
            <para>marqueed	The object displays scrolling contents, e.g. a log
            view.</para>
            <para>modal	The object blocks input from other objects.</para>
            <para>movable	The object can be moved.</para>
            <para>multiLine	The object has multiple lines of text (word wrap), as
            opposed to a single line.</para>
            <para>multiSelectable	The object supports multiple selected
            items.</para>
            <para>offscreen	The object is clipped by the visible area. Objects that
            are off screen are also invisible.</para>
            <para>passwordEdit	The object is a password field, e.g. a line edit for
            entering a Password.</para>
            <para>playsSound	The object produces sound when interacted with.</para>
            <para>pressed	The object is pressed.</para>
            <para>readOnly	The object can usually be edited, but is explicitly set
            to read-only.</para>
            <para>searchEdit	The object is a line edit that is the input for search
            queries.</para>
            <para>selectable	The object is selectable.</para>
            <para>selectableText	The object has text which can be selected. This is
            different from selectable which refers to the object's children.</para>
            <para>selected	The object is selected, this is independent of text
            selection.</para>
            <para>selfVoicing	The object describes itself through speech or
            sound.</para>
            <para>sizeable	The object can be resized, e.g. top-level
            windows.</para>
            <para>summaryElement	The object summarizes the state of the window and
            should be treated with priority.</para>
            <para>supportsAutoCompletion	The object has auto-completion, for
            example in line edits or combo boxes.</para>
            <para>traversed	The object is linked and has been visited.</para>
            <para>updatesFrequently	The object changes frequently and needs to be
            refreshed when accessing it.</para>
            <para>disabled	The object is unavailable to the user, e.g. a disabled
            widget.</para>
            <para></para>
            <para>Implementations of QAccessibleInterface::state() return a
            combination of these flags.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessible.State.#ctor">
            <summary>
            <para>Constructs a new QAccessible::State with all states set to
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleInterface">
            <summary>
            <para>The QAccessibleInterface class defines an interface that exposes
            information about accessible objects.</para>
            </summary>
            <remarks>
            <para>This class is part of Accessibility for QWidget
            Applications.</para>
            <para>Accessibility tools (also called AT Clients), such as screen
            readers or braille displays, require high-level information about
            accessible objects in an application. Accessible objects provide
            specialized input and output methods, making it possible for users to use
            accessibility tools with enabled applications (AT Servers).</para>
            <para>Every element that the user needs to interact with or react to is
            an accessible object, and should provide this information. These are mainly
            visual objects, such as widgets and widget elements, but can also be
            content, such as sounds.</para>
            <para>The AT client uses three basic concepts to acquire information
            about any accessible object in an application:</para>
            <para></para>
            <para>Properties The client can read information about accessible
            objects. In some cases the client can also modify these properties; such as
            text in a line edit.</para>
            <para>Actions The client can invoke actions like pressing a button or
            .</para>
            <para>Relationships and Navigation The client can traverse from one
            accessible object to another, using the relationships between
            objects.</para>
            <para></para>
            <para>The QAccessibleInterface defines the API for these three
            concepts.</para>
            <para></para>
            <para>Relationships and Navigation</para>
            <para>The functions childCount() and indexOfChild() return the number
            of children of an accessible object and the index a child object has in its
            parent. The childAt() function returns a child QAccessibleInterface that is
            found at a position. The child does not have to be a direct child. This
            allows bypassing intermediate layers when the parent already knows the
            top-most child. childAt() is used for hit testing (finding the object under
            the mouse).</para>
            <para>The relations() function provides information about the relations
            an object has to other objects, and parent() and child() allows traversing
            from one object to another object.</para>
            <para></para>
            <para>Properties</para>
            <para>The central property of an accessible objects is what role() it
            has. Different objects can have the same role, e.g. both the &quot;Add
            line&quot; element in a scroll bar and the OK button in a dialog have the
            same role, &quot;button&quot;. The role implies what kind of interaction
            the user can perform with the user interface element.</para>
            <para>An object's state() property is a combination of different state
            flags and can describe both how the object's state differs from a
            &quot;normal&quot; state, e.g. it might be unavailable, and also how it
            behaves, e.g. it might be selectable.</para>
            <para>The text() property provides textual information about the
            object. An object usually has a name, but can provide extended information
            such as a description, help text, or information about any keyboard
            accelerators it provides. Some objects allow changing the text() property
            through the setText() function, but this information is in most cases
            read-only.</para>
            <para>The rect() property provides information about the geometry of an
            accessible object. This information is usually only available for visual
            objects.</para>
            <para></para>
            <para>Interfaces</para>
            <para>To enable the user to interact with an accessible object the
            object must implement QAccessibleActionInterface in addition to
            QAccessibleInterface. Objects that support selections can define actions to
            change the selection.</para>
            <para>There are several other interfaces that should be implemented as
            required. QAccessibleTextInterface should be used for bigger texts edits
            such as document views. This interface should not be implemented for
            labels/single line edits.</para>
            <para>For sliders, scrollbars and other numerical value selectors
            QAccessibleValueInterface should be implemented.</para>
            <para>Lists, tables and trees should implement
            QAccessibleTableInterface.</para>
            <para></para>
            <para>See also QAccessible, QAccessibleActionInterface,
            QAccessibleTextInterface, QAccessibleValueInterface, and
            QAccessibleTableInterface.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleInterface.FocusChild">
            <summary>
            <para>Returns the object that has the keyboard focus.</para>
            <para>The object returned can be any descendant, including
            itself.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.ChildAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the QAccessibleInterface of a child that contains the
            screen coordinates (x, y). If there are no children at this position this
            function returns 0. The returned accessible must be a child, but not
            necessarily a direct child.</para>
            <para>This function is only relyable for visible objects (invisible
            object might not be laid out correctly).</para>
            <para>All visual objects provide this information.</para>
            <para>A default implementation is provided for objects inheriting
            QAccessibleObject. This will iterate over all children. If the widget
            manages its children (e.g. a table) it will be more efficient to write a
            specialized implementation.</para>
            <para>See also rect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.Child(System.Int32)">
            <summary>
            <para>Returns the accessible child with index index. 0-based index. The
            number of children of an object can be checked with childCount.</para>
            <para>Returns 0 when asking for an invalid child (e.g. when the child
            became invalid in the meantime).</para>
            <para>See also childCount() and parent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.IndexOfChild(QtGui.QAccessibleInterface)">
            <summary>
            <para>Returns the 0-based index of the object child in this object's
            children list, or -1 if child is not a child of this object.</para>
            <para>All objects provide this information about their children.</para>
            <para>See also childCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.Text(QtGui.QAccessible.Text)">
            <summary>
            <para>Returns the value of the text property t of the object.</para>
            <para>The QAccessible::Name is a string used by clients to identify,
            find, or announce an accessible object for the user. All objects must have
            a name that is unique within their container. The name can be used
            differently by clients, so the name should both give a short description of
            the object and be unique.</para>
            <para>An accessible object's QAccessible::Description provides textual
            information about an object's visual appearance. The description is
            primarily used to provide greater context for vision-impaired users, but is
            also used for context searching or other applications. Not all objects have
            a description. An &quot;OK&quot; button would not need a description, but a
            tool button that shows a picture of a smiley would.</para>
            <para>The QAccessible::Value of an accessible object represents visual
            information contained by the object, e.g. the text in a line edit. Usually,
            the value can be modified by the user. Not all objects have a value, e.g.
            static text labels don't, and some objects have a state that already is the
            value, e.g. toggle buttons.</para>
            <para>The QAccessible::Help text provides information about the
            function and usage of an accessible object. Not all objects provide this
            information.</para>
            <para>The QAccessible::Accelerator is a keyboard shortcut that
            activates the object's default action. A keyboard shortcut is the
            underlined character in the text of a menu, menu item or widget, and is
            either the character itself, or a combination of this character and a
            modifier key like Alt, Ctrl or Shift. Command controls like tool buttons
            also have shortcut keys and usually display them in their tooltip.</para>
            <para>All objects provide a string for QAccessible::Name.</para>
            <para>See also setText(), role(), and state().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.SetText(QtGui.QAccessible.Text,System.String)">
            <summary>
            <para>Sets the text property t of the object to text.</para>
            <para>Note that the text properties of most objects are read-only so
            calling this function might have no effect.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleInterface.Interface_cast(QtGui.QAccessible.InterfaceType)">
            <summary>
            <para>Returns a specialized accessibility interface type from the
            generic QAccessibleInterface.</para>
            <para>This function must be reimplemented when providing more
            information about a widget or object through the specialized interfaces.
            For example a line edit should implement the
            QAccessibleTextInterface.</para>
            <para>Qt's QLineEdit for example has its accessibility support
            implemented in QAccessibleLineEdit.</para>
            <para>void
            *QAccessibleLineEdit::interface_cast(QAccessible::InterfaceType t)</para>
            <para>{</para>
            <para>    if (t == QAccessible::TextInterface)</para>
            <para>        return
            static_cast&lt;QAccessibleTextInterface*&gt;(this);</para>
            <para>    return QAccessibleWidget::interface_cast(t);</para>
            <para>}</para>
            <para>See also QAccessible::InterfaceType, QAccessibleTextInterface,
            QAccessibleValueInterface, QAccessibleActionInterface,
            QAccessibleTableInterface, and QAccessibleTableCellInterface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.IsValid">
            <summary>
            <para>Returns true if all the data necessary to use this interface
            implementation is valid (e.g. all pointers are non-null); otherwise returns
            false.</para>
            <para>See also object().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.Object">
            <summary>
            <para>Returns a pointer to the QObject this interface implementation
            provides information for.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.Window">
            <summary>
            <para>Returns the window associated with the underlying object. For
            instance, QAccessibleWidget reimplements this and returns the
            windowHandle() of the QWidget.</para>
            <para>It is used on some platforms to be able to notify the AT client
            about state changes. The backend will traverse up all ancestors until it
            finds a window. (This means that at least one interface among the ancestors
            should return a valid QWindow pointer).</para>
            <para>The default implementation returns 0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.Parent">
            <summary>
            <para>Returns the QAccessibleInterface of the parent in the accessible
            object hierarchy.</para>
            <para>Returns 0 if no parent exists (e.g. for the top level application
            object).</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.ChildCount">
            <summary>
            <para>Returns the number of children that belong to this object. A
            child can provide accessibility information on its own (e.g. a child
            widget), or be a sub-element of this accessible object.</para>
            <para>All objects provide this information.</para>
            <para>See also indexOfChild().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.Rect">
            <summary>
            <para>Returns the geometry of the object. The geometry is in screen
            coordinates.</para>
            <para>This function is only reliable for visible objects (invisible
            objects might not be laid out correctly).</para>
            <para>All visual objects provide this information.</para>
            <para>See also childAt().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.Role">
            <summary>
            <para>Returns the role of the object. The role of an object is usually
            static.</para>
            <para>All accessible objects have a role.</para>
            <para>See also text() and state().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.State">
            <summary>
            <para>Returns the current state of the object. The returned value is a
            combination of the flags in the QAccessible::StateFlag enumeration.</para>
            <para>All accessible objects have a state.</para>
            <para>See also text() and role().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.ForegroundColor">
            <summary>
            <para>Returns the accessible's foreground color if applicable or an
            invalid QColor.</para>
            <para>See also backgroundColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleInterface.BackgroundColor">
            <summary>
            <para>Returns the accessible's background color if applicable or an
            invalid QColor.</para>
            <para>See also foregroundColor().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextInterface">
            <summary>
            <para>The QAccessibleTextInterface class implements support for text
            handling.</para>
            </summary>
            <remarks>
            <para>This interface corresponds to the IAccessibleText interface. It
            should be implemented for widgets that display more text than a plain
            label. Labels should be represented by only QAccessibleInterface and return
            their text as name (QAccessibleInterface::text() with QAccessible::Name as
            type). The QAccessibleTextInterface is typically for text that a screen
            reader might want to read line by line, and for widgets that support text
            selection and input. This interface is, for example, implemented for
            QLineEdit.</para>
            <para>IAccessible2 Specification</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.Selection(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns a selection. The size of the selection is returned in
            startOffset and endOffset. If there is no selection both startOffset and
            endOffset are 0.</para>
            <para>The accessibility APIs support multiple selections. For most
            widgets though, only one selection is supported with selectionIndex equal
            to 0.</para>
            <para>See also setSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.AddSelection(System.Int32,System.Int32)">
            <summary>
            <para>Select the text from startOffset to endOffset. The startOffset is
            the first character that will be selected. The endOffset is the first
            character that will not be selected.</para>
            <para>When the object supports multiple selections (e.g. in a word
            processor), this adds a new selection, otherwise it replaces the previous
            selection.</para>
            <para>The selection will be endOffset - startOffset characters
            long.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.RemoveSelection(System.Int32)">
            <summary>
            <para>Clears the selection with index selectionIndex.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.SetSelection(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Set the selection selectionIndex to the range from startOffset to
            endOffset.</para>
            <para>See also selection(), addSelection(), and
            removeSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.Text(System.Int32,System.Int32)">
            <summary>
            <para>Returns the text from startOffset to endOffset. The startOffset
            is the first character that will be returned. The endOffset is the first
            character that will not be returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.TextBeforeOffset(System.Int32,QtGui.QAccessible.TextBoundaryType,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the text item of type boundaryType that is close to
            offset offset and sets startOffset and endOffset values to the start and
            end positions of that item; returns an empty string if there is no such an
            item. Sets startOffset and endOffset values to -1 on error.</para>
            <para>This default implementation is provided for small text edits. A
            word processor or text editor should provide their own efficient
            implementations. This function makes no distinction between paragraphs and
            lines.</para>
            <para>Note: this function can not take the cursor position into
            account. By convention an offset of -2 means that this function should use
            the cursor position as offset. Thus an offset of -2 must be converted to
            the cursor position before calling this function. An offset of -1 is used
            for the text length and custom implementations of this function have to
            return the result as if the length was passed in as offset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.TextAfterOffset(System.Int32,QtGui.QAccessible.TextBoundaryType,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the text item of type boundaryType that is right after
            offset offset and sets startOffset and endOffset values to the start and
            end positions of that item; returns an empty string if there is no such an
            item. Sets startOffset and endOffset values to -1 on error.</para>
            <para>This default implementation is provided for small text edits. A
            word processor or text editor should provide their own efficient
            implementations. This function makes no distinction between paragraphs and
            lines.</para>
            <para>Note: this function can not take the cursor position into
            account. By convention an offset of -2 means that this function should use
            the cursor position as offset. Thus an offset of -2 must be converted to
            the cursor position before calling this function. An offset of -1 is used
            for the text length and custom implementations of this function have to
            return the result as if the length was passed in as offset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.TextAtOffset(System.Int32,QtGui.QAccessible.TextBoundaryType,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the text item of type boundaryType at offset offset and
            sets startOffset and endOffset values to the start and end positions of
            that item; returns an empty string if there is no such an item. Sets
            startOffset and endOffset values to -1 on error.</para>
            <para>This default implementation is provided for small text edits. A
            word processor or text editor should provide their own efficient
            implementations. This function makes no distinction between paragraphs and
            lines.</para>
            <para>Note: this function can not take the cursor position into
            account. By convention an offset of -2 means that this function should use
            the cursor position as offset. Thus an offset of -2 must be converted to
            the cursor position before calling this function. An offset of -1 is used
            for the text length and custom implementations of this function have to
            return the result as if the length was passed in as offset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.CharacterRect(System.Int32)">
            <summary>
            <para>Returns the position and size of the character at position offset
            in screen coordinates.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.OffsetAtPoint(QtCore.QPoint)">
            <summary>
            <para>Returns the offset of the character at the point in screen
            coordinates.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.ScrollToSubstring(System.Int32,System.Int32)">
            <summary>
            <para>Ensures that the text between startIndex and endIndex is
            visible.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextInterface.Attributes(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>Returns the text attributes at the position offset. In addition
            the range of the attributes is returned in startOffset and
            endOffset.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextInterface.CursorPosition">
            <summary>
            <para>Returns the current cursor position.</para>
            <para>See also setCursorPosition().</para>
            <para></para>
            <para>Moves the cursor to position.</para>
            <para>See also cursorPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextInterface.SelectionCount">
            <summary>
            <para>Returns the number of selections in this text.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextInterface.CharacterCount">
            <summary>
            <para>Returns the length of the text (total size including
            spaces).</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleEditableTextInterface">
            <summary>
            <para>The QAccessibleEditableTextInterface class implements support for
            objects with editable text.</para>
            </summary>
            <remarks>
            <para>When implementing this interface you will almost certainly also
            want to implement QAccessibleTextInterface.</para>
            <para>IAccessible2 Specification</para>
            <para></para>
            <para>See also QAccessibleInterface.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleEditableTextInterface.DeleteText(System.Int32,System.Int32)">
            <summary>
            <para>Deletes the text from startOffset to endOffset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleEditableTextInterface.InsertText(System.Int32,System.String)">
            <summary>
            <para>Inserts text at position offset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleEditableTextInterface.ReplaceText(System.Int32,System.Int32,System.String)">
            <summary>
            <para>Removes the text from startOffset to endOffset and instead
            inserts text.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleValueInterface">
            <summary>
            <para>The QAccessibleValueInterface class implements support for
            objects that manipulate a value.</para>
            </summary>
            <remarks>
            <para>This interface should be implemented by accessible objects that
            represent a value. Examples are spinner, slider, dial and scroll
            bar.</para>
            <para>Instead of forcing the user to deal with the individual parts of
            the widgets, this interface gives an easier approach to the kind of widget
            it represents.</para>
            <para>Usually this interface is implemented by classes that also
            implement QAccessibleInterface.</para>
            <para>IAccessible2 Specification</para>
            </remarks>
        </member>
        <member name="P:QtGui.QAccessibleValueInterface.CurrentValue">
            <summary>
            <para>Returns the current value of the widget. This is usually a double
            or int.</para>
            <para>See also setCurrentValue().</para>
            <para></para>
            <para>Sets the value. If the desired value is out of the range of
            permissible values, this call will be ignored.</para>
            <para>See also currentValue(), minimumValue(), and
            maximumValue().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleValueInterface.MaximumValue">
            <summary>
            <para>Returns the maximum value this object accepts.</para>
            <para>See also minimumValue() and currentValue().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleValueInterface.MinimumValue">
            <summary>
            <para>Returns the minimum value this object accepts.</para>
            <para>See also maximumValue() and currentValue().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleValueInterface.MinimumStepSize">
            <summary>
            <para>Returns the minimum step size for the accessible. This is the
            smalles increment that makes sense when changing the value. When
            programatically changing the value it should always be a multiple of the
            minimum step size.</para>
            <para>Some tools use this value even when the setCurrentValue does not
            perform any action. Progress bars for example are read-only but should
            return their range divided by 100.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTableCellInterface">
            <summary>
            <para>The QAccessibleTableCellInterface class implements support for
            the IAccessibleTable2 Cell interface.</para>
            </summary>
            <remarks>
            <para>IAccessible2 Specification</para>
            </remarks>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.IsSelected">
            <summary>
            <para>Returns a boolean value indicating whether this cell is
            selected.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.ColumnIndex">
            <summary>
            <para>Translates this cell accessible into the corresponding column
            index.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.RowIndex">
            <summary>
            <para>Translates this cell accessible into the corresponding row
            index.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.ColumnExtent">
            <summary>
            <para>Returns the number of columns occupied by this cell
            accessible.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.RowExtent">
            <summary>
            <para>Returns the number of rows occupied by this cell
            accessible.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableCellInterface.Table">
            <summary>
            <para>Returns the QAccessibleInterface of the table containing this
            cell.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTableInterface">
            <summary>
            <para>The QAccessibleTableInterface class implements support for the
            IAccessibleTable2 interface.</para>
            </summary>
            <remarks>
            <para>IAccessible2 Specification</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.CellAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the cell at the specified row and column in the
            table.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.ColumnDescription(System.Int32)">
            <summary>
            <para>Returns the description text of the specified column in the
            table.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.RowDescription(System.Int32)">
            <summary>
            <para>Returns the description text of the specified row in the
            table.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.IsColumnSelected(System.Int32)">
            <summary>
            <para>Returns a boolean value indicating whether the specified column
            is completely selected.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.IsRowSelected(System.Int32)">
            <summary>
            <para>Returns a boolean value indicating whether the specified row is
            completely selected.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.SelectRow(System.Int32)">
            <summary>
            <para>Selects row. This function might unselect all previously selected
            rows. Returns true if the selection was successful.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.SelectColumn(System.Int32)">
            <summary>
            <para>Selects column. This function might unselect all previously
            selected columns. Returns true if the selection was successful.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.UnselectRow(System.Int32)">
            <summary>
            <para>Unselects row, leaving other selected rows selected (if any).
            Returns true if the selection was successful.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.UnselectColumn(System.Int32)">
            <summary>
            <para>Unselects column, leaving other selected columns selected (if
            any). Returns true if the selection was successful.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTableInterface.ModelChange(QtGui.QAccessibleTableModelChangeEvent)">
            <summary>
            <para>Informs about a change in the model's layout. The event contains
            the details.</para>
            <para>See also QAccessibleTableModelChangeEvent.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.Caption">
            <summary>
            <para>Returns the caption for the table.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.Summary">
            <summary>
            <para>Returns a QAccessibleInterface that represents a summary of the
            table. This function may return 0 if no such interface exists.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.SelectedCellCount">
            <summary>
            <para>Returns the total number of selected cells.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.SelectedColumnCount">
            <summary>
            <para>Returns the total number of selected columns.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.SelectedRowCount">
            <summary>
            <para>Returns the total number of selected rows.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.ColumnCount">
            <summary>
            <para>Returns the total number of columns in table.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableInterface.RowCount">
            <summary>
            <para>Returns the total number of rows in table.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleActionInterface">
            <summary>
            <para>The QAccessibleActionInterface class implements support for
            invocable actions in the interface.</para>
            </summary>
            <remarks>
            <para>Accessible objects should implement the action interface if they
            support user interaction. Usually this interface is implemented by classes
            that also implement QAccessibleInterface.</para>
            <para>The supported actions should use the predefined actions offered
            in this class unless they do not fit a predefined action. In that case a
            custom action can be added.</para>
            <para>When subclassing QAccessibleActionInterface you need to provide a
            list of actionNames which is the primary means to discover the available
            actions. Action names are never localized. In order to present actions to
            the user there are two functions that need to return localized versions of
            the name and give a description of the action. For the predefined action
            names use QAccessibleActionInterface::localizedActionName() and
            QAccessibleActionInterface::localizedActionDescription() to return their
            localized counterparts.</para>
            <para>In general you should use one of the predefined action names,
            unless describing an action that does not fit these:</para>
            <para></para>
            <para> Action nameDescription</para>
            <para>toggleAction()	toggles the item (checkbox, radio button, switch,
            ...)</para>
            <para>decreaseAction()	decrease the value of the accessible (e.g.
            spinbox)</para>
            <para>increaseAction()	increase the value of the accessible (e.g.
            spinbox)</para>
            <para>pressAction()	press or click or activate the accessible (should
            correspont to clicking the object with the mouse)</para>
            <para>setFocusAction()	set the focus to this accessible</para>
            <para>showMenuAction()	show a context menu, corresponds to
            right-clicks</para>
            <para></para>
            <para>In order to invoke the action, doAction() is called with an
            action name.</para>
            <para>Most widgets will simply implement pressAction(). This is what
            happens when the widget is activated by being clicked, space pressed or
            similar.</para>
            <para>IAccessible2 Specification</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.LocalizedActionName(System.String)">
            <summary>
            <para>Returns a localized action name of actionName.</para>
            <para>For custom actions this function has to be re-implemented. When
            using one of the default names, you can call this function in
            QAccessibleActionInterface to get the localized string.</para>
            <para>See also actionNames() and localizedActionDescription().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.LocalizedActionDescription(System.String)">
            <summary>
            <para>Returns a localized action description of the action
            actionName.</para>
            <para>When using one of the default names, you can call this function
            in QAccessibleActionInterface to get the localized string.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.DoAction(System.String)">
            <summary>
            <para>Invokes the action specified by actionName. Note that actionName
            is the non-localized name as returned by actionNames() This function is
            usually implemented by calling the same functions that other user
            interaction, such as clicking the object, would trigger.</para>
            <para>See also actionNames().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.KeyBindingsForAction(System.String)">
            <summary>
            <para>Returns a list of the keyboard shortcuts available for invoking
            the action named actionName.</para>
            <para>This is important to let users learn alternative ways of using
            the application by emphasizing the keyboard.</para>
            <para>See also actionNames().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.ShowMenuAction">
            <summary>
            <para>Returns the name of the show menu default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleActionInterface.SetFocusAction">
            <summary>
            <para>Returns the name of the set focus default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ActionNames">
            <summary>
            <para>Returns the list of actions supported by this accessible object.
            The actions returned should be in preferred order, i.e. the action that the
            user most likely wants to trigger should be returned first, while the least
            likely action should be returned last.</para>
            <para>The list does only contain actions that can be invoked. It won't
            return disabled actions, or actions associated with disabled UI
            controls.</para>
            <para>The list can be empty.</para>
            <para>Note that this list is not localized. For a localized
            representation re-implement localizedActionName() and
            localizedActionDescription()</para>
            <para>See also doAction(), localizedActionName(), and
            localizedActionDescription().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.PressAction">
            <summary>
            <para>Returns the name of the press default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.IncreaseAction">
            <summary>
            <para>Returns the name of the increase default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.DecreaseAction">
            <summary>
            <para>Returns the name of the decrease default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ToggleAction">
            <summary>
            <para>Returns the name of the toggle default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ScrollLeftAction">
            <summary>
            <para>Returns the name of the scroll left default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ScrollRightAction">
            <summary>
            <para>Returns the name of the scroll right default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ScrollUpAction">
            <summary>
            <para>Returns the name of the scroll up default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.ScrollDownAction">
            <summary>
            <para>Returns the name of the scroll down default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.NextPageAction">
            <summary>
            <para>Returns the name of the next page default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleActionInterface.PreviousPageAction">
            <summary>
            <para>Returns the name of the previous page default action.</para>
            <para>See also actionNames() and localizedActionName().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleEvent">
            <summary>
            <para>The QAccessibleEvent class is the base class for accessibility
            notifications.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            <para>The event type is one of the values of QAccessible::Event. There
            are a number of subclasses that should be used to provide more details
            about the event.</para>
            <para>For example to notify about a focus change when re-implementing
            QWidget::setFocus, the event could be used as follows:</para>
            <para>void MyWidget::setFocus(Qt::FocusReason reason)</para>
            <para>{</para>
            <para>    // handle custom focus setting...</para>
            <para>    QAccessibleEvent event(f, QAccessible::Focus);</para>
            <para>    QAccessible::updateAccessibility(&amp;event);</para>
            <para>}</para>
            <para>To enable in process screen readers, all events must be sent
            after the change has happened.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleEvent.#ctor(QtCore.QObject,QtGui.QAccessible.Event)">
            <summary>
            <para>Constructs a QAccessibleEvent to notify that object has changed.
            The event type describes what changed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleEvent.#ctor(QtGui.QAccessibleInterface,QtGui.QAccessible.Event)">
            <summary>
            <para>Constructs a QAccessibleEvent to notify that interface has
            changed. The event type describes what changed. Use this function if you
            already have a QAccessibleInterface or no QObject, otherwise consider the
            overload taking a QObject parameter as it might be cheaper.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleEvent.Child">
            <summary>
            <para>Returns the child index.</para>
            <para>See also setChild().</para>
            <para></para>
            <para>Sets the child index to child.</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleEvent.Type">
            <summary>
            <para>Returns the event type.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleEvent.Object">
            <summary>
            <para>Returns the event object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleEvent.AccessibleInterface">
            <summary>
            <para>Returns the QAccessibleInterface associated with the event. The
            caller of this function takes ownership of the returned interface.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleStateChangeEvent">
            <summary>
            <para>The QAccessibleStateChangeEvent notfies the accessibility
            framework that the state of an object has changed.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            <para></para>
            <para>See also QAccessibleInterface::state().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleStateChangeEvent.#ctor(QtCore.QObject,QtGui.QAccessible.State)">
            <summary>
            <para>Constructs a new QAccessibleStateChangeEvent for object. The
            difference to the object's previous state is in state.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleStateChangeEvent.#ctor(QtGui.QAccessibleInterface,QtGui.QAccessible.State)">
            <summary>
            <para>Constructs a new QAccessibleStateChangeEvent. iface is the
            interface associated with the event state is the state of the accessible
            object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleStateChangeEvent.ChangedStates">
            <summary>
            <para>Returns the states that have been changed.</para>
            <para>Be aware that the returned states are the ones that have changed,
            to find out about the state of an object, use
            QAccessibleInterface::state().</para>
            <para>For example, if an object used to have the focus but loses it,
            the object's state will have focused set to false. This event on the other
            hand tells about the change and has focused set to true since the focus
            state is changed from true to false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextCursorEvent">
            <summary>
            <para>The QAccessibleTextCursorEvent class notifies of cursor
            movements.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextCursorEvent.#ctor(QtCore.QObject,System.Int32)">
            <summary>
            <para>Create a new QAccessibleTextCursorEvent for object. The
            cursorPosition is the new cursor position.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextCursorEvent.CursorPosition">
            <summary>
            <para>Returns the cursor position.</para>
            <para>See also setCursorPosition().</para>
            <para></para>
            <para>Sets the cursor position for this event.</para>
            <para>See also cursorPosition().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextSelectionEvent">
            <summary>
            <para>QAccessibleTextSelectionEvent signals a change in the text
            selection of an object.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextSelectionEvent.#ctor(QtCore.QObject,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a new QAccessibleTextSelectionEvent for object. The
            new selection this event notifies about is from position start to
            end.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleTextSelectionEvent.SetSelection(System.Int32,System.Int32)">
            <summary>
            <para>Sets the selection for this event from position start to
            end.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextSelectionEvent.SelectionStart">
            <summary>
            <para>Returns the position of the first selected character.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextSelectionEvent.SelectionEnd">
            <summary>
            <para>Returns the position of the last selected character.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextInsertEvent">
            <summary>
            <para>The QAccessibleTextInsertEvent class notifies of text being
            inserted.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextInsertEvent.#ctor(QtCore.QObject,System.Int32,System.String)">
            <summary>
            <para>Constructs a new QAccessibleTextInsertEvent event for object. The
            text has been inserted at position. By default, it is assumed that the
            cursor has moved to the end of the selection. If that is not the case, one
            needs to manually set it with
            QAccessibleTextCursorEvent::setCursorPosition() for this event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextInsertEvent.TextInserted">
            <summary>
            <para>Returns the text that has been inserted.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextInsertEvent.ChangePosition">
            <summary>
            <para>Returns the position where the text was inserted.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextRemoveEvent">
            <summary>
            <para>The QAccessibleTextRemoveEvent class notifies of text being
            deleted.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextRemoveEvent.#ctor(QtCore.QObject,System.Int32,System.String)">
            <summary>
            <para>Constructs a new QAccessibleTextRemoveEvent event for object. The
            text has been removed at position. By default it is assumed that the cursor
            has moved to position. If that is not the case, one needs to manually set
            it with QAccessibleTextCursorEvent::setCursorPosition() for this
            event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextRemoveEvent.TextRemoved">
            <summary>
            <para>Returns the text that has been removed.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextRemoveEvent.ChangePosition">
            <summary>
            <para>Returns the position where the text was removed.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTextUpdateEvent">
            <summary>
            <para>The QAccessibleTextUpdateEvent class notifies about text changes.
            This is for accessibles that support editable text such as line edits. This
            event occurs for example when a portion of selected text gets replaced by
            pasting a new text or in override mode of editors.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTextUpdateEvent.#ctor(QtCore.QObject,System.Int32,System.String,System.String)">
            <summary>
            <para>Constructs a new QAccessibleTextUpdateEvent for object. The text
            change takes place at position where the oldText was removed and text
            inserted instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextUpdateEvent.TextRemoved">
            <summary>
            <para>Returns the removed text.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextUpdateEvent.TextInserted">
            <summary>
            <para>Returns the inserted text.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTextUpdateEvent.ChangePosition">
            <summary>
            <para>Returns where the change took place.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleValueChangeEvent">
            <summary>
            <para>The QAccessibleValueChangeEvent describes a change in value for
            an accessible object.</para>
            </summary>
            <remarks>
            <para>It contains the new value.</para>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleValueChangeEvent.#ctor(QtCore.QObject,QtCore.QVariant)">
            <summary>
            <para>Constructs a new QAccessibleValueChangeEvent for object. The
            event contains the new value.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleValueChangeEvent.Value">
            <summary>
            <para>Returns the new value of the accessible object of this
            event.</para>
            <para>See also setValue().</para>
            <para></para>
            <para>Sets the new value for this event.</para>
            <para>See also value().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTableModelChangeEvent">
            <summary>
            <para>The QAccessibleTableModelChangeEvent signifies a change in a
            table, list, or tree where cells are added or removed. If the change
            affected a number of rows, firstColumn and lastColumn will return -1.
            Likewise for columns, the row functions may return -1.</para>
            </summary>
            <remarks>
            <para>This class is used with
            QAccessible::updateAccessibility().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleTableModelChangeEvent.#ctor(QtCore.QObject,QtGui.QAccessibleTableModelChangeEvent.ModelChangeType)">
            <summary>
            <para>Constructs a new QAccessibleTableModelChangeEvent for object of
            with changeType.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableModelChangeEvent.modelChangeType">
            <summary>
            <para>Returns the type of change.</para>
            <para>See also setModelChangeType().</para>
            <para></para>
            <para>Sets the type of change to changeType.</para>
            <para>See also modelChangeType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableModelChangeEvent.FirstRow">
            <summary>
            <para>Returns the first changed row.</para>
            <para>See also setFirstRow().</para>
            <para></para>
            <para>Sets the first changed row.</para>
            <para>See also firstRow().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableModelChangeEvent.FirstColumn">
            <summary>
            <para>Returns the first changed column.</para>
            <para>See also setFirstColumn().</para>
            <para></para>
            <para>Sets the first changed column.</para>
            <para>See also firstColumn().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableModelChangeEvent.LastRow">
            <summary>
            <para>Returns the last changed row.</para>
            <para>See also setLastRow().</para>
            <para></para>
            <para>Sets the last changed row.</para>
            <para>See also lastRow().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleTableModelChangeEvent.LastColumn">
            <summary>
            <para>Returns the last changed column.</para>
            <para>See also setLastColumn().</para>
            <para></para>
            <para>Sets the last changed column.</para>
            <para>See also lastColumn().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType">
            <summary>
            <para>This enum describes different types of changes in the table
            model.</para>
            </summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.ModelReset">
            <summary>The model has been reset, all previous knowledge about the model is now invalid.</summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.DataChanged">
            <summary>No cells have been added or removed, but the data of the specified cell range is invalid.</summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.RowsInserted">
            <summary>New rows have been inserted.</summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.ColumnsInserted">
            <summary>New columns have been inserted.</summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.RowsRemoved">
            <summary>Rows have been removed.</summary>
        </member>
        <member name="F:QtGui.QAccessibleTableModelChangeEvent.ModelChangeType.ColumnsRemoved">
            <summary>Columns have been removed.</summary>
        </member>
        <member name="T:QtGui.QAccessibleObject">
            <summary>
            <para>The QAccessibleObject class implements parts of the
            QAccessibleInterface for QObjects.</para>
            </summary>
            <remarks>
            <para>This class is part of Accessibility for QWidget
            Applications.</para>
            <para>This class is mainly provided for convenience. All subclasses of
            the QAccessibleInterface that provide implementations of non-widget objects
            should use this class as their base class.</para>
            <para></para>
            <para>See also QAccessible and QAccessibleWidget.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessibleObject.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a QAccessibleObject for object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleObject.SetText(QtGui.QAccessible.Text,System.String)">
            <summary>
            <para>Reimplemented from QAccessibleInterface::setText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessibleObject.ChildAt(System.Int32,System.Int32)">
            <summary>
            <para>Reimplemented from QAccessibleInterface::childAt().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleObject.IsValid">
            <summary>
            <para>Reimplemented from QAccessibleInterface::isValid().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleObject.Object">
            <summary>
            <para>Reimplemented from QAccessibleInterface::object().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAccessibleObject.Rect">
            <summary>
            <para>Reimplemented from QAccessibleInterface::rect().</para>
            </summary>
        </member>
        <member name="T:QtGui.QAccessiblePlugin">
            <summary>
            <para>The QAccessiblePlugin class provides an abstract base class for
            plugins provinding accessibility information for user interface
            elements.</para>
            </summary>
            <remarks>
            <para>Writing an accessibility plugin is achieved by subclassing this
            base class, reimplementing the pure virtual function create(), and
            exporting the class with the Q_PLUGIN_METADATA() macro.</para>
            <para></para>
            <para>See also How to Create Qt Plugins.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAccessiblePlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an accessibility plugin with the given parent. This is
            invoked automatically by the plugin loader.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAccessiblePlugin.Create(System.String,QtCore.QObject)">
            <summary>
            <para>Creates and returns a QAccessibleInterface implementation for the
            class key and the object object. Keys are case sensitive.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPaintDevice">
            <summary>
            <para>The QPaintDevice class is the base class of objects that can be
            painted on with QPainter.</para>
            </summary>
            <remarks>
            <para>A paint device is an abstraction of a two-dimensional space that
            can be drawn on using a QPainter. Its default coordinate system has its
            origin located at the top-left position. X increases to the right and Y
            increases downwards. The unit is one pixel.</para>
            <para>The drawing capabilities of QPaintDevice are currently
            implemented by the QWidget, QImage, QPixmap, QGLPixelBuffer, QPicture, and
            QPrinter subclasses.</para>
            <para>To implement support for a new backend, you must derive from
            QPaintDevice and reimplement the virtual paintEngine() function to tell
            QPainter which paint engine should be used to draw on this particular
            device. Note that you also must create a corresponding paint engine to be
            able to draw on the device, i.e derive from QPaintEngine and reimplement
            its virtual functions.</para>
            <para>Warning: Qt requires that a QGuiApplication object exists before
            any paint devices can be created. Paint devices access window system
            resources, and these resources are not initialized before an application
            object is created.</para>
            <para>The QPaintDevice class provides several functions returning the
            various device metrics: The depth() function returns its bit depth (number
            of bit planes). The height() function returns its height in default
            coordinate system units (e.g. pixels for QPixmap and QWidget) while
            heightMM() returns the height of the device in millimeters. Similiarily,
            the width() and widthMM() functions return the width of the device in
            default coordinate system units and in millimeters, respectively.
            Alternatively, the protected metric() function can be used to retrieve the
            metric information by specifying the desired PaintDeviceMetric as
            argument.</para>
            <para>The logicalDpiX() and logicalDpiY() functions return the
            horizontal and vertical resolution of the device in dots per inch. The
            physicalDpiX() and physicalDpiY() functions also return the resolution of
            the device in dots per inch, but note that if the logical and physical
            resolution differ, the corresponding QPaintEngine must handle the mapping.
            Finally, the colorCount() function returns the number of different colors
            available for the paint device.</para>
            <para></para>
            <para>See also QPaintEngine, QPainter, Coordinate System, and Paint
            System.</para>
            </remarks>
        </member>
        <member name="T:QtGui.IQPaintDevice">
            <summary>
            <para>The QPaintDevice class is the base class of objects that can be
            painted on with QPainter.</para>
            </summary>
            <remarks>
            <para>A paint device is an abstraction of a two-dimensional space that
            can be drawn on using a QPainter. Its default coordinate system has its
            origin located at the top-left position. X increases to the right and Y
            increases downwards. The unit is one pixel.</para>
            <para>The drawing capabilities of QPaintDevice are currently
            implemented by the QWidget, QImage, QPixmap, QGLPixelBuffer, QPicture, and
            QPrinter subclasses.</para>
            <para>To implement support for a new backend, you must derive from
            QPaintDevice and reimplement the virtual paintEngine() function to tell
            QPainter which paint engine should be used to draw on this particular
            device. Note that you also must create a corresponding paint engine to be
            able to draw on the device, i.e derive from QPaintEngine and reimplement
            its virtual functions.</para>
            <para>Warning: Qt requires that a QGuiApplication object exists before
            any paint devices can be created. Paint devices access window system
            resources, and these resources are not initialized before an application
            object is created.</para>
            <para>The QPaintDevice class provides several functions returning the
            various device metrics: The depth() function returns its bit depth (number
            of bit planes). The height() function returns its height in default
            coordinate system units (e.g. pixels for QPixmap and QWidget) while
            heightMM() returns the height of the device in millimeters. Similiarily,
            the width() and widthMM() functions return the width of the device in
            default coordinate system units and in millimeters, respectively.
            Alternatively, the protected metric() function can be used to retrieve the
            metric information by specifying the desired PaintDeviceMetric as
            argument.</para>
            <para>The logicalDpiX() and logicalDpiY() functions return the
            horizontal and vertical resolution of the device in dots per inch. The
            physicalDpiX() and physicalDpiY() functions also return the resolution of
            the device in dots per inch, but note that if the logical and physical
            resolution differ, the corresponding QPaintEngine must handle the mapping.
            Finally, the colorCount() function returns the number of different colors
            available for the paint device.</para>
            <para></para>
            <para>See also QPaintEngine, QPainter, Coordinate System, and Paint
            System.</para>
            </remarks>
        </member>
        <member name="P:QtGui.IQPaintDevice.PaintingActive">
            <summary>
            <para>Returns true if the device is currently being painted on, i.e.
            someone has called QPainter::begin() but not yet called QPainter::end() for
            this device; otherwise returns false.</para>
            <para>See also QPainter::isActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.PaintEngine">
            <summary>
            <para>Returns a pointer to the paint engine used for drawing on the
            device.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.Width">
            <summary>
            <para>Returns the width of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also widthMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.Height">
            <summary>
            <para>Returns the height of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also heightMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.WidthMM">
            <summary>
            <para>Returns the width of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.HeightMM">
            <summary>
            <para>Returns the height of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.LogicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from widthMM().</para>
            <para>Note that if the logicalDpiX() doesn't equal the physicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiY() and physicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.LogicalDpiY">
            <summary>
            <para>Returns the vertical resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from heightMM().</para>
            <para>Note that if the logicalDpiY() doesn't equal the physicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiX() and physicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.PhysicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiX() doesn't equal the logicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiY() and logicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.PhysicalDpiY">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiY() doesn't equal the logicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiX() and logicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for device.</para>
            <para>Common values are 1 for normal-dpi displays and 2 for high-dpi
            &quot;retina&quot; displays.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.ColorCount">
            <summary>
            <para>Returns the number of different colors available for the paint
            device. If the number of colors available is too great to be represented by
            the int data type, then INT_MAX will be returned instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPaintDevice.Depth">
            <summary>
            <para>Returns the bit depth (number of bit planes) of the paint
            device.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintDevice.#ctor">
            <summary>
            <para>Constructs a paint device. This constructor can be invoked only
            from subclasses of QPaintDevice.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintDevice.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
            <para>Returns the metric information for the given paint device
            metric.</para>
            <para>See also PaintDeviceMetric.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.PaintingActive">
            <summary>
            <para>Returns true if the device is currently being painted on, i.e.
            someone has called QPainter::begin() but not yet called QPainter::end() for
            this device; otherwise returns false.</para>
            <para>See also QPainter::isActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.PaintEngine">
            <summary>
            <para>Returns a pointer to the paint engine used for drawing on the
            device.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.Width">
            <summary>
            <para>Returns the width of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also widthMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.Height">
            <summary>
            <para>Returns the height of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also heightMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.WidthMM">
            <summary>
            <para>Returns the width of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.HeightMM">
            <summary>
            <para>Returns the height of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.LogicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from widthMM().</para>
            <para>Note that if the logicalDpiX() doesn't equal the physicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiY() and physicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.LogicalDpiY">
            <summary>
            <para>Returns the vertical resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from heightMM().</para>
            <para>Note that if the logicalDpiY() doesn't equal the physicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiX() and physicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.PhysicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiX() doesn't equal the logicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiY() and logicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.PhysicalDpiY">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiY() doesn't equal the logicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiX() and logicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for device.</para>
            <para>Common values are 1 for normal-dpi displays and 2 for high-dpi
            &quot;retina&quot; displays.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.ColorCount">
            <summary>
            <para>Returns the number of different colors available for the paint
            device. If the number of colors available is too great to be represented by
            the int data type, then INT_MAX will be returned instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDevice.Depth">
            <summary>
            <para>Returns the bit depth (number of bit planes) of the paint
            device.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPaintDevice.PaintDeviceMetric">
            <summary>
            <para>Describes the various metrics of a paint device.</para>
            <para>See also metric().</para>
            </summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmWidth">
            <summary>The width of the paint device in default coordinate system units (e.g. pixels for QPixmap and QWidget). See also width().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmHeight">
            <summary>The height of the paint device in default coordinate system units (e.g. pixels for QPixmap and QWidget). See also height().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmWidthMM">
            <summary>The width of the paint device in millimeters. See also widthMM().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmHeightMM">
            <summary>The height of the paint device in millimeters. See also heightMM().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmNumColors">
            <summary>The number of different colors available for the paint device. See also colorCount().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmDepth">
            <summary>The bit depth (number of bit planes) of the paint device. See also depth().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmDpiX">
            <summary>The horizontal resolution of the device in dots per inch. See also logicalDpiX().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmDpiY">
            <summary>The vertical resolution of the device in dots per inch. See also logicalDpiY().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmPhysicalDpiX">
            <summary>The horizontal resolution of the device in dots per inch. See also physicalDpiX().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmPhysicalDpiY">
            <summary>The vertical resolution of the device in dots per inch. See also physicalDpiY().</summary>
        </member>
        <member name="F:QtGui.QPaintDevice.PaintDeviceMetric.PdmDevicePixelRatio">
            <summary>The device pixel ratio for device. Common values are 1 for normal-dpi displays and 2 for high-dpi "retina" displays.</summary>
        </member>
        <member name="T:QtGui.QPolygon">
            <summary>
            <para>The QPolygon class provides a vector of points using integer
            precision.</para>
            </summary>
            <remarks>
            <para>A QPolygon object is a QVector&lt;QPoint&gt;. The easiest way to
            add points to a QPolygon is to use QVector's streaming operator, as
            illustrated below:</para>
            <para>        QPolygon polygon;</para>
            <para>        polygon &lt;&lt; QPoint(10, 20) &lt;&lt; QPoint(20,
            30);</para>
            <para>In addition to the functions provided by QVector, QPolygon
            provides some point-specific functions.</para>
            <para>Each point in a polygon can be retrieved by passing its index to
            the point() function. To populate the polygon, QPolygon provides the
            setPoint() function to set the point at a given index, the setPoints()
            function to set all the points in the polygon (resizing it to the given
            number of points), and the putPoints() function which copies a number of
            given points into the polygon from a specified index (resizing the polygon
            if necessary).</para>
            <para>QPolygon provides the boundingRect() and translate() functions
            for geometry functions. Use the QMatrix::map() function for more general
            transformations of QPolygons.</para>
            <para>The QPolygon class is implicitly shared.</para>
            <para></para>
            <para>See also QVector, QPolygonF, and QLine.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPolygon.#ctor">
            <summary>
            <para>Constructs a polygon with no points.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.#ctor(System.Int32)">
            <summary>
            <para>Constructs a polygon of the given size. Creates an empty polygon
            if size == 0.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.#ctor(QtGui.QPolygon)">
            <summary>
            <para>Constructs a copy of the given polygon.</para>
            <para>See also setPoints().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.#ctor(QtCore.QRect,System.Boolean)">
            <summary>
            <para>Constructs a polygon from the given rectangle. If closed is
            false, the polygon just contains the four points of the rectangle ordered
            clockwise, otherwise the polygon's fifth point is set to
            rectangle.topLeft().</para>
            <para>Note that the bottom-right corner of the rectangle is located at
            (rectangle.x() + rectangle.width(), rectangle.y() +
            rectangle.height()).</para>
            <para>See also setPoints().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Swap(QtGui.QPolygon)">
            <summary>
            <para>Swaps polygon other with this polygon. This operation is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.op_Implicit(QtGui.QPolygon)~QtCore.QVariant">
            <summary>
            <para>Returns the polygon as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Translate(System.Int32,System.Int32)">
            <summary>
            <para>Translates all points in the polygon by (dx, dy).</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Translate(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates all points in the polygon by the given offset.</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Translated(System.Int32,System.Int32)">
            <summary>
            <para>Returns a copy of the polygon that is translated by (dx,
            dy).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Translated(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the polygon that is translated by the given
            offset.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Point(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>Extracts the coordinates of the point at the given index to *x
            and *y (if they are valid pointers).</para>
            <para>See also setPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Point(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the point at the given index.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.SetPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the point at the given index to the point specified by (x,
            y).</para>
            <para>See also point(), putPoints(), and setPoints().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.SetPoint(System.Int32,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the point at the given index to the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.SetPoints(System.Int32,System.Int32@)">
            <summary>
            <para>Resizes the polygon to nPoints and populates it with the given
            points.</para>
            <para>The example code creates a polygon with two points (10, 20) and
            (30, 40):</para>
            <para>        static const int points[] = { 10, 20, 30, 40 };</para>
            <para>        QPolygon polygon;</para>
            <para>        polygon.setPoints(2, points);</para>
            <para>See also setPoint() and putPoints().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.SetPoints(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Resizes the polygon to nPoints and populates it with the points
            specified by the variable argument list. The points are given as a sequence
            of integers, starting with firstx then firsty, and so on.</para>
            <para>The example code creates a polygon with two points (10, 20) and
            (30, 40):</para>
            <para>        QPolygon polygon;</para>
            <para>        polygon.setPoints(2, 10, 20, 30, 40);</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.PutPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Copies nPoints points from the variable argument list into this
            polygon from the given index.</para>
            <para>The points are given as a sequence of integers, starting with
            firstx then firsty, and so on. The polygon is resized if index+nPoints
            exceeds its current size.</para>
            <para>The example code creates a polygon with three points (4,5), (6,7)
            and (8,9), by expanding the polygon from 1 to 3 points:</para>
            <para>        QPolygon polygon(1);</para>
            <para>        polygon[0] = QPoint(4, 5);</para>
            <para>        polygon.putPoints(1, 2, 6,7, 8,9);</para>
            <para>The following code has the same result, but here the putPoints()
            function overwrites rather than extends:</para>
            <para>        QPolygon polygon(3);</para>
            <para>        polygon.putPoints(0, 3, 4,5, 0,0, 8,9);</para>
            <para>        polygon.putPoints(1, 1, 6,7);</para>
            <para>See also setPoints().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.PutPoints(System.Int32,System.Int32,QtGui.QPolygon,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Copies nPoints points from the given fromIndex ( 0 by default) in
            fromPolygon into this polygon, starting at the specified index. For
            example:</para>
            <para>        QPolygon polygon1;</para>
            <para>        polygon1.putPoints(0, 3, 1,2, 0,0, 5,6);</para>
            <para>        // polygon1 is now the three-point polygon(1,2, 0,0,
            5,6);</para>
            <para></para>
            <para>        QPolygon polygon2;</para>
            <para>        polygon2.putPoints(0, 3, 4,4, 5,5, 6,6);</para>
            <para>        // polygon2 is now (4,4, 5,5, 6,6);</para>
            <para></para>
            <para>        polygon1.putPoints(2, 3, polygon2);</para>
            <para>        // polygon1 is now the five-point polygon(1,2, 0,0, 4,4,
            5,5, 6,6);</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.ContainsPoint(QtCore.QPoint,QtCore.Qt.FillRule)">
            <summary>
            <para>Returns true if the given point is inside the polygon according
            to the specified fillRule; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.United(QtGui.QPolygon)">
            <summary>
            <para>Returns a polygon which is the union of this polygon and
            r.</para>
            <para>Set operations on polygons, will treat the polygons as areas, and
            implicitly close the polygon.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also intersected() and subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Intersected(QtGui.QPolygon)">
            <summary>
            <para>Returns a polygon which is the intersection of this polygon and
            r.</para>
            <para>Set operations on polygons will treat the polygons as areas.
            Non-closed polygons will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.Subtracted(QtGui.QPolygon)">
            <summary>
            <para>Returns a polygon which is r subtracted from this polygon.</para>
            <para>Set operations on polygons will treat the polygons as areas.
            Non-closed polygons will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.op_Multiply(QtGui.QPolygon,QtGui.QMatrix)">
            <summary>
            <para>This is the same as matrix.map(polygon).</para>
            <para>See also QMatrix::map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygon.op_Multiply(QtGui.QPolygon,QtGui.QTransform)">
            <summary>
            <para>This is the same as matrix.map(polygon).</para>
            <para>See also QTransform::map().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPolygon.BoundingRect">
            <summary>
            <para>Returns the bounding rectangle of the polygon, or QRect(0, 0, 0,
            0) if the polygon is empty.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPolygonF">
            <summary>
            <para>The QPolygonF class provides a vector of points using floating
            point precision.</para>
            </summary>
            <remarks>
            <para>A QPolygonF is a QVector&lt;QPointF&gt;. The easiest way to add
            points to a QPolygonF is to use its streaming operator, as illustrated
            below:</para>
            <para>        QPolygonF polygon;</para>
            <para>        polygon &lt;&lt; QPointF(10.4, 20.5) &lt;&lt;
            QPointF(20.2, 30.2);</para>
            <para>In addition to the functions provided by QVector, QPolygonF
            provides the boundingRect() and translate() functions for geometry
            operations. Use the QMatrix::map() function for more general
            transformations of QPolygonFs.</para>
            <para>QPolygonF also provides the isClosed() function to determine
            whether a polygon's start and end points are the same, and the toPolygon()
            function returning an integer precision copy of this polygon.</para>
            <para>The QPolygonF class is implicitly shared.</para>
            <para></para>
            <para>See also QVector, QPolygon, and QLineF.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPolygonF.#ctor">
            <summary>
            <para>Constructs a polygon with no points.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.#ctor(System.Int32)">
            <summary>
            <para>Constructs a polygon of the given size. Creates an empty polygon
            if size == 0.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.#ctor(QtGui.QPolygonF)">
            <summary>
            <para>Constructs a copy of the given polygon.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.#ctor(QtCore.QRectF)">
            <summary>
            <para>Constructs a closed polygon from the specified rectangle.</para>
            <para>The polygon contains the four vertices of the rectangle in
            clockwise order starting and ending with the top-left vertex.</para>
            <para>See also isClosed().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.#ctor(QtGui.QPolygon)">
            <summary>
            <para>Constructs a float based polygon from the specified integer based
            polygon.</para>
            <para>See also toPolygon().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Swap(QtGui.QPolygonF)">
            <summary>
            <para>Swaps polygon other with this polygon. This operation is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.op_Implicit(QtGui.QPolygonF)~QtCore.QVariant">
            <summary>
            <para>Returns the polygon as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Translate(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates all points in the polygon by (dx, dy).</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Translate(QtCore.QPointF)">
            <summary>
            <para>Translate all points in the polygon by the given offset.</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Translated(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the polygon that is translated by (dx,
            dy).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Translated(QtCore.QPointF)">
            <summary>
            <para>Returns a copy of the polygon that is translated by the given
            offset.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.ToPolygon">
            <summary>
            <para>Creates and returns a QPolygon by converting each QPointF to a
            QPoint.</para>
            <para>See also QPointF::toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.ContainsPoint(QtCore.QPointF,QtCore.Qt.FillRule)">
            <summary>
            <para>Returns true if the given point is inside the polygon according
            to the specified fillRule; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.United(QtGui.QPolygonF)">
            <summary>
            <para>Returns a polygon which is the union of this polygon and
            r.</para>
            <para>Set operations on polygons will treat the polygons as areas.
            Non-closed polygons will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also intersected() and subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Intersected(QtGui.QPolygonF)">
            <summary>
            <para>Returns a polygon which is the intersection of this polygon and
            r.</para>
            <para>Set operations on polygons will treat the polygons as areas.
            Non-closed polygons will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.Subtracted(QtGui.QPolygonF)">
            <summary>
            <para>Returns a polygon which is r subtracted from this polygon.</para>
            <para>Set operations on polygons will treat the polygons as areas.
            Non-closed polygons will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.op_Multiply(QtGui.QPolygonF,QtGui.QMatrix)">
            <summary>
            <para>This is the same as matrix.map(polygon).</para>
            <para>See also QMatrix::map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPolygonF.op_Multiply(QtGui.QPolygonF,QtGui.QTransform)">
            <summary>
            <para>This is the same as matrix.map(polygon).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QTransform::map().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPolygonF.IsClosed">
            <summary>
            <para>Returns true if the polygon is closed; otherwise returns
            false.</para>
            <para>A polygon is said to be closed if its start point and end point
            are equal.</para>
            <para>See also QVector::first() and QVector::last().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPolygonF.BoundingRect">
            <summary>
            <para>Returns the bounding rectangle of the polygon, or QRectF(0,0,0,0)
            if the polygon is empty.</para>
            <para>See also QVector::isEmpty().</para>
            </summary>
        </member>
        <member name="T:QtGui.QMatrix">
            <summary>
            <para>The QMatrix class specifies 2D transformations of a coordinate
            system.</para>
            </summary>
            <remarks>
            <para>A matrix specifies how to translate, scale, shear or rotate the
            coordinate system, and is typically used when rendering graphics. QMatrix,
            in contrast to QTransform, does not allow perspective transformations.
            QTransform is the recommended transformation class in Qt.</para>
            <para>A QMatrix object can be built using the setMatrix(), scale(),
            rotate(), translate() and shear() functions. Alternatively, it can be built
            by applying basic matrix operations. The matrix can also be defined when
            constructed, and it can be reset to the identity matrix (the default) using
            the reset() function.</para>
            <para>The QMatrix class supports mapping of graphic primitives: A given
            point, line, polygon, region, or painter path can be mapped to the
            coordinate system defined by this matrix using the map() function. In case
            of a rectangle, its coordinates can be transformed using the mapRect()
            function. A rectangle can also be transformed into a polygon (mapped to the
            coordinate system defined by this matrix), using the mapToPolygon()
            function.</para>
            <para>QMatrix provides the isIdentity() function which returns true if
            the matrix is the identity matrix, and the isInvertible() function which
            returns true if the matrix is non-singular (i.e. AB = BA = I). The
            inverted() function returns an inverted copy of this matrix if it is
            invertible (otherwise it returns the identity matrix). In addition, QMatrix
            provides the determinant() function returning the matrix's
            determinant.</para>
            <para>Finally, the QMatrix class supports matrix multiplication, and
            objects of the class can be streamed as well as compared.</para>
            <para></para>
            <para>Rendering Graphics</para>
            <para>When rendering graphics, the matrix defines the transformations
            but the actual transformation is performed by the drawing routines in
            QPainter.</para>
            <para>By default, QPainter operates on the associated device's own
            coordinate system. The standard coordinate system of a QPaintDevice has its
            origin located at the top-left position. The x values increase to the
            right; y values increase downward. For a complete description, see the
            coordinate system documentation.</para>
            <para>QPainter has functions to translate, scale, shear and rotate the
            coordinate system without using a QMatrix. For example:</para>
            <para></para>
            <para> 	void SimpleTransformation::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    painter.rotate(45);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QMatrix&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>Although these functions are very convenient, it can be more
            efficient to build a QMatrix and call QPainter::setMatrix() if you want to
            perform more than a single transform operation. For example:</para>
            <para></para>
            <para> 	void CombinedTransformation::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    QMatrix matrix;</para>
            <para>    matrix.translate(50, 50);</para>
            <para>    matrix.rotate(45);</para>
            <para>    matrix.scale(0.5, 1.0);</para>
            <para>    painter.setMatrix(matrix);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QMatrix&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Basic Matrix Operations</para>
            <para></para>
            <para>A QMatrix object contains a 3 x 3 matrix. The dx and dy elements
            specify horizontal and vertical translation. The m11 and m22 elements
            specify horizontal and vertical scaling. And finally, the m21 and m12
            elements specify horizontal and vertical shearing.</para>
            <para>QMatrix transforms a point in the plane to another point using
            the following formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>The point (x, y) is the original point, and (x', y') is the
            transformed point. (x', y') can be transformed back to (x, y) by performing
            the same operation on the inverted() matrix.</para>
            <para>The various matrix elements can be set when constructing the
            matrix, or by using the setMatrix() function later on. They can also be
            manipulated using the translate(), rotate(), scale() and shear()
            convenience functions, The currently set values can be retrieved using the
            m11(), m12(), m21(), m22(), dx() and dy() functions.</para>
            <para>Translation is the simplest transformation. Setting dx and dy
            will move the coordinate system dx units along the X axis and dy units
            along the Y axis. Scaling can be done by setting m11 and m22. For example,
            setting m11 to 2 and m22 to 1.5 will double the height and increase the
            width by 50%. The identity matrix has m11 and m22 set to 1 (all others are
            set to 0) mapping a point to itself. Shearing is controlled by m12 and m21.
            Setting these elements to values different from zero will twist the
            coordinate system. Rotation is achieved by carefully setting both the
            shearing factors and the scaling factors.</para>
            <para>Here's the combined transformations example using basic matrix
            operations:</para>
            <para></para>
            <para> 	void BasicOperations::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    double pi = 3.14;</para>
            <para></para>
            <para>    double a    = pi/180 * 45.0;</para>
            <para>    double sina = sin(a);</para>
            <para>    double cosa = cos(a);</para>
            <para></para>
            <para>    QMatrix translationMatrix(1, 0, 0, 1, 50.0, 50.0);</para>
            <para>    QMatrix rotationMatrix(cosa, sina, -sina, cosa, 0, 0);</para>
            <para>    QMatrix scalingMatrix(0.5, 0, 0, 1.0, 0, 0);</para>
            <para></para>
            <para>    QMatrix matrix;</para>
            <para>    matrix =  scalingMatrix * rotationMatrix *
            translationMatrix;</para>
            <para></para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    painter.setMatrix(matrix);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QMatrix&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPainter, QTransform, Coordinate System, Affine
            Transformations Example, and Transformations Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QMatrix.#ctor">
            <summary>
            <para>Constructs an identity matrix.</para>
            <para>All elements are set to zero except m11 and m22 (specifying the
            scale), which are set to 1.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a matrix with the elements, m11, m12, m21, m22, dx and
            dy.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.#ctor(QtGui.QMatrix)">
            <summary>
            <para>Constructs a matrix that is a copy of the given matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.SetMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the matrix elements to the specified values, m11, m12, m21,
            m22, dx and dy.</para>
            <para>Note that this function replaces the previous values. QMatrix
            provide the translate(), rotate(), scale() and shear() convenience
            functions to manipulate the various matrix elements based on the currently
            defined coordinate system.</para>
            <para>See also QMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Maps the given coordinates x and y into the coordinate system
            defined by this matrix. The resulting values are put in *tx and *ty,
            respectively. Note that the transformed coordinates are rounded to the
            nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given coordinates x and y into the coordinate system
            defined by this matrix. The resulting values are put in *tx and *ty,
            respectively.</para>
            <para>The coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>The point (x, y) is the original point, and (x', y') is the
            transformed point.</para>
            <para>See also Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.MapRect(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QRect object that is a copy of the given
            rectangle, mapped into the coordinate system defined by this matrix. Note
            that the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.MapRect(QtCore.QRectF)">
            <summary>
            <para>Creates and returns a QRectF object that is a copy of the given
            rectangle, mapped into the coordinate system defined by this matrix.</para>
            <para>The rectangle's coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>If rotation or shearing has been specified, this function returns
            the bounding rectangle. To retrieve the exact region the given rectangle
            maps to, use the mapToPolygon() function instead.</para>
            <para>See also mapToPolygon() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPoint object that is a copy of the given
            point, mapped into the coordinate system defined by this matrix. Note that
            the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPointF object that is a copy of the given
            point, mapped into the coordinate system defined by this matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtCore.QLine)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QLine object that is a copy of the given
            line, mapped into the coordinate system defined by this matrix. Note that
            the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtCore.QLineF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QLineF object that is a copy of the given
            line, mapped into the coordinate system defined by this matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtGui.QPolygonF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPolygonF object that is a copy of the
            given polygon, mapped into the coordinate system defined by this
            matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtGui.QPolygon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPolygon object that is a copy of the given
            polygon, mapped into the coordinate system defined by this matrix. Note
            that the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtGui.QRegion)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QRegion object that is a copy of the given
            region, mapped into the coordinate system defined by this matrix.</para>
            <para>Calling this method can be rather expensive if rotations or
            shearing are used.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Map(QtGui.QPainterPath)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPainterPath object that is a copy of the
            given path, mapped into the coordinate system defined by this
            matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.MapToPolygon(QtCore.QRect)">
            <summary>
            <para>Creates and returns a QPolygon representation of the given
            rectangle, mapped into the coordinate system defined by this matrix.</para>
            <para>The rectangle's coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>Polygons and rectangles behave slightly differently when
            transformed (due to integer rounding), so matrix.map(QPolygon(rectangle))
            is not always the same as matrix.mapToPolygon(rectangle).</para>
            <para>See also mapRect() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Reset">
            <summary>
            <para>Resets the matrix to an identity matrix, i.e. all elements are
            set to zero, except m11 and m22 (specifying the scale) which are set to
            1.</para>
            <para>See also QMatrix(), isIdentity(), and Basic Matrix
            Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Translate(System.Double,System.Double)">
            <summary>
            <para>Moves the coordinate system dx along the x axis and dy along the
            y axis, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Scale(System.Double,System.Double)">
            <summary>
            <para>Scales the coordinate system by sx horizontally and sy
            vertically, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Shear(System.Double,System.Double)">
            <summary>
            <para>Shears the coordinate system by sh horizontally and sv
            vertically, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Rotate(System.Double)">
            <summary>
            <para>Rotates the coordinate system the given degrees
            counterclockwise.</para>
            <para>Note that if you apply a QMatrix to a point defined in widget
            coordinates, the direction of the rotation will be clockwise because the
            y-axis points downwards.</para>
            <para>Returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Inverted(System.Boolean@)">
            <summary>
            <para>Returns an inverted copy of this matrix.</para>
            <para>If the matrix is singular (not invertible), the returned matrix
            is the identity matrix. If invertible is valid (i.e. not 0), its value is
            set to true if the matrix is invertible, otherwise it is set to
            false.</para>
            <para>See also isInvertible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.op_Equality(QtGui.QMatrix,QtGui.QMatrix)">
            <summary>
            <para>Returns true if this matrix is equal to the given matrix,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.op_Inequality(QtGui.QMatrix,QtGui.QMatrix)">
            <summary>
            <para>Returns true if this matrix is not equal to the given matrix,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.op_Multiply(QtGui.QMatrix,QtGui.QMatrix)">
            <summary>
            <para>Returns the result of multiplying this matrix by the given
            matrix.</para>
            <para>Note that matrix multiplication is not commutative, i.e. a*b !=
            b*a.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.op_Implicit(QtGui.QMatrix)~QtCore.QVariant">
            <summary>
            <para>Returns the matrix as a QVariant.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.Inverted">
            <summary>
            <para>Returns an inverted copy of this matrix.</para>
            <para>If the matrix is singular (not invertible), the returned matrix
            is the identity matrix. If invertible is valid (i.e. not 0), its value is
            set to true if the matrix is invertible, otherwise it is set to
            false.</para>
            <para>See also isInvertible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix.QFuzzyCompare(QtGui.QMatrix,QtGui.QMatrix)">
            <summary>
            <para>The qFuzzyCompare function is for comparing two matrices using a
            fuzziness factor.</para>
            <para>Returns true if m1 and m2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.M11">
            <summary>
            <para>Returns the horizontal scaling factor.</para>
            <para>See also scale() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.M12">
            <summary>
            <para>Returns the vertical shearing factor.</para>
            <para>See also shear() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.M21">
            <summary>
            <para>Returns the horizontal shearing factor.</para>
            <para>See also shear() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.M22">
            <summary>
            <para>Returns the vertical scaling factor.</para>
            <para>See also scale() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.Dx">
            <summary>
            <para>Returns the horizontal translation factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.Dy">
            <summary>
            <para>Returns the vertical translation factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.IsIdentity">
            <summary>
            <para>Returns true if the matrix is the identity matrix, otherwise
            returns false.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.IsInvertible">
            <summary>
            <para>Returns true if the matrix is invertible, otherwise returns
            false.</para>
            <para>See also inverted().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix.Determinant">
            <summary>
            <para>Returns the matrix's determinant.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPainterPath">
            <summary>
            <para>The QPainterPath class provides a container for painting
            operations, enabling graphical shapes to be constructed and reused.</para>
            </summary>
            <remarks>
            <para>A painter path is an object composed of a number of graphical
            building blocks, such as rectangles, ellipses, lines, and curves. Building
            blocks can be joined in closed subpaths, for example as a rectangle or an
            ellipse. A closed path has coinciding start and end points. Or they can
            exist independently as unclosed subpaths, such as lines and curves.</para>
            <para>A QPainterPath object can be used for filling, outlining, and
            clipping. To generate fillable outlines for a given painter path, use the
            QPainterPathStroker class. The main advantage of painter paths over normal
            drawing operations is that complex shapes only need to be created once;
            then they can be drawn many times using only calls to the
            QPainter::drawPath() function.</para>
            <para>QPainterPath provides a collection of functions that can be used
            to obtain information about the path and its elements. In addition it is
            possible to reverse the order of the elements using the toReversed()
            function. There are also several functions to convert this painter path
            object into a polygon representation.</para>
            <para></para>
            <para>Composing a QPainterPath</para>
            <para>A QPainterPath object can be constructed as an empty path, with a
            given start point, or as a copy of another QPainterPath object. Once
            created, lines and curves can be added to the path using the lineTo(),
            arcTo(), cubicTo() and quadTo() functions. The lines and curves stretch
            from the currentPosition() to the position passed as argument.</para>
            <para>The currentPosition() of the QPainterPath object is always the
            end position of the last subpath that was added (or the initial start
            point). Use the moveTo() function to move the currentPosition() without
            adding a component. The moveTo() function implicitly starts a new subpath,
            and closes the previous one. Another way of starting a new subpath is to
            call the closeSubpath() function which closes the current path by adding a
            line from the currentPosition() back to the path's start position. Note
            that the new path will have (0, 0) as its initial currentPosition().</para>
            <para>QPainterPath class also provides several convenience functions to
            add closed subpaths to a painter path: addEllipse(), addPath(), addRect(),
            addRegion() and addText(). The addPolygon() function adds an unclosed
            subpath. In fact, these functions are all collections of moveTo(), lineTo()
            and cubicTo() operations.</para>
            <para>In addition, a path can be added to the current path using the
            connectPath() function. But note that this function will connect the last
            element of the current path to the first element of given one by adding a
            line.</para>
            <para>Below is a code snippet that shows how a QPainterPath object can
            be used:</para>
            <para></para>
            <para> 	QPainterPath path;</para>
            <para>path.addRect(20, 20, 60, 60);</para>
            <para></para>
            <para>path.moveTo(0, 0);</para>
            <para>path.cubicTo(99, 0,  50, 50,  99, 99);</para>
            <para>path.cubicTo(0, 99,  50, 50,  0, 0);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.fillRect(0, 0, 100, 100, Qt::white);</para>
            <para>painter.setPen(QPen(QColor(79, 106, 25), 1, Qt::SolidLine,</para>
            <para>                    Qt::FlatCap, Qt::MiterJoin));</para>
            <para>painter.setBrush(QColor(122, 163, 39));</para>
            <para></para>
            <para>painter.drawPath(path);</para>
            <para></para>
            <para></para>
            <para>The painter path is initially empty when constructed. We first
            add a rectangle, which is a closed subpath. Then we add two bezier curves
            which together form a closed subpath even though they are not closed
            individually. Finally we draw the entire path. The path is filled using the
            default fill rule, Qt::OddEvenFill. Qt provides two methods for filling
            paths:</para>
            <para></para>
            <para> Qt::OddEvenFillQt::WindingFill</para>
            <para>	</para>
            <para></para>
            <para>See the Qt::FillRule documentation for the definition of the
            rules. A painter path's currently set fill rule can be retrieved using the
            fillRule() function, and altered using the setFillRule() function.</para>
            <para></para>
            <para>QPainterPath Information</para>
            <para>The QPainterPath class provides a collection of functions that
            returns information about the path and its elements.</para>
            <para>The currentPosition() function returns the end point of the last
            subpath that was added (or the initial start point). The elementAt()
            function can be used to retrieve the various subpath elements, the number
            of elements can be retrieved using the elementCount() function, and the
            isEmpty() function tells whether this QPainterPath object contains any
            elements at all.</para>
            <para>The controlPointRect() function returns the rectangle containing
            all the points and control points in this path. This function is
            significantly faster to compute than the exact boundingRect() which returns
            the bounding rectangle of this painter path with floating point
            precision.</para>
            <para>Finally, QPainterPath provides the contains() function which can
            be used to determine whether a given point or rectangle is inside the path,
            and the intersects() function which determines if any of the points inside
            a given rectangle also are inside this path.</para>
            <para></para>
            <para>QPainterPath Conversion</para>
            <para>For compatibility reasons, it might be required to simplify the
            representation of a painter path: QPainterPath provides the
            toFillPolygon(), toFillPolygons() and toSubpathPolygons() functions which
            convert the painter path into a polygon. The toFillPolygon() returns the
            painter path as one single polygon, while the two latter functions return a
            list of polygons.</para>
            <para>The toFillPolygons() and toSubpathPolygons() functions are
            provided because it is usually faster to draw several small polygons than
            to draw one large polygon, even though the total number of points drawn is
            the same. The difference between the two is the number of polygons they
            return: The toSubpathPolygons() creates one polygon for each subpath
            regardless of intersecting subpaths (i.e. overlapping bounding rectangles),
            while the toFillPolygons() functions creates only one polygon for
            overlapping subpaths.</para>
            <para>The toFillPolygon() and toFillPolygons() functions first convert
            all the subpaths to polygons, then uses a rewinding technique to make sure
            that overlapping subpaths can be filled using the correct fill rule. Note
            that rewinding inserts additional lines in the polygon so the outline of
            the fill polygon does not match the outline of the path.</para>
            <para></para>
            <para>Examples</para>
            <para>Qt provides the Painter Paths Example and the Vector Deformation
            example which are located in Qt's example directory.</para>
            <para>The Painter Paths Example shows how painter paths can be used to
            build complex shapes for rendering and lets the user experiment with the
            filling and stroking. The Vector Deformation Example shows how to use
            QPainterPath to draw text.</para>
            <para></para>
            <para> Painter Paths ExampleVector Deformation Example</para>
            <para>	</para>
            <para></para>
            <para></para>
            <para>See also QPainterPathStroker, QPainter, QRegion, and Painter
            Paths Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPainterPath.#ctor">
            <summary>
            <para>Constructs an empty QPainterPath object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.#ctor(QtCore.QPointF)">
            <summary>
            <para>Creates a QPainterPath object with the given startPoint as its
            current position.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.#ctor(QtGui.QPainterPath)">
            <summary>
            <para>Creates a QPainterPath object that is a copy of the given
            path.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Swap(QtGui.QPainterPath)">
            <summary>
            <para>Swaps painter path other with this painter path. This operation
            is very fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.CloseSubpath">
            <summary>
            <para>Closes the current subpath by drawing a line to the beginning of
            the subpath, automatically starting a new path. The current point of the
            new path is (0, 0).</para>
            <para>If the subpath does not contain any elements, this function does
            nothing.</para>
            <para>See also moveTo() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.MoveTo(QtCore.QPointF)">
            <summary>
            <para>Moves the current point to the given point, implicitly starting a
            new subpath and closing the previous one.</para>
            <para>See also closeSubpath() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.MoveTo(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the current position to (x, y) and starts a new subpath,
            implicitly closing the previous path.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.LineTo(QtCore.QPointF)">
            <summary>
            <para>Adds a straight line from the current position to the given
            endPoint. After the line is drawn, the current position is updated to be at
            the end point of the line.</para>
            <para>See also addPolygon(), addRect(), and Composing a
            QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.LineTo(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a line from the current position to the point (x,
            y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ArcMoveTo(QtCore.QRectF,System.Double)">
            <summary>
            <para>Creates a move to that lies on the arc that occupies the given
            rectangle at angle.</para>
            <para>Angles are specified in degrees. Clockwise arcs can be specified
            using negative angles.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also moveTo() and arcTo().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ArcMoveTo(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a move to that lies on the arc that occupies the
            QRectF(x, y, width, height) at angle.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ArcTo(QtCore.QRectF,System.Double,System.Double)">
            <summary>
            <para>Creates an arc that occupies the given rectangle, beginning at
            the specified startAngle and extending sweepLength degrees
            counter-clockwise.</para>
            <para>Angles are specified in degrees. Clockwise arcs can be specified
            using negative angles.</para>
            <para>Note that this function connects the starting point of the arc to
            the current position if they are not already connected. After the arc has
            been added, the current position is the last point in arc. To draw a line
            back to the first point, use the closeSubpath() function.</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para></para>
            <para>QPointF center, startPoint;</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.moveTo(center);</para>
            <para>myPath.arcTo(boundingRect, startAngle,</para>
            <para>             sweepLength);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also arcMoveTo(), addEllipse(), QPainter::drawArc(),
            QPainter::drawPie(), and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ArcTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates an arc that occupies the rectangle QRectF(x, y, width,
            height), beginning at the specified startAngle and extending sweepLength
            degrees counter-clockwise.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.CubicTo(QtCore.QPointF,QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Adds a cubic Bezier curve between the current position and the
            given endPoint using the control points specified by c1, and c2.</para>
            <para>After the curve is added, the current position is updated to be
            at the end point of the curve.</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.cubicTo(c1, c2, endPoint);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also quadTo() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.CubicTo(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a cubic Bezier curve between the current position and the
            end point (endPointX, endPointY) with control points specified by (c1X,
            c1Y) and (c2X, c2Y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.QuadTo(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Adds a quadratic Bezier curve between the current position and
            the given endPoint with the control point specified by c.</para>
            <para>After the curve is added, the current point is updated to be at
            the end point of the curve.</para>
            <para>See also cubicTo() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.QuadTo(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a quadratic Bezier curve between the current point and the
            endpoint (endPointX, endPointY) with the control point specified by (cx,
            cy).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRect(QtCore.QRectF)">
            <summary>
            <para>Adds the given rectangle to this path as a closed subpath.</para>
            <para>The rectangle is added as a clockwise set of lines. The painter
            path's current position after the rectangle has been added is at the
            top-left corner of the rectangle.</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para>QRectF myRectangle;</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.addRect(myRectangle);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also addRegion(), lineTo(), and Composing a
            QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a rectangle at position (x, y), with the given width and
            height, as a closed subpath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddEllipse(QtCore.QRectF)">
            <summary>
            <para>Creates an ellipse within the specified boundingRectangle and
            adds it to the painter path as a closed subpath.</para>
            <para>The ellipse is composed of a clockwise curve, starting and
            finishing at zero degrees (the 3 o'clock position).</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para>QRectF boundingRectangle;</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.addEllipse(boundingRectangle);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also arcTo(), QPainter::drawEllipse(), and Composing a
            QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates an ellipse within the bounding rectangle defined by its
            top-left corner at (x, y), width and height, and adds it to the painter
            path as a closed subpath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddEllipse(QtCore.QPointF,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates an ellipse positioned at center with radii rx and ry, and
            adds it to the painter path as a closed subpath.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddPolygon(QtGui.QPolygonF)">
            <summary>
            <para>Adds the given polygon to the path as an (unclosed)
            subpath.</para>
            <para>Note that the current position after the polygon has been added,
            is the last point in polygon. To draw a line back to the first point, use
            the closeSubpath() function.</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para>QPolygonF myPolygon;</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.addPolygon(myPolygon);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also lineTo() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddText(QtCore.QPointF,QtGui.QFont,System.String)">
            <summary>
            <para>Adds the given text to this path as a set of closed subpaths
            created from the font supplied. The subpaths are positioned so that the
            left end of the text's baseline lies at the specified point.</para>
            <para></para>
            <para> 	QLinearGradient myGradient;</para>
            <para>QPen myPen;</para>
            <para>QFont myFont;</para>
            <para>QPointF baseline(x, y);</para>
            <para></para>
            <para>QPainterPath myPath;</para>
            <para>myPath.addText(baseline, myFont, tr(&quot;Qt&quot;));</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.setBrush(myGradient);</para>
            <para>painter.setPen(myPen);</para>
            <para>painter.drawPath(myPath);</para>
            <para></para>
            <para></para>
            <para>See also QPainter::drawText() and Composing a
            QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddText(System.Double,System.Double,QtGui.QFont,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the given text to this path as a set of closed subpaths
            created from the font supplied. The subpaths are positioned so that the
            left end of the text's baseline lies at the point specified by (x,
            y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddPath(QtGui.QPainterPath)">
            <summary>
            <para>Adds the given path to this path as a closed subpath.</para>
            <para>See also connectPath() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRegion(QtGui.QRegion)">
            <summary>
            <para>Adds the given region to the path by adding each rectangle in the
            region as a separate closed subpath.</para>
            <para>See also addRect() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundedRect(QtCore.QRectF,System.Double,System.Double,QtCore.Qt.SizeMode)">
            <summary>
            <para>Adds the given rectangle rect with rounded corners to the
            path.</para>
            <para>The xRadius and yRadius arguments specify the radii of the
            ellipses defining the corners of the rounded rectangle. When mode is
            Qt::RelativeSize, xRadius and yRadius are specified in percentage of half
            the rectangle's width and height respectively, and should be in the range
            0.0 to 100.0.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also addRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundedRect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,QtCore.Qt.SizeMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds the given rectangle x, y, w, h with rounded corners to the
            path.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundRect(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Adds a rectangle r with rounded corners to the path.</para>
            <para>The xRnd and yRnd arguments specify how rounded the corners
            should be. 0 is angled corners, 99 is maximum roundedness.</para>
            <para>See also addRoundedRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundRect(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a rectangle with rounded corners to the path. The rectangle
            is constructed from x, y, and the width and height w and h.</para>
            <para>The xRnd and yRnd arguments specify how rounded the corners
            should be. 0 is angled corners, 99 is maximum roundedness.</para>
            <para>See also addRoundedRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundRect(QtCore.QRectF,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a rounded rectangle, rect, to the path.</para>
            <para>The roundness argument specifies uniform roundness for the
            rectangle. Vertical and horizontal roundness factors will be adjusted
            accordingly to act uniformly around both axes. Use this method if you want
            a rectangle equally rounded across both the X and Y axis.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also addRoundedRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AddRoundRect(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Adds a rounded rectangle to the path, defined by the coordinates
            x and y with the specified width and height.</para>
            <para>The roundness argument specifies uniform roundness for the
            rectangle. Vertical and horizontal roundness factors will be adjusted
            accordingly to act uniformly around both axes. Use this method if you want
            a rectangle equally rounded across both the X and Y axis.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also addRoundedRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ConnectPath(QtGui.QPainterPath)">
            <summary>
            <para>Connects the given path to this path by adding a line from the
            last element of this path to the first element of the given path.</para>
            <para>See also addPath() and Composing a QPainterPath.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Contains(QtCore.QPointF)">
            <summary>
            <para>Returns true if the given point is inside the path, otherwise
            returns false.</para>
            <para>See also intersects().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Contains(QtCore.QRectF)">
            <summary>
            <para>Returns true if the given rectangle is inside the path, otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Intersects(QtCore.QRectF)">
            <summary>
            <para>Returns true if any point in the given rectangle intersects the
            path; otherwise returns false.</para>
            <para>There is an intersection if any of the lines making up the
            rectangle crosses a part of the path or if any part of the rectangle
            overlaps with any area enclosed by the path. This function respects the
            current fillRule to determine what is considered inside the path.</para>
            <para>See also contains().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Translate(System.Double,System.Double)">
            <summary>
            <para>Translates all elements in the path by (dx, dy).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Translate(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates all elements in the path by the given offset.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Translated(System.Double,System.Double)">
            <summary>
            <para>Returns a copy of the path that is translated by (dx, dy).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Translated(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the path that is translated by the given
            offset.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ToReversed">
            <summary>
            <para>Creates and returns a reversed copy of the path.</para>
            <para>It is the order of the elements that is reversed: If a
            QPainterPath is composed by calling the moveTo(), lineTo() and cubicTo()
            functions in the specified order, the reversed copy is composed by calling
            cubicTo(), lineTo() and moveTo().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ToFillPolygon(QtGui.QMatrix)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ToFillPolygon(QtGui.QTransform)">
            <summary>
            <para>Converts the path into a polygon using the QTransform matrix, and
            returns the polygon.</para>
            <para>The polygon is created by first converting all subpaths to
            polygons, then using a rewinding technique to make sure that overlapping
            subpaths can be filled using the correct fill rule.</para>
            <para>Note that rewinding inserts addition lines in the polygon so the
            outline of the fill polygon does not match the outline of the path.</para>
            <para>See also toSubpathPolygons(), toFillPolygons(), and QPainterPath
            Conversion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ElementAt(System.Int32)">
            <summary>
            <para>Returns the element at the given index in the painter
            path.</para>
            <para>See also ElementType, elementCount(), and isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.SetElementPositionAt(System.Int32,System.Double,System.Double)">
            <summary>
            <para>Sets the x and y coordinate of the element at index index to x
            and y.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.PercentAtLength(System.Double)">
            <summary>
            <para>Returns percentage of the whole path at the specified length
            len.</para>
            <para>Note that similarly to other percent methods, the percentage
            measurement is not linear with regards to the length, if curves are present
            in the path. When curves are present the percentage argument is mapped to
            the t parameter of the Bezier equations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.PointAtPercent(System.Double)">
            <summary>
            <para>Returns the point at at the percentage t of the current path. The
            argument t has to be between 0 and 1.</para>
            <para>Note that similarly to other percent methods, the percentage
            measurement is not linear with regards to the length, if curves are present
            in the path. When curves are present the percentage argument is mapped to
            the t parameter of the Bezier equations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.AngleAtPercent(System.Double)">
            <summary>
            <para>Returns the angle of the path tangent at the percentage t. The
            argument t has to be between 0 and 1.</para>
            <para>Positive values for the angles mean counter-clockwise while
            negative values mean the clockwise direction. Zero degrees is at the 3
            o'clock position.</para>
            <para>Note that similarly to the other percent methods, the percentage
            measurement is not linear with regards to the length if curves are present
            in the path. When curves are present the percentage argument is mapped to
            the t parameter of the Bezier equations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.SlopeAtPercent(System.Double)">
            <summary>
            <para>Returns the slope of the path at the percentage t. The argument t
            has to be between 0 and 1.</para>
            <para>Note that similarly to other percent methods, the percentage
            measurement is not linear with regards to the length, if curves are present
            in the path. When curves are present the percentage argument is mapped to
            the t parameter of the Bezier equations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Intersects(QtGui.QPainterPath)">
            <summary>
            <para>Returns true if the current path intersects at any point the
            given path p. Also returns true if the current path contains or is
            contained by any part of p.</para>
            <para>Set operations on paths will treat the paths as areas. Non-closed
            paths will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also contains().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Contains(QtGui.QPainterPath)">
            <summary>
            <para>Returns true if the given path p is contained within the current
            path. Returns false if any edges of the current path and p
            intersect.</para>
            <para>Set operations on paths will treat the paths as areas. Non-closed
            paths will be treated as implicitly closed.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also intersects().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.United(QtGui.QPainterPath)">
            <summary>
            <para>Returns a path which is the union of this path's fill area and
            p's fill area.</para>
            <para>Set operations on paths will treat the paths as areas. Non-closed
            paths will be treated as implicitly closed. Bezier curves may be flattened
            to line segments due to numerical instability of doing bezier curve
            intersections.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also intersected() and subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Intersected(QtGui.QPainterPath)">
            <summary>
            <para>Returns a path which is the intersection of this path's fill area
            and p's fill area. Bezier curves may be flattened to line segments due to
            numerical instability of doing bezier curve intersections.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Subtracted(QtGui.QPainterPath)">
            <summary>
            <para>Returns a path which is p's fill area subtracted from this path's
            fill area.</para>
            <para>Set operations on paths will treat the paths as areas. Non-closed
            paths will be treated as implicitly closed. Bezier curves may be flattened
            to line segments due to numerical instability of doing bezier curve
            intersections.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.SubtractedInverted(QtGui.QPainterPath)">
            <summary>
            <para>Use subtracted() instead.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also subtracted().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Equality(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Returns true if this painterpath is equal to the given
            path.</para>
            <para>Note that comparing paths may involve a per element comparison
            which can be slow for complex paths.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Inequality(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Returns true if this painter path differs from the given
            path.</para>
            <para>Note that comparing paths may involve a per element comparison
            which can be slow for complex paths.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_BitwiseAnd(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Returns the intersection of this path and the other path.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also intersected(), operator&amp;=(), united(), and
            operator|().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_BitwiseOr(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Returns the union of this path and the other path.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also united(), operator|=(), intersected(), and
            operator&amp;().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Addition(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Returns the union of this path and the other path. This function
            is equivalent to operator|().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also united(), operator+=(), and operator-().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Subtraction(QtGui.QPainterPath,QtGui.QPainterPath)">
            <summary>
            <para>Subtracts the other path from a copy of this path, and returns
            the copy.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also subtracted(), operator-=(), and operator+().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.ToFillPolygon">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Multiply(QtGui.QPainterPath,QtGui.QMatrix)">
            <summary>
            <para>This is the same as matrix.map(path).</para>
            <para>See also QMatrix::map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.op_Multiply(QtGui.QPainterPath,QtGui.QTransform)">
            <summary>
            <para>This is the same as matrix.map(path).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QTransform::map().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.FillRule">
            <summary>
            <para>Returns the painter path's currently set fill rule.</para>
            <para>See also setFillRule().</para>
            <para></para>
            <para>Sets the fill rule of the painter path to the given fillRule. Qt
            provides two methods for filling paths:</para>
            <para></para>
            <para> Qt::OddEvenFill (default)Qt::WindingFill</para>
            <para>	</para>
            <para></para>
            <para>See also fillRule().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.CurrentPosition">
            <summary>
            <para>Returns the current position of the path.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.BoundingRect">
            <summary>
            <para>Returns the bounding rectangle of this painter path as a
            rectangle with floating point precision.</para>
            <para>See also controlPointRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.ControlPointRect">
            <summary>
            <para>Returns the rectangle containing all the points and control
            points in this path.</para>
            <para>This function is significantly faster to compute than the exact
            boundingRect(), and the returned rectangle is always a superset of the
            rectangle returned by boundingRect().</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.IsEmpty">
            <summary>
            <para>Returns true if either there are no elements in this path, or if
            the only element is a MoveToElement; otherwise returns false.</para>
            <para>See also elementCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.ElementCount">
            <summary>
            <para>Returns the number of path elements in the painter path.</para>
            <para>See also ElementType, elementAt(), and isEmpty().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Length">
            <summary>
            <para>Returns the length of the current path.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Simplified">
            <summary>
            <para>Returns a simplified version of this path. This implies merging
            all subpaths that intersect, and returning a path containing no
            intersecting edges. Consecutive parallel lines will also be merged. The
            simplified path will always use the default fill rule, Qt::OddEvenFill.
            Bezier curves may be flattened to line segments due to numerical
            instability of doing bezier curve intersections.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPainterPath.ElementType">
            <summary>
            <para>This enum describes the types of elements used to connect
            vertices in subpaths.</para>
            <para>Note that elements added as closed subpaths using the
            addEllipse(), addPath(), addPolygon(), addRect(), addRegion() and addText()
            convenience functions, is actually added to the path as a collection of
            separate elements using the moveTo(), lineTo() and cubicTo()
            functions.</para>
            <para>See also elementAt() and elementCount().</para>
            </summary>
        </member>
        <member name="F:QtGui.QPainterPath.ElementType.MoveToElement">
            <summary>A new subpath. See also moveTo().</summary>
        </member>
        <member name="F:QtGui.QPainterPath.ElementType.LineToElement">
            <summary>A line. See also lineTo().</summary>
        </member>
        <member name="F:QtGui.QPainterPath.ElementType.CurveToElement">
            <summary>A curve. See also cubicTo() and quadTo().</summary>
        </member>
        <member name="F:QtGui.QPainterPath.ElementType.CurveToDataElement">
            <summary>The extra data required to describe a curve in a CurveToElement element.</summary>
        </member>
        <member name="T:QtGui.QPainterPath.Element">
            <summary>
            <para>The QPainterPath::Element class specifies the position and type
            of a subpath.</para>
            </summary>
            <remarks>
            <para>Once a QPainterPath object is constructed, subpaths like lines
            and curves can be added to the path (creating QPainterPath::LineToElement
            and QPainterPath::CurveToElement components).</para>
            <para>The lines and curves stretch from the currentPosition() to the
            position passed as argument. The currentPosition() of the QPainterPath
            object is always the end position of the last subpath that was added (or
            the initial start point). The moveTo() function can be used to move the
            currentPosition() without adding a line or curve, creating a
            QPainterPath::MoveToElement component.</para>
            <para></para>
            <para>See also QPainterPath.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPainterPath.Element.op_Implicit(QtGui.QPainterPath.Element)~QtCore.QPointF">
            <summary>
            <para>Returns the element's position.</para>
            <para>See also x and y.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Element.op_Equality(QtGui.QPainterPath.Element,QtGui.QPainterPath.Element)">
            <summary>
            <para>Returns true if this element is equal to other; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPath.Element.op_Inequality(QtGui.QPainterPath.Element,QtGui.QPainterPath.Element)">
            <summary>
            <para>Returns true if this element is not equal to other; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.X">
            <summary>
            <para>This variable holds the x coordinate of the element's
            position.</para>
            <para>See also operator QPointF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.Y">
            <summary>
            <para>This variable holds the y coordinate of the element's
            position.</para>
            <para>See also operator QPointF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.Type">
            <summary>
            <para>This variable holds the type of element.</para>
            <para>See also isCurveTo(), isLineTo(), and isMoveTo().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.IsMoveTo">
            <summary>
            <para>Returns true if the element is moving the current position,
            otherwise returns false.</para>
            <para>See also type and QPainterPath::MoveToElement.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.IsLineTo">
            <summary>
            <para>Returns true if the element is a line, otherwise returns
            false.</para>
            <para>See also type and QPainterPath::LineToElement.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPath.Element.IsCurveTo">
            <summary>
            <para>Returns true if the element is a curve, otherwise returns
            false.</para>
            <para>See also type and QPainterPath::CurveToElement.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPainterPathStroker">
            <summary>
            <para>The QPainterPathStroker class is used to generate fillable
            outlines for a given painter path.</para>
            </summary>
            <remarks>
            <para>By calling the createStroke() function, passing a given
            QPainterPath as argument, a new painter path representing the outline of
            the given path is created. The newly created painter path can then be
            filled to draw the original painter path's outline.</para>
            <para>You can control the various design aspects (width, cap styles,
            join styles and dash pattern) of the outlining using the following
            functions:</para>
            <para></para>
            <para>setWidth()</para>
            <para>setCapStyle()</para>
            <para>setJoinStyle()</para>
            <para>setDashPattern()</para>
            <para></para>
            <para>The setDashPattern() function accepts both a Qt::PenStyle object
            and a vector representation of the pattern as argument.</para>
            <para>In addition you can specify a curve's threshold, controlling the
            granularity with which a curve is drawn, using the setCurveThreshold()
            function. The default threshold is a well adjusted value (0.25), and
            normally you should not need to modify it. However, you can make the
            curve's appearance smoother by decreasing its value.</para>
            <para>You can also control the miter limit for the generated outline
            using the setMiterLimit() function. The miter limit describes how far from
            each join the miter join can extend. The limit is specified in the units of
            width so the pixelwise miter limit will be miterlimit * width. This value
            is only used if the join style is Qt::MiterJoin.</para>
            <para>The painter path generated by the createStroke() function should
            only be used for outlining the given painter path. Otherwise it may cause
            unexpected behavior. Generated outlines also require the Qt::WindingFill
            rule which is set by default.</para>
            <para></para>
            <para>See also QPen and QBrush.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPainterPathStroker.#ctor">
            <summary>
            <para>Creates a new stroker.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPathStroker.#ctor(QtGui.QPen)">
            <summary>
            <para>Creates a new stroker based on pen.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPathStroker.SetDashPattern(QtCore.Qt.PenStyle)">
            <summary>
            <para>Sets the dash pattern for the generated outlines to style.</para>
            <para>See also dashPattern().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainterPathStroker.CreateStroke(QtGui.QPainterPath)">
            <summary>
            <para>Generates a new path that is a fillable area representing the
            outline of the given path.</para>
            <para>The various design aspects of the outline are based on the
            stroker's properties: width(), capStyle(), joinStyle(), dashPattern(),
            curveThreshold() and miterLimit().</para>
            <para>The generated path should only be used for outlining the given
            painter path. Otherwise it may cause unexpected behavior. Generated
            outlines also require the Qt::WindingFill rule which is set by
            default.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.Width">
            <summary>
            <para>Returns the width of the generated outlines.</para>
            <para>See also setWidth().</para>
            <para></para>
            <para>Sets the width of the generated outline painter path to
            width.</para>
            <para>The generated outlines will extend approximately 50% of width to
            each side of the given input path's original outline.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.CapStyle">
            <summary>
            <para>Returns the cap style of the generated outlines.</para>
            <para>See also setCapStyle().</para>
            <para></para>
            <para>Sets the cap style of the generated outlines to style. If a dash
            pattern is set, each segment of the pattern is subject to the cap
            style.</para>
            <para>See also capStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.JoinStyle">
            <summary>
            <para>Returns the join style of the generated outlines.</para>
            <para>See also setJoinStyle().</para>
            <para></para>
            <para>Sets the join style of the generated outlines to style.</para>
            <para>See also joinStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.MiterLimit">
            <summary>
            <para>Returns the miter limit for the generated outlines.</para>
            <para>See also setMiterLimit().</para>
            <para></para>
            <para>Sets the miter limit of the generated outlines to limit.</para>
            <para>The miter limit describes how far from each join the miter join
            can extend. The limit is specified in units of the currently set width. So
            the pixelwise miter limit will be miterlimit * width.</para>
            <para>This value is only used if the join style is
            Qt::MiterJoin.</para>
            <para>See also miterLimit().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.CurveThreshold">
            <summary>
            <para>Returns the curve flattening threshold for the generated
            outlines.</para>
            <para>See also setCurveThreshold().</para>
            <para></para>
            <para>Specifies the curve flattening threshold, controlling the
            granularity with which the generated outlines' curve is drawn.</para>
            <para>The default threshold is a well adjusted value (0.25), and
            normally you should not need to modify it. However, you can make the
            curve's appearance smoother by decreasing its value.</para>
            <para>See also curveThreshold().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainterPathStroker.DashOffset">
            <summary>
            <para>Returns the dash offset for the generated outlines.</para>
            <para>See also setDashOffset().</para>
            <para></para>
            <para>Sets the dash offset for the generated outlines to offset.</para>
            <para>See the documentation for QPen::setDashOffset() for a description
            of the dash offset.</para>
            <para>See also dashOffset().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTransform">
            <summary>
            <para>The QTransform class specifies 2D transformations of a coordinate
            system.</para>
            </summary>
            <remarks>
            <para>A transformation specifies how to translate, scale, shear, rotate
            or project the coordinate system, and is typically used when rendering
            graphics.</para>
            <para>QTransform differs from QMatrix in that it is a true 3x3 matrix,
            allowing perspective transformations. QTransform's toAffine() method allows
            casting QTransform to QMatrix. If a perspective transformation has been
            specified on the matrix, then the conversion will cause loss of
            data.</para>
            <para>QTransform is the recommended transformation class in Qt.</para>
            <para>A QTransform object can be built using the setMatrix(), scale(),
            rotate(), translate() and shear() functions. Alternatively, it can be built
            by applying basic matrix operations. The matrix can also be defined when
            constructed, and it can be reset to the identity matrix (the default) using
            the reset() function.</para>
            <para>The QTransform class supports mapping of graphic primitives: A
            given point, line, polygon, region, or painter path can be mapped to the
            coordinate system defined by this matrix using the map() function. In case
            of a rectangle, its coordinates can be transformed using the mapRect()
            function. A rectangle can also be transformed into a polygon (mapped to the
            coordinate system defined by this matrix), using the mapToPolygon()
            function.</para>
            <para>QTransform provides the isIdentity() function which returns true
            if the matrix is the identity matrix, and the isInvertible() function which
            returns true if the matrix is non-singular (i.e. AB = BA = I). The
            inverted() function returns an inverted copy of this matrix if it is
            invertible (otherwise it returns the identity matrix), and adjoint()
            returns the matrix's classical adjoint. In addition, QTransform provides
            the determinant() function which returns the matrix's determinant.</para>
            <para>Finally, the QTransform class supports matrix multiplication,
            addition and subtraction, and objects of the class can be streamed as well
            as compared.</para>
            <para></para>
            <para>Rendering Graphics</para>
            <para>When rendering graphics, the matrix defines the transformations
            but the actual transformation is performed by the drawing routines in
            QPainter.</para>
            <para>By default, QPainter operates on the associated device's own
            coordinate system. The standard coordinate system of a QPaintDevice has its
            origin located at the top-left position. The x values increase to the
            right; y values increase downward. For a complete description, see the
            coordinate system documentation.</para>
            <para>QPainter has functions to translate, scale, shear and rotate the
            coordinate system without using a QTransform. For example:</para>
            <para></para>
            <para> 	void SimpleTransformation::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    painter.rotate(45);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para>Although these functions are very convenient, it can be more
            efficient to build a QTransform and call QPainter::setTransform() if you
            want to perform more than a single transform operation. For example:</para>
            <para></para>
            <para> 	void CombinedTransformation::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    QTransform transform;</para>
            <para>    transform.translate(50, 50);</para>
            <para>    transform.rotate(45);</para>
            <para>    transform.scale(0.5, 1.0);</para>
            <para>    painter.setTransform(transform);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Basic Matrix Operations</para>
            <para></para>
            <para>A QTransform object contains a 3 x 3 matrix. The m31 (dx) and m32
            (dy) elements specify horizontal and vertical translation. The m11 and m22
            elements specify horizontal and vertical scaling. The m21 and m12 elements
            specify horizontal and vertical shearing. And finally, the m13 and m23
            elements specify horizontal and vertical projection, with m33 as an
            additional projection factor.</para>
            <para>QTransform transforms a point in the plane to another point using
            the following formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>if (is not affine) {</para>
            <para>    w' = m13*x + m23*y + m33</para>
            <para>    x' /= w'</para>
            <para>    y' /= w'</para>
            <para>}</para>
            <para>The point (x, y) is the original point, and (x', y') is the
            transformed point. (x', y') can be transformed back to (x, y) by performing
            the same operation on the inverted() matrix.</para>
            <para>The various matrix elements can be set when constructing the
            matrix, or by using the setMatrix() function later on. They can also be
            manipulated using the translate(), rotate(), scale() and shear()
            convenience functions. The currently set values can be retrieved using the
            m11(), m12(), m13(), m21(), m22(), m23(), m31(), m32(), m33(), dx() and
            dy() functions.</para>
            <para>Translation is the simplest transformation. Setting dx and dy
            will move the coordinate system dx units along the X axis and dy units
            along the Y axis. Scaling can be done by setting m11 and m22. For example,
            setting m11 to 2 and m22 to 1.5 will double the height and increase the
            width by 50%. The identity matrix has m11, m22, and m33 set to 1 (all
            others are set to 0) mapping a point to itself. Shearing is controlled by
            m12 and m21. Setting these elements to values different from zero will
            twist the coordinate system. Rotation is achieved by setting both the
            shearing factors and the scaling factors. Perspective transformation is
            achieved by setting both the projection factors and the scaling
            factors.</para>
            <para>Here's the combined transformations example using basic matrix
            operations:</para>
            <para></para>
            <para> 	void BasicOperations::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    double pi = 3.14;</para>
            <para></para>
            <para>    double a    = pi/180 * 45.0;</para>
            <para>    double sina = sin(a);</para>
            <para>    double cosa = cos(a);</para>
            <para></para>
            <para>    QTransform translationTransform(1, 0, 0, 1, 50.0,
            50.0);</para>
            <para>    QTransform rotationTransform(cosa, sina, -sina, cosa, 0,
            0);</para>
            <para>    QTransform scalingTransform(0.5, 0, 0, 1.0, 0, 0);</para>
            <para></para>
            <para>    QTransform transform;</para>
            <para>    transform = scalingTransform * rotationTransform *
            translationTransform;</para>
            <para></para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(QPen(Qt::blue, 1, Qt::DashLine));</para>
            <para>    painter.drawRect(0, 0, 100, 100);</para>
            <para></para>
            <para>    painter.setTransform(transform);</para>
            <para></para>
            <para>    painter.setFont(QFont(&quot;Helvetica&quot;, 24));</para>
            <para>    painter.setPen(QPen(Qt::black, 1));</para>
            <para>    painter.drawText(20, 10, &quot;QTransform&quot;);</para>
            <para>}</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPainter, Coordinate System, Affine Transformations
            Example, and Transformations Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTransform.#ctor">
            <summary>
            <para>Constructs an identity matrix.</para>
            <para>All elements are set to zero except m11 and m22 (specifying the
            scale) and m33 which are set to 1.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a matrix with the elements, m11, m12, m13, m21, m22,
            m23, m31, m32, m33.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a matrix with the elements, m11, m12, m21, m22, dx and
            dy.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.#ctor(QtGui.QMatrix)">
            <summary>
            <para>Constructs a matrix that is a copy of the given matrix. Note that
            the m13, m23, and m33 elements are set to 0, 0, and 1 respectively.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.SetMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Sets the matrix elements to the specified values, m11, m12, m13
            m21, m22, m23 m31, m32 and m33. Note that this function replaces the
            previous values. QTransform provides the translate(), rotate(), scale() and
            shear() convenience functions to manipulate the various matrix elements
            based on the currently defined coordinate system.</para>
            <para>See also QTransform().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Inverted(System.Boolean@)">
            <summary>
            <para>Returns an inverted copy of this matrix.</para>
            <para>If the matrix is singular (not invertible), the returned matrix
            is the identity matrix. If invertible is valid (i.e. not 0), its value is
            set to true if the matrix is invertible, otherwise it is set to
            false.</para>
            <para>See also isInvertible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Translate(System.Double,System.Double)">
            <summary>
            <para>Moves the coordinate system dx along the x axis and dy along the
            y axis, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Scale(System.Double,System.Double)">
            <summary>
            <para>Scales the coordinate system by sx horizontally and sy
            vertically, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Shear(System.Double,System.Double)">
            <summary>
            <para>Shears the coordinate system by sh horizontally and sv
            vertically, and returns a reference to the matrix.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Rotate(System.Double,QtCore.Qt.Axis)">
            <summary>
            <para>Rotates the coordinate system counterclockwise by the given angle
            about the specified axis and returns a reference to the matrix.</para>
            <para>Note that if you apply a QTransform to a point defined in widget
            coordinates, the direction of the rotation will be clockwise because the
            y-axis points downwards.</para>
            <para>The angle is specified in degrees.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.RotateRadians(System.Double,QtCore.Qt.Axis)">
            <summary>
            <para>Rotates the coordinate system counterclockwise by the given angle
            about the specified axis and returns a reference to the matrix.</para>
            <para>Note that if you apply a QTransform to a point defined in widget
            coordinates, the direction of the rotation will be clockwise because the
            y-axis points downwards.</para>
            <para>The angle is specified in radians.</para>
            <para>See also setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.op_Equality(QtGui.QTransform,QtGui.QTransform)">
            <summary>
            <para>Returns true if this matrix is equal to the given matrix,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.op_Inequality(QtGui.QTransform,QtGui.QTransform)">
            <summary>
            <para>Returns true if this matrix is not equal to the given matrix,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.op_Multiply(QtGui.QTransform,QtGui.QTransform)">
            <summary>
            <para>Returns the result of multiplying this matrix by the given
            matrix.</para>
            <para>Note that matrix multiplication is not commutative, i.e. a*b !=
            b*a.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.op_Implicit(QtGui.QTransform)~QtCore.QVariant">
            <summary>
            <para>Returns the transform as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Reset">
            <summary>
            <para>Resets the matrix to an identity matrix, i.e. all elements are
            set to zero, except m11 and m22 (specifying the scale) and m33 which are
            set to 1.</para>
            <para>See also QTransform(), isIdentity(), and Basic Matrix
            Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPoint object that is a copy of the given
            point, mapped into the coordinate system defined by this matrix. Note that
            the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPointF object that is a copy of the given
            point, p, mapped into the coordinate system defined by this matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtCore.QLine)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QLineF object that is a copy of the given
            line, l, mapped into the coordinate system defined by this matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtCore.QLineF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QLine object that is a copy of the given
            line, mapped into the coordinate system defined by this matrix. Note that
            the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtGui.QPolygonF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPolygonF object that is a copy of the
            given polygon, mapped into the coordinate system defined by this
            matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtGui.QPolygon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPolygon object that is a copy of the given
            polygon, mapped into the coordinate system defined by this matrix. Note
            that the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtGui.QRegion)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QRegion object that is a copy of the given
            region, mapped into the coordinate system defined by this matrix.</para>
            <para>Calling this method can be rather expensive if rotations or
            shearing are used.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(QtGui.QPainterPath)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QPainterPath object that is a copy of the
            given path, mapped into the coordinate system defined by this
            matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.MapToPolygon(QtCore.QRect)">
            <summary>
            <para>Creates and returns a QPolygon representation of the given
            rectangle, mapped into the coordinate system defined by this matrix.</para>
            <para>The rectangle's coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>if (is not affine) {</para>
            <para>    w' = m13*x + m23*y + m33</para>
            <para>    x' /= w'</para>
            <para>    y' /= w'</para>
            <para>}</para>
            <para>Polygons and rectangles behave slightly differently when
            transformed (due to integer rounding), so matrix.map(QPolygon(rectangle))
            is not always the same as matrix.mapToPolygon(rectangle).</para>
            <para>See also mapRect() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.MapRect(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a QRect object that is a copy of the given
            rectangle, mapped into the coordinate system defined by this matrix. Note
            that the transformed coordinates are rounded to the nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.MapRect(QtCore.QRectF)">
            <summary>
            <para>Creates and returns a QRectF object that is a copy of the given
            rectangle, mapped into the coordinate system defined by this matrix.</para>
            <para>The rectangle's coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>if (is not affine) {</para>
            <para>    w' = m13*x + m23*y + m33</para>
            <para>    x' /= w'</para>
            <para>    y' /= w'</para>
            <para>}</para>
            <para>If rotation or shearing has been specified, this function returns
            the bounding rectangle. To retrieve the exact region the given rectangle
            maps to, use the mapToPolygon() function instead.</para>
            <para>See also mapToPolygon() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Maps the given coordinates x and y into the coordinate system
            defined by this matrix. The resulting values are put in *tx and *ty,
            respectively. Note that the transformed coordinates are rounded to the
            nearest integer.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Map(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            <para>Maps the given coordinates x and y into the coordinate system
            defined by this matrix. The resulting values are put in *tx and *ty,
            respectively.</para>
            <para>The coordinates are transformed using the following
            formulas:</para>
            <para>x' = m11*x + m21*y + dx</para>
            <para>y' = m22*y + m12*x + dy</para>
            <para>if (is not affine) {</para>
            <para>    w' = m13*x + m23*y + m33</para>
            <para>    x' /= w'</para>
            <para>    y' /= w'</para>
            <para>}</para>
            <para>The point (x, y) is the original point, and (x', y') is the
            transformed point.</para>
            <para>See also Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.ToAffine">
            <summary>
            <para>Returns the QTransform as an affine matrix.</para>
            <para>Warning: If a perspective transformation has been specified, then
            the conversion will cause loss of data.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.Inverted">
            <summary>
            <para>Returns an inverted copy of this matrix.</para>
            <para>If the matrix is singular (not invertible), the returned matrix
            is the identity matrix. If invertible is valid (i.e. not 0), its value is
            set to true if the matrix is invertible, otherwise it is set to
            false.</para>
            <para>See also isInvertible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.SquareToQuad(QtGui.QPolygonF,QtGui.QTransform)">
            <summary>
            <para>Creates a transformation matrix, trans, that maps a unit square
            to a four-sided polygon, quad. Returns true if the transformation is
            constructed or false if such a transformation does not exist.</para>
            <para>See also quadToSquare() and quadToQuad().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.QuadToSquare(QtGui.QPolygonF,QtGui.QTransform)">
            <summary>
            <para>Creates a transformation matrix, trans, that maps a four-sided
            polygon, quad, to a unit square. Returns true if the transformation is
            constructed or false if such a transformation does not exist.</para>
            <para>See also squareToQuad() and quadToQuad().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.QuadToQuad(QtGui.QPolygonF,QtGui.QPolygonF,QtGui.QTransform)">
            <summary>
            <para>Creates a transformation matrix, trans, that maps a four-sided
            polygon, one, to another four-sided polygon, two. Returns true if the
            transformation is possible; otherwise returns false.</para>
            <para>This is a convenience method combining quadToSquare() and
            squareToQuad() methods. It allows the input quad to be transformed into any
            other quad.</para>
            <para>See also squareToQuad() and quadToSquare().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.FromTranslate(System.Double,System.Double)">
            <summary>
            <para>Creates a matrix which corresponds to a translation of dx along
            the x axis and dy along the y axis. This is the same as
            QTransform().translate(dx, dy) but slightly faster.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.FromScale(System.Double,System.Double)">
            <summary>
            <para>Creates a matrix which corresponds to a scaling of sx
            horizontally and sy vertically. This is the same as QTransform().scale(sx,
            sy) but slightly faster.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTransform.QFuzzyCompare(QtGui.QTransform,QtGui.QTransform)">
            <summary>
            <para>Returns true if t1 and t2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsAffine">
            <summary>
            <para>Returns true if the matrix represent an affine transformation,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsIdentity">
            <summary>
            <para>Returns true if the matrix is the identity matrix, otherwise
            returns false.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsInvertible">
            <summary>
            <para>Returns true if the matrix is invertible, otherwise returns
            false.</para>
            <para>See also inverted().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsScaling">
            <summary>
            <para>Returns true if the matrix represents a scaling transformation,
            otherwise returns false.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsRotating">
            <summary>
            <para>Returns true if the matrix represents some kind of a rotating
            transformation, otherwise returns false.</para>
            <para>Note: A rotation transformation of 180 degrees and/or 360 degrees
            is treated as a scaling transformation.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.IsTranslating">
            <summary>
            <para>Returns true if the matrix represents a translating
            transformation, otherwise returns false.</para>
            <para>See also reset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Type">
            <summary>
            <para>Returns the transformation type of this matrix.</para>
            <para>The transformation type is the highest enumeration value
            capturing all of the matrix's transformations. For example, if the matrix
            both scales and shears, the type would be TxShear, because TxShear has a
            higher enumeration value than TxScale.</para>
            <para>Knowing the transformation type of a matrix is useful for
            optimization: you can often handle specific types more optimally than
            handling the generic case.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Determinant">
            <summary>
            <para>Returns the matrix's determinant.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Det">
            <summary>
            <para>Returns the matrix's determinant. Use determinant()
            instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M11">
            <summary>
            <para>Returns the horizontal scaling factor.</para>
            <para>See also scale() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M12">
            <summary>
            <para>Returns the vertical shearing factor.</para>
            <para>See also shear() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M13">
            <summary>
            <para>Returns the horizontal projection factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M21">
            <summary>
            <para>Returns the horizontal shearing factor.</para>
            <para>See also shear() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M22">
            <summary>
            <para>Returns the vertical scaling factor.</para>
            <para>See also scale() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M23">
            <summary>
            <para>Returns the vertical projection factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M31">
            <summary>
            <para>Returns the horizontal translation factor.</para>
            <para>See also dx(), translate(), and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M32">
            <summary>
            <para>Returns the vertical translation factor.</para>
            <para>See also dy(), translate(), and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.M33">
            <summary>
            <para>Returns the division factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Dx">
            <summary>
            <para>Returns the horizontal translation factor.</para>
            <para>See also m31(), translate(), and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Dy">
            <summary>
            <para>Returns the vertical translation factor.</para>
            <para>See also translate() and Basic Matrix Operations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Adjoint">
            <summary>
            <para>Returns the adjoint of this matrix.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTransform.Transposed">
            <summary>
            <para>Returns the transpose of this matrix.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixelFormat">
            <summary>
            <para>QPixelFormat is a class for describing different pixel layouts in
            graphics buffers</para>
            </summary>
            <remarks>
            <para>In Qt there is a often a need to represent the layout of the
            pixels in a graphics buffer. Internally QPixelFormat stores everything in a
            64 bit datastructure. This gives performance but also some
            limitations.</para>
            <para>QPixelFormat can describe 5 color channels and 1 alpha channel,
            each can use 6 bits to describe the size of the color channel.</para>
            <para>The position of the alpha channel is described with a separate
            enum. This is to make it possible to describe QImage formats like ARGB32,
            and also describe typical OpenGL formats like RBGA8888.</para>
            <para>How pixels are suppose to be read is determined by the
            TypeInterpretation enum. It describes if color values are suppose to be
            read byte per byte, or if a pixel is suppose to be read as a complete int
            and then masked.</para>
            <para>There is no support for describing YUV's macro pixels. Instead a
            list of YUV formats has been made. When a QPixelFormat is describing a YUV
            format, the bitsPerPixel value has been deduced by the YUV Layout enum.
            Also, the color channels should all be set to zero except the fifth color
            channel that should store the bitsPerPixel value.</para>
            <para></para>
            <para>See also TypeInterpretation.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPixelFormat.#ctor">
            <summary>
            <para>Creates a null pixelformat. This format maps to
            QImage::Format_Invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.#ctor(QtGui.QPixelFormat.ColorModel,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.AlphaPremultiplied,QtGui.QPixelFormat.TypeInterpretation,QtGui.QPixelFormat.ByteOrder,System.Byte)">
            <summary>
            <para>Creates a QPixelFormat which assigns its data to the attributes.
            colorModel will be put into a buffer which is 4 bits long.</para>
            <para>firstSize secondSize thirdSize fourthSize fifthSize alphaSize are
            all meant to represent the size of a channel. The channels will be used for
            different uses dependent on the colorModel. For RGB the firstSize will
            represent the Red channel. On CMYK it will represent the value of the Cyan
            channel.</para>
            <para>alphaUsage represents if the alpha channel is used or not.</para>
            <para>alphaPosition is the position of the alpha channel.</para>
            <para>premultiplied represents if the alpha channel is already
            multiplied with the color channels.</para>
            <para>typeInterpretation is how the pixel is interpreted.</para>
            <para>byteOrder represents the endianness of the pixelformat. This
            defaults to CurrentSystemEndian.</para>
            <para>subEnum is used for colorModels that have to store some extra
            information with supplying an extra enum. This is used by YUV to store the
            YUV type The default value is 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatRgba(System.Byte,System.Byte,System.Byte,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.AlphaPremultiplied,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function making an RGB pixelformat. redSize greenSize
            blueSize represent the size of each color channel. alphaSize describes the
            alpha channel size and its position is described with alphaPosition.
            alphaUsage is used to determine if the alpha channel is used or not.
            Setting the alpha channel size to 8 and alphaUsage to IgnoresAlpha is how
            it is possible to create a 32 bit format where the rgb channels only use 24
            bits combined. premultiplied typeInterpretation are accessible with
            accessors with the same name.</para>
            <para>See also QPixelFormat::TypeInterpretation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatGrayscale(System.Byte,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function for creating a Grayscale format. Monochrome
            formats can be described by passing 1 to channelSize. Its also possible to
            define very accurate grayscale formats using doubles to describe each pixel
            by passing 8 as channelSize and FloatingPoint as typeInterpretation.</para>
            <para>See also QPixelFormat::TypeInterpretation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatAlpha(System.Byte,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function for creating an Alpha format. A mask format
            can be described by passing 1 to channelSize. Its also possible to define
            very accurate alpha formats using doubles to describe each pixel by passing
            8 as channelSize and FloatingPoint as typeInterpretation.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QPixelFormat::TypeInterpretation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatCmyk(System.Byte,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function for creating CMYK formats. The channel count
            will be 4 or 5 depending on if alphaSize is bigger than zero or not. The
            CMYK color channels will all be set to the value of channelSize.</para>
            <para>alphaUsage alphaPosition and typeInterpretation are all
            accessible with the accessors with the same name.</para>
            <para>See also QPixelFormat::TypeInterpretation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatHsl(System.Byte,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function for creating HSL formats. The channel count
            will be 3 or 4 depending on if alphaSize is bigger than 0.</para>
            <para>channelSize will set the hueSize saturationSize and lightnessSize
            to the same value.</para>
            <para>alphaUsage alphaPosition and typeInterpretation are all
            accessible with the accessors with the same name.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatHsv(System.Byte,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.TypeInterpretation)">
            <summary>
            <para>Constructor function for creating HSV formats. The channel count
            will be 3 or 4 depending on if alphaSize is bigger than 0.</para>
            <para>channelSize will set the hueSize saturationSize and
            brightnessSize to the same value.</para>
            <para>alphaUsage alphaPosition and typeInterpretation are all
            accessible with the accessors with the same name.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixelFormat.QPixelFormatYuv(QtGui.QPixelFormat.YUVLayout,System.Byte,QtGui.QPixelFormat.AlphaUsage,QtGui.QPixelFormat.AlphaPosition,QtGui.QPixelFormat.AlphaPremultiplied,QtGui.QPixelFormat.TypeInterpretation,QtGui.QPixelFormat.ByteOrder)">
            <summary>
            <para>Constructor function for creating a QPixelFormat describing a YUV
            format with yuvLayout. alphaSize describes the size of a potential alpha
            channel and is position is described with alphaPosition. The
            &quot;first&quot; &quot;second&quot; .. &quot;fifth&quot; channels are all
            set to 0. alphaUsage premultiplied typeInterpretation and byteOrder will
            work as with other formats.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.colorModel">
            <summary>
            <para>Accessor function for getting the colorModel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.ChannelCount">
            <summary>
            <para>Accessor function for getting the channelCount. Channel Count is
            deduced by color channels with a size &gt; 0 and if the size of the alpha
            channel is &gt; 0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.RedSize">
            <summary>
            <para>Accessor function for the size of the red color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.GreenSize">
            <summary>
            <para>Accessor function for the size of the green color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.BlueSize">
            <summary>
            <para>Accessor function for the size of the blue color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.CyanSize">
            <summary>
            <para>Accessor function for the cyan color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.MagentaSize">
            <summary>
            <para>Accessor function for the megenta color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.YellowSize">
            <summary>
            <para>Accessor function for the yellow color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.BlackSize">
            <summary>
            <para>Accessor function for the black/key color channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.HueSize">
            <summary>
            <para>Accessor function for the hue channel size.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.SaturationSize">
            <summary>
            <para>Accessor function for the saturation channel size.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.LightnessSize">
            <summary>
            <para>Accessor function for the lightness channel size.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.BrightnessSize">
            <summary>
            <para>Accessor function for the brightness channel size.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.AlphaSize">
            <summary>
            <para>Accessor function for the alpha channel size.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.BitsPerPixel">
            <summary>
            <para>Accessor function for the bits used per pixel. This function
            returns the sum of the color channels + the size of the alpha
            channel.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.alphaUsage">
            <summary>
            <para>Accessor function for alphaUsage.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.alphaPosition">
            <summary>
            <para>Accessor function for alphaPosition.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.Premultiplied">
            <summary>
            <para>Accessor function for the AlphaPremultiplied enum. This indicates
            if the alpha channel is multiplied in to the color channels.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.typeInterpretation">
            <summary>
            <para>Accessor function for the type representation of a color channel
            or a pixel.</para>
            <para>See also TypeInterpretation.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.byteOrder">
            <summary>
            <para>The byte order is almost always set the the byte order of the
            current system. However, it can be useful to describe some YUV formats.
            This function should never return QPixelFormat::CurrentSystemEndian as this
            value is translated to a endian value in the constructor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixelFormat.YuvLayout">
            <summary>
            <para>Accessor function for the YUVLayout. It is difficult to describe
            the color channels of a YUV pixel format since YUV color model uses macro
            pixels. Instead the layout of the pixels are stored as an enum.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixelFormat.ColorModel">
            <summary>
            <para>This enum type is used to describe the color model of the
            pixelformat. Alpha was added in 5.5.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.RGB">
            <summary>The color model is RGB.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.BGR">
            <summary>This is logically the opposite endian version of RGB. However, for ease of use it has its own model.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.Indexed">
            <summary>The color model uses a color palette.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.Grayscale">
            <summary>The color model is Grayscale.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.CMYK">
            <summary>The color model is CMYK.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.HSL">
            <summary>The color model is HSL.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.HSV">
            <summary>The color model is HSV.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.YUV">
            <summary>The color model is YUV.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ColorModel.Alpha">
            <summary>There is no color model, only alpha is used.</summary>
        </member>
        <member name="T:QtGui.QPixelFormat.AlphaUsage">
            <summary>
            <para>This enum describes if the alpha channel is used or not.
            Sometimes the pixelformat will have a size for the alpha channel, but the
            pixel format does actually not use the alpha channel. For example RGB32 is
            such a format. The RGB channels are 8 bits each, and there is no alpha
            channel. But the complete size for each pixel is 32. Therefore the alpha
            channel size is 8, but the alpha channel is ignored. Its important to note
            that in such situations the position of the alpha channel is
            significant.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaUsage.UsesAlpha">
            <summary>The alpha channel is used.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaUsage.IgnoresAlpha">
            <summary>The alpha channel is not used.</summary>
        </member>
        <member name="T:QtGui.QPixelFormat.AlphaPosition">
            <summary>
            <para>This enum type is used to describe the alpha channels position
            relative to the color channels.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaPosition.AtBeginning">
            <summary>The alpha channel will be put in front of the color channels . E.g. ARGB.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaPosition.AtEnd">
            <summary>The alpha channel will be put in the back of the color channels. E.g. RGBA.</summary>
        </member>
        <member name="T:QtGui.QPixelFormat.AlphaPremultiplied">
            <summary>
            <para>This enum type describes the boolean state if the alpha channel
            is multiplied into the color channels or not.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaPremultiplied.NotPremultiplied">
            <summary>The alpha channel is not multiplied into the color channels.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.AlphaPremultiplied.Premultiplied">
            <summary>The alpha channel is multiplied into the color channels.</summary>
        </member>
        <member name="T:QtGui.QPixelFormat.TypeInterpretation">
            <summary>
            <para>This enum describes how each pixel is interpreted. If a pixel is
            read as a full 32 bit unsigned integer and then each channel is masked out,
            or if each byte is read as unsigned char values. Typically QImage formats
            interpret one pixel as an unsigned integer and then the color channels are
            masked out. OpenGL on the other hand typically interpreted pixels &quot;one
            byte after the other&quot;, Ie. unsigned byte.</para>
            <para>QImage also have the format Format_RGBA8888 (and its
            derivatives), where the pixels are interpreted as unsigned bytes. OpenGL
            has extensions that makes it possible to upload pixel buffers in an
            unsigned integer format.</para>
            <para></para>
            <para>The image above shows a ARGB pixel in memory read as an unsigned
            integer. However, if this pixel was read byte for byte on a little endian
            system the first byte would be the byte containing the B-channel. The next
            byte would be the G-channel, then the R-channel and finally the A-channel.
            This shows that on little endian systems, how each pixel is interpreted is
            significant for integer formats. This is not the case on big endian
            systems.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixelFormat.YUVLayout">
            <summary>
            <para>YUV is not represented by describing the size of the color
            channels. This is because YUV often use macro pixels, making the concept of
            sperate color channels invalid. Instead the different YUV layouts are
            described with this enum.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixelFormat.ByteOrder">
            <summary>
            <para>This enum describes the ByteOrder of the pixel format. This enum
            is mostly ignored but have some use cases for YUV formats. BGR formats have
            their own color model, and should not be described by using the opposite
            endianness on an RGB format.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ByteOrder.LittleEndian">
            <summary>The byte order is little endian.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ByteOrder.BigEndian">
            <summary>The byte order is big endian.</summary>
        </member>
        <member name="F:QtGui.QPixelFormat.ByteOrder.CurrentSystemEndian">
            <summary>This enum will not be stored, but is converted in the constructor to the endian enum that matches the enum of the current system.</summary>
        </member>
        <member name="T:QtGui.QImage">
            <summary>
            <para>The QImage class provides a hardware-independent image
            representation that allows direct access to the pixel data, and can be used
            as a paint device.</para>
            </summary>
            <remarks>
            <para>Qt provides four classes for handling image data: QImage,
            QPixmap, QBitmap and QPicture. QImage is designed and optimized for I/O,
            and for direct pixel access and manipulation, while QPixmap is designed and
            optimized for showing images on screen. QBitmap is only a convenience class
            that inherits QPixmap, ensuring a depth of 1. Finally, the QPicture class
            is a paint device that records and replays QPainter commands.</para>
            <para>Because QImage is a QPaintDevice subclass, QPainter can be used
            to draw directly onto images. When using QPainter on a QImage, the painting
            can be performed in another thread than the current GUI thread.</para>
            <para>The QImage class supports several image formats described by the
            Format enum. These include monochrome, 8-bit, 32-bit and alpha-blended
            images which are available in all versions of Qt 4.x.</para>
            <para>QImage provides a collection of functions that can be used to
            obtain a variety of information about the image. There are also several
            functions that enables transformation of the image.</para>
            <para>QImage objects can be passed around by value since the QImage
            class uses implicit data sharing. QImage objects can also be streamed and
            compared.</para>
            <para>Note: If you would like to load QImage objects in a static build
            of Qt, refer to the Plugin HowTo.</para>
            <para>Warning: Painting on a QImage with the format
            QImage::Format_Indexed8 is not supported.</para>
            <para></para>
            <para>Reading and Writing Image Files</para>
            <para>QImage provides several ways of loading an image file: The file
            can be loaded when constructing the QImage object, or by using the load()
            or loadFromData() functions later on. QImage also provides the static
            fromData() function, constructing a QImage from the given data. When
            loading an image, the file name can either refer to an actual file on disk
            or to one of the application's embedded resources. See The Qt Resource
            System overview for details on how to embed images and other resource files
            in the application's executable.</para>
            <para>Simply call the save() function to save a QImage object.</para>
            <para>The complete list of supported file formats are available through
            the QImageReader::supportedImageFormats() and
            QImageWriter::supportedImageFormats() functions. New file formats can be
            added as plugins. By default, Qt supports the following formats:</para>
            <para></para>
            <para> FormatDescriptionQt's support</para>
            <para>BMP	Windows Bitmap	Read/write</para>
            <para>GIF	Graphic Interchange Format (optional)	Read</para>
            <para>JPG	Joint Photographic Experts Group	Read/write</para>
            <para>JPEG	Joint Photographic Experts Group	Read/write</para>
            <para>PNG	Portable Network Graphics	Read/write</para>
            <para>PBM	Portable Bitmap	Read</para>
            <para>PGM	Portable Graymap	Read</para>
            <para>PPM	Portable Pixmap	Read/write</para>
            <para>XBM	X11 Bitmap	Read/write</para>
            <para>XPM	X11 Pixmap	Read/write</para>
            <para></para>
            <para></para>
            <para>Image Information</para>
            <para>QImage provides a collection of functions that can be used to
            obtain a variety of information about the image:</para>
            <para></para>
            <para> Available Functions</para>
            <para>Geometry	The size(), width(), height(), dotsPerMeterX(), and
            dotsPerMeterY() functions provide information about the image size and
            aspect ratio.The rect() function returns the image's enclosing rectangle.
            The valid() function tells if a given pair of coordinates is within this
            rectangle. The offset() function returns the number of pixels by which the
            image is intended to be offset by when positioned relative to other images,
            which also can be manipulated using the setOffset() function.</para>
            <para></para>
            <para>Colors	The color of a pixel can be retrieved by passing its
            coordinates to the pixel() function. The pixel() function returns the color
            as a QRgb value indepedent of the image's format.In case of monochrome and
            8-bit images, the colorCount() and colorTable() functions provide
            information about the color components used to store the image data: The
            colorTable() function returns the image's entire color table. To obtain a
            single entry, use the pixelIndex() function to retrieve the pixel index for
            a given pair of coordinates, then use the color() function to retrieve the
            color. Note that if you create an 8-bit image manually, you have to set a
            valid color table on the image as well.</para>
            <para>The hasAlphaChannel() function tells if the image's format
            respects the alpha channel, or not. The allGray() and isGrayscale()
            functions tell whether an image's colors are all shades of gray.</para>
            <para>See also the Pixel Manipulation and Image Transformations
            sections.</para>
            <para></para>
            <para>Text	The text() function returns the image text associated with
            the given text key. An image's text keys can be retrieved using the
            textKeys() function. Use the setText() function to alter an image's
            text.</para>
            <para>Low-level information	The depth() function returns the depth of
            the image. The supported depths are 1 (monochrome), 8, 16, 24 and 32 bits.
            The bitPlaneCount() function tells how many of those bits that are used.
            For more information see the Image Formats section.The format(),
            bytesPerLine(), and byteCount() functions provide low-level information
            about the data stored in the image.</para>
            <para>The cacheKey() function returns a number that uniquely identifies
            the contents of this QImage object.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Pixel Manipulation</para>
            <para>The functions used to manipulate an image's pixels depend on the
            image format. The reason is that monochrome and 8-bit images are
            index-based and use a color lookup table, while 32-bit images store ARGB
            values directly. For more information on image formats, see the Image
            Formats section.</para>
            <para>In case of a 32-bit image, the setPixel() function can be used to
            alter the color of the pixel at the given coordinates to any other color
            specified as an ARGB quadruplet. To make a suitable QRgb value, use the
            qRgb() (adding a default alpha component to the given RGB values, i.e.
            creating an opaque color) or qRgba() function. For example:</para>
            <para></para>
            <para> 32-bit</para>
            <para>	QImage image(3, 3, QImage::Format_RGB32);</para>
            <para>QRgb value;</para>
            <para></para>
            <para>value = qRgb(189, 149, 39); // 0xffbd9527</para>
            <para>image.setPixel(1, 1, value);</para>
            <para></para>
            <para>value = qRgb(122, 163, 39); // 0xff7aa327</para>
            <para>image.setPixel(0, 1, value);</para>
            <para>image.setPixel(1, 0, value);</para>
            <para></para>
            <para>value = qRgb(237, 187, 51); // 0xffedba31</para>
            <para>image.setPixel(2, 1, value);</para>
            <para></para>
            <para></para>
            <para>In case of a 8-bit and monchrome images, the pixel value is only
            an index from the image's color table. So the setPixel() function can only
            be used to alter the color of the pixel at the given coordinates to a
            predefined color from the image's color table, i.e. it can only change the
            pixel's index value. To alter or add a color to an image's color table, use
            the setColor() function.</para>
            <para>An entry in the color table is an ARGB quadruplet encoded as an
            QRgb value. Use the qRgb() and qRgba() functions to make a suitable QRgb
            value for use with the setColor() function. For example:</para>
            <para></para>
            <para> 8-bit</para>
            <para>	QImage image(3, 3, QImage::Format_Indexed8);</para>
            <para>QRgb value;</para>
            <para></para>
            <para>value = qRgb(122, 163, 39); // 0xff7aa327</para>
            <para>image.setColor(0, value);</para>
            <para></para>
            <para>value = qRgb(237, 187, 51); // 0xffedba31</para>
            <para>image.setColor(1, value);</para>
            <para></para>
            <para>value = qRgb(189, 149, 39); // 0xffbd9527</para>
            <para>image.setColor(2, value);</para>
            <para></para>
            <para>image.setPixel(0, 1, 0);</para>
            <para>image.setPixel(1, 0, 0);</para>
            <para>image.setPixel(1, 1, 2);</para>
            <para>image.setPixel(2, 1, 1);</para>
            <para></para>
            <para></para>
            <para>QImage also provide the scanLine() function which returns a
            pointer to the pixel data at the scanline with the given index, and the
            bits() function which returns a pointer to the first pixel data (this is
            equivalent to scanLine(0)).</para>
            <para></para>
            <para>Image Formats</para>
            <para>Each pixel stored in a QImage is represented by an integer. The
            size of the integer varies depending on the format. QImage supports several
            image formats described by the Format enum.</para>
            <para>Monochrome images are stored using 1-bit indexes into a color
            table with at most two colors. There are two different types of monochrome
            images: big endian (MSB first) or little endian (LSB first) bit
            order.</para>
            <para>8-bit images are stored using 8-bit indexes into a color table,
            i.e. they have a single byte per pixel. The color table is a
            QVector&lt;QRgb&gt;, and the QRgb typedef is equivalent to an unsigned int
            containing an ARGB quadruplet on the format 0xAARRGGBB.</para>
            <para>32-bit images have no color table; instead, each pixel contains
            an QRgb value. There are three different types of 32-bit images storing RGB
            (i.e. 0xffRRGGBB), ARGB and premultiplied ARGB values respectively. In the
            premultiplied format the red, green, and blue channels are multiplied by
            the alpha component divided by 255.</para>
            <para>An image's format can be retrieved using the format() function.
            Use the convertToFormat() functions to convert an image into another
            format. The allGray() and isGrayscale() functions tell whether a color
            image can safely be converted to a grayscale image.</para>
            <para></para>
            <para>Image Transformations</para>
            <para>QImage supports a number of functions for creating a new image
            that is a transformed version of the original: The createAlphaMask()
            function builds and returns a 1-bpp mask from the alpha buffer in this
            image, and the createHeuristicMask() function creates and returns a 1-bpp
            heuristic mask for this image. The latter function works by selecting a
            color from one of the corners, then chipping away pixels of that color
            starting at all the edges.</para>
            <para>The mirrored() function returns a mirror of the image in the
            desired direction, the scaled() returns a copy of the image scaled to a
            rectangle of the desired measures, and the rgbSwapped() function constructs
            a BGR image from a RGB image.</para>
            <para>The scaledToWidth() and scaledToHeight() functions return scaled
            copies of the image.</para>
            <para>The transformed() function returns a copy of the image that is
            transformed with the given transformation matrix and transformation mode:
            Internally, the transformation matrix is adjusted to compensate for
            unwanted translation, i.e. transformed() returns the smallest image
            containing all transformed points of the original image. The static
            trueMatrix() function returns the actual matrix used for transforming the
            image.</para>
            <para>There are also functions for changing attributes of an image
            in-place:</para>
            <para></para>
            <para> FunctionDescription</para>
            <para>setDotsPerMeterX()	Defines the aspect ratio by setting the number
            of pixels that fit horizontally in a physical meter.</para>
            <para>setDotsPerMeterY()	Defines the aspect ratio by setting the number
            of pixels that fit vertically in a physical meter.</para>
            <para>fill()	Fills the entire image with the given pixel value.</para>
            <para>invertPixels()	Inverts all pixel values in the image using the
            given InvertMode value.</para>
            <para>setColorTable()	Sets the color table used to translate color
            indexes. Only monochrome and 8-bit formats.</para>
            <para>setColorCount()	Resizes the color table. Only monochrome and
            8-bit formats.</para>
            <para></para>
            <para></para>
            <para>Legal Information</para>
            <para>For smooth scaling, the transformed() functions use code based on
            smooth scaling algorithm by Daniel M. Duley.</para>
            <para>Copyright (C) 2004, 2005 Daniel M. Duley</para>
            <para>Redistribution and use in source and binary forms, with or
            without modification, are permitted provided that the following conditions
            are met:</para>
            <para>1. Redistributions of source code must retain the above copyright
            notice, this list of conditions and the following disclaimer. 2.
            Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.</para>
            <para>THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
            OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
            WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
            DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
            INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
            (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
            SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
            LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
            OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
            DAMAGE.</para>
            <para></para>
            <para></para>
            <para>See also QImageReader, QImageWriter, QPixmap, QSvgRenderer, Image
            Composition Example, Image Viewer Example, Scribble Example, and Pixelator
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QImage.#ctor">
            <summary>
            <para>Constructs a null image.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.#ctor(QtCore.QSize,QtGui.QImage.Format)">
            <summary>
            <para>Constructs an image with the given size and format.</para>
            <para>A null image is returned if memory cannot be allocated.</para>
            <para>Warning: This will create a QImage with uninitialized data. Call
            fill() to fill the image with an appropriate pixel value before drawing
            onto it with QPainter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.#ctor(System.Int32,System.Int32,QtGui.QImage.Format)">
            <summary>
            <para>Constructs an image with the given width, height and
            format.</para>
            <para>A null image will be returned if memory cannot be
            allocated.</para>
            <para>Warning: This will create a QImage with uninitialized data. Call
            fill() to fill the image with an appropriate pixel value before drawing
            onto it with QPainter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.#ctor(System.Byte*,System.Int32,System.Int32,QtGui.QImage.Format,QtGui.QImageCleanupFunction,System.IntPtr)">
            <summary>
            <para>Constructs an image with the given width, height and format, that
            uses an existing memory buffer, data. The width and height must be
            specified in pixels, data must be 32-bit aligned, and each scanline of data
            in the image must also be 32-bit aligned.</para>
            <para>The buffer must remain valid throughout the life of the QImage
            and all copies that have not been modified or otherwise detached from the
            original buffer. The image does not delete the buffer at destruction. You
            can provide a function pointer cleanupFunction along with an extra pointer
            cleanupInfo that will be called when the last copy is destroyed.</para>
            <para>If format is an indexed color format, the image color table is
            initially empty and must be sufficiently expanded with setColorCount() or
            setColorTable() before the image is used.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.#ctor(System.Byte*,System.Int32,System.Int32,System.Int32,QtGui.QImage.Format,QtGui.QImageCleanupFunction,System.IntPtr)">
            <summary>
            <para>Constructs an image with the given width, height and format, that
            uses an existing memory buffer, data. The width and height must be
            specified in pixels. bytesPerLine specifies the number of bytes per line
            (stride).</para>
            <para>The buffer must remain valid throughout the life of the QImage
            and all copies that have not been modified or otherwise detached from the
            original buffer. The image does not delete the buffer at destruction. You
            can provide a function pointer cleanupFunction along with an extra pointer
            cleanupInfo that will be called when the last copy is destroyed.</para>
            <para>If format is an indexed color format, the image color table is
            initially empty and must be sufficiently expanded with setColorCount() or
            setColorTable() before the image is used.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.#ctor(System.String,System.String)">
            <summary>
            <para>Constructs an image and tries to load the image from the file
            with the given fileName.</para>
            <para>The loader attempts to read the image using the specified format.
            If the format is not specified (which is the default), the loader probes
            the file for a header to guess the file format.</para>
            <para>If the loading of the image failed, this object is a null
            image.</para>
            <para>The file name can either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed images and other resource files in the
            application's executable.</para>
            <para>See also isNull() and Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Swap(QtGui.QImage)">
            <summary>
            <para>Swaps image other with this image. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.op_Equality(QtGui.QImage,QtGui.QImage)">
            <summary>
            <para>Returns true if this image and the given image have the same
            contents; otherwise returns false.</para>
            <para>The comparison can be slow, unless there is some obvious
            difference (e.g. different size or format), in which case the function will
            return quickly.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.op_Inequality(QtGui.QImage,QtGui.QImage)">
            <summary>
            <para>Returns true if this image and the given image have different
            contents; otherwise returns false.</para>
            <para>The comparison can be slow, unless there is some obvious
            difference, such as different widths, in which case the function will
            return quickly.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.op_Implicit(QtGui.QImage)~QtCore.QVariant">
            <summary>
            <para>Returns the image as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Copy(QtCore.QRect)">
            <summary>
            <para>Returns a sub-area of the image as a new image.</para>
            <para>The returned image is copied from the position (rectangle.x(),
            rectangle.y()) in this image, and will always have the size of the given
            rectangle.</para>
            <para>In areas beyond this image, pixels are set to 0. For 32-bit RGB
            images, this means black; for 32-bit ARGB images, this means transparent
            black; for 8-bit images, this means the color with index 0 in the color
            table which can be anything; for 1-bit images, this means
            Qt::color0.</para>
            <para>If the given rectangle is a null rectangle the entire image is
            copied.</para>
            <para>See also QImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Copy(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The returned image is copied from the position (x, y) in this
            image, and will always have the given width and height. In areas beyond
            this image, pixels are set to 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ConvertToFormat(QtGui.QImage.Format,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Returns a copy of the image in the given format.</para>
            <para>The specified image conversion flags control how the image data
            is handled during the conversion process.</para>
            <para>See also Image Formats.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Color(System.Int32)">
            <summary>
            <para>Returns the color in the color table at index i. The first color
            is at index 0.</para>
            <para>The colors in an image's color table are specified as ARGB
            quadruplets (QRgb). Use the qAlpha(), qRed(), qGreen(), and qBlue()
            functions to get the color value components.</para>
            <para>See also setColor(), pixelIndex(), and Pixel Manipulation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.SetColor(System.Int32,System.UInt32)">
            <summary>
            <para>Sets the color at the given index in the color table, to the
            given to colorValue. The color value is an ARGB quadruplet.</para>
            <para>If index is outside the current size of the color table, it is
            expanded with setColorCount().</para>
            <para>See also color(), colorCount(), setColorTable(), and Pixel
            Manipulation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ScanLine(System.Int32)">
            <summary>
            <para>Returns a pointer to the pixel data at the scanline with index i.
            The first scanline is at index 0.</para>
            <para>The scanline data is aligned on a 32-bit boundary.</para>
            <para>Warning: If you are accessing 32-bpp image data, cast the
            returned pointer to QRgb* (QRgb has a 32-bit size) and use it to read/write
            the pixel value. You cannot use the uchar* pointer directly, because the
            pixel format depends on the byte order on the underlying platform. Use
            qRed(), qGreen(), qBlue(), and qAlpha() to access the pixels.</para>
            <para>See also bytesPerLine(), bits(), Pixel Manipulation, and
            constScanLine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ConstScanLine(System.Int32)">
            <summary>
            <para>Returns a pointer to the pixel data at the scanline with index i.
            The first scanline is at index 0.</para>
            <para>The scanline data is aligned on a 32-bit boundary.</para>
            <para>Note that QImage uses implicit data sharing, but this function
            does not perform a deep copy of the shared pixel data, because the returned
            data is const.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also scanLine() and constBits().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Valid(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if QPoint(x, y) is a valid coordinate pair within
            the image; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Valid(QtCore.QPoint)">
            <summary>
            <para>Returns true if pos is a valid coordinate pair within the image;
            otherwise returns false.</para>
            <para>See also rect() and QRect::contains().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.PixelIndex(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the pixel index at (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.PixelIndex(QtCore.QPoint)">
            <summary>
            <para>Returns the pixel index at the given position.</para>
            <para>If position is not valid, or if the image is not a paletted image
            (depth() &gt; 8), the results are undefined.</para>
            <para>See also valid(), depth(), and Pixel Manipulation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Pixel(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the color of the pixel at coordinates (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Pixel(QtCore.QPoint)">
            <summary>
            <para>Returns the color of the pixel at the given position.</para>
            <para>If the position is not valid, the results are undefined.</para>
            <para>Warning: This function is expensive when used for massive pixel
            manipulations.</para>
            <para>See also setPixel(), valid(), and Pixel Manipulation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.SetPixel(System.Int32,System.Int32,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the pixel index or color at (x, y) to index_or_rgb.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.SetPixel(QtCore.QPoint,System.UInt32)">
            <summary>
            <para>Sets the pixel index or color at the given position to
            index_or_rgb.</para>
            <para>If the image's format is either monochrome or 8-bit, the given
            index_or_rgb value must be an index in the image's color table, otherwise
            the parameter must be a QRgb value.</para>
            <para>If position is not a valid coordinate pair in the image, or if
            index_or_rgb &gt;= colorCount() in the case of monochrome and 8-bit images,
            the result is undefined.</para>
            <para>Warning: This function is expensive due to the call of the
            internal detach() function called within; if performance is a concern, we
            recommend the use of scanLine() to access pixel data directly.</para>
            <para>See also pixel() and Pixel Manipulation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Fill(System.UInt32)">
            <summary>
            <para>Fills the entire image with the given pixelValue.</para>
            <para>If the depth of this image is 1, only the lowest bit is used. If
            you say fill(0), fill(2), etc., the image is filled with 0s. If you say
            fill(1), fill(3), etc., the image is filled with 1s. If the depth is 8, the
            lowest 8 bits are used and if the depth is 16 the lowest 16 bits are
            used.</para>
            <para>Note: QImage::pixel() returns the color of the pixel at the given
            coordinates while QColor::pixel() returns the pixel value of the underlying
            window system (essentially an index value), so normally you will want to
            use QImage::pixel() to use a color from an existing image or QColor::rgb()
            to use a specific color.</para>
            <para>See also depth() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Fill(QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the entire image with the given color.</para>
            <para>If the depth of the image is 1, the image will be filled with 1
            if color equals Qt::color1; it will otherwise be filled with 0.</para>
            <para>If the depth of the image is 8, the image will be filled with the
            index corresponding the color in the color table if present; it will
            otherwise be filled with 0.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Fill(QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the image with the given color, described as a standard
            global color.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.CreateAlphaMask(QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Builds and returns a 1-bpp mask from the alpha buffer in this
            image. Returns a null image if the image's format is
            QImage::Format_RGB32.</para>
            <para>The flags argument is a bitwise-OR of the
            Qt::ImageConversionFlags, and controls the conversion process. Passing 0
            for flags sets all the default options.</para>
            <para>The returned image has little-endian bit order (i.e. the image's
            format is QImage::Format_MonoLSB), which you can convert to big-endian
            (QImage::Format_Mono) using the convertToFormat() function.</para>
            <para>See also createHeuristicMask() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.CreateHeuristicMask(System.Boolean)">
            <summary>
            <para>Creates and returns a 1-bpp heuristic mask for this image.</para>
            <para>The function works by selecting a color from one of the corners,
            then chipping away pixels of that color starting at all the edges. The four
            corners vote for which color is to be masked away. In case of a draw (this
            generally means that this function is not applicable to the image), the
            result is arbitrary.</para>
            <para>The returned image has little-endian bit order (i.e. the image's
            format is QImage::Format_MonoLSB), which you can convert to big-endian
            (QImage::Format_Mono) using the convertToFormat() function.</para>
            <para>If clipTight is true (the default) the mask is just large enough
            to cover the pixels; otherwise, the mask is larger than the data
            pixels.</para>
            <para>Note that this function disregards the alpha buffer.</para>
            <para>See also createAlphaMask() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.CreateMaskFromColor(System.UInt32,QtCore.Qt.MaskMode)">
            <summary>
            <para>Creates and returns a mask for this image based on the given
            color value. If the mode is MaskInColor (the default value), all pixels
            matching color will be opaque pixels in the mask. If mode is MaskOutColor,
            all pixels matching the given color will be transparent.</para>
            <para>See also createAlphaMask() and createHeuristicMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Scaled(System.Int32,System.Int32,QtCore.Qt.AspectRatioMode,QtCore.Qt.TransformationMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the image scaled to a rectangle with the given
            width and height according to the given aspectRatioMode and
            transformMode.</para>
            <para>If either the width or the height is zero or negative, this
            function returns a null image.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Scaled(QtCore.QSize,QtCore.Qt.AspectRatioMode,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a copy of the image scaled to a rectangle defined by the
            given size according to the given aspectRatioMode and transformMode.</para>
            <para></para>
            <para></para>
            <para>If aspectRatioMode is Qt::IgnoreAspectRatio, the image is scaled
            to size.</para>
            <para>If aspectRatioMode is Qt::KeepAspectRatio, the image is scaled to
            a rectangle as large as possible inside size, preserving the aspect
            ratio.</para>
            <para>If aspectRatioMode is Qt::KeepAspectRatioByExpanding, the image
            is scaled to a rectangle as small as possible outside size, preserving the
            aspect ratio.</para>
            <para></para>
            <para>If the given size is empty, this function returns a null
            image.</para>
            <para>See also isNull() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ScaledToWidth(System.Int32,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a scaled copy of the image. The returned image is scaled
            to the given width using the specified transformation mode.</para>
            <para>This function automatically calculates the height of the image so
            that its aspect ratio is preserved.</para>
            <para>If the given width is 0 or negative, a null image is
            returned.</para>
            <para>See also Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ScaledToHeight(System.Int32,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a scaled copy of the image. The returned image is scaled
            to the given height using the specified transformation mode.</para>
            <para>This function automatically calculates the width of the image so
            that the ratio of the image is preserved.</para>
            <para>If the given height is 0 or negative, a null image is
            returned.</para>
            <para>See also Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Transformed(QtGui.QMatrix,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a copy of the image that is transformed using the given
            transformation matrix and transformation mode.</para>
            <para>The transformation matrix is internally adjusted to compensate
            for unwanted translation; i.e. the image produced is the smallest image
            that contains all the transformed points of the original image. Use the
            trueMatrix() function to retrieve the actual matrix used for transforming
            an image.</para>
            <para>See also trueMatrix() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Transformed(QtGui.QTransform,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a copy of the image that is transformed using the given
            transformation matrix and transformation mode.</para>
            <para>The transformation matrix is internally adjusted to compensate
            for unwanted translation; i.e. the image produced is the smallest image
            that contains all the transformed points of the original image. Use the
            trueMatrix() function to retrieve the actual matrix used for transforming
            an image.</para>
            <para>Unlike the other overload, this function can be used to perform
            perspective transformations on images.</para>
            <para>See also trueMatrix() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Mirrored(System.Boolean,System.Boolean)">
            <summary>
            <para>Returns a mirror of the image, mirrored in the horizontal and/or
            the vertical direction depending on whether horizontal and vertical are set
            to true or false.</para>
            <para>Note that the original image is not changed.</para>
            <para>See also Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.InvertPixels(QtGui.QImage.InvertMode)">
            <summary>
            <para>Inverts all pixel values in the image.</para>
            <para>The given invert mode only have a meaning when the image's depth
            is 32. The default mode is InvertRgb, which leaves the alpha channel
            unchanged. If the mode is InvertRgba, the alpha bits are also
            inverted.</para>
            <para>Inverting an 8-bit image means to replace all pixels using color
            index i with a pixel using color index 255 minus i. The same is the case
            for a 1-bit image. Note that the color table is not changed.</para>
            <para>If the image has a premultiplied alpha channel, the image is
            first converted to ARGB32 to be inverted and then converted back.</para>
            <para>See also Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Load(QtCore.QIODevice,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function reads a QImage from the given device. This can, for
            example, be used to load an image directly into a QByteArray.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Load(System.String,System.String)">
            <summary>
            <para>Loads an image from the file with the given fileName. Returns
            true if the image was successfully loaded; otherwise invalidates the image
            and returns false.</para>
            <para>The loader attempts to read the image using the specified format,
            e.g., PNG or JPG. If format is not specified (which is the default), the
            loader probes the file for a header to guess the file format.</para>
            <para>The file name can either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed images and other resource files in the
            application's executable.</para>
            <para>See also Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.LoadFromData(System.Byte*,System.Int32,System.String)">
            <summary>
            <para>Loads an image from the first len bytes of the given binary data.
            Returns true if the image was successfully loaded; otherwise invalidates
            the image and returns false.</para>
            <para>The loader attempts to read the image using the specified format,
            e.g., PNG or JPG. If format is not specified (which is the default), the
            loader probes the file for a header to guess the file format.</para>
            <para>See also Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.LoadFromData(QtCore.QByteArray,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads an image from the given QByteArray data.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Save(System.String,System.String,System.Int32)">
            <summary>
            <para>Saves the image to the file with the given fileName, using the
            given image file format and quality factor. If format is 0, QImage will
            attempt to guess the format by looking at fileName's suffix.</para>
            <para>The quality factor must be in the range 0 to 100 or -1. Specify 0
            to obtain small compressed files, 100 for large uncompressed files, and -1
            (the default) to use the default settings.</para>
            <para>Returns true if the image was successfully saved; otherwise
            returns false.</para>
            <para>See also Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Save(QtCore.QIODevice,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function writes a QImage to the given device.</para>
            <para>This can, for example, be used to save an image directly into a
            QByteArray:</para>
            <para>        QImage image;</para>
            <para>        QByteArray ba;</para>
            <para>        QBuffer buffer(&amp;ba);</para>
            <para>        buffer.open(QIODevice::WriteOnly);</para>
            <para>        image.save(&amp;buffer, &quot;PNG&quot;); // writes image
            into ba in PNG format</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.Text(System.String)">
            <summary>
            <para>Returns the image text associated with the given key. If the
            specified key is an empty string, the whole image text is returned, with
            each key-text pair separated by a newline.</para>
            <para>See also setText() and textKeys().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.SetText(System.String,System.String)">
            <summary>
            <para>Sets the image text to the given text and associate it with the
            given key.</para>
            <para>If you just want to store a single text block (i.e., a
            &quot;comment&quot; or just a description), you can either pass an empty
            key, or use a generic key like &quot;Description&quot;.</para>
            <para>The image text is embedded into the image data when you call
            save() or QImageWriter::write().</para>
            <para>Not all image formats support embedded text. You can find out if
            a specific image or format supports embedding text by using
            QImageWriter::supportsOption(). We give an example:</para>
            <para>    QImageWriter writer;</para>
            <para>    writer.setFormat(&quot;png&quot;);</para>
            <para>    if
            (writer.supportsOption(QImageIOHandler::Description))</para>
            <para>        qDebug() &lt;&lt; &quot;Png supports embedded
            text&quot;;</para>
            <para>You can use QImageWriter::supportedImageFormats() to find out
            which image formats are available to you.</para>
            <para>See also text() and textKeys().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.TrueMatrix(QtGui.QMatrix,System.Int32,System.Int32)">
            <summary>
            <para>Returns the actual matrix used for transforming an image with the
            given width, height and matrix.</para>
            <para>When transforming an image using the transformed() function, the
            transformation matrix is internally adjusted to compensate for unwanted
            translation, i.e. transformed() returns the smallest image containing all
            transformed points of the original image. This function returns the
            modified matrix, which maps points correctly from the original image into
            the new image.</para>
            <para>See also transformed() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.TrueMatrix(QtGui.QTransform,System.Int32,System.Int32)">
            <summary>
            <para>Returns the actual matrix used for transforming an image with the
            given width, height and matrix.</para>
            <para>When transforming an image using the transformed() function, the
            transformation matrix is internally adjusted to compensate for unwanted
            translation, i.e. transformed() returns the smallest image containing all
            transformed points of the original image. This function returns the
            modified matrix, which maps points correctly from the original image into
            the new image.</para>
            <para>Unlike the other overload, this function creates transformation
            matrices that can be used to perform perspective transformations on
            images.</para>
            <para>See also transformed() and Image Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.FromData(System.Byte*,System.Int32,System.String)">
            <summary>
            <para>Constructs a QImage from the first size bytes of the given binary
            data. The loader attempts to read the image using the specified format. If
            format is not specified (which is the default), the loader probes the file
            for a header to guess the file format. binary data. The loader attempts to
            read the image, either using the optional image format specified or by
            determining the image format from the data.</para>
            <para>If format is not specified (which is the default), the loader
            probes the file for a header to determine the file format. If format is
            specified, it must be one of the values returned by
            QImageReader::supportedImageFormats().</para>
            <para>If the loading of the image fails, the image returned will be a
            null image.</para>
            <para>See also load(), save(), and Reading and Writing Image
            Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.FromData(QtCore.QByteArray,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads an image from the given QByteArray data.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ToPixelFormat(QtGui.QImage.Format)">
            <summary>
            <para>Converts format into a QPixelFormat</para>
            </summary>
        </member>
        <member name="M:QtGui.QImage.ToImageFormat(QtGui.QPixelFormat)">
            <summary>
            <para>Converts format into a QImage::Format</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.ColorCount">
            <summary>
            <para>Returns the size of the color table for the image.</para>
            <para>Notice that colorCount() returns 0 for 32-bpp images because
            these images do not use color tables, but instead encode pixel values as
            ARGB quadruplets.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setColorCount() and Image Information.</para>
            <para></para>
            <para>Resizes the color table to contain colorCount entries.</para>
            <para>If the color table is expanded, all the extra colors will be set
            to transparent (i.e qRgba(0, 0, 0, 0)).</para>
            <para>When the image is used, the color table must be large enough to
            have entries for all the pixel/index values present in the image, otherwise
            the results are undefined.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also colorCount(), colorTable(), setColor(), and Image
            Transformations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for the image. This is the ratio
            between device pixels and device independent pixels.</para>
            <para>Use this function when calculating layout geometry based on the
            image size: QSize layoutSize = image.size() /
            image.devicePixelRatio()</para>
            <para>The default value is 1.0.</para>
            <para>See also setDevicePixelRatio() and QImageReader.</para>
            <para></para>
            <para>Sets the device pixel ratio for the image. This is the ratio
            between image pixels and device-independent pixels.</para>
            <para>The default scaleFactor is 1.0. Setting it to something else has
            two effects:</para>
            <para>QPainters that are opened on the image will be scaled. For
            example, painting on a 200x200 image if with a ratio of 2.0 will result in
            effective (device-independent) painting bounds of 100x100.</para>
            <para>Code paths in Qt that calculate layout geometry based on the
            image size will take the ratio into account: QSize layoutSize =
            image.size() / image.devicePixelRatio() The net effect of this is that the
            image is displayed as high-DPI image rather than a large image (see Drawing
            High Resolution Versions of Pixmaps and Images).</para>
            <para>See also devicePixelRatio().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.AlphaChannel">
            <summary>
            <para>Returns the alpha channel of the image as a new grayscale QImage
            in which each pixel's red, green, and blue values are given the alpha value
            of the original image. The color depth of the returned image is
            8-bit.</para>
            <para>You can see an example of use of this function in QPixmap's
            alphaChannel(), which works in the same way as this function on
            QPixmaps.</para>
            <para>Most usecases for this function can be replaced with QPainter and
            using composition modes.</para>
            <para>Note this returns a color-indexed image if you want the alpha
            channel in the alpha8 format instead use convertToFormat(Format_Alpha8) on
            the source image.</para>
            <para>Warning: This is an expensive function.</para>
            <para>See also setAlphaChannel(), hasAlphaChannel(), convertToFormat(),
            Pixmap, and Image Transformations.</para>
            <para></para>
            <para>Sets the alpha channel of this image to the given
            alphaChannel.</para>
            <para>If alphaChannel is an 8 bit grayscale image, the intensity values
            are written into this buffer directly. Otherwise, alphaChannel is converted
            to 32 bit and the intensity of the RGB pixel values is used.</para>
            <para>Note that the image will be converted to the
            Format_ARGB32_Premultiplied format if the function succeeds.</para>
            <para>Use one of the composition modes in QPainter::CompositionMode
            instead.</para>
            <para>Warning: This function is expensive.</para>
            <para>See also alphaChannel(), Image Transformations, and Image
            Formats.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.DotsPerMeterX">
            <summary>
            <para>Returns the number of pixels that fit horizontally in a physical
            meter. Together with dotsPerMeterY(), this number defines the intended
            scale and aspect ratio of the image.</para>
            <para>See also setDotsPerMeterX() and Image Information.</para>
            <para></para>
            <para>Sets the number of pixels that fit horizontally in a physical
            meter, to x.</para>
            <para>Together with dotsPerMeterY(), this number defines the intended
            scale and aspect ratio of the image, and determines the scale at which
            QPainter will draw graphics on the image. It does not change the scale or
            aspect ratio of the image when it is rendered on other paint
            devices.</para>
            <para>See also dotsPerMeterX() and Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.DotsPerMeterY">
            <summary>
            <para>Returns the number of pixels that fit vertically in a physical
            meter. Together with dotsPerMeterX(), this number defines the intended
            scale and aspect ratio of the image.</para>
            <para>See also setDotsPerMeterY() and Image Information.</para>
            <para></para>
            <para>Sets the number of pixels that fit vertically in a physical
            meter, to y.</para>
            <para>Together with dotsPerMeterX(), this number defines the intended
            scale and aspect ratio of the image, and determines the scale at which
            QPainter will draw graphics on the image. It does not change the scale or
            aspect ratio of the image when it is rendered on other paint
            devices.</para>
            <para>See also dotsPerMeterY() and Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Offset">
            <summary>
            <para>Returns the number of pixels by which the image is intended to be
            offset by when positioning relative to other images.</para>
            <para>See also setOffset() and Image Information.</para>
            <para></para>
            <para>Sets the number of pixels by which the image is intended to be
            offset by when positioning relative to other images, to offset.</para>
            <para>See also offset() and Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.IsNull">
            <summary>
            <para>Returns true if it is a null image, otherwise returns
            false.</para>
            <para>A null image has all parameters set to zero and no allocated
            data.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.format">
            <summary>
            <para>Returns the format of the image.</para>
            <para>See also Image Formats.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Width">
            <summary>
            <para>Returns the width of the image.</para>
            <para>See also Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Height">
            <summary>
            <para>Returns the height of the image.</para>
            <para>See also Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Size">
            <summary>
            <para>Returns the size of the image, i.e. its width() and
            height().</para>
            <para>See also Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Rect">
            <summary>
            <para>Returns the enclosing rectangle (0, 0, width(), height()) of the
            image.</para>
            <para>See also Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Depth">
            <summary>
            <para>Returns the depth of the image.</para>
            <para>The image depth is the number of bits used to store a single
            pixel, also called bits per pixel (bpp).</para>
            <para>The supported depths are 1, 8, 16, 24 and 32.</para>
            <para>See also bitPlaneCount(), convertToFormat(), Image Formats, and
            Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.BitPlaneCount">
            <summary>
            <para>Returns the number of bit planes in the image.</para>
            <para>The number of bit planes is the number of bits of color and
            transparency information for each pixel. This is different from (i.e.
            smaller than) the depth when the image format contains unused bits.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also depth(), format(), and Image Formats.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.AllGray">
            <summary>
            <para>Returns true if all the colors in the image are shades of gray
            (i.e. their red, green and blue components are equal); otherwise
            false.</para>
            <para>Note that this function is slow for images without color
            table.</para>
            <para>See also isGrayscale().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.IsGrayscale">
            <summary>
            <para>For 32-bit images, this function is equivalent to
            allGray().</para>
            <para>For color indexed images, this function returns true if color(i)
            is QRgb(i, i, i) for all indexes of the color table; otherwise returns
            false.</para>
            <para>See also allGray() and Image Formats.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.Bits">
            <summary>
            <para>Returns a pointer to the first pixel data. This is equivalent to
            scanLine(0).</para>
            <para>Note that QImage uses implicit data sharing. This function
            performs a deep copy of the shared pixel data, thus ensuring that this
            QImage is the only one using the current return value.</para>
            <para>See also scanLine(), byteCount(), and constBits().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.ConstBits">
            <summary>
            <para>Returns a pointer to the first pixel data.</para>
            <para>Note that QImage uses implicit data sharing, but this function
            does not perform a deep copy of the shared pixel data, because the returned
            data is const.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also bits() and constScanLine().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.ByteCount">
            <summary>
            <para>Returns the number of bytes occupied by the image data.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also bytesPerLine(), bits(), and Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.BytesPerLine">
            <summary>
            <para>Returns the number of bytes per image scanline.</para>
            <para>This is equivalent to byteCount() / height().</para>
            <para>See also scanLine().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.HasAlphaChannel">
            <summary>
            <para>Returns true if the image has a format that respects the alpha
            channel, otherwise returns false.</para>
            <para>See also Image Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.RgbSwapped">
            <summary>
            <para>Returns a QImage in which the values of the red and blue
            components of all pixels have been swapped, effectively converting an RGB
            image to an BGR image.</para>
            <para>The original QImage is not changed.</para>
            <para>See also Image Transformations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.CacheKey">
            <summary>
            <para>Returns a number that identifies the contents of this QImage
            object. Distinct QImage objects can only have the same key if they refer to
            the same contents.</para>
            <para>The key will change when the image is altered.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.TextKeys">
            <summary>
            <para>Returns the text keys for this image.</para>
            <para>You can use these keys with text() to list the image text for a
            certain key.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImage.PixelFormat">
            <summary>
            <para>Returns the QImage::Format as a QPixelFormat</para>
            </summary>
        </member>
        <member name="T:QtGui.QImage.InvertMode">
            <summary>
            <para>This enum type is used to describe how pixel values should be
            inverted in the invertPixels() function.</para>
            <para>See also invertPixels().</para>
            </summary>
        </member>
        <member name="F:QtGui.QImage.InvertMode.InvertRgb">
            <summary>Invert only the RGB values and leave the alpha channel unchanged.</summary>
        </member>
        <member name="F:QtGui.QImage.InvertMode.InvertRgba">
            <summary>Invert all channels, including the alpha channel.</summary>
        </member>
        <member name="T:QtGui.QImage.Format">
            <summary>
            <para>The following image formats are available in Qt. Values from
            Format_ARGB8565_Premultiplied to Format_ARGB4444_Premultiplied were added
            in Qt 4.4. Values Format_RGBX8888, Format_RGBA8888 and
            Format_RGBA8888_Premultiplied were added in Qt 5.2. Values Format_BGR30,
            Format_A2BGR30_Premultiplied, Format_RGB30, Format_A2RGB30_Premultiplied
            were added in Qt 5.4. Format_Alpha8 and Format_Grayscale8 were added in Qt
            5.5. See the notes after the table.</para>
            <para>Note: Drawing into a QImage with QImage::Format_Indexed8 is not
            supported.</para>
            <para>Note: Do not render into ARGB32 images using QPainter. Using
            QImage::Format_ARGB32_Premultiplied is significantly faster.</para>
            <para>Note: Formats with more than 8 bit per color channel will only be
            processed by the raster engine using 8 bit per color.</para>
            <para>See also format() and convertToFormat().</para>
            </summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_Invalid">
            <summary>The image is invalid.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_Mono">
            <summary>The image is stored using 1-bit per pixel. Bytes are packed with the most significant bit (MSB) first.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_MonoLSB">
            <summary>The image is stored using 1-bit per pixel. Bytes are packed with the less significant bit (LSB) first.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_Indexed8">
            <summary>The image is stored using 8-bit indexes into a colormap.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB32">
            <summary>The image is stored using a 32-bit RGB format (0xffRRGGBB).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB32">
            <summary>The image is stored using a 32-bit ARGB format (0xAARRGGBB).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB32_Premultiplied">
            <summary>The image is stored using a premultiplied 32-bit ARGB format (0xAARRGGBB), i.e. the red, green, and blue channels are multiplied by the alpha component divided by 255. (If RR, GG, or BB has a higher value than the alpha channel, the results are undefined.) Certain operations (such as image composition using alpha blending) are faster using premultiplied ARGB32 than with plain ARGB32.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB16">
            <summary>The image is stored using a 16-bit RGB format (5-6-5).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB8565_Premultiplied">
            <summary>The image is stored using a premultiplied 24-bit ARGB format (8-5-6-5).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB666">
            <summary>The image is stored using a 24-bit RGB format (6-6-6). The unused most significant bits is always zero.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB6666_Premultiplied">
            <summary>The image is stored using a premultiplied 24-bit ARGB format (6-6-6-6).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB555">
            <summary>The image is stored using a 16-bit RGB format (5-5-5). The unused most significant bit is always zero.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB8555_Premultiplied">
            <summary>The image is stored using a premultiplied 24-bit ARGB format (8-5-5-5).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB888">
            <summary>The image is stored using a 24-bit RGB format (8-8-8).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB444">
            <summary>The image is stored using a 16-bit RGB format (4-4-4). The unused bits are always zero.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_ARGB4444_Premultiplied">
            <summary>The image is stored using a premultiplied 16-bit ARGB format (4-4-4-4).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGBX8888">
            <summary>The image is stored using a 32-bit byte-ordered RGB(x) format (8-8-8-8). This is the same as the Format_RGBA8888 except alpha must always be 255.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGBA8888">
            <summary>The image is stored using a 32-bit byte-ordered RGBA format (8-8-8-8). Unlike ARGB32 this is a byte-ordered format, which means the 32bit encoding differs between big endian and little endian architectures, being respectively (0xRRGGBBAA) and (0xAABBGGRR). The order of the colors is the same on any architecture if read as bytes 0xRR,0xGG,0xBB,0xAA.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGBA8888_Premultiplied">
            <summary>The image is stored using a premultiplied 32-bit byte-ordered RGBA format (8-8-8-8).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_BGR30">
            <summary>The image is stored using a 32-bit BGR format (x-10-10-10).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_A2BGR30_Premultiplied">
            <summary>The image is stored using a 32-bit premultiplied ABGR format (2-10-10-10).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_RGB30">
            <summary>The image is stored using a 32-bit RGB format (x-10-10-10).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_A2RGB30_Premultiplied">
            <summary>The image is stored using a 32-bit premultiplied ARGB format (2-10-10-10).</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_Alpha8">
            <summary>The image is stored using an 8-bit alpha only format.</summary>
        </member>
        <member name="F:QtGui.QImage.Format.Format_Grayscale8">
            <summary>The image is stored using an 8-bit grayscale format.</summary>
        </member>
        <member name="T:QtGui.QPixmap">
            <summary>
            <para>The QPixmap class is an off-screen image representation that can
            be used as a paint device.</para>
            </summary>
            <remarks>
            <para>Qt provides four classes for handling image data: QImage,
            QPixmap, QBitmap and QPicture. QImage is designed and optimized for I/O,
            and for direct pixel access and manipulation, while QPixmap is designed and
            optimized for showing images on screen. QBitmap is only a convenience class
            that inherits QPixmap, ensuring a depth of 1. The isQBitmap() function
            returns true if a QPixmap object is really a bitmap, otherwise returns
            false. Finally, the QPicture class is a paint device that records and
            replays QPainter commands.</para>
            <para>A QPixmap can easily be displayed on the screen using QLabel or
            one of QAbstractButton's subclasses (such as QPushButton and QToolButton).
            QLabel has a pixmap property, whereas QAbstractButton has an icon
            property.</para>
            <para>QPixmap objects can be passed around by value since the QPixmap
            class uses implicit data sharing. For more information, see the Implicit
            Data Sharing documentation. QPixmap objects can also be streamed.</para>
            <para>Note that the pixel data in a pixmap is internal and is managed
            by the underlying window system. Because QPixmap is a QPaintDevice
            subclass, QPainter can be used to draw directly onto pixmaps. Pixels can
            only be accessed through QPainter functions or by converting the QPixmap to
            a QImage. However, the fill() function is available for initializing the
            entire pixmap with a given color.</para>
            <para>There are functions to convert between QImage and QPixmap.
            Typically, the QImage class is used to load an image file, optionally
            manipulating the image data, before the QImage object is converted into a
            QPixmap to be shown on screen. Alternatively, if no manipulation is
            desired, the image file can be loaded directly into a QPixmap.</para>
            <para>QPixmap provides a collection of functions that can be used to
            obtain a variety of information about the pixmap. In addition, there are
            several functions that enables transformation of the pixmap.</para>
            <para></para>
            <para>Reading and Writing Image Files</para>
            <para>QPixmap provides several ways of reading an image file: The file
            can be loaded when constructing the QPixmap object, or by using the load()
            or loadFromData() functions later on. When loading an image, the file name
            can either refer to an actual file on disk or to one of the application's
            embedded resources. See The Qt Resource System overview for details on how
            to embed images and other resource files in the application's
            executable.</para>
            <para>Simply call the save() function to save a QPixmap object.</para>
            <para>The complete list of supported file formats are available through
            the QImageReader::supportedImageFormats() and
            QImageWriter::supportedImageFormats() functions. New file formats can be
            added as plugins. By default, Qt supports the following formats:</para>
            <para></para>
            <para> FormatDescriptionQt's support</para>
            <para>BMP	Windows Bitmap	Read/write</para>
            <para>GIF	Graphic Interchange Format (optional)	Read</para>
            <para>JPG	Joint Photographic Experts Group	Read/write</para>
            <para>JPEG	Joint Photographic Experts Group	Read/write</para>
            <para>PNG	Portable Network Graphics	Read/write</para>
            <para>PBM	Portable Bitmap	Read</para>
            <para>PGM	Portable Graymap	Read</para>
            <para>PPM	Portable Pixmap	Read/write</para>
            <para>XBM	X11 Bitmap	Read/write</para>
            <para>XPM	X11 Pixmap	Read/write</para>
            <para></para>
            <para></para>
            <para>Pixmap Information</para>
            <para>QPixmap provides a collection of functions that can be used to
            obtain a variety of information about the pixmap:</para>
            <para></para>
            <para> Available Functions</para>
            <para>Geometry	The size(), width() and height() functions provide
            information about the pixmap's size. The rect() function returns the
            image's enclosing rectangle.</para>
            <para>Alpha component	The hasAlphaChannel() returns true if the pixmap
            has a format that respects the alpha channel, otherwise returns false. The
            hasAlpha(), setMask() and mask() functions are legacy and should not be
            used. They are potentially very slow.The createHeuristicMask() function
            creates and returns a 1-bpp heuristic mask (i.e. a QBitmap) for this
            pixmap. It works by selecting a color from one of the corners and then
            chipping away pixels of that color, starting at all the edges. The
            createMaskFromColor() function creates and returns a mask (i.e. a QBitmap)
            for the pixmap based on a given color.</para>
            <para></para>
            <para>Low-level information	The depth() function returns the depth of
            the pixmap. The defaultDepth() function returns the default depth, i.e. the
            depth used by the application on the given screen.The cacheKey() function
            returns a number that uniquely identifies the contents of the QPixmap
            object.</para>
            <para>The x11Info() function returns information about the
            configuration of the X display used by the screen to which the pixmap
            currently belongs. The x11PictureHandle() function returns the X11 Picture
            handle of the pixmap for XRender support. Note that the two latter
            functions are only available on x11.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Pixmap Conversion</para>
            <para>A QPixmap object can be converted into a QImage using the
            toImage() function. Likewise, a QImage can be converted into a QPixmap
            using the fromImage(). If this is too expensive an operation, you can use
            QBitmap::fromImage() instead.</para>
            <para>The QPixmap class also supports conversion to and from HICON: the
            toWinHICON() function creates a HICON equivalent to the QPixmap, and
            returns the HICON handle. The fromWinHICON() function returns a QPixmap
            that is equivalent to the given icon.</para>
            <para></para>
            <para>Pixmap Transformations</para>
            <para>QPixmap supports a number of functions for creating a new pixmap
            that is a transformed version of the original:</para>
            <para>The scaled(), scaledToWidth() and scaledToHeight() functions
            return scaled copies of the pixmap, while the copy() function creates a
            QPixmap that is a plain copy of the original one.</para>
            <para>The transformed() function returns a copy of the pixmap that is
            transformed with the given transformation matrix and transformation mode:
            Internally, the transformation matrix is adjusted to compensate for
            unwanted translation, i.e. transformed() returns the smallest pixmap
            containing all transformed points of the original pixmap. The static
            trueMatrix() function returns the actual matrix used for transforming the
            pixmap.</para>
            <para>Note: When using the native X11 graphics system, the pixmap
            becomes invalid when the QApplication instance is destroyed.</para>
            <para></para>
            <para>See also QBitmap, QImage, QImageReader, and QImageWriter.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPixmap.#ctor">
            <summary>
            <para>Constructs a null pixmap.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a pixmap with the given width and height. If either
            width or height is zero, a null pixmap is constructed.</para>
            <para>Warning: This will create a QPixmap with uninitialized data. Call
            fill() to fill the pixmap with an appropriate color before drawing onto it
            with QPainter.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.#ctor(QtCore.QSize)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs a pixmap of the given size.</para>
            <para>Warning: This will create a QPixmap with uninitialized data. Call
            fill() to fill the pixmap with an appropriate color before drawing onto it
            with QPainter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.#ctor(System.String,System.String,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Constructs a pixmap from the file with the given fileName. If the
            file does not exist or is of an unknown format, the pixmap becomes a null
            pixmap.</para>
            <para>The loader attempts to read the pixmap using the specified
            format. If the format is not specified (which is the default), the loader
            probes the file for a header to guess the file format.</para>
            <para>The file name can either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed images and other resource files in the
            application's executable.</para>
            <para>If the image needs to be modified to fit in a lower-resolution
            result (e.g. converting from 32-bit to 8-bit), use the flags to control the
            conversion.</para>
            <para>The fileName, format and flags parameters are passed on to
            load(). This means that the data in fileName is not compiled into the
            binary. If fileName contains a relative path (e.g. the filename only) the
            relevant file must be found relative to the runtime working
            directory.</para>
            <para>See also Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Swap(QtGui.QPixmap)">
            <summary>
            <para>Swaps pixmap other with this pixmap. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.op_Implicit(QtGui.QPixmap)~QtCore.QVariant">
            <summary>
            <para>Returns the pixmap as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Fill(QtGui.QColor)">
            <summary>
            <para>Fills the pixmap with the given color.</para>
            <para>The effect of this function is undefined when the pixmap is being
            painted on.</para>
            <para>See also Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Fill(QtGui.IQPaintDevice,QtCore.QPoint)">
            <summary>
            <para>Use QPainter or the fill(QColor) overload instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Fill(QtGui.IQPaintDevice,System.Int32,System.Int32)">
            <summary>
            <para>Use QPainter or the fill(QColor) overload instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.CreateHeuristicMask(System.Boolean)">
            <summary>
            <para>Creates and returns a heuristic mask for this pixmap.</para>
            <para>The function works by selecting a color from one of the corners
            and then chipping away pixels of that color, starting at all the edges. If
            clipTight is true (the default) the mask is just large enough to cover the
            pixels; otherwise, the mask is larger than the data pixels.</para>
            <para>The mask may not be perfect but it should be reasonable, so you
            can do things such as the following:</para>
            <para>QPixmap myPixmap;</para>
            <para>myPixmap.setMask(myPixmap.createHeuristicMask());</para>
            <para>This function is slow because it involves converting to/from a
            QImage, and non-trivial computations.</para>
            <para>See also QImage::createHeuristicMask() and
            createMaskFromColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.CreateMaskFromColor(QtGui.QColor,QtCore.Qt.MaskMode)">
            <summary>
            <para>Creates and returns a mask for this pixmap based on the given
            maskColor. If the mode is Qt::MaskInColor, all pixels matching the
            maskColor will be transparent. If mode is Qt::MaskOutColor, all pixels
            matching the maskColor will be opaque.</para>
            <para>This function is slow because it involves converting to/from a
            QImage.</para>
            <para>See also createHeuristicMask() and
            QImage::createMaskFromColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Scaled(System.Int32,System.Int32,QtCore.Qt.AspectRatioMode,QtCore.Qt.TransformationMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a copy of the pixmap scaled to a rectangle with the given
            width and height according to the given aspectRatioMode and
            transformMode.</para>
            <para>If either the width or the height is zero or negative, this
            function returns a null pixmap.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Scaled(QtCore.QSize,QtCore.Qt.AspectRatioMode,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Scales the pixmap to the given size, using the aspect ratio and
            transformation modes specified by aspectRatioMode and transformMode.</para>
            <para></para>
            <para></para>
            <para>If aspectRatioMode is Qt::IgnoreAspectRatio, the pixmap is scaled
            to size.</para>
            <para>If aspectRatioMode is Qt::KeepAspectRatio, the pixmap is scaled
            to a rectangle as large as possible inside size, preserving the aspect
            ratio.</para>
            <para>If aspectRatioMode is Qt::KeepAspectRatioByExpanding, the pixmap
            is scaled to a rectangle as small as possible outside size, preserving the
            aspect ratio.</para>
            <para></para>
            <para>If the given size is empty, this function returns a null
            pixmap.</para>
            <para>In some cases it can be more beneficial to draw the pixmap to a
            painter with a scale set rather than scaling the pixmap. This is the case
            when the painter is for instance based on OpenGL or when the scale factor
            changes rapidly.</para>
            <para>See also isNull() and Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.ScaledToWidth(System.Int32,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a scaled copy of the image. The returned image is scaled
            to the given width using the specified transformation mode. The height of
            the pixmap is automatically calculated so that the aspect ratio of the
            pixmap is preserved.</para>
            <para>If width is 0 or negative, a null pixmap is returned.</para>
            <para>See also isNull() and Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.ScaledToHeight(System.Int32,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a scaled copy of the image. The returned image is scaled
            to the given height using the specified transformation mode. The width of
            the pixmap is automatically calculated so that the aspect ratio of the
            pixmap is preserved.</para>
            <para>If height is 0 or negative, a null pixmap is returned.</para>
            <para>See also isNull() and Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Transformed(QtGui.QMatrix,QtCore.Qt.TransformationMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function loads the matrix into a QTransform and
            calls the overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Transformed(QtGui.QTransform,QtCore.Qt.TransformationMode)">
            <summary>
            <para>Returns a copy of the pixmap that is transformed using the given
            transformation transform and transformation mode. The original pixmap is
            not changed.</para>
            <para>The transformation transform is internally adjusted to compensate
            for unwanted translation; i.e. the pixmap produced is the smallest pixmap
            that contains all the transformed points of the original pixmap. Use the
            trueMatrix() function to retrieve the actual matrix used for transforming
            the pixmap.</para>
            <para>This function is slow because it involves transformation to a
            QImage, non-trivial computations and a transformation back to a
            QPixmap.</para>
            <para>See also trueMatrix() and Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.ToImage">
            <summary>
            <para>Converts the pixmap to a QImage. Returns a null image if the
            conversion fails.</para>
            <para>If the pixmap has 1-bit depth, the returned image will also be 1
            bit deep. Images with more bits will be returned in a format closely
            represents the underlying system. Usually this will be
            QImage::Format_ARGB32_Premultiplied for pixmaps with an alpha and
            QImage::Format_RGB32 or QImage::Format_RGB16 for pixmaps without
            alpha.</para>
            <para>Note that for the moment, alpha masks on monochrome images are
            ignored.</para>
            <para>See also fromImage() and Image Formats.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Load(System.String,System.String,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Loads a pixmap from the file with the given fileName. Returns
            true if the pixmap was successfully loaded; otherwise invalidates the
            pixmap and returns false.</para>
            <para>The loader attempts to read the pixmap using the specified
            format. If the format is not specified (which is the default), the loader
            probes the file for a header to guess the file format.</para>
            <para>The file name can either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed pixmaps and other resource files in
            the application's executable.</para>
            <para>If the data needs to be modified to fit in a lower-resolution
            result (e.g. converting from 32-bit to 8-bit), use the flags to control the
            conversion.</para>
            <para>Note that QPixmaps are automatically added to the QPixmapCache
            when loaded from a file; the key used is internal and can not be
            acquired.</para>
            <para>See also loadFromData() and Reading and Writing Image
            Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.LoadFromData(System.Byte*,System.UInt32,System.String,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Loads a pixmap from the len first bytes of the given binary data.
            Returns true if the pixmap was loaded successfully; otherwise invalidates
            the pixmap and returns false.</para>
            <para>The loader attempts to read the pixmap using the specified
            format. If the format is not specified (which is the default), the loader
            probes the file for a header to guess the file format.</para>
            <para>If the data needs to be modified to fit in a lower-resolution
            result (e.g. converting from 32-bit to 8-bit), use the flags to control the
            conversion.</para>
            <para>See also load() and Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.LoadFromData(QtCore.QByteArray,System.String,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Loads a pixmap from the binary data using the specified format
            and conversion flags.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Save(System.String,System.String,System.Int32)">
            <summary>
            <para>Saves the pixmap to the file with the given fileName using the
            specified image file format and quality factor. Returns true if successful;
            otherwise returns false.</para>
            <para>The quality factor must be in the range [0,100] or -1. Specify 0
            to obtain small compressed files, 100 for large uncompressed files, and -1
            to use the default settings.</para>
            <para>If format is 0, an image format will be chosen from fileName's
            suffix.</para>
            <para>See also Reading and Writing Image Files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Save(QtCore.QIODevice,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function writes a QPixmap to the given device using the
            specified image file format and quality factor. This can be used, for
            example, to save a pixmap directly into a QByteArray:</para>
            <para>        QPixmap pixmap;</para>
            <para>        QByteArray bytes;</para>
            <para>        QBuffer buffer(&amp;bytes);</para>
            <para>        buffer.open(QIODevice::WriteOnly);</para>
            <para>        pixmap.save(&amp;buffer, &quot;PNG&quot;); // writes
            pixmap into bytes in PNG format</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.ConvertFromImage(QtGui.QImage,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Replaces this pixmap's data with the given image using the
            specified flags to control the conversion. The flags argument is a
            bitwise-OR of the Qt::ImageConversionFlags. Passing 0 for flags sets all
            the default options. Returns true if the result is that this pixmap is not
            null.</para>
            <para>Note: this function was part of Qt 3 support in Qt 4.6 and
            earlier. It has been promoted to official API status in 4.7 to support
            updating the pixmap's image without creating a new QPixmap as fromImage()
            would.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also fromImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Copy(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a deep copy of the subset of the pixmap that is specified
            by the rectangle QRect( x, y, width, height).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Copy(QtCore.QRect)">
            <summary>
            <para>Returns a deep copy of the subset of the pixmap that is specified
            by the given rectangle. For more information on deep copies, see the
            Implicit Data Sharing documentation.</para>
            <para>If the given rectangle is empty, the whole image is
            copied.</para>
            <para>See also operator=(), QPixmap(), and Pixmap
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Scroll(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QRegion)">
            <summary>
            <para>This convenience function is equivalent to calling
            QPixmap::scroll(dx, dy, QRect(x, y, width, height), exposed).</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QWidget::scroll() and QGraphicsItem::scroll().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Scroll(System.Int32,System.Int32,QtCore.QRect,QtGui.QRegion)">
            <summary>
            <para>Scrolls the area rect of this pixmap by (dx, dy). The exposed
            region is left unchanged. You can optionally pass a pointer to an empty
            QRegion to get the region that is exposed by the scroll operation.</para>
            <para>QPixmap pixmap(&quot;background.png&quot;);</para>
            <para>QRegion exposed;</para>
            <para>pixmap.scroll(10, 10, pixmap.rect(), &amp;exposed);</para>
            <para>You cannot scroll while there is an active painter on the
            pixmap.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also QWidget::scroll() and QGraphicsItem::scroll().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Detach">
            <summary>
            <para>Detaches the pixmap from shared pixmap data.</para>
            <para>A pixmap is automatically detached by Qt whenever its contents
            are about to change. This is done in almost all QPixmap member functions
            that modify the pixmap (fill(), fromImage(), load(), etc.), and in
            QPainter::begin() on a pixmap.</para>
            <para>There are two exceptions in which detach() must be called
            explicitly, that is when calling the handle() or the x11PictureHandle()
            function (only available on X11). Otherwise, any modifications done using
            system calls, will be performed on the shared data.</para>
            <para>The detach() function returns immediately if there is just a
            single reference or if the pixmap has not been initialized yet.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.op_LogicalNot(QtGui.QPixmap)">
            <summary>
            <para>Returns true if this is a null pixmap; otherwise returns
            false.</para>
            <para>See also isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.Fill">
            <summary>
            <para>Fills the pixmap with the given color.</para>
            <para>The effect of this function is undefined when the pixmap is being
            painted on.</para>
            <para>See also Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.GrabWindow(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Creates and returns a pixmap constructed by grabbing the contents
            of the given window restricted by QRect(x, y, width, height).</para>
            <para>The arguments (x, y) specify the offset in the window, whereas
            (width, height) specify the area to be copied. If width is negative, the
            function copies everything to the right border of the window. If height is
            negative, the function copies everything to the bottom of the
            window.</para>
            <para>The window system identifier (WId) can be retrieved using the
            QWidget::winId() function. The rationale for using a window identifier and
            not a QWidget, is to enable grabbing of windows that are not part of the
            application, window system frames, and so on.</para>
            <para>The grabWindow() function grabs pixels from the screen, not from
            the window, i.e. if there is another window partially or entirely over the
            one you grab, you get pixels from the overlying window, too. The mouse
            cursor is generally not grabbed.</para>
            <para>Note on X11 that if the given window doesn't have the same depth
            as the root window, and another window partially or entirely obscures the
            one you grab, you will not get pixels from the overlying window. The
            contents of the obscured areas in the pixmap will be undefined and
            uninitialized.</para>
            <para>On Windows Vista and above grabbing a layered window, which is
            created by setting the Qt::WA_TranslucentBackground attribute, will not
            work. Instead grabbing the desktop widget should work.</para>
            <para>Warning: In general, grabbing an area outside the screen is not
            safe. This depends on the underlying window system.</para>
            <para>Warning: The function is deprecated in Qt 5.0 since there might
            be platform plugins in which window system identifiers (WId) are local to a
            screen. Use QScreen::grabWindow() instead.</para>
            <para>See also grabWidget(), Screenshot Example, and QScreen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.GrabWidget(QtCore.QObject,QtCore.QRect)">
            <summary>
            <para>Use QWidget::grab() instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.GrabWidget(QtCore.QObject,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Use QWidget::grab() instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.TrueMatrix(QtGui.QMatrix,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function loads the matrix m into a QTransform
            and calls the overloaded function with the QTransform and the width w and
            the height h.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.TrueMatrix(QtGui.QTransform,System.Int32,System.Int32)">
            <summary>
            <para>Returns the actual matrix used for transforming a pixmap with the
            given width, height and matrix.</para>
            <para>When transforming a pixmap using the transformed() function, the
            transformation matrix is internally adjusted to compensate for unwanted
            translation, i.e. transformed() returns the smallest pixmap containing all
            transformed points of the original pixmap. This function returns the
            modified matrix, which maps points correctly from the original pixmap into
            the new pixmap.</para>
            <para>See also transformed() and Pixmap Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.FromImage(QtGui.QImage,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Converts the given image to a pixmap using the specified flags to
            control the conversion. The flags argument is a bitwise-OR of the
            Qt::ImageConversionFlags. Passing 0 for flags sets all the default
            options.</para>
            <para>In case of monochrome and 8-bit images, the image is first
            converted to a 32-bit pixmap and then filled with the colors in the color
            table. If this is too expensive an operation, you can use
            QBitmap::fromImage() instead.</para>
            <para>See also fromImageReader(), toImage(), and Pixmap
            Conversion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.FromImageReader(QtGui.QImageReader,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Create a QPixmap from an image read directly from an imageReader.
            The flags argument is a bitwise-OR of the Qt::ImageConversionFlags. Passing
            0 for flags sets all the default options.</para>
            <para>On some systems, reading an image directly to QPixmap can use
            less memory than reading a QImage to convert it to QPixmap.</para>
            <para>See also fromImage(), toImage(), and Pixmap Conversion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmap.FromImage1(QtGui.QImage,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Converts the given image to a pixmap without copying if
            possible.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Mask">
            <summary>
            <para>Extracts a bitmap mask from the pixmap's alpha channel.</para>
            <para>Warning: This is potentially an expensive operation. The mask of
            the pixmap is extracted dynamically from the pixeldata.</para>
            <para>See also setMask() and Pixmap Information.</para>
            <para></para>
            <para>Sets a mask bitmap.</para>
            <para>This function merges the mask with the pixmap's alpha channel. A
            pixel value of 1 on the mask means the pixmap's pixel is unchanged; a value
            of 0 means the pixel is transparent. The mask must have the same size as
            this pixmap.</para>
            <para>Setting a null mask resets the mask, leaving the previously
            transparent pixels black. The effect of this function is undefined when the
            pixmap is being painted on.</para>
            <para>Warning: This is potentially an expensive operation.</para>
            <para>See also mask(), Pixmap Transformations, and QBitmap.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for the pixmap. This is the ratio
            between device pixels and device independent pixels.</para>
            <para>Use this function when calculating layout geometry based on the
            pixmap size: QSize layoutSize = image.size() /
            image.devicePixelRatio()</para>
            <para>The default value is 1.0.</para>
            <para>See also setDevicePixelRatio() and QImageReader.</para>
            <para></para>
            <para>Sets the device pixel ratio for the pixmap. This is the ratio
            between image pixels and device-independent pixels.</para>
            <para>The default scaleFactor is 1.0. Setting it to something else has
            two effects:</para>
            <para>QPainters that are opened on the pixmap will be scaled. For
            example, painting on a 200x200 image if with a ratio of 2.0 will result in
            effective (device-independent) painting bounds of 100x100.</para>
            <para>Code paths in Qt that calculate layout geometry based on the
            pixmap size will take the ratio into account: QSize layoutSize =
            pixmap.size() / pixmap.devicePixelRatio() The net effect of this is that
            the pixmap is displayed as high-DPI pixmap rather than a large pixmap (see
            Drawing High Resolution Versions of Pixmaps and Images).</para>
            <para>See also devicePixelRatio().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.IsNull">
            <summary>
            <para>Returns true if this is a null pixmap; otherwise returns
            false.</para>
            <para>A null pixmap has zero width, zero height and no contents. You
            cannot draw in a null pixmap.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Width">
            <summary>
            <para>Returns the width of the pixmap.</para>
            <para>See also size() and Pixmap Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Height">
            <summary>
            <para>Returns the height of the pixmap.</para>
            <para>See also size() and Pixmap Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Size">
            <summary>
            <para>Returns the size of the pixmap.</para>
            <para>See also width(), height(), and Pixmap Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Rect">
            <summary>
            <para>Returns the pixmap's enclosing rectangle.</para>
            <para>See also Pixmap Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.Depth">
            <summary>
            <para>Returns the depth of the pixmap.</para>
            <para>The pixmap depth is also called bits per pixel (bpp) or bit
            planes of a pixmap. A null pixmap has depth 0.</para>
            <para>See also defaultDepth() and Pixmap Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.DefaultDepth">
            <summary>
            <para>Returns the default pixmap depth used by the application.</para>
            <para>On all platforms the depth of the primary screen will be
            returned.</para>
            <para>See also depth(), QColormap::depth(), and Pixmap
            Information.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.HasAlpha">
            <summary>
            <para>Returns true if this pixmap has an alpha channel, or has a mask,
            otherwise returns false.</para>
            <para>See also hasAlphaChannel() and mask().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.HasAlphaChannel">
            <summary>
            <para>Returns true if the pixmap has a format that respects the alpha
            channel, otherwise returns false.</para>
            <para>See also hasAlpha().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.CacheKey">
            <summary>
            <para>Returns a number that identifies this QPixmap. Distinct QPixmap
            objects can only have the same cache key if they refer to the same
            contents.</para>
            <para>The cacheKey() will change when the pixmap is altered.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmap.IsQBitmap">
            <summary>
            <para>Returns true if this is a QBitmap; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QBitmap">
            <summary>
            <para>The QBitmap class provides monochrome (1-bit depth)
            pixmaps.</para>
            </summary>
            <remarks>
            <para>The QBitmap class is a monochrome off-screen paint device used
            mainly for creating custom QCursor and QBrush objects, constructing QRegion
            objects, and for setting masks for pixmaps and widgets.</para>
            <para>QBitmap is a QPixmap subclass ensuring a depth of 1, except for
            null objects which have a depth of 0. If a pixmap with a depth greater than
            1 is assigned to a bitmap, the bitmap will be dithered
            automatically.</para>
            <para>Use the QColor objects Qt::color0 and Qt::color1 when drawing on
            a QBitmap object (or a QPixmap object with depth 1).</para>
            <para>Painting with Qt::color0 sets the bitmap bits to 0, and painting
            with Qt::color1 sets the bits to 1. For a bitmap, 0-bits indicate
            background (or transparent pixels) and 1-bits indicate foreground (or
            opaque pixels). Use the clear() function to set all the bits to Qt::color0.
            Note that using the Qt::black and Qt::white colors make no sense because
            the QColor::pixel() value is not necessarily 0 for black and 1 for
            white.</para>
            <para>The QBitmap class provides the transformed() function returning a
            transformed copy of the bitmap; use the QTransform argument to translate,
            scale, shear, and rotate the bitmap. In addition, QBitmap provides the
            static fromData() function which returns a bitmap constructed from the
            given uchar data, and the static fromImage() function returning a converted
            copy of a QImage object.</para>
            <para>Just like the QPixmap class, QBitmap is optimized by the use of
            implicit data sharing. For more information, see the Implicit Data Sharing
            documentation.</para>
            <para></para>
            <para>See also QPixmap, QImage, QImageReader, and QImageWriter.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QBitmap.#ctor">
            <summary>
            <para>Constructs a null bitmap.</para>
            <para>See also QPixmap::isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.#ctor(QtGui.QPixmap)">
            <summary>
            <para>Constructs a bitmap that is a copy of the given pixmap.</para>
            <para>If the pixmap has a depth greater than 1, the resulting bitmap
            will be dithered automatically.</para>
            <para>See also QPixmap::depth(), fromImage(), and fromData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a bitmap with the given width and height. The pixels
            inside are uninitialized.</para>
            <para>See also clear().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.#ctor(QtCore.QSize)">
            <summary>
            <para>Constructs a bitmap with the given size. The pixels in the bitmap
            are uninitialized.</para>
            <para>See also clear().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.#ctor(System.String,System.String)">
            <summary>
            <para>Constructs a bitmap from the file specified by the given
            fileName. If the file does not exist, or has an unknown format, the bitmap
            becomes a null bitmap.</para>
            <para>The fileName and format parameters are passed on to the
            QPixmap::load() function. If the file format uses more than 1 bit per
            pixel, the resulting bitmap will be dithered automatically.</para>
            <para>See also QPixmap::isNull() and
            QImageReader::imageFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.Swap(QtGui.QBitmap)">
            <summary>
            <para>Swaps bitmap other with this bitmap. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.op_Implicit(QtGui.QBitmap)~QtCore.QVariant">
            <summary>
            <para>Returns the bitmap as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.Clear">
            <summary>
            <para>Clears the bitmap, setting all its bits to Qt::color0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.Transformed(QtGui.QMatrix)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This convenience function converts the matrix to a QTransform and
            calls the overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.Transformed(QtGui.QTransform)">
            <summary>
            <para>Returns a copy of this bitmap, transformed according to the given
            matrix.</para>
            <para>See also QPixmap::transformed().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.FromImage(QtGui.QImage,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Returns a copy of the given image converted to a bitmap using the
            specified image conversion flags.</para>
            <para>See also fromData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBitmap.FromData(QtCore.QSize,System.Byte*,QtGui.QImage.Format)">
            <summary>
            <para>Constructs a bitmap with the given size, and sets the contents to
            the bits supplied.</para>
            <para>The bitmap data has to be byte aligned and provided in in the bit
            order specified by monoFormat. The mono format must be either
            QImage::Format_Mono or QImage::Format_MonoLSB. Use QImage::Format_Mono to
            specify data on the XBM format.</para>
            <para>See also fromImage().</para>
            </summary>
        </member>
        <member name="T:QtGui.QIcon">
            <summary>
            <para>The QIcon class provides scalable icons in different modes and
            states.</para>
            </summary>
            <remarks>
            <para>A QIcon can generate smaller, larger, active, and disabled
            pixmaps from the set of pixmaps it is given. Such pixmaps are used by Qt
            widgets to show an icon representing a particular action.</para>
            <para>The simplest use of QIcon is to create one from a QPixmap file or
            resource, and then use it, allowing Qt to work out all the required icon
            styles and sizes. For example:</para>
            <para>QToolButton *button = new QToolButton;</para>
            <para>button-&gt;setIcon(QIcon(&quot;open.xpm&quot;));</para>
            <para>To undo a QIcon, simply set a null icon in its place:</para>
            <para>button-&gt;setIcon(QIcon());</para>
            <para>Use the QImageReader::supportedImageFormats() and
            QImageWriter::supportedImageFormats() functions to retrieve a complete list
            of the supported file formats.</para>
            <para>When you retrieve a pixmap using pixmap(QSize, Mode, State), and
            no pixmap for this given size, mode and state has been added with addFile()
            or addPixmap(), then QIcon will generate one on the fly. This pixmap
            generation happens in a QIconEngineV2. The default engine scales pixmaps
            down if required, but never up, and it uses the current style to calculate
            a disabled appearance. By using custom icon engines, you can customize
            every aspect of generated icons. With QIconEnginePluginV2 it is possible to
            register different icon engines for different file suffixes, making it
            possible for third parties to provide additional icon engines to those
            included with Qt.</para>
            <para>Note: Since Qt 4.2, an icon engine that supports SVG is
            included.</para>
            <para></para>
            <para>Making Classes that Use QIcon</para>
            <para>If you write your own widgets that have an option to set a small
            pixmap, consider allowing a QIcon to be set for that pixmap. The Qt class
            QToolButton is an example of such a widget.</para>
            <para>Provide a method to set a QIcon, and when you draw the icon,
            choose whichever pixmap is appropriate for the current state of your
            widget. For example:</para>
            <para>void MyWidget::drawIcon(QPainter *painter, QPoint pos)</para>
            <para>{</para>
            <para>    QPixmap pixmap = icon.pixmap(QSize(22, 22),</para>
            <para>                                   isEnabled() ?
            QIcon::Normal</para>
            <para>                                               :
            QIcon::Disabled,</para>
            <para>                                   isChecked() ? QIcon::On</para>
            <para>                                               :
            QIcon::Off);</para>
            <para>    painter-&gt;drawPixmap(pos, pixmap);</para>
            <para>}</para>
            <para>You might also make use of the Active mode, perhaps making your
            widget Active when the mouse is over the widget (see
            QWidget::enterEvent()), while the mouse is pressed pending the release that
            will activate the function, or when it is the currently selected item. If
            the widget can be toggled, the &quot;On&quot; mode might be used to draw a
            different icon.</para>
            <para></para>
            <para></para>
            <para>See also GUI Design Handbook: Iconic Label and Icons
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QIcon.#ctor">
            <summary>
            <para>Constructs a null icon.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.#ctor(QtGui.QPixmap)">
            <summary>
            <para>Constructs an icon from a pixmap.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.#ctor(QtGui.QIcon)">
            <summary>
            <para>Constructs a copy of other. This is very fast.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.#ctor(System.String)">
            <summary>
            <para>Constructs an icon from the file with the given fileName. The
            file will be loaded on demand.</para>
            <para>If fileName contains a relative path (e.g. the filename only) the
            relevant file must be found relative to the runtime working
            directory.</para>
            <para>The file name can be either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed images and other resource files in the
            application's executable.</para>
            <para>Use the QImageReader::supportedImageFormats() and
            QImageWriter::supportedImageFormats() functions to retrieve a complete list
            of the supported file formats.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.#ctor(QtGui.QIconEngine)">
            <summary>
            <para>Creates an icon with a specific icon engine. The icon takes
            ownership of the engine.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Swap(QtGui.QIcon)">
            <summary>
            <para>Swaps icon other with this icon. This operation is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.op_Implicit(QtGui.QIcon)~QtCore.QVariant">
            <summary>
            <para>Returns the icon as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Pixmap(QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns a pixmap with the requested size, mode, and state,
            generating one if necessary. The pixmap might be smaller than requested,
            but never larger.</para>
            <para>Setting the Qt::AA_UseHighDpiPixmaps application attribute
            enables this function to return pixmaps that are larger than the requested
            size. Such images will have a devicePixelRatio larger than 1.</para>
            <para>See also actualSize() and paint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Pixmap(System.Int32,System.Int32,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a pixmap of size QSize(w, h). The pixmap might be smaller
            than requested, but never larger.</para>
            <para>Setting the Qt::AA_UseHighDpiPixmaps application attribute
            enables this function to return pixmaps that are larger than the requested
            size. Such images will have a devicePixelRatio larger than 1.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Pixmap(System.Int32,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a pixmap of size QSize(extent, extent). The pixmap might
            be smaller than requested, but never larger.</para>
            <para>Setting the Qt::AA_UseHighDpiPixmaps application attribute
            enables this function to return pixmaps that are larger than the requested
            size. Such images will have a devicePixelRatio larger than 1.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Pixmap(QtGui.QWindow,QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns a pixmap with the requested window size, mode, and state,
            generating one if necessary.</para>
            <para>The pixmap can be smaller than the requested size. If window is
            on a high-dpi display the pixmap can be larger. In that case it will have a
            devicePixelRatio larger than 1.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also actualSize() and paint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.ActualSize(QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns the actual size of the icon for the requested size, mode,
            and state. The result might be smaller than requested, but never larger.
            The returned size is in device-independent pixels (This is relevant for
            high-dpi pixmaps.)</para>
            <para>See also pixmap() and paint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.ActualSize(QtGui.QWindow,QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns the actual size of the icon for the requested window
            size, mode, and state.</para>
            <para>The pixmap can be smaller than the requested size. The returned
            size is in device-independent pixels (This is relevant for high-dpi
            pixmaps.)</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also actualSize(), pixmap(), and paint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Paint(QtGui.QPainter,QtCore.QRect,QtCore.Qt.AlignmentFlag,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Uses the painter to paint the icon with specified alignment,
            required mode, and state into the rectangle rect.</para>
            <para>See also actualSize() and pixmap().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.Paint(QtGui.QPainter,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.AlignmentFlag,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Paints the icon into the rectangle QRect(x, y, w, h).</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.AddPixmap(QtGui.QPixmap,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Adds pixmap to the icon, as a specialization for mode and
            state.</para>
            <para>Custom icon engines are free to ignore additionally added
            pixmaps.</para>
            <para>See also addFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.AddFile(System.String,QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Adds an image from the file with the given fileName to the icon,
            as a specialization for size, mode and state. The file will be loaded on
            demand. Note: custom icon engines are free to ignore additionally added
            pixmaps.</para>
            <para>If fileName contains a relative path (e.g. the filename only) the
            relevant file must be found relative to the runtime working
            directory.</para>
            <para>The file name can be either refer to an actual file on disk or to
            one of the application's embedded resources. See the Resource System
            overview for details on how to embed images and other resource files in the
            application's executable.</para>
            <para>Use the QImageReader::supportedImageFormats() and
            QImageWriter::supportedImageFormats() functions to retrieve a complete list
            of the supported file formats.</para>
            <para>If a high resolution version of the image exists (identified by
            the suffix @2x on the base name), it is automatically loaded and added with
            the device pixel ratio set to a value of 2. This can be disabled by setting
            the environment variable QT_HIGHDPI_DISABLE_2X_IMAGE_LOADING (see
            QImageReader).</para>
            <para>Note: When you add a non-empty filename to a QIcon, the icon
            becomes non-null, even if the file doesn't exist or points to a corrupt
            file.</para>
            <para>See also addPixmap() and QPixmap::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.FromTheme(System.String,QtGui.QIcon)">
             <summary>
             <para>Returns the QIcon corresponding to name in the current icon
             theme. If no such icon is found in the current theme fallback is returned
             instead.</para>
             <para>The latest version of the freedesktop icon specification and
             naming specification can be obtained here:</para>
             <para></para>
            
             <para>http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-late
             st.html</para>
            
             <para>http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-la
             test.html</para>
             <para></para>
             <para>To fetch an icon from the current icon theme:</para>
             <para>    QIcon undoicon =
             QIcon::fromTheme(&quot;edit-undo&quot;);</para>
             <para>Or if you want to provide a guaranteed fallback for platforms
             that do not support theme icons, you can use the second argument:</para>
             <para>    QIcon undoicon = QIcon::fromTheme(&quot;edit-undo&quot;,
             QIcon(&quot;:/undo.png&quot;));</para>
             <para>Note: By default, only X11 will support themed icons. In order to
             use themed icons on Mac and Windows, you will have to bundle a compliant
             theme in one of your themeSearchPaths() and set the appropriate
             themeName().</para>
             <para>This function was introduced in  Qt 4.6.</para>
             <para>See also themeName(), setThemeName(), and
             themeSearchPaths().</para>
             </summary>
        </member>
        <member name="M:QtGui.QIcon.HasThemeIcon(System.String)">
            <summary>
            <para>Returns true if there is an icon available for name in the
            current icon theme, otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also themeSearchPaths(), fromTheme(), and
            setThemeName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIcon.FromTheme(System.String)">
             <summary>
             <para>Returns the QIcon corresponding to name in the current icon
             theme. If no such icon is found in the current theme fallback is returned
             instead.</para>
             <para>The latest version of the freedesktop icon specification and
             naming specification can be obtained here:</para>
             <para></para>
            
             <para>http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-late
             st.html</para>
            
             <para>http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-la
             test.html</para>
             <para></para>
             <para>To fetch an icon from the current icon theme:</para>
             <para>    QIcon undoicon =
             QIcon::fromTheme(&quot;edit-undo&quot;);</para>
             <para>Or if you want to provide a guaranteed fallback for platforms
             that do not support theme icons, you can use the second argument:</para>
             <para>    QIcon undoicon = QIcon::fromTheme(&quot;edit-undo&quot;,
             QIcon(&quot;:/undo.png&quot;));</para>
             <para>Note: By default, only X11 will support themed icons. In order to
             use themed icons on Mac and Windows, you will have to bundle a compliant
             theme in one of your themeSearchPaths() and set the appropriate
             themeName().</para>
             <para>This function was introduced in  Qt 4.6.</para>
             <para>See also themeName(), setThemeName(), and
             themeSearchPaths().</para>
             </summary>
        </member>
        <member name="P:QtGui.QIcon.ThemeSearchPaths">
            <summary>
            <para>Returns the search paths for icon themes.</para>
            <para>The default value will depend on the platform:</para>
            <para>On X11, the search path will use the XDG_DATA_DIRS environment
            variable if available.</para>
            <para>By default all platforms will have the resource directory :\icons
            as a fallback. You can use &quot;rcc -project&quot; to generate a resource
            file from your icon theme.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setThemeSearchPaths(), fromTheme(), and
            setThemeName().</para>
            <para></para>
            <para>Sets the search paths for icon themes to paths.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also themeSearchPaths(), fromTheme(), and
            setThemeName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QIcon.ThemeName">
            <summary>
            <para>Returns the name of the current icon theme.</para>
            <para>On X11, the current icon theme depends on your desktop settings.
            On other platforms it is not set by default.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setThemeName(), themeSearchPaths(), fromTheme(), and
            hasThemeIcon().</para>
            <para></para>
            <para>Sets the current icon theme to name.</para>
            <para>The name should correspond to a directory name in the
            themeSearchPath() containing an index.theme file describing it's
            contents.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also themeSearchPaths() and themeName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QIcon.Name">
            <summary>
            <para>Returns the name used to create the icon, if available.</para>
            <para>Depending on the way the icon was created, it may have an
            associated name. This is the case for icons created with fromTheme() or
            icons using a QIconEngine which supports the
            QIconEngineV2::IconNameHook.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also fromTheme() and QIconEngine.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIcon.IsNull">
            <summary>
            <para>Returns true if the icon is empty; otherwise returns
            false.</para>
            <para>An icon is empty if it has neither a pixmap nor a
            filename.</para>
            <para>Note: Even a non-null icon might not be able to create valid
            pixmaps, eg. if the file does not exist or cannot be read.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIcon.CacheKey">
            <summary>
            <para>Returns a number that identifies the contents of this QIcon
            object. Distinct QIcon objects can have the same key if they refer to the
            same contents.</para>
            <para>The cacheKey() will change when the icon is altered via
            addPixmap() or addFile().</para>
            <para>Cache keys are mostly useful in conjunction with caching.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also QPixmap::cacheKey().</para>
            </summary>
        </member>
        <member name="T:QtGui.QIcon.Mode">
            <summary>
            <para>This enum type describes the mode for which a pixmap is intended
            to be used. The currently defined modes are:</para>
            </summary>
        </member>
        <member name="F:QtGui.QIcon.Mode.Normal">
            <summary>Display the pixmap when the user is not interacting with the icon, but the functionality represented by the icon is available.</summary>
        </member>
        <member name="F:QtGui.QIcon.Mode.Disabled">
            <summary>Display the pixmap when the functionality represented by the icon is not available.</summary>
        </member>
        <member name="F:QtGui.QIcon.Mode.Active">
            <summary>Display the pixmap when the functionality represented by the icon is available and the user is interacting with the icon, for example, moving the mouse over it or clicking it.</summary>
        </member>
        <member name="F:QtGui.QIcon.Mode.Selected">
            <summary>Display the pixmap when the item represented by the icon is selected.</summary>
        </member>
        <member name="T:QtGui.QIcon.State">
            <summary>
            <para>This enum describes the state for which a pixmap is intended to
            be used. The state can be:</para>
            </summary>
        </member>
        <member name="F:QtGui.QIcon.State.On">
            <summary>Display the pixmap when the widget is in an "on" state</summary>
        </member>
        <member name="F:QtGui.QIcon.State.Off">
            <summary>Display the pixmap when the widget is in an "off" state</summary>
        </member>
        <member name="T:QtGui.QIconEngine">
            <summary>
            <para>The QIconEngine class provides an abstract base class for QIcon
            renderers.</para>
            </summary>
            <remarks>
            <para>An icon engine provides the rendering functions for a QIcon. Each
            icon has a corresponding icon engine that is responsible for drawing the
            icon with a requested size, mode and state.</para>
            <para>The icon is rendered by the paint() function, and the icon can
            additionally be obtained as a pixmap with the pixmap() function (the
            default implementation simply uses paint() to achieve this). The
            addPixmap() function can be used to add new pixmaps to the icon engine, and
            is used by QIcon to add specialized custom pixmaps.</para>
            <para>The paint(), pixmap(), and addPixmap() functions are all virtual,
            and can therefore be reimplemented in subclasses of QIconEngine.</para>
            <para></para>
            <para>See also QIconEnginePlugin.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QIconEngine.Paint(QtGui.QPainter,QtCore.QRect,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Uses the given painter to paint the icon with the required mode
            and state into the rectangle rect.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.ActualSize(QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns the actual size of the icon the engine provides for the
            requested size, mode and state. The default implementation returns the
            given size.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.Pixmap(QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Returns the icon as a pixmap with the required size, mode, and
            state. The default implementation creates a new pixmap and calls paint() to
            fill it.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.AddPixmap(QtGui.QPixmap,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Called by QIcon::addPixmap(). Adds a specialized pixmap for the
            given mode and state. The default pixmap-based engine stores any supplied
            pixmaps, and it uses them instead of scaled pixmaps if the size of a pixmap
            matches the size of icon requested. Custom icon engines that implement
            scalable vector formats are free to ignores any extra pixmaps.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.AddFile(System.String,QtCore.QSize,QtGui.QIcon.Mode,QtGui.QIcon.State)">
            <summary>
            <para>Called by QIcon::addFile(). Adds a specialized pixmap from the
            file with the given fileName, size, mode and state. The default
            pixmap-based engine stores any supplied file names, and it loads the
            pixmaps on demand instead of using scaled pixmaps if the size of a pixmap
            matches the size of icon requested. Custom icon engines that implement
            scalable vector formats are free to ignores any extra files.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.Clone">
            <summary>
            <para>Reimplement this method to return a clone of this icon
            engine.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.Read(QtCore.QDataStream)">
            <summary>
            <para>Reads icon engine contents from the QDataStream in. Returns true
            if the contents were read; otherwise returns false.</para>
            <para>QIconEngine's default implementation always return false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.Write(QtCore.QDataStream)">
            <summary>
            <para>Writes the contents of this engine to the QDataStream out.
            Returns true if the contents were written; otherwise returns false.</para>
            <para>QIconEngine's default implementation always return false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEngine.Virtual_hook(System.Int32,System.IntPtr)">
            <summary>
            <para>Additional method to allow extending QIconEngine without adding
            new virtual methods (and without breaking binary compatibility). The actual
            action and format of data depends on id argument which is in fact a
            constant from IconEngineHook enum.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also IconEngineHook.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIconEngine.Key">
            <summary>
            <para>Returns a key that identifies this icon engine.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIconEngine.IconName">
            <summary>
            <para>Returns the name used to create the engine, if available.</para>
            <para>Note: This is a helper method and the actual work is done by
            virtual_hook() method, hence this method depends on icon engine support and
            may not work with all icon engines.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="T:QtGui.QIconEngine.IconEngineHook">
            <summary>
            <para>These enum values are used for virtual_hook() to allow additional
            queries to icon engine without breaking binary compatibility.</para>
            <para>This enum was introduced or modified in  Qt 4.5.</para>
            <para>See also virtual_hook().</para>
            </summary>
        </member>
        <member name="F:QtGui.QIconEngine.IconEngineHook.AvailableSizesHook">
            <summary>Allows to query the sizes of the contained pixmaps for pixmap-based engines. The data argument of the virtual_hook() function is a AvailableSizesArgument pointer that should be filled with icon sizes. Engines that work in terms of a scalable, vectorial format normally return an empty list.</summary>
        </member>
        <member name="F:QtGui.QIconEngine.IconEngineHook.IconNameHook">
            <summary>Allows to query the name used to create the icon, for example when instantiating an icon using QIcon::fromTheme().</summary>
        </member>
        <member name="T:QtGui.QIconEngine.AvailableSizesArgument">
            <summary>
            <para>This struct represents arguments to virtual_hook() function when
            id parameter is QIconEngine::AvailableSizesHook.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also virtual_hook() and QIconEngine::IconEngineHook.</para>
            </remarks>
        </member>
        <member name="P:QtGui.QIconEngine.AvailableSizesArgument.Mode">
            <summary>
            <para>This variable holds the requested mode of an image.</para>
            <para>See also QIcon::Mode.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIconEngine.AvailableSizesArgument.State">
            <summary>
            <para>This variable holds the requested state of an image.</para>
            <para>See also QIcon::State.</para>
            </summary>
        </member>
        <member name="T:QtGui.QIconEnginePlugin">
            <summary>
            <para>The QIconEnginePlugin class provides an abstract base for custom
            QIconEngine plugins.</para>
            </summary>
            <remarks>
            <para>The icon engine plugin is a simple plugin interface that makes it
            easy to create custom icon engines that can be loaded dynamically into
            applications through QIcon. QIcon uses the file or resource name's suffix
            to determine what icon engine to use.</para>
            <para>Writing a icon engine plugin is achieved by subclassing this base
            class, reimplementing the pure virtual function create(), and exporting the
            class with the Q_PLUGIN_METADATA() macro.</para>
            <para>The json metadata should contain a list of icon engine keys that
            this plugin supports. The keys correspond to the suffix of the file or
            resource name used when the plugin was created. Keys are case
            insensitive.</para>
            <para>{ &quot;Keys&quot;: [ &quot;myiconengine&quot; ] }</para>
            <para></para>
            <para>See also How to Create Qt Plugins.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QIconEnginePlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a icon engine plugin with the given parent. This is
            invoked automatically by the plugin loader.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIconEnginePlugin.Create(System.String)">
            <summary>
            <para>Creates and returns a QIconEngine object for the icon with the
            given filename.</para>
            </summary>
        </member>
        <member name="T:QtGui.QImageIOHandler">
            <summary>
            <para>The QImageIOHandler class defines the common image I/O interface
            for all image formats in Qt.</para>
            </summary>
            <remarks>
            <para>Qt uses QImageIOHandler for reading and writing images through
            QImageReader and QImageWriter. You can also derive from this class to write
            your own image format handler using Qt's plugin mechanism.</para>
            <para>Call setDevice() to assign a device to the handler, and
            setFormat() to assign a format to it. One QImageIOHandler may support more
            than one image format. canRead() returns true if an image can be read from
            the device, and read() and write() return true if reading or writing an
            image was completed successfully.</para>
            <para>QImageIOHandler also has support for animations formats, through
            the functions loopCount(), imageCount(), nextImageDelay() and
            currentImageNumber().</para>
            <para>In order to determine what options an image handler supports, Qt
            will call supportsOption() and setOption(). Make sure to reimplement these
            functions if you can provide support for any of the options in the
            ImageOption enum.</para>
            <para>To write your own image handler, you must at least reimplement
            canRead() and read(). Then create a QImageIOPlugin that can create the
            handler. Finally, install your plugin, and QImageReader and QImageWriter
            will then automatically load the plugin, and start using it.</para>
            <para></para>
            <para>See also QImageIOPlugin, QImageReader, and QImageWriter.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QImageIOHandler.#ctor">
            <summary>
            <para>Constructs a QImageIOHandler object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.CanRead">
            <summary>
            <para>Returns true if an image can be read from the device (i.e., the
            image format is supported, the device can be read from and the initial
            header information suggests that the image can be read); otherwise returns
            false.</para>
            <para>When reimplementing canRead(), make sure that the I/O device
            (device()) is left in its original state (e.g., by using peek() rather than
            read()).</para>
            <para>See also read() and QIODevice::peek().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.Read(QtGui.QImage)">
            <summary>
            <para>Read an image from the device, and stores it in image. Returns
            true if the image is successfully read; otherwise returns false.</para>
            <para>For image formats that support incremental loading, and for
            animation formats, the image handler can assume that image points to the
            previous frame.</para>
            <para>See also canRead().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.Write(QtGui.QImage)">
            <summary>
            <para>Writes the image image to the assigned device. Returns true on
            success; otherwise returns false.</para>
            <para>The default implementation does nothing, and simply returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.Option(QtGui.QImageIOHandler.ImageOption)">
            <summary>
            <para>Returns the value assigned to option as a QVariant. The type of
            the value depends on the option. For example, option(Size) returns a QSize
            variant.</para>
            <para>See also setOption() and supportsOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.SetOption(QtGui.QImageIOHandler.ImageOption,QtCore.QVariant)">
            <summary>
            <para>Sets the option option with the value value.</para>
            <para>See also option() and ImageOption.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.SupportsOption(QtGui.QImageIOHandler.ImageOption)">
            <summary>
            <para>Returns true if the QImageIOHandler supports the option option;
            otherwise returns false. For example, if the QImageIOHandler supports the
            Size option, supportsOption(Size) must return true.</para>
            <para>See also setOption() and option().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.JumpToNextImage">
            <summary>
            <para>For image formats that support animation, this function jumps to
            the next image.</para>
            <para>The default implementation does nothing, and returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOHandler.JumpToImage(System.Int32)">
            <summary>
            <para>For image formats that support animation, this function jumps to
            the image whose sequence number is imageNumber. The next call to read()
            will attempt to read this image.</para>
            <para>The default implementation does nothing, and returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.Device">
            <summary>
            <para>Returns the device currently assigned to the QImageIOHandler. If
            not device has been assigned, 0 is returned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets the device of the QImageIOHandler to device. The image
            handler will use this device when reading and writing images.</para>
            <para>The device can only be set once and must be set before calling
            canRead(), read(), write(), etc. If you need to read multiple files,
            construct multiple instances of the appropriate QImageIOHandler
            subclass.</para>
            <para>See also device().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.Format">
            <summary>
            <para>Returns the format that is currently assigned to QImageIOHandler.
            If no format has been assigned, an empty string is returned.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format of the QImageIOHandler to format. The format is
            most useful for handlers that support multiple image formats.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.Name">
            <summary>
            <para>Use format() instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.LoopCount">
            <summary>
            <para>For image formats that support animation, this function returns
            the number of times the animation should loop. If the image format does not
            support animation, 0 is returned.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.ImageCount">
            <summary>
            <para>For image formats that support animation, this function returns
            the number of images in the animation. If the image format does not support
            animation, or if it is unable to determine the number of images, 0 is
            returned.</para>
            <para>The default implementation returns 1 if canRead() returns true;
            otherwise 0 is returned.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.NextImageDelay">
            <summary>
            <para>For image formats that support animation, this function returns
            the number of milliseconds to wait until reading the next image. If the
            image format does not support animation, 0 is returned.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.CurrentImageNumber">
            <summary>
            <para>For image formats that support animation, this function returns
            the sequence number of the current image in the animation. If this function
            is called before any image is read(), -1 is returned. The number of the
            first image in the sequence is 0.</para>
            <para>If the image format does not support animation, 0 is
            returned.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageIOHandler.CurrentImageRect">
            <summary>
            <para>Returns the rect of the current image. If no rect is defined for
            the image, and empty QRect() is returned.</para>
            <para>This function is useful for animations, where only parts of the
            frame may be updated at a time.</para>
            </summary>
        </member>
        <member name="T:QtGui.QImageIOHandler.ImageOption">
            <summary>
            <para>This enum describes the different options supported by
            QImageIOHandler. Some options are used to query an image for properties,
            and others are used to toggle the way in which an image should be
            written.</para>
            </summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Size">
            <summary>The original size of an image. A handler that supports this option is expected to read the size of the image from the image metadata, and return this size from option() as a QSize.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ClipRect">
            <summary>The clip rect, or ROI (Region Of Interest). A handler that supports this option is expected to only read the provided QRect area from the original image in read(), before any other transformation is applied.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Description">
            <summary>The image description. Some image formats, such as GIF and PNG, allow embedding of text or comments into the image data (e.g., for storing copyright information). It's common that the text is stored in key-value pairs, but some formats store all text in one continuous block. QImageIOHandler returns the text as one QString, where keys and values are separated by a ':', and keys-value pairs are separated by two newlines (\n\n). For example, "Title: Sunset\n\nAuthor: Jim Smith\nSarah Jones\n\n". Formats that store text in a single block can use "Description" as the key.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ScaledClipRect">
            <summary>The scaled clip rect (or ROI, Region Of Interest) of the image. A handler that supports this option is expected to apply the provided clip rect (a QRect), after applying any scaling (ScaleSize) or regular clipping (ClipRect). If the handler does not support this option, QImageReader will apply the scaled clip rect after the image has been read.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ScaledSize">
            <summary>The scaled size of the image. A handler that supports this option is expected to scale the image to the provided size (a QSize), after applying any clip rect transformation (ClipRect). If the handler does not support this option, QImageReader will perform the scaling after the image has been read.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.CompressionRatio">
            <summary>The compression ratio of the image data. A handler that supports this option is expected to set its compression rate depending on the value of this option (an int) when writing.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Gamma">
            <summary>The gamma level of the image. A handler that supports this option is expected to set the image gamma level depending on the value of this option (a float) when writing.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Quality">
            <summary>The quality level of the image. A handler that supports this option is expected to set the image quality level depending on the value of this option (an int) when writing.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Name">
            <summary>The name of the image. A handler that supports this option is expected to read the name from the image metadata and return this as a QString, or when writing an image it is expected to store the name in the image metadata.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.SubType">
            <summary>The subtype of the image. A handler that supports this option can use the subtype value to help when reading and writing images. For example, a PPM handler may have a subtype value of "ppm" or "ppmraw".</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.IncrementalReading">
            <summary>A handler that supports this option is expected to read the image in several passes, as if it was an animation. QImageReader will treat the image as an animation.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Endianness">
            <summary>The endianness of the image. Certain image formats can be stored as BigEndian or LittleEndian. A handler that supports Endianness uses the value of this option to determine how the image should be stored.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.Animation">
            <summary>Image formats that support animation return true for this value in supportsOption(); otherwise, false is returned.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.BackgroundColor">
            <summary>Certain image formats allow the background color to be specified. A handler that supports BackgroundColor initializes the background color to this option (a QColor) when reading an image.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ImageFormat">
            <summary>The image's data format returned by the handler. This can be any of the formats listed in QImage::Format.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtGui.QImageIOHandler.ImageOption.SupportedSubTypes" -->
        <member name="F:QtGui.QImageIOHandler.ImageOption.OptimizedWrite">
            <summary>. A handler which supports this option is expected to turn on optimization flags when writing.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ProgressiveScanWrite">
            <summary>. A handler which supports this option is expected to write the image as a progressive scan image.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.ImageTransformation">
            <summary>. A handler which supports this option can read the transformation metadata of an image. A handler that supports this option should not apply the transformation itself.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.ImageOption.TransformedByDefault">
            <summary>. A handler that reports support for this feature will have image transformation metadata applied by default on read.</summary>
        </member>
        <member name="T:QtGui.QImageIOHandler.Transformation">
            <summary>
            <para>This enum describes the different transformations or orientations
            supported by some image formats, usually through EXIF.</para>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            <para>The Transformations type is a typedef for
            QFlags&lt;Transformation&gt;. It stores an OR combination of Transformation
            values.</para>
            <para>See also QImageReader::transformation(),
            QImageReader::setAutoTransform(), and
            QImageWriter::setTransformation().</para>
            </summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationNone">
            <summary>No transformation should be applied.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationMirror">
            <summary>Mirror the image horizontally.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationFlip">
            <summary>Mirror the image vertically.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationRotate180">
            <summary>Rotate the image 180 degrees. This is the same as mirroring it both horizontally and vertically.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationRotate90">
            <summary>Rotate the image 90 degrees.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationMirrorAndRotate90">
            <summary>Mirror the image horizontally and then rotate it 90 degrees.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationFlipAndRotate90">
            <summary>Mirror the image vertically and then rotate it 90 degrees.</summary>
        </member>
        <member name="F:QtGui.QImageIOHandler.Transformation.TransformationRotate270">
            <summary>Rotate the image 270 degrees. This is the same as mirroring it both horizontally, vertically and then rotating it 90 degrees.</summary>
        </member>
        <member name="T:QtGui.QImageIOPlugin">
            <summary>
            <para>The QImageIOPlugin class defines an interface for writing an
            image format plugin.</para>
            </summary>
            <remarks>
            <para>QImageIOPlugin is a factory for creating QImageIOHandler objects,
            which are used internally by QImageReader and QImageWriter to add support
            for different image formats to Qt.</para>
            <para>Writing an image I/O plugin is achieved by subclassing this base
            class, reimplementing the pure virtual functions capabilities() and
            create(), and exporting the class with the Q_PLUGIN_METADATA() macro. See
            How to Create Qt Plugins for details.</para>
            <para>An image format plugin can support three capabilities: reading
            (CanRead), writing (CanWrite) and incremental reading (CanReadIncremental).
            Reimplement capabilities() in you subclass to expose the capabilities of
            your image format.</para>
            <para>create() should create an instance of your QImageIOHandler
            subclass, with the provided device and format properly set, and return this
            handler.</para>
            <para>The json metadata file for the plugin needs to contain
            information about the image formats the plugins supports, together with the
            corresponding MIME types (one for each format). For a jpeg plugin, this
            could, for example, look as follows:</para>
            <para>{</para>
            <para>  &quot;Keys&quot;: [ &quot;jpg&quot;, &quot;jpeg&quot; ],</para>
            <para>  &quot;MimeTypes&quot;: [ &quot;image/jpeg&quot;,
            &quot;image/jpeg&quot; ]</para>
            <para>}</para>
            <para>Different plugins can support different capabilities. For
            example, you may have one plugin that supports reading the GIF format, and
            another that supports writing. Qt will select the correct plugin for the
            job, depending on the return value of capabilities(). If several plugins
            support the same capability, Qt will select one arbitrarily.</para>
            <para></para>
            <para>See also QImageIOHandler and How to Create Qt Plugins.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QImageIOPlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an image plugin with the given parent. This is invoked
            automatically by the moc generated code that exports the plugin.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOPlugin.Capabilities(QtCore.QIODevice,QtCore.QByteArray)">
            <summary>
            <para>Returns the capabilities of the plugin, based on the data in
            device and the format format. If device is 0, it should simply report
            whether the format can be read or written. Otherwise, it should attempt to
            determine whether the given format (or any format supported by the plugin
            if format is empty) can be read from or written to device. It should do
            this without changing the state of device (typically by using
            QIODevice::peek()).</para>
            <para>For example, if the QImageIOPlugin supports the BMP format,
            format is either empty or &quot;bmp&quot;, and the data in the device
            starts with the characters &quot;BM&quot;, this function should return
            CanRead. If format is &quot;bmp&quot;, device is 0 and the handler supports
            both reading and writing, this function should return CanRead |
            CanWrite.</para>
            <para>Format names are always given in lower case.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageIOPlugin.Create(QtCore.QIODevice,QtCore.QByteArray)">
            <summary>
            <para>Creates and returns a QImageIOHandler subclass, with device and
            format set. The format must come from the values listed in the
            &quot;Keys&quot; entry in the plugin metadata, or be empty. If it is empty,
            the data in device must have been recognized by the capabilities() method
            (with a likewise empty format).</para>
            <para>Format names are always given in lower case.</para>
            </summary>
        </member>
        <member name="T:QtGui.QImageIOPlugin.Capability">
            <summary>
            <para>This enum describes the capabilities of a QImageIOPlugin.</para>
            <para>The Capabilities type is a typedef for QFlags&lt;Capability&gt;.
            It stores an OR combination of Capability values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QImageIOPlugin.Capability.CanRead">
            <summary>The plugin can read images.</summary>
        </member>
        <member name="F:QtGui.QImageIOPlugin.Capability.CanWrite">
            <summary>The plugin can write images.</summary>
        </member>
        <member name="F:QtGui.QImageIOPlugin.Capability.CanReadIncremental">
            <summary>The plugin can read images incrementally.</summary>
        </member>
        <member name="T:QtGui.QImageReader">
            <summary>
            <para>The QImageReader class provides a format independent interface
            for reading images from files or other devices.</para>
            </summary>
            <remarks>
            <para>The most common way to read images is through QImage and
            QPixmap's constructors, or by calling QImage::load() and QPixmap::load().
            QImageReader is a specialized class which gives you more control when
            reading images. For example, you can read an image into a specific size by
            calling setScaledSize(), and you can select a clip rect, effectively
            loading only parts of an image, by calling setClipRect(). Depending on the
            underlying support in the image format, this can save memory and speed up
            loading of images.</para>
            <para>To read an image, you start by constructing a QImageReader
            object. Pass either a file name or a device pointer, and the image format
            to QImageReader's constructor. You can then set several options, such as
            the clip rect (by calling setClipRect()) and scaled size (by calling
            setScaledSize()). canRead() returns the image if the QImageReader can read
            the image (i.e., the image format is supported and the device is open for
            reading). Call read() to read the image.</para>
            <para>If any error occurs when reading the image, read() will return a
            null QImage. You can then call error() to find the type of error that
            occurred, or errorString() to get a human readable description of what went
            wrong.</para>
            <para></para>
            <para>Formats</para>
            <para>Call supportedImageFormats() for a list of formats that
            QImageReader can read. QImageReader supports all built-in image formats, in
            addition to any image format plugins that support reading. Call
            supportedMimeTypes() to obtain a list of supported MIME types, which for
            example can be passed to QFileDialog::setMimeTypeFilters().</para>
            <para>QImageReader autodetects the image format by default, by looking
            at the provided (optional) format string, the file name suffix, and the
            data stream contents. You can enable or disable this feature, by calling
            setAutoDetectImageFormat().</para>
            <para></para>
            <para>High Resolution Versions of Images</para>
            <para>It is possible to provide high resolution versions of images
            should a scaling between device pixels and device independent pixels be in
            effect.</para>
            <para>The high resolution version is marked by the suffix @2x on the
            base name. The image read will have its device pixel ratio set to a value
            of 2.</para>
            <para>This can be disabled by setting the environment variable
            QT_HIGHDPI_DISABLE_2X_IMAGE_LOADING.</para>
            <para></para>
            <para>See also QImageWriter, QImageIOHandler, QImageIOPlugin,
            QMimeDatabase, QImage::devicePixelRatio(), QPixmap::devicePixelRatio(),
            QIcon, QPainter::drawPixmap(), QPainter::drawImage(), and
            Qt::AA_UseHighDpiPixmaps.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QImageReader.#ctor">
            <summary>
            <para>Constructs an empty QImageReader object. Before reading an image,
            call setDevice() or setFileName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.#ctor(QtCore.QIODevice,QtCore.QByteArray)">
            <summary>
            <para>Constructs a QImageReader object with the device device and the
            image format format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.#ctor(System.String,QtCore.QByteArray)">
            <summary>
            <para>Constructs a QImageReader object with the file name fileName and
            the image format format.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.ImageFormat">
            <summary>
            <para>Returns the format of the image, without actually reading the
            image contents. The format describes the image format QImageReader::read()
            returns, not the format of the actual image.</para>
            <para>If the image format does not support this feature, this function
            returns an invalid format.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QImageIOHandler::ImageOption, QImageIOHandler::option(),
            and QImageIOHandler::supportsOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.Text(System.String)">
            <summary>
            <para>Returns the image text associated with key.</para>
            <para>Support for this option is implemented through
            QImageIOHandler::Description.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also textKeys() and QImageWriter::setText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.CanRead">
            <summary>
            <para>Returns true if an image can be read for the device (i.e., the
            image format is supported, and the device seems to contain valid data);
            otherwise returns false.</para>
            <para>canRead() is a lightweight function that only does a quick test
            to see if the image data is valid. read() may still return false after
            canRead() returns true, if the image data is corrupt.</para>
            <para>For images that support animation, canRead() returns false when
            all frames have been read.</para>
            <para>See also read() and supportedImageFormats().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.Read">
            <summary>
            <para>Reads an image from the device. On success, the image that was
            read is returned; otherwise, a null QImage is returned. You can then call
            error() to find the type of error that occurred, or errorString() to get a
            human readable description of the error.</para>
            <para>For image formats that support animation, calling read()
            repeatedly will return the next frame. When all frames have been read, a
            null image will be returned.</para>
            <para>See also canRead(), supportedImageFormats(), supportsAnimation(),
            and QMovie.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.Read(QtGui.QImage)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Reads an image from the device into image, which must point to a
            QImage. Returns true on success; otherwise, returns false.</para>
            <para>If image has same format and size as the image data that is about
            to be read, this function may not need to allocate a new image before
            reading. Because of this, it can be faster than the other read() overload,
            which always constructs a new image; especially when reading several images
            with the same format and size.</para>
            <para>QImage icon(64, 64, QImage::Format_RGB32);</para>
            <para>QImageReader reader(&quot;icon_64x64.bmp&quot;);</para>
            <para>if (reader.read(&amp;icon)) {</para>
            <para>    // Display icon</para>
            <para>}</para>
            <para>For image formats that support animation, calling read()
            repeatedly will return the next frame. When all frames have been read, a
            null image will be returned.</para>
            <para>See also canRead(), supportedImageFormats(), supportsAnimation(),
            and QMovie.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.JumpToNextImage">
            <summary>
            <para>For image formats that support animation, this function steps
            over the current image, returning true if successful or false if there is
            no following image in the animation.</para>
            <para>The default implementation calls read(), then discards the
            resulting image, but the image handler may have a more efficient way of
            implementing this operation.</para>
            <para>See also jumpToImage() and
            QImageIOHandler::jumpToNextImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.JumpToImage(System.Int32)">
            <summary>
            <para>For image formats that support animation, this function skips to
            the image whose sequence number is imageNumber, returning true if
            successful or false if the corresponding image cannot be found.</para>
            <para>The next call to read() will attempt to read this image.</para>
            <para>See also jumpToNextImage() and
            QImageIOHandler::jumpToImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.SupportsOption(QtGui.QImageIOHandler.ImageOption)">
            <summary>
            <para>Returns true if the reader supports option; otherwise returns
            false.</para>
            <para>Different image formats support different options. Call this
            function to determine whether a certain option is supported by the current
            format. For example, the PNG format allows you to embed text into the
            image's metadata (see text()), and the BMP format allows you to determine
            the image's size without loading the whole image into memory (see
            size()).</para>
            <para>QImageReader reader(&quot;:/image.png&quot;);</para>
            <para>if (reader.supportsOption(QImageIOHandler::Size))</para>
            <para>    qDebug() &lt;&lt; &quot;Size:&quot; &lt;&lt;
            reader.size();</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QImageWriter::supportsOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.ImageFormat(System.String)">
            <summary>
            <para>If supported, this function returns the image format of the file
            fileName. Otherwise, an empty string is returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageReader.ImageFormat(QtCore.QIODevice)">
            <summary>
            <para>If supported, this function returns the image format of the
            device device. Otherwise, an empty string is returned.</para>
            <para>See also QImageReader::autoDetectImageFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Format">
            <summary>
            <para>Returns the format QImageReader uses for reading images.</para>
            <para>You can call this function after assigning a device to the reader
            to determine the format of the device. For example:</para>
            <para>QImageReader reader(&quot;image.png&quot;);</para>
            <para>// reader.format() == &quot;png&quot;</para>
            <para>If the reader cannot read any image from the device (e.g., there
            is no image there, or the image has already been read), or if the format is
            unsupported, this function returns an empty QByteArray().</para>
            <para>See also setFormat() and supportedImageFormats().</para>
            <para></para>
            <para>Sets the format QImageReader will use when reading images, to
            format. format is a case insensitive text string. Example:</para>
            <para>QImageReader reader;</para>
            <para>reader.setFormat(&quot;png&quot;); // same as
            reader.setFormat(&quot;PNG&quot;);</para>
            <para>You can call supportedImageFormats() for the full list of formats
            QImageReader supports.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.AutoDetectImageFormat">
            <summary>
            <para>Returns true if image format autodetection is enabled on this
            image reader; otherwise returns false. By default, autodetection is
            enabled.</para>
            <para>See also setAutoDetectImageFormat().</para>
            <para></para>
            <para>If enabled is true, image format autodetection is enabled;
            otherwise, it is disabled. By default, autodetection is enabled.</para>
            <para>QImageReader uses an extensive approach to detecting the image
            format; firstly, if you pass a file name to QImageReader, it will attempt
            to detect the file extension if the given file name does not point to an
            existing file, by appending supported default extensions to the given file
            name, one at a time. It then uses the following approach to detect the
            image format:</para>
            <para></para>
            <para>Image plugins are queried first, based on either the optional
            format string, or the file name suffix (if the source device is a file). No
            content detection is done at this stage. QImageReader will choose the first
            plugin that supports reading for this format.</para>
            <para>If no plugin supports the image format, Qt's built-in handlers
            are checked based on either the optional format string, or the file name
            suffix.</para>
            <para>If no capable plugins or built-in handlers are found, each plugin
            is tested by inspecting the content of the data stream.</para>
            <para>If no plugins could detect the image format based on data
            contents, each built-in image handler is tested by inspecting the
            contents.</para>
            <para>Finally, if all above approaches fail, QImageReader will report
            failure when trying to read the image.</para>
            <para></para>
            <para>By disabling image format autodetection, QImageReader will only
            query the plugins and built-in handlers based on the format string (i.e.,
            no file name extensions are tested).</para>
            <para>See also autoDetectImageFormat(), QImageIOHandler::canRead(), and
            QImageIOPlugin::capabilities().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.DecideFormatFromContent">
            <summary>
            <para>Returns whether the image reader should decide which plugin to
            use only based on the contents of the datastream rather than on the file
            extension.</para>
            <para>See also setDecideFormatFromContent().</para>
            <para></para>
            <para>If ignored is set to true, then the image reader will ignore
            specified formats or file extensions and decide which plugin to use only
            based on the contents in the datastream.</para>
            <para>Setting this flag means that all image plugins gets loaded. Each
            plugin will read the first bytes in the image data and decide if the plugin
            is compatible or not.</para>
            <para>This also disables auto detecting the image format.</para>
            <para>See also decideFormatFromContent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Device">
            <summary>
            <para>Returns the device currently assigned to QImageReader, or 0 if no
            device has been assigned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets QImageReader's device to device. If a device has already
            been set, the old device is removed from QImageReader and is otherwise left
            unchanged.</para>
            <para>If the device is not already open, QImageReader will attempt to
            open the device in QIODevice::ReadOnly mode by calling open(). Note that
            this does not work for certain devices, such as QProcess, QTcpSocket and
            QUdpSocket, where more logic is required to open the device.</para>
            <para>See also device() and setFileName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.FileName">
            <summary>
            <para>If the currently assigned device is a QFile, or if setFileName()
            has been called, this function returns the name of the file QImageReader
            reads from. Otherwise (i.e., if no device has been assigned or the device
            is not a QFile), an empty QString is returned.</para>
            <para>See also setFileName() and setDevice().</para>
            <para></para>
            <para>Sets the file name of QImageReader to fileName. Internally,
            QImageReader will create a QFile object and open it in QIODevice::ReadOnly
            mode, and use this when reading images.</para>
            <para>If fileName does not include a file extension (e.g., .png or
            .bmp), QImageReader will cycle through all supported extensions until it
            finds a matching file.</para>
            <para>See also fileName(), setDevice(), and
            supportedImageFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.ClipRect">
            <summary>
            <para>Returns the clip rect (also known as the ROI, or Region Of
            Interest) of the image. If no clip rect has been set, an invalid QRect is
            returned.</para>
            <para>See also setClipRect().</para>
            <para></para>
            <para>Sets the image clip rect (also known as the ROI, or Region Of
            Interest) to rect. The coordinates of rect are relative to the
            untransformed image size, as returned by size().</para>
            <para>See also clipRect(), setScaledSize(), and
            setScaledClipRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.ScaledSize">
            <summary>
            <para>Returns the scaled size of the image.</para>
            <para>See also setScaledSize().</para>
            <para></para>
            <para>Sets the scaled size of the image to size. The scaling is
            performed after the initial clip rect, but before the scaled clip rect is
            applied. The algorithm used for scaling depends on the image format. By
            default (i.e., if the image format does not support scaling), QImageReader
            will use QImage::scale() with Qt::SmoothScaling.</para>
            <para>See also scaledSize(), setClipRect(), and
            setScaledClipRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Quality">
            <summary>
            <para>Returns the quality setting of the image format.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setQuality().</para>
            <para></para>
            <para>Sets the quality setting of the image format to quality.</para>
            <para>Some image formats, in particular lossy ones, entail a tradeoff
            between a) visual quality of the resulting image, and b) decoding execution
            time. This function sets the level of that tradeoff for image formats that
            support it.</para>
            <para>In case of scaled image reading, the quality setting may also
            influence the tradeoff level between visual quality and execution speed of
            the scaling algorithm.</para>
            <para>The value range of quality depends on the image format. For
            example, the &quot;jpeg&quot; format supports a quality range from 0 (low
            visual quality) to 100 (high visual quality).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also quality() and setScaledSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.ScaledClipRect">
            <summary>
            <para>Returns the scaled clip rect of the image.</para>
            <para>See also setScaledClipRect().</para>
            <para></para>
            <para>Sets the scaled clip rect to rect. The scaled clip rect is the
            clip rect (also known as ROI, or Region Of Interest) that is applied after
            the image has been scaled.</para>
            <para>See also scaledClipRect() and setScaledSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.BackgroundColor">
            <summary>
            <para>Returns the background color that's used when reading an image.
            If the image format does not support setting the background color an
            invalid color is returned.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setBackgroundColor() and read().</para>
            <para></para>
            <para>Sets the background color to color. Image formats that support
            this operation are expected to initialize the background to color before
            reading an image.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also backgroundColor() and read().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.AutoTransform">
            <summary>
            <para>Returns true if the image handler will apply transformation
            metadata on read().</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setAutoTransform(), transformation(), and read().</para>
            <para></para>
            <para>Sets if images returned by read() should have transformation
            metadata automatically applied.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also autoTransform(), transform(), and read().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Size">
            <summary>
            <para>Returns the size of the image, without actually reading the image
            contents.</para>
            <para>If the image format does not support this feature, this function
            returns an invalid size. Qt's built-in image handlers all support this
            feature, but custom image format plugins are not required to do so.</para>
            <para>See also QImageIOHandler::ImageOption, QImageIOHandler::option(),
            and QImageIOHandler::supportsOption().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.TextKeys">
            <summary>
            <para>Returns the text keys for this image. You can use these keys with
            text() to list the image text for a certain key.</para>
            <para>Support for this option is implemented through
            QImageIOHandler::Description.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also text(), QImageWriter::setText(), and
            QImage::textKeys().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.SupportsAnimation">
            <summary>
            <para>Returns true if the image format supports animation; otherwise,
            false is returned.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QMovie::supportedFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Transformation">
            <summary>
            <para>Returns the transformation metadata of the image, including image
            orientation. If the format does not support transformation metadata
            QImageIOHandler::Transformation_None is returned.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setAutoTransform() and autoTransform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.SubType">
            <summary>
            <para>Returns the subtype of the image.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.LoopCount">
            <summary>
            <para>For image formats that support animation, this function returns
            the number of times the animation should loop. If this function returns -1,
            it can either mean the animation should loop forever, or that an error
            occurred. If an error occurred, canRead() will return false.</para>
            <para>See also supportsAnimation(), QImageIOHandler::loopCount(), and
            canRead().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.ImageCount">
            <summary>
            <para>For image formats that support animation, this function returns
            the total number of images in the animation. If the format does not support
            animation, 0 is returned.</para>
            <para>This function returns -1 if an error occurred.</para>
            <para>See also supportsAnimation(), QImageIOHandler::imageCount(), and
            canRead().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.NextImageDelay">
            <summary>
            <para>For image formats that support animation, this function returns
            the number of milliseconds to wait until displaying the next frame in the
            animation. If the image format doesn't support animation, 0 is
            returned.</para>
            <para>This function returns -1 if an error occurred.</para>
            <para>See also supportsAnimation(), QImageIOHandler::nextImageDelay(),
            and canRead().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.CurrentImageNumber">
            <summary>
            <para>For image formats that support animation, this function returns
            the sequence number of the current frame. If the image format doesn't
            support animation, 0 is returned.</para>
            <para>This function returns -1 if an error occurred.</para>
            <para>See also supportsAnimation(),
            QImageIOHandler::currentImageNumber(), and canRead().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.CurrentImageRect">
            <summary>
            <para>For image formats that support animation, this function returns
            the rect for the current frame. Otherwise, a null rect is returned.</para>
            <para>See also supportsAnimation() and
            QImageIOHandler::currentImageRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.Error">
            <summary>
            <para>Returns the type of error that occurred last.</para>
            <para>See also ImageReaderError and errorString().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageReader.ErrorString">
            <summary>
            <para>Returns a human readable description of the last error that
            occurred.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="T:QtGui.QImageReader.ImageReaderError">
            <summary>
            <para>This enum describes the different types of errors that can occur
            when reading images with QImageReader.</para>
            </summary>
        </member>
        <member name="F:QtGui.QImageReader.ImageReaderError.UnknownError">
            <summary>An unknown error occurred. If you get this value after calling read(), it is most likely caused by a bug in QImageReader.</summary>
        </member>
        <member name="F:QtGui.QImageReader.ImageReaderError.FileNotFoundError">
            <summary>QImageReader was used with a file name, but not file was found with that name. This can also happen if the file name contained no extension, and the file with the correct extension is not supported by Qt.</summary>
        </member>
        <member name="F:QtGui.QImageReader.ImageReaderError.DeviceError">
            <summary>QImageReader encountered a device error when reading the image. You can consult your particular device for more details on what went wrong.</summary>
        </member>
        <member name="F:QtGui.QImageReader.ImageReaderError.UnsupportedFormatError">
            <summary>Qt does not support the requested image format.</summary>
        </member>
        <member name="F:QtGui.QImageReader.ImageReaderError.InvalidDataError">
            <summary>The image data was invalid, and QImageReader was unable to read an image from it. The can happen if the image file is damaged.</summary>
        </member>
        <member name="T:QtGui.QImageWriter">
            <summary>
            <para>The QImageWriter class provides a format independent interface
            for writing images to files or other devices.</para>
            </summary>
            <remarks>
            <para>QImageWriter supports setting format specific options, such as
            the gamma level, compression level and quality, prior to storing the image.
            If you do not need such options, you can use QImage::save() or
            QPixmap::save() instead.</para>
            <para>To store an image, you start by constructing a QImageWriter
            object. Pass either a file name or a device pointer, and the image format
            to QImageWriter's constructor. You can then set several options, such as
            the gamma level (by calling setGamma()) and quality (by calling
            setQuality()). canWrite() returns true if QImageWriter can write the image
            (i.e., the image format is supported and the device is open for writing).
            Call write() to write the image to the device.</para>
            <para>If any error occurs when writing the image, write() will return
            false. You can then call error() to find the type of error that occurred,
            or errorString() to get a human readable description of what went
            wrong.</para>
            <para>Call supportedImageFormats() for a list of formats that
            QImageWriter can write. QImageWriter supports all built-in image formats,
            in addition to any image format plugins that support writing.</para>
            <para></para>
            <para>See also QImageReader, QImageIOHandler, and
            QImageIOPlugin.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QImageWriter.#ctor">
            <summary>
            <para>Constructs an empty QImageWriter object. Before writing, you must
            call setFormat() to set an image format, then setDevice() or
            setFileName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.#ctor(QtCore.QIODevice,QtCore.QByteArray)">
            <summary>
            <para>Constructs a QImageWriter object using the device device and
            image format format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.#ctor(System.String,QtCore.QByteArray)">
            <summary>
            <para>Constructs a QImageWriter objects that will write to a file with
            the name fileName, using the image format format. If format is not
            provided, QImageWriter will detect the image format by inspecting the
            extension of fileName.</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.SetText(System.String,System.String)">
            <summary>
            <para>Sets the image text associated with the key key to text. This is
            useful for storing copyright information or other information about the
            image. Example:</para>
            <para>QImage image(&quot;some/image.jpeg&quot;);</para>
            <para>QImageWriter writer(&quot;images/outimage.png&quot;,
            &quot;png&quot;);</para>
            <para>writer.setText(&quot;Author&quot;, &quot;John
            Smith&quot;);</para>
            <para>writer.write(image);</para>
            <para>If you want to store a single block of data (e.g., a comment),
            you can pass an empty key, or use a generic key like
            &quot;Description&quot;.</para>
            <para>The key and text will be embedded into the image data after
            calling write().</para>
            <para>Support for this option is implemented through
            QImageIOHandler::Description.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also QImage::setText() and QImageReader::text().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.CanWrite">
            <summary>
            <para>Returns true if QImageWriter can write the image; i.e., the image
            format is supported and the assigned device is open for reading.</para>
            <para>See also write(), setDevice(), and setFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.Write(QtGui.QImage)">
            <summary>
            <para>Writes the image image to the assigned device or file name.
            Returns true on success; otherwise returns false. If the operation fails,
            you can call error() to find the type of error that occurred, or
            errorString() to get a human readable description of the error.</para>
            <para>See also canWrite(), error(), and errorString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QImageWriter.SupportsOption(QtGui.QImageIOHandler.ImageOption)">
            <summary>
            <para>Returns true if the writer supports option; otherwise returns
            false.</para>
            <para>Different image formats support different options. Call this
            function to determine whether a certain option is supported by the current
            format. For example, the PNG format allows you to embed text into the
            image's metadata (see text()).</para>
            <para>QImageWriter writer(fileName);</para>
            <para>if (writer.supportsOption(QImageIOHandler::Description))</para>
            <para>    writer.setText(&quot;Author&quot;, &quot;John
            Smith&quot;);</para>
            <para>Options can be tested after the writer has been associated with a
            format.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also QImageReader::supportsOption() and setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Format">
            <summary>
            <para>Returns the format QImageWriter uses for writing images.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format QImageWriter will use when writing images, to
            format. format is a case insensitive text string. Example:</para>
            <para>QImageWriter writer;</para>
            <para>writer.setFormat(&quot;png&quot;); // same as
            writer.setFormat(&quot;PNG&quot;);</para>
            <para>You can call supportedImageFormats() for the full list of formats
            QImageWriter supports.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Device">
            <summary>
            <para>Returns the device currently assigned to QImageWriter, or 0 if no
            device has been assigned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets QImageWriter's device to device. If a device has already
            been set, the old device is removed from QImageWriter and is otherwise left
            unchanged.</para>
            <para>If the device is not already open, QImageWriter will attempt to
            open the device in QIODevice::WriteOnly mode by calling open(). Note that
            this does not work for certain devices, such as QProcess, QTcpSocket and
            QUdpSocket, where more logic is required to open the device.</para>
            <para>See also device() and setFileName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.FileName">
            <summary>
            <para>If the currently assigned device is a QFile, or if setFileName()
            has been called, this function returns the name of the file QImageWriter
            writes to. Otherwise (i.e., if no device has been assigned or the device is
            not a QFile), an empty QString is returned.</para>
            <para>See also setFileName() and setDevice().</para>
            <para></para>
            <para>Sets the file name of QImageWriter to fileName. Internally,
            QImageWriter will create a QFile and open it in QIODevice::WriteOnly mode,
            and use this file when writing images.</para>
            <para>See also fileName() and setDevice().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Quality">
            <summary>
            <para>Returns the quality setting of the image format.</para>
            <para>See also setQuality().</para>
            <para></para>
            <para>Sets the quality setting of the image format to quality.</para>
            <para>Some image formats, in particular lossy ones, entail a tradeoff
            between a) visual quality of the resulting image, and b) encoding execution
            time and compression level. This function sets the level of that tradeoff
            for image formats that support it. For other formats, this value is
            ignored.</para>
            <para>The value range of quality depends on the image format. For
            example, the &quot;jpeg&quot; format supports a quality range from 0 (low
            visual quality, high compression) to 100 (high visual quality, low
            compression).</para>
            <para>See also quality().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Compression">
            <summary>
            <para>Returns the compression of the image.</para>
            <para>See also setCompression().</para>
            <para></para>
            <para>This is an image format specific function that set the
            compression of an image. For image formats that do not support setting the
            compression, this value is ignored.</para>
            <para>The value range of compression depends on the image format. For
            example, the &quot;tiff&quot; format supports two values, 0(no compression)
            and 1(LZW-compression).</para>
            <para>See also compression().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Gamma">
            <summary>
            <para>Returns the gamma level of the image.</para>
            <para>See also setGamma().</para>
            <para></para>
            <para>This is an image format specific function that sets the gamma
            level of the image to gamma. For image formats that do not support setting
            the gamma level, this value is ignored.</para>
            <para>The value range of gamma depends on the image format. For
            example, the &quot;png&quot; format supports a gamma range from 0.0 to
            1.0.</para>
            <para>See also gamma() and quality().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.SubType">
            <summary>
            <para>Returns the subtype of the image.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also setSubType().</para>
            <para></para>
            <para>This is an image format specific function that sets the subtype
            of the image to type. Subtype can be used by a handler to determine which
            format it should use while saving the image.</para>
            <para>For example, saving an image in DDS format with A8R8G8R8
            subtype:</para>
            <para>QImageWriter writer(&quot;some/image.dds&quot;);</para>
            <para>if (writer.supportsOption(QImageIOHandler::SubType))</para>
            <para>    writer.setSubType(&quot;A8R8G8B8&quot;);</para>
            <para>writer.write(image);</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also subType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.OptimizedWrite">
            <summary>
            <para>Returns whether optimization has been turned on for writing the
            image.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setOptimizedWrite().</para>
            <para></para>
            <para>This is an image format-specific function which sets the optimize
            flags when writing images. For image formats that do not support setting an
            optimize flag, this value is ignored.</para>
            <para>The default is false.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also optimizedWrite().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.ProgressiveScanWrite">
            <summary>
            <para>Returns whether the image should be written as a progressive
            image.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setProgressiveScanWrite().</para>
            <para></para>
            <para>This is an image format-specific function which turns on
            progressive scanning when writing images. For image formats that do not
            support setting a progressive scan flag, this value is ignored.</para>
            <para>The default is false.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also progressiveScanWrite().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Transformation">
            <summary>
            <para>Returns the transformation and orientation the image has been set
            to written with.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setTransformation().</para>
            <para></para>
            <para>Sets the image transformations metadata including
            orientation.</para>
            <para>If transformation metadata is not supported by the image format,
            the transform is applied before writing.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also transformation() and write().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Description">
            <summary>
            <para>Use QImageReader::text() instead.</para>
            <para>Returns the description of the image.</para>
            <para>See also setDescription().</para>
            <para></para>
            <para>Use setText() instead.</para>
            <para>This is an image format specific function that sets the
            description of the image to description. For image formats that do not
            support setting the description, this value is ignored.</para>
            <para>The contents of description depends on the image format.</para>
            <para>See also description().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.Error">
            <summary>
            <para>Returns the type of error that last occurred.</para>
            <para>See also ImageWriterError and errorString().</para>
            </summary>
        </member>
        <member name="P:QtGui.QImageWriter.ErrorString">
            <summary>
            <para>Returns a human readable description of the last error that
            occurred.</para>
            <para>See also error().</para>
            </summary>
        </member>
        <member name="T:QtGui.QImageWriter.ImageWriterError">
            <summary>
            <para>This enum describes errors that can occur when writing images
            with QImageWriter.</para>
            </summary>
        </member>
        <member name="F:QtGui.QImageWriter.ImageWriterError.UnknownError">
            <summary>An unknown error occurred. If you get this value after calling write(), it is most likely caused by a bug in QImageWriter.</summary>
        </member>
        <member name="F:QtGui.QImageWriter.ImageWriterError.DeviceError">
            <summary>QImageWriter encountered a device error when writing the image data. Consult your device for more details on what went wrong.</summary>
        </member>
        <member name="F:QtGui.QImageWriter.ImageWriterError.UnsupportedFormatError">
            <summary>Qt does not support the requested image format.</summary>
        </member>
        <member name="T:QtGui.QMovie">
            <summary>
            <para>The QMovie class is a convenience class for playing movies with
            QImageReader.</para>
            </summary>
            <remarks>
            <para>This class is used to show simple animations without sound. If
            you want to display video and media content, use the Qt Multimedia
            multimedia framework instead.</para>
            <para>First, create a QMovie object by passing either the name of a
            file or a pointer to a QIODevice containing an animated image format to
            QMovie's constructor. You can call isValid() to check if the image data is
            valid, before starting the movie. To start the movie, call start(). QMovie
            will enter Running state, and emit started() and stateChanged(). To get the
            current state of the movie, call state().</para>
            <para>To display the movie in your application, you can pass your
            QMovie object to QLabel::setMovie(). Example:</para>
            <para>QLabel label;</para>
            <para>QMovie *movie = new
            QMovie(&quot;animations/fire.gif&quot;);</para>
            <para></para>
            <para>label.setMovie(movie);</para>
            <para>movie-&gt;start();</para>
            <para>Whenever a new frame is available in the movie, QMovie will emit
            updated(). If the size of the frame changes, resized() is emitted. You can
            call currentImage() or currentPixmap() to get a copy of the current frame.
            When the movie is done, QMovie emits finished(). If any error occurs during
            playback (i.e, the image file is corrupt), QMovie will emit error().</para>
            <para>You can control the speed of the movie playback by calling
            setSpeed(), which takes the percentage of the original speed as an
            argument. Pause the movie by calling setPaused(true). QMovie will then
            enter Paused state and emit stateChanged(). If you call setPaused(false),
            QMovie will reenter Running state and start the movie again. To stop the
            movie, call stop().</para>
            <para>Certain animation formats allow you to set the background color.
            You can call setBackgroundColor() to set the color, or backgroundColor() to
            retrieve the current background color.</para>
            <para>currentFrameNumber() returns the sequence number of the current
            frame. The first frame in the animation has the sequence number 0.
            frameCount() returns the total number of frames in the animation, if the
            image format supports this. You can call loopCount() to get the number of
            times the movie should loop before finishing. nextFrameDelay() returns the
            number of milliseconds the current frame should be displayed.</para>
            <para>QMovie can be instructed to cache frames of an animation by
            calling setCacheMode().</para>
            <para>Call supportedFormats() for a list of formats that QMovie
            supports.</para>
            <para></para>
            <para>See also QLabel, QImageReader, and Movie Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QMovie.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QMovie object, passing the parent object to
            QObject's constructor.</para>
            <para>See also setFileName(), setDevice(), and setFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.#ctor(QtCore.QIODevice,QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Constructs a QMovie object. QMovie will use read image data from
            device, which it assumes is open and readable. If format is not empty,
            QMovie will use the image format format for decoding the image data.
            Otherwise, QMovie will attempt to guess the format.</para>
            <para>The parent object is passed to QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.#ctor(System.String,QtCore.QByteArray,QtCore.QObject)">
            <summary>
            <para>Constructs a QMovie object. QMovie will use read image data from
            fileName. If format is not empty, QMovie will use the image format format
            for decoding the image data. Otherwise, QMovie will attempt to guess the
            format.</para>
            <para>The parent object is passed to QObject's constructor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.JumpToFrame(System.Int32)">
            <summary>
            <para>Jumps to frame number frameNumber. Returns true on success;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.Start">
            <summary>
            <para>Starts the movie. QMovie will enter Running state, and start
            emitting updated() and resized() as the movie progresses.</para>
            <para>If QMovie is in the Paused state, this function is equivalent to
            calling setPaused(false). If QMovie is already in the Running state, this
            function does nothing.</para>
            <para>See also stop() and setPaused().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.JumpToNextFrame">
            <summary>
            <para>Jumps to the next frame. Returns true on success; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.SetPaused(System.Boolean)">
            <summary>
            <para>If paused is true, QMovie will enter Paused state and emit
            stateChanged(Paused); otherwise it will enter Running state and emit
            stateChanged(Running).</para>
            <para>See also state().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMovie.Stop">
            <summary>
            <para>Stops the movie. QMovie enters NotRunning state, and stops
            emitting updated() and resized(). If start() is called again, the movie
            will restart from the beginning.</para>
            <para>If QMovie is already in the NotRunning state, this function does
            nothing.</para>
            <para>See also start() and setPaused().</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.Started">
            <summary>
            <para>This signal is emitted after QMovie::start() has been called, and QMovie has entered QMovie::Running state.</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.Resized">
            <summary>
            <para>This signal is emitted when the current frame has been resized to size. This effect is sometimes used in animations as an alternative to replacing the frame. You can call currentImage() or currentPixmap() to get a copy of the updated frame.</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.Updated">
            <summary>
            <para>This signal is emitted when the rect rect in the current frame has been updated. You can call currentImage() or currentPixmap() to get a copy of the updated frame.</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.StateChanged">
            <summary>
            <para>This signal is emitted every time the state of the movie changes. The new state is specified by state.</para>
            <para>See also QMovie::state().</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.Error">
            <summary>
            <para>This signal is emitted by QMovie when the error error occurred during playback. QMovie will stop the movie, and enter QMovie::NotRunning state.</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.Finished">
            <summary>
            <para>This signal is emitted when the movie has finished.</para>
            <para>See also QMovie::stop().</para>
            </summary>
        </member>
        <member name="E:QtGui.QMovie.FrameChanged">
            <summary>
            <para>This signal is emitted when the frame number has changed to frameNumber. You can call currentImage() or currentPixmap() to get a copy of the frame.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.Device">
            <summary>
            <para>Returns the device QMovie reads image data from. If no device has
            currently been assigned, 0 is returned.</para>
            <para>See also setDevice() and fileName().</para>
            <para></para>
            <para>Sets the current device to device. QMovie will read image data
            from this device when the movie is running.</para>
            <para>See also device() and setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.FileName">
            <summary>
            <para>Returns the name of the file that QMovie reads image data from.
            If no file name has been assigned, or if the assigned device is not a file,
            an empty QString is returned.</para>
            <para>See also setFileName() and device().</para>
            <para></para>
            <para>Sets the name of the file that QMovie reads image data from, to
            fileName.</para>
            <para>See also fileName(), setDevice(), and setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.Format">
            <summary>
            <para>Returns the format that QMovie uses when decoding image data. If
            no format has been assigned, an empty QByteArray() is returned.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format that QMovie will use when decoding image data, to
            format. By default, QMovie will attempt to guess the format of the image
            data.</para>
            <para>You can call supportedFormats() for the full list of formats
            QMovie supports.</para>
            <para>See also format() and
            QImageReader::supportedImageFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.BackgroundColor">
            <summary>
            <para>Returns the background color of the movie. If no background color
            has been assigned, an invalid QColor is returned.</para>
            <para>See also setBackgroundColor().</para>
            <para></para>
            <para>For image formats that support it, this function sets the
            background color to color.</para>
            <para>See also backgroundColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.ScaledSize">
            <summary>
            <para>Returns the scaled size of frames.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setScaledSize() and QImageReader::scaledSize().</para>
            <para></para>
            <para>Sets the scaled frame size to size.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also scaledSize() and QImageReader::setScaledSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.cacheMode">
            <summary>
            <para>This property holds the movie's cache mode.</para>
            <para>Caching frames can be useful when the underlying animation format
            handler that QMovie relies on to decode the animation data does not support
            jumping to particular frames in the animation, or even
            &quot;rewinding&quot; the animation to the beginning (for looping).
            Furthermore, if the image data comes from a sequential device, it is not
            possible for the underlying animation handler to seek back to frames whose
            data has already been read (making looping altogether impossible).</para>
            <para>To aid in such situations, a QMovie object can be instructed to
            cache the frames, at the added memory cost of keeping the frames in memory
            for the lifetime of the object.</para>
            <para>By default, this property is set to CacheNone.</para>
            <para>See also QMovie::CacheMode.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.Speed">
            <summary>
            <para>This property holds the movie's speed.</para>
            <para>The speed is measured in percentage of the original movie speed.
            The default speed is 100%. Example:</para>
            <para>QMovie movie(&quot;racecar.gif&quot;);</para>
            <para>movie.setSpeed(200); // 2x speed</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.State">
            <summary>
            <para>Returns the current state of QMovie.</para>
            <para>See also MovieState and stateChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.FrameRect">
            <summary>
            <para>Returns the rect of the last frame. If no frame has yet been
            updated, an invalid QRect is returned.</para>
            <para>See also currentImage() and currentPixmap().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.CurrentImage">
            <summary>
            <para>Returns the current frame as a QImage.</para>
            <para>See also currentPixmap() and updated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.CurrentPixmap">
            <summary>
            <para>Returns the current frame as a QPixmap.</para>
            <para>See also currentImage() and updated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.IsValid">
            <summary>
            <para>Returns true if the movie is valid (e.g., the image data is
            readable and the image format is supported); otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.LoopCount">
            <summary>
            <para>Returns the number of times the movie will loop before it
            finishes. If the movie will only play once (no looping), loopCount returns
            0. If the movie loops forever, loopCount returns -1.</para>
            <para>Note that, if the image data comes from a sequential device (e.g.
            a socket), QMovie can only loop the movie if the cacheMode is set to
            QMovie::CacheAll.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.FrameCount">
            <summary>
            <para>Returns the number of frames in the movie.</para>
            <para>Certain animation formats do not support this feature, in which
            case 0 is returned.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.NextFrameDelay">
            <summary>
            <para>Returns the number of milliseconds QMovie will wait before
            updating the next frame in the animation.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMovie.CurrentFrameNumber">
            <summary>
            <para>Returns the sequence number of the current frame. The number of
            the first frame in the movie is 0.</para>
            </summary>
        </member>
        <member name="T:QtGui.QMovie.MovieState">
            <summary>
            <para>This enum describes the different states of QMovie.</para>
            </summary>
        </member>
        <member name="F:QtGui.QMovie.MovieState.NotRunning">
            <summary>The movie is not running. This is QMovie's initial state, and the state it enters after stop() has been called or the movie is finished.</summary>
        </member>
        <member name="F:QtGui.QMovie.MovieState.Paused">
            <summary>The movie is paused, and QMovie stops emitting updated() or resized(). This state is entered after calling pause() or setPaused(true). The current frame number it kept, and the movie will continue with the next frame when unpause() or setPaused(false) is called.</summary>
        </member>
        <member name="F:QtGui.QMovie.MovieState.Running">
            <summary>The movie is running.</summary>
        </member>
        <member name="T:QtGui.QMovie.CacheMode">
            <summary>
            <para>This enum describes the different cache modes of QMovie.</para>
            </summary>
        </member>
        <member name="F:QtGui.QMovie.CacheMode.CacheNone">
            <summary>No frames are cached (the default).</summary>
        </member>
        <member name="F:QtGui.QMovie.CacheMode.CacheAll">
            <summary>All frames are cached.</summary>
        </member>
        <member name="T:QtGui.QPicture">
            <summary>
            <para>The QPicture class is a paint device that records and replays
            QPainter commands.</para>
            </summary>
            <remarks>
            <para>A picture serializes painter commands to an IO device in a
            platform-independent format. They are sometimes referred to as
            meta-files.</para>
            <para>Qt pictures use a proprietary binary format. Unlike native
            picture (meta-file) formats on many window systems, Qt pictures have no
            limitations regarding their contents. Everything that can be painted on a
            widget or pixmap (e.g., fonts, pixmaps, regions, transformed graphics,
            etc.) can also be stored in a picture.</para>
            <para>QPicture is resolution independent, i.e. a QPicture can be
            displayed on different devices (for example svg, pdf, ps, printer and
            screen) looking the same. This is, for instance, needed for WYSIWYG print
            preview. QPicture runs in the default system dpi, and scales the painter to
            match differences in resolution depending on the window system.</para>
            <para>Example of how to record a picture:</para>
            <para>        QPicture picture;</para>
            <para>        QPainter painter;</para>
            <para>        painter.begin(&amp;picture);           // paint in
            picture</para>
            <para>        painter.drawEllipse(10,20, 80,70); // draw an
            ellipse</para>
            <para>        painter.end();                     // painting
            done</para>
            <para>        picture.save(&quot;drawing.pic&quot;);       // save
            picture</para>
            <para>Note that the list of painter commands is reset on each call to
            the QPainter::begin() function.</para>
            <para>Example of how to replay a picture:</para>
            <para>        QPicture picture;</para>
            <para>        picture.load(&quot;drawing.pic&quot;);           // load
            picture</para>
            <para>        QPainter painter;</para>
            <para>        painter.begin(&amp;myImage);               // paint in
            myImage</para>
            <para>        painter.drawPicture(0, 0, picture);    // draw the
            picture at (0,0)</para>
            <para>        painter.end();                         // painting
            done</para>
            <para>Pictures can also be drawn using play(). Some basic data about a
            picture is available, for example, size(), isNull() and
            boundingRect().</para>
            <para></para>
            <para>See also QMovie.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPicture.#ctor(System.Int32)">
            <summary>
            <para>Constructs an empty picture.</para>
            <para>The formatVersion parameter may be used to create a QPicture that
            can be read by applications that are compiled with earlier versions of
            Qt.</para>
            <para>Note that the default formatVersion is -1 which signifies the
            current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the
            default formatVersion of -1.</para>
            <para>Reading pictures generated by earlier versions of Qt is not
            supported in Qt 4.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.SetData(System.String,System.UInt32)">
            <summary>
            <para>Sets the picture data directly from data and size. This function
            copies the input data.</para>
            <para>See also data() and size().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Play(QtGui.QPainter)">
            <summary>
            <para>Replays the picture using painter, and returns true if
            successful; otherwise returns false.</para>
            <para>This function does exactly the same as QPainter::drawPicture()
            with (x, y) = (0, 0).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Load(QtCore.QIODevice,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>dev is the device to use for loading.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Load(System.String,System.String)">
            <summary>
            <para>Loads a picture from the file specified by fileName and returns
            true if successful; otherwise invalidates the picture and returns
            false.</para>
            <para>Please note that the format parameter has been deprecated and
            will have no effect.</para>
            <para>See also save().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Save(QtCore.QIODevice,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>dev is the device to use for saving.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Save(System.String,System.String)">
            <summary>
            <para>Saves a picture to the file specified by fileName and returns
            true if successful; otherwise returns false.</para>
            <para>Please note that the format parameter has been deprecated and
            will have no effect.</para>
            <para>See also load().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.Swap(QtGui.QPicture)">
            <summary>
            <para>Swaps picture other with this picture. This operation is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPicture.PictureFormat(System.String)">
            <summary>
            <para>Returns a string that specifies the picture format of the file
            fileName, or 0 if the file cannot be read or if the format is not
            recognized.</para>
            <para>See also load() and save().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.BoundingRect">
            <summary>
            <para>Returns the picture's bounding rectangle or an invalid rectangle
            if the picture contains no data.</para>
            <para>See also setBoundingRect().</para>
            <para></para>
            <para>Sets the picture's bounding rectangle to r. The automatically
            calculated value is overridden.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.Data">
            <summary>
            <para>Returns a pointer to the picture data. The pointer is only valid
            until the next non-const function is called on this picture. The returned
            pointer is 0 if the picture contains no data.</para>
            <para>See also setData(), size(), and isNull().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.IsNull">
            <summary>
            <para>Returns true if the picture contains no data; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.Size">
            <summary>
            <para>Returns the size of the picture data.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.InputFormatList">
            <summary>
            <para>Returns a list of picture formats that are supported for picture
            input.</para>
            <para>Note that if you want to iterate over the list, you should
            iterate over a copy, e.g.</para>
            <para>        QStringList list = QPicture::inputFormatList();</para>
            <para>        foreach (const QString &amp;string, list)</para>
            <para>            myProcessing(string);</para>
            <para>See also outputFormatList(), inputFormats(), and
            QPictureIO.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPicture.OutputFormatList">
            <summary>
            <para>Returns a list of picture formats that are supported for picture
            output.</para>
            <para>Note that if you want to iterate over the list, you should
            iterate over a copy, e.g.</para>
            <para>        QStringList list = QPicture::outputFormatList();</para>
            <para>        foreach (const QString &amp;string, list)</para>
            <para>            myProcessing(string);</para>
            <para>See also inputFormatList(), outputFormats(), and
            QPictureIO.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPictureIO">
            <summary>
            <para>The QPictureIO class contains parameters for loading and saving
            pictures.</para>
            </summary>
            <remarks>
            <para>QPictureIO contains a QIODevice object that is used for picture
            data I/O. The programmer can install new picture file formats in addition
            to those that Qt provides.</para>
            <para>You don't normally need to use this class; QPicture::load(),
            QPicture::save().</para>
            <para></para>
            <para>See also QPicture, QPixmap, and QFile.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPictureIO.#ctor">
            <summary>
            <para>Constructs a QPictureIO object with all parameters set to
            zero.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.#ctor(QtCore.QIODevice,System.String)">
            <summary>
            <para>Constructs a QPictureIO object with the I/O device ioDevice and a
            format tag.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.#ctor(System.String,System.String)">
            <summary>
            <para>Constructs a QPictureIO object with the file name fileName and a
            format tag.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.SetIODevice(QtCore.QIODevice)">
            <summary>
            <para>Sets the IO device to be used for reading or writing an
            picture.</para>
            <para>Setting the IO device allows pictures to be read/written to any
            block-oriented QIODevice.</para>
            <para>If ioDevice is not null, this IO device will override file name
            settings.</para>
            <para>See also setFileName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.Read">
            <summary>
            <para>Reads an picture into memory and returns true if the picture was
            successfully read; otherwise returns false.</para>
            <para>Before reading an picture you must set an IO device or a file
            name. If both an IO device and a file name have been set, the IO device
            will be used.</para>
            <para>Setting the picture file format string is optional.</para>
            <para>Note that this function does not set the format used to read the
            picture. If you need that information, use the pictureFormat() static
            functions.</para>
            <para>Example:</para>
            <para>        QPictureIO iio;</para>
            <para>        QPixmap  pixmap;</para>
            <para>        iio.setFileName(&quot;vegeburger.pic&quot;);</para>
            <para>        if (iio.read()) {        // OK</para>
            <para>            QPicture picture = iio.picture();</para>
            <para>            QPainter painter(&amp;pixmap);</para>
            <para>            painter.drawPicture(0, 0, picture);</para>
            <para>        }</para>
            <para>See also setIODevice(), setFileName(), setFormat(), write(), and
            QPixmap::load().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.Write">
            <summary>
            <para>Writes an picture to an IO device and returns true if the picture
            was successfully written; otherwise returns false.</para>
            <para>Before writing an picture you must set an IO device or a file
            name. If both an IO device and a file name have been set, the IO device
            will be used.</para>
            <para>The picture will be written using the specified picture
            format.</para>
            <para>Example:</para>
            <para>        QPictureIO iio;</para>
            <para>        QPicture   picture;</para>
            <para>        QPainter painter(&amp;picture);</para>
            <para>        painter.drawPixmap(0, 0, pixmap);</para>
            <para>        iio.setPicture(picture);</para>
            <para>        iio.setFileName(&quot;vegeburger.pic&quot;);</para>
            <para>        iio.setFormat(&quot;PIC&quot;);</para>
            <para>        if (iio.write())</para>
            <para>            return true; // returned true if written
            successfully</para>
            <para>See also setIODevice(), setFileName(), setFormat(), read(), and
            QPixmap::save().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.PictureFormat(System.String)">
            <summary>
            <para>Returns a string that specifies the picture format of the file
            fileName, or null if the file cannot be read or if the format is not
            recognized.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.PictureFormat(QtCore.QIODevice)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a string that specifies the picture format of the picture
            read from IO device d, or 0 if the device cannot be read or if the format
            is not recognized.</para>
            <para>Make sure that d is at the right position in the device (for
            example, at the beginning of the file).</para>
            <para>See also QIODevice::pos().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureIO.DefineIOHandler(System.String,System.String,System.String,QtGui.Picture_io_handler,QtGui.Picture_io_handler)">
            <summary>
            <para>Defines a picture I/O handler for the picture format called
            format, which is recognized using the regular expression defined in header,
            read using readPicture and written using writePicture.</para>
            <para>flags is a string of single-character flags for this format. The
            only flag defined currently is T (upper case), so the only legal value for
            flags are &quot;T&quot; and the empty string. The &quot;T&quot; flag means
            that the picture file is a text file, and Qt should treat all newline
            conventions as equivalent. (XPM files and some PPM files are text files for
            example.)</para>
            <para>format is used to select a handler to write a QPicture; header is
            used to select a handler to read an picture file.</para>
            <para>If readPicture is a null pointer, the QPictureIO will not be able
            to read pictures in format. If writePicture is a null pointer, the
            QPictureIO will not be able to write pictures in format. If both are null,
            the QPictureIO object is valid but useless.</para>
            <para>Example:</para>
            <para>void readSVG(QPictureIO *picture)</para>
            <para>{</para>
            <para>    // read the picture using the picture-&gt;ioDevice()</para>
            <para>}</para>
            <para></para>
            <para>void writeSVG(QPictureIO *picture)</para>
            <para>{</para>
            <para>    // write the picture using the picture-&gt;ioDevice()</para>
            <para>}</para>
            <para></para>
            <para>    // add the SVG picture handler</para>
            <para>    // ...</para>
            <para>Before the regular expression test, all the 0 bytes in the file
            header are converted to 1 bytes. This is done because when Qt was
            ASCII-based, QRegExp could not handle 0 bytes in strings.</para>
            <para>The regexp is only applied on the first 14 bytes of the
            file.</para>
            <para>(Note that if one handlerIO supports writing a format and another
            supports reading it, Qt supports both reading and writing. If two handlers
            support the same operation, Qt chooses one arbitrarily.)</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Picture">
            <summary>
            <para>Returns the picture currently set.</para>
            <para>See also setPicture().</para>
            <para></para>
            <para>Sets the picture to picture.</para>
            <para>See also picture().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Status">
            <summary>
            <para>Returns the picture's IO status. A non-zero value indicates an
            error, whereas 0 means that the IO operation was successful.</para>
            <para>See also setStatus().</para>
            <para></para>
            <para>Sets the picture IO status to status. A non-zero value indicates
            an error, whereas 0 means that the IO operation was successful.</para>
            <para>See also status().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Format">
            <summary>
            <para>Returns the picture format string or 0 if no format has been
            explicitly set.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the picture format to format for the picture to be read or
            written.</para>
            <para>It is necessary to specify a format before writing an picture,
            but it is not necessary to specify a format before reading an
            picture.</para>
            <para>If no format has been set, Qt guesses the picture format before
            reading it. If a format is set the picture will only be read if it has that
            format.</para>
            <para>See also read(), write(), and format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.FileName">
            <summary>
            <para>Returns the file name currently set.</para>
            <para>See also setFileName().</para>
            <para></para>
            <para>Sets the name of the file to read or write an picture from to
            fileName.</para>
            <para>See also fileName() and setIODevice().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Quality">
            <summary>
            <para>Returns the quality of the written picture, related to the
            compression ratio.</para>
            <para>See also setQuality() and QPicture::save().</para>
            <para></para>
            <para>Sets the quality of the written picture to q, related to the
            compression ratio.</para>
            <para>q must be in the range -1..100. Specify 0 to obtain small
            compressed files, 100 for large uncompressed files. (-1 signifies the
            default compression.)</para>
            <para>See also quality() and QPicture::save().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Description">
            <summary>
            <para>Returns the picture description string.</para>
            <para>See also setDescription().</para>
            <para></para>
            <para>Sets the picture description string for picture handlers that
            support picture descriptions to description.</para>
            <para>Currently, no picture format supported by Qt uses the description
            string.</para>
            <para>See also description().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Parameters">
            <summary>
            <para>Returns the picture's parameters string.</para>
            <para>See also setParameters().</para>
            <para></para>
            <para>Sets the picture's parameter string to parameters. This is for
            picture handlers that require special parameters.</para>
            <para>Although the current picture formats supported by Qt ignore the
            parameters string, it may be used in future extensions or by contributions
            (for example, JPEG).</para>
            <para>See also parameters().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.Gamma">
            <summary>
            <para>Returns the gamma value at which the picture will be
            viewed.</para>
            <para>See also setGamma().</para>
            <para></para>
            <para>Sets the gamma value at which the picture will be viewed to
            gamma. If the picture format stores a gamma value for which the picture is
            intended to be used, then this setting will be used to modify the picture.
            Setting to 0.0 will disable gamma correction (i.e. any specification in the
            file will be ignored).</para>
            <para>The default value is 0.0.</para>
            <para>See also gamma().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPictureIO.IoDevice">
            <summary>
            <para>Returns the IO device currently set.</para>
            <para>See also setIODevice().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPictureFormatPlugin">
            <summary>
            <para>The QPictureFormatPlugin class provides an abstract base for
            custom picture format plugins.</para>
            </summary>
            <remarks>
            <para>The picture format plugin is a simple plugin interface that makes
            it easy to create custom picture formats that can be used transparently by
            applications.</para>
            <para>Writing an picture format plugin is achieved by subclassing this
            base class, reimplementing the pure virtual functions loadPicture(),
            savePicture(), and installIOHandler(), and exporting the class with the
            Q_PLUGIN_METADATA() macro.</para>
            <para>The json file containing the metadata should contain one entry
            with the list of picture formats supported by the plugin:</para>
            <para>{ &quot;Keys&quot;: [ &quot;mypictureformat&quot; ] }</para>
            <para></para>
            <para>See also How to Create Qt Plugins.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPictureFormatPlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an picture format plugin with the given parent. This
            is invoked automatically by the moc generated code that exports the
            plugin.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureFormatPlugin.LoadPicture(System.String,System.String,QtGui.QPicture)">
            <summary>
            <para>Loads the picture stored in the file called fileName, with the
            given format, into *picture. Returns true on success; otherwise returns
            false.</para>
            <para>See also savePicture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureFormatPlugin.SavePicture(System.String,System.String,QtGui.QPicture)">
            <summary>
            <para>Saves the given picture into the file called fileName, using the
            specified format. Returns true on success; otherwise returns false.</para>
            <para>See also loadPicture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPictureFormatPlugin.InstallIOHandler(System.String)">
            <summary>
            <para>Installs a QPictureIO picture I/O handler for the picture format
            format. Returns true on success.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixmapCache">
            <summary>
            <para>The QPixmapCache class provides an application-wide cache for
            pixmaps.</para>
            </summary>
            <remarks>
            <para>This class is a tool for optimized drawing with QPixmap. You can
            use it to store temporary pixmaps that are expensive to generate without
            using more storage space than cacheLimit(). Use insert() to insert pixmaps,
            find() to find them, and clear() to empty the cache.</para>
            <para>QPixmapCache contains no member data, only static functions to
            access the global pixmap cache. It creates an internal QCache object for
            caching the pixmaps.</para>
            <para>The cache associates a pixmap with a user-provided string as a
            key, or with a QPixmapCache::Key that the cache generates. Using
            QPixmapCache::Key for keys is faster than using strings. The string API is
            very convenient for complex keys but the QPixmapCache::Key API will be very
            efficient and convenient for a one-to-one object-to-pixmap mapping - in
            this case, you can store the keys as members of an object.</para>
            <para>If two pixmaps are inserted into the cache using equal keys then
            the last pixmap will replace the first pixmap in the cache. This follows
            the behavior of the QHash and QCache classes.</para>
            <para>The cache becomes full when the total size of all pixmaps in the
            cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
            you can change this by calling setCacheLimit() with the required value. A
            pixmap takes roughly (width * height * depth)/8 bytes of memory.</para>
            <para>The Qt Quarterly article Optimizing with QPixmapCache explains
            how to use QPixmapCache to speed up applications by caching the results of
            painting.</para>
            <para></para>
            <para>See also QCache and QPixmap.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPixmapCache.Find(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the pixmap associated with the key in the cache, or null
            if there is no such pixmap.</para>
            <para>Warning: If valid, you should copy the pixmap immediately (this
            is fast). Subsequent insertions into the cache could cause the pointer to
            become invalid. For this reason, we recommend you use bool find(const
            QString&amp;, QPixmap*) instead.</para>
            <para>Example:</para>
            <para>QPixmap* pp;</para>
            <para>QPixmap p;</para>
            <para>if ((pp=QPixmapCache::find(&quot;my_big_image&quot;, pm)))
            {</para>
            <para>    p = *pp;</para>
            <para>} else {</para>
            <para>    p.load(&quot;bigimage.png&quot;);</para>
            <para>    QPixmapCache::insert(&quot;my_big_image&quot;, new
            QPixmap(p));</para>
            <para>}</para>
            <para>painter-&gt;drawPixmap(0, 0, p);</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Find(System.String,QtGui.QPixmap)">
            <summary>
            <para>Use bool find(const QString&amp;, QPixmap*) instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Find1(System.String,QtGui.QPixmap)">
            <summary>
            <para>Looks for a cached pixmap associated with the given key in the
            cache. If the pixmap is found, the function sets pixmap to that pixmap and
            returns true; otherwise it leaves pixmap alone and returns false.</para>
            <para>Example:</para>
            <para>QPixmap pm;</para>
            <para>if (!QPixmapCache::find(&quot;my_big_image&quot;, &amp;pm))
            {</para>
            <para>    pm.load(&quot;bigimage.png&quot;);</para>
            <para>    QPixmapCache::insert(&quot;my_big_image&quot;, pm);</para>
            <para>}</para>
            <para>painter-&gt;drawPixmap(0, 0, pm);</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Find(QtGui.QPixmapCache.Key,QtGui.QPixmap)">
            <summary>
            <para>Looks for a cached pixmap associated with the given key in the
            cache. If the pixmap is found, the function sets pixmap to that pixmap and
            returns true; otherwise it leaves pixmap alone and returns false. If the
            pixmap is not found, it means that the key is no longer valid, so it will
            be released for the next insertion.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Insert(System.String,QtGui.QPixmap)">
            <summary>
            <para>Inserts a copy of the pixmap pixmap associated with the key into
            the cache.</para>
            <para>All pixmaps inserted by the Qt library have a key starting with
            &quot;$qt&quot;, so your own pixmap keys should never begin
            &quot;$qt&quot;.</para>
            <para>When a pixmap is inserted and the cache is about to exceed its
            limit, it removes pixmaps until there is enough room for the pixmap to be
            inserted.</para>
            <para>The oldest pixmaps (least recently accessed in the cache) are
            deleted when more space is needed.</para>
            <para>The function returns true if the object was inserted into the
            cache; otherwise it returns false.</para>
            <para>See also setCacheLimit().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Insert(QtGui.QPixmap)">
            <summary>
            <para>Inserts a copy of the given pixmap into the cache and returns a
            key that can be used to retrieve it.</para>
            <para>When a pixmap is inserted and the cache is about to exceed its
            limit, it removes pixmaps until there is enough room for the pixmap to be
            inserted.</para>
            <para>The oldest pixmaps (least recently accessed in the cache) are
            deleted when more space is needed.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setCacheLimit() and replace().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Replace(QtGui.QPixmapCache.Key,QtGui.QPixmap)">
            <summary>
            <para>Replaces the pixmap associated with the given key with the pixmap
            specified. Returns true if the pixmap has been correctly inserted into the
            cache; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setCacheLimit() and insert().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Remove(System.String)">
            <summary>
            <para>Removes the pixmap associated with key from the cache.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Remove(QtGui.QPixmapCache.Key)">
            <summary>
            <para>Removes the pixmap associated with key from the cache and
            releases the key for a future insertion.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPixmapCache.Clear">
            <summary>
            <para>Removes all pixmaps from the cache.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPixmapCache.CacheLimit">
            <summary>
            <para>Returns the cache limit (in kilobytes).</para>
            <para>The default cache limit is 10240 KB.</para>
            <para>See also setCacheLimit().</para>
            <para></para>
            <para>Sets the cache limit to n kilobytes.</para>
            <para>The default setting is 10240 KB.</para>
            <para>See also cacheLimit().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPixmapCache.Key">
            <summary>
            <para>The QPixmapCache::Key class can be used for efficient access to
            the QPixmapCache.</para>
            </summary>
            <remarks>
            <para>Use QPixmapCache::insert() to receive an instance of Key
            generated by the pixmap cache. You can store the key in your own objects
            for a very efficient one-to-one object-to-pixmap mapping.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPixmapCache.Key.#ctor">
            <summary>
            <para>Constructs an empty Key object.</para>
            </summary>
        </member>
        <member name="T:QtGui.QBrush">
            <summary>
            <para>The QBrush class defines the fill pattern of shapes drawn by
            QPainter.</para>
            </summary>
            <remarks>
            <para>A brush has a style, a color, a gradient and a texture.</para>
            <para>The brush style() defines the fill pattern using the
            Qt::BrushStyle enum. The default brush style is Qt::NoBrush (depending on
            how you construct a brush). This style tells the painter to not fill
            shapes. The standard style for filling is Qt::SolidPattern. The style can
            be set when the brush is created using the appropriate constructor, and in
            addition the setStyle() function provides means for altering the style once
            the brush is constructed.</para>
            <para></para>
            <para>The brush color() defines the color of the fill pattern. The
            color can either be one of Qt's predefined colors, Qt::GlobalColor, or any
            other custom QColor. The currently set color can be retrieved and altered
            using the color() and setColor() functions, respectively.</para>
            <para>The gradient() defines the gradient fill used when the current
            style is either Qt::LinearGradientPattern, Qt::RadialGradientPattern or
            Qt::ConicalGradientPattern. Gradient brushes are created by giving a
            QGradient as a constructor argument when creating the QBrush. Qt provides
            three different gradients: QLinearGradient, QConicalGradient, and
            QRadialGradient - all of which inherit QGradient.</para>
            <para>    QRadialGradient gradient(50, 50, 50, 50, 50);</para>
            <para>    gradient.setColorAt(0, QColor::fromRgbF(0, 1, 0, 1));</para>
            <para>    gradient.setColorAt(1, QColor::fromRgbF(0, 0, 0, 0));</para>
            <para></para>
            <para>    QBrush brush(gradient);</para>
            <para>The texture() defines the pixmap used when the current style is
            Qt::TexturePattern. You can create a brush with a texture by providing the
            pixmap when the brush is created or by using setTexture().</para>
            <para>Note that applying setTexture() makes style() ==
            Qt::TexturePattern, regardless of previous style settings. Also, calling
            setColor() will not make a difference if the style is a gradient. The same
            is the case if the style is Qt::TexturePattern style unless the current
            texture is a QBitmap.</para>
            <para>The isOpaque() function returns true if the brush is fully opaque
            otherwise false. A brush is considered opaque if:</para>
            <para></para>
            <para>The alpha component of the color() is 255.</para>
            <para>Its texture() does not have an alpha channel and is not a
            QBitmap.</para>
            <para>The colors in the gradient() all have an alpha component that is
            255.</para>
            <para></para>
            <para></para>
            <para> 	To specify the style and color of lines and outlines, use the
            QPainter's pen combined with Qt::PenStyle and Qt::GlobalColor:QPainter
            painter(this);</para>
            <para></para>
            <para>painter.setBrush(Qt::cyan);</para>
            <para>painter.setPen(Qt::darkCyan);</para>
            <para>painter.drawRect(0, 0, 100,100);</para>
            <para></para>
            <para>painter.setBrush(Qt::NoBrush);</para>
            <para>painter.setPen(Qt::darkGreen);</para>
            <para>painter.drawRect(40, 40, 100, 100);</para>
            <para>Note that, by default, QPainter renders the outline (using the
            currently set pen) when drawing shapes. Use painter.setPen(Qt::NoPen) to
            disable this behavior.</para>
            <para></para>
            <para></para>
            <para>For more information about painting in general, see the Paint
            System.</para>
            <para></para>
            <para>See also Qt::BrushStyle, QPainter, and QColor.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QBrush.#ctor">
            <summary>
            <para>Constructs a default black brush with the style Qt::NoBrush (i.e.
            this brush will not fill shapes).</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtCore.Qt.BrushStyle)">
            <summary>
            <para>Constructs a black brush with the given style.</para>
            <para>See also setStyle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QColor,QtCore.Qt.BrushStyle)">
            <summary>
            <para>Constructs a brush with the given color and style.</para>
            <para>See also setColor() and setStyle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtCore.Qt.GlobalColor,QtCore.Qt.BrushStyle)">
            <summary>
            <para>Constructs a brush with the given color and style.</para>
            <para>See also setColor() and setStyle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QColor,QtGui.QPixmap)">
            <summary>
            <para>Constructs a brush with the given color and the custom pattern
            stored in pixmap.</para>
            <para>The style is set to Qt::TexturePattern. The color will only have
            an effect for QBitmaps.</para>
            <para>See also setColor() and setTexture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtCore.Qt.GlobalColor,QtGui.QPixmap)">
            <summary>
            <para>Constructs a brush with the given color and the custom pattern
            stored in pixmap.</para>
            <para>The style is set to Qt::TexturePattern. The color will only have
            an effect for QBitmaps.</para>
            <para>See also setColor() and setTexture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QPixmap)">
            <summary>
            <para>Constructs a brush with a black color and a texture set to the
            given pixmap. The style is set to Qt::TexturePattern.</para>
            <para>See also setTexture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QImage)">
            <summary>
            <para>Constructs a brush with a black color and a texture set to the
            given image. The style is set to Qt::TexturePattern.</para>
            <para>See also setTextureImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QBrush)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.#ctor(QtGui.QGradient)">
            <summary>
            <para>Constructs a brush based on the given gradient.</para>
            <para>The brush style is set to the corresponding gradient style
            (either Qt::LinearGradientPattern, Qt::RadialGradientPattern or
            Qt::ConicalGradientPattern).</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.Swap(QtGui.QBrush)">
            <summary>
            <para>Swaps brush other with this brush. This operation is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.op_Implicit(QtGui.QBrush)~QtCore.QVariant">
            <summary>
            <para>Returns the brush as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.SetColor(QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the brush color to the given color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.op_Equality(QtGui.QBrush,QtGui.QBrush)">
            <summary>
            <para>Returns true if the brush is equal to the given brush; otherwise
            returns false.</para>
            <para>Two brushes are equal if they have equal styles, colors and
            transforms and equal pixmaps or gradients depending on the style.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBrush.op_Inequality(QtGui.QBrush,QtGui.QBrush)">
            <summary>
            <para>Returns true if the brush is different from the given brush;
            otherwise returns false.</para>
            <para>Two brushes are different if they have different styles, colors
            or transforms or different pixmaps or gradients depending on the
            style.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Style">
            <summary>
            <para>Returns the brush style.</para>
            <para>See also setStyle().</para>
            <para></para>
            <para>Sets the brush style to style.</para>
            <para>See also style().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Matrix">
            <summary>
            <para>Returns the current transformation matrix for the brush.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setMatrix().</para>
            <para></para>
            <para>Sets matrix as an explicit transformation matrix on the current
            brush. The brush transformation matrix is merged with QPainter
            transformation matrix to produce the final result.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also matrix().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Transform">
            <summary>
            <para>Returns the current transformation matrix for the brush.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTransform().</para>
            <para></para>
            <para>Sets matrix as an explicit transformation matrix on the current
            brush. The brush transformation matrix is merged with QPainter
            transformation matrix to produce the final result.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Texture">
            <summary>
            <para>Returns the custom brush pattern, or a null pixmap if no custom
            brush pattern has been set.</para>
            <para>See also setTexture().</para>
            <para></para>
            <para>Sets the brush pixmap to pixmap. The style is set to
            Qt::TexturePattern.</para>
            <para>The current brush color will only have an effect for monochrome
            pixmaps, i.e. for QPixmap::depth() == 1 (QBitmaps).</para>
            <para>See also texture().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.TextureImage">
            <summary>
            <para>Returns the custom brush pattern, or a null image if no custom
            brush pattern has been set.</para>
            <para>If the texture was set as a QPixmap it will be converted to a
            QImage.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setTextureImage().</para>
            <para></para>
            <para>Sets the brush image to image. The style is set to
            Qt::TexturePattern.</para>
            <para>Note the current brush color will not have any affect on
            monochrome images, as opposed to calling setTexture() with a QBitmap. If
            you want to change the color of monochrome image brushes, either convert
            the image to QBitmap with QBitmap::fromImage() and set the resulting
            QBitmap as a texture, or change the entries in the color table for the
            image.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also textureImage() and setTexture().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Color">
            <summary>
            <para>Returns the brush color.</para>
            <para>See also setColor().</para>
            <para></para>
            <para>Sets the brush color to the given color.</para>
            <para>Note that calling setColor() will not make a difference if the
            style is a gradient. The same is the case if the style is
            Qt::TexturePattern style unless the current texture is a QBitmap.</para>
            <para>See also color().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.Gradient">
            <summary>
            <para>Returns the gradient describing this brush.</para>
            </summary>
        </member>
        <member name="P:QtGui.QBrush.IsOpaque">
            <summary>
            <para>Returns true if the brush is fully opaque otherwise false. A
            brush is considered opaque if:</para>
            <para></para>
            <para>The alpha component of the color() is 255.</para>
            <para>Its texture() does not have an alpha channel and is not a
            QBitmap.</para>
            <para>The colors in the gradient() all have an alpha component that is
            255.</para>
            <para>It is an extended radial gradient.</para>
            <para></para>
            </summary>
        </member>
        <member name="T:QtGui.QGradient">
            <summary>
            <para>The QGradient class is used in combination with QBrush to specify
            gradient fills.</para>
            </summary>
            <remarks>
            <para>Qt currently supports three types of gradient fills:</para>
            <para></para>
            <para>Linear gradients interpolate colors between start and end
            points.</para>
            <para>Simple radial gradients interpolate colors between a focal point
            and end points on a circle surrounding it.</para>
            <para>Extended radial gradients interpolate colors between a center and
            a focal circle.</para>
            <para>Conical gradients interpolate colors around a center
            point.</para>
            <para></para>
            <para>A gradient's type can be retrieved using the type() function.
            Each of the types is represented by a subclass of QGradient:</para>
            <para></para>
            <para> QLinearGradientQRadialGradientQConicalGradient</para>
            <para>	</para>
            <para></para>
            <para>The colors in a gradient are defined using stop points of the
            QGradientStop type; i.e., a position and a color. Use the setColorAt()
            function to define a single stop point. Alternatively, use the setStops()
            function to define several stop points in one go. Note that the latter
            function replaces the current set of stop points.</para>
            <para>It is the gradient's complete set of stop points (accessible
            through the stops() function) that describes how the gradient area should
            be filled. If no stop points have been specified, a gradient of black at 0
            to white at 1 is used.</para>
            <para>A diagonal linear gradient from black at (100, 100) to white at
            (200, 200) could be specified like this:</para>
            <para>    QLinearGradient linearGrad(QPointF(100, 100), QPointF(200,
            200));</para>
            <para>    linearGrad.setColorAt(0, Qt::black);</para>
            <para>    linearGrad.setColorAt(1, Qt::white);</para>
            <para>A gradient can have an arbitrary number of stop points. The
            following would create a radial gradient starting with red in the center,
            blue and then green on the edges:</para>
            <para>    QRadialGradient radialGrad(QPointF(100, 100), 100);</para>
            <para>    radialGrad.setColorAt(0, Qt::red);</para>
            <para>    radialGrad.setColorAt(0.5, Qt::blue);</para>
            <para>    radialGrad.setColorAt(1, Qt::green);</para>
            <para>It is possible to repeat or reflect the gradient outside its area
            by specifiying the spread method using the setSpread() function. The
            default is to pad the outside area with the color at the closest stop
            point. The currently set spread method can be retrieved using the spread()
            function. The QGradient::Spread enum defines three different
            methods:</para>
            <para></para>
            <para> 	</para>
            <para>PadSpread	RepeatSpread	ReflectSpread</para>
            <para></para>
            <para>Note that the setSpread() function only has effect for linear and
            radial gradients. The reason is that the conical gradient is closed by
            definition, i.e. the conical gradient fills the entire circle from 0 - 360
            degrees, while the boundary of a radial or a linear gradient can be
            specified through its radius or final stop points, respectively.</para>
            <para>The gradient coordinates can be specified in logical coordinates,
            relative to device coordinates, or relative to object bounding box
            coordinates. The coordinate mode can be set using the setCoordinateMode()
            function. The default is LogicalMode, where the gradient coordinates are
            specified in the same way as the object coordinates. To retrieve the
            currently set coordinate mode use coordinateMode().</para>
            <para></para>
            <para>See also The Gradients Example and QBrush.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QGradient.SetColorAt(System.Double,QtGui.QColor)">
            <summary>
            <para>Creates a stop point at the given position with the given color.
            The given position must be in the range 0 to 1.</para>
            <para>See also setStops() and stops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGradient.op_Equality(QtGui.QGradient,QtGui.QGradient)">
            <summary>
            <para>Returns true if the gradient is the same as the other gradient
            specified; otherwise returns false.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGradient.op_Inequality(QtGui.QGradient,QtGui.QGradient)">
            <summary>
            <para>Returns true if the gradient is the same as the other gradient
            specified; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGradient.spread">
            <summary>
            <para>Returns the spread method use by this gradient. The default is
            PadSpread.</para>
            <para>See also setSpread().</para>
            <para></para>
            <para>Specifies the spread method that should be used for this
            gradient.</para>
            <para>Note that this function only has effect for linear and radial
            gradients.</para>
            <para>See also spread().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGradient.coordinateMode">
            <summary>
            <para>Returns the coordinate mode of this gradient. The default mode is
            LogicalMode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCoordinateMode().</para>
            <para></para>
            <para>Sets the coordinate mode of this gradient to mode. The default
            mode is LogicalMode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also coordinateMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGradient.type">
            <summary>
            <para>Returns the type of gradient.</para>
            </summary>
        </member>
        <member name="T:QtGui.QGradient.Type">
            <summary>
            <para>Specifies the type of gradient.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtGui.QGradient.Type.LinearGradient">
            <summary>Interpolates colors between start and end points (QLinearGradient).</summary>
        </member>
        <member name="F:QtGui.QGradient.Type.RadialGradient">
            <summary>Interpolate colors between a focal point and end points on a circle surrounding it (QRadialGradient).</summary>
        </member>
        <member name="F:QtGui.QGradient.Type.ConicalGradient">
            <summary>Interpolate colors around a center point (QConicalGradient).</summary>
        </member>
        <member name="F:QtGui.QGradient.Type.NoGradient">
            <summary>No gradient is used.</summary>
        </member>
        <member name="T:QtGui.QGradient.Spread">
            <summary>
            <para>Specifies how the area outside the gradient area should be
            filled.</para>
            <para>See also spread() and setSpread().</para>
            </summary>
        </member>
        <member name="F:QtGui.QGradient.Spread.PadSpread">
            <summary>The area is filled with the closest stop color. This is the default.</summary>
        </member>
        <member name="F:QtGui.QGradient.Spread.ReflectSpread">
            <summary>The gradient is reflected outside the gradient area.</summary>
        </member>
        <member name="F:QtGui.QGradient.Spread.RepeatSpread">
            <summary>The gradient is repeated outside the gradient area.</summary>
        </member>
        <member name="T:QtGui.QGradient.CoordinateMode">
            <summary>
            <para>This enum specifies how gradient coordinates map to the paint
            device on which the gradient is used.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtGui.QGradient.CoordinateMode.LogicalMode">
            <summary>This is the default mode. The gradient coordinates are specified logical space just like the object coordinates.</summary>
        </member>
        <member name="F:QtGui.QGradient.CoordinateMode.StretchToDeviceMode">
            <summary>In this mode the gradient coordinates are relative to the bounding rectangle of the paint device, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the paint device.</summary>
        </member>
        <member name="F:QtGui.QGradient.CoordinateMode.ObjectBoundingMode">
            <summary>In this mode the gradient coordinates are relative to the bounding rectangle of the object being drawn, with (0,0) in the top left corner, and (1,1) in the bottom right corner of the object's bounding rectangle.</summary>
        </member>
        <member name="T:QtGui.QLinearGradient">
            <summary>
            <para>The QLinearGradient class is used in combination with QBrush to
            specify a linear gradient brush.</para>
            </summary>
            <remarks>
            <para>Linear gradients interpolate colors between start and end points.
            Outside these points the gradient is either padded, reflected or repeated
            depending on the currently set spread method:</para>
            <para></para>
            <para> 	</para>
            <para>PadSpread (default)	ReflectSpread	RepeatSpread</para>
            <para></para>
            <para>The colors in a gradient is defined using stop points of the
            QGradientStop type, i.e. a position and a color. Use the
            QGradient::setColorAt() or the QGradient::setStops() function to define the
            stop points. It is the gradient's complete set of stop points that
            describes how the gradient area should be filled. If no stop points have
            been specified, a gradient of black at 0 to white at 1 is used.</para>
            <para>In addition to the functions inherited from QGradient, the
            QLinearGradient class provides the finalStop() function which returns the
            final stop point of the gradient, and the start() function returning the
            start point of the gradient.</para>
            <para></para>
            <para>See also QRadialGradient, QConicalGradient, and The Gradients
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QLinearGradient.#ctor">
            <summary>
            <para>Constructs a default linear gradient with interpolation area
            between (0, 0) and (1, 1).</para>
            <para>See also QGradient::setColorAt(), setStart(), and
            setFinalStop().</para>
            </summary>
        </member>
        <member name="M:QtGui.QLinearGradient.#ctor(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>Constructs a linear gradient with interpolation area between the
            given start point and finalStop.</para>
            <para>Note: The expected parameter values are in pixels.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QLinearGradient.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a linear gradient with interpolation area between (x1,
            y1) and (x2, y2).</para>
            <para>Note: The expected parameter values are in pixels.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QLinearGradient.SetStart(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the start point of this linear gradient in logical
            coordinates to x, y.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="M:QtGui.QLinearGradient.SetFinalStop(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the final stop point of this linear gradient in logical
            coordinates to x, y.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="P:QtGui.QLinearGradient.Start">
            <summary>
            <para>Returns the start point of this linear gradient in logical
            coordinates.</para>
            <para>See also setStart() and QGradient::stops().</para>
            <para></para>
            <para>Sets the start point of this linear gradient in logical
            coordinates to start.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also start().</para>
            </summary>
        </member>
        <member name="P:QtGui.QLinearGradient.FinalStop">
            <summary>
            <para>Returns the final stop point of this linear gradient in logical
            coordinates.</para>
            <para>See also setFinalStop() and QGradient::stops().</para>
            <para></para>
            <para>Sets the final stop point of this linear gradient in logical
            coordinates to stop.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also finalStop().</para>
            </summary>
        </member>
        <member name="T:QtGui.QRadialGradient">
            <summary>
            <para>The QRadialGradient class is used in combination with QBrush to
            specify a radial gradient brush.</para>
            </summary>
            <remarks>
            <para>Qt supports both simple and extended radial gradients.</para>
            <para>Simple radial gradients interpolate colors between a focal point
            and end points on a circle surrounding it. Extended radial gradients
            interpolate colors between a focal circle and a center circle. Points
            outside the cone defined by the two circles will be transparent. For simple
            radial gradients the focal point is adjusted to lie inside the center
            circle, whereas the focal point can have any position in an extended radial
            gradient.</para>
            <para>Outside the end points the gradient is either padded, reflected
            or repeated depending on the currently set spread method:</para>
            <para></para>
            <para> 	</para>
            <para>PadSpread (default)	ReflectSpread	RepeatSpread</para>
            <para></para>
            <para>The colors in a gradient is defined using stop points of the
            QGradientStop type, i.e. a position and a color. Use the
            QGradient::setColorAt() or the QGradient::setStops() function to define the
            stop points. It is the gradient's complete set of stop points that
            describes how the gradient area should be filled. If no stop points have
            been specified, a gradient of black at 0 to white at 1 is used.</para>
            <para>In addition to the functions inherited from QGradient, the
            QRadialGradient class provides the center(), focalPoint() and radius()
            functions returning the gradient's center, focal point and radius
            respectively.</para>
            <para></para>
            <para>See also QLinearGradient, QConicalGradient, and The Gradients
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor">
            <summary>
            <para>Constructs a simple radial gradient with the center and focal
            point at (0, 0) with a radius of 1.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(QtCore.QPointF,System.Double,QtCore.QPointF)">
            <summary>
            <para>Constructs a simple radial gradient with the given center, radius
            and focalPoint.</para>
            <para>Note: If the given focal point is outside the circle defined by
            the center point and radius, it will be re-adjusted to lie at a point on
            the circle where it intersects with the line from center to
            focalPoint.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a simple radial gradient with the given center (cx,
            cy), radius and focal point (fx, fy).</para>
            <para>Note: If the given focal point is outside the circle defined by
            the center (cx, cy) and the radius it will be re-adjusted to the
            intersection between the line from the center to the focal point and the
            circle.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(QtCore.QPointF,System.Double)">
            <summary>
            <para>Constructs a simple radial gradient with the given center, radius
            and the focal point in the circle center.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a simple radial gradient with the center at (cx, cy)
            and the specified radius. The focal point lies at the center of the
            circle.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(QtCore.QPointF,System.Double,QtCore.QPointF,System.Double)">
            <summary>
            <para>Constructs an extended radial gradient with the given center,
            centerRadius, focalPoint, and focalRadius.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs an extended radial gradient with the given center (cx,
            cy), center radius, centerRadius, focal point, (fx, fy), and focal radius
            focalRadius.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.SetCenter(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the center of this radial gradient in logical coordinates to
            (x, y).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRadialGradient.SetFocalPoint(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the focal point of this radial gradient in logical
            coordinates to (x, y).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also focalPoint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRadialGradient.Center">
            <summary>
            <para>Returns the center of this radial gradient in logical
            coordinates.</para>
            <para>See also setCenter() and QGradient::stops().</para>
            <para></para>
            <para>Sets the center of this radial gradient in logical coordinates to
            center.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRadialGradient.FocalPoint">
            <summary>
            <para>Returns the focal point of this radial gradient in logical
            coordinates.</para>
            <para>See also setFocalPoint() and QGradient::stops().</para>
            <para></para>
            <para>Sets the focal point of this radial gradient in logical
            coordinates to focalPoint.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also focalPoint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRadialGradient.Radius">
            <summary>
            <para>Returns the radius of this radial gradient in logical
            coordinates.</para>
            <para>Equivalent to centerRadius()</para>
            <para>See also setRadius() and QGradient::stops().</para>
            <para></para>
            <para>Sets the radius of this radial gradient in logical coordinates to
            radius</para>
            <para>Equivalent to setCenterRadius()</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also radius().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRadialGradient.CenterRadius">
            <summary>
            <para>Returns the center radius of this radial gradient in logical
            coordinates.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setCenterRadius() and QGradient::stops().</para>
            <para></para>
            <para>Sets the center radius of this radial gradient in logical
            coordinates to radius</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also centerRadius().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRadialGradient.FocalRadius">
            <summary>
            <para>Returns the focal radius of this radial gradient in logical
            coordinates.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setFocalRadius() and QGradient::stops().</para>
            <para></para>
            <para>Sets the focal radius of this radial gradient in logical
            coordinates to radius</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also focalRadius().</para>
            </summary>
        </member>
        <member name="T:QtGui.QConicalGradient">
            <summary>
            <para>The QConicalGradient class is used in combination with QBrush to
            specify a conical gradient brush.</para>
            </summary>
            <remarks>
            <para>Conical gradients interpolate interpolate colors
            counter-clockwise around a center point.</para>
            <para></para>
            <para>The colors in a gradient is defined using stop points of the
            QGradientStop type, i.e. a position and a color. Use the
            QGradient::setColorAt() or the QGradient::setStops() function to define the
            stop points. It is the gradient's complete set of stop points that
            describes how the gradient area should be filled. If no stop points have
            been specified, a gradient of black at 0 to white at 1 is used.</para>
            <para>In addition to the functions inherited from QGradient, the
            QConicalGradient class provides the angle() and center() functions
            returning the start angle and center of the gradient.</para>
            <para>Note that the setSpread() function has no effect for conical
            gradients. The reason is that the conical gradient is closed by definition,
            i.e. the conical gradient fills the entire circle from 0 - 360 degrees,
            while the boundary of a radial or a linear gradient can be specified
            through its radius or final stop points, respectively.</para>
            <para></para>
            <para>See also QLinearGradient, QRadialGradient, and The Gradients
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QConicalGradient.#ctor">
            <summary>
            <para>Constructs a conical with center at (0, 0) starting the
            interpolation at angle 0.</para>
            <para>See also QGradient::setColorAt(), setCenter(), and
            setAngle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QConicalGradient.#ctor(QtCore.QPointF,System.Double)">
            <summary>
            <para>Constructs a conical gradient with the given center, starting the
            interpolation at the given angle. The angle must be specified in degrees
            between 0 and 360.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QConicalGradient.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            <para>Constructs a conical gradient with the given center (cx, cy),
            starting the interpolation at the given angle. The angle must be specified
            in degrees between 0 and 360.</para>
            <para>See also QGradient::setColorAt() and
            QGradient::setStops().</para>
            </summary>
        </member>
        <member name="M:QtGui.QConicalGradient.SetCenter(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the center of this conical gradient in logical coordinates
            to (x, y).</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="P:QtGui.QConicalGradient.Center">
            <summary>
            <para>Returns the center of the conical gradient in logical
            coordinates.</para>
            <para>See also setCenter() and stops().</para>
            <para></para>
            <para>Sets the center of this conical gradient in logical coordinates
            to center.</para>
            <para>See also center().</para>
            </summary>
        </member>
        <member name="P:QtGui.QConicalGradient.Angle">
            <summary>
            <para>Returns the start angle of the conical gradient in logical
            coordinates.</para>
            <para>See also setAngle() and stops().</para>
            <para></para>
            <para>Sets angle to be the start angle for this conical gradient in
            logical coordinates.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also angle().</para>
            </summary>
        </member>
        <member name="T:QtGui.QFont">
            <summary>
            <para>The QFont class specifies a font used for drawing text.</para>
            </summary>
            <remarks>
            <para>When you create a QFont object you specify various attributes
            that you want the font to have. Qt will use the font with the specified
            attributes, or if no matching font exists, Qt will use the closest matching
            installed font. The attributes of the font that is actually used are
            retrievable from a QFontInfo object. If the window system provides an exact
            match exactMatch() returns true. Use QFontMetrics to get measurements, e.g.
            the pixel length of a string using QFontMetrics::width().</para>
            <para>Note that a QGuiApplication instance must exist before a QFont
            can be used. You can set the application's default font with
            QGuiApplication::setFont().</para>
            <para>If a chosen font does not include all the characters that need to
            be displayed, QFont will try to find the characters in the nearest
            equivalent fonts. When a QPainter draws a character from a font the QFont
            will report whether or not it has the character; if it does not, QPainter
            will draw an unfilled square.</para>
            <para>Create QFonts like this:</para>
            <para>QFont serifFont(&quot;Times&quot;, 10, QFont::Bold);</para>
            <para>QFont sansFont(&quot;Helvetica [Cronyx]&quot;, 12);</para>
            <para>The attributes set in the constructor can also be set later, e.g.
            setFamily(), setPointSize(), setPointSizeF(), setWeight() and setItalic().
            The remaining attributes must be set after contstruction, e.g. setBold(),
            setUnderline(), setOverline(), setStrikeOut() and setFixedPitch().
            QFontInfo objects should be created after the font's attributes have been
            set. A QFontInfo object will not change, even if you change the font's
            attributes. The corresponding &quot;get&quot; functions, e.g. family(),
            pointSize(), etc., return the values that were set, even though the values
            used may differ. The actual values are available from a QFontInfo
            object.</para>
            <para>If the requested font family is unavailable you can influence the
            font matching algorithm by choosing a particular QFont::StyleHint and
            QFont::StyleStrategy with setStyleHint(). The default family (corresponding
            to the current style hint) is returned by defaultFamily().</para>
            <para>The font-matching algorithm has a lastResortFamily() and
            lastResortFont() in cases where a suitable match cannot be found. You can
            provide substitutions for font family names using insertSubstitution() and
            insertSubstitutions(). Substitutions can be removed with
            removeSubstitutions(). Use substitute() to retrieve a family's first
            substitute, or the family name itself if it has no substitutes. Use
            substitutes() to retrieve a list of a family's substitutes (which may be
            empty).</para>
            <para>Every QFont has a key() which you can use, for example, as the
            key in a cache or dictionary. If you want to store a user's font
            preferences you could use QSettings, writing the font information with
            toString() and reading it back with fromString(). The operator&lt;&lt;()
            and operator&gt;&gt;() functions are also available, but they work on a
            data stream.</para>
            <para>It is possible to set the height of characters shown on the
            screen to a specified number of pixels with setPixelSize(); however using
            setPointSize() has a similar effect and provides device
            independence.</para>
            <para>Loading fonts can be expensive, especially on X11. QFont contains
            extensive optimizations to make the copying of QFont objects fast, and to
            cache the results of the slow window system functions it depends
            upon.</para>
            <para></para>
            <para>The font matching algorithm works as follows:</para>
            <para></para>
            <para>The specified font family is searched for.</para>
            <para>If not found, the styleHint() is used to select a replacement
            family.</para>
            <para>Each replacement font family is searched for.</para>
            <para>If none of these are found or there was no styleHint(),
            &quot;helvetica&quot; will be searched for.</para>
            <para>If &quot;helvetica&quot; isn't found Qt will try the
            lastResortFamily().</para>
            <para>If the lastResortFamily() isn't found Qt will try the
            lastResortFont() which will always return a name of some kind.</para>
            <para></para>
            <para>Note that the actual font matching algorithm varies from platform
            to platform.</para>
            <para>In Windows a request for the &quot;Courier&quot; font is
            automatically changed to &quot;Courier New&quot;, an improved version of
            Courier that allows for smooth scaling. The older &quot;Courier&quot;
            bitmap font can be selected by setting the PreferBitmap style strategy (see
            setStyleStrategy()).</para>
            <para>Once a font is found, the remaining attributes are matched in
            order of priority:</para>
            <para></para>
            <para>fixedPitch()</para>
            <para>pointSize() (see below)</para>
            <para>weight()</para>
            <para>style()</para>
            <para></para>
            <para>If you have a font which matches on family, even if none of the
            other attributes match, this font will be chosen in preference to a font
            which doesn't match on family but which does match on the other attributes.
            This is because font family is the dominant search criteria.</para>
            <para>The point size is defined to match if it is within 20% of the
            requested point size. When several fonts match and are only distinguished
            by point size, the font with the closest point size to the one requested
            will be chosen.</para>
            <para>The actual family, font size, weight and other font attributes
            used for drawing text will depend on what's available for the chosen family
            under the window system. A QFontInfo object can be used to determine the
            actual values used for drawing the text.</para>
            <para>Examples:</para>
            <para>QFont f(&quot;Helvetica&quot;);</para>
            <para>If you had both an Adobe and a Cronyx Helvetica, you might get
            either.</para>
            <para>QFont f(&quot;Helvetica [Cronyx]&quot;);</para>
            <para>You can specify the foundry you want in the family name. The font
            f in the above example will be set to &quot;Helvetica
            [Cronyx]&quot;.</para>
            <para>To determine the attributes of the font actually used in the
            window system, use a QFontInfo object, e.g.</para>
            <para>QFontInfo info(f1);</para>
            <para>QString family = info.family();</para>
            <para>To find out font metrics use a QFontMetrics object, e.g.</para>
            <para>QFontMetrics fm(f1);</para>
            <para>int textWidthInPixels = fm.width(&quot;How many pixels wide is
            this text?&quot;);</para>
            <para>int textHeightInPixels = fm.height();</para>
            <para>For more general information on fonts, see the comp.fonts FAQ.
            Information on encodings can be found from Roman Czyborra's page.</para>
            <para></para>
            <para>See also QFontMetrics, QFontInfo, QFontDatabase, and Character
            Map Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFont.#ctor">
            <summary>
            <para>Constructs a font object that uses the application's default
            font.</para>
            <para>See also QGuiApplication::setFont() and
            QGuiApplication::font().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Constructs a font object with the specified family, pointSize,
            weight and italic settings.</para>
            <para>If pointSize is zero or negative, the point size of the font is
            set to a system-dependent default value. Generally, this is 12
            points.</para>
            <para>The family name may optionally also include a foundry name, e.g.
            &quot;Helvetica [Cronyx]&quot;. If the family is available from more than
            one foundry and the foundry isn't specified, an arbitrary foundry is
            chosen. If the family isn't available a family will be set using the font
            matching algorithm.</para>
            <para>See also Weight, setFamily(), setPointSize(), setWeight(),
            setItalic(), setStyleHint(), and QGuiApplication::font().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.#ctor(QtGui.QFont,QtGui.IQPaintDevice)">
            <summary>
            <para>Constructs a font from font for use on the paint device
            pd.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.#ctor(QtGui.QFont)">
            <summary>
            <para>Constructs a font that is a copy of font.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.Swap(QtGui.QFont)">
            <summary>
            <para>Swaps this font instance with other. This function is very fast
            and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.SetStyleHint(QtGui.QFont.StyleHint,QtGui.QFont.StyleStrategy)">
            <summary>
            <para>Sets the style hint and strategy to hint and strategy,
            respectively.</para>
            <para>If these aren't set explicitly the style hint will default to
            AnyStyle and the style strategy to PreferDefault.</para>
            <para>Qt does not support style hints on X11 since this information is
            not provided by the window system.</para>
            <para>See also StyleHint, styleHint(), StyleStrategy, styleStrategy(),
            and QFontInfo.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.SetLetterSpacing(QtGui.QFont.SpacingType,System.Double)">
            <summary>
            <para>Sets the letter spacing for the font to spacing and the type of
            spacing to type.</para>
            <para>Letter spacing changes the default spacing between individual
            letters in the font. The spacing between the letters can be made smaller as
            well as larger either in percentage of the character width or in pixels,
            depending on the selected spacing type.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also letterSpacing(), letterSpacingType(), and
            setWordSpacing().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.ExactMatch">
            <summary>
            <para>Returns true if a window system font exactly matching the
            settings of this font is available.</para>
            <para>See also QFontInfo.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.op_Equality(QtGui.QFont,QtGui.QFont)">
            <summary>
            <para>Returns true if this font is equal to f; otherwise returns
            false.</para>
            <para>Two QFonts are considered equal if their font attributes are
            equal.</para>
            <para>See also operator!=() and isCopyOf().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.op_Inequality(QtGui.QFont,QtGui.QFont)">
            <summary>
            <para>Returns true if this font is different from f; otherwise returns
            false.</para>
            <para>Two QFonts are considered to be different if their font
            attributes are different.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.op_LessThan(QtGui.QFont,QtGui.QFont)">
            <summary>
            <para>Provides an arbitrary comparison of this font and font f. All
            that is guaranteed is that the operator returns false if both fonts are
            equal and that (f1 &lt; f2) == !(f2 &lt; f1) if the fonts are not
            equal.</para>
            <para>This function is useful in some circumstances, for example if you
            want to use QFont objects as keys in a QMap.</para>
            <para>See also operator==(), operator!=(), and isCopyOf().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.op_Implicit(QtGui.QFont)~QtCore.QVariant">
            <summary>
            <para>Returns the font as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.IsCopyOf(QtGui.QFont)">
            <summary>
            <para>Returns true if this font and f are copies of each other, i.e.
            one of them was created as a copy of the other and neither has been
            modified since. This is much stricter than equality.</para>
            <para>See also operator=() and operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.ToString">
            <summary>
            <para>Returns a description of the font. The description is a
            comma-separated list of the attributes, perfectly suited for use in
            QSettings.</para>
            <para>See also fromString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.FromString(System.String)">
            <summary>
            <para>Sets this font to match the description descrip. The description
            is a comma-separated list of the font attributes, as returned by
            toString().</para>
            <para>See also toString().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.Resolve(QtGui.QFont)">
            <summary>
            <para>Returns a new QFont that has attributes copied from other that
            have not been previously set on this font.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.Substitute(System.String)">
            <summary>
            <para>Returns the first family name to be used whenever familyName is
            specified. The lookup is case insensitive.</para>
            <para>If there is no substitution for familyName, familyName is
            returned.</para>
            <para>To obtain a list of substitutions use substitutes().</para>
            <para>See also setFamily(), insertSubstitutions(),
            insertSubstitution(), and removeSubstitutions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.Substitutes(System.String)">
            <summary>
            <para>Returns a list of family names to be used whenever familyName is
            specified. The lookup is case insensitive.</para>
            <para>If there is no substitution for familyName, an empty list is
            returned.</para>
            <para>See also substitute(), insertSubstitutions(),
            insertSubstitution(), and removeSubstitutions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.InsertSubstitution(System.String,System.String)">
            <summary>
            <para>Inserts substituteName into the substitution table for the family
            familyName.</para>
            <para>See also insertSubstitutions(), removeSubstitutions(),
            substitutions(), substitute(), and substitutes().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.InsertSubstitutions(System.String,QtCore.QStringList)">
            <summary>
            <para>Inserts the list of families substituteNames into the
            substitution list for familyName.</para>
            <para>See also insertSubstitution(), removeSubstitutions(),
            substitutions(), and substitute().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.RemoveSubstitutions(System.String)">
            <summary>
            <para>Removes all the substitutions for familyName.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also insertSubstitutions(), insertSubstitution(),
            substitutions(), and substitute().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFont.QHash(QtGui.QFont,System.UInt32)">
            <summary>
            <para>Returns the hash value for font. If specified, seed is used to
            initialize the hash.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Family">
            <summary>
            <para>Returns the requested font family name, i.e. the name set in the
            constructor or the last setFont() call.</para>
            <para>See also setFamily(), substitutes(), and substitute().</para>
            <para></para>
            <para>Sets the family name of the font. The name is case insensitive
            and may include a foundry name.</para>
            <para>The family name may optionally also include a foundry name, e.g.
            &quot;Helvetica [Cronyx]&quot;. If the family is available from more than
            one foundry and the foundry isn't specified, an arbitrary foundry is
            chosen. If the family isn't available a family will be set using the font
            matching algorithm.</para>
            <para>See also family(), setStyleHint(), and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.StyleName">
            <summary>
            <para>Returns the requested font style name, it will be used to match
            the font with irregular styles (that can't be normalized in other style
            properties). It depends on system font support, thus only works for Mac OS
            X and X11 so far. On Windows irregular styles will be added as separate
            font families so there is no need for this.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setStyleName(), setFamily(), and setStyle().</para>
            <para></para>
            <para>Sets the style name of the font to styleName. When set, other
            style properties like style() and weight() will be ignored for font
            matching.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also styleName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.PointSize">
            <summary>
            <para>Returns the point size of the font. Returns -1 if the font size
            was specified in pixels.</para>
            <para>See also setPointSize() and pointSizeF().</para>
            <para></para>
            <para>Sets the point size to pointSize. The point size must be greater
            than zero.</para>
            <para>See also pointSize() and setPointSizeF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.PointSizeF">
            <summary>
            <para>Returns the point size of the font. Returns -1 if the font size
            was specified in pixels.</para>
            <para>See also pointSize(), setPointSizeF(), pixelSize(),
            QFontInfo::pointSize(), and QFontInfo::pixelSize().</para>
            <para></para>
            <para>Sets the point size to pointSize. The point size must be greater
            than zero. The requested precision may not be achieved on all
            platforms.</para>
            <para>See also pointSizeF(), setPointSize(), and setPixelSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.PixelSize">
            <summary>
            <para>Returns the pixel size of the font if it was set with
            setPixelSize(). Returns -1 if the size was set with setPointSize() or
            setPointSizeF().</para>
            <para>See also setPixelSize(), pointSize(), QFontInfo::pointSize(), and
            QFontInfo::pixelSize().</para>
            <para></para>
            <para>Sets the font size to pixelSize pixels.</para>
            <para>Using this function makes the font device dependent. Use
            setPointSize() or setPointSizeF() to set the size of the font in a device
            independent manner.</para>
            <para>See also pixelSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.weight">
            <summary>
            <para>Returns the weight of the font, using the same scale as the
            QFont::Weight enumeration.</para>
            <para>See also setWeight(), Weight, and QFontInfo.</para>
            <para></para>
            <para>Sets the weight of the font to weight, using the scale defined by
            QFont::Weight enumeration.</para>
            <para>See also weight() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Bold">
            <summary>
            <para>Returns true if weight() is a value greater than QFont::Medium;
            otherwise returns false.</para>
            <para>See also weight(), setBold(), and QFontInfo::bold().</para>
            <para></para>
            <para>If enable is true sets the font's weight to QFont::Bold;
            otherwise sets the weight to QFont::Normal.</para>
            <para>For finer boldness control use setWeight().</para>
            <para>See also bold() and setWeight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.style">
            <summary>
            <para>Returns the style of the font.</para>
            <para>See also setStyle().</para>
            <para></para>
            <para>Sets the style of the font to style.</para>
            <para>See also style(), italic(), and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Italic">
            <summary>
            <para>Returns true if the style() of the font is not
            QFont::StyleNormal</para>
            <para>See also setItalic() and style().</para>
            <para></para>
            <para>Sets the style() of the font to QFont::StyleItalic if enable is
            true; otherwise the style is set to QFont::StyleNormal.</para>
            <para>See also italic() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Underline">
            <summary>
            <para>Returns true if underline has been set; otherwise returns
            false.</para>
            <para>See also setUnderline().</para>
            <para></para>
            <para>If enable is true, sets underline on; otherwise sets underline
            off.</para>
            <para>See also underline() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Overline">
            <summary>
            <para>Returns true if overline has been set; otherwise returns
            false.</para>
            <para>See also setOverline().</para>
            <para></para>
            <para>If enable is true, sets overline on; otherwise sets overline
            off.</para>
            <para>See also overline() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.StrikeOut">
            <summary>
            <para>Returns true if strikeout has been set; otherwise returns
            false.</para>
            <para>See also setStrikeOut().</para>
            <para></para>
            <para>If enable is true, sets strikeout on; otherwise sets strikeout
            off.</para>
            <para>See also strikeOut() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.FixedPitch">
            <summary>
            <para>Returns true if fixed pitch has been set; otherwise returns
            false.</para>
            <para>See also setFixedPitch() and QFontInfo::fixedPitch().</para>
            <para></para>
            <para>If enable is true, sets fixed pitch on; otherwise sets fixed
            pitch off.</para>
            <para>See also fixedPitch() and QFontInfo.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Kerning">
            <summary>
            <para>Returns true if kerning should be used when drawing text with
            this font.</para>
            <para>See also setKerning().</para>
            <para></para>
            <para>Enables kerning for this font if enable is true; otherwise
            disables it. By default, kerning is enabled.</para>
            <para>When kerning is enabled, glyph metrics do not add up anymore,
            even for Latin text. In other words, the assumption that width('a') +
            width('b') is equal to width(&quot;ab&quot;) is not necessarily
            true.</para>
            <para>See also kerning() and QFontMetrics.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.styleStrategy">
            <summary>
            <para>Returns the StyleStrategy.</para>
            <para>The style strategy affects the font matching algorithm. See
            QFont::StyleStrategy for the list of available strategies.</para>
            <para>See also setStyleStrategy(), setStyleHint(), and
            QFont::StyleHint.</para>
            <para></para>
            <para>Sets the style strategy for the font to s.</para>
            <para>See also styleStrategy() and QFont::StyleStrategy.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.stretch">
            <summary>
            <para>Returns the stretch factor for the font.</para>
            <para>See also setStretch().</para>
            <para></para>
            <para>Sets the stretch factor for the font.</para>
            <para>The stretch factor changes the width of all characters in the
            font by factor percent. For example, setting factor to 150 results in all
            characters in the font being 1.5 times (ie. 150%) wider. The default
            stretch factor is 100. The minimum stretch factor is 1, and the maximum
            stretch factor is 4000.</para>
            <para>The stretch factor is only applied to outline fonts. The stretch
            factor is ignored for bitmap fonts.</para>
            <para>See also stretch() and QFont::Stretch.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.WordSpacing">
            <summary>
            <para>Returns the word spacing for the font.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setWordSpacing() and setLetterSpacing().</para>
            <para></para>
            <para>Sets the word spacing for the font to spacing.</para>
            <para>Word spacing changes the default spacing between individual
            words. A positive value increases the word spacing by a corresponding
            amount of pixels, while a negative value decreases the inter-word spacing
            accordingly.</para>
            <para>Word spacing will not apply to writing systems, where indiviaul
            words are not separated by white space.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also wordSpacing() and setLetterSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.capitalization">
            <summary>
            <para>Returns the current capitalization type of the font.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setCapitalization().</para>
            <para></para>
            <para>Sets the capitalization of the text in this font to caps.</para>
            <para>A font's capitalization makes the text appear in the selected
            capitalization mode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also capitalization().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.hintingPreference">
            <summary>
            <para>Returns the currently preferred hinting level for glyphs rendered
            with this font.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setHintingPreference().</para>
            <para></para>
            <para>Set the preference for the hinting level of the glyphs to
            hintingPreference. This is a hint to the underlying font rendering system
            to use a certain level of hinting, and has varying support across
            platforms. See the table in the documentation for QFont::HintingPreference
            for more details.</para>
            <para>The default hinting preference is
            QFont::PreferDefaultHinting.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also hintingPreference().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.RawMode">
            <summary>
            <para>Returns true if raw mode is used for font name matching;
            otherwise returns false.</para>
            <para>See also setRawMode().</para>
            <para></para>
            <para>If enable is true, turns raw mode on; otherwise turns raw mode
            off. This function only has an effect under X11.</para>
            <para>If raw mode is enabled, Qt will search for an X font with a
            complete font name matching the family name, ignoring all other values set
            for the QFont. If the font name matches several fonts, Qt will use the
            first font returned by X. QFontInfo cannot be used to fetch information
            about a QFont using raw mode (it will return the values set in the QFont
            for all parameters, including the family name).</para>
            <para>Warning: Enabling raw mode has no effect since Qt 5.0.</para>
            <para>See also rawMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.RawName">
            <summary>
            <para>Returns the name of the font within the underlying window
            system.</para>
            <para>On X11, this function will return an empty string.</para>
            <para>Using the return value of this function is usually not
            portable.</para>
            <para>See also setRawName().</para>
            <para></para>
            <para>Sets a font by its system specific name.</para>
            <para>A font set with setRawName() is still a full-featured QFont. It
            can be queried (for example with italic()) or modified (for example with
            setItalic()) and is therefore also suitable for rendering rich text.</para>
            <para>If Qt's internal font database cannot resolve the raw name, the
            font becomes a raw font with name as its family.</para>
            <para>See also rawName() and setFamily().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.styleHint">
            <summary>
            <para>Returns the StyleHint.</para>
            <para>The style hint affects the font matching algorithm. See
            QFont::StyleHint for the list of available hints.</para>
            <para>See also setStyleHint(), QFont::StyleStrategy, and
            QFontInfo::styleHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.LetterSpacing">
            <summary>
            <para>Returns the letter spacing for the font.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setLetterSpacing(), letterSpacingType(), and
            setWordSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.LetterSpacingType">
            <summary>
            <para>Returns the spacing type used for letter spacing.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also letterSpacing(), setLetterSpacing(), and
            setWordSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Key">
            <summary>
            <para>Returns the font's key, a textual representation of a font. It is
            typically used as the key for a cache or dictionary of fonts.</para>
            <para>See also QMap.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.Substitutions">
            <summary>
            <para>Returns a sorted list of substituted family names.</para>
            <para>See also insertSubstitution(), removeSubstitution(), and
            substitute().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.DefaultFamily">
            <summary>
            <para>Returns the family name that corresponds to the current style
            hint.</para>
            <para>See also StyleHint, styleHint(), and setStyleHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.LastResortFamily">
            <summary>
            <para>Returns the &quot;last resort&quot; font family name.</para>
            <para>The current implementation tries a wide variety of common fonts,
            returning the first one it finds. Is is possible that no family is found in
            which case an empty string is returned.</para>
            <para>See also lastResortFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFont.LastResortFont">
            <summary>
            <para>Returns a &quot;last resort&quot; font name for the font matching
            algorithm. This is used if the last resort family is not available. It will
            always return a name, if necessary returning something like
            &quot;fixed&quot; or &quot;system&quot;.</para>
            <para>The current implementation tries a wide variety of common fonts,
            returning the first one it finds. The implementation may change at any
            time, but this function will always return a string containing
            something.</para>
            <para>It is theoretically possible that there really isn't a
            lastResortFont() in which case Qt will abort with an error message. We have
            not been able to identify a case where this happens. Please report it as a
            bug if it does, preferably with a list of the fonts you have
            installed.</para>
            <para>See also lastResortFamily().</para>
            </summary>
        </member>
        <member name="T:QtGui.QFont.StyleHint">
            <summary>
            <para>Style hints are used by the font matching algorithm to find an
            appropriate default family if a selected font family is not
            available.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Helvetica">
            <summary>is a synonym for SansSerif.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.SansSerif">
            <summary>the font matcher prefer sans serif fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Times">
            <summary>is a synonym for Serif.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Serif">
            <summary>the font matcher prefers serif fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Courier">
            <summary>a synonym for TypeWriter.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.TypeWriter">
            <summary>the font matcher prefers fixed pitch fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.OldEnglish">
            <summary>the font matcher prefers decorative fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Decorative">
            <summary>is a synonym for OldEnglish.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.System">
            <summary>the font matcher prefers system fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.AnyStyle">
            <summary>leaves the font matching algorithm to choose the family. This is the default.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Cursive">
            <summary>the font matcher prefers fonts that map to the CSS generic font-family 'cursive'.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Monospace">
            <summary>the font matcher prefers fonts that map to the CSS generic font-family 'monospace'.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleHint.Fantasy">
            <summary>the font matcher prefers fonts that map to the CSS generic font-family 'fantasy'.</summary>
        </member>
        <member name="T:QtGui.QFont.StyleStrategy">
            <summary>
            <para>The style strategy tells the font matching algorithm what type of
            fonts should be used to find an appropriate default family.</para>
            <para>The following strategies are available:</para>
            <para>Any of these may be OR-ed with one of these flags:</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferDefault">
            <summary>the default style strategy. It does not prefer any type of font.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferBitmap">
            <summary>prefers bitmap fonts (as opposed to outline fonts).</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferDevice">
            <summary>prefers device fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferOutline">
            <summary>prefers outline fonts (as opposed to bitmap fonts).</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.ForceOutline">
            <summary>forces the use of outline fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferMatch">
            <summary>prefer an exact match. The font matcher will try to use the exact font size that has been specified.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferQuality">
            <summary>prefer the best quality font. The font matcher will use the nearest standard point size that the font supports.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.PreferAntialias">
            <summary>antialias if possible.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.NoAntialias">
            <summary>don't antialias the fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.OpenGLCompatible">
            <summary>forces the use of OpenGL compatible fonts.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.ForceIntegerMetrics">
            <summary>forces the use of integer values in font engines that support fractional font metrics.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.NoSubpixelAntialias">
            <summary>avoid subpixel antialiasing on the fonts if possible.</summary>
        </member>
        <member name="F:QtGui.QFont.StyleStrategy.NoFontMerging">
            <summary>If the font selected for a certain writing system does not contain a character requested to draw, then Qt automatically chooses a similar looking font that contains the character. The NoFontMerging flag disables this feature. Please note that enabling this flag will not prevent Qt from automatically picking a suitable font when the selected font does not support the writing system of the text.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtGui.QFont.HintingPreference" -->
        <member name="F:QtGui.QFont.HintingPreference.PreferDefaultHinting">
            <summary>Use the default hinting level for the target platform.</summary>
        </member>
        <member name="F:QtGui.QFont.HintingPreference.PreferNoHinting">
            <summary>If possible, render text without hinting the outlines of the glyphs. The text layout will be typographically accurate and scalable, using the same metrics as are used e.g. when printing.</summary>
        </member>
        <member name="F:QtGui.QFont.HintingPreference.PreferVerticalHinting">
            <summary>If possible, render text with no horizontal hinting, but align glyphs to the pixel grid in the vertical direction. The text will appear crisper on displays where the density is too low to give an accurate rendering of the glyphs. But since the horizontal metrics of the glyphs are unhinted, the text's layout will be scalable to higher density devices (such as printers) without impacting details such as line breaks.</summary>
        </member>
        <member name="F:QtGui.QFont.HintingPreference.PreferFullHinting">
            <summary>If possible, render text with hinting in both horizontal and vertical directions. The text will be altered to optimize legibility on the target device, but since the metrics will depend on the target size of the text, the positions of glyphs, line breaks, and other typographical detail will not scale, meaning that a text layout may look different on devices with different pixel densities.</summary>
        </member>
        <member name="T:QtGui.QFont.Weight">
            <summary>
            <para>Qt uses a weighting scale from 0 to 99 similar to, but not the
            same as, the scales used in Windows or CSS. A weight of 0 will be thin,
            whilst 99 will be extremely black.</para>
            <para>This enum contains the predefined font weights:</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Thin">
            <summary>0</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.ExtraLight">
            <summary>12</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Light">
            <summary>25</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Normal">
            <summary>50</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Medium">
            <summary>57</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.DemiBold">
            <summary>63</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Bold">
            <summary>75</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.ExtraBold">
            <summary>81</summary>
        </member>
        <member name="F:QtGui.QFont.Weight.Black">
            <summary>87</summary>
        </member>
        <member name="T:QtGui.QFont.Style">
            <summary>
            <para>This enum describes the different styles of glyphs that are used
            to display text.</para>
            <para>See also Weight.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.Style.StyleNormal">
            <summary>Normal glyphs used in unstyled text.</summary>
        </member>
        <member name="F:QtGui.QFont.Style.StyleItalic">
            <summary>Italic glyphs that are specifically designed for the purpose of representing italicized text.</summary>
        </member>
        <member name="F:QtGui.QFont.Style.StyleOblique">
            <summary>Glyphs with an italic appearance that are typically based on the unstyled glyphs, but are not fine-tuned for the purpose of representing italicized text.</summary>
        </member>
        <member name="T:QtGui.QFont.Stretch">
            <summary>
            <para>Predefined stretch values that follow the CSS naming convention.
            The higher the value, the more stretched the text is.</para>
            <para>See also setStretch() and stretch().</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.UltraCondensed">
            <summary>50</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.ExtraCondensed">
            <summary>62</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.Condensed">
            <summary>75</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.SemiCondensed">
            <summary>87</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.Unstretched">
            <summary>100</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.SemiExpanded">
            <summary>112</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.Expanded">
            <summary>125</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.ExtraExpanded">
            <summary>150</summary>
        </member>
        <member name="F:QtGui.QFont.Stretch.UltraExpanded">
            <summary>200</summary>
        </member>
        <member name="T:QtGui.QFont.Capitalization">
            <summary>
            <para>Rendering option for text this font applies to.</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.Capitalization.MixedCase">
            <summary>This is the normal text rendering option where no capitalization change is applied.</summary>
        </member>
        <member name="F:QtGui.QFont.Capitalization.AllUppercase">
            <summary>This alters the text to be rendered in all uppercase type.</summary>
        </member>
        <member name="F:QtGui.QFont.Capitalization.AllLowercase">
            <summary>This alters the text to be rendered in all lowercase type.</summary>
        </member>
        <member name="F:QtGui.QFont.Capitalization.SmallCaps">
            <summary>This alters the text to be rendered in small-caps type.</summary>
        </member>
        <member name="F:QtGui.QFont.Capitalization.Capitalize">
            <summary>This alters the text to be rendered with the first character of each word as an uppercase character.</summary>
        </member>
        <member name="T:QtGui.QFont.SpacingType">
            <summary>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFont.SpacingType.PercentageSpacing">
            <summary>A value of 100 will keep the spacing unchanged; a value of 200 will enlarge the spacing after a character by the width of the character itself.</summary>
        </member>
        <member name="F:QtGui.QFont.SpacingType.AbsoluteSpacing">
            <summary>A positive value increases the letter spacing by the corresponding pixels; a negative value decreases the spacing.</summary>
        </member>
        <member name="T:QtGui.QStandardItem">
            <summary>
            <para>The QStandardItem class provides an item for use with the
            QStandardItemModel class.</para>
            </summary>
            <remarks>
            <para>Items usually contain text, icons, or checkboxes.</para>
            <para>Each item can have its own background brush which is set with the
            setBackground() function. The current background brush can be found with
            background(). The text label for each item can be rendered with its own
            font and brush. These are specified with the setFont() and setForeground()
            functions, and read with font() and foreground().</para>
            <para>By default, items are enabled, editable, selectable, checkable,
            and can be used both as the source of a drag and drop operation and as a
            drop target. Each item's flags can be changed by calling setFlags().
            Checkable items can be checked and unchecked with the setCheckState()
            function. The corresponding checkState() function indicates whether the
            item is currently checked.</para>
            <para>You can store application-specific data in an item by calling
            setData().</para>
            <para>Each item can have a two-dimensional table of child items. This
            makes it possible to build hierarchies of items. The typical hierarchy is
            the tree, in which case the child table is a table with a single column (a
            list).</para>
            <para>The dimensions of the child table can be set with setRowCount()
            and setColumnCount(). Items can be positioned in the child table with
            setChild(). Get a pointer to a child item with child(). New rows and
            columns of children can also be inserted with insertRow() and
            insertColumn(), or appended with appendRow() and appendColumn(). When using
            the append and insert functions, the dimensions of the child table will
            grow as needed.</para>
            <para>An existing row of children can be removed with removeRow() or
            takeRow(); correspondingly, a column can be removed with removeColumn() or
            takeColumn().</para>
            <para>An item's children can be sorted by calling
            sortChildren().</para>
            <para></para>
            <para>Subclassing</para>
            <para>When subclassing QStandardItem to provide custom items, it is
            possible to define new types for them so that they can be distinguished
            from the base class. The type() function should be reimplemented to return
            a new type value equal to or greater than UserType.</para>
            <para>Reimplement data() and setData() if you want to perform custom
            handling of data queries and/or control how an item's data is
            represented.</para>
            <para>Reimplement clone() if you want QStandardItemModel to be able to
            create instances of your custom item class on demand (see
            QStandardItemModel::setItemPrototype()).</para>
            <para>Reimplement read() and write() if you want to control how items
            are represented in their serialized form.</para>
            <para>Reimplement operator&lt;() if you want to control the semantics
            of item comparison. operator&lt;() determines the sorted order when sorting
            items with sortChildren() or with QStandardItemModel::sort().</para>
            <para></para>
            <para>See also QStandardItemModel, Item View Convenience Classes, and
            Model/View Programming.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QStandardItem.#ctor">
            <summary>
            <para>Constructs an item.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.#ctor(System.String)">
            <summary>
            <para>Constructs an item with the given text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.#ctor(QtGui.QIcon,System.String)">
            <summary>
            <para>Constructs an item with the given icon and text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs an item with rows rows and columns columns of child
            items.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.#ctor(QtGui.QStandardItem)">
            <summary>
            <para>Constructs a copy of other. Note that model() is not
            copied.</para>
            <para>This function is useful when reimplementing clone().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.Data(System.Int32)">
            <summary>
            <para>Returns the item's data for the given role, or an invalid
            QVariant if there is no data for the role.</para>
            <para>Note: The default implementation treats Qt::EditRole and
            Qt::DisplayRole as referring to the same data.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.SetData(QtCore.QVariant,System.Int32)">
            <summary>
            <para>Sets the item's data for the given role to the specified
            value.</para>
            <para>If you subclass QStandardItem and reimplement this function, your
            reimplementation should call emitDataChanged() if you do not call the base
            implementation of setData(). This will ensure that e.g. views using the
            model are notified of the changes.</para>
            <para>Note: The default implementation treats Qt::EditRole and
            Qt::DisplayRole as referring to the same data.</para>
            <para>See also Qt::ItemDataRole, data(), and setFlags().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.Child(System.Int32,System.Int32)">
            <summary>
            <para>Returns the child item at (row, column) if one has been set;
            otherwise returns 0.</para>
            <para>See also setChild(), takeChild(), and parent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.SetChild(System.Int32,System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>Sets the child item at (row, column) to item. This item (the
            parent item) takes ownership of item. If necessary, the row count and
            column count are increased to fit the item.</para>
            <para>See also child().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.SetChild(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the child at row to item.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.InsertRows(System.Int32,System.Int32)">
            <summary>
            <para>Inserts count rows of child items at row row.</para>
            <para>See also insertRow() and insertColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.InsertColumns(System.Int32,System.Int32)">
            <summary>
            <para>Inserts count columns of child items at column column.</para>
            <para>See also insertColumn() and insertRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.RemoveRow(System.Int32)">
            <summary>
            <para>Removes the given row. The items that were in the row are
            deleted.</para>
            <para>See also takeRow(), removeRows(), and removeColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.RemoveColumn(System.Int32)">
            <summary>
            <para>Removes the given column. The items that were in the column are
            deleted.</para>
            <para>See also takeColumn(), removeColumns(), and removeRow().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.RemoveRows(System.Int32,System.Int32)">
            <summary>
            <para>Removes count rows at row row. The items that were in those rows
            are deleted.</para>
            <para>See also removeRow() and removeColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            <para>Removes count columns at column column. The items that were in
            those columns are deleted.</para>
            <para>See also removeColumn() and removeRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.InsertRow(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a row at row containing item.</para>
            <para>When building a list or a tree that has only one column, this
            function provides a convenient way to insert a single new item.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.AppendRow(QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Appends a row containing item.</para>
            <para>When building a list or a tree that has only one column, this
            function provides a convenient way to append a single new item.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.TakeChild(System.Int32,System.Int32)">
            <summary>
            <para>Removes the child item at (row, column) without deleting it, and
            returns a pointer to the item. If there was no child at the given location,
            then this function returns 0.</para>
            <para>Note that this function, unlike takeRow() and takeColumn(), does
            not affect the dimensions of the child table.</para>
            <para>See also child(), takeRow(), and takeColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.SortChildren(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Sorts the children of the item using the given order, by the
            values in the given column.</para>
            <para>Note: This function is recursive, therefore it sorts the children
            of the item, its grandchildren, etc.</para>
            <para>See also operator&lt;().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.Clone">
            <summary>
            <para>Returns a copy of this item. The item's children are not
            copied.</para>
            <para>When subclassing QStandardItem, you can reimplement this function
            to provide QStandardItemModel with a factory that it can use to create new
            items on demand.</para>
            <para>See also QStandardItemModel::setItemPrototype() and
            operator=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.Read(QtCore.QDataStream)">
            <summary>
            <para>Reads the item from stream in. Only the data and flags of the
            item are read, not the child items.</para>
            <para>See also write().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.Write(QtCore.QDataStream)">
            <summary>
            <para>Writes the item to stream out. Only the data and flags of the
            item are written, not the child items.</para>
            <para>See also read().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.op_LessThan(QtGui.QStandardItem,QtGui.QStandardItem)">
            <summary>
            <para>Returns true if this item is less than other; otherwise returns
            false.</para>
            <para>The default implementation uses the data for the item's sort role
            (see QStandardItemModel::sortRole) to perform the comparison if the item
            belongs to a model; otherwise, the data for the item's Qt::DisplayRole
            (text()) is used to perform the comparison.</para>
            <para>sortChildren() and QStandardItemModel::sort() use this function
            when sorting items. If you want custom sorting, you can subclass
            QStandardItem and reimplement this function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItem.EmitDataChanged">
            <summary>
            <para>Causes the model associated with this item to emit a
            dataChanged() signal for this item.</para>
            <para>You normally only need to call this function if you have
            subclassed QStandardItem and reimplemented data() and/or setData().</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Text">
            <summary>
            <para>Returns the item's text. This is the text that's presented to the
            user in a view.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the item's text to the text specified.</para>
            <para>See also text(), setFont(), and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Icon">
            <summary>
            <para>Returns the item's icon.</para>
            <para>See also setIcon() and iconSize.</para>
            <para></para>
            <para>Sets the item's icon to the icon specified.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.ToolTip">
            <summary>
            <para>Returns the item's tooltip.</para>
            <para>See also setToolTip(), statusTip(), and whatsThis().</para>
            <para></para>
            <para>Sets the item's tooltip to the string specified by
            toolTip.</para>
            <para>See also toolTip(), setStatusTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.StatusTip">
            <summary>
            <para>Returns the item's status tip.</para>
            <para>See also setStatusTip(), toolTip(), and whatsThis().</para>
            <para></para>
            <para>Sets the item's status tip to the string specified by
            statusTip.</para>
            <para>See also statusTip(), setToolTip(), and setWhatsThis().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.WhatsThis">
            <summary>
            <para>Returns the item's &quot;What's This?&quot; help.</para>
            <para>See also setWhatsThis(), toolTip(), and statusTip().</para>
            <para></para>
            <para>Sets the item's &quot;What's This?&quot; help to the string
            specified by whatsThis.</para>
            <para>See also whatsThis(), setStatusTip(), and setToolTip().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.SizeHint">
            <summary>
            <para>Returns the size hint set for the item, or an invalid QSize if no
            size hint has been set.</para>
            <para>If no size hint has been set, the item delegate will compute the
            size hint based on the item data.</para>
            <para>See also setSizeHint().</para>
            <para></para>
            <para>Sets the size hint for the item to be size. If no size hint is
            set, the item delegate will compute the size hint based on the item
            data.</para>
            <para>See also sizeHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Font">
            <summary>
            <para>Returns the font used to render the item's text.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the font used to display the item's text to the given
            font.</para>
            <para>See also font(), setText(), and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.TextAlignment">
            <summary>
            <para>Returns the text alignment for the item's text.</para>
            <para>See also setTextAlignment().</para>
            <para></para>
            <para>Sets the text alignment for the item's text to the alignment
            specified.</para>
            <para>See also textAlignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Background">
            <summary>
            <para>Returns the brush used to render the item's background.</para>
            <para>See also foreground() and setBackground().</para>
            <para></para>
            <para>Sets the item's background brush to the specified brush.</para>
            <para>See also background() and setForeground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Foreground">
            <summary>
            <para>Returns the brush used to render the item's foreground (e.g.
            text).</para>
            <para>See also setForeground() and background().</para>
            <para></para>
            <para>Sets the brush used to display the item's foreground (e.g. text)
            to the given brush.</para>
            <para>See also foreground(), setBackground(), and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.CheckState">
            <summary>
            <para>Returns the checked state of the item.</para>
            <para>See also setCheckState() and isCheckable().</para>
            <para></para>
            <para>Sets the check state of the item to be state.</para>
            <para>See also checkState() and setCheckable().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.AccessibleText">
            <summary>
            <para>Returns the item's accessible text.</para>
            <para>The accessible text is used by assistive technologies (i.e. for
            users who cannot use conventional means of interaction).</para>
            <para>See also setAccessibleText() and accessibleDescription().</para>
            <para></para>
            <para>Sets the item's accessible text to the string specified by
            accessibleText.</para>
            <para>The accessible text is used by assistive technologies (i.e. for
            users who cannot use conventional means of interaction).</para>
            <para>See also accessibleText() and setAccessibleDescription().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.AccessibleDescription">
            <summary>
            <para>Returns the item's accessible description.</para>
            <para>The accessible description is used by assistive technologies
            (i.e. for users who cannot use conventional means of interaction).</para>
            <para>See also setAccessibleDescription() and accessibleText().</para>
            <para></para>
            <para>Sets the item's accessible description to the string specified by
            accessibleDescription.</para>
            <para>The accessible description is used by assistive technologies
            (i.e. for users who cannot use conventional means of interaction).</para>
            <para>See also accessibleDescription() and setAccessibleText().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Flags">
            <summary>
            <para>Returns the item flags for the item.</para>
            <para>The item flags determine how the user can interact with the
            item.</para>
            <para>By default, items are enabled, editable, selectable, checkable,
            and can be used both as the source of a drag and drop operation and as a
            drop target.</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Sets the item flags for the item to flags.</para>
            <para>The item flags determine how the user can interact with the item.
            This is often used to disable an item.</para>
            <para>See also flags() and setData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Enabled">
            <summary>
            <para>Returns whether the item is enabled.</para>
            <para>When an item is enabled, the user can interact with it. The
            possible types of interaction are specified by the other item flags, such
            as isEditable() and isSelectable().</para>
            <para>The default value is true.</para>
            <para>See also setEnabled() and flags().</para>
            <para></para>
            <para>Sets whether the item is enabled. If enabled is true, the item is
            enabled, meaning that the user can interact with the item; if enabled is
            false, the user cannot interact with the item.</para>
            <para>This flag takes precedence over the other item flags; e.g. if an
            item is not enabled, it cannot be selected by the user, even if the
            Qt::ItemIsSelectable flag has been set.</para>
            <para>See also isEnabled(), Qt::ItemIsEnabled, and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Editable">
            <summary>
            <para>Returns whether the item can be edited by the user.</para>
            <para>When an item is editable (and enabled), the user can edit the
            item by invoking one of the view's edit triggers; see
            QAbstractItemView::editTriggers.</para>
            <para>The default value is true.</para>
            <para>See also setEditable() and flags().</para>
            <para></para>
            <para>Sets whether the item is editable. If editable is true, the item
            can be edited by the user; otherwise, the user cannot edit the item.</para>
            <para>How the user can edit items in a view is determined by the view's
            edit triggers; see QAbstractItemView::editTriggers.</para>
            <para>See also isEditable() and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Selectable">
            <summary>
            <para>Returns whether the item is selectable by the user.</para>
            <para>The default value is true.</para>
            <para>See also setSelectable() and flags().</para>
            <para></para>
            <para>Sets whether the item is selectable. If selectable is true, the
            item can be selected by the user; otherwise, the user cannot select the
            item.</para>
            <para>You can control the selection behavior and mode by manipulating
            their view properties; see QAbstractItemView::selectionMode and
            QAbstractItemView::selectionBehavior.</para>
            <para>See also isSelectable() and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Checkable">
            <summary>
            <para>Returns whether the item is user-checkable.</para>
            <para>The default value is false.</para>
            <para>See also setCheckable(), checkState(), and isTristate().</para>
            <para></para>
            <para>Sets whether the item is user-checkable. If checkable is true,
            the item can be checked by the user; otherwise, the user cannot check the
            item.</para>
            <para>The item delegate will render a checkable item with a check box
            next to the item's text.</para>
            <para>See also isCheckable(), setCheckState(), and
            setTristate().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Tristate">
            <summary>
            <para>Returns whether the item is tristate; that is, if it's checkable
            with three separate states.</para>
            <para>The default value is false.</para>
            <para>See also setTristate(), isCheckable(), and checkState().</para>
            <para></para>
            <para>Sets whether the item is tristate. If tristate is true, the item
            is checkable with three separate states; otherwise, the item is checkable
            with two states. (Note that this also requires that the item is checkable;
            see isCheckable().)</para>
            <para>See also isTristate(), setCheckable(), and
            setCheckState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.DragEnabled">
            <summary>
            <para>Returns whether the item is drag enabled. An item that is drag
            enabled can be dragged by the user.</para>
            <para>The default value is true.</para>
            <para>Note that item dragging must be enabled in the view for dragging
            to work; see QAbstractItemView::dragEnabled.</para>
            <para>See also setDragEnabled(), isDropEnabled(), and flags().</para>
            <para></para>
            <para>Sets whether the item is drag enabled. If dragEnabled is true,
            the item can be dragged by the user; otherwise, the user cannot drag the
            item.</para>
            <para>Note that you also need to ensure that item dragging is enabled
            in the view; see QAbstractItemView::dragEnabled.</para>
            <para>See also isDragEnabled(), setDropEnabled(), and
            setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.DropEnabled">
            <summary>
            <para>Returns whether the item is drop enabled. When an item is drop
            enabled, it can be used as a drop target.</para>
            <para>The default value is true.</para>
            <para>See also setDropEnabled(), isDragEnabled(), and flags().</para>
            <para></para>
            <para>Sets whether the item is drop enabled. If dropEnabled is true,
            the item can be used as a drop target; otherwise, it cannot.</para>
            <para>Note that you also need to ensure that drops are enabled in the
            view; see QWidget::acceptDrops(); and that the model supports the desired
            drop actions; see QAbstractItemModel::supportedDropActions().</para>
            <para>See also isDropEnabled(), setDragEnabled(), and
            setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.RowCount">
            <summary>
            <para>Returns the number of child item rows that the item has.</para>
            <para>See also setRowCount() and columnCount().</para>
            <para></para>
            <para>Sets the number of child item rows to rows. If this is less than
            rowCount(), the data in the unwanted rows is discarded.</para>
            <para>See also rowCount() and setColumnCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.ColumnCount">
            <summary>
            <para>Returns the number of child item columns that the item
            has.</para>
            <para>See also setColumnCount() and rowCount().</para>
            <para></para>
            <para>Sets the number of child item columns to columns. If this is less
            than columnCount(), the data in the unwanted columns is discarded.</para>
            <para>See also columnCount() and setRowCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Parent">
            <summary>
            <para>Returns the item's parent item, or 0 if the item has no
            parent.</para>
            <para>Note: For toplevel items parent() returns 0. To receive toplevel
            item's parent use QStandardItemModel::invisibleRootItem() instead.</para>
            <para>See also child() and
            QStandardItemModel::invisibleRootItem().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Row">
            <summary>
            <para>Returns the row where the item is located in its parent's child
            table, or -1 if the item has no parent.</para>
            <para>See also column() and parent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Column">
            <summary>
            <para>Returns the column where the item is located in its parent's
            child table, or -1 if the item has no parent.</para>
            <para>See also row() and parent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Index">
            <summary>
            <para>Returns the QModelIndex associated with this item.</para>
            <para>When you need to invoke item functionality in a QModelIndex-based
            API (e.g. QAbstractItemView), you can call this function to obtain an index
            that corresponds to the item's location in the model.</para>
            <para>If the item is not associated with a model, an invalid
            QModelIndex is returned.</para>
            <para>See also model() and QStandardItemModel::itemFromIndex().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Model">
            <summary>
            <para>Returns the QStandardItemModel that this item belongs to.</para>
            <para>If the item is not a child of another item that belongs to the
            model, this function returns 0.</para>
            <para>See also index().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.HasChildren">
            <summary>
            <para>Returns true if this item has any children; otherwise returns
            false.</para>
            <para>See also rowCount(), columnCount(), and child().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItem.Type">
            <summary>
            <para>Returns the type of this item. The type is used to distinguish
            custom items from the base class. When subclassing QStandardItem, you
            should reimplement this function and return a new value greater than or
            equal to UserType.</para>
            <para>See also QStandardItem::Type.</para>
            </summary>
        </member>
        <member name="T:QtGui.QStandardItem.ItemType">
            <summary>
            <para>This enum describes the types that are used to describe standard
            items.</para>
            <para>You can define new user types in QStandardItem subclasses to
            ensure that custom items are treated specially; for example, when items are
            sorted.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtGui.QStandardItem.ItemType.Type">
            <summary>The default type for standard items.</summary>
        </member>
        <member name="F:QtGui.QStandardItem.ItemType.UserType">
            <summary>The minimum value for custom types. Values below UserType are reserved by Qt.</summary>
        </member>
        <member name="T:QtGui.QStandardItemModel">
            <summary>
            <para>The QStandardItemModel class provides a generic model for storing
            custom data.</para>
            </summary>
            <remarks>
            <para>QStandardItemModel can be used as a repository for standard Qt
            data types. It is one of the Model/View Classes and is part of Qt's
            model/view framework.</para>
            <para>QStandardItemModel provides a classic item-based approach to
            working with the model. The items in a QStandardItemModel are provided by
            QStandardItem.</para>
            <para>QStandardItemModel implements the QAbstractItemModel interface,
            which means that the model can be used to provide data in any view that
            supports that interface (such as QListView, QTableView and QTreeView, and
            your own custom views). For performance and flexibility, you may want to
            subclass QAbstractItemModel to provide support for different kinds of data
            repositories. For example, the QDirModel provides a model interface to the
            underlying file system.</para>
            <para>When you want a list or tree, you typically create an empty
            QStandardItemModel and use appendRow() to add items to the model, and
            item() to access an item. If your model represents a table, you typically
            pass the dimensions of the table to the QStandardItemModel constructor and
            use setItem() to position items into the table. You can also use
            setRowCount() and setColumnCount() to alter the dimensions of the model. To
            insert items, use insertRow() or insertColumn(), and to remove items, use
            removeRow() or removeColumn().</para>
            <para>You can set the header labels of your model with
            setHorizontalHeaderLabels() and setVerticalHeaderLabels().</para>
            <para>You can search for items in the model with findItems(), and sort
            the model by calling sort().</para>
            <para>Call clear() to remove all items from the model.</para>
            <para>An example usage of QStandardItemModel to create a table:</para>
            <para>QStandardItemModel model(4, 4);</para>
            <para>for (int row = 0; row &lt; 4; ++row) {</para>
            <para>    for (int column = 0; column &lt; 4; ++column) {</para>
            <para>        QStandardItem *item = new QStandardItem(QString(&quot;row
            %0, column %1&quot;).arg(row).arg(column));</para>
            <para>        model.setItem(row, column, item);</para>
            <para>    }</para>
            <para>}</para>
            <para>An example usage of QStandardItemModel to create a tree:</para>
            <para>QStandardItemModel model;</para>
            <para>QStandardItem *parentItem = model.invisibleRootItem();</para>
            <para>for (int i = 0; i &lt; 4; ++i) {</para>
            <para>    QStandardItem *item = new QStandardItem(QString(&quot;item
            %0&quot;).arg(i));</para>
            <para>    parentItem-&gt;appendRow(item);</para>
            <para>    parentItem = item;</para>
            <para>}</para>
            <para>After setting the model on a view, you typically want to react to
            user actions, such as an item being clicked. Since a QAbstractItemView
            provides QModelIndex-based signals and functions, you need a way to obtain
            the QStandardItem that corresponds to a given QModelIndex, and vice versa.
            itemFromIndex() and indexFromItem() provide this mapping. Typical usage of
            itemFromIndex() includes obtaining the item at the current index in a view,
            and obtaining the item that corresponds to an index carried by a
            QAbstractItemView signal, such as QAbstractItemView::clicked(). First you
            connect the view's signal to a slot in your class:</para>
            <para>QTreeView *treeView = new QTreeView(this);</para>
            <para>treeView-&gt;setModel(myStandardItemModel);</para>
            <para>connect(treeView, SIGNAL(clicked(QModelIndex)),</para>
            <para>        this, SLOT(clicked(QModelIndex)));</para>
            <para>When you receive the signal, you call itemFromIndex() on the
            given model index to get a pointer to the item:</para>
            <para>void MyWidget::clicked(const QModelIndex &amp;index)</para>
            <para>{</para>
            <para>    QStandardItem *item =
            myStandardItemModel-&gt;itemFromIndex(index);</para>
            <para>    // Do stuff with the item ...</para>
            <para>}</para>
            <para>Conversely, you must obtain the QModelIndex of an item when you
            want to invoke a model/view function that takes an index as argument. You
            can obtain the index either by using the model's indexFromItem() function,
            or, equivalently, by calling QStandardItem::index():</para>
            <para>treeView-&gt;scrollTo(item-&gt;index());</para>
            <para>You are, of course, not required to use the item-based approach;
            you could instead rely entirely on the QAbstractItemModel interface when
            working with the model, or use a combination of the two as
            appropriate.</para>
            <para></para>
            <para>See also QStandardItem, Model/View Programming,
            QAbstractItemModel, Simple Tree Model example, and Item View Convenience
            Classes.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QStandardItemModel.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new item model with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.#ctor(System.Int32,System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a new item model that initially has rows rows and
            columns columns, and that has the given parent.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Index(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::index().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.parent(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::parent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.RowCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::rowCount().</para>
            <para>See also setRowCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.ColumnCount(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::columnCount().</para>
            <para>See also setColumnCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.HasChildren(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::hasChildren().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Sibling(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sibling().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Data(QtCore.QModelIndex,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::data().</para>
            <para>See also setData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetData(QtCore.QModelIndex,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setData().</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.HeaderData(System.Int32,QtCore.Qt.Orientation,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::headerData().</para>
            <para>See also setHeaderData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetHeaderData(System.Int32,QtCore.Qt.Orientation,QtCore.QVariant,System.Int32)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::setHeaderData().</para>
            <para>See also headerData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.InsertRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.InsertColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::insertColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.RemoveRows(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.RemoveColumns(System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::removeColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Flags(QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::flags().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Clear">
            <summary>
            <para>Removes all items (including header items) from the model and
            sets the number of rows and columns to zero.</para>
            <para>See also removeColumns() and removeRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Sort(System.Int32,QtCore.Qt.SortOrder)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::sort().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.ItemFromIndex(QtCore.QModelIndex)">
            <summary>
            <para>Returns a pointer to the QStandardItem associated with the given
            index.</para>
            <para>Calling this function is typically the initial step when
            processing QModelIndex-based signals from a view, such as
            QAbstractItemView::activated(). In your slot, you call itemFromIndex(),
            with the QModelIndex carried by the signal as argument, to obtain a pointer
            to the corresponding QStandardItem.</para>
            <para>Note that this function will lazily create an item for the index
            (using itemPrototype()), and set it in the parent item's child table, if no
            item already exists at that index.</para>
            <para>If index is an invalid index, this function returns 0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also indexFromItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.IndexFromItem(QtGui.QStandardItem)">
            <summary>
            <para>Returns the QModelIndex associated with the given item.</para>
            <para>Use this function when you want to perform an operation that
            requires the QModelIndex of the item, such as
            QAbstractItemView::scrollTo(). QStandardItem::index() is provided as
            convenience; it is equivalent to calling this function.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also itemFromIndex() and QStandardItem::index().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.Item(System.Int32,System.Int32)">
            <summary>
            <para>Returns the item for the given row and column if one has been
            set; otherwise returns 0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setItem(), takeItem(), and itemFromIndex().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetItem(System.Int32,System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>Sets the item for the given row and column to item. The model
            takes ownership of the item. If necessary, the row count and column count
            are increased to fit the item. The previous item at the given location (if
            there was one) is deleted.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also item().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetItem(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.HorizontalHeaderItem(System.Int32)">
            <summary>
            <para>Returns the horizontal header item for column if one has been
            set; otherwise returns 0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setHorizontalHeaderItem() and
            verticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetHorizontalHeaderItem(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>Sets the horizontal header item for column to item. The model
            takes ownership of the item. If necessary, the column count is increased to
            fit the item. The previous header item (if there was one) is
            deleted.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also horizontalHeaderItem(), setHorizontalHeaderLabels(), and
            setVerticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.VerticalHeaderItem(System.Int32)">
            <summary>
            <para>Returns the vertical header item for row row if one has been set;
            otherwise returns 0.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setVerticalHeaderItem() and
            horizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetVerticalHeaderItem(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>Sets the vertical header item for row to item. The model takes
            ownership of the item. If necessary, the row count is increased to fit the
            item. The previous header item (if there was one) is deleted.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also verticalHeaderItem(), setVerticalHeaderLabels(), and
            setHorizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetHorizontalHeaderLabels(QtCore.QStringList)">
            <summary>
            <para>Sets the horizontal header labels using labels. If necessary, the
            column count is increased to the size of labels.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setHorizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetVerticalHeaderLabels(QtCore.QStringList)">
            <summary>
            <para>Sets the vertical header labels using labels. If necessary, the
            row count is increased to the size of labels.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setVerticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetRowCount(System.Int32)">
            <summary>
            <para>Sets the number of rows in this model to rows. If this is less
            than rowCount(), the data in the unwanted rows is discarded.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also rowCount() and setColumnCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.SetColumnCount(System.Int32)">
            <summary>
            <para>Sets the number of columns in this model to columns. If this is
            less than columnCount(), the data in the unwanted columns is
            discarded.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also columnCount() and setRowCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.AppendRow(QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>When building a list or a tree that has only one column, this
            function provides a convenient way to append a single new item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.InsertRow(System.Int32,QtGui.QStandardItem)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a row at row containing item.</para>
            <para>When building a list or a tree that has only one column, this
            function provides a convenient way to append a single new item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.InsertRow(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Inserts a single row before the given row in the child items of
            the parent specified. Returns true if the row is inserted; otherwise
            returns false.</para>
            <para>See also insertRows(), insertColumn(), and removeRow().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.InsertColumn(System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Inserts a single column before the given column in the child
            items of the parent specified. Returns true if the column is inserted;
            otherwise returns false.</para>
            <para>See also insertColumns(), insertRow(), and removeColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.TakeItem(System.Int32,System.Int32)">
            <summary>
            <para>Removes the item at (row, column) without deleting it. The model
            releases ownership of the item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also item(), takeRow(), and takeColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.TakeHorizontalHeaderItem(System.Int32)">
            <summary>
            <para>Removes the horizontal header item at column from the header
            without deleting it, and returns a pointer to the item. The model releases
            ownership of the item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also horizontalHeaderItem() and
            takeVerticalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.TakeVerticalHeaderItem(System.Int32)">
            <summary>
            <para>Removes the vertical header item at row from the header without
            deleting it, and returns a pointer to the item. The model releases
            ownership of the item.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also verticalHeaderItem() and
            takeHorizontalHeaderItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStandardItemModel.DropMimeData(QtCore.QMimeData,QtCore.Qt.DropAction,System.Int32,System.Int32,QtCore.QModelIndex)">
            <summary>
            <para>Reimplemented from QAbstractItemModel::dropMimeData().</para>
            </summary>
        </member>
        <member name="E:QtGui.QStandardItemModel.ItemChanged">
            <summary>
            <para>This signal is emitted whenever the data of item has changed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItemModel.ItemPrototype">
            <summary>
            <para>Returns the item prototype used by the model. The model uses the
            item prototype as an item factory when it needs to construct new items on
            demand (for instance, when a view or item delegate calls setData()).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setItemPrototype().</para>
            <para></para>
            <para>Sets the item prototype for the model to the specified item. The
            model takes ownership of the prototype.</para>
            <para>The item prototype acts as a QStandardItem factory, by relying on
            the QStandardItem::clone() function. To provide your own prototype,
            subclass QStandardItem, reimplement QStandardItem::clone() and set the
            prototype to be an instance of your custom class. Whenever
            QStandardItemModel needs to create an item on demand (for instance, when a
            view or item delegate calls setData())), the new items will be instances of
            your custom class.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also itemPrototype() and QStandardItem::clone().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItemModel.SortRole">
            <summary>
            <para>This property holds the item role that is used to query the
            model's data when sorting items.</para>
            <para>The default value is Qt::DisplayRole.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also sort() and QStandardItem::sortChildren().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItemModel.SupportedDropActions">
            <summary>
            <para>Reimplemented from
            QAbstractItemModel::supportedDropActions().</para>
            <para>QStandardItemModel supports both copy and move.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItemModel.MimeTypes">
            <summary>
            <para>Reimplemented from QAbstractItemModel::mimeTypes().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStandardItemModel.InvisibleRootItem">
            <summary>
            <para>Returns the model's invisible root item.</para>
            <para>The invisible root item provides access to the model's top-level
            items through the QStandardItem API, making it possible to write functions
            that can treat top-level items and their children in a uniform way; for
            example, recursive functions involving a tree model.</para>
            <para>Note: Calling index() on the QStandardItem object retrieved from
            this function is not valid.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtGui.QClipboard">
            <summary>
            <para>The QClipboard class provides access to the window system
            clipboard.</para>
            </summary>
            <remarks>
            <para>The clipboard offers a simple mechanism to copy and paste data
            between applications.</para>
            <para>QClipboard supports the same data types that QDrag does, and uses
            similar mechanisms. For advanced clipboard usage read Drag and Drop.</para>
            <para>There is a single QClipboard object in an application, accessible
            as QApplication::clipboard().</para>
            <para>Example:</para>
            <para>QClipboard *clipboard = QApplication::clipboard();</para>
            <para>QString originalText = clipboard-&gt;text();</para>
            <para>...</para>
            <para>clipboard-&gt;setText(newText);</para>
            <para>QClipboard features some convenience functions to access common
            data types: setText() allows the exchange of Unicode text and setPixmap()
            and setImage() allows the exchange of QPixmaps and QImages between
            applications. The setMimeData() function is the ultimate in flexibility: it
            allows you to add any QMimeData into the clipboard. There are corresponding
            getters for each of these, e.g. text(), image() and pixmap(). You can clear
            the clipboard by calling clear().</para>
            <para>A typical example of the use of these functions follows:</para>
            <para>void DropArea::paste()</para>
            <para>{</para>
            <para>    const QClipboard *clipboard =
            QApplication::clipboard();</para>
            <para>    const QMimeData *mimeData = clipboard-&gt;mimeData();</para>
            <para></para>
            <para>    if (mimeData-&gt;hasImage()) {</para>
            <para>
            setPixmap(qvariant_cast&lt;QPixmap&gt;(mimeData-&gt;imageData()));</para>
            <para>    } else if (mimeData-&gt;hasHtml()) {</para>
            <para>        setText(mimeData-&gt;html());</para>
            <para>        setTextFormat(Qt::RichText);</para>
            <para>    } else if (mimeData-&gt;hasText()) {</para>
            <para>        setText(mimeData-&gt;text());</para>
            <para>        setTextFormat(Qt::PlainText);</para>
            <para>    } else {</para>
            <para>        setText(tr(&quot;Cannot display data&quot;));</para>
            <para>    }</para>
            <para></para>
            <para>Notes for X11 Users</para>
            <para></para>
            <para>The X11 Window System has the concept of a separate selection and
            clipboard. When text is selected, it is immediately available as the global
            mouse selection. The global mouse selection may later be copied to the
            clipboard. By convention, the middle mouse button is used to paste the
            global mouse selection.</para>
            <para>X11 also has the concept of ownership; if you change the
            selection within a window, X11 will only notify the owner and the previous
            owner of the change, i.e. it will not notify all applications that the
            selection or clipboard data changed.</para>
            <para>Lastly, the X11 clipboard is event driven, i.e. the clipboard
            will not function properly if the event loop is not running. Similarly, it
            is recommended that the contents of the clipboard are stored or retrieved
            in direct response to user-input events, e.g. mouse button or key presses
            and releases. You should not store or retrieve the clipboard contents in
            response to timer or non-user-input events.</para>
            <para>Since there is no standard way to copy and paste files between
            applications on X11, various MIME types and conventions are currently in
            use. For instance, Nautilus expects files to be supplied with a
            x-special/gnome-copied-files MIME type with data beginning with the
            cut/copy action, a newline character, and the URL of the file.</para>
            <para></para>
            <para></para>
            <para>Notes for Mac OS X Users</para>
            <para>Mac OS X supports a separate find buffer that holds the current
            search string in Find operations. This find clipboard can be accessed by
            specifying the FindBuffer mode.</para>
            <para></para>
            <para>Notes for Windows and Mac OS X Users</para>
            <para></para>
            <para>Windows and Mac OS X do not support the global mouse selection;
            they only supports the global clipboard, i.e. they only add text to the
            clipboard when an explicit copy or cut is made.</para>
            <para>Windows and Mac OS X does not have the concept of ownership; the
            clipboard is a fully global resource so all applications are notified of
            changes.</para>
            <para></para>
            <para></para>
            <para>See also QApplication.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QClipboard.Clear(QtGui.QClipboard.Mode)">
            <summary>
            <para>Clear the clipboard contents.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, this function clears
            the global clipboard contents. If mode is QClipboard::Selection, this
            function clears the global mouse selection contents. If mode is
            QClipboard::FindBuffer, this function clears the search string
            buffer.</para>
            <para>See also QClipboard::Mode and supportsSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.Text(QtGui.QClipboard.Mode)">
            <summary>
            <para>Returns the clipboard text as plain text, or an empty string if
            the clipboard does not contain any text.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the text is retrieved
            from the global clipboard. If mode is QClipboard::Selection, the text is
            retrieved from the global mouse selection. If mode is
            QClipboard::FindBuffer, the text is retrieved from the search string
            buffer.</para>
            <para>See also setText() and mimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.Text(System.String,QtGui.QClipboard.Mode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the clipboard text in subtype subtype, or an empty string
            if the clipboard does not contain any text. If subtype is null, any subtype
            is acceptable, and subtype is set to the chosen subtype.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the text is retrieved
            from the global clipboard. If mode is QClipboard::Selection, the text is
            retrieved from the global mouse selection.</para>
            <para>Common values for subtype are &quot;plain&quot; and
            &quot;html&quot;.</para>
            <para>Note that calling this function repeatedly, for instance from a
            key event handler, may be slow. In such cases, you should use the
            dataChanged() signal instead.</para>
            <para>See also setText() and mimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.SetText(System.String,QtGui.QClipboard.Mode)">
            <summary>
            <para>Copies text into the clipboard as plain text.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the text is stored in
            the global clipboard. If mode is QClipboard::Selection, the text is stored
            in the global mouse selection. If mode is QClipboard::FindBuffer, the text
            is stored in the search string buffer.</para>
            <para>See also text() and setMimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.MimeData(QtGui.QClipboard.Mode)">
            <summary>
            <para>Returns a reference to a QMimeData representation of the current
            clipboard data.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the data is retrieved
            from the global clipboard. If mode is QClipboard::Selection, the data is
            retrieved from the global mouse selection. If mode is
            QClipboard::FindBuffer, the data is retrieved from the search string
            buffer.</para>
            <para>The text(), image(), and pixmap() functions are simpler wrappers
            for retrieving text, image, and pixmap data.</para>
            <para>See also setMimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.SetMimeData(QtCore.QMimeData,QtGui.QClipboard.Mode)">
            <summary>
            <para>Sets the clipboard data to src. Ownership of the data is
            transferred to the clipboard. If you want to remove the data either call
            clear() or call setMimeData() again with new data.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the data is stored in
            the global clipboard. If mode is QClipboard::Selection, the data is stored
            in the global mouse selection. If mode is QClipboard::FindBuffer, the data
            is stored in the search string buffer.</para>
            <para>The setText(), setImage() and setPixmap() functions are simpler
            wrappers for setting text, image and pixmap data respectively.</para>
            <para>See also mimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.Image(QtGui.QClipboard.Mode)">
            <summary>
            <para>Returns the clipboard image, or returns a null image if the
            clipboard does not contain an image or if it contains an image in an
            unsupported image format.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the image is retrieved
            from the global clipboard. If mode is QClipboard::Selection, the image is
            retrieved from the global mouse selection.</para>
            <para>See also setImage(), pixmap(), mimeData(), and
            QImage::isNull().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.Pixmap(QtGui.QClipboard.Mode)">
            <summary>
            <para>Returns the clipboard pixmap, or null if the clipboard does not
            contain a pixmap. Note that this can lose information. For example, if the
            image is 24-bit and the display is 8-bit, the result is converted to 8
            bits, and if the image has an alpha channel, the result just has a
            mask.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the pixmap is
            retrieved from the global clipboard. If mode is QClipboard::Selection, the
            pixmap is retrieved from the global mouse selection.</para>
            <para>See also setPixmap(), image(), mimeData(), and
            QPixmap::convertFromImage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.SetImage(QtGui.QImage,QtGui.QClipboard.Mode)">
            <summary>
            <para>Copies the image into the clipboard.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the image is stored in
            the global clipboard. If mode is QClipboard::Selection, the data is stored
            in the global mouse selection.</para>
            <para>This is shorthand for:</para>
            <para>QMimeData *data = new QMimeData;</para>
            <para>data-&gt;setImageData(image);</para>
            <para>clipboard-&gt;setMimeData(data, mode);</para>
            <para>See also image(), setPixmap(), and setMimeData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QClipboard.SetPixmap(QtGui.QPixmap,QtGui.QClipboard.Mode)">
            <summary>
            <para>Copies pixmap into the clipboard. Note that this is slower than
            setImage() because it needs to convert the QPixmap to a QImage
            first.</para>
            <para>The mode argument is used to control which part of the system
            clipboard is used. If mode is QClipboard::Clipboard, the pixmap is stored
            in the global clipboard. If mode is QClipboard::Selection, the pixmap is
            stored in the global mouse selection.</para>
            <para>See also pixmap(), setImage(), and setMimeData().</para>
            </summary>
        </member>
        <member name="E:QtGui.QClipboard.Changed">
            <summary>
            <para>This signal is emitted when the data for the given clipboard mode is changed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also dataChanged(), selectionChanged(), and findBufferChanged().</para>
            </summary>
        </member>
        <member name="E:QtGui.QClipboard.SelectionChanged">
            <summary>
            <para>This signal is emitted when the selection is changed. This only applies to windowing systems that support selections, e.g. X11. Windows and Mac OS X don't support selections.</para>
            <para>See also dataChanged(), findBufferChanged(), and changed().</para>
            </summary>
        </member>
        <member name="E:QtGui.QClipboard.FindBufferChanged">
            <summary>
            <para>This signal is emitted when the find buffer is changed. This only applies to Mac OS X.</para>
            <para>With Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also dataChanged(), selectionChanged(), and changed().</para>
            </summary>
        </member>
        <member name="E:QtGui.QClipboard.DataChanged">
            <summary>
            <para>This signal is emitted when the clipboard data is changed.</para>
            <para>On Mac OS X and with Qt version 4.3 or higher, clipboard changes made by other applications will only be detected when the application is activated.</para>
            <para>See also findBufferChanged(), selectionChanged(), and changed().</para>
            </summary>
        </member>
        <member name="P:QtGui.QClipboard.SupportsSelection">
            <summary>
            <para>Returns true if the clipboard supports mouse selection; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QClipboard.SupportsFindBuffer">
            <summary>
            <para>Returns true if the clipboard supports a separate search buffer;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QClipboard.OwnsSelection">
            <summary>
            <para>Returns true if this clipboard object owns the mouse selection
            data; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QClipboard.OwnsClipboard">
            <summary>
            <para>Returns true if this clipboard object owns the clipboard data;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QClipboard.OwnsFindBuffer">
            <summary>
            <para>Returns true if this clipboard object owns the find buffer data;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="T:QtGui.QClipboard.Mode">
            <summary>
            <para>This enum type is used to control which part of the system
            clipboard is used by QClipboard::mimeData(), QClipboard::setMimeData() and
            related functions.</para>
            <para>See also QClipboard::supportsSelection().</para>
            </summary>
        </member>
        <member name="F:QtGui.QClipboard.Mode.Clipboard">
            <summary>indicates that data should be stored and retrieved from the global clipboard.</summary>
        </member>
        <member name="F:QtGui.QClipboard.Mode.Selection">
            <summary>indicates that data should be stored and retrieved from the global mouse selection. Support for Selection is provided only on systems with a global mouse selection (e.g. X11).</summary>
        </member>
        <member name="F:QtGui.QClipboard.Mode.FindBuffer">
            <summary>indicates that data should be stored and retrieved from the Find buffer. This mode is used for holding search strings on Mac OS X.</summary>
        </member>
        <member name="T:QtGui.QCursor">
            <summary>
            <para>The QCursor class provides a mouse cursor with an arbitrary
            shape.</para>
            </summary>
            <remarks>
            <para>This class is mainly used to create mouse cursors that are
            associated with particular widgets and to get and set the position of the
            mouse cursor.</para>
            <para>Qt has a number of standard cursor shapes, but you can also make
            custom cursor shapes based on a QBitmap, a mask and a hotspot.</para>
            <para>To associate a cursor with a widget, use QWidget::setCursor(). To
            associate a cursor with all widgets (normally for a short period of time),
            use QGuiApplication::setOverrideCursor().</para>
            <para>To set a cursor shape use QCursor::setShape() or use the QCursor
            constructor which takes the shape as argument, or you can use one of the
            predefined cursors defined in the Qt::CursorShape enum.</para>
            <para>If you want to create a cursor with your own bitmap, either use
            the QCursor constructor which takes a bitmap and a mask or the constructor
            which takes a pixmap as arguments.</para>
            <para>To set or get the position of the mouse cursor use the static
            methods QCursor::pos() and QCursor::setPos().</para>
            <para>Note: It is possible to create a QCursor before QGuiApplication,
            but it is not useful except as a place-holder for a real QCursor created
            after QGuiApplication. Attempting to use a QCursor that was created before
            QGuiApplication will result in a crash.</para>
            <para></para>
            <para>A Note for X11 Users</para>
            <para>On X11, Qt supports the Xcursor library, which allows for full
            color icon themes. The table below shows the cursor name used for each
            Qt::CursorShape value. If a cursor cannot be found using the name shown
            below, a standard X11 cursor will be used instead. Note: X11 does not
            provide appropriate cursors for all possible Qt::CursorShape values. It is
            possible that some cursors will be taken from the Xcursor theme, while
            others will use an internal bitmap cursor.</para>
            <para></para>
            <para> ShapeQt::CursorShape ValueCursor NameShapeQt::CursorShape
            ValueCursor Name</para>
            <para>	Qt::ArrowCursor	left_ptr	Qt::SizeVerCursor	size_ver</para>
            <para>	Qt::UpArrowCursor	up_arrow	Qt::SizeHorCursor	size_hor</para>
            <para>	Qt::CrossCursor	cross	Qt::SizeBDiagCursor	size_bdiag</para>
            <para>	Qt::IBeamCursor	ibeam	Qt::SizeFDiagCursor	size_fdiag</para>
            <para>	Qt::WaitCursor	wait	Qt::SizeAllCursor	size_all</para>
            <para>	Qt::BusyCursor	left_ptr_watch	Qt::SplitVCursor	split_v</para>
            <para>	Qt::ForbiddenCursor	forbidden	Qt::SplitHCursor	split_h</para>
            <para>	Qt::PointingHandCursor	pointing_hand	Qt::OpenHandCursor
            openhand</para>
            <para>	Qt::WhatsThisCursor	whats_this	Qt::ClosedHandCursor
            closedhand</para>
            <para>	Qt::DragMoveCursor	dnd-move or move	Qt::DragCopyCursor	dnd-copy
            or copy</para>
            <para>	Qt::DragLinkCursor	dnd-link or link</para>
            <para></para>
            <para></para>
            <para>See also QWidget and GUI Design Handbook: Cursors.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QCursor.#ctor">
            <summary>
            <para>Constructs a cursor with the default arrow shape.</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.#ctor(QtCore.Qt.CursorShape)">
            <summary>
            <para>Constructs a cursor with the specified shape.</para>
            <para>See Qt::CursorShape for a list of shapes.</para>
            <para>See also setShape().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.#ctor(QtGui.QBitmap,QtGui.QBitmap,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a custom bitmap cursor.</para>
            <para>bitmap and mask make up the bitmap. hotX and hotY define the
            cursor's hot spot.</para>
            <para>If hotX is negative, it is set to the bitmap().width()/2. If hotY
            is negative, it is set to the bitmap().height()/2.</para>
            <para>The cursor bitmap (B) and mask (M) bits are combined like
            this:</para>
            <para></para>
            <para>B=1 and M=1 gives black.</para>
            <para>B=0 and M=1 gives white.</para>
            <para>B=0 and M=0 gives transparent.</para>
            <para>B=1 and M=0 gives an XOR'd result under Windows, undefined
            results on all other platforms.</para>
            <para></para>
            <para>Use the global Qt color Qt::color0 to draw 0-pixels and
            Qt::color1 to draw 1-pixels in the bitmaps.</para>
            <para>Valid cursor sizes depend on the display hardware (or the
            underlying window system). We recommend using 32 x 32 cursors, because this
            size is supported on all platforms. Some platforms also support 16 x 16, 48
            x 48, and 64 x 64 cursors.</para>
            <para>Note: On Windows CE, the cursor size is fixed. If the pixmap is
            bigger than the system size, it will be scaled.</para>
            <para>See also QBitmap::QBitmap() and QBitmap::setMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.#ctor(QtGui.QPixmap,System.Int32,System.Int32)">
            <summary>
            <para>Constructs a custom pixmap cursor.</para>
            <para>pixmap is the image. It is usual to give it a mask (set using
            QPixmap::setMask()). hotX and hotY define the cursor's hot spot.</para>
            <para>If hotX is negative, it is set to the pixmap().width()/2. If hotY
            is negative, it is set to the pixmap().height()/2.</para>
            <para>Valid cursor sizes depend on the display hardware (or the
            underlying window system). We recommend using 32 x 32 cursors, because this
            size is supported on all platforms. Some platforms also support 16 x 16, 48
            x 48, and 64 x 64 cursors.</para>
            <para>Note: On Windows CE, the cursor size is fixed. If the pixmap is
            bigger than the system size, it will be scaled.</para>
            <para>See also QPixmap::QPixmap() and QPixmap::setMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.#ctor(QtGui.QCursor)">
            <summary>
            <para>Constructs a copy of the cursor c.</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.op_Implicit(QtGui.QCursor)~QtCore.QVariant">
            <summary>
            <para>Returns the cursor as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.GetPos(QtGui.QScreen)">
            <summary>
            <para>Returns the position of the cursor (hot spot) of the screen in
            global screen coordinates.</para>
            <para>You can call QWidget::mapFromGlobal() to translate it to widget
            coordinates.</para>
            <para>See also setPos(), QWidget::mapFromGlobal(), and
            QWidget::mapToGlobal().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.SetPos(System.Int32,System.Int32)">
            <summary>
            <para>Moves the cursor (hot spot) of the primary screen to the global
            screen position (x, y).</para>
            <para>You can call QWidget::mapToGlobal() to translate widget
            coordinates to global screen coordinates.</para>
            <para>See also pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal(),
            and QGuiApplication::primaryScreen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.SetPos(QtGui.QScreen,System.Int32,System.Int32)">
            <summary>
            <para>Moves the cursor (hot spot) of the screen to the global screen
            position (x, y).</para>
            <para>You can call QWidget::mapToGlobal() to translate widget
            coordinates to global screen coordinates.</para>
            <para>Note: Calling this function results in changing the cursor
            position through the windowing system. The windowing system will typically
            respond by sending mouse events to the application's window. This means
            that the usage of this function should be avoided in unit tests and
            everywhere where fake mouse events are being injected via
            QWindowSystemInterface because the windowing system's mouse state (with
            regards to buttons for example) may not match the state in the
            application-generated events.</para>
            <para>Note: On platforms where there is no windowing system or cursors
            are not available, this function may do nothing.</para>
            <para>See also pos(), QWidget::mapFromGlobal(), and
            QWidget::mapToGlobal().</para>
            </summary>
        </member>
        <member name="M:QtGui.QCursor.SetPos(QtGui.QScreen,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Moves the cursor (hot spot) to the global screen position of the
            screen at point p.</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.Shape">
            <summary>
            <para>Returns the cursor shape identifier. The return value is one of
            the Qt::CursorShape enum values (cast to an int).</para>
            <para>See also setShape().</para>
            <para></para>
            <para>Sets the cursor to the shape identified by shape.</para>
            <para>See Qt::CursorShape for the list of cursor shapes.</para>
            <para>See also shape().</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.Pos">
            <summary>
            <para>Returns the position of the cursor (hot spot) of the primary
            screen in global screen coordinates.</para>
            <para>You can call QWidget::mapFromGlobal() to translate it to widget
            coordinates.</para>
            <para>Note: The position is queried from the windowing system. If mouse
            events are generated via other means (e.g., via QWindowSystemInterface in a
            unit test), those fake mouse moves will not be reflected in the returned
            value.</para>
            <para>Note: On platforms where there is no windowing system or cursors
            are not available, the returned position is based on the mouse move events
            generated via QWindowSystemInterface.</para>
            <para>See also setPos(), QWidget::mapFromGlobal(),
            QWidget::mapToGlobal(), and QGuiApplication::primaryScreen().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Moves the cursor (hot spot) to the global screen position at
            point p.</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.Bitmap">
            <summary>
            <para>Returns the cursor bitmap, or 0 if it is one of the standard
            cursors.</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.Mask">
            <summary>
            <para>Returns the cursor bitmap mask, or 0 if it is one of the standard
            cursors.</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.Pixmap">
            <summary>
            <para>Returns the cursor pixmap. This is only valid if the cursor is a
            pixmap cursor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QCursor.HotSpot">
            <summary>
            <para>Returns the cursor hot spot, or (0, 0) if it is one of the
            standard cursors.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDrag">
            <summary>
            <para>The QDrag class provides support for MIME-based drag and drop
            data transfer.</para>
            </summary>
            <remarks>
            <para>Drag and drop is an intuitive way for users to copy or move data
            around in an application, and is used in many desktop environments as a
            mechanism for copying data between applications. Drag and drop support in
            Qt is centered around the QDrag class that handles most of the details of a
            drag and drop operation.</para>
            <para>The data to be transferred by the drag and drop operation is
            contained in a QMimeData object. This is specified with the setMimeData()
            function in the following way:</para>
            <para>        QDrag *drag = new QDrag(this);</para>
            <para>        QMimeData *mimeData = new QMimeData;</para>
            <para></para>
            <para>
            mimeData-&gt;setText(commentEdit-&gt;toPlainText());</para>
            <para>        drag-&gt;setMimeData(mimeData);</para>
            <para>Note that setMimeData() assigns ownership of the QMimeData object
            to the QDrag object. The QDrag must be constructed on the heap with a
            parent QObject to ensure that Qt can clean up after the drag and drop
            operation has been completed.</para>
            <para>A pixmap can be used to represent the data while the drag is in
            progress, and will move with the cursor to the drop target. This pixmap
            typically shows an icon that represents the MIME type of the data being
            transferred, but any pixmap can be set with setPixmap(). The cursor's hot
            spot can be given a position relative to the top-left corner of the pixmap
            with the setHotSpot() function. The following code positions the pixmap so
            that the cursor's hot spot points to the center of its bottom edge:</para>
            <para>
            drag-&gt;setHotSpot(QPoint(drag-&gt;pixmap().width()/2,</para>
            <para>                            drag-&gt;pixmap().height()));</para>
            <para>Note: On X11, the pixmap may not be able to keep up with the
            mouse movements if the hot spot causes the pixmap to be displayed directly
            under the cursor.</para>
            <para>The source and target widgets can be found with source() and
            target(). These functions are often used to determine whether drag and drop
            operations started and finished at the same widget, so that special
            behavior can be implemented.</para>
            <para>QDrag only deals with the drag and drop operation itself. It is
            up to the developer to decide when a drag operation begins, and how a QDrag
            object should be constructed and used. For a given widget, it is often
            necessary to reimplement mousePressEvent() to determine whether the user
            has pressed a mouse button, and reimplement mouseMoveEvent() to check
            whether a QDrag is required.</para>
            <para></para>
            <para>See also Drag and Drop, QClipboard, QMimeData,
            QMacPasteboardMime, Draggable Icons Example, Draggable Text Example, Drop
            Site Example, and Fridge Magnets Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDrag.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new drag object for the widget specified by
            dragSource.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDrag.Start(QtCore.Qt.DropAction)">
            <summary>
            <para>Note: It is recommended to use exec() instead of this
            function.</para>
            <para>Starts the drag and drop operation and returns a value indicating
            the requested drop action when it is completed. The drop actions that the
            user can choose from are specified in request. Qt::CopyAction is always
            allowed.</para>
            <para>Note: Although the drag and drop operation can take some time,
            this function does not block the event loop. Other events are still
            delivered to the application while the operation is performed.</para>
            <para>See also exec().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDrag.Exec(QtCore.Qt.DropAction)">
            <summary>
            <para>Starts the drag and drop operation and returns a value indicating
            the requested drop action when it is completed. The drop actions that the
            user can choose from are specified in supportedActions. The default
            proposed action will be selected among the allowed actions in the following
            order: Move, Copy and Link.</para>
            <para>Note: On Linux and Mac OS X, the drag and drop operation can take
            some time, but this function does not block the event loop. Other events
            are still delivered to the application while the operation is performed. On
            Windows, the Qt event loop is blocked during the operation.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDrag.Exec(QtCore.Qt.DropAction,QtCore.Qt.DropAction)">
            <summary>
            <para>Starts the drag and drop operation and returns a value indicating
            the requested drop action when it is completed. The drop actions that the
            user can choose from are specified in supportedActions.</para>
            <para>The defaultDropAction determines which action will be proposed
            when the user performs a drag without using modifier keys.</para>
            <para>Note: On Linux and Mac OS X, the drag and drop operation can take
            some time, but this function does not block the event loop. Other events
            are still delivered to the application while the operation is performed. On
            Windows, the Qt event loop is blocked during the operation. However,
            QDrag::exec() on Windows causes processEvents() to be called frequently to
            keep the GUI responsive. If any loops or operations are called while a drag
            operation is active, it will block the drag operation.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDrag.SetDragCursor(QtGui.QPixmap,QtCore.Qt.DropAction)">
            <summary>
            <para>Sets the drag cursor for the action. This allows you to override
            the default native cursors. To revert to using the native cursor for action
            pass in a null QPixmap as cursor.</para>
            <para>The action can only be CopyAction, MoveAction or LinkAction. All
            other values of DropAction are ignored.</para>
            <para>See also dragCursor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDrag.DragCursor(QtCore.Qt.DropAction)">
            <summary>
            <para>Returns the drag cursor for the action.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setDragCursor().</para>
            </summary>
        </member>
        <member name="E:QtGui.QDrag.ActionChanged">
            <summary>
            <para>This signal is emitted when the action associated with the drag changes.</para>
            <para>See also targetChanged().</para>
            </summary>
        </member>
        <member name="E:QtGui.QDrag.TargetChanged">
            <summary>
            <para>This signal is emitted when the target of the drag and drop operation changes, with newTarget the new target.</para>
            <para>See also target() and actionChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.MimeData">
            <summary>
            <para>Returns the MIME data that is encapsulated by the drag
            object.</para>
            <para>See also setMimeData().</para>
            <para></para>
            <para>Sets the data to be sent to the given MIME data. Ownership of the
            data is transferred to the QDrag object.</para>
            <para>See also mimeData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.Pixmap">
            <summary>
            <para>Returns the pixmap used to represent the data in a drag and drop
            operation.</para>
            <para>See also setPixmap().</para>
            <para></para>
            <para>Sets pixmap as the pixmap used to represent the data in a drag
            and drop operation. You can only set a pixmap before the drag is
            started.</para>
            <para>See also pixmap().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.HotSpot">
            <summary>
            <para>Returns the position of the hot spot relative to the top-left
            corner of the cursor.</para>
            <para>See also setHotSpot().</para>
            <para></para>
            <para>Sets the position of the hot spot relative to the top-left corner
            of the pixmap used to the point specified by hotspot.</para>
            <para>Note: on X11, the pixmap may not be able to keep up with the
            mouse movements if the hot spot causes the pixmap to be displayed directly
            under the cursor.</para>
            <para>See also hotSpot().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.Source">
            <summary>
            <para>Returns the source of the drag object. This is the widget where
            the drag and drop operation originated.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.Target">
            <summary>
            <para>Returns the target of the drag and drop operation. This is the
            widget where the drag object was dropped.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.SupportedActions">
            <summary>
            <para>Returns the set of possible drop actions for this drag
            operation.</para>
            <para>See also exec() and defaultAction().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDrag.DefaultAction">
            <summary>
            <para>Returns the default proposed drop action for this drag
            operation.</para>
            <para>See also exec() and supportedActions().</para>
            </summary>
        </member>
        <member name="T:QtGui.QGenericPlugin">
            <summary>
            <para>The QGenericPlugin class is an abstract base class for
            plugins.</para>
            </summary>
            <remarks>
            <para>A mouse plugin can be created by subclassing QGenericPlugin and
            reimplementing the pure virtual create() function. By exporting the derived
            class using the Q_PLUGIN_METADATA() macro, The default implementation of
            the QGenericPluginFactory class will automatically detect the plugin and
            load the driver into the server application at run-time. See How to Create
            Qt Plugins for details.</para>
            <para>The json metadata file should contain a list of keys supported by
            this plugin.</para>
            <para></para>
            <para>See also QGenericPluginFactory.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QGenericPlugin.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a plugin with the given parent.</para>
            <para>Note that this constructor is invoked automatically by the moc
            generated code that exports the plugin, so there is no need for calling it
            explicitly.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGenericPlugin.Create(System.String,System.String)">
            <summary>
            <para>Implement this function to create a driver matching the type
            specified by the given key and specification parameters. Note that keys are
            case-insensitive.</para>
            </summary>
        </member>
        <member name="T:QtGui.QGenericPluginFactory">
            <summary>
            <para>The QGenericPluginFactory class creates plugin drivers.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also QGenericPlugin.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QGenericPluginFactory.Create(System.String,System.String)">
            <summary>
            <para>Creates the driver specified by key, using the given
            specification.</para>
            <para>Note that the keys are case-insensitive.</para>
            <para>See also keys().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGenericPluginFactory.Keys">
            <summary>
            <para>Returns the list of valid keys, i.e. the available mouse
            drivers.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="T:QtGui.QInputMethod">
            <summary>
            <para>The QInputMethod class provides access to the active text input
            method.</para>
            </summary>
            <remarks>
            <para>QInputMethod is used by the text editors for integrating to the
            platform text input methods and more commonly by application views for
            querying various text input method-related information like virtual
            keyboard visibility and keyboard dimensions.</para>
            <para>Qt Quick also provides access to QInputMethod in QML through Qt
            global object as Qt.inputMethod property.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QInputMethod.Show">
            <summary>
            <para>Requests virtual keyboard to open. If the platform doesn't
            provide virtual keyboard the visibility remains false.</para>
            <para>Normally applications should not need to call this function,
            keyboard should automatically open when the text editor gains focus.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.Hide">
            <summary>
            <para>Requests virtual keyboard to close.</para>
            <para>Normally applications should not need to call this function,
            keyboard should automatically close when the text editor loses focus, for
            example when the parent view is closed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.Update(QtCore.Qt.InputMethodQuery)">
            <summary>
            <para>Called by the input item to inform the platform input methods
            when there has been state changes in editor's input method query
            attributes. When calling the function queries parameter has to be used to
            tell what has changes, which input method can use to make queries for
            attributes it's interested with QInputMethodQueryEvent.</para>
            <para>In particular calling update whenever the cursor position changes
            is important as that often causes other query attributes like surrounding
            text and text selection to change as well. The attributes that often change
            together with cursor position have been grouped in Qt::ImQueryInput value
            for convenience.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.Reset">
            <summary>
            <para>Resets the input method state. For example, a text editor
            normally calls this method before inserting a text to make widget ready to
            accept a text.</para>
            <para>Input method resets automatically when the focused editor
            changes.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.Commit">
            <summary>
            <para>Commits the word user is currently composing to the editor. The
            function is mostly needed by the input methods with text prediction
            features and by the methods where the script used for typing characters is
            different from the script that actually gets appended to the editor. Any
            kind of action that interrupts the text composing needs to flush the
            composing state by calling the commit() function, for example when the
            cursor is moved elsewhere.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.InvokeAction(QtGui.QInputMethod.Action,System.Int32)">
            <summary>
            <para>Called by the input item when the word currently being composed
            is tapped by the user, as indicated by the action a and the given
            cursorPosition. Input methods often use this information to offer more word
            suggestions to the user.</para>
            </summary>
        </member>
        <member name="M:QtGui.QInputMethod.QueryFocusObject(QtCore.Qt.InputMethodQuery,QtCore.QVariant)">
            <summary>
            <para>Send query to the current focus object with parameters argument
            and return the result.</para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.CursorRectangleChanged">
            <summary>
            <para>This property holds input item's cursor rectangle in window coordinates.</para>
            <para>Cursor rectangle is often used by various text editing controls like text prediction popups for following the text being typed.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRectF 	cursorRectangle() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cursorRectangleChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.KeyboardRectangleChanged">
            <summary>
            <para>This property holds virtual keyboard's geometry in window coordinates.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRectF 	keyboardRectangle() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	keyboardRectangleChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.VisibleChanged">
            <summary>
            <para>This property holds virtual keyboard's visibility on the screen.</para>
            <para>Input method visibility remains false for devices with no virtual keyboards.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isVisible() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	visibleChanged()</para>
            <para></para>
            <para>See also show() and hide().</para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.AnimatingChanged">
            <summary>
            <para>This property holds true when the virtual keyboard is being opened or closed.</para>
            <para>Animating is false when keyboard is fully open or closed. When animating is true and visibility is true keyboard is being opened. When animating is true and visibility is false keyboard is being closed.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAnimating() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	animatingChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.LocaleChanged">
            <summary>
            <para>This property holds current input locale.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QLocale 	locale() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	localeChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QInputMethod.InputDirectionChanged">
            <summary>
            <para>This property holds current input direction.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::LayoutDirection 	inputDirection() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	inputDirectionChanged(Qt::LayoutDirection newDirection)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.InputItemTransform">
            <summary>
            <para>Returns the transformation from input item coordinates to the
            window coordinates.</para>
            <para>See also setInputItemTransform().</para>
            <para></para>
            <para>Sets the transformation from input item coordinates to window
            coordinates to be transform. Item transform needs to be updated by the
            focused window like QQuickCanvas whenever item is moved inside the
            scene.</para>
            <para>See also inputItemTransform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.InputItemRectangle">
            <summary>
            <para>Returns the input item's geometry in input item
            coordinates.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also setInputItemRectangle().</para>
            <para></para>
            <para>Sets the input item's geometry to be rect, in input item
            coordinates. This needs to be updated by the focused window like
            QQuickCanvas whenever item is moved inside the scene, or focus is
            changed.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also inputItemRectangle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.Visible">
            <summary>
            <para>This property holds virtual keyboard's visibility on the
            screen.</para>
            <para>Input method visibility remains false for devices with no virtual
            keyboards.</para>
            <para>See also show() and hide().</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.CursorRectangle">
            <summary>
            <para>This property holds input item's cursor rectangle in window
            coordinates.</para>
            <para>Cursor rectangle is often used by various text editing controls
            like text prediction popups for following the text being typed.</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.KeyboardRectangle">
            <summary>
            <para>This property holds virtual keyboard's geometry in window
            coordinates.</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.IsAnimating">
            <summary>
            <para>This property holds true when the virtual keyboard is being
            opened or closed.</para>
            <para>Animating is false when keyboard is fully open or closed. When
            animating is true and visibility is true keyboard is being opened. When
            animating is true and visibility is false keyboard is being closed.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isAnimating() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	animatingChanged()</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.Locale">
            <summary>
            <para>This property holds current input locale.</para>
            </summary>
        </member>
        <member name="P:QtGui.QInputMethod.InputDirection">
            <summary>
            <para>This property holds current input direction.</para>
            </summary>
        </member>
        <member name="T:QtGui.QInputMethod.Action">
            <summary>
            <para>Indicates the kind of action performed by the user.</para>
            <para>See also invokeAction().</para>
            </summary>
        </member>
        <member name="F:QtGui.QInputMethod.Action.Click">
            <summary>A normal click/tap</summary>
        </member>
        <member name="F:QtGui.QInputMethod.Action.ContextMenu">
            <summary>A context menu click/tap (e.g. right-button or tap-and-hold)</summary>
        </member>
        <member name="T:QtGui.QGuiApplication">
            <summary>
            <para>The QGuiApplication class manages the GUI application's control
            flow and main settings.</para>
            </summary>
            <remarks>
            <para>QGuiApplication contains the main event loop, where all events
            from the window system and other sources are processed and dispatched. It
            also handles the application's initialization and finalization, and
            provides session management. In addition, QGuiApplication handles most of
            the system-wide and application-wide settings.</para>
            <para>For any GUI application using Qt, there is precisely one
            QGuiApplication object no matter whether the application has 0, 1, 2 or
            more windows at any given time. For non-GUI Qt applications, use
            QCoreApplication instead, as it does not depend on the Qt GUI module. For
            QWidget based Qt applications, use QApplication instead, as it provides
            some functionality needed for creating QWidget instances.</para>
            <para>The QGuiApplication object is accessible through the instance()
            function, which returns a pointer equivalent to the global qApp
            pointer.</para>
            <para>QGuiApplication's main areas of responsibility are:</para>
            <para></para>
            <para>It initializes the application with the user's desktop settings,
            such as palette(), font() and styleHints(). It keeps track of these
            properties in case the user changes the desktop globally, for example,
            through some kind of control panel.</para>
            <para>It performs event handling, meaning that it receives events from
            the underlying window system and dispatches them to the relevant widgets.
            You can send your own events to windows by using sendEvent() and
            postEvent().</para>
            <para>It parses common command line arguments and sets its internal
            state accordingly. See the constructor documentation below for more
            details.</para>
            <para>It provides localization of strings that are visible to the user
            via translate().</para>
            <para>It provides some magical objects like the clipboard().</para>
            <para>It knows about the application's windows. You can ask which
            window is at a certain position using topLevelAt(), get a list of
            topLevelWindows(), etc.</para>
            <para>It manages the application's mouse cursor handling, see
            setOverrideCursor()</para>
            <para>It provides support for sophisticated session management. This
            makes it possible for applications to terminate gracefully when the user
            logs out, to cancel a shutdown process if termination isn't possible and
            even to preserve the entire application's state for a future session. See
            isSessionRestored(), sessionId() and commitDataRequest() and
            saveStateRequest() for details.</para>
            <para></para>
            <para>Since the QGuiApplication object does so much initialization, it
            must be created before any other objects related to the user interface are
            created. QGuiApplication also deals with common command line arguments.
            Hence, it is usually a good idea to create it before any interpretation or
            modification of argv is done in the application itself.</para>
            <para></para>
            <para> Groups of functions</para>
            <para>System settings	desktopSettingsAware(),
            setDesktopSettingsAware(), styleHints(), palette(), setPalette(), font(),
            setFont().</para>
            <para>Event handling	exec(), processEvents(), exit(), quit().
            sendEvent(), postEvent(), sendPostedEvents(), removePostedEvents(),
            hasPendingEvents(), notify().</para>
            <para>Windows	allWindows(), topLevelWindows(), focusWindow(),
            clipboard(), topLevelAt().</para>
            <para>Advanced cursor handling	overrideCursor(), setOverrideCursor(),
            restoreOverrideCursor().</para>
            <para>Session management	isSessionRestored(), sessionId(),
            commitDataRequest(), saveStateRequest().</para>
            <para>Miscellaneous	startingUp(), closingDown(), type().</para>
            <para></para>
            <para></para>
            <para>See also QCoreApplication, QAbstractEventDispatcher, and
            QEventLoop.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QGuiApplication.#ctor(System.Int32@,System.Char**,System.Int32)">
            <summary>
            <para>Initializes the window system and constructs an application
            object with argc command line arguments in argv.</para>
            <para>Warning: The data referred to by argc and argv must stay valid
            for the entire lifetime of the QGuiApplication object. In addition, argc
            must be greater than zero and argv must contain at least one valid
            character string.</para>
            <para>The global qApp pointer refers to this application object. Only
            one application object should be created.</para>
            <para>This application object must be constructed before any paint
            devices (including pixmaps, bitmaps etc.).</para>
            <para>Note: argc and argv might be changed as Qt removes command line
            arguments that it recognizes.</para>
            <para></para>
            <para>Supported Command Line Options</para>
            <para>All Qt programs automatically support a set of command-line
            options that allow modifying the way Qt will interact with the windowing
            system. Some of the options are also accessible via environment variables,
            which are the preferred form if the application can launch GUI
            sub-processes or other applications (environment variables will be
            inherited by child processes). When in doubt, use the environment
            variables.</para>
            <para>The options currently supported are the following:</para>
            <para></para>
            <para>-platform platformName[:options], specifies the Qt Platform
            Abstraction (QPA) plugin.Overridden by the QT_QPA_PLATFORM environment
            variable.</para>
            <para></para>
            <para>-platformpluginpath path, specifies the path to platform
            plugins.Overridden by the QT_QPA_PLATFORM_PLUGIN_PATH environment
            variable.</para>
            <para></para>
            <para>-platformtheme platformTheme, specifies the platform
            theme.Overridden by the QT_QPA_PLATFORMTHEME environment variable.</para>
            <para></para>
            <para>-plugin plugin, specifies additional plugins to load. The
            argument may appear multiple times.Overridden by the QT_QPA_GENERIC_PLUGINS
            environment variable.</para>
            <para></para>
            <para>-qmljsdebugger=, activates the QML/JS debugger with a specified
            port. The value must be of format port:1234[,block], where block is
            optional and will make the application wait until a debugger connects to
            it.</para>
            <para>-qwindowgeometry geometry, specifies window geometry for the main
            window using the X11-syntax. For example: -qwindowgeometry
            100x100+50+50</para>
            <para>-qwindowicon, sets the default window icon</para>
            <para>-qwindowtitle, sets the title of the first window</para>
            <para>-reverse, sets the application's layout direction to
            Qt::RightToLeft. This option is intended to aid debugging and should not be
            used in production. The default value is automatically detected from the
            user's locale (see also QLocale::textDirection()).</para>
            <para>-session session, restores the application from an earlier
            session.</para>
            <para></para>
            <para>The following standard command line options are available for
            X11:</para>
            <para></para>
            <para>-display hostname:screen_number, switches displays on
            X11.Overrides the DISPLAY environment variable.</para>
            <para></para>
            <para>-geometry geometry, same as -qwindowgeometry.</para>
            <para></para>
            <para></para>
            <para>Platform-Specific Arguments</para>
            <para>You can specify platform-specific arguments for the -platform
            option. Place them after the platform plugin name following a colon as a
            comma-separated list. For example, -platform
            windows:dialogs=xp,fontengine=freetype.</para>
            <para>The following parameters are available for -platform
            windows:</para>
            <para></para>
            <para>dialogs=[xp|none], xp uses XP-style native dialogs and none
            disables them.</para>
            <para>fontengine=freetype, uses the FreeType font engine.</para>
            <para></para>
            <para>For more information about the platform-specific arguments
            available for embedded Linux platforms, see Qt for Embedded Linux.</para>
            <para>See also arguments() and QGuiApplication::platformName.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.Notify(QtCore.QObject,QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QCoreApplication::notify().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.TopLevelAt(QtCore.QPoint)">
            <summary>
            <para>Returns the top level window at the given position pos, if
            any.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.FocusWindow">
            <summary>
            <para>Returns the QWindow that receives events tied to focus, such as
            key events.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.FocusObject">
            <summary>
            <para>Returns the QObject in currently active window that will be final
            receiver of events tied to focus, such as key events.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.ChangeOverrideCursor(QtGui.QCursor)">
            <summary>
            <para>Changes the currently active application override cursor to
            cursor.</para>
            <para>This function has no effect if setOverrideCursor() was not
            called.</para>
            <para>See also setOverrideCursor(), overrideCursor(),
            restoreOverrideCursor(), and QWidget::setCursor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.RestoreOverrideCursor">
            <summary>
            <para>Undoes the last setOverrideCursor().</para>
            <para>If setOverrideCursor() has been called twice, calling
            restoreOverrideCursor() will activate the first cursor set. Calling this
            function a second time restores the original widgets' cursors.</para>
            <para>See also setOverrideCursor() and overrideCursor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.PlatformFunction(QtCore.QByteArray)">
            <summary>
            <para>Returns a function pointer from the platformplugin matching
            function</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.Exec">
            <summary>
            <para>Enters the main event loop and waits until exit() is called, and
            then returns the value that was set to exit() (which is 0 if exit() is
            called via quit()).</para>
            <para>It is necessary to call this function to start event handling.
            The main event loop receives events from the window system and dispatches
            these to the application widgets.</para>
            <para>Generally, no user interaction can take place before calling
            exec().</para>
            <para>To make your application perform idle processing, e.g., executing
            a special function whenever there are no pending events, use a QTimer with
            0 timeout. More advanced idle processing schemes can be achieved using
            processEvents().</para>
            <para>We recommend that you connect clean-up code to the aboutToQuit()
            signal, instead of putting it in your application's main() function. This
            is because, on some platforms, the QApplication::exec() call may not
            return.</para>
            <para>See also quitOnLastWindowClosed, quit(), exit(), processEvents(),
            and QCoreApplication::exec().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGuiApplication.Sync">
            <summary>
            <para>Function that can be used to sync Qt state with the Window
            Systems state.</para>
            <para>This function will first empty Qts events by calling
            QCoreApplication::processEvents(), then the platform plugin will sync up
            with the windowsystem, and finally Qts events will be delived by another
            call to QCoreApplication::processEvents();</para>
            <para>This function is timeconsuming and its use is discouraged.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.FontDatabaseChanged">
            <summary>
            <para>This signal is emitted when application fonts are loaded or removed.</para>
            <para>See also QFontDatabase::addApplicationFont(), QFontDatabase::addApplicationFontFromData(), QFontDatabase::removeAllApplicationFonts(), and QFontDatabase::removeApplicationFont().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.ScreenAdded">
            <summary>
            <para>This signal is emitted whenever a new screen screen has been added to the system.</para>
            <para>See also screens(), primaryScreen(), and screenRemoved().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.ScreenRemoved">
            <summary>
            <para>This signal is emitted whenever a screen is removed from the system. It provides an opportunity to manage the windows on the screen before Qt falls back to moving them to the primary screen.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also screens(), screenAdded(), QObject::destroyed(), and QWindow::setScreen().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.LastWindowClosed">
            <summary>
            <para>This signal is emitted from exec() when the last visible primary window (i.e. window with no parent) is closed.</para>
            <para>By default, QGuiApplication quits after this signal is emitted. This feature can be turned off by setting quitOnLastWindowClosed to false.</para>
            <para>See also QWindow::close() and QWindow::isTopLevel().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.FocusObjectChanged">
            <summary>
            <para>This signal is emitted when final receiver of events tied to focus is changed. focusObject is the new receiver.</para>
            <para>See also focusObject().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.FocusWindowChanged">
            <summary>
            <para>This signal is emitted when the focused window changes. focusWindow is the new focused window.</para>
            <para>See also focusWindow().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.ApplicationStateChanged">
            <summary>
            <para>This signal is emitted when the state of the application changes.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also applicationState().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.LayoutDirectionChanged">
            <summary>
            <para>This property holds the default layout direction for this application.</para>
            <para>On system start-up, the default layout direction depends on the application's language.</para>
            <para>The notifier signal was introduced in Qt 5.4.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::LayoutDirection 	layoutDirection()</para>
            <para> void 	setLayoutDirection(Qt::LayoutDirection direction)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	layoutDirectionChanged(Qt::LayoutDirection direction)</para>
            <para></para>
            <para>See also QWidget::layoutDirection, isLeftToRight(), and isRightToLeft().</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.CommitDataRequest">
            <summary>
            <para>This signal deals with session management. It is emitted when the QSessionManager wants the application to commit all its data.</para>
            <para>Usually this means saving all open files, after getting permission from the user. Furthermore you may want to provide a means by which the user can cancel the shutdown.</para>
            <para>You should not exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context.</para>
            <para>Warning: Within this signal, no user interaction is possible, unless you ask the manager for explicit permission. See QSessionManager::allowsInteraction() and QSessionManager::allowsErrorInteraction() for details and example usage.</para>
            <para>Note: You should use Qt::DirectConnection when connecting to this signal.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isSessionRestored(), sessionId(), saveStateRequest(), and Session Management.</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.SaveStateRequest">
            <summary>
            <para>This signal deals with session management. It is invoked when the session manager wants the application to preserve its state for a future session.</para>
            <para>For example, a text editor would create a temporary file that includes the current contents of its edit buffers, the location of the cursor and other aspects of the current editing session.</para>
            <para>You should never exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context. Futhermore, most session managers will very likely request a saved state immediately after the application has been started. This permits the session manager to learn about the application's restart policy.</para>
            <para>Warning: Within this signal, no user interaction is possible, unless you ask the manager for explicit permission. See QSessionManager::allowsInteraction() and QSessionManager::allowsErrorInteraction() for details.</para>
            <para>Note: You should use Qt::DirectConnection when connecting to this signal.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also isSessionRestored(), sessionId(), commitDataRequest(), and Session Management.</para>
            </summary>
        </member>
        <member name="E:QtGui.QGuiApplication.PaletteChanged">
            <summary>
            <para>This signal is emitted when the palette of the application changes.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also palette().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.ApplicationDisplayName">
            <summary>
            <para>This property holds the user-visible name of this
            application.</para>
            <para>This name is shown to the user, for instance in window titles. It
            can be translated, if necessary.</para>
            <para>If not set, the application display name defaults to the
            application name.</para>
            <para>This property was introduced in  Qt 5.0.</para>
            <para>See also applicationName.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.WindowIcon">
            <summary>
            <para>This property holds the default window icon.</para>
            <para>See also QWindow::setIcon() and Setting the Application
            Icon.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.OverrideCursor">
            <summary>
            <para>Returns the active application override cursor.</para>
            <para>This function returns 0 if no application cursor has been defined
            (i.e. the internal cursor stack is empty).</para>
            <para>See also setOverrideCursor() and restoreOverrideCursor().</para>
            <para></para>
            <para>Sets the application override cursor to cursor.</para>
            <para>Application override cursors are intended for showing the user
            that the application is in a special state, for example during an operation
            that might take some time.</para>
            <para>This cursor will be displayed in all the application's widgets
            until restoreOverrideCursor() or another setOverrideCursor() is
            called.</para>
            <para>Application cursors are stored on an internal stack.
            setOverrideCursor() pushes the cursor onto the stack, and
            restoreOverrideCursor() pops the active cursor off the stack.
            changeOverrideCursor() changes the curently active application override
            cursor.</para>
            <para>Every setOverrideCursor() must eventually be followed by a
            corresponding restoreOverrideCursor(), otherwise the stack will never be
            emptied.</para>
            <para>Example:</para>
            <para>QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));</para>
            <para>calculateHugeMandelbrot();              // lunch time...</para>
            <para>QApplication::restoreOverrideCursor();</para>
            <para>See also overrideCursor(), restoreOverrideCursor(),
            changeOverrideCursor(), and QWidget::setCursor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.Font">
            <summary>
            <para>Returns the default application font.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Changes the default application font to font.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.Palette">
            <summary>
            <para>Returns the default application palette.</para>
            <para>See also setPalette().</para>
            <para></para>
            <para>Changes the default application palette to pal.</para>
            <para>See also palette().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.LayoutDirection">
            <summary>
            <para>This property holds the default layout direction for this
            application.</para>
            <para>On system start-up, the default layout direction depends on the
            application's language.</para>
            <para>The notifier signal was introduced in Qt 5.4.</para>
            <para>See also QWidget::layoutDirection, isLeftToRight(), and
            isRightToLeft().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.DesktopSettingsAware">
            <summary>
            <para>Returns true if Qt is set to use the system's standard colors,
            fonts, etc.; otherwise returns false. The default is true.</para>
            <para>See also setDesktopSettingsAware().</para>
            <para></para>
            <para>Sets whether Qt should use the system's standard colors, fonts,
            etc., to on. By default, this is true.</para>
            <para>This function must be called before creating the QGuiApplication
            object, like this:</para>
            <para>int main(int argc, char *argv[])</para>
            <para>{</para>
            <para>    QApplication::setDesktopSettingsAware(false);</para>
            <para>    QApplication app(argc, argv);</para>
            <para>    ...</para>
            <para>    return app.exec();</para>
            <para>}</para>
            <para>See also desktopSettingsAware().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.QuitOnLastWindowClosed">
            <summary>
            <para>This property holds whether the application implicitly quits when
            the last window is closed.</para>
            <para>The default is true.</para>
            <para>If this property is true, the applications quits when the last
            visible primary window (i.e. window with no parent) is closed.</para>
            <para>See also quit() and QWindow::close().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.PlatformName">
            <summary>
            <para>This property holds the name of the underlying platform
            plugin.</para>
            <para>The QPA platform plugins are located in
            qtbase\src\plugins\platforms. At the time of writing, the following
            platform plugin names are supported:</para>
            <para></para>
            <para>android</para>
            <para>cocoa is a platform plugin for Mac OS X.</para>
            <para>directfb</para>
            <para>eglfs is a platform plugin for running Qt5 applications on top of
            EGL and OpenGL ES 2.0 without an actual windowing system (like X11 or
            Wayland). For more information, see EGLFS.</para>
            <para>ios</para>
            <para>kms is an experimental platform plugin using kernel modesetting
            and DRM (Direct Rendering Manager).</para>
            <para>linuxfb writes directly to the framebuffer. For more information,
            see LinuxFB.</para>
            <para>minimal is provided as an examples for developers who want to
            write their own platform plugins. However, you can use the plugin to run
            GUI applications in environments without a GUI, such as servers.</para>
            <para>minimalegl is an example plugin.</para>
            <para>offscreen</para>
            <para>openwfd</para>
            <para>qnx</para>
            <para>windows</para>
            <para>xcb is the X11 plugin used on regular desktop Linux
            platforms.</para>
            <para></para>
            <para>For more information about the platform plugins for embedded
            Linux devices, see Qt for Embedded Linux.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.ModalWindow">
            <summary>
            <para>Returns the most recently shown modal window. If no modal windows
            are visible, this function returns zero.</para>
            <para>A modal window is a window which has its modality property set to
            Qt::WindowModal or Qt::ApplicationModal. A modal window must be closed
            before the user can continue with other parts of the program.</para>
            <para>Modal window are organized in a stack. This function returns the
            modal window at the top of the stack.</para>
            <para>See also Qt::WindowModality and QWindow::setModality().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.PrimaryScreen">
            <summary>
            <para>Returns the primary (or default) screen of the application, or
            null if there is none</para>
            <para>This will be the screen where QWindows are initially shown,
            unless otherwise specified.</para>
            <para>On some platforms, it may be null when there are actually no
            screens connected. It is not possible to start a new QGuiApplication while
            there are no screens. Applications which were running at the time the
            primary screen was removed will stop rendering graphics until one or more
            screens are restored.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.DevicePixelRatio">
            <summary>
            <para>Returns the highest screen device pixel ratio found on the
            system. This is the ratio between physical pixels and device-independent
            pixels.</para>
            <para>Use this function only when you don't know which window you are
            targeting. If you do know the target window, use
            QWindow::devicePixelRatio() instead.</para>
            <para>See also QWindow::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.Clipboard">
            <summary>
            <para>Returns the object for interacting with the clipboard.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.KeyboardModifiers">
            <summary>
            <para>Returns the current state of the modifier keys on the keyboard.
            The current state is updated sychronously as the event queue is emptied of
            events that will spontaneously change the keyboard state (QEvent::KeyPress
            and QEvent::KeyRelease events).</para>
            <para>It should be noted this may not reflect the actual keys held on
            the input device at the time of calling but rather the modifiers as last
            reported in one of the above events. If no keys are being held
            Qt::NoModifier is returned.</para>
            <para>See also mouseButtons() and queryKeyboardModifiers().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.QueryKeyboardModifiers">
            <summary>
            <para>Queries and returns the state of the modifier keys on the
            keyboard. Unlike keyboardModifiers, this method returns the actual keys
            held on the input device at the time of calling the method.</para>
            <para>It does not rely on the keypress events having been received by
            this process, which makes it possible to check the modifiers while moving a
            window, for instance. Note that in most cases, you should use
            keyboardModifiers(), which is faster and more accurate since it contains
            the state of the modifiers as they were when the currently processed event
            was received.</para>
            <para>See also keyboardModifiers().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.MouseButtons">
            <summary>
            <para>Returns the current state of the buttons on the mouse. The
            current state is updated syncronously as the event queue is emptied of
            events that will spontaneously change the mouse state
            (QEvent::MouseButtonPress and QEvent::MouseButtonRelease events).</para>
            <para>It should be noted this may not reflect the actual buttons held
            on the input device at the time of calling but rather the mouse buttons as
            last reported in one of the above events. If no mouse buttons are being
            held Qt::NoButton is returned.</para>
            <para>See also keyboardModifiers().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.IsRightToLeft">
            <summary>
            <para>Returns true if the application's layout direction is
            Qt::RightToLeft; otherwise returns false.</para>
            <para>See also layoutDirection() and isLeftToRight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.IsLeftToRight">
            <summary>
            <para>Returns true if the application's layout direction is
            Qt::LeftToRight; otherwise returns false.</para>
            <para>See also layoutDirection() and isRightToLeft().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.StyleHints">
            <summary>
            <para>Returns the application's style hints.</para>
            <para>The style hints encapsulate a set of platform dependent
            properties such as double click intervals, full width selection and
            others.</para>
            <para>The hints can be used to integrate tighter with the underlying
            platform.</para>
            <para>See also QStyleHints.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.InputMethod">
            <summary>
            <para>returns the input method.</para>
            <para>The input method returns properties about the state and position
            of the virtual keyboard. It also provides information about the position of
            the current focused input element.</para>
            <para>See also QInputMethod.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.ApplicationState">
            <summary>
            <para>Returns the current state of the application.</para>
            <para>You can react to application state changes to perform actions
            such as stopping/resuming CPU-intensive tasks, freeing/loading resources or
            saving/restoring application data.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.IsSessionRestored">
            <summary>
            <para>Returns true if the application has been restored from an earlier
            session; otherwise returns false.</para>
            <para>See also sessionId(), commitDataRequest(), and
            saveStateRequest().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.SessionId">
            <summary>
            <para>Returns the current session's identifier.</para>
            <para>If the application has been restored from an earlier session,
            this identifier is the same as it was in that previous session. The session
            identifier is guaranteed to be unique both for different applications and
            for different instances of the same application.</para>
            <para>See also isSessionRestored(), sessionKey(), commitDataRequest(),
            and saveStateRequest().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.SessionKey">
            <summary>
            <para>Returns the session key in the current session.</para>
            <para>If the application has been restored from an earlier session,
            this key is the same as it was when the previous session ended.</para>
            <para>The session key changes every time the session is saved. If the
            shutdown process is cancelled, another session key will be used when
            shutting down again.</para>
            <para>See also isSessionRestored(), sessionId(), commitDataRequest(),
            and saveStateRequest().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGuiApplication.IsSavingSession">
            <summary>
            <para>Returns true if the application is currently saving the session;
            otherwise returns false.</para>
            <para>This is true when commitDataRequest() and saveStateRequest() are
            emitted, but also when the windows are closed afterwards by session
            management.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also sessionId(), commitDataRequest(), and
            saveStateRequest().</para>
            </summary>
        </member>
        <member name="T:QtGui.QSurfaceFormat">
            <summary>
            <para>The QSurfaceFormat class represents the format of a
            QSurface.</para>
            </summary>
            <remarks>
            <para>The format includes the size of the color buffers, red, green,
            and blue; the size of the alpha buffer; the size of the depth and stencil
            buffers; and number of samples per pixel for multisampling. In addition,
            the format contains surface configuration parameters such as OpenGL profile
            and version for rendering, whether or not to enable stereo buffers, and
            swap behaviour.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QSurfaceFormat.#ctor">
            <summary>
            <para>Constructs a default initialized QSurfaceFormat.</para>
            <para>Note: By default OpenGL 2.0 is requested since this provides the
            highest grade of portability between platforms and OpenGL
            implementations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.#ctor(QtGui.QSurfaceFormat.FormatOption)">
            <summary>
            <para>Constructs a QSurfaceFormat with the given format options.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.#ctor(QtGui.QSurfaceFormat)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.SetVersion(System.Int32,System.Int32)">
            <summary>
            <para>Sets the desired major and minor OpenGL versions.</para>
            <para>The default version is 2.0.</para>
            <para>See also version().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.SetOption(QtGui.QSurfaceFormat.FormatOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Use setOption(QSurfaceFormat::FormatOption, bool) or setOptions()
            instead.</para>
            <para>Sets the format options to the OR combination of opt and the
            current format options.</para>
            <para>See also options() and testOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.TestOption(QtGui.QSurfaceFormat.FormatOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Use testOption(QSurfaceFormat::FormatOption) instead.</para>
            <para>Returns true if any of the options in opt is currently set on
            this object; otherwise returns false.</para>
            <para>See also setOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.SetOption(QtGui.QSurfaceFormat.FormatOption,System.Boolean)">
            <summary>
            <para>Sets the format option option if on is true; otherwise, clears
            the option.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setOptions(), options(), and testOption().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.TestOption1(QtGui.QSurfaceFormat.FormatOption)">
            <summary>
            <para>Returns true if the format option option is set; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also options().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.op_Equality(QtGui.QSurfaceFormat,QtGui.QSurfaceFormat)">
            <summary>
            <para>Returns true if all the options of the two QSurfaceFormat objects
            a and b are equal.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurfaceFormat.op_Inequality(QtGui.QSurfaceFormat,QtGui.QSurfaceFormat)">
            <summary>
            <para>Returns false if all the options of the two QSurfaceFormat
            objects a and b are equal; otherwise returns true.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.DepthBufferSize">
            <summary>
            <para>Returns the depth buffer size.</para>
            <para>See also setDepthBufferSize().</para>
            <para></para>
            <para>Set the minimum depth buffer size to size.</para>
            <para>See also depthBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.StencilBufferSize">
            <summary>
            <para>Returns the stencil buffer size in bits.</para>
            <para>See also setStencilBufferSize().</para>
            <para></para>
            <para>Set the preferred stencil buffer size to size bits.</para>
            <para>See also stencilBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.RedBufferSize">
            <summary>
            <para>Get the size in bits of the red channel of the color
            buffer.</para>
            <para>See also setRedBufferSize().</para>
            <para></para>
            <para>Set the desired size in bits of the red channel of the color
            buffer.</para>
            <para>Note: On Mac OSX, be sure to set the buffer size of all color
            channels, otherwise this setting will have no effect. If one of the buffer
            sizes is not set, the current bit-depth of the screen is used.</para>
            <para>See also redBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.GreenBufferSize">
            <summary>
            <para>Get the size in bits of the green channel of the color
            buffer.</para>
            <para>See also setGreenBufferSize().</para>
            <para></para>
            <para>Set the desired size in bits of the green channel of the color
            buffer.</para>
            <para>Note: On Mac OSX, be sure to set the buffer size of all color
            channels, otherwise this setting will have no effect. If one of the buffer
            sizes is not set, the current bit-depth of the screen is used.</para>
            <para>See also greenBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.BlueBufferSize">
            <summary>
            <para>Get the size in bits of the blue channel of the color
            buffer.</para>
            <para>See also setBlueBufferSize().</para>
            <para></para>
            <para>Set the desired size in bits of the blue channel of the color
            buffer.</para>
            <para>Note: On Mac OSX, be sure to set the buffer size of all color
            channels, otherwise this setting will have no effect. If one of the buffer
            sizes is not set, the current bit-depth of the screen is used.</para>
            <para>See also blueBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.AlphaBufferSize">
            <summary>
            <para>Get the size in bits of the alpha channel of the color
            buffer.</para>
            <para>See also setAlphaBufferSize().</para>
            <para></para>
            <para>Set the desired size in bits of the alpha channel of the color
            buffer.</para>
            <para>See also alphaBufferSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.Samples">
            <summary>
            <para>Returns the number of samples per pixel when multisampling is
            enabled. By default, multisampling is disabled.</para>
            <para>See also setSamples().</para>
            <para></para>
            <para>Set the preferred number of samples per pixel when multisampling
            is enabled to numSamples. By default, multisampling is disabled.</para>
            <para>See also samples().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.swapBehavior">
            <summary>
            <para>Returns the configured swap behaviour.</para>
            <para>See also setSwapBehavior().</para>
            <para></para>
            <para>Set the swap behavior of the surface.</para>
            <para>The swap behavior specifies whether single, double, or triple
            buffering is desired. The default, DefaultSwapBehavior, gives the default
            swap behavior of the platform.</para>
            <para>See also swapBehavior().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.Profile">
            <summary>
            <para>Get the configured OpenGL context profile.</para>
            <para>This setting is ignored if the requested OpenGL version is less
            than 3.2.</para>
            <para>See also setProfile().</para>
            <para></para>
            <para>Sets the desired OpenGL context profile.</para>
            <para>This setting is ignored if the requested OpenGL version is less
            than 3.2.</para>
            <para>See also profile().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.renderableType">
            <summary>
            <para>Gets the renderable type.</para>
            <para>Chooses between desktop OpenGL, OpenGL ES, and OpenVG.</para>
            <para>See also setRenderableType().</para>
            <para></para>
            <para>Sets the desired renderable type.</para>
            <para>Chooses between desktop OpenGL, OpenGL ES, and OpenVG.</para>
            <para>See also renderableType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.MajorVersion">
            <summary>
            <para>Returns the major OpenGL version.</para>
            <para>The default version is 2.0.</para>
            <para>See also setMajorVersion().</para>
            <para></para>
            <para>Sets the desired major OpenGL version.</para>
            <para>See also majorVersion().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.MinorVersion">
            <summary>
            <para>Returns the minor OpenGL version.</para>
            <para>See also setMinorVersion().</para>
            <para></para>
            <para>Sets the desired minor OpenGL version.</para>
            <para>The default version is 2.0.</para>
            <para>See also minorVersion().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.Stereo">
            <summary>
            <para>Returns true if stereo buffering is enabled; otherwise returns
            false. Stereo buffering is disabled by default.</para>
            <para>See also setStereo().</para>
            <para></para>
            <para>If enable is true enables stereo buffering; otherwise disables
            stereo buffering.</para>
            <para>Stereo buffering is disabled by default.</para>
            <para>Stereo buffering provides extra color buffers to generate
            left-eye and right-eye images.</para>
            <para>See also stereo().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.Options">
            <summary>
            <para>Returns the currently set format options.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setOption(), setOptions(), and testOption().</para>
            <para></para>
            <para>Sets the format options to options.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also options() and testOption().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.SwapInterval">
            <summary>
            <para>Returns the swap interval.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setSwapInterval().</para>
            <para></para>
            <para>Sets the preferred swap interval. The swap interval specifies the
            minimum number of video frames that are displayed before a buffer swap
            occurs. This can be used to sync the GL drawing into a window to the
            vertical refresh of the screen.</para>
            <para>Setting an interval value of 0 will turn the vertical refresh
            syncing off, any value higher than 0 will turn the vertical syncing on.
            Setting interval to a higher value, for example 10, results in having 10
            vertical retraces between every buffer swap.</para>
            <para>The default interval is 1.</para>
            <para>Changing the swap interval may not be supported by the underlying
            platform. In this case, the request will be silently ignored.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also swapInterval().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.DefaultFormat">
            <summary>
            <para>Returns the global default surface format.</para>
            <para>When setDefaultFormat() is not called, this is a
            default-constructed QSurfaceFormat.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also setDefaultFormat().</para>
            <para></para>
            <para>Sets the global default surface format.</para>
            <para>This format is used by default in QOpenGLContext, QWindow,
            QOpenGLWidget and similar classes.</para>
            <para>It can always be overridden on a per-instance basis by using the
            class in question's own setFormat() function. However, it is often more
            convenient to set the format for all windows once at the start of the
            application. It also guarantees proper behavior in cases where shared
            contexts are required, because settings the format via this function
            guarantees that all contexts and surfaces, even the ones created internally
            by Qt, will use the same format.</para>
            <para>Note: When setting Qt::AA_ShareOpenGLContexts, it is strongly
            recommended to place the call to this function before the construction of
            the QGuiApplication or QApplication. Otherwise format will not be applied
            to the global share context and therefore issues may arise with context
            sharing afterwards.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also defaultFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurfaceFormat.HasAlpha">
            <summary>
            <para>Returns true if the alpha buffer size is greater than
            zero.</para>
            <para>This means that the surface might be used with per pixel
            translucency effects.</para>
            </summary>
        </member>
        <member name="T:QtGui.QSurfaceFormat.FormatOption">
            <summary>
            <para>This enum contains format options for use with
            QSurfaceFormat.</para>
            <para>The FormatOptions type is a typedef for
            QFlags&lt;FormatOption&gt;. It stores an OR combination of FormatOption
            values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.FormatOption.StereoBuffers">
            <summary>Used to request stereo buffers in the surface format.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.FormatOption.DebugContext">
            <summary>Used to request a debug context with extra debugging information.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.FormatOption.DeprecatedFunctions">
            <summary>Used to request that deprecated functions be included in the OpenGL context profile. If not specified, you should get a forward compatible context without support functionality marked as deprecated. This requires OpenGL version 3.0 or higher.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.FormatOption.ResetNotification">
            <summary>Enables notifications about resets of the OpenGL context. The status is then queryable via the context's isValid() function. Note that not setting this flag does not guarantee that context state loss never occurs. Additionally, some implementations may choose to report context loss regardless of this flag.</summary>
        </member>
        <member name="T:QtGui.QSurfaceFormat.SwapBehavior">
            <summary>
            <para>This enum is used by QSurfaceFormat to specify the swap behaviour
            of a surface. The swap behaviour is mostly transparent to the application,
            but it affects factors such as rendering latency and throughput.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.SwapBehavior.DefaultSwapBehavior">
            <summary>The default, unspecified swap behaviour of the platform.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.SwapBehavior.SingleBuffer">
            <summary>Used to request single buffering, which might result in flickering when OpenGL rendering is done directly to screen without an intermediate offscreen buffer.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.SwapBehavior.DoubleBuffer">
            <summary>This is typically the default swap behaviour on desktop platforms, consisting of one back buffer and one front buffer. Rendering is done to the back buffer, and then the back buffer and front buffer are swapped, or the contents of the back buffer are copied to the front buffer, depending on the implementation.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.SwapBehavior.TripleBuffer">
            <summary>This swap behaviour is sometimes used in order to decrease the risk of skipping a frame when the rendering rate is just barely keeping up with the screen refresh rate. Depending on the platform it might also lead to slightly more efficient use of the GPU due to improved pipelining behaviour. Triple buffering comes at the cost of an extra frame of memory usage and latency, and might not be supported depending on the underlying platform.</summary>
        </member>
        <member name="T:QtGui.QSurfaceFormat.RenderableType">
            <summary>
            <para>This enum specifies the rendering backend for the surface.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.RenderableType.DefaultRenderableType">
            <summary>The default, unspecified rendering method</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.RenderableType.OpenGL">
            <summary>Desktop OpenGL rendering</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.RenderableType.OpenGLES">
            <summary>OpenGL ES 2.0 rendering</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.RenderableType.OpenVG">
            <summary>Open Vector Graphics rendering</summary>
        </member>
        <member name="T:QtGui.QSurfaceFormat.OpenGLContextProfile">
            <summary>
            <para>This enum is used to specify the OpenGL context profile, in
            conjunction with QSurfaceFormat::setMajorVersion() and
            QSurfaceFormat::setMinorVersion().</para>
            <para>Profiles are exposed in OpenGL 3.2 and above, and are used to
            choose between a restricted core profile, and a compatibility profile which
            might contain deprecated support functionality.</para>
            <para>Note that the core profile might still contain functionality that
            is deprecated and scheduled for removal in a higher version. To get access
            to the deprecated functionality for the core profile in the set OpenGL
            version you can use the QSurfaceFormat format option
            QSurfaceFormat::DeprecatedFunctions.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.OpenGLContextProfile.NoProfile">
            <summary>OpenGL version is lower than 3.2. For 3.2 and newer this is same as CoreProfile.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.OpenGLContextProfile.CoreProfile">
            <summary>Functionality deprecated in OpenGL version 3.0 is not available.</summary>
        </member>
        <member name="F:QtGui.QSurfaceFormat.OpenGLContextProfile.CompatibilityProfile">
            <summary>Functionality from earlier OpenGL versions is available.</summary>
        </member>
        <member name="T:QtGui.QSurface">
            <summary>
            <para>The QSurface class is an abstraction of renderable surfaces in
            Qt.</para>
            </summary>
            <remarks>
            <para>The size of the surface is accessible with the size() function.
            The rendering specific attributes of the surface are accessible through the
            format() function.</para>
            </remarks>
        </member>
        <member name="T:QtGui.IQSurface">
            <summary>
            <para>The QSurface class is an abstraction of renderable surfaces in
            Qt.</para>
            </summary>
            <remarks>
            <para>The size of the surface is accessible with the size() function.
            The rendering specific attributes of the surface are accessible through the
            format() function.</para>
            </remarks>
        </member>
        <member name="P:QtGui.IQSurface.surfaceClass">
            <summary>
            <para>Returns the surface class of this surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQSurface.Format">
            <summary>
            <para>Returns the format of the surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQSurface.surfaceType">
            <summary>
            <para>Returns the type of the surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQSurface.SupportsOpenGL">
            <summary>
            <para>Returns true if the surface is OpenGL compatible and can be used
            in conjunction with QOpenGLContext; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.IQSurface.Size">
            <summary>
            <para>Returns the size of the surface in pixels.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSurface.#ctor(QtGui.QSurface.SurfaceClass)">
            <summary>
            <para>Creates a surface with the given type.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurface.surfaceClass">
            <summary>
            <para>Returns the surface class of this surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurface.Format">
            <summary>
            <para>Returns the format of the surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurface.surfaceType">
            <summary>
            <para>Returns the type of the surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurface.SupportsOpenGL">
            <summary>
            <para>Returns true if the surface is OpenGL compatible and can be used
            in conjunction with QOpenGLContext; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QSurface.Size">
            <summary>
            <para>Returns the size of the surface in pixels.</para>
            </summary>
        </member>
        <member name="T:QtGui.QSurface.SurfaceClass">
            <summary>
            <para>The SurfaceClass enum describes the actual subclass of the
            surface.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurface.SurfaceClass.Window">
            <summary>The surface is an instance of QWindow.</summary>
        </member>
        <member name="F:QtGui.QSurface.SurfaceClass.Offscreen">
            <summary>The surface is an instance of QOffscreenSurface.</summary>
        </member>
        <member name="T:QtGui.QSurface.SurfaceType">
            <summary>
            <para>The SurfaceType enum describes what type of surface this
            is.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSurface.SurfaceType.RasterSurface">
            <summary>The surface is is composed of pixels and can be rendered to using a software rasterizer like Qt's raster paint engine.</summary>
        </member>
        <member name="F:QtGui.QSurface.SurfaceType.OpenGLSurface">
            <summary>The surface is an OpenGL compatible surface and can be used in conjunction with QOpenGLContext.</summary>
        </member>
        <member name="F:QtGui.QSurface.SurfaceType.RasterGLSurface">
            <summary>The surface can be rendered to using a software rasterizer, and also supports OpenGL. This surface type is intended for internal Qt use, and requires the use of private API.</summary>
        </member>
        <member name="T:QtGui.QOffscreenSurface">
            <summary>
            <para>The QOffscreenSurface class represents an offscreen surface in
            the underlying platform.</para>
            </summary>
            <remarks>
            <para>QOffscreenSurface is intended to be used with QOpenGLContext to
            allow rendering with OpenGL in an arbitrary thread without the need to
            create a QWindow.</para>
            <para>Even though the surface is typically renderable, the surface's
            pixels are not accessible. QOffscreenSurface should only be used to create
            OpenGL resources such as textures or framebuffer objects.</para>
            <para>An application will typically use QOffscreenSurface to perform
            some time-consuming tasks in a separate thread in order to avoid stalling
            the main rendering thread. Resources created in the QOffscreenSurface's
            context can be shared with the main OpenGL context. Some common use cases
            are asynchronous texture uploads or rendering into a
            QOpenGLFramebufferObject.</para>
            <para>How the offscreen surface is implemented depends on the
            underlying platform, but it will typically use a pixel buffer (pbuffer). If
            the platform doesn't implement or support offscreen surfaces,
            QOffscreenSurface will use an invisible QWindow internally.</para>
            <para>Note: Due to the fact that QOffscreenSurface is backed by a
            QWindow on some platforms, cross-platform applications must ensure that
            create() is only called on the main (GUI) thread. The QOffscreenSurface is
            then safe to be used with makeCurrent() on other threads, but the
            initialization and destruction must always happen on the main (GUI)
            thread.</para>
            <para>Note: In order to create an offscreen surface that is guaranteed
            to be compatible with a given context and window, make sure to set the
            format to the context's or the window's actual format, that is, the
            QSurfaceFormat returned from QOpenGLContext::format() or QWindow::format()
            after the context or window has been created. Passing the format returned
            from QWindow::requestedFormat() to setFormat() may result in an
            incompatible offscreen surface since the underlying windowing system
            interface may offer a different set of configurations for window and
            pbuffer surfaces.</para>
            <para>Note: Some platforms may utilize a surfaceless context extension
            (for example EGL_KHR_surfaceless_context) when available. In this case
            there will be no underlying native surface. For the use cases of
            QOffscreenSurface (rendering to FBOs, texture upload) this is not a
            problem.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOffscreenSurface.#ctor(QtGui.QScreen)">
            <summary>
            <para>Creates an offscreen surface for the targetScreen.</para>
            <para>The underlying platform surface is not created until create() is
            called.</para>
            <para>See also setScreen() and create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOffscreenSurface.Create">
            <summary>
            <para>Allocates the platform resources associated with the offscreen
            surface.</para>
            <para>It is at this point that the surface format set using setFormat()
            gets resolved into an actual native surface.</para>
            <para>Call destroy() to free the platform resources if
            necessary.</para>
            <para>Note: Some platforms require this function to be called on the
            main (GUI) thread.</para>
            <para>See also destroy().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOffscreenSurface.Destroy">
            <summary>
            <para>Releases the native platform resources associated with this
            offscreen surface.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOffscreenSurface.SetFormat(QtGui.QSurfaceFormat)">
            <summary>
            <para>Sets the offscreen surface format.</para>
            <para>The surface format will be resolved in the create() function.
            Calling this function after create() will not re-resolve the surface format
            of the native surface.</para>
            <para>See also format(), create(), and destroy().</para>
            </summary>
        </member>
        <member name="E:QtGui.QOffscreenSurface.ScreenChanged">
            <summary>
            <para>This signal is emitted when an offscreen surface's screen changes, either by being set explicitly with setScreen(), or automatically when the window's screen is removed.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.Format">
            <summary>
            <para>Reimplemented from QSurface::format().</para>
            <para>Returns the actual format of this offscreen surface.</para>
            <para>After the offscreen surface has been created, this function will
            return the actual surface format of the surface. It might differ from the
            requested format if the requested format could not be fulfilled by the
            platform.</para>
            <para>See also setFormat(), create(), and requestedFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.Screen">
            <summary>
            <para>Returns the screen to which the offscreen surface is
            connected.</para>
            <para>See also setScreen().</para>
            <para></para>
            <para>Sets the screen to which the offscreen surface is
            connected.</para>
            <para>If the offscreen surface has been created, it will be recreated
            on the newScreen.</para>
            <para>See also screen().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.surfaceType">
            <summary>
            <para>Reimplemented from QSurface::surfaceType().</para>
            <para>Returns the surface type of the offscreen surface.</para>
            <para>The surface type of an offscreen surface is always
            QSurface::OpenGLSurface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.Size">
            <summary>
            <para>Reimplemented from QSurface::size().</para>
            <para>Returns the size of the offscreen surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.IsValid">
            <summary>
            <para>Returns true if this offscreen surface is valid; otherwise
            returns false.</para>
            <para>The offscreen surface is valid if the platform resources have
            been successfuly allocated.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.RequestedFormat">
            <summary>
            <para>Returns the requested surfaceformat of this offscreen
            surface.</para>
            <para>If the requested format was not supported by the platform
            implementation, the requestedFormat will differ from the actual offscreen
            surface format.</para>
            <para>This is the value set with setFormat().</para>
            <para>See also setFormat() and format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.surfaceClass">
            <summary>
            <para>Returns the surface class of this surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOffscreenSurface.SupportsOpenGL">
            <summary>
            <para>Returns true if the surface is OpenGL compatible and can be used
            in conjunction with QOpenGLContext; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAbstractOpenGLFunctions">
            <summary>
            <para>The QAbstractOpenGLFunctions class is the base class of a family
            of classes that expose all functions for each OpenGL version and
            profile.</para>
            </summary>
            <remarks>
            <para>OpenGL implementations on different platforms are able to link to
            a variable number of OpenGL functions depending upon the OpenGL ABI on that
            platform. For example, on Microsoft Windows only functions up to those in
            OpenGL 1.1 can be linked to at build time. All other functions must be
            resolved at runtime. The traditional solution to this has been to use
            either QOpenGLContext::getProcAddress() or QOpenGLFunctions. The former is
            tedious and error prone and means dealing directly with function pointers.
            The latter only exposes those functions common to OpenGL ES 2 and desktop
            OpenGL. There is however much new OpenGL functionality that is useful when
            writing real world OpenGL applications.</para>
            <para>Qt now provides a family of classes which all inherit from
            QAbstractOpenGLFunctions which expose every core OpenGL function by way of
            a corresponding member function. There is a class for every valid
            combination of OpenGL version and profile. Each class follows the naming
            convention:</para>
            <para>QOpenGLFunctions_&lt;MAJOR VERSION&gt;_&lt;MINOR
            VERSION&gt;[_PROFILE]</para>
            <para>For OpenGL versions 1.0 through to 3.0 there are no profiles,
            leading to the classes:</para>
            <para></para>
            <para>QOpenGLFunctions_1_0</para>
            <para>QOpenGLFunctions_1_1</para>
            <para>QOpenGLFunctions_1_2</para>
            <para>QOpenGLFunctions_1_3</para>
            <para>QOpenGLFunctions_1_4</para>
            <para>QOpenGLFunctions_1_5</para>
            <para>QOpenGLFunctions_2_0</para>
            <para>QOpenGLFunctions_2_1</para>
            <para>QOpenGLFunctions_3_0</para>
            <para></para>
            <para>where each class inherits from QAbstractOpenGLFunctions.</para>
            <para>OpenGL version 3.1 removed many deprecated functions leading to a
            much simpler and generic API.</para>
            <para>With OpenGL 3.2 the concept of profiles was introduced. Two
            profiles are currently defined for OpenGL: Core and Compatibility.</para>
            <para>The Core profile does not include any of the functions that were
            removed in OpenGL 3.1. The Compatibility profile contains all functions in
            the Core profile of the same version plus all of the functions that were
            removed in OpenGL 3.1. In this way the Compatibility profile classes allow
            use of newer OpenGL functionality but also allows you to keep using your
            legacy OpenGL code. For new OpenGL code the Core profile should be
            preferred.</para>
            <para>Please note that some vendors, notably Apple, do not implement
            the Compatibility profile. Therefore if you wish to target new OpenGL
            features on OS X then you should ensure that you request a Core profile
            context via QSurfaceFormat::setProfile().</para>
            <para>Qt provides classes for all version and Core and Compatibility
            profile combinations. The classes for OpenGL versions 3.1 through to 4.3
            are:</para>
            <para></para>
            <para>QOpenGLFunctions_3_1</para>
            <para>QOpenGLFunctions_3_2_Core</para>
            <para>QOpenGLFunctions_3_2_Compatibility</para>
            <para>QOpenGLFunctions_3_3_Core</para>
            <para>QOpenGLFunctions_3_3_Compatibility</para>
            <para>QOpenGLFunctions_4_0_Core</para>
            <para>QOpenGLFunctions_4_0_Compatibility</para>
            <para>QOpenGLFunctions_4_1_Core</para>
            <para>QOpenGLFunctions_4_1_Compatibility</para>
            <para>QOpenGLFunctions_4_2_Core</para>
            <para>QOpenGLFunctions_4_2_Compatibility</para>
            <para>QOpenGLFunctions_4_3_Core</para>
            <para>QOpenGLFunctions_4_3_Compatibility</para>
            <para></para>
            <para>where each class inherits from QAbstractOpenGLFunctions.</para>
            <para>A pointer to an object of the class corresponding to the version
            and profile of OpenGL in use can be obtained from
            QOpenGLContext::versionFunctions(). If obtained in this way, note that the
            QOpenGLContext retains ownership of the object. This is so that only one
            instance need be created.</para>
            <para>Before calling any of the exposed OpenGL functions you must
            ensure that the object has resolved the function pointers to the OpenGL
            functions. This only needs to be done once per instance with
            initializeOpenGLFunctions(). Once initialized, the object can be used to
            call any OpenGL function for the corresponding version and profile. Note
            that initializeOpenGLFunctions() can fail in some circumstances so check
            the return value. Situations in which initialization can fail are if you
            have a functions object for a version or profile that contains functions
            that are not part of the context being used to resolve the function
            pointers.</para>
            <para>If you exclusively use function objects then you will get compile
            time errors if you attempt to use a function not included in that version
            and profile. This is obviously a lot easier to debug than undefined
            behavior at run time.</para>
            <para></para>
            <para>See also QOpenGLContext::versionFunctions().</para>
            </remarks>
        </member>
        <member name="P:QtGui.QAbstractOpenGLFunctions.OwningContext">
            <summary>
            <para>See also setOwningContext().</para>
            <para></para>
            <para>See also owningContext().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLVersionProfile">
            <summary>
            <para>The QOpenGLVersionProfile class represents the version and if
            applicable the profile of an OpenGL context.</para>
            </summary>
            <remarks>
            <para>An object of this class can be passed to
            QOpenGLContext::versionFunctions() to request a functions object for a
            specific version and profile of OpenGL.</para>
            <para>It also contains some helper functions to check if a version
            supports profiles or is a legacy version.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLVersionProfile.#ctor">
            <summary>
            <para>Creates a default invalid QOpenGLVersionProfile object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVersionProfile.#ctor(QtGui.QSurfaceFormat)">
            <summary>
            <para>Creates a QOpenGLVersionProfile object initialised with the
            version and profile from format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVersionProfile.#ctor(QtGui.QOpenGLVersionProfile)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVersionProfile.SetVersion(System.Int32,System.Int32)">
            <summary>
            <para>Sets the major and minor version numbers to majorVersion and
            minorVersion respectively.</para>
            <para>See also version().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVersionProfile.Profile">
            <summary>
            <para>Returns the OpenGL profile. Only makes sense if profiles are
            supported by this version.</para>
            <para>See also setProfile().</para>
            <para></para>
            <para>Sets the OpenGL profile profile. Only makes sense if profiles are
            supported by this version.</para>
            <para>See also profile().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVersionProfile.HasProfiles">
            <summary>
            <para>Returns true if profiles are supported by the OpenGL version
            returned by version(). Only OpenGL versions &gt;= 3.2 support
            profiles.</para>
            <para>See also profile() and version().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVersionProfile.IsLegacyVersion">
            <summary>
            <para>Returns true is the OpenGL version returned by version() contains
            deprecated functions and does not support profiles i.e. if the OpenGL
            version is &lt;= 3.1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVersionProfile.IsValid">
            <summary>
            <para>Returns true if the version number is valid. Note that for a
            default constructed QOpenGLVersionProfile object this function will return
            false.</para>
            <para>See also setVersion() and version().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLContextGroup">
            <summary>
            <para>The QOpenGLContextGroup class represents a group of contexts
            sharing OpenGL resources.</para>
            </summary>
            <remarks>
            <para>QOpenGLContextGroup is automatically created and managed by
            QOpenGLContext instances. Its purpose is to identify all the contexts that
            are sharing resources.</para>
            <para></para>
            <para>See also QOpenGLContext::shareGroup().</para>
            </remarks>
        </member>
        <member name="P:QtGui.QOpenGLContextGroup.CurrentContextGroup">
            <summary>
            <para>Returns the QOpenGLContextGroup corresponding to the current
            context.</para>
            <para>See also QOpenGLContext::currentContext().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLContext">
            <summary>
            <para>The QOpenGLContext class represents a native OpenGL context,
            enabling OpenGL rendering on a QSurface.</para>
            </summary>
            <remarks>
            <para>QOpenGLContext represents the OpenGL state of an underlying
            OpenGL context. To set up a context, set its screen and format such that
            they match those of the surface or surfaces with which the context is meant
            to be used, if necessary make it share resources with other contexts with
            setShareContext(), and finally call create(). Use the return value or
            isValid() to check if the context was successfully initialized.</para>
            <para>A context can be made current against a given surface by calling
            makeCurrent(). When OpenGL rendering is done, call swapBuffers() to swap
            the front and back buffers of the surface, so that the newly rendered
            content becomes visible. To be able to support certain platforms,
            QOpenGLContext requires that you call makeCurrent() again before starting
            rendering a new frame, after calling swapBuffers().</para>
            <para>If the context is temporarily not needed, such as when the
            application is not rendering, it can be useful to delete it in order to
            free resources. You can connect to the aboutToBeDestroyed() signal to clean
            up any resources that have been allocated with different ownership from the
            QOpenGLContext itself.</para>
            <para>Once a QOpenGLContext has been made current, you can render to it
            in a platform independent way by using Qt's OpenGL enablers such as
            QOpenGLFunctions, QOpenGLBuffer, QOpenGLShaderProgram, and
            QOpenGLFramebufferObject. It is also possible to use the platform's OpenGL
            API directly, without using the Qt enablers, although potentially at the
            cost of portability. The latter is necessary when wanting to use OpenGL 1.x
            or OpenGL ES 1.x.</para>
            <para>For more information about the OpenGL API, refer to the official
            OpenGL documentation.</para>
            <para>For an example of how to use QOpenGLContext see the OpenGL Window
            example.</para>
            <para></para>
            <para>Thread Affinity</para>
            <para>QOpenGLContext can be moved to a different thread with
            moveToThread(). Do not call makeCurrent() from a different thread than the
            one to which the QOpenGLContext object belongs. A context can only be
            current in one thread and against one surface at a time, and a thread only
            has one context current at a time.</para>
            <para></para>
            <para>Context Resource Sharing</para>
            <para>Resources, such as framebuffer objects, textures, and vertex
            buffer objects can be shared between contexts. Use setShareContext() before
            calling create() to specify that the contexts should share these resources.
            QOpenGLContext internally keeps track of a QOpenGLContextGroup object which
            can be accessed with shareGroup(), and which can be used to find all the
            contexts in a given share group. A share group consists of all contexts
            that have been successfully initialized and are sharing with an existing
            context in the share group. A non-sharing context has a share group
            consisting of a single context.</para>
            <para></para>
            <para>Default Framebuffer</para>
            <para>On certain platforms, a framebuffer other than 0 might be the
            default frame buffer depending on the current surface. Instead of calling
            glBindFramebuffer(0), it is recommended that you use
            glBindFramebuffer(ctx-&gt;defaultFramebufferObject()), to ensure that your
            application is portable between different platforms. However, if you use
            QOpenGLFunctions::glBindFramebuffer(), this is done automatically for
            you.</para>
            <para></para>
            <para>See also QOpenGLFunctions, QOpenGLBuffer, QOpenGLShaderProgram,
            and QOpenGLFramebufferObject.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLContext.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a new OpenGL context instance with parent object
            parent.</para>
            <para>Before it can be used you need to set the proper format and call
            create().</para>
            <para>See also create() and makeCurrent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.Create">
            <summary>
            <para>Attempts to create the OpenGL context with the current
            configuration.</para>
            <para>The current configuration includes the format, the share context,
            and the screen.</para>
            <para>If the OpenGL implementation on your system does not support the
            requested version of OpenGL context, then QOpenGLContext will try to create
            the closest matching version. The actual created context properties can be
            queried using the QSurfaceFormat returned by the format() function. For
            example, if you request a context that supports OpenGL 4.3 Core profile but
            the driver and/or hardware only supports version 3.2 Core profile contexts
            then you will get a 3.2 Core profile context.</para>
            <para>Returns true if the native context was successfully created and
            is ready to be used with makeCurrent(), swapBuffers(), etc.</para>
            <para>Note: If the context already exists, this function destroys the
            existing context first, and then creates a new one.</para>
            <para>See also makeCurrent() and format().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.MakeCurrent(QtGui.IQSurface)">
            <summary>
            <para>Makes the context current in the current thread, against the
            given surface. Returns true if successful.</para>
            <para>If surface is 0 this is equivalent to calling
            doneCurrent().</para>
            <para>Do not call this function from a different thread than the one
            the QOpenGLContext instance lives in. If you wish to use QOpenGLContext
            from a different thread you should first call make sure it's not current in
            the current thread, by calling doneCurrent() if necessary. Then call
            moveToThread(otherThread) before using it in the other thread.</para>
            <para>See also functions() and doneCurrent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.DoneCurrent">
            <summary>
            <para>Convenience function for calling makeCurrent with a 0
            surface.</para>
            <para>This results in no context being current in the current
            thread.</para>
            <para>See also makeCurrent() and currentContext().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.SwapBuffers(QtGui.IQSurface)">
            <summary>
            <para>Swap the back and front buffers of surface.</para>
            <para>Call this to finish a frame of OpenGL rendering, and make sure to
            call makeCurrent() again before you begin a new frame.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.GetProcAddress(QtCore.QByteArray)">
            <summary>
            <para>Resolves the function pointer to an OpenGL extension function,
            identified by procName</para>
            <para>Returns 0 if no such function can be found.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.VersionFunctions(QtGui.QOpenGLVersionProfile)">
            <summary>
            <para>Returns a pointer to an object that provides access to all
            functions for the versionProfile of this context. There is no need to call
            QAbstractOpenGLFunctions::initializeOpenGLFunctions() as long as this
            context is current. It is also possible to call this function when the
            context is not current, but in that case it is the caller's responsibility
            to ensure proper initialization by calling
            QAbstractOpenGLFunctions::initializeOpenGLFunctions() afterwards.</para>
            <para>Usually one would use the template version of this function to
            automatically have the result cast to the correct type.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.HasExtension(QtCore.QByteArray)">
            <summary>
            <para>Returns true if this OpenGL context supports the specified OpenGL
            extension, false otherwise.</para>
            <para>The context or a sharing context must be current.</para>
            <para>See also extensions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.VersionFunctions">
            <summary>
            <para>Returns a pointer to an object that provides access to all
            functions for the versionProfile of this context. There is no need to call
            QAbstractOpenGLFunctions::initializeOpenGLFunctions() as long as this
            context is current. It is also possible to call this function when the
            context is not current, but in that case it is the caller's responsibility
            to ensure proper initialization by calling
            QAbstractOpenGLFunctions::initializeOpenGLFunctions() afterwards.</para>
            <para>Usually one would use the template version of this function to
            automatically have the result cast to the correct type.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.AreSharing(QtGui.QOpenGLContext,QtGui.QOpenGLContext)">
            <summary>
            <para>Returns true if the first and second contexts are sharing OpenGL
            resources.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.OpenGLModuleHandle">
            <summary>
            <para>Returns the platform-specific handle for the OpenGL
            implementation that is currently in use. (for example, a HMODULE on
            Windows)</para>
            <para>On platforms that do not use dynamic GL switch the return value
            is null.</para>
            <para>The library might be GL-only, meaning that windowing system
            interface functions (for example EGL) may live in another, separate
            library.</para>
            <para>Note: This function requires that the QGuiApplication instance is
            already created.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also openGLModuleType().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLContext.openGLModuleType">
            <summary>
            <para>Returns the underlying OpenGL implementation type.</para>
            <para>On platforms where the OpenGL implementation is not dynamically
            loaded, the return value is determined during compile time and never
            changes.</para>
            <para>Note: A desktop OpenGL implementation may be capable of creating
            ES-compatible contexts too. Therefore in most cases it is more appropriate
            to check QSurfaceFormat::renderableType() or using the the convenience
            function isOpenGLES().</para>
            <para>Note: This function requires that the QGuiApplication instance is
            already created.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="E:QtGui.QOpenGLContext.AboutToBeDestroyed">
            <summary>
            <para>This signal is emitted before the underlying native OpenGL context is destroyed, such that users may clean up OpenGL resources that might otherwise be left dangling in the case of shared OpenGL contexts.</para>
            <para>If you wish to make the context current in order to do clean-up, make sure to only connect to the signal using a direct connection.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.Format">
            <summary>
            <para>Returns the format of the underlying platform context, if
            create() has been called.</para>
            <para>Otherwise, returns the requested format.</para>
            <para>The requested and the actual format may differ. Requesting a
            given OpenGL version does not mean the resulting context will target
            exactly the requested version. It is only guaranteed that the
            version/profile/options combination for the created context is compatible
            with the request, as long as the driver is able to provide such a
            context.</para>
            <para>For example, requesting an OpenGL version 3.x core profile
            context may result in an OpenGL 4.x core profile context. Similarly, a
            request for OpenGL 2.1 may result in an OpenGL 3.0 context with deprecated
            functions enabled. Finally, depending on the driver, unsupported versions
            may result in either a context creation failure or in a context for the
            highest supported version.</para>
            <para>Similar differences are possible in the buffer sizes, for
            example, the resulting context may have a larger depth buffer than
            requested. This is perfectly normal.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format the OpenGL context should be compatible with. You
            need to call create() before it takes effect.</para>
            <para>When the format is not explicitly set via this function, the
            format returned by QSurfaceFormat::defaultFormat() will be used. This means
            that when having multiple contexts, individual calls to this function can
            be replaced by one single call to QSurfaceFormat::setDefaultFormat() before
            creating the first context.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.ShareContext">
            <summary>
            <para>Returns the share context this context was created with.</para>
            <para>If the underlying platform was not able to support the requested
            sharing, this will return 0.</para>
            <para>See also setShareContext().</para>
            <para></para>
            <para>Makes this context share textures, shaders, and other OpenGL
            resources with shareContext. You need to call create() before it takes
            effect.</para>
            <para>See also shareContext().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.Screen">
            <summary>
            <para>Returns the screen the context was created for.</para>
            <para>See also setScreen().</para>
            <para></para>
            <para>Sets the screen the OpenGL context should be valid for. You need
            to call create() before it takes effect.</para>
            <para>See also screen().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.NativeHandle">
            <summary>
            <para>Returns the native handle for the context.</para>
            <para>This function provides access to the QOpenGLContext's underlying
            native context. The returned variant contains a platform-specific value
            type. These classes can be found in the module QtPlatformHeaders.</para>
            <para>On platforms where retrieving the native handle is not supported,
            or if neither create() nor setNativeHandle() was called, a null variant is
            returned.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also setNativeHandle().</para>
            <para></para>
            <para>Set the native handles for this context. When create() is called
            and a native handle is set, configuration settings, like format(), are
            ignored since this QOpenGLContext will wrap an already created native
            context instead of creating a new one from scratch.</para>
            <para>On some platforms the native context handle is not sufficient and
            other related handles (for example, for a window or display) have to be
            provided in addition. Therefore handle is variant containing a
            platform-specific value type. These classes can be found in the
            QtPlatformHeaders module.</para>
            <para>When create() is called with native handles set, QOpenGLContext
            does not take ownership of the handles, so destroying the QOpenGLContext
            does not destroy the native context.</para>
            <para>Note: Some frameworks track the current context and surfaces
            internally. Making the adopted QOpenGLContext current via Qt will have no
            effect on such other frameworks' internal state. Therefore a subsequent
            makeCurrent done via the other framework may have no effect. It is
            therefore advisable to make explicit calls to make no context and surface
            current to reset the other frameworks' internal state after performing
            OpenGL operations via Qt.</para>
            <para>Note: Using foreign contexts with Qt windows and Qt contexts with
            windows and surfaces created by other frameworks may give unexpected
            results, depending on the platform, due to potential mismatches in context
            and window pixel formats. To make sure this does not happen, avoid making
            contexts and surfaces from different frameworks current together. Instead,
            prefer approaches based on context sharing where OpenGL resources like
            textures are accessible both from Qt's and the foreign framework's
            contexts.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also nativeHandle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.IsValid">
            <summary>
            <para>Returns if this context is valid, i.e. has been successfully
            created.</para>
            <para>On some platforms the return value of false for a context that
            was successfully created previously indicates that the OpenGL context was
            lost.</para>
            <para>The typical way to handle context loss scenarios in applications
            is to check via this function whenever makeCurrent() fails and returns
            false. If this function then returns false, recreate the underlying native
            OpenGL context by calling create(), call makeCurrent() again and then
            reinitialize all OpenGL resources.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.ShareGroup">
            <summary>
            <para>Returns the share group this context belongs to.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.DefaultFramebufferObject">
            <summary>
            <para>Call this to get the default framebuffer object for the current
            surface.</para>
            <para>On some platforms (for instance, iOS) the default framebuffer
            object depends on the surface being rendered to, and might be different
            from 0. Thus, instead of calling glBindFramebuffer(0), you should call
            glBindFramebuffer(ctx-&gt;defaultFramebufferObject()) if you want your
            application to work across different Qt platforms.</para>
            <para>If you use the glBindFramebuffer() in QOpenGLFunctions you do not
            have to worry about this, as it automatically binds the current context's
            defaultFramebufferObject() when 0 is passed.</para>
            <para>Note: Widgets that render via framebuffer objects, like
            QOpenGLWidget and QQuickWidget, will override the value returned from this
            function when painting is active, because at that time the correct
            &quot;default&quot; framebuffer is the widget's associated backing
            framebuffer, not the platform-specific one belonging to the top-level
            window's surface. This ensures the expected behavior for this function and
            other classes relying on it (for example,
            QOpenGLFramebufferObject::bindDefault() or
            QOpenGLFramebufferObject::release()).</para>
            <para>See also QOpenGLFramebufferObject.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.Surface">
            <summary>
            <para>Returns the surface the context has been made current
            with.</para>
            <para>This is the surface passed as an argument to
            makeCurrent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.CurrentContext">
            <summary>
            <para>Returns the last context which called makeCurrent in the current
            thread, or 0, if no context is current.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.Functions">
            <summary>
            <para>Get the QOpenGLFunctions instance for this context.</para>
            <para>QOpenGLContext offers this as a convenient way to access
            QOpenGLFunctions without having to manage it manually.</para>
            <para>The context or a sharing context must be current.</para>
            <para>The returned QOpenGLFunctions instance is ready to be used and it
            does not need initializeOpenGLFunctions() to be called.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.IsOpenGLES">
            <summary>
            <para>Returns true if the context is an OpenGL ES context.</para>
            <para>If the context has not yet been created, the result is based on
            the requested format set via setFormat().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also create(), format(), and setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.SupportsThreadedOpenGL">
            <summary>
            <para>Returns true if the platform supports OpenGL rendering outside
            the main (gui) thread.</para>
            <para>The value is controlled by the platform plugin in use and may
            also depend on the graphics drivers.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLContext.GlobalShareContext">
            <summary>
            <para>Returns the application-wide shared OpenGL context, if present.
            Otherwise, returns a null pointer.</para>
            <para>This is useful if you need to upload OpenGL objects (buffers,
            textures, etc.) before creating or showing a QOpenGLWidget or
            QQuickWidget.</para>
            <para>Note: You must set the Qt::AA_ShareOpenGLContexts flag on
            QGuiApplication before creating the QGuiApplication object, otherwise Qt
            may not create a global shared context.</para>
            <para>Warning: Do not attempt to make the context returned by this
            function current on any surface. Instead, you can create a new context
            which shares with the global one, and then make the new context
            current.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also Qt::AA_ShareOpenGLContexts, setShareContext(), and
            makeCurrent().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLContext.OpenGLModuleType">
            <summary>
            <para>This enum defines the type of the underlying OpenGL
            implementation.</para>
            <para>This enum was introduced or modified in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLContext.OpenGLModuleType.LibGL">
            <summary>OpenGL</summary>
        </member>
        <member name="F:QtGui.QOpenGLContext.OpenGLModuleType.LibGLES">
            <summary>OpenGL ES 2.0 or higher</summary>
        </member>
        <member name="T:QtGui.QWindow">
            <summary>
            <para>The QWindow class represents a window in the underlying windowing
            system.</para>
            </summary>
            <remarks>
            <para>A window that is supplied a parent becomes a native child window
            of their parent window.</para>
            <para>An application will typically use QWidget or QQuickView for its
            UI, and not QWindow directly. Still, it is possible to render directly to a
            QWindow with QBackingStore or QOpenGLContext, when wanting to keep
            dependencies to a minimum or when wanting to use OpenGL directly. The
            Raster Window Example and OpenGL Window Example are useful reference
            examples for how to render to a QWindow using either approach.</para>
            <para></para>
            <para>Resource Management</para>
            <para>Windows can potentially use a lot of memory. A usual measurement
            is width times height times color depth. A window might also include
            multiple buffers to support double and triple buffering, as well as depth
            and stencil buffers. To release a window's memory resources, call the
            destroy() function.</para>
            <para></para>
            <para>Content Orientation</para>
            <para>QWindow has reportContentOrientationChange() that can be used to
            specify the layout of the window contents in relation to the screen. The
            content orientation is simply a hint to the windowing system about which
            orientation the window contents are in. It's useful when you wish to keep
            the same window size, but rotate the contents instead, especially when
            doing rotation animations between different orientations. The windowing
            system might use this value to determine the layout of system popups or
            dialogs.</para>
            <para></para>
            <para>Visibility and Windowing System Exposure</para>
            <para>By default, the window is not visible, and you must call
            setVisible(true), or show() or similar to make it visible. To make a window
            hidden again, call setVisible(false) or hide(). The visible property
            describes the state the application wants the window to be in. Depending on
            the underlying system, a visible window might still not be shown on the
            screen. It could, for instance, be covered by other opaque windows or moved
            outside the physical area of the screen. On windowing systems that have
            exposure notifications, the isExposed() accessor describes whether the
            window should be treated as directly visible on screen. The exposeEvent()
            function is called whenever the windows exposure in the windowing system
            changes. On windowing systems that do not make this information visible to
            the application, isExposed() will simply return the same value as
            isVisible().</para>
            <para>QWindow::Visibility queried through visibility() is a convenience
            API combining the functions of visible() and windowState().</para>
            <para></para>
            <para>Rendering</para>
            <para>There are two Qt APIs that can be used to render content into a
            window, QBackingStore for rendering with a QPainter and flushing the
            contents to a window with type QSurface::RasterSurface, and QOpenGLContext
            for rendering with OpenGL to a window with type
            QSurface::OpenGLSurface.</para>
            <para>The application can start rendering as soon as isExposed()
            returns true, and can keep rendering until it isExposed() returns false. To
            find out when isExposed() changes, reimplement exposeEvent(). The window
            will always get a resize event before the first expose event.</para>
            <para></para>
            <para>Initial Geometry</para>
            <para>If the window's width and height are left uninitialized, the
            window will get a reasonable default geometry from the platform window. If
            the position is left uninitialized, then the platform window will allow the
            windowing system to position the window. For example on X11, the window
            manager usually does some kind of smart positioning to try to avoid having
            new windows completely obscure existing windows. However setGeometry()
            initializes both the position and the size, so if you want a fixed size but
            an automatic position, you should call resize() or setWidth() and
            setHeight() instead.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QWindow.#ctor(QtGui.QScreen)">
            <summary>
            <para>Creates a window as a top level on the targetScreen.</para>
            <para>The window is not shown until setVisible(true), show(), or
            similar is called.</para>
            <para>See also setScreen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.#ctor(QtGui.QWindow)">
            <summary>
            <para>Creates a window as a child of the given parent window.</para>
            <para>The window will be embedded inside the parent window, its
            coordinates relative to the parent.</para>
            <para>The screen is inherited from the parent.</para>
            <para>See also setParent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetSurfaceType(QtGui.QSurface.SurfaceType)">
            <summary>
            <para>Sets the surfaceType of the window.</para>
            <para>Specifies whether the window is meant for raster rendering with
            QBackingStore, or OpenGL rendering with QOpenGLContext.</para>
            <para>The surfaceType will be used when the native surface is created
            in the create() function. Calling this function after the native surface
            has been created requires calling destroy() and create() to release the old
            native surface and create a new one.</para>
            <para>See also surfaceType(), QBackingStore, QOpenGLContext, create(),
            and destroy().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Create">
            <summary>
            <para>Allocates the platform resources associated with the
            window.</para>
            <para>It is at this point that the surface format set using setFormat()
            gets resolved into an actual native surface. However, the window remains
            hidden until setVisible() is called.</para>
            <para>Note that it is not usually necessary to call this function
            directly, as it will be implicitly called by show(), setVisible(), and
            other functions that require access to the platform resources.</para>
            <para>Call destroy() to free the platform resources if
            necessary.</para>
            <para>See also destroy().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetFormat(QtGui.QSurfaceFormat)">
            <summary>
            <para>Sets the window's surface format.</para>
            <para>The format determines properties such as color depth, alpha,
            depth and stencil buffer size, etc. For example, to give a window a
            transparent background (provided that the window system supports
            compositing, and provided that other content in the window does not make it
            opaque again):</para>
            <para>QSurfaceFormat format;</para>
            <para>format.setAlphaBufferSize(8);</para>
            <para>window.setFormat(format);</para>
            <para>The surface format will be resolved in the create() function.
            Calling this function after create() has been called will not re-resolve
            the surface format of the native surface.</para>
            <para>When the format is not explicitly set via this function, the
            format returned by QSurfaceFormat::defaultFormat() will be used. This means
            that when having multiple windows, individual calls to this function can be
            replaced by one single call to QSurfaceFormat::setDefaultFormat() before
            creating the first window.</para>
            <para>See also format(), create(), destroy(), and
            QSurfaceFormat::setDefaultFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.ReportContentOrientationChange(QtCore.Qt.ScreenOrientation)">
            <summary>
            <para>This property holds the orientation of the window's
            contents.</para>
            <para>This is a hint to the window manager in case it needs to display
            additional content like popups, dialogs, status bars, or similar in
            relation to the window.</para>
            <para>The recommended orientation is QScreen::orientation() but an
            application doesn't have to support all possible orientations, and thus can
            opt to ignore the current screen orientation.</para>
            <para>The difference between the window and the content orientation
            determines how much to rotate the content by. QScreen::angleBetween(),
            QScreen::transformBetween(), and QScreen::mapBetween() can be used to
            compute the necessary transform.</para>
            <para>The default value is Qt::PrimaryOrientation</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.IsAncestorOf(QtGui.QWindow,QtGui.QWindow.AncestorMode)">
            <summary>
            <para>Returns true if the window is an ancestor of the given child. If
            mode is IncludeTransients, then transient parents are also considered
            ancestors.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetGeometry(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the geometry of the window, excluding its window frame, to a
            rectangle constructed from posx, posy, w and h.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetPosition(System.Int32,System.Int32)">
            <summary>
            <para>set the position of the window on the desktop to posx,
            posy</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Resize(QtCore.QSize)">
            <summary>
            <para>set the size of the window, excluding any window frame, to
            newSize</para>
            <para>See also size() and geometry().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Resize(System.Int32,System.Int32)">
            <summary>
            <para>set the size of the window, excluding any window frame, to a
            QSize constructed from width w and height h</para>
            <para>See also size() and geometry().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Destroy">
            <summary>
            <para>Releases the native platform resources associated with this
            window.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetKeyboardGrabEnabled(System.Boolean)">
            <summary>
            <para>Sets whether keyboard grab should be enabled or not
            (grab).</para>
            <para>If the return value is true, the window receives all key events
            until setKeyboardGrabEnabled(false) is called; other windows get no key
            events at all. Mouse events are not affected. Use setMouseGrabEnabled() if
            you want to grab that.</para>
            <para>See also setMouseGrabEnabled().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.SetMouseGrabEnabled(System.Boolean)">
            <summary>
            <para>Sets whether mouse grab should be enabled or not (grab).</para>
            <para>If the return value is true, the window receives all mouse events
            until setMouseGrabEnabled(false) is called; other windows get no mouse
            events at all. Keyboard events are not affected. Use
            setKeyboardGrabEnabled() if you want to grab that.</para>
            <para>See also setKeyboardGrabEnabled().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.FocusObject">
            <summary>
            <para>Returns the QObject that will be the final receiver of events
            tied focus, such as key events.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.MapToGlobal(QtCore.QPoint)">
            <summary>
            <para>Translates the window coordinate pos to global screen
            coordinates. For example, mapToGlobal(QPoint(0,0)) would give the global
            coordinates of the top-left pixel of the window.</para>
            <para>See also mapFromGlobal().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.MapFromGlobal(QtCore.QPoint)">
            <summary>
            <para>Translates the global screen coordinate pos to window
            coordinates.</para>
            <para>See also mapToGlobal().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.UnsetCursor">
            <summary>
            <para>Restores the default arrow cursor for this window.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.RequestActivate">
            <summary>
            <para>Requests the window to be activated, i.e. receive keyboard
            focus.</para>
            <para>See also isActive() and QGuiApplication::focusWindow().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Show">
            <summary>
            <para>Shows the window.</para>
            <para>This is equivalent to calling showFullScreen(), showMaximized(),
            or showNormal(), depending on the platform's default behavior for the
            window type and flags.</para>
            <para>See also showFullScreen(), showMaximized(), showNormal(), hide(),
            QStyleHints::showIsFullScreen(), and flags().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Hide">
            <summary>
            <para>Hides the window.</para>
            <para>Equivalent to calling setVisible(false).</para>
            <para>See also show() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.ShowMinimized">
            <summary>
            <para>Shows the window as minimized.</para>
            <para>Equivalent to calling setWindowState(Qt::WindowMinimized) and
            then setVisible(true).</para>
            <para>See also setWindowState() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.ShowMaximized">
            <summary>
            <para>Shows the window as maximized.</para>
            <para>Equivalent to calling setWindowState(Qt::WindowMaximized) and
            then setVisible(true).</para>
            <para>See also setWindowState() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.ShowFullScreen">
            <summary>
            <para>Shows the window as fullscreen.</para>
            <para>Equivalent to calling setWindowState(Qt::WindowFullScreen) and
            then setVisible(true).</para>
            <para>See also setWindowState() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.ShowNormal">
            <summary>
            <para>Shows the window as normal, i.e. neither maximized, minimized,
            nor fullscreen.</para>
            <para>Equivalent to calling setWindowState(Qt::WindowNoState) and then
            setVisible(true).</para>
            <para>See also setWindowState() and setVisible().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Close">
            <summary>
            <para>Close the window.</para>
            <para>This closes the window, effectively calling destroy(), and
            potentially quitting the application. Returns true on success, false if it
            has a parent window (in which case the top level window should be closed
            instead).</para>
            <para>See also destroy() and
            QGuiApplication::quitOnLastWindowClosed().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Raise">
            <summary>
            <para>Raise the window in the windowing system.</para>
            <para>Requests that the window be raised to appear above other
            windows.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Lower">
            <summary>
            <para>Lower the window in the windowing system.</para>
            <para>Requests that the window be lowered to appear below other
            windows.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.Alert(System.Int32)">
            <summary>
            <para>Causes an alert to be shown for msec miliseconds. If msec is 0
            (the default), then the alert is shown indefinitely until the window
            becomes active again. This function has no effect on an active
            window.</para>
            <para>In alert state, the window indicates that it demands attention,
            for example by flashing or bouncing the taskbar entry.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.RequestUpdate">
            <summary>
            <para>Schedules a QEvent::UpdateRequest event to be delivered to this
            window.</para>
            <para>The event is delivered in sync with the display vsync on
            platforms where this is possible. When driving animations, this function
            should be called once after drawing has completed.</para>
            <para>Calling this function multiple times will result in a single
            event being delivered to the window.</para>
            <para>Subclasses of QWindow should reimplement event(), intercept the
            event and call the application's rendering code, then call the base class
            implementation.</para>
            <para>Note: The subclass' reimplementation of event() must invoke the
            base class implementation, unless it is absolutely sure that the event does
            not need to be handled by the base class. For example, the default
            implementation of this function relies on QEvent::Timer events. Filtering
            them away would therefore break the delivery of the update events.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnExposeEvent(QtGui.QExposeEvent)">
            <summary>
            <para>The expose event (ev) is sent by the window system whenever the
            window's exposure on screen changes.</para>
            <para>The application can start rendering into the window with
            QBackingStore and QOpenGLContext as soon as it gets an exposeEvent() such
            that isExposed() is true.</para>
            <para>If the window is moved off screen, is made totally obscured by
            another window, iconified or similar, this function might be called and the
            value of isExposed() might change to false. When this happens, an
            application should stop its rendering as it is no longer visible to the
            user.</para>
            <para>A resize event will always be sent before the expose event the
            first time a window is shown.</para>
            <para>See also isExposed().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Override this to handle resize events (ev).</para>
            <para>The resize event is called whenever the window is resized in the
            windowing system, either directly through the windowing system
            acknowledging a setGeometry() or resize() request, or indirectly through
            the user resizing the window manually.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnMoveEvent(QtGui.QMoveEvent)">
            <summary>
            <para>Override this to handle window move events (ev).</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnFocusInEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Override this to handle focus in events (ev).</para>
            <para>Focus in events are sent when the window receives keyboard
            focus.</para>
            <para>See also focusOutEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnFocusOutEvent(QtGui.QFocusEvent)">
            <summary>
            <para>Override this to handle focus out events (ev).</para>
            <para>Focus out events are sent when the window loses keyboard
            focus.</para>
            <para>See also focusInEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnShowEvent(QtGui.QShowEvent)">
            <summary>
            <para>Override this to handle show events (ev).</para>
            <para>The function is called when the window has requested becoming
            visible.</para>
            <para>If the window is successfully shown by the windowing system, this
            will be followed by a resize and an expose event.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnHideEvent(QtGui.QHideEvent)">
            <summary>
            <para>Override this to handle hide events (ev).</para>
            <para>The function is called when the window has requested being hidden
            in the windowing system.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnEvent(QtCore.QEvent)">
            <summary>
            <para>Reimplemented from QObject::event().</para>
            <para>Override this to handle any event (ev) sent to the window. Return
            true if the event was recognized and processed.</para>
            <para>Remember to call the base class version if you wish for mouse
            events, key events, resize events, etc to be dispatched as usual.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnKeyPressEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Override this to handle key press events (ev).</para>
            <para>See also keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnKeyReleaseEvent(QtGui.QKeyEvent)">
            <summary>
            <para>Override this to handle key release events (ev).</para>
            <para>See also keyPressEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnMousePressEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Override this to handle mouse press events (ev).</para>
            <para>See also mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnMouseReleaseEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Override this to handle mouse release events (ev).</para>
            <para>See also mousePressEvent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnMouseDoubleClickEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Override this to handle mouse double click events (ev).</para>
            <para>See also mousePressEvent() and
            QStyleHints::mouseDoubleClickInterval().</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnMouseMoveEvent(QtGui.QMouseEvent)">
            <summary>
            <para>Override this to handle mouse move events (ev).</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnWheelEvent(QtGui.QWheelEvent)">
            <summary>
            <para>Override this to handle mouse wheel or other wheel events
            (ev).</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnTouchEvent(QtGui.QTouchEvent)">
            <summary>
            <para>Override this to handle touch events (ev).</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.OnTabletEvent(QtGui.QTabletEvent)">
            <summary>
            <para>Override this to handle tablet press, move, and release events
            (ev).</para>
            <para>Proximity enter and leave events are not sent to windows, they
            are delivered to the application instance.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.NativeEvent(QtCore.QByteArray,System.IntPtr,System.Int32@)">
            <summary>
            <para>Override this to handle platform dependent events. Will be given
            eventType, message and result.</para>
            <para>This might make your application non-portable.</para>
            <para>Should return true only if the event was handled.</para>
            </summary>
        </member>
        <member name="M:QtGui.QWindow.FromWinId(System.UInt32)">
            <summary>
            <para>Creates a local representation of a window created by another
            process or by using native libraries below Qt.</para>
            <para>Given the handle id to a native window, this method creates a
            QWindow object which can be used to represent the window when invoking
            methods like setParent() and setTransientParent(). This can be used, on
            platforms which support it, to embed a window inside a container or to make
            a window stick on top of a window created by another process.</para>
            <para>See also setParent() and setTransientParent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ScreenChanged">
            <summary>
            <para>This signal is emitted when a window's screen changes, either by being set explicitly with setScreen(), or automatically when the window's screen is removed.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ModalityChanged">
            <summary>
            <para>This property holds the modality of the window.</para>
            <para>A modal window prevents other windows from receiving input events. Qt supports two types of modality: Qt::WindowModal and Qt::ApplicationModal.</para>
            <para>By default, this property is Qt::NonModal</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::WindowModality 	modality() const</para>
            <para> void 	setModality(Qt::WindowModality modality)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	modalityChanged(Qt::WindowModality modality)</para>
            <para></para>
            <para>See also Qt::WindowModality.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.WindowStateChanged">
            <summary>
            <para>This signal is emitted when the windowState changes, either by being set explicitly with setWindowState(), or automatically when the user clicks one of the titlebar buttons or by other means.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.WindowTitleChanged">
            <summary>
            <para>This property holds the window's title in the windowing system.</para>
            <para>The window title might appear in the title area of the window decorations, depending on the windowing system and the window flags. It might also be used by the windowing system to identify the window in other contexts, such as in the task switcher.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QString 	title() const</para>
            <para> void 	setTitle(const QString &amp;)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	windowTitleChanged(const QString &amp; title)</para>
            <para></para>
            <para>See also flags().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.XChanged">
            <summary>
            <para>This property holds the x position of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	x() const</para>
            <para> void 	setX(int arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	xChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.YChanged">
            <summary>
            <para>This property holds the y position of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	y() const</para>
            <para> void 	setY(int arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	yChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.WidthChanged">
            <summary>
            <para>This property holds the width of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	width() const</para>
            <para> void 	setWidth(int arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	widthChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.HeightChanged">
            <summary>
            <para>This property holds the height of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	height() const</para>
            <para> void 	setHeight(int arg)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	heightChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MinimumWidthChanged">
            <summary>
            <para>This property holds the minimum width of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	minimumWidth() const</para>
            <para> void 	setMinimumWidth(int w)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minimumWidthChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MinimumHeightChanged">
            <summary>
            <para>This property holds the minimum height of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	minimumHeight() const</para>
            <para> void 	setMinimumHeight(int h)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	minimumHeightChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MaximumWidthChanged">
            <summary>
            <para>This property holds the maximum width of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	maximumWidth() const</para>
            <para> void 	setMaximumWidth(int w)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumWidthChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MaximumHeightChanged">
            <summary>
            <para>This property holds the maximum height of the window's geometry.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	maximumHeight() const</para>
            <para> void 	setMaximumHeight(int h)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	maximumHeightChanged(int arg)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.VisibleChanged">
            <summary>
            <para>This property holds whether the window is visible or not.</para>
            <para>This property controls the visibility of the window in the windowing system.</para>
            <para>By default, the window is not visible, you must call setVisible(true), or show() or similar to make it visible.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isVisible() const</para>
            <para> void 	setVisible(bool visible)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	visibleChanged(bool arg)</para>
            <para></para>
            <para>See also show().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.VisibilityChanged">
            <summary>
            <para>This property holds the screen-occupation state of the window.</para>
            <para>Visibility is whether the window should appear in the windowing system as normal, minimized, maximized, fullscreen or hidden.</para>
            <para>To set the visibility to AutomaticVisibility means to give the window a default visible state, which might be fullscreen or windowed depending on the platform. When reading the visibility property you will always get the actual state, never AutomaticVisibility.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Visibility 	visibility() const</para>
            <para> void 	setVisibility(Visibility v)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	visibilityChanged(QWindow::Visibility visibility)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ActiveChanged">
            <summary>
            <para>This property holds the active status of the window.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isActive() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeChanged()</para>
            <para></para>
            <para>See also requestActivate().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ContentOrientationChanged">
            <summary>
            <para>This property holds the orientation of the window's contents.</para>
            <para>This is a hint to the window manager in case it needs to display additional content like popups, dialogs, status bars, or similar in relation to the window.</para>
            <para>The recommended orientation is QScreen::orientation() but an application doesn't have to support all possible orientations, and thus can opt to ignore the current screen orientation.</para>
            <para>The difference between the window and the content orientation determines how much to rotate the content by. QScreen::angleBetween(), QScreen::transformBetween(), and QScreen::mapBetween() can be used to compute the necessary transform.</para>
            <para>The default value is Qt::PrimaryOrientation</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::ScreenOrientation 	contentOrientation() const</para>
            <para> void 	reportContentOrientationChange(Qt::ScreenOrientation orientation)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	contentOrientationChanged(Qt::ScreenOrientation orientation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.FocusObjectChanged">
            <summary>
            <para>This signal is emitted when the final receiver of events tied to focus is changed to object.</para>
            <para>See also focusObject().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.OpacityChanged">
            <summary>
            <para>This property holds the opacity of the window in the windowing system.</para>
            <para>If the windowing system supports window opacity, this can be used to fade the window in and out, or to make it semitransparent.</para>
            <para>A value of 1.0 or above is treated as fully opaque, whereas a value of 0.0 or below is treated as fully transparent. Values inbetween represent varying levels of translucency between the two extremes.</para>
            <para>The default value is 1.0.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	opacity() const</para>
            <para> void 	setOpacity(qreal level)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	opacityChanged(qreal opacity)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ExposeEvent">
            <summary>
            <para>The expose event (ev) is sent by the window system whenever the window's exposure on screen changes.</para>
            <para>The application can start rendering into the window with QBackingStore and QOpenGLContext as soon as it gets an exposeEvent() such that isExposed() is true.</para>
            <para>If the window is moved off screen, is made totally obscured by another window, iconified or similar, this function might be called and the value of isExposed() might change to false. When this happens, an application should stop its rendering as it is no longer visible to the user.</para>
            <para>A resize event will always be sent before the expose event the first time a window is shown.</para>
            <para>See also isExposed().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ResizeEvent">
            <summary>
            <para>Override this to handle resize events (ev).</para>
            <para>The resize event is called whenever the window is resized in the windowing system, either directly through the windowing system acknowledging a setGeometry() or resize() request, or indirectly through the user resizing the window manually.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MoveEvent">
            <summary>
            <para>Override this to handle window move events (ev).</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.FocusInEvent">
            <summary>
            <para>Override this to handle focus in events (ev).</para>
            <para>Focus in events are sent when the window receives keyboard focus.</para>
            <para>See also focusOutEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.FocusOutEvent">
            <summary>
            <para>Override this to handle focus out events (ev).</para>
            <para>Focus out events are sent when the window loses keyboard focus.</para>
            <para>See also focusInEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.ShowEvent">
            <summary>
            <para>Override this to handle show events (ev).</para>
            <para>The function is called when the window has requested becoming visible.</para>
            <para>If the window is successfully shown by the windowing system, this will be followed by a resize and an expose event.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.HideEvent">
            <summary>
            <para>Override this to handle hide events (ev).</para>
            <para>The function is called when the window has requested being hidden in the windowing system.</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.KeyPressEvent">
            <summary>
            <para>Override this to handle key press events (ev).</para>
            <para>See also keyReleaseEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.KeyReleaseEvent">
            <summary>
            <para>Override this to handle key release events (ev).</para>
            <para>See also keyPressEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MousePressEvent">
            <summary>
            <para>Override this to handle mouse press events (ev).</para>
            <para>See also mouseReleaseEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MouseReleaseEvent">
            <summary>
            <para>Override this to handle mouse release events (ev).</para>
            <para>See also mousePressEvent().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MouseDoubleClickEvent">
            <summary>
            <para>Override this to handle mouse double click events (ev).</para>
            <para>See also mousePressEvent() and QStyleHints::mouseDoubleClickInterval().</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.MouseMoveEvent">
            <summary>
            <para>Override this to handle mouse move events (ev).</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.WheelEvent">
            <summary>
            <para>Override this to handle mouse wheel or other wheel events (ev).</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.TouchEvent">
            <summary>
            <para>Override this to handle touch events (ev).</para>
            </summary>
        </member>
        <member name="E:QtGui.QWindow.TabletEvent">
            <summary>
            <para>Override this to handle tablet press, move, and release events (ev).</para>
            <para>Proximity enter and leave events are not sent to windows, they are delivered to the application instance.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.surfaceType">
            <summary>
            <para>Reimplemented from QSurface::surfaceType().</para>
            <para>Returns the surface type of the window.</para>
            <para>See also setSurfaceType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.visibility">
            <summary>
            <para>This property holds the screen-occupation state of the
            window.</para>
            <para>Visibility is whether the window should appear in the windowing
            system as normal, minimized, maximized, fullscreen or hidden.</para>
            <para>To set the visibility to AutomaticVisibility means to give the
            window a default visible state, which might be fullscreen or windowed
            depending on the platform. When reading the visibility property you will
            always get the actual state, never AutomaticVisibility.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Parent">
            <summary>
            <para>Returns the parent window, if any.</para>
            <para>A window without a parent is known as a top level window.</para>
            <para>See also setParent().</para>
            <para></para>
            <para>Sets the parent Window. This will lead to the windowing system
            managing the clip of the window, so it will be clipped to the parent
            window.</para>
            <para>Setting parent to be 0 will make the window become a top level
            window.</para>
            <para>If parent is a window created by fromWinId(), then the current
            window will be embedded inside parent, if the platform supports it. Window
            embedding is currently supported only by the X11 platform plugin.</para>
            <para>See also parent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Modality">
            <summary>
            <para>This property holds the modality of the window.</para>
            <para>A modal window prevents other windows from receiving input
            events. Qt supports two types of modality: Qt::WindowModal and
            Qt::ApplicationModal.</para>
            <para>By default, this property is Qt::NonModal</para>
            <para>See also Qt::WindowModality.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Format">
            <summary>
            <para>Reimplemented from QSurface::format().</para>
            <para>Returns the actual format of this window.</para>
            <para>After the window has been created, this function will return the
            actual surface format of the window. It might differ from the requested
            format if the requested format could not be fulfilled by the platform. It
            might also be a superset, for example certain buffer sizes may be larger
            than requested.</para>
            <para>Note: Depending on the platform, certain values in this surface
            format may still contain the requested values, that is, the values that
            have been passed to setFormat(). Typical examples are the OpenGL version,
            profile and options. These may not get updated during create() since these
            are context specific and a single window may be used together with multiple
            contexts over its lifetime. Use the QOpenGLContext's format() instead to
            query such values.</para>
            <para>See also setFormat(), create(), requestedFormat(), and
            QOpenGLContext::format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Flags">
            <summary>
            <para>This property holds the window flags of the window.</para>
            <para>The window flags control the window's appearance in the windowing
            system, whether it's a dialog, popup, or a regular window, and whether it
            should have a title bar, etc.</para>
            <para>The actual window flags might differ from the flags set with
            setFlags() if the requested flags could not be fulfilled.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Opacity">
            <summary>
            <para>This property holds the opacity of the window in the windowing
            system.</para>
            <para>If the windowing system supports window opacity, this can be used
            to fade the window in and out, or to make it semitransparent.</para>
            <para>A value of 1.0 or above is treated as fully opaque, whereas a
            value of 0.0 or below is treated as fully transparent. Values inbetween
            represent varying levels of translucency between the two extremes.</para>
            <para>The default value is 1.0.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Mask">
            <summary>
            <para>Returns the mask set on the window.</para>
            <para>The mask is a hint to the windowing system that the application
            does not want to receive mouse or touch input outside the given
            region.</para>
            <para>See also setMask().</para>
            <para></para>
            <para>Sets the mask of the window.</para>
            <para>The mask is a hint to the windowing system that the application
            does not want to receive mouse or touch input outside the given
            region.</para>
            <para>The window manager may or may not choose to display any areas of
            the window not included in the mask, thus it is the application's
            responsibility to clear to transparent the areas that are not part of the
            mask.</para>
            <para>Setting the mask before the window has been created has no
            effect.</para>
            <para>See also mask().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.WindowState">
            <summary>
            <para>the screen-occupation state of the window</para>
            <para>See also setWindowState().</para>
            <para></para>
            <para>set the screen-occupation state of the window</para>
            <para>The window state represents whether the window appears in the
            windowing system as maximized, minimized, fullscreen, or normal.</para>
            <para>The enum value Qt::WindowActive is not an accepted
            parameter.</para>
            <para>See also windowState(), showNormal(), showFullScreen(),
            showMinimized(), and showMaximized().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.TransientParent">
            <summary>
            <para>Returns the transient parent of the window.</para>
            <para>See also setTransientParent() and parent().</para>
            <para></para>
            <para>Sets the transient parent</para>
            <para>This is a hint to the window manager that this window is a dialog
            or pop-up on behalf of the given window.</para>
            <para>In order to cause the window to be centered above its transient
            parent by default, depending on the window manager, it may also be
            necessary to call setFlags() with a suitable Qt::WindowType (such as
            Qt::Dialog).</para>
            <para>See also transientParent() and parent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MinimumSize">
            <summary>
            <para>Returns the minimum size of the window.</para>
            <para>See also setMinimumSize().</para>
            <para></para>
            <para>Sets the minimum size of the window.</para>
            <para>This is a hint to the window manager to prevent resizing below
            the specified size.</para>
            <para>See also setMaximumSize() and minimumSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MaximumSize">
            <summary>
            <para>Returns the maximum size of the window.</para>
            <para>See also setMaximumSize().</para>
            <para></para>
            <para>Sets the maximum size of the window.</para>
            <para>This is a hint to the window manager to prevent resizing above
            the specified size.</para>
            <para>See also setMinimumSize() and maximumSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.BaseSize">
            <summary>
            <para>Returns the base size of the window.</para>
            <para>See also setBaseSize().</para>
            <para></para>
            <para>Sets the base size of the window.</para>
            <para>The base size is used to calculate a proper window size if the
            window defines sizeIncrement().</para>
            <para>See also setMinimumSize(), setMaximumSize(), setSizeIncrement(),
            and baseSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.SizeIncrement">
            <summary>
            <para>Returns the size increment of the window.</para>
            <para>See also setSizeIncrement().</para>
            <para></para>
            <para>Sets the size increment (size) of the window.</para>
            <para>When the user resizes the window, the size will move in steps of
            sizeIncrement().width() pixels horizontally and sizeIncrement().height()
            pixels vertically, with baseSize() as the basis.</para>
            <para>By default, this property contains a size with zero width and
            height.</para>
            <para>The windowing system might not support size increments.</para>
            <para>See also sizeIncrement(), setBaseSize(), setMinimumSize(), and
            setMaximumSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Geometry">
            <summary>
            <para>Returns the geometry of the window, excluding its window
            frame.</para>
            <para>See also setGeometry(), frameMargins(), and
            frameGeometry().</para>
            <para></para>
            <para>Sets the geometry of the window, excluding its window frame, to
            rect.</para>
            <para>See also geometry().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.FramePosition">
            <summary>
            <para>Returns the top left position of the window, including its window
            frame.</para>
            <para>This returns the same value as frameGeometry().topLeft().</para>
            <para>See also setFramePosition(), geometry(), and
            frameGeometry().</para>
            <para></para>
            <para>Sets the upper left position of the window (point) including its
            window frame.</para>
            <para>See also framePosition(), setGeometry(), and
            frameGeometry().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Position">
            <summary>
            <para>Returns the position of the window on the desktop excluding any
            window frame</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>set the position of the window on the desktop to pt</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.FilePath">
            <summary>
            <para>the file name this window is representing.</para>
            <para>See also setFilePath().</para>
            <para></para>
            <para>set the file name this window is representing.</para>
            <para>The windowing system might use filePath to display the path of
            the document this window is representing in the tile bar.</para>
            <para>See also filePath().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Icon">
            <summary>
            <para>Sets the window's icon in the windowing system</para>
            <para>See also setIcon().</para>
            <para></para>
            <para>Sets the window's icon in the windowing system</para>
            <para>The window icon might be used by the windowing system for example
            to decorate the window, and/or in the task switcher.</para>
            <para>See also icon().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Screen">
            <summary>
            <para>Returns the screen on which the window is shown, or null if there
            is none.</para>
            <para>For child windows, this returns the screen of the corresponding
            top level window.</para>
            <para>See also setScreen() and QScreen::virtualSiblings().</para>
            <para></para>
            <para>Sets the screen on which the window should be shown.</para>
            <para>If the window has been created, it will be recreated on the
            newScreen.</para>
            <para>Note that if the screen is part of a virtual desktop of multiple
            screens, the window can appear on any of the screens returned by
            QScreen::virtualSiblings().</para>
            <para>This function only works for top level windows.</para>
            <para>See also screen() and QScreen::virtualSiblings().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Cursor">
            <summary>
            <para>the cursor shape for this window</para>
            <para>See also setCursor() and unsetCursor().</para>
            <para></para>
            <para>set the cursor shape for this window</para>
            <para>The mouse cursor will assume this shape when it is over this
            window, unless an override cursor is set. See the list of predefined cursor
            objects for a range of useful shapes.</para>
            <para>By default, the cursor has the Qt::ArrowCursor shape.</para>
            <para>Some underlying window implementations will reset the cursor if
            it leaves a window even if the mouse is grabbed. If you want to have a
            cursor set for all windows, even when outside the window, consider
            QGuiApplication::setOverrideCursor().</para>
            <para>See also cursor() and
            QGuiApplication::setOverrideCursor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Visible">
            <summary>
            <para>This property holds whether the window is visible or not.</para>
            <para>This property controls the visibility of the window in the
            windowing system.</para>
            <para>By default, the window is not visible, you must call
            setVisible(true), or show() or similar to make it visible.</para>
            <para>See also show().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Title">
            <summary>
            <para>This property holds the window's title in the windowing
            system.</para>
            <para>The window title might appear in the title area of the window
            decorations, depending on the windowing system and the window flags. It
            might also be used by the windowing system to identify the window in other
            contexts, such as in the task switcher.</para>
            <para>See also flags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.X">
            <summary>
            <para>This property holds the x position of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Y">
            <summary>
            <para>This property holds the y position of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Width">
            <summary>
            <para>This property holds the width of the window's geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Height">
            <summary>
            <para>This property holds the height of the window's geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MinimumWidth">
            <summary>
            <para>This property holds the minimum width of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MinimumHeight">
            <summary>
            <para>This property holds the minimum height of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MaximumWidth">
            <summary>
            <para>This property holds the maximum width of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.MaximumHeight">
            <summary>
            <para>This property holds the maximum height of the window's
            geometry.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Size">
            <summary>
            <para>Reimplemented from QSurface::size().</para>
            <para>Returns the size of the window excluding any window frame</para>
            <para>See also resize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.WinId">
            <summary>
            <para>Returns the window's platform id.</para>
            <para>For platforms where this id might be useful, the value returned
            will uniquely represent the window inside the corresponding screen.</para>
            <para>See also screen().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.IsTopLevel">
            <summary>
            <para>Returns whether the window is top level, i.e. has no parent
            window.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.IsModal">
            <summary>
            <para>Returns whether the window is modal.</para>
            <para>A modal window prevents other windows from getting any
            input.</para>
            <para>See also QWindow::modality.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.RequestedFormat">
            <summary>
            <para>Returns the requested surface format of this window.</para>
            <para>If the requested format was not supported by the platform
            implementation, the requestedFormat will differ from the actual window
            format.</para>
            <para>This is the value set with setFormat().</para>
            <para>See also setFormat() and format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.Type">
            <summary>
            <para>Returns the type of the window.</para>
            <para>This returns the part of the window flags that represents whether
            the window is a dialog, tooltip, popup, regular window, etc.</para>
            <para>See also flags() and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.IsActive">
            <summary>
            <para>This property holds the active status of the window.</para>
            <para>This property was introduced in  Qt 5.1.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	isActive() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	activeChanged()</para>
            <para></para>
            <para>See also requestActivate().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.ContentOrientation">
            <summary>
            <para>This property holds the orientation of the window's
            contents.</para>
            <para>This is a hint to the window manager in case it needs to display
            additional content like popups, dialogs, status bars, or similar in
            relation to the window.</para>
            <para>The recommended orientation is QScreen::orientation() but an
            application doesn't have to support all possible orientations, and thus can
            opt to ignore the current screen orientation.</para>
            <para>The difference between the window and the content orientation
            determines how much to rotate the content by. QScreen::angleBetween(),
            QScreen::transformBetween(), and QScreen::mapBetween() can be used to
            compute the necessary transform.</para>
            <para>The default value is Qt::PrimaryOrientation</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.DevicePixelRatio">
            <summary>
            <para>Returns the ratio between physical pixels and device-independent
            pixels for the window. This value is dependent on the screen the window is
            on, and may change when the window is moved.</para>
            <para>Common values are 1.0 on normal displays and 2.0 on Apple
            &quot;retina&quot; displays.</para>
            <para>Note: For windows not backed by a platform window, meaning that
            create() was not called, the function will fall back to
            QGuiApplication::devicePixelRatio() which in turn returns the highest
            screen device pixel ratio found on the system.</para>
            <para>See also QScreen::devicePixelRatio() and
            QGuiApplication::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.IsExposed">
            <summary>
            <para>Returns if this window is exposed in the windowing system.</para>
            <para>When the window is not exposed, it is shown by the application
            but it is still not showing in the windowing system, so the application
            should minimize rendering and other graphical activities.</para>
            <para>An exposeEvent() is sent every time this value changes.</para>
            <para>See also exposeEvent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.FrameMargins">
            <summary>
            <para>Returns the window frame margins surrounding the window.</para>
            <para>See also geometry() and frameGeometry().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.FrameGeometry">
            <summary>
            <para>Returns the geometry of the window, including its window
            frame.</para>
            <para>See also geometry() and frameMargins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.surfaceClass">
            <summary>
            <para>Returns the surface class of this surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QWindow.SupportsOpenGL">
            <summary>
            <para>Returns true if the surface is OpenGL compatible and can be used
            in conjunction with QOpenGLContext; otherwise returns false.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="T:QtGui.QWindow.Visibility">
            <summary>
            <para>This enum describes what part of the screen the window occupies
            or should occupy.</para>
            <para>This enum was introduced or modified in  Qt 5.1.</para>
            </summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.Hidden">
            <summary>The window is not visible in any way, however it may remember a latent visibility which can be restored by setting AutomaticVisibility.</summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.AutomaticVisibility">
            <summary>This means to give the window a default visible state, which might be fullscreen or windowed depending on the platform. It can be given as a parameter to setVisibility but will never be read back from the visibility accessor.</summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.Windowed">
            <summary>The window occupies part of the screen, but not necessarily the entire screen. This state will occur only on windowing systems which support showing multiple windows simultaneously. In this state it is possible for the user to move and resize the window manually, if WindowFlags permit it and if it is supported by the windowing system.</summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.Minimized">
            <summary>The window is reduced to an entry or icon on the task bar, dock, task list or desktop, depending on how the windowing system handles minimized windows.</summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.Maximized">
            <summary>The window occupies one entire screen, and the titlebar is still visible. On most windowing systems this is the state achieved by clicking the maximize button on the toolbar.</summary>
        </member>
        <member name="F:QtGui.QWindow.Visibility.FullScreen">
            <summary>The window occupies one entire screen, is not resizable, and there is no titlebar. On some platforms which do not support showing multiple simultaneous windows, this can be the usual visibility when the window is not hidden.</summary>
        </member>
        <member name="T:QtGui.QWindow.AncestorMode">
            <summary>
            <para>This enum is used to control whether or not transient parents
            should be considered ancestors.</para>
            </summary>
        </member>
        <member name="F:QtGui.QWindow.AncestorMode.ExcludeTransients">
            <summary>Transient parents are not considered ancestors.</summary>
        </member>
        <member name="F:QtGui.QWindow.AncestorMode.IncludeTransients">
            <summary>Transient parents are considered ancestors.</summary>
        </member>
        <member name="T:QtGui.QPaintDeviceWindow">
            <summary>
            <para>Convenience subclass of QWindow that is also a
            QPaintDevice.</para>
            </summary>
            <remarks>
            <para>QPaintDeviceWindow is like a regular QWindow, with the added
            functionality of being a paint device too. Whenever the content needs to be
            updated, the virtual paintEvent() function is called. Subclasses, that
            reimplement this function, can then simply open a QPainter on the
            window.</para>
            <para>Note: This class cannot directly be used in applications. It
            rather serves as a base for subclasses like QOpenGLWindow.</para>
            <para></para>
            <para>See also QOpenGLWindow.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPaintDeviceWindow.Update(QtCore.QRect)">
            <summary>
            <para>Marks the rect of the window as dirty and schedules a
            repaint.</para>
            <para>Note: Subsequent calls to this function before the next paint
            event will get ignored, but rect is added to the region to update.</para>
            <para>Note: For non-exposed windows the update is deferred until the
            window becomes exposed again.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintDeviceWindow.Update(QtGui.QRegion)">
            <summary>
            <para>Marks the region of the window as dirty and schedules a
            repaint.</para>
            <para>Note: Subsequent calls to this function before the next paint
            event will get ignored, but region is added to the region to update.</para>
            <para>Note: For non-exposed windows the update is deferred until the
            window becomes exposed again.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintDeviceWindow.Update">
            <summary>
            <para>Marks the entire window as dirty and schedules a repaint.</para>
            <para>Note: Subsequent calls to this function before the next paint
            event will get ignored.</para>
            <para>Note: For non-exposed windows the update is deferred until the
            window becomes exposed again.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintDeviceWindow.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Handles paint events passed in the event parameter.</para>
            <para>The default implementation does nothing. Reimplement this
            function to perform painting. If necessary, the dirty area is retrievable
            from the event.</para>
            </summary>
        </member>
        <member name="E:QtGui.QPaintDeviceWindow.PaintEvent">
            <summary>
            <para>Handles paint events passed in the event parameter.</para>
            <para>The default implementation does nothing. Reimplement this function to perform painting. If necessary, the dirty area is retrievable from the event.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.PaintingActive">
            <summary>
            <para>Returns true if the device is currently being painted on, i.e.
            someone has called QPainter::begin() but not yet called QPainter::end() for
            this device; otherwise returns false.</para>
            <para>See also QPainter::isActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.QtGui#IQPaintDevice#Width">
            <summary>
            <para>Returns the width of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also widthMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.QtGui#IQPaintDevice#Height">
            <summary>
            <para>Returns the height of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also heightMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.WidthMM">
            <summary>
            <para>Returns the width of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.HeightMM">
            <summary>
            <para>Returns the height of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.LogicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from widthMM().</para>
            <para>Note that if the logicalDpiX() doesn't equal the physicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiY() and physicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.LogicalDpiY">
            <summary>
            <para>Returns the vertical resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from heightMM().</para>
            <para>Note that if the logicalDpiY() doesn't equal the physicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiX() and physicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.PhysicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiX() doesn't equal the logicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiY() and logicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.PhysicalDpiY">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiY() doesn't equal the logicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiX() and logicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for device.</para>
            <para>Common values are 1 for normal-dpi displays and 2 for high-dpi
            &quot;retina&quot; displays.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.ColorCount">
            <summary>
            <para>Returns the number of different colors available for the paint
            device. If the number of colors available is too great to be represented by
            the int data type, then INT_MAX will be returned instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintDeviceWindow.Depth">
            <summary>
            <para>Returns the bit depth (number of bit planes) of the paint
            device.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLWindow">
            <summary>
            <para>The QOpenGLWindow class is a convenience subclass of QWindow to
            perform OpenGL painting.</para>
            </summary>
            <remarks>
            <para>QOpenGLWindow is an enhanced QWindow that allows easily creating
            windows that perform OpenGL rendering using an API that is compatible with
            QOpenGLWidget and is similar to the legacy QGLWidget. Unlike QOpenGLWidget,
            QOpenGLWindow has no dependency on the widgets module and offers better
            performance.</para>
            <para>A typical application will subclass QOpenGLWindow and reimplement
            the following virtual functions:</para>
            <para></para>
            <para>initializeGL() to perform OpenGL resource initialization</para>
            <para>resizeGL() to set up the transformation matrices and other window
            size dependent resources</para>
            <para>paintGL() to issue OpenGL commands or draw using QPainter</para>
            <para></para>
            <para>To schedule a repaint, call the update() function. Note that this
            will not immediately result in a call to paintGL(). Calling update()
            multiple times in a row will not change the behavior in any way.</para>
            <para>This is a slot so it can be connected to a QTimer::timeout()
            signal to perform animation. Note however that in the modern OpenGL world
            it is a much better choice to rely on synchronization to the vertical
            refresh rate of the display. See setSwapInterval() on a description of the
            swap interval. With a swap interval of 1, which is the case on most systems
            by default, the swapBuffers() call, that is executed internally by
            QOpenGLWindow after each repaint, will block and wait for vsync. This means
            that whenever the swap is done, an update can be scheduled again by calling
            update(), without relying on timers.</para>
            <para>To request a specific configuration for the context, use
            setFormat() like for any other QWindow. This allows, among others,
            requesting a given OpenGL version and profile, or enabling depth and
            stencil buffers.</para>
            <para>Unlike QWindow, QOpenGLWindow allows opening a painter on itself
            and perform QPainter-based drawing.</para>
            <para>QOpenGLWindow supports multiple update behaviors. The default,
            NoPartialUpdate is equivalent to a regular, OpenGL-based QWindow or the
            legacy QGLWidget. In contrast, PartialUpdateBlit and PartialUpdateBlend are
            more in line with QOpenGLWidget's way of working, where there is always an
            extra, dedicated framebuffer object present. These modes allow, by
            sacrificing some performance, redrawing only a smaller area on each paint
            and having the rest of the content preserved from of the previous frame.
            This is useful for applications than render incrementally using QPainter,
            because this way they do not have to redraw the entire window content on
            each paintGL() call.</para>
            <para>Similarly to QOpenGLWidget, QOpenGLWindow supports the
            Qt::AA_ShareOpenGLContexts attribute. When enabled, the OpenGL contexts of
            all QOpenGLWindow instances will share with each other. This allows
            accessing each other's shareable OpenGL resources.</para>
            <para>For more information on graphics in Qt, see Graphics.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLWindow.#ctor(QtGui.QOpenGLWindow.UpdateBehavior,QtGui.QWindow)">
            <summary>
            <para>Constructs a new QOpenGLWindow with the given parent and
            updateBehavior.</para>
            <para>See also QOpenGLWindow::UpdateBehavior.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.#ctor(QtGui.QOpenGLContext,QtGui.QOpenGLWindow.UpdateBehavior,QtGui.QWindow)">
            <summary>
            <para>Constructs a new QOpenGLWindow with the given parent and
            updateBehavior. The QOpenGLWindow's context will share with
            shareContext.</para>
            <para>See also QOpenGLWindow::UpdateBehavior and shareContext.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.MakeCurrent">
            <summary>
            <para>Prepares for rendering OpenGL content for this window by making
            the corresponding context current and binding the framebuffer object, if
            there is one, in that context context.</para>
            <para>It is not necessary to call this function in most cases, because
            it is called automatically before invoking paintGL(). It is provided
            nonetheless to support advanced, multi-threaded scenarios where a thread
            different than the GUI or main thread may want to update the surface or
            framebuffer contents. See QOpenGLContext for more information on threading
            related issues.</para>
            <para>This function is suitable for calling also when the underlying
            platform window is already destroyed. This means that it is safe to call
            this function from a QOpenGLWindow subclass' destructor. If there is no
            native window anymore, an offscreen surface is used instead. This ensures
            that OpenGL resource cleanup operations in the destructor will always work,
            as long as this function is called first.</para>
            <para>See also QOpenGLContext, context(), paintGL(), and
            doneCurrent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.DoneCurrent">
            <summary>
            <para>Releases the context.</para>
            <para>It is not necessary to call this function in most cases, since
            the widget will make sure the context is bound and released properly when
            invoking paintGL().</para>
            <para>See also makeCurrent().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.InitializeGL">
            <summary>
            <para>This virtual function is called once before the first call to
            paintGL() or resizeGL(). Reimplement it in a subclass.</para>
            <para>This function should set up any required OpenGL resources and
            state.</para>
            <para>There is no need to call makeCurrent() because this has already
            been done when this function is called. Note however that the framebuffer,
            in case partial update mode is used, is not yet available at this stage, so
            avoid issuing draw calls from here. Defer such calls to paintGL()
            instead.</para>
            <para>See also paintGL() and resizeGL().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.ResizeGL(System.Int32,System.Int32)">
            <summary>
            <para>This virtual function is called whenever the widget has been
            resized. Reimplement it in a subclass. The new size is passed in w and
            h.</para>
            <para>Note: This is merely a convenience function in order to provide
            an API that is compatible with QOpenGLWidget. Unlike with QOpenGLWidget,
            derived classes are free to choose to override resizeEvent() instead of
            this function.</para>
            <para>Note: Avoid issuing OpenGL commands from this function as there
            may not be a context current when it is invoked. If it cannot be avoided,
            call makeCurrent().</para>
            <para>Note: Scheduling updates from here is not necessary. The
            windowing systems will send expose events that trigger an update
            automatically.</para>
            <para>See also initializeGL() and paintGL().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.PaintGL">
            <summary>
            <para>This virtual function is called whenever the window contents
            needs to be painted. Reimplement it in a subclass.</para>
            <para>There is no need to call makeCurrent() because this has already
            been done when this function is called.</para>
            <para>Before invoking this function, the context and the framebuffer,
            if there is one, are bound, and the viewport is set up by a call to
            glViewport(). No other state is set and no clearing or drawing is performed
            by the framework.</para>
            <para>Note: When using a partial update behavior, like
            PartialUpdateBlend, the output of the previous paintGL() call is preserved
            and, after the additional drawing perfomed in the current invocation of the
            function, the content is blitted or blended over the content drawn directly
            to the window in paintUnderGL().</para>
            <para>See also initializeGL(), resizeGL(), paintUnderGL(),
            paintOverGL(), and UpdateBehavior.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.PaintUnderGL">
            <summary>
            <para>The virtual function is called before each invocation of
            paintGL().</para>
            <para>When the update mode is set to NoPartialUpdate, there is no
            difference between this function and paintGL(), performing rendering in
            either of them leads to the same result.</para>
            <para>The difference becomes significant when using PartialUpdateBlend,
            where an extra framebuffer object is used. There, paintGL() targets this
            additional framebuffer object, which preserves its contents, while
            paintUnderGL() and paintOverGL() target the default framebuffer, i.e.
            directly the window surface, the contents of which is lost after each
            displayed frame.</para>
            <para>Note: Avoid relying on this function when the update behavior is
            PartialUpdateBlit. This mode involves blitting the extra framebuffer used
            by paintGL() onto the default framebuffer after each invocation of
            paintGL(), thus overwriting all drawing generated in this function.</para>
            <para>See also paintGL(), paintOverGL(), and UpdateBehavior.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.PaintOverGL">
            <summary>
            <para>This virtual function is called after each invocation of
            paintGL().</para>
            <para>When the update mode is set to NoPartialUpdate, there is no
            difference between this function and paintGL(), performing rendering in
            either of them leads to the same result.</para>
            <para>Like paintUnderGL(), rendering in this function targets the
            default framebuffer of the window, regardless of the update behavior. It
            gets called after paintGL() has returned and the blit (PartialUpdateBlit)
            or quad drawing (PartialUpdateBlend) has been done.</para>
            <para>See also paintGL(), paintUnderGL(), and UpdateBehavior.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.OnPaintEvent(QtGui.QPaintEvent)">
            <summary>
            <para>Reimplemented from QPaintDeviceWindow::paintEvent().</para>
            <para>Paint event handler. Calls paintGL().</para>
            <para>See also paintGL().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLWindow.OnResizeEvent(QtGui.QResizeEvent)">
            <summary>
            <para>Reimplemented from QWindow::resizeEvent().</para>
            <para>Resize event handler. Calls resizeGL().</para>
            <para>See also resizeGL().</para>
            </summary>
        </member>
        <member name="E:QtGui.QOpenGLWindow.FrameSwapped">
            <summary>
            <para>This signal is emitted after the potentially blocking buffer swap has been done. Applications that wish to continuously repaint synchronized to the vertical refresh, should issue an update() upon this signal. This allows for a much smoother experience compared to the traditional usage of timers.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.updateBehavior">
            <summary>
            <para>Returns the update behavior for this QOpenGLWindow.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.IsValid">
            <summary>
            <para>Returns true if the window's OpenGL resources, like the context,
            have been successfully initialized. Note that the return value is always
            false until the window becomes exposed (shown).</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.Context">
            <summary>
            <para>Returns The QOpenGLContext used by this window or 0 if not yet
            initialized.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.ShareContext">
            <summary>
            <para>Returns The QOpenGLContext requested to be shared with this
            window's QOpenGLContext.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.DefaultFramebufferObject">
            <summary>
            <para>The framebuffer object handle used by this window.</para>
            <para>When the update behavior is set to NoPartialUpdate, there is no
            separate framebuffer object. In this case the returned value is the ID of
            the default framebuffer.</para>
            <para>Otherwise the value of the ID of the framebuffer object or 0 if
            not yet initialized.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLWindow.GrabFramebuffer">
            <summary>
            <para>Returns a 32-bit RGB image of the framebuffer.</para>
            <para>Note: This is a potentially expensive operation because it relies
            on glReadPixels() to read back the pixels. This may be slow and can stall
            the GPU pipeline.</para>
            <para>Note: When used together with update behavior NoPartialUpdate,
            the returned image may not contain the desired content when called after
            the front and back buffers have been swapped (unless preserved swap is
            enabled in the underlying windowing system interface). In this mode the
            function reads from the back buffer and the contents of that may not match
            the content on the screen (the front buffer). In this case the only place
            where this function can safely be used is paintGL() or
            paintOverGL().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLWindow.UpdateBehavior">
            <summary>
            <para>This enum describes the update strategy of the
            QOpenGLWindow.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLWindow.UpdateBehavior.NoPartialUpdate">
            <summary>Indicates that the entire window surface will redrawn on each update and so no additional framebuffers are needed. This is the setting used in most cases and is equivalent to how drawing directly via QWindow would function.</summary>
        </member>
        <member name="F:QtGui.QOpenGLWindow.UpdateBehavior.PartialUpdateBlit">
            <summary>Indicates that the drawing performed in paintGL() does not cover the entire window. In this case an extra framebuffer object is created under the hood, and rendering performed in paintGL() will target this framebuffer. This framebuffer is then blitted onto the window surface's default framebuffer after each paint. This allows having QPainter-based drawing code in paintGL() which only repaints a smaller area at a time, because, unlike NoPartialUpdate, the previous content is preserved.</summary>
        </member>
        <member name="F:QtGui.QOpenGLWindow.UpdateBehavior.PartialUpdateBlend">
            <summary>Similar to PartialUpdateBlit, but instead of using framebuffer blits, the contents of the extra framebuffer is rendered by drawing a textured quad with blending enabled. This, unlike PartialUpdateBlit, allows alpha blended content and works even when the glBlitFramebuffer is not available. Performance-wise this setting is likely to be somewhat slower than PartialUpdateBlit.</summary>
        </member>
        <member name="T:QtGui.QPalette">
            <summary>
            <para>The QPalette class contains color groups for each widget
            state.</para>
            </summary>
            <remarks>
            <para>A palette consists of three color groups: Active, Disabled, and
            Inactive. All widgets in Qt contain a palette and use their palette to draw
            themselves. This makes the user interface easily configurable and easier to
            keep consistent.</para>
            <para>If you create a new widget we strongly recommend that you use the
            colors in the palette rather than hard-coding specific colors.</para>
            <para>The color groups:</para>
            <para></para>
            <para>The Active group is used for the window that has keyboard
            focus.</para>
            <para>The Inactive group is used for other windows.</para>
            <para>The Disabled group is used for widgets (not windows) that are
            disabled for some reason.</para>
            <para></para>
            <para>Both active and inactive windows can contain disabled widgets.
            (Disabled widgets are often called inaccessible or grayed out.)</para>
            <para>In most styles, Active and Inactive look the same.</para>
            <para>Colors and brushes can be set for particular roles in any of a
            palette's color groups with setColor() and setBrush(). A color group
            contains a group of colors used by widgets for drawing themselves. We
            recommend that widgets use color group roles from the palette such as
            &quot;foreground&quot; and &quot;base&quot; rather than literal colors like
            &quot;red&quot; or &quot;turquoise&quot;. The color roles are enumerated
            and defined in the ColorRole documentation.</para>
            <para>We strongly recommend that you use the default palette of the
            current style (returned by QGuiApplication::palette()) and modify that as
            necessary. This is done by Qt's widgets when they are drawn.</para>
            <para>To modify a color group you call the functions setColor() and
            setBrush(), depending on whether you want a pure color or a pixmap
            pattern.</para>
            <para>There are also corresponding color() and brush() getters, and a
            commonly used convenience function to get the ColorRole for the current
            ColorGroup: window(), windowText(), base(), etc.</para>
            <para>You can copy a palette using the copy constructor and test to see
            if two palettes are identical using isCopyOf().</para>
            <para>QPalette is optimized by the use of implicit sharing, so it is
            very efficient to pass QPalette objects as arguments.</para>
            <para>Warning: Some styles do not use the palette for all drawing, for
            instance, if they make use of native theme engines. This is the case for
            both the Windows XP, Windows Vista, and the Mac OS X styles.</para>
            <para></para>
            <para>See also QApplication::setPalette(), QWidget::setPalette(), and
            QColor.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPalette.#ctor">
            <summary>
            <para>Constructs a palette object that uses the application's default
            palette.</para>
            <para>See also QApplication::setPalette() and
            QApplication::palette().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtGui.QColor)">
            <summary>
            <para>Constructs a palette from the button color. The other colors are
            automatically calculated, based on this color. Window will be the button
            color as well.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtCore.Qt.GlobalColor)">
            <summary>
            <para>Constructs a palette from the button color. The other colors are
            automatically calculated, based on this color. Window will be the button
            color as well.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtGui.QColor,QtGui.QColor)">
            <summary>
            <para>Constructs a palette from a button color and a window. The other
            colors are automatically calculated, based on these colors.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush)">
            <summary>
            <para>Constructs a palette. You can pass either brushes, pixmaps or
            plain colors for windowText, button, light, dark, mid, text, bright_text,
            base and window.</para>
            <para>See also QBrush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtGui.QColor,QtGui.QColor,QtGui.QColor,QtGui.QColor,QtGui.QColor,QtGui.QColor,QtGui.QColor)">
            <summary>
            <para>Constructs a palette with the specified windowText, window,
            light, dark, mid, text, and base colors. The button color will be set to
            the window color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.#ctor(QtGui.QPalette)">
            <summary>
            <para>Constructs a copy of p.</para>
            <para>This constructor is fast thanks to implicit sharing.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Swap(QtGui.QPalette)">
            <summary>
            <para>Swaps this palette instance with other. This function is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.op_Implicit(QtGui.QPalette)~QtCore.QVariant">
            <summary>
            <para>Returns the palette as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Color(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Returns the color in the specified color group, used for the
            given color role.</para>
            <para>See also brush(), setColor(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Brush(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Returns the brush in the specified color group, used for the
            given color role.</para>
            <para>See also color(), setBrush(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.SetColor(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorRole,QtGui.QColor)">
            <summary>
            <para>Sets the color in the specified color group, used for the given
            color role, to the specified solid color.</para>
            <para>See also setBrush(), color(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.SetColor(QtGui.QPalette.ColorRole,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the color used for the given color role, in all color
            groups, to the specified solid color.</para>
            <para>See also brush(), setColor(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.SetBrush(QtGui.QPalette.ColorRole,QtGui.QBrush)">
            <summary>
            <para>Sets the brush for the given color role to the specified brush
            for all groups in the palette.</para>
            <para>See also brush(), setColor(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.IsBrushSet(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorRole)">
            <summary>
            <para>Returns true if the ColorGroup cg and ColorRole cr has been set
            previously on this palette; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setBrush().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.SetBrush(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorRole,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the brush in the specified color group, used for the given
            color role, to brush.</para>
            <para>See also brush(), setColor(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.SetColorGroup(QtGui.QPalette.ColorGroup,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush,QtGui.QBrush)">
            <summary>
            <para>Sets a the group at cg. You can pass either brushes, pixmaps or
            plain colors for windowText, button, light, dark, mid, text, bright_text,
            base and window.</para>
            <para>See also QBrush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.IsEqual(QtGui.QPalette.ColorGroup,QtGui.QPalette.ColorGroup)">
            <summary>
            <para>Returns true (usually quickly) if color group cg1 is equal to
            cg2; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Color(QtGui.QPalette.ColorRole)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the color that has been set for the given color role in
            the current ColorGroup.</para>
            <para>See also brush() and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Brush(QtGui.QPalette.ColorRole)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the brush that has been set for the given color role in
            the current ColorGroup.</para>
            <para>See also color(), setBrush(), and ColorRole.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.op_Equality(QtGui.QPalette,QtGui.QPalette)">
            <summary>
            <para>Returns true (usually quickly) if this palette is equal to p;
            otherwise returns false (slowly).</para>
            <para>Note: The current ColorGroup is not taken into account when
            comparing palettes</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.op_Inequality(QtGui.QPalette,QtGui.QPalette)">
            <summary>
            <para>Returns true (slowly) if this palette is different from p;
            otherwise returns false (usually quickly).</para>
            <para>Note: The current ColorGroup is not taken into account when
            comparing palettes</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.IsCopyOf(QtGui.QPalette)">
            <summary>
            <para>Returns true if this palette and p are copies of each other, i.e.
            one of them was created as a copy of the other and neither was subsequently
            modified; otherwise returns false. This is much stricter than
            equality.</para>
            <para>See also operator=() and operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPalette.Resolve(QtGui.QPalette)">
            <summary>
            <para>Returns a new QPalette that has attributes copied from
            other.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.CurrentColorGroup">
            <summary>
            <para>Returns the palette's current color group.</para>
            <para>See also setCurrentColorGroup().</para>
            <para></para>
            <para>Set the palette's current color group to cg.</para>
            <para>See also currentColorGroup().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Foreground">
            <summary>
            <para>Use windowText() instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.WindowText">
            <summary>
            <para>Returns the window text (general foreground) brush of the current
            color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Button">
            <summary>
            <para>Returns the button brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Light">
            <summary>
            <para>Returns the light brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Dark">
            <summary>
            <para>Returns the dark brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Mid">
            <summary>
            <para>Returns the mid brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Text">
            <summary>
            <para>Returns the text foreground brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Base">
            <summary>
            <para>Returns the base brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.AlternateBase">
            <summary>
            <para>Returns the alternate base brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.ToolTipBase">
            <summary>
            <para>Returns the tool tip base brush of the current color group. This
            brush is used by QToolTip and QWhatsThis.</para>
            <para>Note: Tool tips use the Inactive color group of QPalette, because
            tool tips are not active windows.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.ToolTipText">
            <summary>
            <para>Returns the tool tip text brush of the current color group. This
            brush is used by QToolTip and QWhatsThis.</para>
            <para>Note: Tool tips use the Inactive color group of QPalette, because
            tool tips are not active windows.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Background">
            <summary>
            <para>Use window() instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Window">
            <summary>
            <para>Returns the window (general background) brush of the current
            color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Midlight">
            <summary>
            <para>Returns the midlight brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.BrightText">
            <summary>
            <para>Returns the bright text foreground brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.ButtonText">
            <summary>
            <para>Returns the button text foreground brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Shadow">
            <summary>
            <para>Returns the shadow brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Highlight">
            <summary>
            <para>Returns the highlight brush of the current color group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.HighlightedText">
            <summary>
            <para>Returns the highlighted text brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.Link">
            <summary>
            <para>Returns the unvisited link text brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.LinkVisited">
            <summary>
            <para>Returns the visited link text brush of the current color
            group.</para>
            <para>See also ColorRole and brush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPalette.CacheKey">
            <summary>
            <para>Returns a number that identifies the contents of this QPalette
            object. Distinct QPalette objects can have the same key if they refer to
            the same contents.</para>
            <para>The cacheKey() will change when the palette is altered.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPalette.ColorGroup.Normal">
            <summary>synonym for Active</summary>
        </member>
        <member name="T:QtGui.QPalette.ColorRole">
            <summary>
            <para></para>
            <para>The ColorRole enum defines the different symbolic color roles
            used in current GUIs.</para>
            <para>The central roles are:</para>
            <para>There are some color roles used mostly for 3D bevel and shadow
            effects. All of these are normally derived from Window, and used in ways
            that depend on that relationship. For example, buttons depend on it to make
            the bevels look attractive, and Motif scroll bars depend on Mid to be
            slightly different from Window.</para>
            <para>Selected (marked) items have two roles:</para>
            <para>There are two color roles related to hyperlinks:</para>
            <para>Note that we do not use the Link and LinkVisited roles when
            rendering rich text in Qt, and that we recommend that you use CSS and the
            QTextDocument::setDefaultStyleSheet() function to alter the appearance of
            links. For example:</para>
            <para>    QTextBrowser browser;</para>
            <para>    QColor linkColor(Qt::red);</para>
            <para>    QString sheet = QString::fromLatin1(&quot;a {
            text-decoration: underline; color: %1
            }&quot;).arg(linkColor.name());</para>
            <para>    browser.document()-&gt;setDefaultStyleSheet(sheet);</para>
            </summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.WindowText">
            <summary>A general foreground color.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Button">
            <summary>The general button background color. This background can be different from Window as some styles require a different background color for buttons.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Light">
            <summary>Lighter than Button color.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Midlight">
            <summary>Between Button and Light.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Dark">
            <summary>Darker than Button.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Mid">
            <summary>Between Button and Dark.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Text">
            <summary>The foreground color used with Base. This is usually the same as the WindowText, in which case it must provide good contrast with Window and Base.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.BrightText">
            <summary>A text color that is very different from WindowText, and contrasts well with e.g. Dark. Typically used for text that needs to be drawn where Text or WindowText would give poor contrast, such as on pressed push buttons. Note that text colors can be used for things other than just words; text colors are usually used for text, but it's quite common to use the text color roles for lines, icons, etc.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.ButtonText">
            <summary>A foreground color used with the Button color.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Base">
            <summary>Used mostly as the background color for text entry widgets, but can also be used for other painting - such as the background of combobox drop down lists and toolbar handles. It is usually white or another light color.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Window">
            <summary>A general background color.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Shadow">
            <summary>A very dark color. By default, the shadow color is Qt::black.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Highlight">
            <summary>A color to indicate a selected item or the current item. By default, the highlight color is Qt::darkBlue.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.HighlightedText">
            <summary>A text color that contrasts with Highlight. By default, the highlighted text color is Qt::white.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Link">
            <summary>A text color used for unvisited hyperlinks. By default, the link color is Qt::blue.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.LinkVisited">
            <summary>A text color used for already visited hyperlinks. By default, the linkvisited color is Qt::magenta.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.AlternateBase">
            <summary>Used as the alternate background color in views with alternating row colors (see QAbstractItemView::setAlternatingRowColors()).</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.NoRole">
            <summary>No role; this special role is often used to indicate that a role has not been assigned.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.ToolTipBase">
            <summary>Used as the background color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.ToolTipText">
            <summary>Used as the foreground color for QToolTip and QWhatsThis. Tool tips use the Inactive color group of QPalette, because tool tips are not active windows.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Foreground">
            <summary>This value is obsolete. Use WindowText instead.</summary>
        </member>
        <member name="F:QtGui.QPalette.ColorRole.Background">
            <summary>This value is obsolete. Use Window instead.</summary>
        </member>
        <member name="T:QtGui.QRasterWindow">
            <summary>
            <para>QRasterWindow is a convenience class for using QPainter on a
            QWindow</para>
            </summary>
            <remarks>
            <para>QRasterWindow is a QWindow with a raster-based, non-OpenGL
            surface. On top of the functionality offered by QWindow, QRasterWindow adds
            a virtual paintEvent() function and the possibility to open a QPainter on
            itself. The underlying paint engine will be the raster one, meaning that
            all drawing will happen on the CPU. For performing accelerated,
            OpenGL-based drawing, use QOpenGLWindow instead.</para>
            <para>Internally the class is thin wrapper for QWindow and
            QBackingStore and is very similar to the Raster Window Example that uses
            these classes directly.</para>
            <para></para>
            <para>See also QPaintDeviceWindow::paintEvent() and
            QPaintDeviceWindow::update().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QRasterWindow.#ctor(QtGui.QWindow)">
            <summary>
            <para>Constructs a new QRasterWindow with parent.</para>
            </summary>
        </member>
        <member name="T:QtGui.QScreen">
            <summary>
            <para>The QScreen class is used to query screen properties.</para>
            </summary>
            <remarks>
            <para>A note on logical vs physical dots per inch: physical DPI is
            based on the actual physical pixel sizes when available, and is useful for
            print preview and other cases where it's desirable to know the exact
            physical dimensions of screen displayed contents.</para>
            <para>Logical dots per inch are used to convert font and user interface
            elements from point sizes to pixel sizes, and might be different from the
            physical dots per inch. The logical dots per inch are sometimes
            user-settable in the desktop environment's settings panel, to let the user
            globally control UI and font sizes in different applications.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QScreen.AngleBetween(QtCore.Qt.ScreenOrientation,QtCore.Qt.ScreenOrientation)">
            <summary>
            <para>Convenience function to compute the angle of rotation to get from
            rotation a to rotation b.</para>
            <para>The result will be 0, 90, 180, or 270.</para>
            <para>Qt::PrimaryOrientation is interpreted as the screen's
            primaryOrientation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.TransformBetween(QtCore.Qt.ScreenOrientation,QtCore.Qt.ScreenOrientation,QtCore.QRect)">
            <summary>
            <para>Convenience function to compute a transform that maps from the
            coordinate system defined by orientation a into the coordinate system
            defined by orientation b and target dimensions target.</para>
            <para>Example, a is Qt::Landscape, b is Qt::Portrait, and target is
            QRect(0, 0, w, h) the resulting transform will be such that the point
            QPoint(0, 0) is mapped to QPoint(0, w), and QPoint(h, w) is mapped to
            QPoint(0, h). Thus, the landscape coordinate system QRect(0, 0, h, w) is
            mapped (with a 90 degree rotation) into the portrait coordinate system
            QRect(0, 0, w, h).</para>
            <para>Qt::PrimaryOrientation is interpreted as the screen's
            primaryOrientation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.MapBetween(QtCore.Qt.ScreenOrientation,QtCore.Qt.ScreenOrientation,QtCore.QRect)">
            <summary>
            <para>Maps the rect between two screen orientations.</para>
            <para>This will flip the x and y dimensions of the rectangle rect if
            the orientation a is Qt::PortraitOrientation or
            Qt::InvertedPortraitOrientation and orientation b is
            Qt::LandscapeOrientation or Qt::InvertedLandscapeOrientation, or vice
            versa.</para>
            <para>Qt::PrimaryOrientation is interpreted as the screen's
            primaryOrientation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.IsPortrait(QtCore.Qt.ScreenOrientation)">
            <summary>
            <para>Convenience function that returns true if o is either portrait or
            inverted portrait; otherwise returns false.</para>
            <para>Qt::PrimaryOrientation is interpreted as the screen's
            primaryOrientation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.IsLandscape(QtCore.Qt.ScreenOrientation)">
            <summary>
            <para>Convenience function that returns true if o is either landscape
            or inverted landscape; otherwise returns false.</para>
            <para>Qt::PrimaryOrientation is interpreted as the screen's
            primaryOrientation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.GrabWindow(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Creates and returns a pixmap constructed by grabbing the contents
            of the given window restricted by QRect(x, y, width, height).</para>
            <para>The arguments (x, y) specify the offset in the window, whereas
            (width, height) specify the area to be copied. If width is negative, the
            function copies everything to the right border of the window. If height is
            negative, the function copies everything to the bottom of the
            window.</para>
            <para>The window system identifier (WId) can be retrieved using the
            QWidget::winId() function. The rationale for using a window identifier and
            not a QWidget, is to enable grabbing of windows that are not part of the
            application, window system frames, and so on.</para>
            <para>The grabWindow() function grabs pixels from the screen, not from
            the window, i.e. if there is another window partially or entirely over the
            one you grab, you get pixels from the overlying window, too. The mouse
            cursor is generally not grabbed.</para>
            <para>Note on X11 that if the given window doesn't have the same depth
            as the root window, and another window partially or entirely obscures the
            one you grab, you will not get pixels from the overlying window. The
            contents of the obscured areas in the pixmap will be undefined and
            uninitialized.</para>
            <para>On Windows Vista and above grabbing a layered window, which is
            created by setting the Qt::WA_TranslucentBackground attribute, will not
            work. Instead grabbing the desktop widget should work.</para>
            <para>Warning: In general, grabbing an area outside the screen is not
            safe. This depends on the underlying window system.</para>
            </summary>
        </member>
        <member name="M:QtGui.QScreen.RefreshRate">
            <summary>
            <para>This property holds the approximate vertical refresh rate of the
            screen in Hz.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	refreshRate() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	refreshRateChanged(qreal refreshRate)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.GeometryChanged">
            <summary>
            <para>This property holds the screen's geometry in pixels.</para>
            <para>As an example this might return QRect(0, 0, 1280, 1024), or in a virtual desktop setting QRect(1280, 0, 1280, 1024).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRect 	geometry() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	geometryChanged(const QRect &amp; geometry)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.AvailableGeometryChanged">
            <summary>
            <para>This property holds the screen's available geometry in pixels.</para>
            <para>The available geometry is the geometry excluding window manager reserved areas such as task bars and system menus.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRect 	availableGeometry() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	availableGeometryChanged(const QRect &amp; geometry)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.PhysicalSizeChanged">
            <summary>
            <para>This property holds the screen's physical size (in millimeters).</para>
            <para>The physical size represents the actual physical dimensions of the screen's display.</para>
            <para>Depending on what information the underlying system provides the value might not be entirely accurate.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QSizeF 	physicalSize() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	physicalSizeChanged(const QSizeF &amp; size)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.PhysicalDotsPerInchChanged">
            <summary>
            <para>This property holds the screen's ratio between physical pixels and device-independent pixels.</para>
            <para>Returns the ratio between physical pixels and device-independent pixels for the screen.</para>
            <para>Common values are 1.0 on normal displays and 2.0 on &quot;retina&quot; displays. Higher values are also possible.</para>
            <para>This property was introduced in  Qt 5.5.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	devicePixelRatio() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	physicalDotsPerInchChanged(qreal dpi)</para>
            <para></para>
            <para>See also QWindow::devicePixelRatio() and QGuiApplication::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.LogicalDotsPerInchChanged">
            <summary>
            <para>This property holds the number of logical dots or pixels per inch in the vertical direction.</para>
            <para>This value is used to convert font point sizes to pixel sizes.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	logicalDotsPerInchY() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	logicalDotsPerInchChanged(qreal dpi)</para>
            <para></para>
            <para>See also logicalDotsPerInchX().</para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.VirtualGeometryChanged">
            <summary>
            <para>This property holds the pixel geometry of the virtual desktop to which this screen belongs.</para>
            <para>Returns the pixel geometry of the virtual desktop corresponding to this screen.</para>
            <para>This is the union of the virtual siblings' individual geometries.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRect 	virtualGeometry() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	virtualGeometryChanged(const QRect &amp; rect)</para>
            <para></para>
            <para>See also virtualSiblings().</para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.PrimaryOrientationChanged">
            <summary>
            <para>This property holds the primary screen orientation.</para>
            <para>The primary screen orientation is Qt::LandscapeOrientation if the screen geometry's width is greater than or equal to its height, or Qt::PortraitOrientation otherwise. This property might change when the screen orientation was changed (i.e. when the display is rotated). The behavior is however platform dependent and can often be specified in an application manifest file.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::ScreenOrientation 	primaryOrientation() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	primaryOrientationChanged(Qt::ScreenOrientation orientation)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.OrientationChanged">
            <summary>
            <para>This property holds the screen orientation.</para>
            <para>The screen orientation represents the physical orientation of the display. For example, the screen orientation of a mobile device will change based on how it is being held. A change to the orientation might or might not trigger a change to the primary orientation of the screen.</para>
            <para>Changes to this property will be filtered by orientationUpdateMask(), so in order to receive orientation updates the application must first call setOrientationUpdateMask() with a mask of the orientations it wants to receive.</para>
            <para>Qt::PrimaryOrientation is never returned.</para>
            <para>Access functions:</para>
            <para></para>
            <para> Qt::ScreenOrientation 	orientation() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	orientationChanged(Qt::ScreenOrientation orientation)</para>
            <para></para>
            <para>See also primaryOrientation().</para>
            </summary>
        </member>
        <member name="E:QtGui.QScreen.RefreshRateChanged">
            <summary>
            <para>This property holds the approximate vertical refresh rate of the screen in Hz.</para>
            <para>Access functions:</para>
            <para></para>
            <para> qreal 	refreshRate() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	refreshRateChanged(qreal refreshRate)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.OrientationUpdateMask">
            <summary>
            <para>Returns the currently set orientation update mask.</para>
            <para>See also setOrientationUpdateMask().</para>
            <para></para>
            <para>Sets the orientations that the application is interested in
            receiving updates for in conjunction with this screen.</para>
            <para>For example, to receive orientation() updates and thus have
            orientationChanged() signals being emitted for LandscapeOrientation and
            InvertedLandscapeOrientation, call setOrientationUpdateMask() with mask set
            to Qt::LandscapeOrientation | Qt::InvertedLandscapeOrientation.</para>
            <para>The default, 0, means no orientationChanged() signals are
            fired.</para>
            <para>See also orientationUpdateMask().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.Name">
            <summary>
            <para>This property holds a user presentable string representing the
            screen.</para>
            <para>For example, on X11 these correspond to the XRandr screen names,
            typically &quot;VGA1&quot;, &quot;HDMI1&quot;, etc.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.Depth">
            <summary>
            <para>This property holds the color depth of the screen.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.Size">
            <summary>
            <para>This property holds the pixel resolution of the screen.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.Geometry">
            <summary>
            <para>This property holds the screen's geometry in pixels.</para>
            <para>As an example this might return QRect(0, 0, 1280, 1024), or in a
            virtual desktop setting QRect(1280, 0, 1280, 1024).</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.PhysicalSize">
            <summary>
            <para>This property holds the screen's physical size (in
            millimeters).</para>
            <para>The physical size represents the actual physical dimensions of
            the screen's display.</para>
            <para>Depending on what information the underlying system provides the
            value might not be entirely accurate.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.PhysicalDotsPerInchX">
            <summary>
            <para>This property holds the number of physical dots or pixels per
            inch in the horizontal direction.</para>
            <para>This value represents the actual horizontal pixel density on the
            screen's display. Depending on what information the underlying system
            provides the value might not be entirely accurate.</para>
            <para>See also physicalDotsPerInchY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.PhysicalDotsPerInchY">
            <summary>
            <para>This property holds the number of physical dots or pixels per
            inch in the vertical direction.</para>
            <para>This value represents the actual vertical pixel density on the
            screen's display. Depending on what information the underlying system
            provides the value might not be entirely accurate.</para>
            <para>See also physicalDotsPerInchX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.PhysicalDotsPerInch">
            <summary>
            <para>This property holds the number of physical dots or pixels per
            inch.</para>
            <para>This value represents the pixel density on the screen's display.
            Depending on what information the underlying system provides the value
            might not be entirely accurate.</para>
            <para>This is a convenience property that's simply the average of the
            physicalDotsPerInchX and physicalDotsPerInchY properties.</para>
            <para>See also physicalDotsPerInchX() and
            physicalDotsPerInchY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.LogicalDotsPerInchX">
            <summary>
            <para>This property holds the number of logical dots or pixels per inch
            in the horizontal direction.</para>
            <para>This value is used to convert font point sizes to pixel
            sizes.</para>
            <para>See also logicalDotsPerInchY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.LogicalDotsPerInchY">
            <summary>
            <para>This property holds the number of logical dots or pixels per inch
            in the vertical direction.</para>
            <para>This value is used to convert font point sizes to pixel
            sizes.</para>
            <para>See also logicalDotsPerInchX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.LogicalDotsPerInch">
            <summary>
            <para>This property holds the number of logical dots or pixels per
            inch.</para>
            <para>This value can be used to convert font point sizes to pixel
            sizes.</para>
            <para>This is a convenience property that's simply the average of the
            logicalDotsPerInchX and logicalDotsPerInchY properties.</para>
            <para>See also logicalDotsPerInchX() and logicalDotsPerInchY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.DevicePixelRatio">
            <summary>
            <para>This property holds the screen's ratio between physical pixels
            and device-independent pixels.</para>
            <para>Returns the ratio between physical pixels and device-independent
            pixels for the screen.</para>
            <para>Common values are 1.0 on normal displays and 2.0 on
            &quot;retina&quot; displays. Higher values are also possible.</para>
            <para>This property was introduced in  Qt 5.5.</para>
            <para>See also QWindow::devicePixelRatio() and
            QGuiApplication::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.AvailableSize">
            <summary>
            <para>This property holds the screen's available size in pixels.</para>
            <para>The available size is the size excluding window manager reserved
            areas such as task bars and system menus.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.AvailableGeometry">
            <summary>
            <para>This property holds the screen's available geometry in
            pixels.</para>
            <para>The available geometry is the geometry excluding window manager
            reserved areas such as task bars and system menus.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.VirtualSize">
            <summary>
            <para>This property holds the pixel size of the virtual desktop to
            which this screen belongs.</para>
            <para>Returns the pixel size of the virtual desktop corresponding to
            this screen.</para>
            <para>This is the combined size of the virtual siblings' individual
            geometries.</para>
            <para>See also virtualSiblings().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.VirtualGeometry">
            <summary>
            <para>This property holds the pixel geometry of the virtual desktop to
            which this screen belongs.</para>
            <para>Returns the pixel geometry of the virtual desktop corresponding
            to this screen.</para>
            <para>This is the union of the virtual siblings' individual
            geometries.</para>
            <para>See also virtualSiblings().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.AvailableVirtualSize">
            <summary>
            <para>This property holds the available size of the virtual desktop to
            which this screen belongs.</para>
            <para>Returns the available pixel size of the virtual desktop
            corresponding to this screen.</para>
            <para>This is the combined size of the virtual siblings' individual
            available geometries.</para>
            <para>See also availableSize() and virtualSiblings().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.AvailableVirtualGeometry">
            <summary>
            <para>This property holds the available geometry of the virtual desktop
            to which this screen belongs.</para>
            <para>Returns the available geometry of the virtual desktop
            corresponding to this screen.</para>
            <para>This is the union of the virtual siblings' individual available
            geometries.</para>
            <para>See also availableGeometry() and virtualSiblings().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.PrimaryOrientation">
            <summary>
            <para>This property holds the primary screen orientation.</para>
            <para>The primary screen orientation is Qt::LandscapeOrientation if the
            screen geometry's width is greater than or equal to its height, or
            Qt::PortraitOrientation otherwise. This property might change when the
            screen orientation was changed (i.e. when the display is rotated). The
            behavior is however platform dependent and can often be specified in an
            application manifest file.</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.Orientation">
            <summary>
            <para>This property holds the screen orientation.</para>
            <para>The screen orientation represents the physical orientation of the
            display. For example, the screen orientation of a mobile device will change
            based on how it is being held. A change to the orientation might or might
            not trigger a change to the primary orientation of the screen.</para>
            <para>Changes to this property will be filtered by
            orientationUpdateMask(), so in order to receive orientation updates the
            application must first call setOrientationUpdateMask() with a mask of the
            orientations it wants to receive.</para>
            <para>Qt::PrimaryOrientation is never returned.</para>
            <para>See also primaryOrientation().</para>
            </summary>
        </member>
        <member name="P:QtGui.QScreen.NativeOrientation">
            <summary>
            <para>This property holds the native screen orientation.</para>
            <para>The native orientation of the screen is the orientation where the
            logo sticker of the device appears the right way up, or
            Qt::PrimaryOrientation if the platform does not support this
            functionality.</para>
            <para>The native orientation is a property of the hardware, and does
            not change.</para>
            <para>This property was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="T:QtGui.QSessionManager">
            <summary>
            <para>The QSessionManager class provides access to the session
            manager.</para>
            </summary>
            <remarks>
            <para>A session manager in a desktop environment (in which Qt GUI
            applications live) keeps track of a session, which is a group of running
            applications, each of which has a particular state. The state of an
            application contains (most notably) the documents the application has open
            and the position and size of its windows.</para>
            <para>The session manager is used to save the session, e.g., when the
            machine is shut down, and to restore a session, e.g., when the machine is
            started up. We recommend that you use QSettings to save an application's
            settings, for example, window positions, recently used files, etc. When the
            application is restarted by the session manager, you can restore the
            settings.</para>
            <para>QSessionManager provides an interface between the application and
            the session manager so that the program can work well with the session
            manager. In Qt, session management requests for action are handled by the
            two signals QGuiApplication::commitDataRequest() and
            QGuiApplication::saveStateRequest(). Both provide a reference to a session
            manager object as argument, to allow the application to communicate with
            the session manager. The session manager can only be accessed through these
            functions.</para>
            <para>No user interaction is possible unless the application gets
            explicit permission from the session manager. You ask for permission by
            calling allowsInteraction() or, if it is really urgent,
            allowsErrorInteraction(). Qt does not enforce this, but the session manager
            may.</para>
            <para>You can try to abort the shutdown process by calling cancel().
            The default commitData() function does this if some top-level window
            rejected its closeEvent().</para>
            <para>For sophisticated session managers provided on Unix/X11,
            QSessionManager offers further possibilities to fine-tune an application's
            session management behavior: setRestartCommand(), setDiscardCommand(),
            setRestartHint(), setProperty(), requestPhase2(). See the respective
            function descriptions for further details.</para>
            <para></para>
            <para>See also QGuiApplication and Session Management.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QSessionManager.Release">
            <summary>
            <para>Releases the session manager's interaction semaphore after an
            interaction phase.</para>
            <para>See also allowsInteraction() and allowsErrorInteraction().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSessionManager.Cancel">
            <summary>
            <para>Tells the session manager to cancel the shutdown process.
            Applications should not call this function without asking the user
            first.</para>
            <para>See also allowsInteraction() and allowsErrorInteraction().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSessionManager.SetManagerProperty(System.String,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Low-level write access to the application's identification and
            state records are kept in the session manager.</para>
            <para>The property called name has its value set to the string
            value.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSessionManager.SetManagerProperty(System.String,QtCore.QStringList)">
            <summary>
            <para>Low-level write access to the application's identification and
            state record are kept in the session manager.</para>
            <para>The property called name has its value set to the string list
            value.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSessionManager.RequestPhase2">
            <summary>
            <para>Requests a second session management phase for the application.
            The application may then return immediately from the
            QGuiApplication::commitDataRequest() or QApplication::saveStateRequest()
            function, and they will be called again once most or all other applications
            have finished their session management.</para>
            <para>The two phases are useful for applications such as the X11 window
            manager that need to store information about another application's windows
            and therefore have to wait until these applications have completed their
            respective session management tasks.</para>
            <para>Note: If another application has requested a second phase it may
            get called before, simultaneously with, or after your application's second
            phase.</para>
            <para>See also isPhase2().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.restartHint">
            <summary>
            <para>Returns the application's current restart hint. The default is
            RestartIfRunning.</para>
            <para>See also setRestartHint().</para>
            <para></para>
            <para>Sets the application's restart hint to hint. On application
            startup, the hint is set to RestartIfRunning.</para>
            <para>Note: These flags are only hints, a session manager may or may
            not respect them.</para>
            <para>We recommend setting the restart hint in
            QGuiApplication::saveStateRequest() because most session managers perform a
            checkpoint shortly after an application's startup.</para>
            <para>See also restartHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.RestartCommand">
            <summary>
            <para>Returns the currently set restart command.</para>
            <para>To iterate over the list, you can use the foreach
            pseudo-keyword:</para>
            <para>foreach (const QString &amp;command,
            mySession.restartCommand())</para>
            <para>    do_something(command);</para>
            <para>See also setRestartCommand() and restartHint().</para>
            <para></para>
            <para>If the session manager is capable of restoring sessions it will
            execute command in order to restore the application. The command defaults
            to</para>
            <para>appname -session id</para>
            <para>The -session option is mandatory; otherwise QGuiApplication
            cannot tell whether it has been restored or what the current session
            identifier is. See QGuiApplication::isSessionRestored() and
            QGuiApplication::sessionId() for details.</para>
            <para>If your application is very simple, it may be possible to store
            the entire application state in additional command line options. This is
            usually a very bad idea because command lines are often limited to a few
            hundred bytes. Instead, use QSettings, temporary files, or a database for
            this purpose. By marking the data with the unique sessionId(), you will be
            able to restore the application in a future session.</para>
            <para>See also restartCommand(), setDiscardCommand(), and
            setRestartHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.DiscardCommand">
            <summary>
            <para>Returns the currently set discard command.</para>
            <para>To iterate over the list, you can use the foreach
            pseudo-keyword:</para>
            <para>foreach (const QString &amp;command,
            mySession.discardCommand())</para>
            <para>    do_something(command);</para>
            <para>See also setDiscardCommand(), restartCommand(), and
            setRestartCommand().</para>
            <para></para>
            <para>Sets the discard command to the given command.</para>
            <para>See also discardCommand() and setRestartCommand().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.SessionId">
            <summary>
            <para>Returns the identifier of the current session.</para>
            <para>If the application has been restored from an earlier session,
            this identifier is the same as it was in the earlier session.</para>
            <para>See also sessionKey() and QGuiApplication::sessionId().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.SessionKey">
            <summary>
            <para>Returns the session key in the current session.</para>
            <para>If the application has been restored from an earlier session,
            this key is the same as it was when the previous session ended.</para>
            <para>The session key changes with every call of commitData() or
            saveState().</para>
            <para>See also sessionId() and QGuiApplication::sessionKey().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.AllowsInteraction">
            <summary>
            <para>Asks the session manager for permission to interact with the
            user. Returns true if interaction is permitted; otherwise returns
            false.</para>
            <para>The rationale behind this mechanism is to make it possible to
            synchronize user interaction during a shutdown. Advanced session managers
            may ask all applications simultaneously to commit their data, resulting in
            a much faster shutdown.</para>
            <para>When the interaction is completed we strongly recommend releasing
            the user interaction semaphore with a call to release(). This way, other
            applications may get the chance to interact with the user while your
            application is still busy saving data. (The semaphore is implicitly
            released when the application exits.)</para>
            <para>If the user decides to cancel the shutdown process during the
            interaction phase, you must tell the session manager that this has happened
            by calling cancel().</para>
            <para>Here's an example of how an application's
            QGuiApplication::commitDataRequest() might be implemented:</para>
            <para>MyMainWidget::MyMainWidget(QWidget *parent)</para>
            <para>    :QWidget(parent)</para>
            <para>{</para>
            <para>    connect(qApp, SIGNAL(commitDataRequest(QSessionManager)),
            SLOT(commitData(QSessionManager)));</para>
            <para>}</para>
            <para></para>
            <para>void MyMainWidget::commitData(QSessionManager&amp;
            manager)</para>
            <para>{</para>
            <para>    if (manager.allowsInteraction()) {</para>
            <para>        int ret = QMessageBox::warning(</para>
            <para>                    mainWindow,</para>
            <para>                    tr(&quot;My Application&quot;),</para>
            <para>                    tr(&quot;Save changes to
            document?&quot;),</para>
            <para>                    QMessageBox::Save | QMessageBox::Discard |
            QMessageBox::Cancel);</para>
            <para></para>
            <para>        switch (ret) {</para>
            <para>        case QMessageBox::Save:</para>
            <para>            manager.release();</para>
            <para>            if (!saveDocument())</para>
            <para>                manager.cancel();</para>
            <para>            break;</para>
            <para>        case QMessageBox::Discard:</para>
            <para>            break;</para>
            <para>        case QMessageBox::Cancel:</para>
            <para>        default:</para>
            <para>            manager.cancel();</para>
            <para>        }</para>
            <para>    } else {</para>
            <para>        // we did not get permission to interact, then</para>
            <para>        // do something reasonable instead</para>
            <para>    }</para>
            <para>}</para>
            <para>If an error occurred within the application while saving its
            data, you may want to try allowsErrorInteraction() instead.</para>
            <para>See also QGuiApplication::commitDataRequest(), release(), and
            cancel().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.AllowsErrorInteraction">
            <summary>
            <para>Returns true if error interaction is permitted; otherwise returns
            false.</para>
            <para>This is similar to allowsInteraction(), but also enables the
            application to tell the user about any errors that occur. Session managers
            may give error interaction requests higher priority, which means that it is
            more likely that an error interaction is permitted. However, you are still
            not guaranteed that the session manager will allow interaction.</para>
            <para>See also allowsInteraction(), release(), and cancel().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSessionManager.IsPhase2">
            <summary>
            <para>Returns true if the session manager is currently performing a
            second session management phase; otherwise returns false.</para>
            <para>See also requestPhase2().</para>
            </summary>
        </member>
        <member name="T:QtGui.QSessionManager.RestartHint">
            <summary>
            <para>This enum type defines the circumstances under which this
            application wants to be restarted by the session manager. The current
            values are:</para>
            <para>The default hint is RestartIfRunning.</para>
            </summary>
        </member>
        <member name="F:QtGui.QSessionManager.RestartHint.RestartIfRunning">
            <summary>If the application is still running when the session is shut down, it wants to be restarted at the start of the next session.</summary>
        </member>
        <member name="F:QtGui.QSessionManager.RestartHint.RestartAnyway">
            <summary>The application wants to be started at the start of the next session, no matter what. (This is useful for utilities that run just after startup and then quit.)</summary>
        </member>
        <member name="F:QtGui.QSessionManager.RestartHint.RestartImmediately">
            <summary>The application wants to be started immediately whenever it is not running.</summary>
        </member>
        <member name="F:QtGui.QSessionManager.RestartHint.RestartNever">
            <summary>The application does not want to be restarted automatically.</summary>
        </member>
        <member name="T:QtGui.QStyleHints">
            <summary>
            <para>The QStyleHints class contains platform specific hints and
            settings.</para>
            </summary>
            <remarks>
            <para>An object of this class, obtained from QGuiApplication, provides
            access to certain global user interface parameters of the current
            platform.</para>
            <para>Access is read only; typically the platform itself provides the
            user a way to tune these parameters.</para>
            <para>Access to these parameters are useful when implementing custom
            user interface components, in that they allow the components to exhibit the
            same behaviour and feel as other components.</para>
            <para></para>
            <para>See also QGuiApplication::styleHints().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QStyleHints.StartDragVelocity">
            <summary>
            <para>This property holds the limit for the velocity, in pixels per
            second, that the mouse may be moved, with a button held down, for a drag
            and drop operation to begin. A value of 0 means there is no such
            limit.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	startDragVelocity() const</para>
            <para></para>
            <para>See also startDragDistance and Drag and Drop.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStyleHints.ShowIsFullScreen">
            <summary>
            <para>This property holds  if the platform defaults to windows being
            fullscreen, otherwise .</para>
            <para>Note: The platform may still choose to show certain windows
            non-fullscreen, such as popups or dialogs. This property only reports the
            default behavior.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	showIsFullScreen() const</para>
            <para></para>
            <para>See also QWindow::show().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStyleHints.SetFocusOnTouchRelease">
            <summary>
            <para>This property holds  if focus objects (line edits etc) should
            receive input focus after a touch/mouse release. This is normal behavior on
            touch platforms. On desktop platforms, the standard is to set focus already
            on touch/mouse press.</para>
            <para>Access functions:</para>
            <para></para>
            <para> bool 	setFocusOnTouchRelease() const</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QStyleHints.CursorFlashTimeChanged">
            <summary>
            <para>This property holds the text cursor's flash (blink) time in milliseconds.</para>
            <para>The flash time is the time used to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	cursorFlashTime() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	cursorFlashTimeChanged(int cursorFlashTime)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QStyleHints.KeyboardInputIntervalChanged">
            <summary>
            <para>This property holds the time limit, in milliseconds, that distinguishes a key press from two consecutive key presses.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	keyboardInputInterval() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	keyboardInputIntervalChanged(int keyboardInputInterval)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QStyleHints.MouseDoubleClickIntervalChanged">
            <summary>
            <para>This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	mouseDoubleClickInterval() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	mouseDoubleClickIntervalChanged(int mouseDoubleClickInterval)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QStyleHints.StartDragDistanceChanged">
            <summary>
            <para>This property holds the distance, in pixels, that the mouse must be moved with a button held down before a drag and drop operation will begin.</para>
            <para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.</para>
            <para>For example, if the mouse position of the click is stored in startPos and the current position (e.g. in the mouse move event) is currentPos, you can find out if a drag should be started with code like this:</para>
            <para>if ((startPos - currentPos).manhattanLength() &gt;=</para>
            <para>        QApplication::startDragDistance())</para>
            <para>    startTheDrag();</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	startDragDistance() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	startDragDistanceChanged(int startDragDistance)</para>
            <para></para>
            <para>See also startDragTime, QPoint::manhattanLength(), and Drag and Drop.</para>
            </summary>
        </member>
        <member name="E:QtGui.QStyleHints.StartDragTimeChanged">
            <summary>
            <para>This property holds the time, in milliseconds, that a mouse button must be held down before a drag and drop operation will begin.</para>
            <para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.</para>
            <para>Access functions:</para>
            <para></para>
            <para> int 	startDragTime() const</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	startDragTimeChanged(int startDragTime)</para>
            <para></para>
            <para>See also startDragDistance and Drag and Drop.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.MouseDoubleClickInterval">
            <summary>
            <para>This property holds the time limit in milliseconds that
            distinguishes a double click from two consecutive mouse clicks.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.StartDragDistance">
            <summary>
            <para>This property holds the distance, in pixels, that the mouse must
            be moved with a button held down before a drag and drop operation will
            begin.</para>
            <para>If you support drag and drop in your application, and want to
            start a drag and drop operation after the user has moved the cursor a
            certain distance with a button held down, you should use this property's
            value as the minimum distance required.</para>
            <para>For example, if the mouse position of the click is stored in
            startPos and the current position (e.g. in the mouse move event) is
            currentPos, you can find out if a drag should be started with code like
            this:</para>
            <para>if ((startPos - currentPos).manhattanLength() &gt;=</para>
            <para>        QApplication::startDragDistance())</para>
            <para>    startTheDrag();</para>
            <para>See also startDragTime, QPoint::manhattanLength(), and Drag and
            Drop.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.StartDragTime">
            <summary>
            <para>This property holds the time, in milliseconds, that a mouse
            button must be held down before a drag and drop operation will
            begin.</para>
            <para>If you support drag and drop in your application, and want to
            start a drag and drop operation after the user has held down a mouse button
            for a certain amount of time, you should use this property's value as the
            delay.</para>
            <para>See also startDragDistance and Drag and Drop.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.KeyboardInputInterval">
            <summary>
            <para>This property holds the time limit, in milliseconds, that
            distinguishes a key press from two consecutive key presses.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.CursorFlashTime">
            <summary>
            <para>This property holds the text cursor's flash (blink) time in
            milliseconds.</para>
            <para>The flash time is the time used to display, invert and restore
            the caret display. Usually the text cursor is displayed for half the cursor
            flash time, then hidden for the same amount of time.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.MousePressAndHoldInterval">
            <summary>
            <para>This property holds the time limit in milliseconds that activates
            a press and hold.</para>
            <para>This property was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.KeyboardAutoRepeatRate">
            <summary>
            <para>This property holds the rate, in events per second, in which
            additional repeated key presses will automatically be generated if a key is
            being held down.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.PasswordMaskDelay">
            <summary>
            <para>This property holds the time, in milliseconds, a typed letter is
            displayed unshrouded in a text input field in password mode.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.PasswordMaskCharacter">
            <summary>
            <para>This property holds the character used to mask the characters
            typed into text input fields in password mode.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.FontSmoothingGamma">
            <summary>
            <para>This property holds the gamma value used in font
            smoothing.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.UseRtlExtensions">
            <summary>
            <para>This property holds  if right-to-left writing direction is
            enabled, otherwise .</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.TabFocusBehavior">
            <summary>
            <para>This property holds the focus behavior on press of the tab
            key.</para>
            <para>Note: Do not bind this value in QML because the change notifier
            signal is not implemented yet.</para>
            <para>This property was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtGui.QStyleHints.SingleClickActivation">
            <summary>
            <para>This property holds  if items should be activated by single
            click, false if they should be activated by double click instead.</para>
            <para>This property was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="T:QtGui.QVector3D">
            <summary>
            <para>The QVector3D class represents a vector or vertex in 3D
            space.</para>
            </summary>
            <remarks>
            <para>Vectors are one of the main building blocks of 3D representation
            and drawing. They consist of three coordinates, traditionally called x, y,
            and z.</para>
            <para>The QVector3D class can also be used to represent vertices in 3D
            space. We therefore do not need to provide a separate vertex class.</para>
            <para></para>
            <para>See also QVector2D, QVector4D, and QQuaternion.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QVector3D.#ctor">
            <summary>
            <para>Constructs a null vector, i.e. with coordinates (0, 0, 0).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            <para>Constructs a vector with coordinates (xpos, ypos, zpos).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(QtCore.QPoint)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D point, and
            a z coordinate of 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(QtCore.QPointF)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D point, and
            a z coordinate of 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(QtGui.QVector2D)">
            <summary>
            <para>Constructs a 3D vector from the specified 2D vector. The z
            coordinate is set to zero.</para>
            <para>See also toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(QtGui.QVector2D,System.Single)">
            <summary>
            <para>Constructs a 3D vector from the specified 2D vector. The z
            coordinate is set to zpos.</para>
            <para>See also toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.#ctor(QtGui.QVector4D)">
            <summary>
            <para>Constructs a 3D vector from the specified 4D vector. The w
            coordinate is dropped.</para>
            <para>See also toVector4D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.Normalize">
            <summary>
            <para>Normalizes the currect vector in place. Nothing happens if this
            vector is a null vector or the length of the vector is very close to
            1.</para>
            <para>See also length() and normalized().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.Project(QtGui.QMatrix4x4,QtGui.QMatrix4x4,QtCore.QRect)">
            <summary>
            <para>Returns the window coordinates of this vector initially in
            object/model coordinates using the model view matrix modelView, the
            projection matrix projection and the viewport dimensions viewport.</para>
            <para>When transforming from clip to normalized space, a division by
            the w component on the vector components takes place. To prevent dividing
            by 0 if w equals to 0, it is set to 1.</para>
            <para>Note: the returned y coordinates are in OpenGL orientation.
            OpenGL expects the bottom to be 0 whereas for Qt top is 0.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also unproject().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.Unproject(QtGui.QMatrix4x4,QtGui.QMatrix4x4,QtCore.QRect)">
            <summary>
            <para>Returns the object/model coordinates of this vector initially in
            window coordinates using the model view matrix modelView, the projection
            matrix projection and the viewport dimensions viewport.</para>
            <para>When transforming from clip to normalized space, a division by
            the w component of the vector components takes place. To prevent dividing
            by 0 if w equals to 0, it is set to 1.</para>
            <para>Note: y coordinates in viewport should use OpenGL orientation.
            OpenGL expects the bottom to be 0 whereas for Qt top is 0.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also project().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.DistanceToPoint(QtGui.QVector3D)">
            <summary>
            <para>Returns the distance from this vertex to a point defined by the
            vertex point.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also distanceToPlane() and distanceToLine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.DistanceToPlane(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the distance from this vertex to a plane defined by the
            vertex plane and a normal unit vector. The normal parameter is assumed to
            have been normalized to a unit vector.</para>
            <para>The return value will be negative if the vertex is below the
            plane, or zero if it is on the plane.</para>
            <para>See also normal() and distanceToLine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.DistanceToPlane(QtGui.QVector3D,QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the distance from this vertex a plane defined by the
            vertices plane1, plane2 and plane3.</para>
            <para>The return value will be negative if the vertex is below the
            plane, or zero if it is on the plane.</para>
            <para>The two vectors that define the plane are plane2 - plane1 and
            plane3 - plane1.</para>
            <para>See also normal() and distanceToLine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.DistanceToLine(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the distance that this vertex is from a line defined by
            point and the unit vector direction.</para>
            <para>If direction is a null vector, then it does not define a line. In
            that case, the distance from point to this vertex is returned.</para>
            <para>See also distanceToPlane().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.ToVector2D">
            <summary>
            <para>Returns the 2D vector form of this 3D vector, dropping the z
            coordinate.</para>
            <para>See also toVector4D() and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.ToVector4D">
            <summary>
            <para>Returns the 4D form of this 3D vector, with the w coordinate set
            to zero.</para>
            <para>See also toVector2D() and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.ToPoint">
            <summary>
            <para>Returns the QPoint form of this 3D vector. The z coordinate is
            dropped.</para>
            <para>See also toPointF() and toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.ToPointF">
            <summary>
            <para>Returns the QPointF form of this 3D vector. The z coordinate is
            dropped.</para>
            <para>See also toPoint() and toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Implicit(QtGui.QVector3D)~QtCore.QVariant">
            <summary>
            <para>Returns the 3D vector as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.DotProduct(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the dot product of v1 and v2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.CrossProduct(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the cross-product of vectors v1 and v2, which corresponds
            to the normal vector of a plane defined by v1 and v2.</para>
            <para>See also normal().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.Normal(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the normal vector of a plane defined by vectors v1 and
            v2, normalized to be a unit vector.</para>
            <para>Use crossProduct() to compute the cross-product of v1 and v2 if
            you do not need the result to be normalized to a unit vector.</para>
            <para>See also crossProduct() and distanceToPlane().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.Normal(QtGui.QVector3D,QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the normal vector of a plane defined by vectors v2 - v1
            and v3 - v1, normalized to be a unit vector.</para>
            <para>Use crossProduct() to compute the cross-product of v2 - v1 and v3
            - v1 if you do not need the result to be normalized to a unit
            vector.</para>
            <para>See also crossProduct() and distanceToPlane().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Equality(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns true if v1 is equal to v2; otherwise returns false. This
            operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Inequality(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns true if v1 is not equal to v2; otherwise returns false.
            This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Addition(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns a QVector3D object that is the sum of the given vectors,
            v1 and v2; each component is added separately.</para>
            <para>See also QVector3D::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Subtraction(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns a QVector3D object that is formed by subtracting v2 from
            v1; each component is subtracted separately.</para>
            <para>See also QVector3D::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Multiply(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector3D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Multiply(QtGui.QVector3D,System.Single)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector3D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Multiply(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Multiplies the components of v1 by the corresponding components
            in v2.</para>
            <para>Note: this is not the same as the crossProduct() of v1 and
            v2.</para>
            <para>See also QVector3D::crossProduct().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_UnaryNegation(QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QVector3D object that is formed by changing the sign of
            all three components of the given vector.</para>
            <para>Equivalent to QVector3D(0,0,0) - vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Division(QtGui.QVector3D,System.Single)">
            <summary>
            <para>Returns the QVector3D object formed by dividing all three
            components of the given vector by the given divisor.</para>
            <para>See also QVector3D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Division(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the QVector3D object formed by dividing components of the
            given vector by a respective components of the given divisor.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QVector3D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.op_Multiply(QtGui.QVector3D,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the result of transforming vector according to matrix,
            with the matrix applied post-vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector3D.QFuzzyCompare(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns true if v1 and v2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.Item(System.Int32)">
            <summary>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 3).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para></para>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 3).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.X">
            <summary>
            <para>Returns the x coordinate of this point.</para>
            <para>See also setX(), y(), and z().</para>
            <para></para>
            <para>Sets the x coordinate of this point to the given x
            coordinate.</para>
            <para>See also x(), setY(), and setZ().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.Y">
            <summary>
            <para>Returns the y coordinate of this point.</para>
            <para>See also setY(), x(), and z().</para>
            <para></para>
            <para>Sets the y coordinate of this point to the given y
            coordinate.</para>
            <para>See also y(), setX(), and setZ().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.Z">
            <summary>
            <para>Returns the z coordinate of this point.</para>
            <para>See also setZ(), x(), and y().</para>
            <para></para>
            <para>Sets the z coordinate of this point to the given z
            coordinate.</para>
            <para>See also z(), setX(), and setY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.IsNull">
            <summary>
            <para>Returns true if the x, y, and z coordinates are set to 0.0,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.Length">
            <summary>
            <para>Returns the length of the vector from the origin.</para>
            <para>See also lengthSquared() and normalized().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.LengthSquared">
            <summary>
            <para>Returns the squared length of the vector from the origin. This is
            equivalent to the dot product of the vector with itself.</para>
            <para>See also length() and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector3D.Normalized">
            <summary>
            <para>Returns the normalized unit vector form of this vector.</para>
            <para>If this vector is null, then a null vector is returned. If the
            length of the vector is very close to 1, then the vector will be returned
            as-is. Otherwise the normalized form of the vector of length 1 will be
            returned.</para>
            <para>See also length() and normalize().</para>
            </summary>
        </member>
        <member name="T:QtGui.QVector4D">
            <summary>
            <para>The QVector4D class represents a vector or vertex in 4D
            space.</para>
            </summary>
            <remarks>
            <para>The QVector4D class can also be used to represent vertices in 4D
            space. We therefore do not need to provide a separate vertex class.</para>
            <para></para>
            <para>See also QQuaternion, QVector2D, and QVector3D.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QVector4D.#ctor">
            <summary>
            <para>Constructs a null vector, i.e. with coordinates (0, 0, 0,
            0).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Constructs a vector with coordinates (xpos, ypos, zpos,
            wpos).</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtCore.QPoint)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D point, and
            z and w coordinates of 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtCore.QPointF)">
            <summary>
            <para>Constructs a vector with x and y coordinates from a 2D point, and
            z and w coordinates of 0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtGui.QVector2D)">
            <summary>
            <para>Constructs a 4D vector from the specified 2D vector. The z and w
            coordinates are set to zero.</para>
            <para>See also toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtGui.QVector2D,System.Single,System.Single)">
            <summary>
            <para>Constructs a 4D vector from the specified 2D vector. The z and w
            coordinates are set to zpos and wpos respectively.</para>
            <para>See also toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtGui.QVector3D)">
            <summary>
            <para>Constructs a 4D vector from the specified 3D vector. The w
            coordinate is set to zero.</para>
            <para>See also toVector3D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.#ctor(QtGui.QVector3D,System.Single)">
            <summary>
            <para>Constructs a 4D vector from the specified 3D vector. The w
            coordinate is set to wpos.</para>
            <para>See also toVector3D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.Normalize">
            <summary>
            <para>Normalizes the currect vector in place. Nothing happens if this
            vector is a null vector or the length of the vector is very close to
            1.</para>
            <para>See also length() and normalized().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToVector2D">
            <summary>
            <para>Returns the 2D vector form of this 4D vector, dropping the z and
            w coordinates.</para>
            <para>See also toVector2DAffine(), toVector3D(), and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToVector2DAffine">
            <summary>
            <para>Returns the 2D vector form of this 4D vector, dividing the x and
            y coordinates by the w coordinate and dropping the z coordinate. Returns a
            null vector if w is zero.</para>
            <para>See also toVector2D(), toVector3DAffine(), and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToVector3D">
            <summary>
            <para>Returns the 3D vector form of this 4D vector, dropping the w
            coordinate.</para>
            <para>See also toVector3DAffine(), toVector2D(), and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToVector3DAffine">
            <summary>
            <para>Returns the 3D vector form of this 4D vector, dividing the x, y,
            and z coordinates by the w coordinate. Returns a null vector if w is
            zero.</para>
            <para>See also toVector3D(), toVector2DAffine(), and toPoint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToPoint">
            <summary>
            <para>Returns the QPoint form of this 4D vector. The z and w
            coordinates are dropped.</para>
            <para>See also toPointF() and toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.ToPointF">
            <summary>
            <para>Returns the QPointF form of this 4D vector. The z and w
            coordinates are dropped.</para>
            <para>See also toPoint() and toVector2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Implicit(QtGui.QVector4D)~QtCore.QVariant">
            <summary>
            <para>Returns the 4D vector as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.DotProduct(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns the dot product of v1 and v2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Equality(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns true if v1 is equal to v2; otherwise returns false. This
            operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Inequality(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns true if v1 is not equal to v2; otherwise returns false.
            This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Addition(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns a QVector4D object that is the sum of the given vectors,
            v1 and v2; each component is added separately.</para>
            <para>See also QVector4D::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Subtraction(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns a QVector4D object that is formed by subtracting v2 from
            v1; each component is subtracted separately.</para>
            <para>See also QVector4D::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Multiply(System.Single,QtGui.QVector4D)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector4D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Multiply(QtGui.QVector4D,System.Single)">
            <summary>
            <para>Returns a copy of the given vector, multiplied by the given
            factor.</para>
            <para>See also QVector4D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Multiply(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns the vector consisting of the multiplication of the
            components from v1 and v2.</para>
            <para>See also QVector4D::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_UnaryNegation(QtGui.QVector4D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QVector4D object that is formed by changing the sign of
            all three components of the given vector.</para>
            <para>Equivalent to QVector4D(0,0,0,0) - vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Division(QtGui.QVector4D,System.Single)">
            <summary>
            <para>Returns the QVector4D object formed by dividing all four
            components of the given vector by the given divisor.</para>
            <para>See also QVector4D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Division(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns the QVector4D object formed by dividing components of the
            given vector by a respective components of the given divisor.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also QVector4D::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.op_Multiply(QtGui.QVector4D,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the result of transforming vector according to matrix,
            with the matrix applied post-vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QVector4D.QFuzzyCompare(QtGui.QVector4D,QtGui.QVector4D)">
            <summary>
            <para>Returns true if v1 and v2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.Item(System.Int32)">
            <summary>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 4).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para></para>
            <para>Returns the component of the vector at index position i as a
            modifiable reference.</para>
            <para>i must be a valid index position in the vector (i.e., 0 &lt;= i
            &lt; 4).</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.X">
            <summary>
            <para>Returns the x coordinate of this point.</para>
            <para>See also setX(), y(), z(), and w().</para>
            <para></para>
            <para>Sets the x coordinate of this point to the given x
            coordinate.</para>
            <para>See also x(), setY(), setZ(), and setW().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.Y">
            <summary>
            <para>Returns the y coordinate of this point.</para>
            <para>See also setY(), x(), z(), and w().</para>
            <para></para>
            <para>Sets the y coordinate of this point to the given y
            coordinate.</para>
            <para>See also y(), setX(), setZ(), and setW().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.Z">
            <summary>
            <para>Returns the z coordinate of this point.</para>
            <para>See also setZ(), x(), y(), and w().</para>
            <para></para>
            <para>Sets the z coordinate of this point to the given z
            coordinate.</para>
            <para>See also z(), setX(), setY(), and setW().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.W">
            <summary>
            <para>Returns the w coordinate of this point.</para>
            <para>See also setW(), x(), y(), and z().</para>
            <para></para>
            <para>Sets the w coordinate of this point to the given w
            coordinate.</para>
            <para>See also w(), setX(), setY(), and setZ().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.IsNull">
            <summary>
            <para>Returns true if the x, y, z, and w coordinates are set to 0.0,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.Length">
            <summary>
            <para>Returns the length of the vector from the origin.</para>
            <para>See also lengthSquared() and normalized().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.LengthSquared">
            <summary>
            <para>Returns the squared length of the vector from the origin. This is
            equivalent to the dot product of the vector with itself.</para>
            <para>See also length() and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QVector4D.Normalized">
            <summary>
            <para>Returns the normalized unit vector form of this vector.</para>
            <para>If this vector is null, then a null vector is returned. If the
            length of the vector is very close to 1, then the vector will be returned
            as-is. Otherwise the normalized form of the vector of length 1 will be
            returned.</para>
            <para>See also length() and normalize().</para>
            </summary>
        </member>
        <member name="T:QtGui.QQuaternion">
            <summary>
            <para>The QQuaternion class represents a quaternion consisting of a
            vector and scalar.</para>
            </summary>
            <remarks>
            <para>Quaternions are used to represent rotations in 3D space, and
            consist of a 3D rotation axis specified by the x, y, and z coordinates, and
            a scalar representing the rotation angle.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QQuaternion.#ctor">
            <summary>
            <para>Constructs an identity quaternion (1, 0, 0, 0), i.e. with the
            vector (0, 0, 0) and scalar 1.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Constructs a quaternion with the vector (xpos, ypos, zpos) and
            scalar.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.#ctor(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Constructs a quaternion vector from the specified vector and
            scalar.</para>
            <para>See also vector() and scalar().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.#ctor(QtGui.QVector4D)">
            <summary>
            <para>Constructs a quaternion from the components of vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.SetVector(System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the vector component of this quaternion to (x, y, z).</para>
            <para>See also vector() and setScalar().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.Normalize">
            <summary>
            <para>Normalizes the current quaternion in place. Nothing happens if
            this is a null quaternion or the length of the quaternion is very close to
            1.</para>
            <para>See also length() and normalized().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.RotatedVector(QtGui.QVector3D)">
            <summary>
            <para>Rotates vector with this quaternion to produce a new vector in 3D
            space. The following code:</para>
            <para>QVector3D result = q.rotatedVector(vector);</para>
            <para>is equivalent to the following:</para>
            <para>QVector3D result = (q * QQuaternion(0, vector) *
            q.conjugated()).vector();</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.ToVector4D">
            <summary>
            <para>Returns this quaternion as a 4D vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Implicit(QtGui.QQuaternion)~QtCore.QVariant">
            <summary>
            <para>Returns the quaternion as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.GetAxisAndAngle(QtGui.QVector3D,System.Single@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Extracts a 3D axis axis and a rotating angle angle (in degrees)
            that corresponds to this quaternion.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromAxisAndAngle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.GetAxisAndAngle(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            <para>Extracts a 3D axis (x, y, z) and a rotating angle angle (in
            degrees) that corresponds to this quaternion.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromAxisAndAngle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.ToEulerAngles">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Calculates roll, pitch, and yaw Euler angles (in degrees) that
            corresponds to this quaternion.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromEulerAngles().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.GetEulerAngles(System.Single@,System.Single@,System.Single@)">
            <summary>
            <para>Calculates roll, pitch, and yaw Euler angles (in degrees) that
            corresponds to this quaternion.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromEulerAngles().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.GetAxes(QtGui.QVector3D,QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the 3 orthonormal axes (xAxis, yAxis, zAxis) defining the
            quaternion.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromAxes() and toRotationMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.DotProduct(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns the dot product of q1 and q2.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also length().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromAxisAndAngle(QtGui.QVector3D,System.Single)">
            <summary>
            <para>Creates a normalized quaternion that corresponds to rotating
            through angle degrees about the specified 3D axis.</para>
            <para>See also getAxisAndAngle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromAxisAndAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a normalized quaternion that corresponds to rotating
            through angle degrees about the 3D axis (x, y, z).</para>
            <para>See also getAxisAndAngle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromEulerAngles(QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a quaternion that corresponds to a rotation of
            eulerAngles: eulerAngles.z() degrees around the z axis, eulerAngles.x()
            degrees around the x axis, and eulerAngles.y() degrees around the y axis
            (in that order).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also toEulerAngles().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromEulerAngles(System.Single,System.Single,System.Single)">
            <summary>
            <para>Creates a quaternion that corresponds to a rotation of roll
            degrees around the z axis, pitch degrees around the x axis, and yaw degrees
            around the y axis (in that order).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also getEulerAngles().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromAxes(QtGui.QVector3D,QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Constructs the quaternion using 3 axes (xAxis, yAxis,
            zAxis).</para>
            <para>Note: The axes are assumed to be orthonormal.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also getAxes() and fromRotationMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.FromDirection(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Constructs the quaternion using specified forward direction
            direction and upward direction up. If the upward direction was not
            specified or the forward and upward vectors are collinear, a new
            orthonormal upward direction will be generated.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromAxes() and rotationTo().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.RotationTo(QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Returns the shortest arc quaternion to rotate from the direction
            described by the vector from to the direction described by the vector
            to.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also fromDirection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.Slerp(QtGui.QQuaternion,QtGui.QQuaternion,System.Single)">
            <summary>
            <para>Interpolates along the shortest spherical path between the
            rotational positions q1 and q2. The value t should be between 0 and 1,
            indicating the spherical distance to travel between q1 and q2.</para>
            <para>If t is less than or equal to 0, then q1 will be returned. If t
            is greater than or equal to 1, then q2 will be returned.</para>
            <para>See also nlerp().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.Nlerp(QtGui.QQuaternion,QtGui.QQuaternion,System.Single)">
            <summary>
            <para>Interpolates along the shortest linear path between the
            rotational positions q1 and q2. The value t should be between 0 and 1,
            indicating the distance to travel between q1 and q2. The result will be
            normalized().</para>
            <para>If t is less than or equal to 0, then q1 will be returned. If t
            is greater than or equal to 1, then q2 will be returned.</para>
            <para>The nlerp() function is typically faster than slerp() and will
            give approximate results to spherical interpolation that are good enough
            for some applications.</para>
            <para>See also slerp().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Equality(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns true if q1 is equal to q2; otherwise returns false. This
            operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Inequality(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns true if q1 is not equal to q2; otherwise returns false.
            This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Addition(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns a QQuaternion object that is the sum of the given
            quaternions, q1 and q2; each component is added separately.</para>
            <para>See also QQuaternion::operator+=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Subtraction(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns a QQuaternion object that is formed by subtracting q2
            from q1; each component is subtracted separately.</para>
            <para>See also QQuaternion::operator-=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Multiply(System.Single,QtGui.QQuaternion)">
            <summary>
            <para>Returns a copy of the given quaternion, multiplied by the given
            factor.</para>
            <para>See also QQuaternion::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Multiply(QtGui.QQuaternion,System.Single)">
            <summary>
            <para>Returns a copy of the given quaternion, multiplied by the given
            factor.</para>
            <para>See also QQuaternion::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Multiply(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Multiplies q1 and q2 using quaternion multiplication. The result
            corresponds to applying both of the rotations specified by q1 and
            q2.</para>
            <para>See also QQuaternion::operator*=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_UnaryNegation(QtGui.QQuaternion)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns a QQuaternion object that is formed by changing the sign
            of all three components of the given quaternion.</para>
            <para>Equivalent to QQuaternion(0,0,0,0) - quaternion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Division(QtGui.QQuaternion,System.Single)">
            <summary>
            <para>Returns the QQuaternion object formed by dividing all components
            of the given quaternion by the given divisor.</para>
            <para>See also QQuaternion::operator/=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.op_Multiply(QtGui.QQuaternion,QtGui.QVector3D)">
            <summary>
            <para>Rotates a vector vec with a quaternion quaternion to produce a
            new vector in 3D space.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QQuaternion.QFuzzyCompare(QtGui.QQuaternion,QtGui.QQuaternion)">
            <summary>
            <para>Returns true if q1 and q2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Vector">
            <summary>
            <para>Returns the vector component of this quaternion.</para>
            <para>See also setVector() and scalar().</para>
            <para></para>
            <para>Sets the vector component of this quaternion to vector.</para>
            <para>See also vector() and setScalar().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.X">
            <summary>
            <para>Returns the x coordinate of this quaternion's vector.</para>
            <para>See also setX(), y(), z(), and scalar().</para>
            <para></para>
            <para>Sets the x coordinate of this quaternion's vector to the given x
            coordinate.</para>
            <para>See also x(), setY(), setZ(), and setScalar().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Y">
            <summary>
            <para>Returns the y coordinate of this quaternion's vector.</para>
            <para>See also setY(), x(), z(), and scalar().</para>
            <para></para>
            <para>Sets the y coordinate of this quaternion's vector to the given y
            coordinate.</para>
            <para>See also y(), setX(), setZ(), and setScalar().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Z">
            <summary>
            <para>Returns the z coordinate of this quaternion's vector.</para>
            <para>See also setZ(), x(), y(), and scalar().</para>
            <para></para>
            <para>Sets the z coordinate of this quaternion's vector to the given z
            coordinate.</para>
            <para>See also z(), setX(), setY(), and setScalar().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Scalar">
            <summary>
            <para>Returns the scalar component of this quaternion.</para>
            <para>See also setScalar(), x(), y(), and z().</para>
            <para></para>
            <para>Sets the scalar component of this quaternion to scalar.</para>
            <para>See also scalar(), setX(), setY(), and setZ().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.IsNull">
            <summary>
            <para>Returns true if the x, y, z, and scalar components of this
            quaternion are set to 0.0; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.IsIdentity">
            <summary>
            <para>Returns true if the x, y, and z components of this quaternion are
            set to 0.0, and the scalar component is set to 1.0; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Length">
            <summary>
            <para>Returns the length of the quaternion. This is also called the
            &quot;norm&quot;.</para>
            <para>See also lengthSquared(), normalized(), and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.LengthSquared">
            <summary>
            <para>Returns the squared length of the quaternion.</para>
            <para>See also length() and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Normalized">
            <summary>
            <para>Returns the normalized unit form of this quaternion.</para>
            <para>If this quaternion is null, then a null quaternion is returned.
            If the length of the quaternion is very close to 1, then the quaternion
            will be returned as-is. Otherwise the normalized form of the quaternion of
            length 1 will be returned.</para>
            <para>See also normalize(), length(), and dotProduct().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Inverted">
            <summary>
            <para>Returns the inverse of this quaternion. If this quaternion is
            null, then a null quaternion is returned.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also isNull() and length().</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Conjugated">
            <summary>
            <para>Returns the conjugate of this quaternion, which is (-x, -y, -z,
            scalar).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="P:QtGui.QQuaternion.Conjugate">
            <summary>
            <para>Use conjugated() instead.</para>
            </summary>
        </member>
        <member name="T:QtGui.QMatrix4x4">
            <summary>
            <para>The QMatrix4x4 class represents a 4x4 transformation matrix in 3D
            space.</para>
            </summary>
            <remarks>
            <para>The QMatrix4x4 class in general is treated as a row-major matrix,
            in that the constructors and operator() functions take data in row-major
            format, as is familiar in C-style usage.</para>
            <para>Internally the data is stored as column-major format, so as to be
            optimal for passing to OpenGL functions, which expect column-major
            data.</para>
            <para>When using these functions be aware that they return data in
            column-major format:</para>
            <para></para>
            <para>data()</para>
            <para>constData()</para>
            <para></para>
            <para></para>
            <para>See also QVector3D and QGenericMatrix.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QMatrix4x4.#ctor">
            <summary>
            <para>Constructs an identity matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.#ctor(System.Single@)">
            <summary>
            <para>Constructs a matrix from the given 16 floating-point values. The
            contents of the array values is assumed to be in row-major order.</para>
            <para>If the matrix has a special type (identity, translate, scale,
            etc), the programmer should follow this constructor with a call to
            optimize() if they wish QMatrix4x4 to optimize further calls to
            translate(), scale(), etc.</para>
            <para>See also copyDataTo() and optimize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Constructs a matrix from the 16 elements m11, m12, m13, m14, m21,
            m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, and m44. The elements are
            specified in row-major order.</para>
            <para>If the matrix has a special type (identity, translate, scale,
            etc), the programmer should follow this constructor with a call to
            optimize() if they wish QMatrix4x4 to optimize further calls to
            translate(), scale(), etc.</para>
            <para>See also optimize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.#ctor(QtGui.QTransform)">
            <summary>
            <para>Constructs a 4x4 matrix from the conventional Qt 2D
            transformation matrix transform.</para>
            <para>If transform has a special type (identity, translate, scale,
            etc), the programmer should follow this constructor with a call to
            optimize() if they wish QMatrix4x4 to optimize further calls to
            translate(), scale(), etc.</para>
            <para>See also toTransform() and optimize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.#ctor(QtGui.QMatrix)">
            <summary>
            <para>Constructs a 4x4 matrix from a conventional Qt 2D affine
            transformation matrix.</para>
            <para>If matrix has a special type (identity, translate, scale, etc),
            the programmer should follow this constructor with a call to optimize() if
            they wish QMatrix4x4 to optimize further calls to translate(), scale(),
            etc.</para>
            <para>See also toAffine() and optimize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Column(System.Int32)">
            <summary>
            <para>Returns the elements of column index as a 4D vector.</para>
            <para>See also setColumn() and row().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.SetColumn(System.Int32,QtGui.QVector4D)">
            <summary>
            <para>Sets the elements of column index to the components of
            value.</para>
            <para>See also column() and setRow().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Row(System.Int32)">
            <summary>
            <para>Returns the elements of row index as a 4D vector.</para>
            <para>See also setRow() and column().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.SetRow(System.Int32,QtGui.QVector4D)">
            <summary>
            <para>Sets the elements of row index to the components of value.</para>
            <para>See also row() and setColumn().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.SetToIdentity">
            <summary>
            <para>Sets this matrix to the identity.</para>
            <para>See also isIdentity().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Fill(System.Single)">
            <summary>
            <para>Fills all elements of this matrx with value.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Inverted(System.Boolean@)">
            <summary>
            <para>Returns the inverse of this matrix. Returns the identity if this
            matrix cannot be inverted; i.e. determinant() is zero. If invertible is not
            null, then true will be written to that location if the matrix can be
            inverted; false otherwise.</para>
            <para>If the matrix is recognized as the identity or an orthonormal
            matrix, then this function will quickly invert the matrix using optimized
            routines.</para>
            <para>See also determinant() and normalMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Equality(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns true if this matrix is identical to other; false
            otherwise. This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Inequality(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns true if this matrix is not identical to other; false
            otherwise. This operator uses an exact floating-point comparison.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Scale(QtGui.QVector3D)">
            <summary>
            <para>Multiplies this matrix by another that scales coordinates by the
            components of vector.</para>
            <para>See also translate() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Translate(QtGui.QVector3D)">
            <summary>
            <para>Multiplies this matrix by another that translates coordinates by
            the components of vector.</para>
            <para>See also scale() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Rotate(System.Single,QtGui.QVector3D)">
            <summary>
            <para>Multiples this matrix by another that rotates coordinates through
            angle degrees about vector.</para>
            <para>See also scale() and translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Scale(System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that scales coordinates by the
            components x, and y.</para>
            <para>See also translate() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that scales coordinates by the
            components x, y, and z.</para>
            <para>See also translate() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Scale(System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that scales coordinates by the
            given factor.</para>
            <para>See also translate() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Translate(System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that translates coordinates by
            the components x, and y.</para>
            <para>See also scale() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Translate(System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that translates coordinates by
            the components x, y, and z.</para>
            <para>See also scale() and rotate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Rotate(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that rotates coordinates
            through angle degrees about the vector (x, y, z).</para>
            <para>See also scale() and translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Rotate(QtGui.QQuaternion)">
            <summary>
            <para>Multiples this matrix by another that rotates coordinates
            according to a specified quaternion. The quaternion is assumed to have been
            normalized.</para>
            <para>See also scale(), translate(), and QQuaternion.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Ortho(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that applies an orthographic
            projection for a window with boundaries specified by rect. The near and far
            clipping planes will be -1 and 1 respectively.</para>
            <para>See also frustum() and perspective().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Ortho(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Multiplies this matrix by another that applies an orthographic
            projection for a window with boundaries specified by rect. The near and far
            clipping planes will be -1 and 1 respectively.</para>
            <para>See also frustum() and perspective().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Multiplies this matrix by another that applies an orthographic
            projection for a window with lower-left corner (left, bottom), upper-right
            corner (right, top), and the specified nearPlane and farPlane clipping
            planes.</para>
            <para>See also frustum() and perspective().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Multiplies this matrix by another that applies a perspective
            frustum projection for a window with lower-left corner (left, bottom),
            upper-right corner (right, top), and the specified nearPlane and farPlane
            clipping planes.</para>
            <para>See also ortho() and perspective().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Multiplies this matrix by another that applies a perspective
            projection. The vertical field of view will be verticalAngle degrees within
            a window with a given aspectRatio that determines the horizontal field of
            view. The projection will have the specified nearPlane and farPlane
            clipping planes which are the distances from the viewer to the
            corresponding planes.</para>
            <para>See also ortho() and frustum().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.LookAt(QtGui.QVector3D,QtGui.QVector3D,QtGui.QVector3D)">
            <summary>
            <para>Multiplies this matrix by a viewing matrix derived from an eye
            point. The center value indicates the center of the view that the eye is
            looking at. The up value indicates which direction should be considered up
            with respect to the eye.</para>
            <para>Note: The up vector must not be parallel to the line of sight
            from eye to center.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Viewport(QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets up viewport transform for viewport bounded by rect and with
            near and far set to 0 and 1 respectively.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Viewport(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Multiplies this matrix by another that performs the scale and
            bias transformation used by OpenGL to transform from normalized device
            coordinates (NDC) to viewport (window) coordinates. That is it maps points
            from the cube ranging over [-1, 1] in each dimension to the viewport with
            it's near-lower-left corner at (left, bottom, nearPlane) and with size
            (width, height, farPlane - nearPlane).</para>
            <para>This matches the transform used by the fixed function OpenGL
            viewport transform controlled by the functions glViewport() and
            glDepthRange().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.FlipCoordinates">
            <summary>
            <para>Flips between right-handed and left-handed coordinate systems by
            multiplying the y and z co-ordinates by -1. This is normally used to create
            a left-handed orthographic view without scaling the viewport as ortho()
            does.</para>
            <para>See also ortho().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.CopyDataTo(System.Single@)">
            <summary>
            <para>Retrieves the 16 items in this matrix and copies them to values
            in row-major order.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.ToAffine">
            <summary>
            <para>Returns the conventional Qt 2D affine transformation matrix that
            corresponds to this matrix. It is assumed that this matrix only contains 2D
            affine transformation elements.</para>
            <para>See also toTransform().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.ToTransform">
            <summary>
            <para>Returns the conventional Qt 2D transformation matrix that
            corresponds to this matrix.</para>
            <para>The returned QTransform is formed by simply dropping the third
            row and third column of the QMatrix4x4. This is suitable for implementing
            orthographic projections where the z co-ordinate should be dropped rather
            than projected.</para>
            <para>See also toAffine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.ToTransform(System.Single)">
            <summary>
            <para>Returns the conventional Qt 2D transformation matrix that
            corresponds to this matrix.</para>
            <para>If distanceToPlane is non-zero, it indicates a projection factor
            to use to adjust for the z co-ordinate. The value of 1024 corresponds to
            the projection factor used by QTransform::rotate() for the x and y
            axes.</para>
            <para>If distanceToPlane is zero, then the returned QTransform is
            formed by simply dropping the third row and third column of the QMatrix4x4.
            This is suitable for implementing orthographic projections where the z
            co-ordinate should be dropped rather than projected.</para>
            <para>See also toAffine().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Map(QtCore.QPoint)">
            <summary>
            <para>Maps point by multiplying this matrix by point.</para>
            <para>See also mapRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Map(QtCore.QPointF)">
            <summary>
            <para>Maps point by multiplying this matrix by point.</para>
            <para>See also mapRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Map(QtGui.QVector3D)">
            <summary>
            <para>Maps point by multiplying this matrix by point.</para>
            <para>See also mapRect() and mapVector().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.MapVector(QtGui.QVector3D)">
            <summary>
            <para>Maps vector by multiplying the top 3x3 portion of this matrix by
            vector. The translation and projection components of this matrix are
            ignored.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Map(QtGui.QVector4D)">
            <summary>
            <para>Maps point by multiplying this matrix by point.</para>
            <para>See also mapRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.MapRect(QtCore.QRect)">
            <summary>
            <para>Maps rect by multiplying this matrix by the corners of rect and
            then forming a new rectangle from the results. The returned rectangle will
            be an ordinary 2D rectangle with sides parallel to the horizontal and
            vertical axes.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.MapRect(QtCore.QRectF)">
            <summary>
            <para>Maps rect by multiplying this matrix by the corners of rect and
            then forming a new rectangle from the results. The returned rectangle will
            be an ordinary 2D rectangle with sides parallel to the horizontal and
            vertical axes.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Optimize">
            <summary>
            <para>Optimize the usage of this matrix from its current
            elements.</para>
            <para>Some operations such as translate(), scale(), and rotate() can be
            performed more efficiently if the matrix being modified is already known to
            be the identity, a previous translate(), a previous scale(), etc.</para>
            <para>Normally the QMatrix4x4 class keeps track of this special type
            internally as operations are performed. However, if the matrix is modified
            directly with operator()() or data(), then QMatrix4x4 will lose track of
            the special type and will revert to the safest but least efficient
            operations thereafter.</para>
            <para>By calling optimize() after directly modifying the matrix, the
            programmer can force QMatrix4x4 to recover the special type if the elements
            appear to conform to one of the known optimized types.</para>
            <para>See also operator()(), data(), and translate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Implicit(QtGui.QMatrix4x4)~QtCore.QVariant">
            <summary>
            <para>Returns the matrix as a QVariant.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.Inverted">
            <summary>
            <para>Returns the inverse of this matrix. Returns the identity if this
            matrix cannot be inverted; i.e. determinant() is zero. If invertible is not
            null, then true will be written to that location if the matrix can be
            inverted; false otherwise.</para>
            <para>If the matrix is recognized as the identity or an orthonormal
            matrix, then this function will quickly invert the matrix using optimized
            routines.</para>
            <para>See also determinant() and normalMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,QtGui.QVector3D)">
            <summary>
            <para>Returns the result of transforming vector according to matrix,
            with the matrix applied pre-vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,QtGui.QVector4D)">
            <summary>
            <para>Returns the result of transforming vector according to matrix,
            with the matrix applied pre-vector.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Addition(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the sum of m1 and m2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Subtraction(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the difference of m1 and m2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the product of m1 and m2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_UnaryNegation(QtGui.QMatrix4x4)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the negation of matrix.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,QtCore.QPoint)">
            <summary>
            <para>Returns the result of transforming point according to matrix,
            with the matrix applied pre-point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,QtCore.QPointF)">
            <summary>
            <para>Returns the result of transforming point according to matrix,
            with the matrix applied pre-point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(System.Single,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns the result of multiplying all elements of matrix by
            factor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Multiply(QtGui.QMatrix4x4,System.Single)">
            <summary>
            <para>Returns the result of multiplying all elements of matrix by
            factor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.op_Division(QtGui.QMatrix4x4,System.Single)">
            <summary>
            <para>Returns the result of dividing all elements of matrix by
            divisor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QMatrix4x4.QFuzzyCompare(QtGui.QMatrix4x4,QtGui.QMatrix4x4)">
            <summary>
            <para>Returns true if m1 and m2 are equal, allowing for a small
            fuzziness factor for floating-point comparisons; false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.IsAffine">
            <summary>
            <para>Returns true if this matrix is affine matrix; false
            otherwise.</para>
            <para>An affine matrix is a 4x4 matrix with row 3 equal to (0, 0, 0,
            1), e.g. no projective coefficients.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also isIdentity().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.IsIdentity">
            <summary>
            <para>Returns true if this matrix is the identity; false
            otherwise.</para>
            <para>See also setToIdentity().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.Determinant">
            <summary>
            <para>Returns the determinant of this matrix.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.Transposed">
            <summary>
            <para>Returns this matrix, transposed about its diagonal.</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.Data">
            <summary>
            <para>Returns a pointer to the raw data of this matrix.</para>
            <para>See also constData() and optimize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QMatrix4x4.ConstData">
            <summary>
            <para>Returns a constant pointer to the raw data of this matrix. This
            raw data is stored in column-major format.</para>
            <para>See also data().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLBuffer">
            <summary>
            <para>The QOpenGLBuffer class provides functions for creating and
            managing OpenGL buffer objects.</para>
            </summary>
            <remarks>
            <para>Buffer objects are created in the OpenGL server so that the
            client application can avoid uploading vertices, indices, texture image
            data, etc every time they are needed.</para>
            <para>QOpenGLBuffer objects can be copied around as a reference to the
            underlying OpenGL buffer object:</para>
            <para>QOpenGLBuffer buffer1(QOpenGLBuffer::IndexBuffer);</para>
            <para>buffer1.create();</para>
            <para></para>
            <para>QOpenGLBuffer buffer2 = buffer1;</para>
            <para>QOpenGLBuffer performs a shallow copy when objects are copied in
            this manner, but does not implement copy-on-write semantics. The original
            object will be affected whenever the copy is modified.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.#ctor">
            <summary>
            <para>Constructs a new buffer object of type
            QOpenGLBuffer::VertexBuffer.</para>
            <para>Note: this constructor just creates the QOpenGLBuffer instance.
            The actual buffer object in the OpenGL server is not created until create()
            is called.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.#ctor(QtGui.QOpenGLBuffer.Type)">
            <summary>
            <para>Constructs a new buffer object of type.</para>
            <para>Note: this constructor just creates the QOpenGLBuffer instance.
            The actual buffer object in the OpenGL server is not created until create()
            is called.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.#ctor(QtGui.QOpenGLBuffer)">
            <summary>
            <para>Constructs a shallow copy of other.</para>
            <para>Note: QOpenGLBuffer does not implement copy-on-write semantics,
            so other will be affected whenever the copy is modified.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Create">
            <summary>
            <para>Creates the buffer object in the OpenGL server. Returns true if
            the object was created; false otherwise.</para>
            <para>This function must be called with a current QOpenGLContext. The
            buffer will be bound to and can only be used in that context (or any other
            context that is shared with it).</para>
            <para>This function will return false if the OpenGL implementation does
            not support buffers, or there is no current QOpenGLContext.</para>
            <para>See also isCreated(), allocate(), write(), and destroy().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Destroy">
            <summary>
            <para>Destroys this buffer object, including the storage being used in
            the OpenGL server. All references to the buffer will become invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Bind">
            <summary>
            <para>Binds the buffer associated with this object to the current
            OpenGL context. Returns false if binding was not possible, usually because
            type() is not supported on this OpenGL implementation.</para>
            <para>The buffer must be bound to the same QOpenGLContext current when
            create() was called, or to another QOpenGLContext that is sharing with it.
            Otherwise, false will be returned from this function.</para>
            <para>See also release() and create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Release">
            <summary>
            <para>Releases the buffer associated with this object from the current
            OpenGL context.</para>
            <para>This function must be called with the same QOpenGLContext current
            as when bind() was called on the buffer.</para>
            <para>See also bind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Read(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            <para>Reads the count bytes in this buffer starting at offset into
            data. Returns true on success; false if reading from the buffer is not
            supported. Buffer reading is not supported under OpenGL/ES.</para>
            <para>It is assumed that this buffer has been bound to the current
            context.</para>
            <para>See also write() and bind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Write(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            <para>Replaces the count bytes of this buffer starting at offset with
            the contents of data. Any other bytes in the buffer will be left
            unmodified.</para>
            <para>It is assumed that create() has been called on this buffer and
            that it has been bound to the current context.</para>
            <para>See also create(), read(), and allocate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Allocate(System.IntPtr,System.Int32)">
            <summary>
            <para>Allocates count bytes of space to the buffer, initialized to the
            contents of data. Any previous contents will be removed.</para>
            <para>It is assumed that create() has been called on this buffer and
            that it has been bound to the current context.</para>
            <para>See also create(), read(), and write().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Allocate(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Allocates count bytes of space to the buffer. Any previous
            contents will be removed.</para>
            <para>It is assumed that create() has been called on this buffer and
            that it has been bound to the current context.</para>
            <para>See also create() and write().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Map(QtGui.QOpenGLBuffer.Access)">
            <summary>
            <para>Maps the contents of this buffer into the application's memory
            space and returns a pointer to it. Returns null if memory mapping is not
            possible. The access parameter indicates the type of access to be
            performed.</para>
            <para>It is assumed that create() has been called on this buffer and
            that it has been bound to the current context.</para>
            <para>Note: This function is only supported under OpenGL ES 2.0 or
            earlier if the GL_OES_mapbuffer extension is present.</para>
            <para>Note: On OpenGL ES 3.0 and newer, or, in case if desktop OpenGL,
            if GL_ARB_map_buffer_range is supported, this function uses
            glMapBufferRange instead of glMapBuffer.</para>
            <para>See also unmap(), create(), bind(), and mapRange().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.MapRange(System.Int32,System.Int32,QtGui.QOpenGLBuffer.RangeAccessFlag)">
            <summary>
            <para>Maps the range specified by offset and count of the contents of
            this buffer into the application's memory space and returns a pointer to
            it. Returns null if memory mapping is not possible. The access parameter
            specifies a combination of access flags.</para>
            <para>It is assumed that create() has been called on this buffer and
            that it has been bound to the current context.</para>
            <para>Note: This function is not available on OpenGL ES 2.0 and
            earlier.</para>
            <para>See also unmap(), create(), and bind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Unmap">
            <summary>
            <para>Unmaps the buffer after it was mapped into the application's
            memory space with a previous call to map(). Returns true if the unmap
            succeeded; false otherwise.</para>
            <para>It is assumed that this buffer has been bound to the current
            context, and that it was previously mapped with map().</para>
            <para>Note: This function is only supported under OpenGL ES 2.0 and
            earlier if the GL_OES_mapbuffer extension is present.</para>
            <para>See also map().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLBuffer.Release(QtGui.QOpenGLBuffer.Type)">
            <summary>
            <para>Releases the buffer associated with type in the current
            QOpenGLContext.</para>
            <para>This function is a direct call to glBindBuffer(type, 0) for use
            when the caller does not know which QOpenGLBuffer has been bound to the
            context but wants to make sure that it is released.</para>
            <para>QOpenGLBuffer::release(QOpenGLBuffer::VertexBuffer);</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLBuffer.usagePattern">
            <summary>
            <para>Returns the usage pattern for this buffer object. The default
            value is StaticDraw.</para>
            <para>See also setUsagePattern().</para>
            <para></para>
            <para>Sets the usage pattern for this buffer object to value. This
            function must be called before allocate() or write().</para>
            <para>See also usagePattern(), allocate(), and write().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLBuffer.type">
            <summary>
            <para>Returns the type of buffer represented by this object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLBuffer.IsCreated">
            <summary>
            <para>Returns true if this buffer has been created; false
            otherwise.</para>
            <para>See also create() and destroy().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLBuffer.BufferId">
            <summary>
            <para>Returns the OpenGL identifier associated with this buffer; zero
            if the buffer has not been created.</para>
            <para>See also isCreated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLBuffer.Size">
            <summary>
            <para>Returns the size of the data in this buffer, for reading
            operations. Returns -1 if fetching the buffer size is not supported, or the
            buffer has not been created.</para>
            <para>It is assumed that this buffer has been bound to the current
            context.</para>
            <para>See also isCreated() and bind().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLBuffer.Type">
            <summary>
            <para>This enum defines the type of OpenGL buffer object to create with
            QOpenGLBuffer.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Type.VertexBuffer">
            <summary>Vertex buffer object for use when specifying vertex arrays.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Type.IndexBuffer">
            <summary>Index buffer object for use with glDrawElements().</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Type.PixelPackBuffer">
            <summary>Pixel pack buffer object for reading pixel data from the OpenGL server (for example, with glReadPixels()). Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Type.PixelUnpackBuffer">
            <summary>Pixel unpack buffer object for writing pixel data to the OpenGL server (for example, with glTexImage2D()). Not supported under OpenGL/ES.</summary>
        </member>
        <member name="T:QtGui.QOpenGLBuffer.UsagePattern">
            <summary>
            <para>This enum defines the usage pattern of a QOpenGLBuffer
            object.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StreamDraw">
            <summary>The data will be set once and used a few times for drawing operations. Under OpenGL/ES 1.1 this is identical to StaticDraw.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StreamRead">
            <summary>The data will be set once and used a few times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StreamCopy">
            <summary>The data will be set once and used a few times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StaticDraw">
            <summary>The data will be set once and used many times for drawing operations.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StaticRead">
            <summary>The data will be set once and used many times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.StaticCopy">
            <summary>The data will be set once and used many times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.DynamicDraw">
            <summary>The data will be modified repeatedly and used many times for drawing operations.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.DynamicRead">
            <summary>The data will be modified repeatedly and used many times for reading data back from the OpenGL server. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.UsagePattern.DynamicCopy">
            <summary>The data will be modified repeatedly and used many times for reading data back from the OpenGL server for use in further drawing operations. Not supported under OpenGL/ES.</summary>
        </member>
        <member name="T:QtGui.QOpenGLBuffer.Access">
            <summary>
            <para>This enum defines the access mode for
            QOpenGLBuffer::map().</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Access.ReadOnly">
            <summary>The buffer will be mapped for reading only.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Access.WriteOnly">
            <summary>The buffer will be mapped for writing only.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.Access.ReadWrite">
            <summary>The buffer will be mapped for reading and writing.</summary>
        </member>
        <member name="T:QtGui.QOpenGLBuffer.RangeAccessFlag">
            <summary>
            <para>This enum defines the access mode bits for
            QOpenGLBuffer::mapRange().</para>
            <para>The RangeAccessFlags type is a typedef for
            QFlags&lt;RangeAccessFlag&gt;. It stores an OR combination of
            RangeAccessFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeRead">
            <summary>The buffer will be mapped for reading.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeWrite">
            <summary>The buffer will be mapped for writing.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeInvalidate">
            <summary>Discard the previous contents of the specified range.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeInvalidateBuffer">
            <summary>Discard the previous contents of the entire buffer.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeFlushExplicit">
            <summary>Indicates that modifications are to be flushed explicitly via glFlushMappedBufferRange.</summary>
        </member>
        <member name="F:QtGui.QOpenGLBuffer.RangeAccessFlag.RangeUnsynchronized">
            <summary>Indicates that pending operations should not be synchronized before returning from mapRange().</summary>
        </member>
        <member name="T:QtGui.QOpenGLDebugMessage">
            <summary>
            <para>The QOpenGLDebugMessage class wraps an OpenGL debug
            message.</para>
            </summary>
            <remarks>
            <para>Debug messages are usually created by the OpenGL server and then
            read by OpenGL clients (either from the OpenGL internal debug log, or
            logged in real-time). A debug message has a textual representation, a
            vendor-specific numeric id, a source, a type and a severity.</para>
            <para>It's also possible for applications or third-party libraries and
            toolkits to create and insert messages in the debug log. In order to do so,
            you can use the createApplicationMessage() or the createThirdPartyMessage()
            static functions.</para>
            <para></para>
            <para>See also QOpenGLDebugLogger.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.#ctor">
            <summary>
            <para>Constructs a debug message with an empty message string, id set
            to 0, source set to InvalidSource, type set to InvalidType, and severity
            set to InvalidSeverity.</para>
            <para>Note: This constructor should not be used to create a debug
            message; instead, use the createApplicationMessage() or the
            createThirdPartyMessage() static functions.</para>
            <para>See also createApplicationMessage() and
            createThirdPartyMessage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.#ctor(QtGui.QOpenGLDebugMessage)">
            <summary>
            <para>Constructs a debug message as a copy of debugMessage.</para>
            <para>See also operator=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.Swap(QtGui.QOpenGLDebugMessage)">
            <summary>
            <para>Swaps the message debugMessage with this message. This operation
            is very fast and never fails.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.op_Equality(QtGui.QOpenGLDebugMessage,QtGui.QOpenGLDebugMessage)">
            <summary>
            <para>Returns true if this debug message is equal to debugMessage, or
            false otherwise. Two debugging messages are equal if they have the same
            textual message, the same id, the same source, the same type and the same
            severity.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.op_Inequality(QtGui.QOpenGLDebugMessage,QtGui.QOpenGLDebugMessage)">
            <summary>
            <para>Returns true if this message is different from debugMessage, or
            false otherwise.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.CreateApplicationMessage(System.String,System.UInt32,QtGui.QOpenGLDebugMessage.Severity,QtGui.QOpenGLDebugMessage.Type)">
            <summary>
            <para>Constructs and returns a debug message with text as its text, id
            as id, severity as severity, and type as type. The message source will be
            set to ApplicationSource.</para>
            <para>See also QOpenGLDebugLogger::logMessage() and
            createThirdPartyMessage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugMessage.CreateThirdPartyMessage(System.String,System.UInt32,QtGui.QOpenGLDebugMessage.Severity,QtGui.QOpenGLDebugMessage.Type)">
            <summary>
            <para>Constructs and returns a debug message with text as its text, id
            as id, severity as severity, and type as type. The message source will be
            set to ThirdPartySource.</para>
            <para>See also QOpenGLDebugLogger::logMessage() and
            createApplicationMessage().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugMessage.source">
            <summary>
            <para>Returns the source of the debug message.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugMessage.type">
            <summary>
            <para>Returns the type of the debug message.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugMessage.severity">
            <summary>
            <para>Returns the severity of the debug message.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugMessage.Id">
            <summary>
            <para>Returns the id of the debug message. Ids are generally
            vendor-specific.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugMessage.Message">
            <summary>
            <para>Returns the textual message contained by this debug
            message.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLDebugMessage.Source">
            <summary>
            <para>The Source enum defines the source of the debug message.</para>
            <para>The Sources type is a typedef for QFlags&lt;Source&gt;. It stores
            an OR combination of Source values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.InvalidSource">
            <summary>The source of the message is invalid; this is the source of a default-constructed QOpenGLDebugMessage object.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.APISource">
            <summary>The message was generated in response to OpenGL API calls.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.WindowSystemSource">
            <summary>The message was generated by the window system.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.ShaderCompilerSource">
            <summary>The message was generated by the shader compiler.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.ThirdPartySource">
            <summary>The message was generated by a third party, for instance an OpenGL framework a or debugging toolkit.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.ApplicationSource">
            <summary>The message was generated by the application itself.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.OtherSource">
            <summary>The message was generated by a source not included in this enumeration.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Source.AnySource">
            <summary>This value corresponds to a mask of all possible message sources.</summary>
        </member>
        <member name="T:QtGui.QOpenGLDebugMessage.Type">
            <summary>
            <para>The Type enum defines the type of the debug message.</para>
            <para>The Types type is a typedef for QFlags&lt;Type&gt;. It stores an
            OR combination of Type values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.InvalidType">
            <summary>The type of the message is invalid; this is the type of a default-constructed QOpenGLDebugMessage object.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.ErrorType">
            <summary>The message represents an error.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.DeprecatedBehaviorType">
            <summary>The message represents an usage of deprecated behavior.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.UndefinedBehaviorType">
            <summary>The message represents an usage of undefined behavior.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.PortabilityType">
            <summary>The message represents an usage of vendor-specific behavior, that might pose portability concerns.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.PerformanceType">
            <summary>The message represents a performance issue.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.OtherType">
            <summary>The message represents a type not included in this enumeration.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.MarkerType">
            <summary>The message represents a marker in the debug log.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.GroupPushType">
            <summary>The message represents a debug group push operation.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.GroupPopType">
            <summary>The message represents a debug group pop operation.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Type.AnyType">
            <summary>This value corresponds to a mask of all possible message types.</summary>
        </member>
        <member name="T:QtGui.QOpenGLDebugMessage.Severity">
            <summary>
            <para>The Severity enum defines the severity of the debug
            message.</para>
            <para>The Severities type is a typedef for QFlags&lt;Severity&gt;. It
            stores an OR combination of Severity values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.InvalidSeverity">
            <summary>The severity of the message is invalid; this is the severity of a default-constructed QOpenGLDebugMessage object.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.HighSeverity">
            <summary>The message has a high severity.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.MediumSeverity">
            <summary>The message has a medium severity.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.LowSeverity">
            <summary>The message has a low severity.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.NotificationSeverity">
            <summary>The message is a notification.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugMessage.Severity.AnySeverity">
            <summary>This value corresponds to a mask of all possible message severities.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtGui.QOpenGLDebugLogger" -->
        <member name="M:QtGui.QOpenGLDebugLogger.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new logger object with the given parent.</para>
            <para>Note: The object must be initialized before logging can
            happen.</para>
            <para>See also initialize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.Initialize">
            <summary>
            <para>Initializes the object in the current OpenGL context. The context
            must support the GL_KHR_debug extension for the initialization to succeed.
            The object must be initialized before any logging can happen.</para>
            <para>It is safe to call this function multiple times from the same
            context.</para>
            <para>This function can also be used to change the context of a
            previously initialized object; note that in this case the object must not
            be logging when you call this function.</para>
            <para>Returns true if the logger is successfully initialized; false
            otherwise.</para>
            <para>See also QOpenGLContext.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.PushGroup(System.String,System.UInt32,QtGui.QOpenGLDebugMessage.Source)">
            <summary>
            <para>Pushes a debug group with name name, id id, and source source
            onto the debug groups stack. If the group is successfully pushed, OpenGL
            will automatically log a message with message name, id id, source source,
            type QOpenGLDebugMessage::GroupPushType and severity
            QOpenGLDebugMessage::NotificationSeverity.</para>
            <para>The newly pushed group will inherit the same filtering settings
            of the group that was on the top of the stack; that is, the filtering will
            not be changed by pushing a new group.</para>
            <para>Note: The source must either be
            QOpenGLDebugMessage::ApplicationSource or
            QOpenGLDebugMessage::ThirdPartySource, otherwise the group will not be
            pushed.</para>
            <para>Note: The object must be initialized before managing debug
            groups.</para>
            <para>See also popGroup(), enableMessages(), and
            disableMessages().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.PopGroup">
            <summary>
            <para>Pops the topmost debug group from the debug groups stack. If the
            group is successfully popped, OpenGL will automatically log a message with
            message, id and source matching those of the popped group, type
            QOpenGLDebugMessage::GroupPopType and severity
            QOpenGLDebugMessage::NotificationSeverity.</para>
            <para>Popping a debug group will restore the message filtering settings
            of the group that becomes the top of the debug groups stack.</para>
            <para>Note: The object must be initialized before managing debug
            groups.</para>
            <para>See also pushGroup().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.EnableMessages(QtGui.QOpenGLDebugMessage.Source,QtGui.QOpenGLDebugMessage.Type,QtGui.QOpenGLDebugMessage.Severity)">
            <summary>
            <para>Enables the logging of messages from the given sources, of the
            given types and with the given severities and any message id.</para>
            <para>The logging will be enabled in the current control group.</para>
            <para>See also disableMessages(), pushGroup(), and popGroup().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.DisableMessages(QtGui.QOpenGLDebugMessage.Source,QtGui.QOpenGLDebugMessage.Type,QtGui.QOpenGLDebugMessage.Severity)">
            <summary>
            <para>Disables the logging of messages with the given sources, of the
            given types and with the given severities and any message id.</para>
            <para>The logging will be disabled in the current control group.</para>
            <para>See also enableMessages(), pushGroup(), and popGroup().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.LogMessage(QtGui.QOpenGLDebugMessage)">
            <summary>
            <para>Inserts the message debugMessage into the OpenGL debug log. This
            provides a way for applications or libraries to insert custom messages that
            can ease the debugging of OpenGL applications.</para>
            <para>Note: debugMessage must have
            QOpenGLDebugMessage::ApplicationSource or
            QOpenGLDebugMessage::ThirdPartySource as its source, and a valid type and
            severity, otherwise it will not be inserted into the log.</para>
            <para>Note: The object must be initialized before logging can
            happen.</para>
            <para>See also initialize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.StartLogging(QtGui.QOpenGLDebugLogger.LoggingMode)">
            <summary>
            <para>Starts logging messages coming from the OpenGL server. When a new
            message is received, the signal messageLogged() is emitted, carrying the
            logged message as argument.</para>
            <para>loggingMode specifies whether the logging must be asynchronous
            (the default) or synchronous.</para>
            <para>QOpenGLDebugLogger will record the values of GL_DEBUG_OUTPUT and
            GL_DEBUG_OUTPUT_SYNCHRONOUS when logging is started, and set them back when
            logging is stopped. Moreover, any user-defined OpenGL debug callback
            installed when this function is invoked will be restored when logging is
            stopped; QOpenGLDebugLogger will ensure that the pre-existing callback will
            still be invoked when logging.</para>
            <para>Note: It's not possible to change the logging mode without
            stopping and starting logging again. This might change in a future version
            of Qt.</para>
            <para>Note: The object must be initialized before logging can
            happen.</para>
            <para>See also stopLogging() and initialize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLDebugLogger.StopLogging">
            <summary>
            <para>Stops logging messages from the OpenGL server.</para>
            <para>See also startLogging().</para>
            </summary>
        </member>
        <member name="E:QtGui.QOpenGLDebugLogger.MessageLogged">
            <summary>
            <para>This signal is emitted when a debug message (wrapped by the debugMessage argument) is logged from the OpenGL server.</para>
            <para>Depending on the OpenGL implementation, this signal can be emitted from other threads than the one(s) the receiver(s) lives in, and even different from the thread the QOpenGLContext in which this object has been initialized lives in. Moreover, the signal could be emitted from multiple threads at the same time. This is normally not a problem, as Qt will utilize a queued connection for cross-thread signal emissions, but if you force the connection type to Direct then you must be aware of the potential races in the slots connected to this signal.</para>
            <para>If logging have been started in SynchronousLogging mode, OpenGL guarantees that this signal will be emitted from the same thread the QOpenGLContext has been bound to, and no concurrent invocations will ever happen.</para>
            <para>Note: Logging must have been started, or this signal will not be emitted.</para>
            <para>See also startLogging().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugLogger.IsLogging">
            <summary>
            <para>Returns true if this object is currently logging, false
            otherwise.</para>
            <para>See also startLogging().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugLogger.loggingMode">
            <summary>
            <para>This property holds the logging mode passed to
            startLogging().</para>
            <para>Note that logging must have been started or the value of this
            property will be meaningless.</para>
            <para>See also startLogging() and isLogging().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLDebugLogger.MaximumMessageLength">
            <summary>
            <para>Returns the maximum supported length, in bytes, for the text of
            the messages passed to logMessage(). This is also the maximum length of a
            debug group name, as pushing or popping groups will automatically log a
            message with the debug group name as the message text.</para>
            <para>If a message text is too long, it will be automatically truncated
            by QOpenGLDebugLogger.</para>
            <para>Note: Message texts are encoded in UTF-8 when they get passed to
            OpenGL, so their size in bytes does not usually match the amount of UTF-16
            code units, as returned f.i. by QString::length(). (It does if the message
            contains 7-bit ASCII only data, which is typical for debug
            messages.)</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLDebugLogger.LoggingMode">
            <summary>
            <para>The LoggingMode enum defines the logging mode of the logger
            object.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugLogger.LoggingMode.AsynchronousLogging">
            <summary>Messages from the OpenGL server are logged asynchronously. This means that messages can be logged some time after the corresponding OpenGL actions that caused them, and even be received in an out-of-order fashion, depending on the OpenGL implementation. This mode has a very low performance penalty, as OpenGL implementations are heavily threaded and asynchronous by nature.</summary>
        </member>
        <member name="F:QtGui.QOpenGLDebugLogger.LoggingMode.SynchronousLogging">
            <summary>Messages from the OpenGL server are logged synchronously and sequentially. This has a severe performance hit, as OpenGL implementations are very asynchronous by nature; but it's very useful to debug OpenGL problems, as OpenGL guarantees that the messages generated by a OpenGL command will be logged before the corresponding command execution has returned. Therefore, you can install a breakpoint on the messageLogged() signal and see in the backtrace which OpenGL command caused it; the only caveat is that if you are using OpenGL from multiple threads you may need to force direct connection when connecting to the messageLogged() signal.</summary>
        </member>
        <member name="T:QtGui.QOpenGLFramebufferObject">
            <summary>
            <para>The QOpenGLFramebufferObject class encapsulates an OpenGL
            framebuffer object.</para>
            </summary>
            <remarks>
            <para>The QOpenGLFramebufferObject class encapsulates an OpenGL
            framebuffer object, defined by the GL_EXT_framebuffer_object extension. It
            provides a rendering surface that can be painted on with a QPainter with
            the help of QOpenGLPaintDevice, or rendered to using native OpenGL calls.
            This surface can be bound and used as a regular texture in your own OpenGL
            drawing code. By default, the QOpenGLFramebufferObject class generates a 2D
            OpenGL texture (using the GL_TEXTURE_2D target), which is used as the
            internal rendering target.</para>
            <para>It is important to have a current OpenGL context when creating a
            QOpenGLFramebufferObject, otherwise initialization will fail.</para>
            <para>Create the QOpenGLFrameBufferObject instance with the
            CombinedDepthStencil attachment if you want QPainter to render correctly.
            Note that you need to create a QOpenGLFramebufferObject with more than one
            sample per pixel for primitives to be antialiased when drawing using a
            QPainter. To create a multisample framebuffer object you should use one of
            the constructors that take a QOpenGLFramebufferObjectFormat parameter, and
            set the QOpenGLFramebufferObjectFormat::samples() property to a non-zero
            value.</para>
            <para>For multisample framebuffer objects a color render buffer is
            created, otherwise a texture with the specified texture target is created.
            The color render buffer or texture will have the specified internal format,
            and will be bound to the GL_COLOR_ATTACHMENT0 attachment in the framebuffer
            object.</para>
            <para>If you want to use a framebuffer object with multisampling
            enabled as a texture, you first need to copy from it to a regular
            framebuffer object using QOpenGLContext::blitFramebuffer().</para>
            <para>It is possible to draw into a QOpenGLFramebufferObject using
            QPainter and QOpenGLPaintDevice in a separate thread.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(QtCore.QSize,System.UInt32)">
            <summary>
            <para>Constructs an OpenGL framebuffer object and binds a 2D OpenGL
            texture to the buffer of the size size. The texture is bound to the
            GL_COLOR_ATTACHMENT0 target in the framebuffer object.</para>
            <para>The target parameter is used to specify the OpenGL texture
            target. The default target is GL_TEXTURE_2D. Keep in mind that
            GL_TEXTURE_2D textures must have a power of 2 width and height (e.g.
            256x512), unless you are using OpenGL 2.0 or higher.</para>
            <para>By default, no depth and stencil buffers are attached. This
            behavior can be toggled using one of the overloaded constructors.</para>
            <para>The default internal texture format is GL_RGBA8 for desktop
            OpenGL, and GL_RGBA for OpenGL/ES.</para>
            <para>It is important that you have a current OpenGL context set when
            creating the QOpenGLFramebufferObject, otherwise the initialization will
            fail.</para>
            <para>See also size(), texture(), and attachment().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(System.Int32,System.Int32,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs an OpenGL framebuffer object and binds a 2D OpenGL
            texture to the buffer of the given width and height.</para>
            <para>See also size() and texture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(QtCore.QSize,QtGui.QOpenGLFramebufferObject.Attachment,System.UInt32,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs an OpenGL framebuffer object and binds a texture to
            the buffer of the given size.</para>
            <para>The attachment parameter describes the depth/stencil buffer
            configuration, target the texture target and internal_format the internal
            texture format. The default texture target is GL_TEXTURE_2D, while the
            default internal format is GL_RGBA8 for desktop OpenGL and GL_RGBA for
            OpenGL/ES.</para>
            <para>See also size(), texture(), and attachment().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(System.Int32,System.Int32,QtGui.QOpenGLFramebufferObject.Attachment,System.UInt32,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs an OpenGL framebuffer object and binds a texture to
            the buffer of the given width and height.</para>
            <para>The attachment parameter describes the depth/stencil buffer
            configuration, target the texture target and internal_format the internal
            texture format. The default texture target is GL_TEXTURE_2D, while the
            default internal format is GL_RGBA8 for desktop OpenGL and GL_RGBA for
            OpenGL/ES.</para>
            <para>See also size(), texture(), and attachment().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(QtCore.QSize,QtGui.QOpenGLFramebufferObjectFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs an OpenGL framebuffer object of the given size based
            on the supplied format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.#ctor(System.Int32,System.Int32,QtGui.QOpenGLFramebufferObjectFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Constructs an OpenGL framebuffer object of the given width and
            height based on the supplied format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.Bind">
            <summary>
            <para>Switches rendering from the default, windowing system provided
            framebuffer to this framebuffer object. Returns true upon success, false
            otherwise.</para>
            <para>Note: If takeTexture() was called, a new texture is created and
            associated with the framebuffer object. This is potentially expensive and
            changes the context state (the currently bound texture).</para>
            <para>See also release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.TakeTexture">
            <summary>
            <para>Returns the texture id for the texture attached to this
            framebuffer object. The ownership of the texture is transferred to the
            caller.</para>
            <para>If the framebuffer object is currently bound, an implicit
            release() will be done. During the next call to bind() a new texture will
            be created.</para>
            <para>If a multisample framebuffer object is used, then there is no
            texture and the return value from this function will be invalid. Similarly,
            incomplete framebuffer objects will also return 0.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also texture(), bind(), and release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.ToImage">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the contents of this framebuffer object as a QImage. This
            method flips the image from OpenGL coordinates to raster
            coordinates.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.ToImage(System.Boolean)">
            <summary>
            <para>Returns the contents of this framebuffer object as a
            QImage.</para>
            <para>If flipped is true the image is flipped from OpenGL coordinates
            to raster coordinates. If used together with QOpenGLPaintDevice, flipped
            should be the opposite of the value of
            QOpenGLPaintDevice::paintFlipped().</para>
            <para>The returned image has a format of premultiplied ARGB32 or RGB32.
            The latter is used only when internalTextureFormat() is set to
            GL_RGB.</para>
            <para>If the rendering in the framebuffer was not done with
            premultiplied alpha in mind, create a wrapper QImage with a
            non-premultiplied format. This is necessary before performing operations
            like QImage::save() because otherwise the image data would get
            unpremultiplied, even though it was not premultiplied in the first place.
            To create such a wrapper without performing a copy of the pixel data, do
            the following:</para>
            <para>QImage fboImage(fbo.toImage());</para>
            <para>QImage image(fboImage.constBits(), fboImage.width(),
            fboImage.height(), QImage::Format_ARGB32);</para>
            <para>Since Qt 5.2 the function will fall back to premultiplied
            RGBA8888 or RGBx8888 when reading to (A)RGB32 is not supported. Since 5.4
            an A2BGR30 image is returned if the internal format is RGB10_A2.</para>
            <para>For multisampled framebuffer objects the samples are resolved
            using the GL_EXT_framebuffer_blit extension. If the extension is not
            available, the contents of the returned image is undefined.</para>
            <para>For singlesampled framebuffers the contents is retrieved via
            glReadPixels. This is a potentially expensive and inefficient operation.
            Therefore it is recommended that this function is used as seldom as
            possible.</para>
            <para>See also QOpenGLPaintDevice::paintFlipped().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.BindDefault">
            <summary>
            <para>Switches rendering back to the default, windowing system provided
            framebuffer. Returns true upon success, false otherwise.</para>
            <para>See also bind() and release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.BlitFramebuffer(QtGui.QOpenGLFramebufferObject,QtCore.QRect,QtGui.QOpenGLFramebufferObject,QtCore.QRect,System.UInt32,System.UInt32)">
            <summary>
            <para>Blits from the sourceRect rectangle in the source framebuffer
            object to the targetRect rectangle in the target framebuffer object.</para>
            <para>If source or target is 0, the default framebuffer will be used
            instead of a framebuffer object as source or target respectively.</para>
            <para>This function will have no effect unless
            hasOpenGLFramebufferBlit() returns true.</para>
            <para>The buffers parameter should be a mask consisting of any
            combination of GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, and
            GL_STENCIL_BUFFER_BIT. Any buffer type that is not present both in the
            source and target buffers is ignored.</para>
            <para>The sourceRect and targetRect rectangles may have different
            sizes; in this case buffers should not contain GL_DEPTH_BUFFER_BIT or
            GL_STENCIL_BUFFER_BIT. The filter parameter should be set to GL_LINEAR or
            GL_NEAREST, and specifies whether linear or nearest interpolation should be
            used when scaling is performed.</para>
            <para>If source equals target a copy is performed within the same
            buffer. Results are undefined if the source and target rectangles overlap
            and have different sizes. The sizes must also be the same if any of the
            framebuffer objects are multisample framebuffers.</para>
            <para>Note: The scissor test will restrict the blit area if
            enabled.</para>
            <para>See also hasOpenGLFramebufferBlit().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObject.BlitFramebuffer(QtGui.QOpenGLFramebufferObject,QtGui.QOpenGLFramebufferObject,System.UInt32,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Convenience overload to blit between two framebuffer
            objects.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.attachment">
            <summary>
            <para>Returns the status of the depth and stencil buffers attached to
            this framebuffer object.</para>
            <para>See also setAttachment().</para>
            <para></para>
            <para>Sets the attachments of the framebuffer object to
            attachment.</para>
            <para>This can be used to free or reattach the depth and stencil buffer
            attachments as needed.</para>
            <para>Note: This function alters the current framebuffer
            binding.</para>
            <para>See also attachment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Format">
            <summary>
            <para>Returns the format of this framebuffer object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.IsValid">
            <summary>
            <para>Returns true if the framebuffer object is valid.</para>
            <para>The framebuffer can become invalid if the initialization process
            fails, the user attaches an invalid buffer to the framebuffer object, or a
            non-power of two width/height is specified as the texture size if the
            texture target is GL_TEXTURE_2D. The non-power of two limitation does not
            apply if the OpenGL version is 2.0 or higher, or if the
            GL_ARB_texture_non_power_of_two extension is present.</para>
            <para>The framebuffer can also become invalid if the QOpenGLContext
            that the framebuffer was created within is destroyed and there are no other
            shared contexts that can take over ownership of the framebuffer.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.IsBound">
            <summary>
            <para>Returns true if the framebuffer object is currently bound to the
            current context, otherwise false is returned.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Release">
            <summary>
            <para>Switches rendering back to the default, windowing system provided
            framebuffer. Returns true upon success, false otherwise.</para>
            <para>See also bind().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Width">
            <summary>
            <para>Returns the width of the framebuffer object attachments.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Height">
            <summary>
            <para>Returns the height of the framebuffer object attachments.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Texture">
            <summary>
            <para>Returns the texture id for the texture attached as the default
            rendering target in this framebuffer object. This texture id can be bound
            as a normal texture in your own OpenGL code.</para>
            <para>If a multisample framebuffer object is used then the value
            returned from this function will be invalid.</para>
            <para>See also takeTexture().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Size">
            <summary>
            <para>Returns the size of the texture attached to this framebuffer
            object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.Handle">
            <summary>
            <para>Returns the OpenGL framebuffer object handle for this framebuffer
            object (returned by the glGenFrameBuffersEXT() function). This handle can
            be used to attach new images or buffers to the framebuffer. The user is
            responsible for cleaning up and destroying these objects.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.HasOpenGLFramebufferObjects">
            <summary>
            <para>Returns true if the OpenGL GL_EXT_framebuffer_object extension is
            present on this system; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObject.HasOpenGLFramebufferBlit">
            <summary>
            <para>Returns true if the OpenGL GL_EXT_framebuffer_blit extension is
            present on this system; otherwise returns false.</para>
            <para>See also blitFramebuffer().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLFramebufferObject.Attachment">
            <summary>
            <para>This enum type is used to configure the depth and stencil buffers
            attached to the framebuffer object when it is created.</para>
            <para>See also attachment().</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLFramebufferObject.Attachment.NoAttachment">
            <summary>No attachment is added to the framebuffer object. Note that the OpenGL depth and stencil tests won't work when rendering to a framebuffer object without any depth or stencil buffers. This is the default value.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFramebufferObject.Attachment.CombinedDepthStencil">
            <summary>If the GL_EXT_packed_depth_stencil extension is present, a combined depth and stencil buffer is attached. If the extension is not present, only a depth buffer is attached.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFramebufferObject.Attachment.Depth">
            <summary>A depth buffer is attached to the framebuffer object.</summary>
        </member>
        <member name="T:QtGui.QOpenGLFramebufferObjectFormat">
            <summary>
            <para>The QOpenGLFramebufferObjectFormat class specifies the format of
            an OpenGL framebuffer object.</para>
            </summary>
            <remarks>
            <para>A framebuffer object has several characteristics:</para>
            <para></para>
            <para>Number of samples per pixels.</para>
            <para>Depth and/or stencil attachments.</para>
            <para>Texture target.</para>
            <para>Internal texture format.</para>
            <para></para>
            <para>Note that the desired attachments or number of samples per pixels
            might not be supported by the hardware driver. Call
            QOpenGLFramebufferObject::format() after creating a
            QOpenGLFramebufferObject to find the exact format that was used to create
            the frame buffer object.</para>
            <para></para>
            <para>See also QOpenGLFramebufferObject.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObjectFormat.#ctor">
            <summary>
            <para>Creates a QOpenGLFramebufferObjectFormat object for specifying
            the format of an OpenGL framebuffer object.</para>
            <para>By default the format specifies a non-multisample framebuffer
            object with no attachments, texture target GL_TEXTURE_2D, and internal
            format GL_RGBA8. On OpenGL/ES systems, the default internal format is
            GL_RGBA.</para>
            <para>See also samples(), attachment(), and
            internalTextureFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObjectFormat.#ctor(QtGui.QOpenGLFramebufferObjectFormat)">
            <summary>
            <para>Constructs a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObjectFormat.op_Equality(QtGui.QOpenGLFramebufferObjectFormat,QtGui.QOpenGLFramebufferObjectFormat)">
            <summary>
            <para>Returns true if all the options of this framebuffer object format
            are the same as other; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFramebufferObjectFormat.op_Inequality(QtGui.QOpenGLFramebufferObjectFormat,QtGui.QOpenGLFramebufferObjectFormat)">
            <summary>
            <para>Returns false if all the options of this framebuffer object
            format are the same as other; otherwise returns true.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObjectFormat.Samples">
            <summary>
            <para>Returns the number of samples per pixel if a framebuffer object
            is a multisample framebuffer object. Otherwise, returns 0. The default
            value is 0.</para>
            <para>See also setSamples().</para>
            <para></para>
            <para>Sets the number of samples per pixel for a multisample
            framebuffer object to samples. The default sample count of 0 represents a
            regular non-multisample framebuffer object.</para>
            <para>If the desired amount of samples per pixel is not supported by
            the hardware then the maximum number of samples per pixel will be used.
            Note that multisample framebuffer objects can not be bound as textures.
            Also, the GL_EXT_framebuffer_multisample extension is required to create a
            framebuffer with more than one sample per pixel.</para>
            <para>See also samples().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObjectFormat.Mipmap">
            <summary>
            <para>Returns true if mipmapping is enabled.</para>
            <para>See also setMipmap().</para>
            <para></para>
            <para>Enables mipmapping if enabled is true; otherwise disables
            it.</para>
            <para>Mipmapping is disabled by default.</para>
            <para>If mipmapping is enabled, additional memory will be allocated for
            the mipmap levels. The mipmap levels can be updated by binding the texture
            and calling glGenerateMipmap(). Mipmapping cannot be enabled for
            multisampled framebuffer objects.</para>
            <para>See also mipmap() and QOpenGLFramebufferObject::texture().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObjectFormat.Attachment">
            <summary>
            <para>Returns the configuration of the depth and stencil buffers
            attached to a framebuffer object. The default is
            QOpenGLFramebufferObject::NoAttachment.</para>
            <para>See also setAttachment().</para>
            <para></para>
            <para>Sets the attachment configuration of a framebuffer object to
            attachment.</para>
            <para>See also attachment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObjectFormat.TextureTarget">
            <summary>
            <para>Returns the texture target of the texture attached to a
            framebuffer object. Ignored for multisample framebuffer objects. The
            default is GL_TEXTURE_2D.</para>
            <para>See also setTextureTarget() and samples().</para>
            <para></para>
            <para>Sets the texture target of the texture attached to a framebuffer
            object to target. Ignored for multisample framebuffer objects.</para>
            <para>See also textureTarget() and samples().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFramebufferObjectFormat.InternalTextureFormat">
            <summary>
            <para>Returns the internal format of a framebuffer object's texture or
            multisample framebuffer object's color buffer. The default is GL_RGBA8 on
            desktop OpenGL systems, and GL_RGBA on OpenGL/ES systems.</para>
            <para>See also setInternalTextureFormat().</para>
            <para></para>
            <para>Sets the internal format of a framebuffer object's texture or
            multisample framebuffer object's color buffer to
            internalTextureFormat.</para>
            <para>See also internalTextureFormat().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLFunctions">
            <summary>
            <para>The QOpenGLFunctions class provides cross-platform access to the
            OpenGL ES 2.0 API.</para>
            </summary>
            <remarks>
            <para>OpenGL ES 2.0 defines a subset of the OpenGL specification that
            is common across many desktop and embedded OpenGL implementations. However,
            it can be difficult to use the functions from that subset because they need
            to be resolved manually on desktop systems.</para>
            <para>QOpenGLFunctions provides a guaranteed API that is available on
            all OpenGL systems and takes care of function resolution on systems that
            need it. The recommended way to use QOpenGLFunctions is by direct
            inheritance:</para>
            <para>class MyGLWindow : public QWindow, protected
            QOpenGLFunctions</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>public:</para>
            <para>    MyGLWindow(QScreen *screen = 0);</para>
            <para></para>
            <para>protected:</para>
            <para>    void initializeGL();</para>
            <para>    void paintGL();</para>
            <para></para>
            <para>    QOpenGLContext *m_context;</para>
            <para>};</para>
            <para></para>
            <para>MyGLWindow(QScreen *screen)</para>
            <para>  : QWindow(screen), QOpenGLWidget(parent)</para>
            <para>{</para>
            <para>    setSurfaceType(OpenGLSurface);</para>
            <para>    create();</para>
            <para></para>
            <para>    // Create an OpenGL context</para>
            <para>    m_context = new QOpenGLContext;</para>
            <para>    m_context-&gt;create();</para>
            <para></para>
            <para>    // Setup scene and render it</para>
            <para>    initializeGL();</para>
            <para>    paintGL()</para>
            <para>}</para>
            <para></para>
            <para>void MyGLWindow::initializeGL()</para>
            <para>{</para>
            <para>    m_context-&gt;makeCurrent(this);</para>
            <para>    initializeOpenGLFunctions();</para>
            <para>}</para>
            <para>The paintGL() function can then use any of the OpenGL ES 2.0
            functions without explicit resolution, such as glActiveTexture() in the
            following example:</para>
            <para>void MyGLWindow::paintGL()</para>
            <para>{</para>
            <para>    m_context-&gt;makeCurrent(this);</para>
            <para>    glActiveTexture(GL_TEXTURE1);</para>
            <para>    glBindTexture(GL_TEXTURE_2D, textureId);</para>
            <para>    ...</para>
            <para>    m_context-&gt;swapBuffers(this);</para>
            <para>    m_context-&gt;doneCurrent();</para>
            <para>}</para>
            <para>QOpenGLFunctions can also be used directly for ad-hoc invocation
            of OpenGL ES 2.0 functions on all platforms:</para>
            <para>QOpenGLFunctions
            glFuncs(QOpenGLContext::currentContext());</para>
            <para>glFuncs.glActiveTexture(GL_TEXTURE1);</para>
            <para>An alternative approach is to query the context's associated
            QOpenGLFunctions instance. This is somewhat faster than the previous
            approach due to avoiding the creation of a new instance, but the difference
            is fairly small since the internal data structures are shared, and function
            resolving happens only once for a given context, regardless of the number
            of QOpenGLFunctions instances initialized for it.</para>
            <para>QOpenGLFunctions *glFuncs =
            QOpenGLContext::currentContext()-&gt;functions();</para>
            <para>glFuncs-&gt;glActiveTexture(GL_TEXTURE1);</para>
            <para>QOpenGLFunctions provides wrappers for all OpenGL ES 2.0
            functions, including the common subset of OpenGL 1.x and ES 2.0. While such
            functions, for example glClear() or glDrawArrays(), can be called also
            directly, as long as the application links to the platform-specific OpenGL
            library, calling them via QOpenGLFunctions enables the possibility of
            dynamically loading the OpenGL implementation.</para>
            <para>The hasOpenGLFeature() and openGLFeatures() functions can be used
            to determine if the OpenGL implementation has a major OpenGL ES 2.0
            feature. For example, the following checks if non power of two textures are
            available:</para>
            <para>QOpenGLFunctions funcs(QOpenGLContext::currentContext());</para>
            <para>bool npot =
            funcs.hasOpenGLFeature(QOpenGLFunctions::NPOTTextures);</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.#ctor">
            <summary>
            <para>Constructs a default function resolver. The resolver cannot be
            used until initializeOpenGLFunctions() is called to specify the
            context.</para>
            <para>See also initializeOpenGLFunctions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.#ctor(QtGui.QOpenGLContext)">
            <summary>
            <para>Constructs a function resolver for context. If context is null,
            then the resolver will be created for the current QOpenGLContext.</para>
            <para>The context or another context in the group must be
            current.</para>
            <para>An object constructed in this way can only be used with context
            and other contexts that share with it. Use initializeOpenGLFunctions() to
            change the object's context association.</para>
            <para>See also initializeOpenGLFunctions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.OpenGLFeatures">
            <summary>
            <para>Returns the set of features that are present on this system's
            OpenGL implementation.</para>
            <para>It is assumed that the QOpenGLContext associated with this
            function resolver is current.</para>
            <para>See also hasOpenGLFeature().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.HasOpenGLFeature(QtGui.QOpenGLFunctions.OpenGLFeature)">
            <summary>
            <para>Returns true if feature is present on this system's OpenGL
            implementation; false otherwise.</para>
            <para>It is assumed that the QOpenGLContext associated with this
            function resolver is current.</para>
            <para>See also openGLFeatures().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.InitializeOpenGLFunctions">
            <summary>
            <para>Initializes OpenGL function resolution for the current
            context.</para>
            <para>After calling this function, the QOpenGLFunctions object can only
            be used with the current context and other contexts that share with it.
            Call initializeOpenGLFunctions() again to change the object's context
            association.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBindTexture(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBindTexture(target,
            texture).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBindTexture().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBlendFunc(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBlendFunc(sfactor,
            dfactor).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBlendFunc().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlClear(System.UInt32)">
            <summary>
            <para>Convenience function that calls glClear(mask).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glClear().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlClearColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glClearColor(red, green, blue,
            alpha).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glClearColor().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlClearStencil(System.Int32)">
            <summary>
            <para>Convenience function that calls glClearStencil(s).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glClearStencil().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlColorMask(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            <para>Convenience function that calls glColorMask(red, green, blue,
            alpha).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glColorMask().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCopyTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glCopyTexImage2D(target, level,
            internalformat, x, y, width, height, border).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCopyTexImage2D().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCopyTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glCopyTexSubImage2D(target,
            level, xoffset, yoffset, x, y, width, height).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCopyTexSubImage2D().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCullFace(System.UInt32)">
            <summary>
            <para>Convenience function that calls glCullFace(mode).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCullFace().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteTextures(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glDeleteTextures(n,
            textures).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteTextures().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDepthFunc(System.UInt32)">
            <summary>
            <para>Convenience function that calls glDepthFunc(func).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDepthFunc().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDepthMask(System.Byte)">
            <summary>
            <para>Convenience function that calls glDepthMask(flag).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDepthMask().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDisable(System.UInt32)">
            <summary>
            <para>Convenience function that calls glDisable(cap).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDisable().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDrawArrays(System.UInt32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glDrawArrays(mode, first,
            count).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDrawArrays().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDrawElements(System.UInt32,System.Int32,System.UInt32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glDrawElements(mode, count, type,
            indices).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDrawElements().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlEnable(System.UInt32)">
            <summary>
            <para>Convenience function that calls glEnable(cap).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glEnable().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlFinish">
            <summary>
            <para>Convenience function that calls glFinish().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glFinish().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlFlush">
            <summary>
            <para>Convenience function that calls glFlush().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glFlush().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlFrontFace(System.UInt32)">
            <summary>
            <para>Convenience function that calls glFrontFace(mode).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glFrontFace().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGenTextures(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glGenTextures(n,
            textures).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGenTextures().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetBooleanv(System.UInt32,System.Byte*)">
            <summary>
            <para>Convenience function that calls glGetBooleanv(pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetBooleanv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetFloatv(System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glGetFloatv(pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetFloatv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetIntegerv(System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetIntegerv(pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetIntegerv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetString(System.UInt32)">
            <summary>
            <para>Convenience function that calls glGetString(name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetString().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetTexParameterfv(System.UInt32,System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glGetTexParameterfv(target,
            pname, params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetTexParameterfv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetTexParameteriv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetTexParameteriv(target,
            pname, params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetTexParameteriv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlHint(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glHint(target, mode).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glHint().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsEnabled(System.UInt32)">
            <summary>
            <para>Convenience function that calls glIsEnabled(cap).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsEnabled().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsTexture(System.UInt32)">
            <summary>
            <para>Convenience function that calls glIsTexture(texture).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsTexture().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlLineWidth(System.Single)">
            <summary>
            <para>Convenience function that calls glLineWidth(width).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glLineWidth().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlPixelStorei(System.UInt32,System.Int32)">
            <summary>
            <para>Convenience function that calls glPixelStorei(pname,
            param).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glPixelStorei().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlPolygonOffset(System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glPolygonOffset(factor,
            units).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glPolygonOffset().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlReadPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glReadPixels(x, y, width, height,
            format, type, pixels).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glReadPixels().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glScissor(x, y, width,
            height).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glScissor().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilFunc(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilFunc(func, ref,
            mask).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilFunc().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilMask(System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilMask(mask).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilMask().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilOp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilOp(fail, zfail,
            zpass).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilOp().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glTexImage2D(target, level,
            internalformat, width, height, border, format, type, pixels).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexImage2D().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexParameterf(System.UInt32,System.UInt32,System.Single)">
            <summary>
            <para>Convenience function that calls glTexParameterf(target, pname,
            param).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexParameterf().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexParameterfv(System.UInt32,System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glTexParameterfv(target, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexParameterfv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexParameteri(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            <para>Convenience function that calls glTexParameteri(target, pname,
            param).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexParameteri().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexParameteriv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glTexParameteriv(target, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexParameteriv().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glTexSubImage2D(target, level,
            xoffset, yoffset, width, height, format, type, pixels).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glTexSubImage2D().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glViewport(x, y, width,
            height).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glViewport().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlActiveTexture(System.UInt32)">
            <summary>
            <para>Convenience function that calls glActiveTexture(texture).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glActiveTexture().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlAttachShader(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glAttachShader(program,
            shader).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glAttachShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBindAttribLocation(System.UInt32,System.UInt32,System.String)">
            <summary>
            <para>Convenience function that calls glBindAttribLocation(program,
            index, name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBindAttribLocation().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBindBuffer(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBindBuffer(target,
            buffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBindBuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBindFramebuffer(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBindFramebuffer(target,
            framebuffer).</para>
            <para>Note that Qt will translate a framebuffer argument of 0 to the
            currently bound QOpenGLContext's defaultFramebufferObject().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBindFramebuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBindRenderbuffer(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBindRenderbuffer(target,
            renderbuffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBindRenderbuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBlendColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glBlendColor(red, green, blue,
            alpha).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBlendColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBlendEquation(System.UInt32)">
            <summary>
            <para>Convenience function that calls glBlendEquation(mode).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBlendEquation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBlendEquationSeparate(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBlendEquationSeparate(modeRGB,
            modeAlpha).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBlendEquationSeparate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBlendFuncSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBlendFuncSeparate(srcRGB,
            dstRGB, srcAlpha, dstAlpha).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBlendFuncSeparate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBufferData(System.UInt32,System.Int32,System.IntPtr,System.UInt32)">
            <summary>
            <para>Convenience function that calls glBufferData(target, size, data,
            usage).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBufferData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlBufferSubData(System.UInt32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glBufferSubData(target, offset,
            size, data).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glBufferSubData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCheckFramebufferStatus(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glCheckFramebufferStatus(target).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCheckFramebufferStatus().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlClearDepthf(System.Single)">
            <summary>
            <para>Convenience function that calls glClearDepth(depth) on desktop
            OpenGL systems and glClearDepthf(depth) on embedded OpenGL ES
            systems.</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glClearDepthf().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCompileShader(System.UInt32)">
            <summary>
            <para>Convenience function that calls glCompileShader(shader).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCompileShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCompressedTexImage2D(System.UInt32,System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glCompressedTexImage2D(target,
            level, internalformat, width, height, border, imageSize, data).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCompressedTexImage2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCompressedTexSubImage2D(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Int32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glCompressedTexSubImage2D(target,
            level, xoffset, yoffset, width, height, format, imageSize, data).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCompressedTexSubImage2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlCreateShader(System.UInt32)">
            <summary>
            <para>Convenience function that calls glCreateShader(type).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCreateShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteBuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glDeleteBuffers(n,
            buffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteBuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteFramebuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glDeleteFramebuffers(n,
            framebuffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteFramebuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteProgram(System.UInt32)">
            <summary>
            <para>Convenience function that calls glDeleteProgram(program).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteRenderbuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glDeleteRenderbuffers(n,
            renderbuffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteRenderbuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDeleteShader(System.UInt32)">
            <summary>
            <para>Convenience function that calls glDeleteShader(shader).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDeleteShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDepthRangef(System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glDepthRange(zNear, zFar) on
            desktop OpenGL systems and glDepthRangef(zNear, zFar) on embedded OpenGL ES
            systems.</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDepthRangef().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDetachShader(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glDetachShader(program,
            shader).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDetachShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlDisableVertexAttribArray(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glDisableVertexAttribArray(index).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glDisableVertexAttribArray().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlEnableVertexAttribArray(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glEnableVertexAttribArray(index).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glEnableVertexAttribArray().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlFramebufferRenderbuffer(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glFramebufferRenderbuffer(target,
            attachment, renderbuffertarget, renderbuffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glFramebufferRenderbuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlFramebufferTexture2D(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            <para>Convenience function that calls glFramebufferTexture2D(target,
            attachment, textarget, texture, level).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glFramebufferTexture2D().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGenBuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glGenBuffers(n, buffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGenBuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGenerateMipmap(System.UInt32)">
            <summary>
            <para>Convenience function that calls glGenerateMipmap(target).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGenerateMipmap().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGenFramebuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glGenFramebuffers(n,
            framebuffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGenFramebuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGenRenderbuffers(System.Int32,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glGenRenderbuffers(n,
            renderbuffers).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGenRenderbuffers().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetActiveAttrib(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Char*)">
            <summary>
            <para>Convenience function that calls glGetActiveAttrib(program, index,
            bufsize, length, size, type, name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetActiveAttrib().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetActiveUniform(System.UInt32,System.UInt32,System.Int32,System.Int32@,System.Int32@,System.UInt32@,System.Char*)">
            <summary>
            <para>Convenience function that calls glGetActiveUniform(program,
            index, bufsize, length, size, type, name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetActiveUniform().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetAttachedShaders(System.UInt32,System.Int32,System.Int32@,System.UInt32@)">
            <summary>
            <para>Convenience function that calls glGetAttachedShaders(program,
            maxcount, count, shaders).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetAttachedShaders().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetAttribLocation(System.UInt32,System.String)">
            <summary>
            <para>Convenience function that calls glGetAttribLocation(program,
            name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetAttribLocation().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetBufferParameteriv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetBufferParameteriv(target,
            pname, params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetBufferParameteriv().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetFramebufferAttachmentParameteriv(System.UInt32,System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls
            glGetFramebufferAttachmentParameteriv(target, attachment, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetFramebufferAttachmentParameteriv().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetProgramiv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetProgramiv(program, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetProgramiv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetProgramInfoLog(System.UInt32,System.Int32,System.Int32@,System.Char*)">
            <summary>
            <para>Convenience function that calls glGetProgramInfoLog(program,
            bufsize, length, infolog).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetProgramInfoLog().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetRenderbufferParameteriv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls
            glGetRenderbufferParameteriv(target, pname, params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetRenderbufferParameteriv().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetShaderiv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetShaderiv(shader, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetShaderiv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetShaderInfoLog(System.UInt32,System.Int32,System.Int32@,System.Char*)">
            <summary>
            <para>Convenience function that calls glGetShaderInfoLog(shader,
            bufsize, length, infolog).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetShaderInfoLog().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetShaderPrecisionFormat(System.UInt32,System.UInt32,System.Int32@,System.Int32@)">
            <summary>
            <para>Convenience function that calls
            glGetShaderPrecisionFormat(shadertype, precisiontype, range,
            precision).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetShaderPrecisionFormat().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetShaderSource(System.UInt32,System.Int32,System.Int32@,System.Char*)">
            <summary>
            <para>Convenience function that calls glGetShaderSource(shader,
            bufsize, length, source).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetShaderSource().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetUniformfv(System.UInt32,System.Int32,System.Single@)">
            <summary>
            <para>Convenience function that calls glGetUniformfv(program, location,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetUniformfv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetUniformiv(System.UInt32,System.Int32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetUniformiv(program, location,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetUniformiv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetUniformLocation(System.UInt32,System.String)">
            <summary>
            <para>Convenience function that calls glGetUniformLocation(program,
            name).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetUniformLocation().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetVertexAttribfv(System.UInt32,System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glGetVertexAttribfv(index, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetVertexAttribfv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetVertexAttribiv(System.UInt32,System.UInt32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glGetVertexAttribiv(index, pname,
            params).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetVertexAttribiv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlGetVertexAttribPointerv(System.UInt32,System.UInt32,System.Void**)">
            <summary>
            <para>Convenience function that calls glGetVertexAttribPointerv(index,
            pname, pointer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetVertexAttribPointerv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsBuffer(System.UInt32)">
            <summary>
            <para>Convenience function that calls glIsBuffer(buffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsBuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsFramebuffer(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glIsFramebuffer(framebuffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsFramebuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsProgram(System.UInt32)">
            <summary>
            <para>Convenience function that calls glIsProgram(program).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsRenderbuffer(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glIsRenderbuffer(renderbuffer).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsRenderbuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlIsShader(System.UInt32)">
            <summary>
            <para>Convenience function that calls glIsShader(shader).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glIsShader().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlLinkProgram(System.UInt32)">
            <summary>
            <para>Convenience function that calls glLinkProgram(program).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glLinkProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlReleaseShaderCompiler">
            <summary>
            <para>Convenience function that calls glReleaseShaderCompiler().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glReleaseShaderCompiler().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlRenderbufferStorage(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glRenderbufferStorage(target,
            internalformat, width, height).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glRenderbufferStorage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlSampleCoverage(System.Single,System.Byte)">
            <summary>
            <para>Convenience function that calls glSampleCoverage(value,
            invert).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glSampleCoverage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlShaderBinary(System.Int32,System.UInt32@,System.UInt32,System.IntPtr,System.Int32)">
            <summary>
            <para>Convenience function that calls glShaderBinary(n, shaders,
            binaryformat, binary, length).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glShaderBinary().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlShaderSource(System.UInt32,System.Int32,System.Char**,System.Int32@)">
            <summary>
            <para>Convenience function that calls glShaderSource(shader, count,
            string, length).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glShaderSource().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilFuncSeparate(System.UInt32,System.UInt32,System.Int32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilFuncSeparate(face, func,
            ref, mask).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilFuncSeparate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilMaskSeparate(System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilMaskSeparate(face,
            mask).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilMaskSeparate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlStencilOpSeparate(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para>Convenience function that calls glStencilOpSeparate(face, fail,
            zfail, zpass).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glStencilOpSeparate().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform1f(System.Int32,System.Single)">
            <summary>
            <para>Convenience function that calls glUniform1f(location, x).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform1f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform1fv(System.Int32,System.Int32,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniform1fv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform1fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform1i(System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glUniform1i(location, x).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform1i().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform1iv(System.Int32,System.Int32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glUniform1iv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform1iv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform2f(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glUniform2f(location, x,
            y).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform2f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform2fv(System.Int32,System.Int32,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniform2fv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform2fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform2i(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glUniform2i(location, x,
            y).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform2i().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform2iv(System.Int32,System.Int32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glUniform2iv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform2iv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform3f(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glUniform3f(location, x, y,
            z).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform3f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform3fv(System.Int32,System.Int32,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniform3fv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform3fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform3i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glUniform3i(location, x, y,
            z).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform3i().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform3iv(System.Int32,System.Int32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glUniform3iv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform3iv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform4f(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glUniform4f(location, x, y, z,
            w).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform4f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform4fv(System.Int32,System.Int32,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniform4fv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform4fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform4i(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Convenience function that calls glUniform4i(location, x, y, z,
            w).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform4i().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniform4iv(System.Int32,System.Int32,System.Int32@)">
            <summary>
            <para>Convenience function that calls glUniform4iv(location, count,
            v).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniform4iv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniformMatrix2fv(System.Int32,System.Int32,System.Byte,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniformMatrix2fv(location,
            count, transpose, value).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniformMatrix2fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniformMatrix3fv(System.Int32,System.Int32,System.Byte,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniformMatrix3fv(location,
            count, transpose, value).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniformMatrix3fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUniformMatrix4fv(System.Int32,System.Int32,System.Byte,System.Single@)">
            <summary>
            <para>Convenience function that calls glUniformMatrix4fv(location,
            count, transpose, value).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUniformMatrix4fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlUseProgram(System.UInt32)">
            <summary>
            <para>Convenience function that calls glUseProgram(program).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glUseProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlValidateProgram(System.UInt32)">
            <summary>
            <para>Convenience function that calls
            glValidateProgram(program).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glValidateProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib1f(System.UInt32,System.Single)">
            <summary>
            <para>Convenience function that calls glVertexAttrib1f(indx, x).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib1f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib1fv(System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glVertexAttrib1fv(indx,
            values).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib1fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib2f(System.UInt32,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glVertexAttrib2f(indx, x,
            y).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib2f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib2fv(System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glVertexAttrib2fv(indx,
            values).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib2fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib3f(System.UInt32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glVertexAttrib3f(indx, x, y,
            z).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib3f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib3fv(System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glVertexAttrib3fv(indx,
            values).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib3fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib4f(System.UInt32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Convenience function that calls glVertexAttrib4f(indx, x, y, z,
            w).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib4f().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttrib4fv(System.UInt32,System.Single@)">
            <summary>
            <para>Convenience function that calls glVertexAttrib4fv(indx,
            values).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttrib4fv().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLFunctions.GlVertexAttribPointer(System.UInt32,System.Int32,System.UInt32,System.Byte,System.Int32,System.IntPtr)">
            <summary>
            <para>Convenience function that calls glVertexAttribPointer(indx, size,
            type, normalized, stride, ptr).</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glVertexAttribPointer().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFunctions.GlGetError">
            <summary>
            <para>Convenience function that calls glGetError().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glGetError().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLFunctions.GlCreateProgram">
            <summary>
            <para>Convenience function that calls glCreateProgram().</para>
            <para>For more information, see the OpenGL ES 2.0 documentation for
            glCreateProgram().</para>
            <para>This convenience function will do nothing on OpenGL ES 1.x
            systems.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLFunctions.OpenGLFeature">
            <summary>
            <para>This enum defines OpenGL and OpenGL ES features whose presence
            may depend on the implementation.</para>
            <para>The OpenGLFeatures type is a typedef for
            QFlags&lt;OpenGLFeature&gt;. It stores an OR combination of OpenGLFeature
            values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.Multitexture">
            <summary>glActiveTexture() function is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.Shaders">
            <summary>Shader functions are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.Buffers">
            <summary>Vertex and index buffer functions are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.Framebuffers">
            <summary>Framebuffer object functions are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.BlendColor">
            <summary>glBlendColor() is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.BlendEquation">
            <summary>glBlendEquation() is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.BlendEquationSeparate">
            <summary>glBlendEquationSeparate() is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.BlendFuncSeparate">
            <summary>glBlendFuncSeparate() is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.BlendSubtract">
            <summary>Blend subtract mode is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.CompressedTextures">
            <summary>Compressed texture functions are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.Multisample">
            <summary>glSampleCoverage() function is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.StencilSeparate">
            <summary>Separate stencil functions are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.NPOTTextures">
            <summary>Non power of two textures are available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.NPOTTextureRepeat">
            <summary>Non power of two textures can use GL_REPEAT as wrap parameter.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.FixedFunctionPipeline">
            <summary>The fixed function pipeline is available.</summary>
        </member>
        <member name="F:QtGui.QOpenGLFunctions.OpenGLFeature.TextureRGFormats">
            <summary>The GL_RED and GL_RG texture formats are available.</summary>
        </member>
        <member name="T:QtGui.QOpenGLPaintDevice">
            <summary>
            <para>The QOpenGLPaintDevice class enables painting to an OpenGL
            context using QPainter.</para>
            </summary>
            <remarks>
            <para>The QOpenGLPaintDevice uses the current QOpenGL context to render
            QPainter draw commands. The context is captured upon construction. It
            requires support for OpenGL (ES) 2.0 or higher.</para>
            <para></para>
            <para>Performance</para>
            <para>The QOpenGLPaintDevice is almost always hardware accelerated and
            has the potential of being much faster than software rasterization.
            However, it is more sensitive to state changes, and therefore requires the
            drawing commands to be carefully ordered to achieve optimal
            performance.</para>
            <para></para>
            <para>Antialiasing and Quality</para>
            <para>Antialiasing in the OpenGL paint engine is done using
            multisampling. Most hardware require significantly more memory to do
            multisampling and the resulting quality is not on par with the quality of
            the software paint engine. The OpenGL paint engine's strength lies in its
            performance, not its visual rendering quality.</para>
            <para></para>
            <para>State Changes</para>
            <para>When painting to a QOpenGLPaintDevice using QPainter, the state
            of the current OpenGL context will be altered by the paint engine to
            reflect its needs. Applications should not rely upon the OpenGL state being
            reset to its original conditions, particularly the current shader program,
            OpenGL viewport, texture units, and drawing modes.</para>
            <para></para>
            <para>Mixing QPainter and OpenGL</para>
            <para>When intermixing QPainter and OpenGL, it is important to notify
            QPainter that the OpenGL state may have been cluttered so it can restore
            its internal state. This is acheived by calling
            QPainter::beginNativePainting() before starting the OpenGL rendering and
            calling QPainter::endNativePainting() after finishing.</para>
            <para></para>
            <para>See also OpenGL Window Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.#ctor">
            <summary>
            <para>Constructs a QOpenGLPaintDevice.</para>
            <para>The QOpenGLPaintDevice is only valid for the current
            context.</para>
            <para>See also QOpenGLContext::currentContext().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.#ctor(QtCore.QSize)">
            <summary>
            <para>Constructs a QOpenGLPaintDevice with the given size.</para>
            <para>The QOpenGLPaintDevice is only valid for the current
            context.</para>
            <para>See also QOpenGLContext::currentContext().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Constructs a QOpenGLPaintDevice with the given width and
            height.</para>
            <para>The QOpenGLPaintDevice is only valid for the current
            context.</para>
            <para>See also QOpenGLContext::currentContext().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.SetDevicePixelRatio(System.Double)">
            <summary>
            <para>Sets the device pixel ratio for the paint device to
            devicePixelRatio.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.EnsureActiveTarget">
            <summary>
            <para>This virtual method is provided as a callback to allow re-binding
            a target frame buffer object or context when different QOpenGLPaintDevice
            instances are issuing draw calls alternately.</para>
            <para>beginNativePainting() will also trigger this method.</para>
            <para>The default implementation does nothing.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPaintDevice.Metric(QtGui.QPaintDevice.PaintDeviceMetric)">
            <summary>
            <para>Reimplemented from QPaintDevice::metric().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.Size">
            <summary>
            <para>Returns the pixel size of the paint device.</para>
            <para>See also setSize().</para>
            <para></para>
            <para>Sets the pixel size of the paint device to size.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.DotsPerMeterX">
            <summary>
            <para>Returns the number of pixels per meter horizontally.</para>
            <para>See also setDotsPerMeterX().</para>
            <para></para>
            <para>Sets the number of pixels per meter horizontally to dpmx.</para>
            <para>See also dotsPerMeterX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.DotsPerMeterY">
            <summary>
            <para>Returns the number of pixels per meter vertically.</para>
            <para>See also setDotsPerMeterY().</para>
            <para></para>
            <para>Sets the number of pixels per meter vertically to dpmy.</para>
            <para>See also dotsPerMeterY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.PaintFlipped">
            <summary>
            <para>Returns true if painting is flipped around the Y-axis.</para>
            <para>See also setPaintFlipped().</para>
            <para></para>
            <para>Sets whether painting should be flipped around the Y-axis or not
            to flipped.</para>
            <para>See also paintFlipped().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.PaintEngine">
            <summary>
            <para>Reimplemented from QPaintDevice::paintEngine().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPaintDevice.Context">
            <summary>
            <para>Returns the OpenGL context associated with the paint
            device.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLPixelTransferOptions">
            <summary>
            <para>The QOpenGLPixelTransferOptions class describes the pixel storage
            modes that affect the unpacking of pixels during texture upload.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPixelTransferOptions.#ctor">
            <summary>
            <para>Constructs a new QOpenGLPixelTransferOptions instance with the
            default settings.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLPixelTransferOptions.SetLeastSignificantByteFirst(System.Boolean)">
            <summary>
            <para>lsbFirst specifies if bits within a byte are ordered from least
            to most significat. The default value is false, meaning that the first bit
            in each byte is the most significant one. This is significant for bitmap
            data only. Corresponds to GL_UNPACK_LSB_FIRST.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.Alignment">
            <summary>
            <para>Returns the current alignment requirement for each pixel
            row.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the alignment requirements for each pixel row. Corresponds
            to GL_UNPACK_ALIGNMENT. The default value is 4, as specified by
            OpenGL.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.SkipImages">
            <summary>
            <para>Returns the number of images that are skipped.</para>
            <para>See also setSkipImages().</para>
            <para></para>
            <para>Sets the number of images that are skipped to skipImages.
            Corresponds to GL_UNPACK_SKIP_IMAGES. Equivalent to incrementing the
            pointer passed to QOpenGLTexture::setData(). The default value is 0.</para>
            <para>See also skipImages().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.SkipRows">
            <summary>
            <para>Returns the number of rows that are skipped.</para>
            <para>See also setSkipRows().</para>
            <para></para>
            <para>Sets the number of rows that are skipped to skipRows. Corresponds
            to GL_UNPACK_SKIP_ROWS. Equivalent to incrementing the pointer passed to
            QOpenGLTexture::setData(). The default value is 0.</para>
            <para>See also skipRows().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.SkipPixels">
            <summary>
            <para>Returns the number of pixels that are skipped.</para>
            <para>See also setSkipPixels().</para>
            <para></para>
            <para>Sets the number of pixels that are skipped to skipPixels.
            Corresponds to GL_UNPACK_SKIP_PIXELS. Equivalent to incrementing the
            pointer passed to QOpenGLTexture::setData(). The default value is 0.</para>
            <para>See also skipPixels().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.ImageHeight">
            <summary>
            <para>Returns the currently set image height.</para>
            <para>See also setImageHeight().</para>
            <para></para>
            <para>Sets the image height for 3D textures to imageHeight. Corresponds
            to GL_UNPACK_IMAGE_HEIGHT. The default value is 0.</para>
            <para>See also imageHeight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.RowLength">
            <summary>
            <para>Returns the currently set row length.</para>
            <para>See also setRowLength().</para>
            <para></para>
            <para>Sets the number of pixels in a row to rowLength. Corresponds to
            GL_UNPACK_ROW_LENGTH. The default value is 0.</para>
            <para>See also rowLength().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.SwapBytesEnabled">
            <summary>
            <para>Returns true if the byte ordering for multibyte components is
            reversed.</para>
            <para></para>
            <para>swapBytes specifies if the byte ordering for multibyte components
            is reversed. The default value is false. Corresponds to
            GL_UNPACK_SWAP_BYTES.</para>
            <para>See also isSwapBytesEnabled().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLPixelTransferOptions.IsLeastSignificantBitFirst">
            <summary>
            <para>Returns true if bits within a byte are ordered from least to most
            significant.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLShader">
            <summary>
            <para>The QOpenGLShader class allows OpenGL shaders to be
            compiled.</para>
            </summary>
            <remarks>
            <para>This class supports shaders written in the OpenGL Shading
            Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).</para>
            <para>QOpenGLShader and QOpenGLShaderProgram shelter the programmer
            from the details of compiling and linking vertex and fragment
            shaders.</para>
            <para></para>
            <para>See also QOpenGLShaderProgram.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLShader.#ctor(QtGui.QOpenGLShader.ShaderTypeBit,QtCore.QObject)">
            <summary>
            <para>Constructs a new QOpenGLShader object of the specified type and
            attaches it to parent. If shader programs are not supported,
            QOpenGLShaderProgram::hasOpenGLShaderPrograms() will return false.</para>
            <para>This constructor is normally followed by a call to
            compileSourceCode() or compileSourceFile().</para>
            <para>The shader will be associated with the current
            QOpenGLContext.</para>
            <para>See also compileSourceCode() and compileSourceFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShader.CompileSourceCode(System.String)">
            <summary>
            <para>Sets the source code for this shader and compiles it. Returns
            true if the source was successfully compiled, false otherwise.</para>
            <para>See also compileSourceFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShader.CompileSourceCode(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the source code for this shader and compiles it. Returns
            true if the source was successfully compiled, false otherwise.</para>
            <para>See also compileSourceFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShader.CompileSourceCode1(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the source code for this shader and compiles it. Returns
            true if the source was successfully compiled, false otherwise.</para>
            <para>See also compileSourceFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShader.CompileSourceFile(System.String)">
            <summary>
            <para>Sets the source code for this shader to the contents of fileName
            and compiles it. Returns true if the file could be opened and the source
            compiled, false otherwise.</para>
            <para>See also compileSourceCode().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShader.HasOpenGLShaders(QtGui.QOpenGLShader.ShaderTypeBit,QtGui.QOpenGLContext)">
            <summary>
            <para>Returns true if shader programs of type type are supported on
            this system; false otherwise.</para>
            <para>The context is used to resolve the GLSL extensions. If context is
            null, then QOpenGLContext::currentContext() is used.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShader.ShaderType">
            <summary>
            <para>Returns the type of this shader.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShader.SourceCode">
            <summary>
            <para>Returns the source code for this shader.</para>
            <para>See also compileSourceCode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShader.IsCompiled">
            <summary>
            <para>Returns true if this shader has been compiled; false
            otherwise.</para>
            <para>See also compileSourceCode() and compileSourceFile().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShader.Log">
            <summary>
            <para>Returns the errors and warnings that occurred during the last
            compile.</para>
            <para>See also compileSourceCode() and compileSourceFile().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShader.ShaderId">
            <summary>
            <para>Returns the OpenGL identifier associated with this shader.</para>
            <para>See also QOpenGLShaderProgram::programId().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLShader.ShaderTypeBit">
            <summary>
            <para>This enum specifies the type of QOpenGLShader that is being
            created.</para>
            <para>The ShaderType type is a typedef for QFlags&lt;ShaderTypeBit&gt;.
            It stores an OR combination of ShaderTypeBit values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.Vertex">
            <summary>Vertex shader written in the OpenGL Shading Language (GLSL).</summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.Fragment">
            <summary>Fragment shader written in the OpenGL Shading Language (GLSL).</summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.Geometry">
            <summary>Geometry shaders written in the OpenGL Shading Language (GLSL) based on the OpenGL core feature (requires OpenGL >= 3.2).</summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.TessellationControl">
            <summary>Tessellation control shaders written in the OpenGL shading language (GLSL), based on the core feature (requires OpenGL >= 4.0).</summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.TessellationEvaluation">
            <summary>Tessellation evaluation shaders written in the OpenGL shading language (GLSL), based on the core feature (requires OpenGL >= 4.0).</summary>
        </member>
        <member name="F:QtGui.QOpenGLShader.ShaderTypeBit.Compute">
            <summary>Compute shaders written in the OpenGL shading language (GLSL), based on the core feature (requires OpenGL >= 4.3).</summary>
        </member>
        <member name="T:QtGui.QOpenGLShaderProgram">
            <summary>
            <para>The QOpenGLShaderProgram class allows OpenGL shader programs to
            be linked and used.</para>
            </summary>
            <remarks>
            <para></para>
            <para>Introduction</para>
            <para>This class supports shader programs written in the OpenGL Shading
            Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).</para>
            <para>QOpenGLShader and QOpenGLShaderProgram shelter the programmer
            from the details of compiling and linking vertex and fragment
            shaders.</para>
            <para>The following example creates a vertex shader program using the
            supplied source code. Once compiled and linked, the shader program is
            activated in the current QOpenGLContext by calling
            QOpenGLShaderProgram::bind():</para>
            <para>QOpenGLShader shader(QOpenGLShader::Vertex);</para>
            <para>shader.compileSourceCode(code);</para>
            <para></para>
            <para>QOpenGLShaderProgram program(context);</para>
            <para>program.addShader(shader);</para>
            <para>program.link();</para>
            <para></para>
            <para>program.bind();</para>
            <para></para>
            <para>Writing Portable Shaders</para>
            <para>Shader programs can be difficult to reuse across OpenGL
            implementations because of varying levels of support for standard vertex
            attributes and uniform variables. In particular, GLSL/ES lacks all of the
            standard variables that are present on desktop OpenGL systems: gl_Vertex,
            gl_Normal, gl_Color, and so on. Desktop OpenGL lacks the variable
            qualifiers highp, mediump, and lowp.</para>
            <para>The QOpenGLShaderProgram class makes the process of writing
            portable shaders easier by prefixing all shader programs with the following
            lines on desktop OpenGL:</para>
            <para>#define highp</para>
            <para>#define mediump</para>
            <para>#define lowp</para>
            <para>This makes it possible to run most GLSL/ES shader programs on
            desktop systems. The programmer should restrict themselves to just features
            that are present in GLSL/ES, and avoid standard variable names that only
            work on the desktop.</para>
            <para></para>
            <para>Simple Shader Example</para>
            <para>program.addShaderFromSourceCode(QOpenGLShader::Vertex,</para>
            <para>    &quot;attribute highp vec4 vertex;\n&quot;</para>
            <para>    &quot;uniform highp mat4 matrix;\n&quot;</para>
            <para>    &quot;void main(void)\n&quot;</para>
            <para>    &quot;{\n&quot;</para>
            <para>    &quot;   gl_Position = matrix * vertex;\n&quot;</para>
            <para>    &quot;}&quot;);</para>
            <para>program.addShaderFromSourceCode(QOpenGLShader::Fragment,</para>
            <para>    &quot;uniform mediump vec4 color;\n&quot;</para>
            <para>    &quot;void main(void)\n&quot;</para>
            <para>    &quot;{\n&quot;</para>
            <para>    &quot;   gl_FragColor = color;\n&quot;</para>
            <para>    &quot;}&quot;);</para>
            <para>program.link();</para>
            <para>program.bind();</para>
            <para></para>
            <para>int vertexLocation =
            program.attributeLocation(&quot;vertex&quot;);</para>
            <para>int matrixLocation =
            program.uniformLocation(&quot;matrix&quot;);</para>
            <para>int colorLocation =
            program.uniformLocation(&quot;color&quot;);</para>
            <para>With the above shader program active, we can draw a green
            triangle as follows:</para>
            <para>static GLfloat const triangleVertices[] = {</para>
            <para>    60.0f,  10.0f,  0.0f,</para>
            <para>    110.0f, 110.0f, 0.0f,</para>
            <para>    10.0f,  110.0f, 0.0f</para>
            <para>};</para>
            <para></para>
            <para>QColor color(0, 255, 0, 255);</para>
            <para></para>
            <para>QMatrix4x4 pmvMatrix;</para>
            <para>pmvMatrix.ortho(rect());</para>
            <para></para>
            <para>program.enableAttributeArray(vertexLocation);</para>
            <para>program.setAttributeArray(vertexLocation, triangleVertices,
            3);</para>
            <para>program.setUniformValue(matrixLocation, pmvMatrix);</para>
            <para>program.setUniformValue(colorLocation, color);</para>
            <para></para>
            <para>glDrawArrays(GL_TRIANGLES, 0, 3);</para>
            <para></para>
            <para>program.disableAttributeArray(vertexLocation);</para>
            <para></para>
            <para>Binary Shaders and Programs</para>
            <para>Binary shaders may be specified using glShaderBinary() on the
            return value from QOpenGLShader::shaderId(). The QOpenGLShader instance
            containing the binary can then be added to the shader program with
            addShader() and linked in the usual fashion with link().</para>
            <para>Binary programs may be specified using glProgramBinaryOES() on
            the return value from programId(). Then the application should call link(),
            which will notice that the program has already been specified and linked,
            allowing other operations to be performed on the shader program. The shader
            program's id can be explicitly created using the create() function.</para>
            <para></para>
            <para>See also QOpenGLShader.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a new shader program and attaches it to parent. The
            program will be invalid until addShader() is called.</para>
            <para>The shader program will be associated with the current
            QOpenGLContext.</para>
            <para>See also addShader().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AddShader(QtGui.QOpenGLShader)">
            <summary>
            <para>Adds a compiled shader to this shader program. Returns true if
            the shader could be added, or false otherwise.</para>
            <para>Ownership of the shader object remains with the caller. It will
            not be deleted when this QOpenGLShaderProgram instance is deleted. This
            allows the caller to add the same shader to multiple shader
            programs.</para>
            <para>See also addShaderFromSourceCode(), addShaderFromSourceFile(),
            removeShader(), link(), and removeAllShaders().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.RemoveShader(QtGui.QOpenGLShader)">
            <summary>
            <para>Removes shader from this shader program. The object is not
            deleted.</para>
            <para>The shader program must be valid in the current
            QOpenGLContext.</para>
            <para>See also addShader(), link(), and removeAllShaders().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AddShaderFromSourceCode(QtGui.QOpenGLShader.ShaderTypeBit,System.String)">
            <summary>
            <para>Compiles source as a shader of the specified type and adds it to
            this shader program. Returns true if compilation was successful, false
            otherwise. The compilation errors and warnings will be made available via
            log().</para>
            <para>This function is intended to be a short-cut for quickly adding
            vertex and fragment shaders to a shader program without creating an
            instance of QOpenGLShader first.</para>
            <para>See also addShader(), addShaderFromSourceFile(), removeShader(),
            link(), log(), and removeAllShaders().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AddShaderFromSourceCode(QtGui.QOpenGLShader.ShaderTypeBit,QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compiles source as a shader of the specified type and adds it to
            this shader program. Returns true if compilation was successful, false
            otherwise. The compilation errors and warnings will be made available via
            log().</para>
            <para>This function is intended to be a short-cut for quickly adding
            vertex and fragment shaders to a shader program without creating an
            instance of QOpenGLShader first.</para>
            <para>See also addShader(), addShaderFromSourceFile(), removeShader(),
            link(), log(), and removeAllShaders().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AddShaderFromSourceCode1(QtGui.QOpenGLShader.ShaderTypeBit,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Compiles source as a shader of the specified type and adds it to
            this shader program. Returns true if compilation was successful, false
            otherwise. The compilation errors and warnings will be made available via
            log().</para>
            <para>This function is intended to be a short-cut for quickly adding
            vertex and fragment shaders to a shader program without creating an
            instance of QOpenGLShader first.</para>
            <para>See also addShader(), addShaderFromSourceFile(), removeShader(),
            link(), log(), and removeAllShaders().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AddShaderFromSourceFile(QtGui.QOpenGLShader.ShaderTypeBit,System.String)">
            <summary>
            <para>Compiles the contents of fileName as a shader of the specified
            type and adds it to this shader program. Returns true if compilation was
            successful, false otherwise. The compilation errors and warnings will be
            made available via log().</para>
            <para>This function is intended to be a short-cut for quickly adding
            vertex and fragment shaders to a shader program without creating an
            instance of QOpenGLShader first.</para>
            <para>See also addShader() and addShaderFromSourceCode().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.RemoveAllShaders">
            <summary>
            <para>Removes all of the shaders that were added to this program
            previously. The QOpenGLShader objects for the shaders will not be deleted
            if they were constructed externally. QOpenGLShader objects that are
            constructed internally by QOpenGLShaderProgram will be deleted.</para>
            <para>See also addShader() and removeShader().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.Bind">
            <summary>
            <para>Binds this shader program to the active QOpenGLContext and makes
            it the current shader program. Any previously bound shader program is
            released. This is equivalent to calling glUseProgram() on programId().
            Returns true if the program was successfully bound; false otherwise. If the
            shader program has not yet been linked, or it needs to be re-linked, this
            function will call link().</para>
            <para>See also link() and release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.Release">
            <summary>
            <para>Releases the active shader program from the current
            QOpenGLContext. This is equivalent to calling glUseProgram(0).</para>
            <para>See also bind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.Create">
            <summary>
            <para>Requests the shader program's id to be created immediately.
            Returns true if successful; false otherwise.</para>
            <para>This function is primarily useful when combining
            QOpenGLShaderProgram with other OpenGL functions that operate directly on
            the shader program id, like GL_OES_get_program_binary.</para>
            <para>When the shader program is used normally, the shader program's id
            will be created on demand.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also programId().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.BindAttributeLocation(System.String,System.Int32)">
            <summary>
            <para>Binds the attribute name to the specified location. This function
            can be called before or after the program has been linked. Any attributes
            that have not been explicitly bound when the program is linked will be
            assigned locations automatically.</para>
            <para>When this function is called after the program has been linked,
            the program will need to be relinked for the change to take effect.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.BindAttributeLocation(QtCore.QByteArray,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Binds the attribute name to the specified location. This function
            can be called before or after the program has been linked. Any attributes
            that have not been explicitly bound when the program is linked will be
            assigned locations automatically.</para>
            <para>When this function is called after the program has been linked,
            the program will need to be relinked for the change to take effect.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.BindAttributeLocation1(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Binds the attribute name to the specified location. This function
            can be called before or after the program has been linked. Any attributes
            that have not been explicitly bound when the program is linked will be
            assigned locations automatically.</para>
            <para>When this function is called after the program has been linked,
            the program will need to be relinked for the change to take effect.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AttributeLocation(System.String)">
            <summary>
            <para>Returns the location of the attribute name within this shader
            program's parameter list. Returns -1 if name is not a valid attribute for
            this shader program.</para>
            <para>See also uniformLocation() and bindAttributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AttributeLocation(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the location of the attribute name within this shader
            program's parameter list. Returns -1 if name is not a valid attribute for
            this shader program.</para>
            <para>See also uniformLocation() and bindAttributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.AttributeLocation1(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the location of the attribute name within this shader
            program's parameter list. Returns -1 if name is not a valid attribute for
            this shader program.</para>
            <para>See also uniformLocation() and bindAttributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,System.Single)">
            <summary>
            <para>Sets the attribute at location in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Sets the attribute at location in the current context to the 2D
            vector (x, y).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the attribute at location in the current context to the 3D
            vector (x, y, z).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the attribute at location in the current context to the 4D
            vector (x, y, z, w).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,QtGui.QVector2D)">
            <summary>
            <para>Sets the attribute at location in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,QtGui.QVector3D)">
            <summary>
            <para>Sets the attribute at location in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,QtGui.QVector4D)">
            <summary>
            <para>Sets the attribute at location in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,QtGui.QColor)">
            <summary>
            <para>Sets the attribute at location in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.Int32,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>Sets the attribute at location in the current context to the
            contents of values, which contains columns elements, each consisting of
            rows elements. The rows value should be 1, 2, 3, or 4. This function is
            typically used to set matrix values and column vectors.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to the 2D
            vector (x, y).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to the 3D
            vector (x, y, z).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to the 4D
            vector (x, y, z, w).</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,QtGui.QVector2D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,QtGui.QVector4D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to
            value.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeValue(System.String,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the attribute called name in the current context to the
            contents of values, which contains columns elements, each consisting of
            rows elements. The rows value should be 1, 2, 3, or 4. This function is
            typically used to set matrix values and column vectors.</para>
            <para>See also setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.Int32,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>Sets an array of vertex values on the attribute at location in
            this shader program. The tupleSize indicates the number of components per
            vertex (1, 2, 3, or 4), and the stride indicates the number of bytes
            between vertices. A default stride value of zero indicates that the
            vertices are densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.Int32,QtGui.QVector2D,System.Int32)">
            <summary>
            <para>Sets an array of 2D vertex values on the attribute at location in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.Int32,QtGui.QVector3D,System.Int32)">
            <summary>
            <para>Sets an array of 3D vertex values on the attribute at location in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.Int32,QtGui.QVector4D,System.Int32)">
            <summary>
            <para>Sets an array of 4D vertex values on the attribute at location in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.Int32,System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <para>Sets an array of vertex values on the attribute at location in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The type indicates the type of elements in the values array,
            usually GL_FLOAT, GL_UNSIGNED_BYTE, etc. The tupleSize indicates the number
            of components per vertex: 1, 2, 3, or 4.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>The setAttributeBuffer() function can be used to set the
            attribute array to an offset within a vertex buffer.</para>
            <para>Note: Normalization will be enabled. If this is not desired, call
            glVertexAttribPointer directly through QOpenGLFunctions.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), disableAttributeArray(), and
            setAttributeBuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.String,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of vertex values on the attribute called name in
            this shader program. The tupleSize indicates the number of components per
            vertex (1, 2, 3, or 4), and the stride indicates the number of bytes
            between vertices. A default stride value of zero indicates that the
            vertices are densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on name. Otherwise the value specified with setAttributeValue() for
            name will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.String,QtGui.QVector2D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of 2D vertex values on the attribute called name in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on name. Otherwise the value specified with setAttributeValue() for
            name will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.String,QtGui.QVector3D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of 3D vertex values on the attribute called name in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on name. Otherwise the value specified with setAttributeValue() for
            name will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.String,QtGui.QVector4D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of 4D vertex values on the attribute called name in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The array will become active when enableAttributeArray() is
            called on name. Otherwise the value specified with setAttributeValue() for
            name will be used.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), and disableAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeArray(System.String,System.UInt32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of vertex values on the attribute called name in
            this shader program. The stride indicates the number of bytes between
            vertices. A default stride value of zero indicates that the vertices are
            densely packed in values.</para>
            <para>The type indicates the type of elements in the values array,
            usually GL_FLOAT, GL_UNSIGNED_BYTE, etc. The tupleSize indicates the number
            of components per vertex: 1, 2, 3, or 4.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the name. Otherwise the value specified with setAttributeValue()
            for name will be used.</para>
            <para>The setAttributeBuffer() function can be used to set the
            attribute array to an offset within a vertex buffer.</para>
            <para>See also setAttributeValue(), setUniformValue(),
            enableAttributeArray(), disableAttributeArray(), and
            setAttributeBuffer().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeBuffer(System.Int32,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets an array of vertex values on the attribute at location in
            this shader program, starting at a specific offset in the currently bound
            vertex buffer. The stride indicates the number of bytes between vertices. A
            default stride value of zero indicates that the vertices are densely packed
            in the value array.</para>
            <para>The type indicates the type of elements in the vertex value
            array, usually GL_FLOAT, GL_UNSIGNED_BYTE, etc. The tupleSize indicates the
            number of components per vertex: 1, 2, 3, or 4.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the location. Otherwise the value specified with
            setAttributeValue() for location will be used.</para>
            <para>Note: Normalization will be enabled. If this is not desired, call
            glVertexAttribPointer directly through QOpenGLFunctions.</para>
            <para>See also setAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetAttributeBuffer(System.String,System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets an array of vertex values on the attribute called name in
            this shader program, starting at a specific offset in the currently bound
            vertex buffer. The stride indicates the number of bytes between vertices. A
            default stride value of zero indicates that the vertices are densely packed
            in the value array.</para>
            <para>The type indicates the type of elements in the vertex value
            array, usually GL_FLOAT, GL_UNSIGNED_BYTE, etc. The tupleSize indicates the
            number of components per vertex: 1, 2, 3, or 4.</para>
            <para>The array will become active when enableAttributeArray() is
            called on the name. Otherwise the value specified with setAttributeValue()
            for name will be used.</para>
            <para>See also setAttributeArray().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.EnableAttributeArray(System.Int32)">
            <summary>
            <para>Enables the vertex array at location in this shader program so
            that the value set by setAttributeArray() on location will be used by the
            shader program.</para>
            <para>See also disableAttributeArray(), setAttributeArray(),
            setAttributeValue(), and setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.EnableAttributeArray(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Enables the vertex array called name in this shader program so
            that the value set by setAttributeArray() on name will be used by the
            shader program.</para>
            <para>See also disableAttributeArray(), setAttributeArray(),
            setAttributeValue(), and setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.DisableAttributeArray(System.Int32)">
            <summary>
            <para>Disables the vertex array at location in this shader program that
            was enabled by a previous call to enableAttributeArray().</para>
            <para>See also enableAttributeArray(), setAttributeArray(),
            setAttributeValue(), and setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.DisableAttributeArray(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Disables the vertex array called name in this shader program that
            was enabled by a previous call to enableAttributeArray().</para>
            <para>See also enableAttributeArray(), setAttributeArray(),
            setAttributeValue(), and setUniformValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.UniformLocation(System.String)">
            <summary>
            <para>Returns the location of the uniform variable name within this
            shader program's parameter list. Returns -1 if name is not a valid uniform
            variable for this shader program.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.UniformLocation(QtCore.QByteArray)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the location of the uniform variable name within this
            shader program's parameter list. Returns -1 if name is not a valid uniform
            variable for this shader program.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.UniformLocation1(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the location of the uniform variable name within this
            shader program's parameter list. Returns -1 if name is not a valid uniform
            variable for this shader program.</para>
            <para>See also attributeLocation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.Single)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.Int32)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.UInt32)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value. This function should be used when setting sampler values.</para>
            <para>Note: This function is not aware of unsigned int support in
            modern OpenGL versions and therefore treats value as a GLint and calls
            glUniform1i.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.Single,System.Single)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the 2D vector (x, y).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the 3D vector (x, y, z).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the 4D vector (x, y, z, w).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QVector2D)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QVector3D)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QVector4D)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QColor)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the red, green, blue, and alpha components of color.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtCore.QPoint)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the x and y coordinates of point.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtCore.QPointF)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the x and y coordinates of point.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtCore.QSize)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the width and height of the given size.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtCore.QSizeF)">
            <summary>
            <para>Sets the uniform variable at location in the current context to
            the width and height of the given size.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QMatrix4x4)">
            <summary>
            <para>Sets the uniform variable at location in the current context to a
            4x4 matrix value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.Int32,QtGui.QTransform)">
            <summary>
            <para>Sets the uniform variable at location in the current context to a
            3x3 transformation matrix value that is specified as a QTransform
            value.</para>
            <para>To set a QTransform value as a 4x4 matrix in a shader, use
            setUniformValue(location, QMatrix4x4(value)).</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value. This function should be used when setting sampler values.</para>
            <para>Note: This function is not aware of unsigned int support in
            modern OpenGL versions and therefore treats value as a GLint and calls
            glUniform1i.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            the 2D vector (x, y).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            the 3D vector (x, y, z).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            the 4D vector (x, y, z, w).</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QVector2D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QVector3D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QVector4D)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to
            the red, green, blue, and alpha components of color.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable associated with name in the current
            context to the x and y coordinates of point.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable associated with name in the current
            context to the x and y coordinates of point.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtCore.QSize)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable associated with name in the current
            context to the width and height of the given size.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtCore.QSizeF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable associated with name in the current
            context to the width and height of the given size.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QMatrix4x4)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to a
            4x4 matrix value.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValue(System.String,QtGui.QTransform)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable called name in the current context to a
            3x3 transformation matrix value that is specified as a QTransform
            value.</para>
            <para>To set a QTransform value as a 4x4 matrix in a shader, use
            setUniformValue(name, QMatrix4x4(value)).</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count elements of values. Each element has tupleSize
            components. The tupleSize must be 1, 2, 3, or 4.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,System.Int32@,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,System.UInt32@,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count elements of values. This overload should be used when
            setting an array of sampler values.</para>
            <para>Note: This function is not aware of unsigned int support in
            modern OpenGL versions and therefore treats values as a GLint and calls
            glUniform1iv.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,QtGui.QVector2D,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count 2D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,QtGui.QVector3D,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count 3D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,QtGui.QVector4D,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count 4D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.Int32,QtGui.QMatrix4x4,System.Int32)">
            <summary>
            <para>Sets the uniform variable array at location in the current
            context to the count 4x4 matrix elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,System.Single@,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count elements of values. Each element has tupleSize
            components. The tupleSize must be 1, 2, 3, or 4.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,System.Int32@,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,System.UInt32@,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count elements of values. This overload should be used when
            setting an array of sampler values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,QtGui.QVector2D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count 2D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,QtGui.QVector3D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count 3D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,QtGui.QVector4D,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count 4D vector elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.SetUniformValueArray(System.String,QtGui.QMatrix4x4,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the uniform variable array called name in the current
            context to the count 4x4 matrix elements of values.</para>
            <para>See also setAttributeValue().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLShaderProgram.HasOpenGLShaderPrograms(QtGui.QOpenGLContext)">
            <summary>
            <para>Returns true if shader programs written in the OpenGL Shading
            Language (GLSL) are supported on this system; false otherwise.</para>
            <para>The context is used to resolve the GLSL extensions. If context is
            null, then QOpenGLContext::currentContext() is used.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.PatchVertexCount">
            <summary>
            <para>Returns the number of vertices per-patch to be used when
            rendering.</para>
            <para>Note: This returns the global OpenGL state value. It is not
            specific to this QOpenGLShaderProgram instance.</para>
            <para>See also setPatchVertexCount().</para>
            <para></para>
            <para>Use this function to specify to OpenGL the number of vertices in
            a patch to count. A patch is a custom OpenGL primitive whose interpretation
            is entirely defined by the tessellation shader stages. Therefore, calling
            this function only makes sense when using a QOpenGLShaderProgram containing
            tessellation stage shaders. When using OpenGL tessellation, the only
            primitive that can be rendered with glDraw*() functions is
            GL_PATCHES.</para>
            <para>This is equivalent to calling
            glPatchParameteri(GL_PATCH_VERTICES, count).</para>
            <para>Note: This modifies global OpenGL state and is not specific to
            this QOpenGLShaderProgram instance. You should call this in your render
            function when needed, as QOpenGLShaderProgram will not apply this for you.
            This is purely a convenience function.</para>
            <para>See also patchVertexCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.Link">
            <summary>
            <para>Links together the shaders that were added to this program with
            addShader(). Returns true if the link was successful or false otherwise. If
            the link failed, the error messages can be retrieved with log().</para>
            <para>Subclasses can override this function to initialize attributes
            and uniform variables for use in specific shader programs.</para>
            <para>If the shader program was already linked, calling this function
            again will force it to be re-linked.</para>
            <para>See also addShader() and log().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.IsLinked">
            <summary>
            <para>Returns true if this shader program has been linked; false
            otherwise.</para>
            <para>See also link().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.Log">
            <summary>
            <para>Returns the errors and warnings that occurred during the last
            link() or addShader() with explicitly specified source code.</para>
            <para>See also link().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.ProgramId">
            <summary>
            <para>Returns the OpenGL identifier associated with this shader
            program.</para>
            <para>See also QOpenGLShader::shaderId().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLShaderProgram.MaxGeometryOutputVertices">
            <summary>
            <para>Returns the hardware limit for how many vertices a geometry
            shader can output.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture">
             <summary>
             <para>The QOpenGLTexture class encapsulates an OpenGL texture
             object.</para>
             </summary>
             <remarks>
             <para>QOpenGLTexture makes it easy to work with OpenGL textures and the
             myriad features and targets that they offer depending upon the capabilities
             of your OpenGL implementation.</para>
             <para>The typical usage pattern for QOpenGLTexture is</para>
             <para></para>
             <para>Instantiate the object specifying the texture target type</para>
             <para>Set properties that affect the storage requirements e.g. storage
             format, dimensions</para>
             <para>Allocate the server-side storage</para>
             <para>Optionally upload pixel data</para>
             <para>Optionally set any additional properties e.g. filtering and
             border options</para>
             <para>Render with texture or render to texture</para>
             <para></para>
             <para>In the common case of simply using a QImage as the source of
             texture pixel data most of the above steps are performed
             automatically.</para>
             <para>// Prepare texture</para>
             <para>QOpenGLTexture *texture = new
             QOpenGLTexture(QImage(fileName).mirrored());</para>
            
             <para>texture-&gt;setMinificationFilter(QOpenGLTexture::LinearMipMapLinear)
             ;</para>
            
             <para>texture-&gt;setMagnificationFilter(QOpenGLTexture::Linear);</para>
             <para>...</para>
             <para>// Render with texture</para>
             <para>texture-&gt;bind();</para>
             <para>glDrawArrays(...);</para>
             <para>Note that the QImage is mirrored vertically to account for the
             fact that OpenGL and QImage use opposite directions for the y axis. Another
             option would be to transform your texture coordinates.</para>
             </remarks>
        </member>
        <member name="M:QtGui.QOpenGLTexture.#ctor(QtGui.QOpenGLTexture.Target)">
            <summary>
            <para>Creates a QOpenGLTexture object that can later be bound to
            target.</para>
            <para>This does not create the underlying OpenGL texture object.
            Therefore, construction using this constructor does not require a valid
            current OpenGL context.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.#ctor(QtGui.QImage,QtGui.QOpenGLTexture.MipMapGeneration)">
            <summary>
            <para>Creates a QOpenGLTexture object that can later be bound to the 2D
            texture target and contains the pixel data contained in image. If you wish
            to have a chain of mipmaps generated then set genMipMaps to true (this is
            the default).</para>
            <para>This does create the underlying OpenGL texture object. Therefore,
            construction using this constructor does require a valid current OpenGL
            context.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Create">
            <summary>
            <para>Creates the underlying OpenGL texture object. This requires a
            current valid OpenGL context. If the texture object already exists, this
            function does nothing.</para>
            <para>Once the texture object is created you can obtain the object name
            from the textureId() function. This may be useful if you wish to make some
            raw OpenGL calls related to this texture.</para>
            <para>Normally it should not be necessary to call this function
            directly as all functions that set properties of the texture object
            implicitly call create() on your behalf.</para>
            <para>Returns true if the creation succeeded, otherwise returns
            false.</para>
            <para>See also destroy(), isCreated(), and textureId().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Destroy">
            <summary>
            <para>Destroys the underlying OpenGL texture object. This requires a
            current valid OpenGL context.</para>
            <para>See also create(), isCreated(), and textureId().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Bind">
            <summary>
            <para>Binds this texture to the currently active texture unit ready for
            rendering. Note that you do not need to bind QOpenGLTexture objects in
            order to modify them as the implementation makes use of the
            EXT_direct_state_access extension where available and simulates it where it
            is not.</para>
            <para>See also release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Bind(System.UInt32,QtGui.QOpenGLTexture.TextureUnitReset)">
            <summary>
            <para>Binds this texture to texture unit unit ready for rendering. Note
            that you do not need to bind QOpenGLTexture objects in order to modify them
            as the implementation makes use of the EXT_direct_state_access extension
            where available and simulates it where it is not.</para>
            <para>If parameter reset is true then this function will restore the
            active unit to the texture unit that was active upon entry.</para>
            <para>See also release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Release">
            <summary>
            <para>Unbinds this texture from the currently active texture
            unit.</para>
            <para>See also bind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.Release(System.UInt32,QtGui.QOpenGLTexture.TextureUnitReset)">
            <summary>
            <para>Unbinds this texture from texture unit unit.</para>
            <para>If parameter reset is true then this function will restore the
            active unit to the texture unit that was active upon entry.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.IsBound">
            <summary>
            <para>Returns true if this texture is bound to the corresponding target
            of the currently active texture unit.</para>
            <para>See also bind() and release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.IsBound(System.UInt32)">
            <summary>
            <para>Returns true if this texture is bound to the corresponding target
            of texture unit unit.</para>
            <para>See also bind() and release().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Sets the dimensions of this texture object to width, height, and
            depth. The default for each dimension is 1. The maximum allowable texture
            size is dependent upon your OpenGL implementation. Allocating storage for a
            texture less than the maximum size can still fail if your system is low on
            resources.</para>
            <para>See also width(), height(), and depth().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.AllocateStorage">
            <summary>
            <para>Allocates server-side storage for this texture object taking into
            account, the format, dimensions, mipmap levels, array layers and cubemap
            faces.</para>
            <para>Once storage has been allocated it is no longer possible to
            change these properties.</para>
            <para>If supported QOpenGLTexture makes use of immutable texture
            storage.</para>
            <para>Once storage has been allocated for the texture then pixel data
            can be uploaded via one of the setData() overloads.</para>
            <para>Note: If immutable texture storage is not available, then a
            default pixel format and pixel type will be used to create the mutable
            storage. You can use the other allocateStorage() overload to specify
            exactly the pixel format and the pixel type to use when allocating mutable
            storage; this is particulary useful under certain OpenGL ES implementations
            (notably, OpenGL ES 2), where the pixel format and the pixel type used at
            allocation time must perfectly match the format and the type passed to any
            subsequent setData() call.</para>
            <para>See also isStorageAllocated() and setData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.AllocateStorage(QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType)">
            <summary>
            <para>Allocates server-side storage for this texture object taking into
            account, the format, dimensions, mipmap levels, array layers and cubemap
            faces.</para>
            <para>Once storage has been allocated it is no longer possible to
            change these properties.</para>
            <para>If supported QOpenGLTexture makes use of immutable texture
            storage. However, if immutable texture storage is not available, then the
            specified pixelFormat and pixelType will be used to allocate mutable
            storage; note that in certain OpenGL implementations (notably, OpenGL ES 2)
            they must perfectly match the format and the type passed to any subsequent
            setData() call.</para>
            <para>Once storage has been allocated for the texture then pixel data
            can be uploaded via one of the setData() overloads.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also isStorageAllocated() and setData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.CreateTextureView(QtGui.QOpenGLTexture.Target,QtGui.QOpenGLTexture.TextureFormat,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Attempts to create a texture view onto this texture. A texture
            view is somewhat analogous to a view in SQL in that it presents a
            restricted or reinterpreted view of the original data. Texture views do not
            allocate any more server-side storage, insted relying on the storage buffer
            of the source texture.</para>
            <para>Texture views are only available when using immutable storage.
            For more information on texture views see
            http://www.opengl.org/wiki/Texture_Storage#Texture_views.</para>
            <para>The target argument specifies the target to use for the view.
            Only some targets can be used depending upon the target of the original
            target. For e.g. a view onto a Target1DArray texture can specify either
            Target1DArray or Target1D but for the latter the number of array layers
            specified with minimumLayer and maximumLayer must be exactly 1.</para>
            <para>Simpliar constraints apply for the viewFormat. See the above link
            and the specification for more details.</para>
            <para>The minimumMipmapLevel, maximumMipmapLevel, minimumLayer, and
            maximumLayer arguments serve to restrict the parts of the texture
            accessible by the texture view.</para>
            <para>If creation of the texture view fails this function will return
            0. If the function succeeds it will return a pointer to a new
            QOpenGLTexture object that will return true from its isTextureView()
            function.</para>
            <para>See also isTextureView().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData(System.Int32,System.Int32,QtGui.QOpenGLTexture.CubeMapFace,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>See also setCompressedData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData(System.Int32,System.Int32,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData(System.Int32,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData(QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData1(System.Int32,System.Int32,QtGui.QOpenGLTexture.CubeMapFace,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>Uploads pixel data for this texture object mipLevel, array layer,
            and cubeFace. Storage must have been allocated before uploading pixel data.
            Some overloads of setData() will set appropriate dimensions, mipmap levels,
            and array layers and then allocate storage for you if they have enough
            information to do so. This will be noted in the function
            documentation.</para>
            <para>The structure of the pixel data pointed to by data is specified
            by sourceFormat and sourceType. The pixel data upload can optionally be
            controlled by options.</para>
            <para>If using a compressed format() then you should use
            setCompressedData() instead of this function.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setCompressedData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData1(System.Int32,System.Int32,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData1(System.Int32,QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData1(QtGui.QOpenGLTexture.PixelFormat,QtGui.QOpenGLTexture.PixelType,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData(System.Int32,System.Int32,QtGui.QOpenGLTexture.CubeMapFace,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData(System.Int32,System.Int32,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData(System.Int32,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData(System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData1(System.Int32,System.Int32,QtGui.QOpenGLTexture.CubeMapFace,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>Uploads compressed pixel data to mipLevel, array layer, and
            cubeFace. The pixel transfer can optionally be controlled with options. The
            dataSize argument should specify the size of the data pointed to by
            data.</para>
            <para>If not using a compressed format() then you should use setData()
            instead of this function.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData1(System.Int32,System.Int32,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData1(System.Int32,System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetCompressedData1(System.Int32,System.IntPtr,QtGui.QOpenGLPixelTransferOptions)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetData(QtGui.QImage,QtGui.QOpenGLTexture.MipMapGeneration)">
            <summary>
            <para>This overload of setData() will allocate storage for you. The
            pixel data is contained in image. Mipmaps are generated by default. Set
            genMipMaps to DontGenerateMipMaps to turn off mipmap generation.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetMipLevelRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the range of mipmap levels that can be used for texture
            lookups with this texture to range from baseLevel to maxLevel.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also setMipBaseLevel(), setMipMaxLevel(), and
            mipLevelRange().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.GenerateMipMaps">
            <summary>
            <para>Generates mipmaps for this texture object from mipmap level 0. If
            you are using a texture target and filtering option that requires mipmaps
            and you have disabled automatic mipmap generation then you need to call
            this function or the overload to create the mipmap chain.</para>
            <para>See also setAutoMipMapGenerationEnabled(), setMipLevels(), and
            mipLevels().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.GenerateMipMaps(System.Int32,System.Boolean)">
            <summary>
            <para>Generates mipmaps for this texture object from mipmap level
            baseLevel. If you are using a texture target and filtering option that
            requires mipmaps and you have disabled automatic mipmap generation then you
            need to call this function or the overload to create the mipmap
            chain.</para>
            <para>The generation of mipmaps to above baseLevel is achieved by
            setting the mipmap base level to baseLevel and then generating the mipmap
            chain. If resetBaseLevel is true, then the baseLevel of the texture will be
            reset to its previous value.</para>
            <para>See also setAutoMipMapGenerationEnabled(), setMipLevels(), and
            mipLevels().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetSwizzleMask(QtGui.QOpenGLTexture.SwizzleComponent,QtGui.QOpenGLTexture.SwizzleValue)">
            <summary>
            <para>GLSL shaders are able to reorder the components of the vec4
            returned by texture functions. It is also desirable to be able to control
            this reordering from CPU side code. This is made possible by swizzle masks
            since OpenGL 3.3.</para>
            <para>Each component of the texture can be mapped to one of the
            SwizzleValue options.</para>
            <para>This function maps component to the output value.</para>
            <para>Note: This function has no effect on Mac and Qt built for OpenGL
            ES 2.</para>
            <para>See also swizzleMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetSwizzleMask(QtGui.QOpenGLTexture.SwizzleValue,QtGui.QOpenGLTexture.SwizzleValue,QtGui.QOpenGLTexture.SwizzleValue,QtGui.QOpenGLTexture.SwizzleValue)">
            <summary>
            <para></para>
            <para>Parameters </para>
            <para>r</para>
            <para>, </para>
            <para>g</para>
            <para>, </para>
            <para>b</para>
            <para>, and </para>
            <para>a</para>
            <para> are values used for setting the colors red, green, blue, and the
            alpha value. </para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SwizzleMask(QtGui.QOpenGLTexture.SwizzleComponent)">
            <summary>
            <para>Returns the swizzle mask for texture component.</para>
            <para>See also setSwizzleMask().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetMinMagFilters(QtGui.QOpenGLTexture.Filter,QtGui.QOpenGLTexture.Filter)">
            <summary>
            <para>Sets the minification filter to minificationFilter and the
            magnification filter to magnificationFilter.</para>
            <para>See also minMagFilters(), setMinificationFilter(), and
            setMagnificationFilter().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetWrapMode(QtGui.QOpenGLTexture.WrapMode)">
            <summary>
            <para>Sets the wrap (or repeat mode) for all texture dimentions to
            mode.</para>
            <para>See also wrapMode().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetWrapMode(QtGui.QOpenGLTexture.CoordinateDirection,QtGui.QOpenGLTexture.WrapMode)">
            <summary>
            <para></para>
            <para>Holds the texture dimension </para>
            <para>direction</para>
            <para>. </para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.wrapMode(QtGui.QOpenGLTexture.CoordinateDirection)">
            <summary>
            <para>Returns the wrap mode for the texture dimension direction.</para>
            <para>See also setWrapMode().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetBorderColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para></para>
            <para>Sets the color red to </para>
            <para>r</para>
            <para>, green to </para>
            <para>g</para>
            <para>, blue to </para>
            <para>b</para>
            <para>, and </para>
            <para>a</para>
            <para> to the alpha value. </para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetBorderColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para></para>
            <para>Sets the color red to </para>
            <para>r</para>
            <para>, green to </para>
            <para>g</para>
            <para>, blue to </para>
            <para>b</para>
            <para>, and the alpha value to </para>
            <para>a</para>
            <para>. </para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetBorderColor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            <para></para>
            <para>Sets the color red to </para>
            <para>r</para>
            <para>, green to </para>
            <para>g</para>
            <para>, blue to </para>
            <para>b</para>
            <para>, and the alpha value to </para>
            <para>a</para>
            <para>. </para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.GetBorderColor(System.Single@)">
            <summary>
            <para>Writes the texture border color into the first four elements of
            the array pointed to by border.</para>
            <para>See also setBorderColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.GetBorderColor(System.Int32@)">
            <summary>
            <para>Writes the texture border color into the first four elements of
            the array pointed to by border.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.GetBorderColor(System.UInt32@)">
            <summary>
            <para>Writes the texture border color into the first four elements of
            the array pointed to by border.</para>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.SetLevelOfDetailRange(System.Single,System.Single)">
            <summary>
            <para>Sets the minimum level of detail parameters to min and the
            maximum level to max.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also levelOfDetailRange(), setMinimumLevelOfDetail(), and
            setMaximumLevelOfDetail().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.BoundTextureId(QtGui.QOpenGLTexture.BindingTarget)">
            <summary>
            <para>Returns the textureId of the texture that is bound to the target
            of the currently active texture unit.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.BoundTextureId(System.UInt32,QtGui.QOpenGLTexture.BindingTarget)">
            <summary>
            <para>Returns the textureId of the texture that is bound to the target
            of the texture unit unit.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTexture.HasFeature(QtGui.QOpenGLTexture.Feature)">
            <summary>
            <para>Returns true if your OpenGL implementation and version supports
            the texture feature feature.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Format">
            <summary>
            <para>Returns the format of this texture object.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format of this texture object to format. This function
            must be called before texture storage is allocated.</para>
            <para>Note that all formats may not be supported. The exact set of
            supported formats is dependent upon your OpenGL implementation and
            version.</para>
            <para>See also format() and allocateStorage().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MipLevels">
            <summary>
            <para>Returns the number of mipmap levels for this texture. If storage
            has not yet been allocated for this texture it returns the requested number
            of mipmap levels.</para>
            <para>See also setMipLevels(), maximumMipLevels(), and
            isStorageAllocated().</para>
            <para></para>
            <para>For texture targets that support mipmaps, this function sets the
            requested number of mipmap levels to allocate storage for. This function
            should be called before storage is allocated for the texture.</para>
            <para>If the texture target does not support mipmaps this function has
            no effect.</para>
            <para>See also mipLevels(), maximumMipLevels(), and
            isStorageAllocated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Layers">
            <summary>
            <para>Returns the number of array layers for this texture. If storage
            has not yet been allocated for this texture then this function returns the
            requested number of array layers.</para>
            <para>For texture targets that do not support array layers this will
            return 1.</para>
            <para>See also setLayers() and isStorageAllocated().</para>
            <para></para>
            <para>Sets the number of array layers to allocate storage for. This
            function should be called before storage is allocated for the
            texture.</para>
            <para>For targets that do not support array layers this function has no
            effect.</para>
            <para>See also layers() and isStorageAllocated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Samples">
            <summary>
            <para>Returns the number of multisample sample points for this texture.
            If storage has not yet been allocated for this texture then this function
            returns the requested number of samples.</para>
            <para>For texture targets that do not support multisampling this will
            return 0.</para>
            <para>See also setSamples() and isStorageAllocated().</para>
            <para></para>
            <para>Sets the number of samples to allocate storage for when rendering
            to a multisample capable texture target. This function should be called
            before storage is allocated for the texture.</para>
            <para>For targets that do not support multisampling this function has
            no effect.</para>
            <para>See also samples() and isStorageAllocated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.FixedSamplePositions">
            <summary>
            <para>Returns whether this texture uses a fixed pattern of multisample
            samples. If storage has not yet been allocated for this texture then this
            function returns the requested fixed sample position setting.</para>
            <para>For texture targets that do not support multisampling this will
            return true.</para>
            <para>See also setFixedSamplePositions() and
            isStorageAllocated().</para>
            <para></para>
            <para>Sets whether the sample positions and number of samples used with
            a multisample capable texture target to fixed. If set to true the sample
            positions and number of samples used are the same for all texels in the
            image and will not depend upon the image size or internal format. This
            function should be called before storage is allocated for the
            texture.</para>
            <para>For targets that do not support multisampling this function has
            no effect.</para>
            <para>The default value is true.</para>
            <para>See also isFixedSamplePositions() and
            isStorageAllocated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MipBaseLevel">
            <summary>
            <para>Returns the mipmap base level used for all texture lookups with
            this texture. The default is 0.</para>
            <para>See also setMipBaseLevel(), mipMaxLevel(), and
            mipLevelRange().</para>
            <para></para>
            <para>Sets the base mipmap level used for all texture lookups with this
            texture to baseLevel.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also mipBaseLevel(), setMipMaxLevel(), and
            setMipLevelRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MipMaxLevel">
            <summary>
            <para>Returns the mipmap maximum level used for all texture lookups
            with this texture.</para>
            <para>See also setMipMaxLevel(), mipBaseLevel(), and
            mipLevelRange().</para>
            <para></para>
            <para>Sets the maximum mipmap level used for all texture lookups with
            this texture to maxLevel.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also mipMaxLevel(), setMipBaseLevel(), and
            setMipLevelRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.AutoMipMapGenerationEnabled">
            <summary>
            <para>Returns whether auto mipmap generation is enabled for this
            texture object.</para>
            <para>See also setAutoMipMapGenerationEnabled() and
            generateMipMaps().</para>
            <para></para>
            <para>If enabled is true, enables automatic mipmap generation for this
            texture object to occur whenever the level 0 mipmap data is set via
            setData().</para>
            <para>The automatic mipmap generation is enabled by default.</para>
            <para>See also isAutoMipMapGenerationEnabled() and
            generateMipMaps().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.depthStencilMode">
            <summary>
            <para>Returns the depth stencil mode for textures using a combined
            depth/stencil format.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also setDepthStencilMode().</para>
            <para></para>
            <para>If using a texture that has a combined depth/stencil format this
            function sets which component of the texture is accessed to mode.</para>
            <para>When the parameter is set to DepthMode, then accessing it from
            the shader will access the depth component as a single float, as normal.
            But when the parameter is set to StencilMode, the shader will access the
            stencil component.</para>
            <para>Note: This function has no effect on Mac and Qt built for OpenGL
            ES 2.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            <para>See also depthStencilMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.comparisonFunction">
            <summary>
            <para>Returns the texture comparison operator set on this texture. By
            default, a texture has a CompareLessEqual comparison function.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setComparisonFunction().</para>
            <para></para>
            <para>See also comparisonFunction().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.comparisonMode">
            <summary>
            <para>Returns the texture comparison mode set on this texture. By
            default, a texture has a CompareNone comparison mode (i.e. comparisons are
            disabled).</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also setComparisonMode().</para>
            <para></para>
            <para>Sets the texture comparison mode on this texture to mode. The
            texture comparison mode is used by shadow samplers when sampling a depth
            texture.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also comparisonMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MinificationFilter">
            <summary>
            <para>Returns the minification filter.</para>
            <para>See also setMinificationFilter().</para>
            <para></para>
            <para>Sets the filter used for minification to filter.</para>
            <para>See also minificationFilter(), setMagnificationFilter(), and
            setMinMagFilters().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MagnificationFilter">
            <summary>
            <para>Returns the magnification filter.</para>
            <para>See also setMagnificationFilter().</para>
            <para></para>
            <para>Sets the magnification filter to filter.</para>
            <para>See also magnificationFilter(), setMinificationFilter(), and
            setMinMagFilters().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MaximumAnisotropy">
            <summary>
            <para>Returns the maximum level of anisotropy to be accounted for when
            performing texture lookups. This requires the
            GL_EXT_texture_filter_anisotropic extension.</para>
            <para>See also setMaximumAnisotropy().</para>
            <para></para>
            <para>If your OpenGL implementation supports the
            GL_EXT_texture_filter_anisotropic extension this function sets the maximum
            anisotropy level to anisotropy.</para>
            <para>See also maximumAnisotropy().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.BorderColor">
            <summary>
            <para>Returns the borderColor of this texture.</para>
            <para>See also setBorderColor().</para>
            <para></para>
            <para>Sets the border color of the texture to color.</para>
            <para>Note: This function has no effect on Mac and Qt built for OpenGL
            ES 2.</para>
            <para>See also borderColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MinimumLevelOfDetail">
            <summary>
            <para>Returns the minimum level of detail parameter.</para>
            <para>See also setMinimumLevelOfDetail(), maximumLevelOfDetail(), and
            levelOfDetailRange().</para>
            <para></para>
            <para>Sets the minimum level of detail to value. This limits the
            selection of highest resolution mipmap (lowest mipmap level). The default
            value is -1000.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also minimumLevelOfDetail(), setMaximumLevelOfDetail(), and
            setLevelOfDetailRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MaximumLevelOfDetail">
            <summary>
            <para>Returns the maximum level of detail parameter.</para>
            <para>See also setMaximumLevelOfDetail(), minimumLevelOfDetail(), and
            levelOfDetailRange().</para>
            <para></para>
            <para>Sets the maximum level of detail to value. This limits the
            selection of lowest resolution mipmap (highest mipmap level). The default
            value is 1000.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also maximumLevelOfDetail(), setMinimumLevelOfDetail(), and
            setLevelOfDetailRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.LevelofDetailBias">
            <summary>
            <para>Returns the level of detail bias parameter.</para>
            <para>See also setLevelofDetailBias().</para>
            <para></para>
            <para>Sets the level of detail bias to bias. Level of detail bias
            affects the point at which mipmapping levels change. Increasing values for
            level of detail bias makes the overall images blurrier or smoother.
            Decreasing values make the overall images sharper.</para>
            <para>Note: This function has no effect on Qt built for OpenGL ES
            2.</para>
            <para>See also levelofDetailBias().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.target">
            <summary>
            <para>Returns the binding target of this texture.</para>
            <para>This function was introduced in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.IsCreated">
            <summary>
            <para>Returns true if the underlying OpenGL texture object has been
            created.</para>
            <para>See also create(), destroy(), and textureId().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.TextureId">
            <summary>
            <para>Returns the name of the underlying OpenGL texture object or 0 if
            it has not yet been created.</para>
            <para>See also create(), destroy(), and isCreated().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Width">
            <summary>
            <para>Returns the width of a 1D, 2D or 3D texture.</para>
            <para>See also height(), depth(), and setSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Height">
            <summary>
            <para>Returns the height of a 2D or 3D texture.</para>
            <para>See also width(), depth(), and setSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Depth">
            <summary>
            <para>Returns the depth of a 3D texture.</para>
            <para>See also width(), height(), and setSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.MaximumMipLevels">
            <summary>
            <para>Returns the maximum number of mipmap levels that this texture can
            have given the current dimensions.</para>
            <para>See also setMipLevels(), mipLevels(), and setSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.Faces">
            <summary>
            <para>Returns the number of faces for this texture. For cubemap and
            cubemap array type targets this will be 6.</para>
            <para>For non-cubemap type targets this will return 1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.IsStorageAllocated">
            <summary>
            <para>Returns true if server-side storage for this texture as been
            allocated.</para>
            <para>The texture format, dimensions, mipmap levels and array layers
            cannot be altered once storage ihas been allocated.</para>
            <para>See also allocateStorage(), setSize(), setMipLevels(),
            setLayers(), and setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTexture.IsTextureView">
            <summary>
            <para>Returns true if this texture object is actually a view onto
            another texture object.</para>
            <para>See also createTextureView().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.Target">
            <summary>
            <para>This enum defines the texture target of a QOpenGLTexture
            object.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target1D">
            <summary>A 1-dimensional texture. Equivalent to GL_TEXTURE_1D.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target1DArray">
            <summary>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_1D_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target2D">
            <summary>A 2-dimensional texture. Equivalent to GL_TEXTURE_2D</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target2DArray">
            <summary>An array of 1-dimensional textures. Equivalent to GL_TEXTURE_2D_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target3D">
            <summary>A 3-dimensional texture. Equivalent to GL_TEXTURE_3D</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.TargetCubeMap">
            <summary>A cubemap texture. Equivalent to GL_TEXTURE_CUBE_MAP</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.TargetCubeMapArray">
            <summary>An array of cubemap textures. Equivalent to GL_TEXTURE_CUBE_MAP_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target2DMultisample">
            <summary>A 2-dimensional texture with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.Target2DMultisampleArray">
            <summary>An array of 2-dimensional textures with multisample support. Equivalent to GL_TEXTURE_2D_MULTISAMPLE_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.TargetRectangle">
            <summary>A rectangular 2-dimensional texture. Equivalent to GL_TEXTURE_RECTANGLE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Target.TargetBuffer">
            <summary>A texture with data from an OpenGL buffer object. Equivalent to GL_TEXTURE_BUFFER</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.BindingTarget">
            <summary>
            <para>This enum defines the possible binding targets of texture
            units.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget1D">
            <summary>Equivalent to GL_TEXTURE_BINDING_1D</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget1DArray">
            <summary>Equivalent to GL_TEXTURE_BINDING_1D_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget2D">
            <summary>Equivalent to GL_TEXTURE_BINDING_2D</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget2DArray">
            <summary>Equivalent to GL_TEXTURE_BINDING_2D_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget3D">
            <summary>Equivalent to GL_TEXTURE_BINDING_3D</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTargetCubeMap">
            <summary>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTargetCubeMapArray">
            <summary>Equivalent to GL_TEXTURE_BINDING_CUBE_MAP_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget2DMultisample">
            <summary>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTarget2DMultisampleArray">
            <summary>Equivalent to GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTargetRectangle">
            <summary>Equivalent to GL_TEXTURE_BINDING_RECTANGLE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.BindingTarget.BindingTargetBuffer">
            <summary>Equivalent to GL_TEXTURE_BINDING_BUFFER</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.MipMapGeneration">
            <summary>
            <para>This enum defines the options to control mipmap
            generation.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.MipMapGeneration.GenerateMipMaps">
            <summary>Mipmaps should be generated</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.MipMapGeneration.DontGenerateMipMaps">
            <summary>Mipmaps should not be generated</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.TextureUnitReset">
            <summary>
            <para>This enum defines options ot control texture unit
            activation.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureUnitReset.ResetTextureUnit">
            <summary>The previous active texture unit will be reset</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureUnitReset.DontResetTextureUnit">
            <summary>The previous active texture unit will not be rest</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.TextureFormat">
            <summary>
            <para>This enum defines the possible texture formats. Depending upon
            your OpenGL implementation only a subset of these may be supported.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.NoFormat">
            <summary>Equivalent to GL_NONE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R8_UNorm">
            <summary>Equivalent to GL_R8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG8_UNorm">
            <summary>Equivalent to GL_RG8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8_UNorm">
            <summary>Equivalent to GL_RGB8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA8_UNorm">
            <summary>Equivalent to GL_RGBA8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R16_UNorm">
            <summary>Equivalent to GL_R16</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG16_UNorm">
            <summary>Equivalent to GL_RG16</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB16_UNorm">
            <summary>Equivalent to GL_RGB16</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA16_UNorm">
            <summary>Equivalent to GL_RGBA16</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R8_SNorm">
            <summary>Equivalent to GL_R8_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG8_SNorm">
            <summary>Equivalent to GL_RG8_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8_SNorm">
            <summary>Equivalent to GL_RGB8_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA8_SNorm">
            <summary>Equivalent to GL_RGBA8_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R16_SNorm">
            <summary>Equivalent to GL_R16_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG16_SNorm">
            <summary>Equivalent to GL_RG16_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB16_SNorm">
            <summary>Equivalent to GL_RGB16_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA16_SNorm">
            <summary>Equivalent to GL_RGBA16_SNORM</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R8U">
            <summary>Equivalent to GL_R8UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG8U">
            <summary>Equivalent to GL_RG8UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8U">
            <summary>Equivalent to GL_RGB8UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA8U">
            <summary>Equivalent to GL_RGBA8UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R16U">
            <summary>Equivalent to GL_R16UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG16U">
            <summary>Equivalent to GL_RG16UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB16U">
            <summary>Equivalent to GL_RGB16UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA16U">
            <summary>Equivalent to GL_RGBA16UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R32U">
            <summary>Equivalent to GL_R32UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG32U">
            <summary>Equivalent to GL_RG32UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB32U">
            <summary>Equivalent to GL_RGB32UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA32U">
            <summary>Equivalent to GL_RGBA32UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R8I">
            <summary>Equivalent to GL_R8I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG8I">
            <summary>Equivalent to GL_RG8I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8I">
            <summary>Equivalent to GL_RGB8I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA8I">
            <summary>Equivalent to GL_RGBA8I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R16I">
            <summary>Equivalent to GL_R16I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG16I">
            <summary>Equivalent to GL_RG16I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB16I">
            <summary>Equivalent to GL_RGB16I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA16I">
            <summary>Equivalent to GL_RGBA16I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R32I">
            <summary>Equivalent to GL_R32I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG32I">
            <summary>Equivalent to GL_RG32I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB32I">
            <summary>Equivalent to GL_RGB32I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA32I">
            <summary>Equivalent to GL_RGBA32I</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R16F">
            <summary>Equivalent to GL_R16F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG16F">
            <summary>Equivalent to GL_RG16F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB16F">
            <summary>Equivalent to GL_RGB16F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA16F">
            <summary>Equivalent to GL_RGBA16F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R32F">
            <summary>Equivalent to GL_R32F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG32F">
            <summary>Equivalent to GL_RG32F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB32F">
            <summary>Equivalent to GL_RGB32F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA32F">
            <summary>Equivalent to GL_RGBA32F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB9E5">
            <summary>Equivalent to GL_RGB9_E5</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG11B10F">
            <summary>Equivalent to GL_R11F_G11F_B10F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG3B2">
            <summary>Equivalent to GL_R3_G3_B2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R5G6B5">
            <summary>Equivalent to GL_RGB565</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB5A1">
            <summary>Equivalent to GL_RGB5_A1</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA4">
            <summary>Equivalent to GL_RGBA4</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB10A2">
            <summary>Equivalent to GL_RGB10_A2UI</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D16">
            <summary>Equivalent to GL_DEPTH_COMPONENT16</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D24">
            <summary>Equivalent to GL_DEPTH_COMPONENT24</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D24S8">
            <summary>Equivalent to GL_DEPTH24_STENCIL8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D32">
            <summary>Equivalent to GL_DEPTH_COMPONENT32</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D32F">
            <summary>Equivalent to GL_DEPTH_COMPONENT32F</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.D32FS8X24">
            <summary>Equivalent to GL_DEPTH32F_STENCIL8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.S8">
            <summary>Equivalent to GL_STENCIL_INDEX8. Introduced in Qt 5.4</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB_DXT1">
            <summary>Equivalent to GL_COMPRESSED_RGB_S3TC_DXT1_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA_DXT1">
            <summary>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA_DXT3">
            <summary>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA_DXT5">
            <summary>Equivalent to GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R_ATI1N_UNorm">
            <summary>Equivalent to GL_COMPRESSED_RED_RGTC1</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R_ATI1N_SNorm">
            <summary>Equivalent to GL_COMPRESSED_SIGNED_RED_RGTC1</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG_ATI2N_UNorm">
            <summary>Equivalent to GL_COMPRESSED_RG_RGTC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG_ATI2N_SNorm">
            <summary>Equivalent to GL_COMPRESSED_SIGNED_RG_RGTC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB_BP_UNSIGNED_FLOAT">
            <summary>Equivalent to GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB_BP_SIGNED_FLOAT">
            <summary>Equivalent to GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB_BP_UNorm">
            <summary>Equivalent to GL_COMPRESSED_RGBA_BPTC_UNORM_ARB</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R11_EAC_UNorm">
            <summary>Equivalent to GL_COMPRESSED_R11_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.R11_EAC_SNorm">
            <summary>Equivalent to GL_COMPRESSED_SIGNED_R11_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG11_EAC_UNorm">
            <summary>Equivalent to GL_COMPRESSED_RG11_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RG11_EAC_SNorm">
            <summary>Equivalent to GL_COMPRESSED_SIGNED_RG11_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8_ETC2">
            <summary>Equivalent to GL_COMPRESSED_RGB8_ETC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB8_ETC2">
            <summary>Equivalent to GL_COMPRESSED_SRGB8_ETC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGB8_PunchThrough_Alpha1_ETC2">
            <summary>Equivalent to GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB8_PunchThrough_Alpha1_ETC2">
            <summary>Equivalent to GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBA8_ETC2_EAC">
            <summary>Equivalent to GL_COMPRESSED_RGBA8_ETC2_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB8_Alpha8_ETC2_EAC">
            <summary>Equivalent to GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB8">
            <summary>Equivalent to GL_SRGB8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB8_Alpha8">
            <summary>Equivalent to GL_SRGB8_ALPHA8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB_DXT1">
            <summary>Equivalent to GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB_Alpha_DXT1">
            <summary>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB_Alpha_DXT3">
            <summary>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB_Alpha_DXT5">
            <summary>Equivalent to GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.SRGB_BP_UNorm">
            <summary>Equivalent to GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.DepthFormat">
            <summary>Equivalent to GL_DEPTH_COMPONENT (only OpenGL ES 3 or ES 2 with OES_depth_texture)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.AlphaFormat">
            <summary>Equivalent to GL_ALPHA (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBFormat">
            <summary>Equivalent to GL_RGB (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.RGBAFormat">
            <summary>Equivalent to GL_RGBA (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.LuminanceFormat">
            <summary>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.TextureFormat.LuminanceAlphaFormat">
            <summary>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.CubeMapFace">
            <summary>
            <para>This enum defines the possible CubeMap faces.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapPositiveX">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_X</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapNegativeX">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_X</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapPositiveY">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Y</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapNegativeY">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapPositiveZ">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_POSITIVE_Z</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CubeMapFace.CubeMapNegativeZ">
            <summary>Equivalent to GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.PixelFormat">
            <summary>
            <para>This enum defines the possible client-side pixel formats for a
            pixel transfer operation.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.NoSourceFormat">
            <summary>Equivalent to GL_NONE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Red">
            <summary>Equivalent to GL_RED</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RG">
            <summary>Equivalent to GL_RG</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RGB">
            <summary>Equivalent to GL_RGB</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.BGR">
            <summary>Equivalent to GL_BGR</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RGBA">
            <summary>Equivalent to GL_RGBA</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.BGRA">
            <summary>Equivalent to GL_BGRA</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Red_Integer">
            <summary>Equivalent to GL_RED_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RG_Integer">
            <summary>Equivalent to GL_RG_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RGB_Integer">
            <summary>Equivalent to GL_RGB_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.BGR_Integer">
            <summary>Equivalent to GL_BGR_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.RGBA_Integer">
            <summary>Equivalent to GL_RGBA_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.BGRA_Integer">
            <summary>Equivalent to GL_BGRA_INTEGER</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Stencil">
            <summary>Equivalent to GL_STENCIL_INDEX. Introduced in Qt 5.4</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Depth">
            <summary>Equivalent to GL_DEPTH_COMPONENT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.DepthStencil">
            <summary>Equivalent to GL_DEPTH_STENCIL</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Alpha">
            <summary>Equivalent to GL_ALPHA (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.Luminance">
            <summary>Equivalent to GL_LUMINANCE (OpenGL ES 2 only)</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelFormat.LuminanceAlpha">
            <summary>Equivalent to GL_LUMINANCE_ALPHA (OpenGL ES 2 only)</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.PixelType">
            <summary>
            <para>This enum defines the possible pixel data types for a pixel
            transfer operation</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.NoPixelType">
            <summary>Equivalent to GL_NONE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Int8">
            <summary>Equivalent to GL_BYTE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt8">
            <summary>Equivalent to GL_UNSIGNED_BYTE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Int16">
            <summary>Equivalent to GL_SHORT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16">
            <summary>Equivalent to GL_UNSIGNED_SHORT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Int32">
            <summary>Equivalent to GL_INT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32">
            <summary>Equivalent to GL_UNSIGNED_INT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Float16">
            <summary>Equivalent to GL_HALF_FLOAT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Float16OES">
            <summary>Equivalent to GL_HALF_FLOAT_OES</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Float32">
            <summary>Equivalent to GL_FLOAT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RGB9_E5">
            <summary>Equivalent to GL_UNSIGNED_INT_5_9_9_9_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RG11B10F">
            <summary>Equivalent to GL_UNSIGNED_INT_10F_11F_11F_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt8_RG3B2">
            <summary>Equivalent to GL_UNSIGNED_BYTE_3_3_2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt8_RG3B2_Rev">
            <summary>Equivalent to GL_UNSIGNED_BYTE_2_3_3_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_RGB5A1">
            <summary>Equivalent to GL_UNSIGNED_SHORT_5_5_5_1</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_RGB5A1_Rev">
            <summary>Equivalent to GL_UNSIGNED_SHORT_1_5_5_5_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_R5G6B5">
            <summary>Equivalent to GL_UNSIGNED_SHORT_5_6_5</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_R5G6B5_Rev">
            <summary>Equivalent to GL_UNSIGNED_SHORT_5_6_5_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_RGBA4">
            <summary>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt16_RGBA4_Rev">
            <summary>Equivalent to GL_UNSIGNED_SHORT_4_4_4_4_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RGBA8">
            <summary>Equivalent to GL_UNSIGNED_INT_8_8_8_8</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RGBA8_Rev">
            <summary>Equivalent to GL_UNSIGNED_INT_8_8_8_8_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RGB10A2">
            <summary>Equivalent to GL_UNSIGNED_INT_10_10_10_2</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_RGB10A2_Rev">
            <summary>Equivalent to GL_UNSIGNED_INT_2_10_10_10_REV</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.UInt32_D24S8">
            <summary>Equivalent to GL_UNSIGNED_INT_24_8. Introduced in Qt 5.4</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.PixelType.Float32_D32_UInt32_S8_X24">
            <summary>Equivalent to GL_FLOAT_32_UNSIGNED_INT_24_8_REV. Introduced in Qt 5.4</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.SwizzleComponent">
            <summary>
            <para>This enum defines the texture color components that can be
            assigned a swizzle mask.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleComponent.SwizzleRed">
            <summary>The red component. Equivalent to GL_TEXTURE_SWIZZLE_R</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleComponent.SwizzleGreen">
            <summary>The green component. Equivalent to GL_TEXTURE_SWIZZLE_G</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleComponent.SwizzleBlue">
            <summary>The blue component. Equivalent to GL_TEXTURE_SWIZZLE_B</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleComponent.SwizzleAlpha">
            <summary>The alpha component. Equivalent to GL_TEXTURE_SWIZZLE_A</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.SwizzleValue">
            <summary>
            <para>This enum defines the possible mask values for texture
            swizzling.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.RedValue">
            <summary>Maps the component to the red channel. Equivalent to GL_RED</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.GreenValue">
            <summary>Maps the component to the green channel. Equivalent to GL_GREEN</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.BlueValue">
            <summary>Maps the component to the blue channel. Equivalent to GL_BLUE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.AlphaValue">
            <summary>Maps the component to the alpha channel. Equivalent to GL_ALPHA</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.ZeroValue">
            <summary>Maps the component to a fixed value of 0. Equivalent to GL_ZERO</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.SwizzleValue.OneValue">
            <summary>Maps the component to a fixed value of 1. Equivalent to GL_ONE</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.WrapMode">
            <summary>
            <para>This enum defines the possible texture coordinate wrapping
            modes.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.WrapMode.Repeat">
            <summary>Texture coordinate is repeated. Equivalent to GL_REPEAT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.WrapMode.MirroredRepeat">
            <summary>Texture coordinate is reflected about 0 and 1. Equivalent to GL_MIRRORED_REPEAT</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.WrapMode.ClampToEdge">
            <summary>Clamps the texture coordinates to [0,1]. Equivalent to GL_CLAMP_TO_EDGE</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.WrapMode.ClampToBorder">
            <summary>As for ClampToEdge but also blends samples at 0 and 1 with a fixed border color. Equivalent to GL_CLAMP_TO_BORDER</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.CoordinateDirection">
            <summary>
            <para>This enum defines the possible texture coordinate
            directions</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CoordinateDirection.DirectionS">
            <summary>The horizontal direction. Equivalent to GL_TEXTURE_WRAP_S</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CoordinateDirection.DirectionT">
            <summary>The vertical direction. Equivalent to GL_TEXTURE_WRAP_T</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.CoordinateDirection.DirectionR">
            <summary>The depth direction. Equivalent to GL_TEXTURE_WRAP_R</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.Feature">
            <summary>
            <para>This enum defines the OpenGL texture-related features that can be
            tested for.</para>
            <para>The Features type is a typedef for QFlags&lt;Feature&gt;. It
            stores an OR combination of Feature values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.ImmutableStorage">
            <summary>Support for immutable texture storage</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.ImmutableMultisampleStorage">
            <summary>Support for immutable texture storage with multisample targets</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureRectangle">
            <summary>Support for the GL_TEXTURE_RECTANGLE target</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureArrays">
            <summary>Support for texture targets with array layers</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.Texture3D">
            <summary>Support for the 3 dimensional texture target</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureMultisample">
            <summary>Support for texture targets that have multisample capabilities</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureBuffer">
            <summary>Support for textures that use OpenGL buffer objects as their data source</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureCubeMapArrays">
            <summary>Support for cubemap array texture target</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.Swizzle">
            <summary>Support for texture component swizzle masks</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.StencilTexturing">
            <summary>Support for stencil texturing (i.e. looking up depth or stencil components of a combined depth/stencil format texture in GLSL shaders).</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.AnisotropicFiltering">
            <summary>Support for anisotropic texture filtering</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.NPOTTextures">
            <summary>Basic support for non-power-of-two textures</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.NPOTTextureRepeat">
            <summary>Full support for non-power-of-two textures including texture repeat modes</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.Texture1D">
            <summary>Support for the 1 dimensional texture target</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureComparisonOperators">
            <summary>Support for texture comparison operators</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Feature.TextureMipMapLevel">
            <summary>Support for setting the base and maximum mipmap levels</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.DepthStencilMode">
            <summary>
            <para>This enum specifies which component of a depth/stencil texture is
            accessed when the texture is sampled.</para>
            <para>This enum was introduced or modified in  Qt 5.4.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.DepthStencilMode.DepthMode">
            <summary>Equivalent to GL_DEPTH_COMPONENT.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.DepthStencilMode.StencilMode">
            <summary>Equivalent to GL_STENCIL_INDEX.</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.ComparisonFunction">
            <summary>
            <para>This enum specifies which comparison operator is used when
            texture comparison is enabled on this texture.</para>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareLessEqual">
            <summary>Equivalent to GL_LEQUAL.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareGreaterEqual">
            <summary>Equivalent to GL_GEQUAL.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareLess">
            <summary>Equivalent to GL_LESS.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareGreater">
            <summary>Equivalent to GL_GREATER.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareEqual">
            <summary>Equivalent to GL_EQUAL.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CommpareNotEqual">
            <summary>Equivalent to GL_NOTEQUAL.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareAlways">
            <summary>Equivalent to GL_ALWAYS.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonFunction.CompareNever">
            <summary>Equivalent to GL_NEVER.</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.ComparisonMode">
            <summary>
            <para>This enum specifies which comparison mode is used when sampling
            this texture.</para>
            <para>This enum was introduced or modified in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonMode.CompareRefToTexture">
            <summary>Equivalent to GL_COMPARE_REF_TO_TEXTURE.</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.ComparisonMode.CompareNone">
            <summary>Equivalent to GL_NONE.</summary>
        </member>
        <member name="T:QtGui.QOpenGLTexture.Filter">
            <summary>
            <para>This enum defines the filtering parameters for a QOpenGLTexture
            object.</para>
            </summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.Nearest">
            <summary>Equivalent to GL_NEAREST</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.Linear">
            <summary>Equivalent to GL_LINEAR</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.NearestMipMapNearest">
            <summary>Equivalent to GL_NEAREST_MIPMAP_NEAREST</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.NearestMipMapLinear">
            <summary>Equivalent to GL_NEAREST_MIPMAP_LINEAR</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.LinearMipMapNearest">
            <summary>Equivalent to GL_LINEAR_MIPMAP_NEAREST</summary>
        </member>
        <member name="F:QtGui.QOpenGLTexture.Filter.LinearMipMapLinear">
            <summary>Equivalent to GL_LINEAR_MIPMAP_LINEAR</summary>
        </member>
        <member name="T:QtGui.QOpenGLTimerQuery">
            <summary>
            <para>The QOpenGLTimerQuery class wraps an OpenGL timer query
            object.</para>
            </summary>
            <remarks>
            <para>OpenGL timer query objects are OpenGL managed resources to
            measure the execution times of sequences of OpenGL commands on the
            GPU.</para>
            <para>OpenGL offers various levels of support for timer queries,
            depending on the version of OpenGL you have and the presence of the
            ARB_timer_query or EXT_timer_query extensions. The support can be
            summarized as:</para>
            <para></para>
            <para>OpenGL &gt;=3.3 offers full support for all timer query
            functionality.</para>
            <para>OpenGL 3.2 with the ARB_timer_query extension offers full support
            for all timer query functionality.</para>
            <para>OpenGL &lt;=3.2 with the EXT_timer_query extension offers limited
            support in that the timestamp of the GPU cannot be queried. Places where
            this impacts functions provided by Qt classes will be highlighted in the
            function documentation.</para>
            <para>OpenGL ES 2 (and OpenGL ES 3) do not provide any support for
            OpenGL timer queries.</para>
            <para></para>
            <para>OpenGL represents time with a granularity of 1 nanosecond (1e-9
            seconds). As a consequence of this, 32-bit integers would only give a total
            possible duration of approximately 4 seconds, which would not be difficult
            to exceed in poorly performing or lengthy operations. OpenGL therefore uses
            64 bit integer types to represent times. A GLuint64 variable has enough
            width to contain a duration of hundreds of years, which is plenty for
            real-time rendering needs.</para>
            <para>As with the other Qt OpenGL classes, QOpenGLTimerQuery has a
            create() function to create the underlying OpenGL object. This is to allow
            the developer to ensure that there is a valid current OpenGL context at the
            time.</para>
            <para>Once created, timer queries can be issued in one of several ways.
            The simplest method is to delimit a block of commands with calls to begin()
            and end(). This instructs OpenGL to measure the time taken from completing
            all commands issued prior to begin() until the completion of all commands
            issued prior to end().</para>
            <para>At the end of a frame we can retrieve the results by calling
            waitForResult(). As this function's name implies, it blocks CPU execution
            until OpenGL notifies that the timer query result is available. To avoid
            blocking, you can check if the query result is available by calling
            isResultAvailable(). Note that modern GPUs are deeply pipelined and query
            results may not become available for between 1-5 frames after they were
            issued.</para>
            <para>Note that OpenGL does not permit nesting or interleaving of
            multiple timer queries using begin() and end(). Using multiple timer
            queries and recordTimestamp() avoids this limitation. When using
            recordTimestamp() the result can be obtained at some later time using
            isResultAvailable() and waitForResult(). Qt provides the convenience class
            QOpenGLTimeMonitor that helps with using multiple query objects.</para>
            <para></para>
            <para>See also QOpenGLTimeMonitor.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a QOpenGLTimerQuery instance with the given parent. You
            must call create() with a valid OpenGL context before using.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.Create">
            <summary>
            <para>Creates the underlying OpenGL timer query object. There must be a
            valid OpenGL context that supports query objects current for this function
            to succeed.</para>
            <para>Returns true if the OpenGL timer query object was successfully
            created.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.Destroy">
            <summary>
            <para>Destroys the underlying OpenGL timer query object. The context
            that was current when create() was called must be current when calling this
            function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.Begin">
            <summary>
            <para>Marks the start point in the OpenGL command queue for a sequence
            of commands to be timed by this query object.</para>
            <para>This is useful for simple use-cases. Usually it is better to use
            recordTimestamp().</para>
            <para>See also end(), isResultAvailable(), waitForResult(), and
            recordTimestamp().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.End">
            <summary>
            <para>Marks the end point in the OpenGL command queue for a sequence of
            commands to be timed by this query object.</para>
            <para>This is useful for simple use-cases. Usually it is better to use
            recordTimestamp().</para>
            <para>See also begin(), isResultAvailable(), waitForResult(), and
            recordTimestamp().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.WaitForTimestamp">
            <summary>
            <para>Returns the current timestamp of the GPU when all previously
            issued OpenGL commands have been received but not necessarily executed by
            the GPU.</para>
            <para>This function blocks until the result is returned.</para>
            <para>See also recordTimestamp().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.RecordTimestamp">
            <summary>
            <para>Places a marker in the OpenGL command queue for the GPU to record
            the timestamp when this marker is reached by the GPU. This function is
            non-blocking and the result will become available at some later
            time.</para>
            <para>The availability of the result can be checked with
            isResultAvailable(). The result can be fetched with waitForResult() which
            will block if the result is not yet available.</para>
            <para>See also waitForResult(), isResultAvailable(), begin(), and
            end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimerQuery.WaitForResult">
            <summary>
            <para>Returns the result of the OpenGL timer query.</para>
            <para>This function will block until the result is made available by
            OpenGL. It is recommended to call isResultAvailable() to ensure that the
            result is available to avoid unnecessary blocking and stalling.</para>
            <para>See also isResultAvailable().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimerQuery.IsCreated">
            <summary>
            <para>Returns true if the underlying OpenGL query object has been
            created. If this returns true and the associated OpenGL context is current,
            then you are able to issue queries with this object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimerQuery.ObjectId">
            <summary>
            <para>Returns the id of the underlying OpenGL query object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimerQuery.IsResultAvailable">
            <summary>
            <para>Returns true if the OpenGL timer query result is
            available.</para>
            <para>This function is non-blocking and ideally should be used to check
            for the availability of the query result before calling
            waitForResult().</para>
            <para>See also waitForResult().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLTimeMonitor">
            <summary>
            <para>The QOpenGLTimeMonitor class wraps a sequence of OpenGL timer
            query objects.</para>
            </summary>
            <remarks>
            <para>The QOpenGLTimeMonitor class is a convenience wrapper around a
            collection of OpenGL timer query objects used to measure intervals of time
            on the GPU to the level of granularity required by your rendering
            application.</para>
            <para>The OpenGL timer queries objects are queried in sequence to
            record the GPU timestamps at positions of interest in your rendering code.
            Once the results for all issues timer queries become available, the results
            can be fetched and QOpenGLTimerMonitor will calculate the recorded time
            intervals for you.</para>
            <para>The typical use case of this class is to either profile your
            application's rendering algorithms or to adjust those algorithms in
            real-time for dynamic performance/quality balancing.</para>
            <para>Prior to using QOpenGLTimeMonitor in your rendering function you
            should set the required number of sample points that you wish to record by
            calling setSamples(). Note that measuring N sample points will produce N-1
            time intervals. Once you have set the number of sample points, call the
            create() function with a valid current OpenGL context to create the
            necessary query timer objects. These steps are usually performed just once
            in an initialization function.</para>
            <para>Use the recordSample() function to delimit blocks of code
            containing OpenGL commands that you wish to time. You can check
            availability of the resulting time samples and time intervals with
            isResultAvailable(). The calculated time intervals and the raw timestamp
            samples can be retrieved with the blocking waitForIntervals() and
            waitForSamples() functions respectively.</para>
            <para>After retrieving the results and before starting a new round of
            taking samples (for example, in the next frame) be sure to call the reset()
            function which will clear the cached results and reset the timer index back
            to the first timer object.</para>
            <para></para>
            <para>See also QOpenGLTimerQuery.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLTimeMonitor.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a QOpenGLTimeMonitor instance with the given parent. You
            must call create() with a valid OpenGL context before using.</para>
            <para>See also setSampleCount() and create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimeMonitor.Create">
            <summary>
            <para>Instantiate sampleCount() OpenGL timer query objects that will be
            used to track the amount of time taken to execute OpenGL commands between
            successive calls to recordSample().</para>
            <para>Returns true if the OpenGL timer query objects could be
            created.</para>
            <para>See also destroy(), setSampleCount(), and recordSample().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimeMonitor.Destroy">
            <summary>
            <para>Destroys any OpenGL timer query objects used within this
            instance.</para>
            <para>See also create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLTimeMonitor.Reset">
            <summary>
            <para>Resets the time monitor ready for use in another frame of
            rendering. Call this once you have obtained the previous results and before
            calling recordSample() for the first time on the next frame.</para>
            <para>See also recordSample().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimeMonitor.SampleCount">
            <summary>
            <para>Returns the number of sample points that have been requested with
            setSampleCount(). If create was successfully called following
            setSampleCount(), then the value returned will be the actual number of
            sample points that can be used.</para>
            <para>The default value for sample count is 2, leading to the
            measurement of a single interval.</para>
            <para>See also setSampleCount().</para>
            <para></para>
            <para>Sets the number of sample points to sampleCount. After setting
            the number of samples with this function, you must call create() to
            instantiate the underlying OpenGL timer query objects.</para>
            <para>The new sampleCount must be at least 2.</para>
            <para>See also sampleCount(), create(), and recordSample().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimeMonitor.IsCreated">
            <summary>
            <para>Returns true if the underlying OpenGL query objects have been
            created. If this returns true and the associated OpenGL context is current,
            then you are able to record time samples with this object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimeMonitor.RecordSample">
            <summary>
            <para>Issues an OpenGL timer query at this point in the OpenGL command
            queue. Calling this function in a sequence in your application's rendering
            function, will build up details of the GPU time taken to execute the OpenGL
            commands between successive calls to this function.</para>
            <para>See also setSampleCount(), isResultAvailable(), waitForSamples(),
            and waitForIntervals().</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLTimeMonitor.IsResultAvailable">
            <summary>
            <para>Returns true if the OpenGL timer query results are
            available.</para>
            <para>See also waitForSamples() and waitForIntervals().</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLVertexArrayObject">
            <summary>
            <para>The QOpenGLVertexArrayObject class wraps an OpenGL Vertex Array
            Object.</para>
            </summary>
            <remarks>
            <para>A Vertex Array Object (VAO) is an OpenGL container object that
            encapsulates the state needed to specify per-vertex attribute data to the
            OpenGL pipeline. To put it another way, a VAO remembers the states of
            buffer objects (see QOpenGLBuffer) and their associated state (e.g. vertex
            attribute divisors). This allows a very easy and efficient method of
            switching between OpenGL buffer states for rendering different
            &quot;objects&quot; in a scene. The QOpenGLVertexArrayObject class is a
            thin wrapper around an OpenGL VAO.</para>
            <para>For the desktop, VAOs are supported as a core feature in OpenGL
            3.0 or newer and by the GL_ARB_vertex_array_object for older versions. On
            OpenGL ES 2, VAOs are provided by the optional GL_OES_vertex_array_object
            extension. You can check the version of OpenGL with
            QOpenGLContext::surfaceFormat() and check for the presence of extensions
            with QOpenGLContext::hasExtension().</para>
            <para>As with the other Qt OpenGL classes, QOpenGLVertexArrayObject has
            a create() function to create the underlying OpenGL object. This is to
            allow the developer to ensure that there is a valid current OpenGL context
            at the time.</para>
            <para>Once you have successfully created a VAO the typical usage
            pattern is:</para>
            <para></para>
            <para>In scene initialization function, for each visual object:</para>
            <para>Bind the VAO</para>
            <para>Set vertex data state for this visual object (vertices, normals,
            texture coordinates etc.)</para>
            <para>Unbind (release()) the VAO</para>
            <para></para>
            <para></para>
            <para>In render function, for each visual object:</para>
            <para>Bind the VAO (and shader program if needed)</para>
            <para>Call a glDraw*() function</para>
            <para>Unbind (release()) the VAO</para>
            <para></para>
            <para></para>
            <para></para>
            <para>The act of binding the VAO in the render function has the effect
            of restoring all of the vertex data state setup in the initialization
            phase. In this way we can set a great deal of state when setting up a VAO
            and efficiently switch between state sets of objects to be rendered. Using
            VAOs also allows the OpenGL driver to amortise the validation checks of the
            vertex data.</para>
            <para>Note: Vertex Array Objects, like all other OpenGL container
            objects, are specific to the context for which they were created and cannot
            be shared amongst a context group.</para>
            <para></para>
            <para>See also QOpenGLVertexArrayObject::Binder and
            QOpenGLBuffer.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.#ctor(QtCore.QObject)">
            <summary>
            <para>Creates a QOpenGLVertexArrayObject with the given parent. You
            must call create() with a valid OpenGL context before using.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Create">
            <summary>
            <para>Creates the underlying OpenGL vertex array object. There must be
            a valid OpenGL context that supports vertex array objects current for this
            function to succeed.</para>
            <para>Returns true if the OpenGL vertex array object was successfully
            created.</para>
            <para>When the return value is false, vertex array object support is
            not available. This is not an error: on systems with OpenGL 2.x or OpenGL
            ES 2.0 vertex array objects may not be supported. The application is free
            to continue execution in this case, but it then has to be prepared to
            operate in a VAO-less manner too. This means that instead of merely calling
            bind(), the value of isCreated() must be checked and the vertex arrays has
            to be initialized in the traditional way when there is no vertex array
            object present.</para>
            <para>See also isCreated().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Destroy">
            <summary>
            <para>Destroys the underlying OpenGL vertex array object. There must be
            a valid OpenGL context that supports vertex array objects current for this
            function to succeed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Bind">
            <summary>
            <para>Binds this vertex array object to the OpenGL binding point. From
            this point on and until release() is called or another vertex array object
            is bound, any modifications made to vertex data state are stored inside
            this vertex array object.</para>
            <para>If another vertex array object is then bound you can later
            restore the set of state associated with this object by calling bind() on
            this object once again. This allows efficient changes between vertex data
            states in rendering functions.</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Release">
            <summary>
            <para>Unbinds this vertex array object by binding the default vertex
            array object (id = 0).</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVertexArrayObject.IsCreated">
            <summary>
            <para>Returns true is the underlying OpenGL vertex array object has
            been created. If this returns true and the associated OpenGL context is
            current, then you are able to bind() this object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QOpenGLVertexArrayObject.ObjectId">
            <summary>
            <para>Returns the id of the underlying OpenGL vertex array
            object.</para>
            </summary>
        </member>
        <member name="T:QtGui.QOpenGLVertexArrayObject.Binder">
            <summary>
            <para>The QOpenGLVertexArrayObject::Binder class is a convenience class
            to help with the binding and releasing of OpenGL Vertex Array
            Objects.</para>
            </summary>
            <remarks>
            <para>QOpenGLVertexArrayObject::Binder is a simple convenience class
            that can be used to assist with the binding and releasing of
            QOpenGLVertexArrayObject instances. This class is to
            QOpenGLVertexArrayObject as QMutexLocker is to QMutex.</para>
            <para>This class implements the RAII principle which helps to ensure
            behavior in complex code or in the presence of exceptions.</para>
            <para>The constructor of this class accepts a QOpenGLVertexArrayObject
            (VAO) as an argument and attempts to bind the VAO, calling
            QOpenGLVertexArrayObject::create() if necessary. The destructor of this
            class calls QOpenGLVertexArrayObject::release() which unbinds the
            VAO.</para>
            <para>If needed the VAO can be temporarily unbound with the release()
            function and bound once more with rebind().</para>
            <para></para>
            <para>See also QOpenGLVertexArrayObject.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Binder.#ctor(QtGui.QOpenGLVertexArrayObject)">
            <summary>
            <para>Creates a QOpenGLVertexArrayObject::Binder object and binds v by
            calling QOpenGLVertexArrayObject::bind(). If necessary it first calls
            QOpenGLVertexArrayObject::create().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Binder.Release">
            <summary>
            <para>Can be used to temporarily release the associated vertex array
            object.</para>
            <para>See also rebind().</para>
            </summary>
        </member>
        <member name="M:QtGui.QOpenGLVertexArrayObject.Binder.Rebind">
            <summary>
            <para>Can be used to rebind the associated vertex array object.</para>
            <para>See also release().</para>
            </summary>
        </member>
        <member name="T:QtGui.QBackingStore">
            <summary>
            <para>The QBackingStore class provides a drawing area for
            QWindow.</para>
            </summary>
            <remarks>
            <para>QBackingStore enables the use of QPainter to paint on a QWindow
            with type RasterSurface. The other way of rendering to a QWindow is through
            the use of OpenGL with QOpenGLContext.</para>
            <para>A QBackingStore contains a buffered representation of the window
            contents, and thus supports partial updates by using QPainter to only
            update a sub region of the window contents.</para>
            <para>QBackingStore might be used by an application that wants to use
            QPainter without OpenGL acceleration and without the extra overhead of
            using the QWidget or QGraphicsView UI stacks. For an example of how to use
            QBackingStore see the Raster Window Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QBackingStore.#ctor(QtGui.QWindow)">
            <summary>
            <para>Constructs an empty surface for the given top-level
            window.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBackingStore.Flush(QtGui.QRegion,QtGui.QWindow,QtCore.QPoint)">
            <summary>
            <para>Flushes the given region from the specified window win onto the
            screen.</para>
            <para>Note that the offset parameter is currently unused.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBackingStore.Resize(QtCore.QSize)">
            <summary>
            <para>Sets the size of the windowsurface to be size.</para>
            <para>See also size().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBackingStore.Scroll(QtGui.QRegion,System.Int32,System.Int32)">
            <summary>
            <para>Scrolls the given area dx pixels to the right and dy downward;
            both dx and dy may be negative.</para>
            <para>Returns true if the area was scrolled successfully; false
            otherwise.</para>
            </summary>
        </member>
        <member name="M:QtGui.QBackingStore.BeginPaint(QtGui.QRegion)">
            <summary>
            <para>This function is called before painting onto the surface begins,
            with the region in which the painting will occur.</para>
            <para>See also endPaint() and paintDevice().</para>
            </summary>
        </member>
        <member name="M:QtGui.QBackingStore.EndPaint">
            <summary>
            <para>This function is called after painting onto the surface has
            ended.</para>
            <para>See also beginPaint() and paintDevice().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBackingStore.StaticContents">
            <summary>
            <para>See also setStaticContents().</para>
            <para></para>
            <para>See also staticContents().</para>
            </summary>
        </member>
        <member name="P:QtGui.QBackingStore.Window">
            <summary>
            <para>Returns a pointer to the top-level window associated with this
            surface.</para>
            </summary>
        </member>
        <member name="P:QtGui.QBackingStore.PaintDevice">
            <summary>
            <para>Implement this function to return the appropriate paint
            device.</para>
            </summary>
        </member>
        <member name="P:QtGui.QBackingStore.Size">
            <summary>
            <para>Returns the current size of the windowsurface.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPageSize">
            <summary>
            <para>The QPageSize class describes the size and name of a defined page
            size</para>
            </summary>
            <remarks>
            <para>This class implements support for the set of standard page sizes
            as defined in the Adobe Postscript PPD Standard v4.3. It defines the
            standard set of page sizes in points, millimeters and inches and ensures
            these sizes are consistently used. Other size units can be used but will be
            calculated results and so may not always be consistent. The defined point
            sizes are always a integer, all other sizes can be fractions of a
            unit.</para>
            <para>The defined size is always in width x height order with no
            implied page orientation. Note that it is possible for page sizes to be
            defined where the width is greater than the height, such as
            QPageSize::Ledger, so you cannot rely on comparing the width and height
            values to determine page orientation.</para>
            <para>For example, A4 is defined by the standard as 210mm x 297mm,
            8.27in x 11.69in, or 595pt x 842pt.</para>
            <para>You can also define custom page sizes with custom names in any
            units you want and this unit size will be preserved and used as the base
            for all other unit size calculations.</para>
            <para>When creating a QPageSize using a custom QSize you can choose if
            you want QPageSize to try match the size to a standard page size. By
            default QPaperSize uses a FuzzyMatch mode where it will match a given page
            size to a standard page size if it falls within 3 postscript points of a
            defined standard size. You can override this to request only an exact match
            but this is not recommended as conversions between units can easily lose 3
            points and result in incorrect page sizes.</para>
            <para>A QPageSize instance may also be obtained by querying the
            supported page sizes for a print device. In this case the localized name
            returned is that defined by the printer itself. Note that the print device
            may not support the current default locale language.</para>
            <para>The class also provides convenience methods for converting page
            size IDs to and from various unit sizes.</para>
            <para></para>
            <para>See also QPagedPaintDevice and QPdfWriter.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPageSize.#ctor">
            <summary>
            <para>Creates a null QPageSize.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.#ctor(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Creates a QPageSize of the standard pageSize.</para>
            <para>If pageSize is QPageSize::Custom then the resulting QPageSize
            will not be valid. Use the custom size constructor instead.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.#ctor(QtCore.QSize,System.String,QtGui.QPageSize.SizeMatchPolicy)">
            <summary>
            <para>Creates a QPageSize of the given pointSize in Points using the
            matching matchPolicy.</para>
            <para>If the given pointSize matches a standard QPageSize::PageSizeId,
            then that page size will be used. Note that if the matchPolicy is
            FuzzyMatch this may result in the pointSize being adjusted to the standard
            size. To prevent this happening use a matchPolicy of ExactMatch
            instead.</para>
            <para>If the given pointSize is not a standard QPageSize::PageSizeId
            then a QPageSize::Custom size will be created.</para>
            <para>If name is null then the standard localized name will be used. If
            a custom page size then a custom name in the format &quot;Custom (width x
            height)&quot; will be created.</para>
            <para>The matchPolicy defaults to FuzzyMatch.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.#ctor(QtCore.QSizeF,QtGui.QPageSize.Unit,System.String,QtGui.QPageSize.SizeMatchPolicy)">
            <summary>
            <para>Creates a custom page of the given size in units.</para>
            <para>If the given size matches a standard QPageSize::PageSizeId, then
            that page size will be used. Note that if the matchPolicy is FuzzyMatch
            this may result in the size being adjusted to the standard size. To prevent
            this happening use a matchPolicy of ExactMatch instead.</para>
            <para>If the given size is not a standard QPageSize::PageSizeId then a
            QPageSize::Custom size will be created. The original unit size will be
            preserved and used as the base for all other unit size calculations.</para>
            <para>If name is null then a custom name will be created in the form
            &quot;Custom (width x height)&quot; where the size is expressed in units
            provided.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.#ctor(QtGui.QPageSize)">
            <summary>
            <para>Copy constructor, copies other to this.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Swap(QtGui.QPageSize)">
            <summary>
            <para>Swaps this QPageSize with other. This function is very fast and
            never fails.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.IsEquivalentTo(QtGui.QPageSize)">
            <summary>
            <para>Returns true if this page is equivalent to the other page, i.e.
            if the page has the same size regardless of other attributes like
            name.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Key">
            <summary>
            <para>Returns the unique key of the page size.</para>
            <para>By default this is the PPD standard mediaOption keyword for the
            page size, or the PPD custom format key. If the QPageSize instance was
            obtained from a print device then this will be the key provided by the
            print device and may differ from the standard key.</para>
            <para>If the QPageSize is invalid then the key will be an empty
            string.</para>
            <para>This key should never be shown to end users, it is an internal
            key only. For a human-readable name use name().</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Name">
            <summary>
            <para>Returns a localized human-readable name for the page size.</para>
            <para>If the QPageSize instance was obtained from a print device then
            the name used is that provided by the print device. Note that a print
            device may not support the current default locale language.</para>
            <para>If the QPageSize is invalid then the name will be an empty
            string.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Id">
            <summary>
            <para>Returns the standard QPageSize::PageSizeId of the page, or
            QPageSize::Custom.</para>
            <para>If the QPageSize is invalid then the ID will be
            QPageSize::Custom.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.WindowsId">
            <summary>
            <para>Returns the Windows DMPAPER enum value for the page size.</para>
            <para>Not all valid PPD page sizes have a Windows equivalent, in which
            case 0 will be returned.</para>
            <para>If the QPageSize is invalid then the Windows ID will be 0.</para>
            <para>See also id().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.DefinitionSize">
            <summary>
            <para>Returns the definition size of the page size.</para>
            <para>For a standard page size this will be the size as defined in the
            relevant standard, i.e. ISO A4 will be defined in millimeters while ANSI
            Letter will be defined in inches.</para>
            <para>For a custom page size this will be the original size used to
            create the page size object.</para>
            <para>If the QPageSize is invalid then the QSizeF will be
            invalid.</para>
            <para>See also definitionUnits().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.DefinitionUnits">
            <summary>
            <para>Returns the definition units of the page size.</para>
            <para>For a standard page size this will be the units as defined in the
            relevant standard, i.e. ISO A4 will be defined in millimeters while ANSI
            Letter will be defined in inches.</para>
            <para>For a custom page size this will be the original units used to
            create the page size object.</para>
            <para>If the QPageSize is invalid then the QPageSize::Unit will be
            invalid.</para>
            <para>See also definitionSize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Size(QtGui.QPageSize.Unit)">
            <summary>
            <para>Returns the size of the page in the required units.</para>
            <para>If the QPageSize is invalid then the QSizeF will be
            invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.SizePoints">
            <summary>
            <para>Returns the size of the page in Postscript Points (1/72 of an
            inch).</para>
            <para>If the QPageSize is invalid then the QSize will be
            invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.SizePixels(System.Int32)">
            <summary>
            <para>Returns the size of the page in Device Pixels at the given
            resolution.</para>
            <para>If the QPageSize is invalid then the QSize will be
            invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Rect(QtGui.QPageSize.Unit)">
            <summary>
            <para>Returns the page rectangle in the required units.</para>
            <para>If the QPageSize is invalid then the QRect will be
            invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.RectPixels(System.Int32)">
            <summary>
            <para>Returns the page rectangle in Device Pixels at the given
            resolution.</para>
            <para>If the QPageSize is invalid then the QRect will be
            invalid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Key(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the PPD mediaOption keyword of the standard
            pageSizeId.</para>
            <para>If the QPageSize is invalid then the key will be empty.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Name(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the localized name of the standard pageSizeId.</para>
            <para>If the QPageSize is invalid then the name will be empty.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Id(QtCore.QSize,QtGui.QPageSize.SizeMatchPolicy)">
            <summary>
            <para>Returns the standard QPageSize::PageSizeId of the given pointSize
            in points using the given matchPolicy.</para>
            <para>If using FuzzyMatch then the point size of the PageSizeId
            returned may not exactly match the pointSize you passed in. You should call
            QPageSize::sizePoints() using the returned PageSizeId to find out the
            actual point size of the PageSizeId before using it in any
            calculations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Id(QtCore.QSizeF,QtGui.QPageSize.Unit,QtGui.QPageSize.SizeMatchPolicy)">
            <summary>
            <para>Returns the standard QPageSize::PageSizeId of the given size in
            units using the given matchPolicy.</para>
            <para>If using FuzzyMatch then the unit size of the PageSizeId returned
            may not exactly match the size you passed in. You should call
            QPageSize::size() using the returned PageSizeId to find out the actual unit
            size of the PageSizeId before using it in any calculations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Id(System.Int32)">
            <summary>
            <para>Returns the PageSizeId for the given Windows DMPAPER enum value
            windowsId.</para>
            <para>If there is no matching PageSizeId then QPageSize::Custom is
            returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.WindowsId(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the Windows DMPAPER enum value of the standard
            pageSizeId.</para>
            <para>Not all valid PPD page sizes have a Windows equivalent, in which
            case 0 will be returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.DefinitionSize(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the definition size of the standard pageSizeId.</para>
            <para>To obtain the definition units, call
            QPageSize::definitionUnits().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.DefinitionUnits(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the definition units of the standard pageSizeId.</para>
            <para>To obtain the definition size, call
            QPageSize::definitionSize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.Size(QtGui.QPageSize.PageSizeId,QtGui.QPageSize.Unit)">
            <summary>
            <para>Returns the size of the standard pageSizeId in the requested
            units.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.SizePoints(QtGui.QPageSize.PageSizeId)">
            <summary>
            <para>Returns the size of the standard pageSizeId in Points.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.SizePixels(QtGui.QPageSize.PageSizeId,System.Int32)">
            <summary>
            <para>Returns the size of the standard pageSizeId in Device Pixels for
            the given resolution.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.op_Equality(QtGui.QPageSize,QtGui.QPageSize)">
            <summary>
            <para>Returns true if page size lhs is equal to page size rhs, i.e. if
            the page sizes have the same attributes. Current attributes are size and
            name.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageSize.op_Inequality(QtGui.QPageSize,QtGui.QPageSize)">
            <summary>
            <para>Returns true if page size lhs is unequal to page size rhs, i.e.
            if the page size has different attributes. Current attributes are size and
            name.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageSize.IsValid">
            <summary>
            <para>Returns true if this page size is valid.</para>
            <para>The page size may be invalid if created with an invalid
            PageSizeId, or a negative or invalid QSize or QSizeF, or the null
            constructor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageSize.RectPoints">
            <summary>
            <para>Returns the page rectangle in Postscript Points (1/72 of an
            inch).</para>
            <para>If the QPageSize is invalid then the QRect will be
            invalid.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPageSize.PageSizeId">
            <summary>
            <para>This enum type lists the available page sizes as defined in the
            Postscript PPD standard. These values are duplicated in QPagedPaintDevice
            and QPrinter.</para>
            <para>The defined sizes are:</para>
            <para>Due to historic reasons QPageSize::Executive is not the same as
            the standard Postscript and Windows Executive size, use
            QPageSize::ExecutiveStandard instead.</para>
            <para>The Postscript standard size QPageSize::Folio is different to the
            Windows DMPAPER_FOLIO size, use the Postscript standard size
            QPageSize::FanFoldGermanLegal if needed.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A4">
            <summary>210 x 297 mm, 8.26 x 11.69 inches</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B5">
            <summary>176 x 250 mm, 6.93 x 9.84 inches</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Letter">
            <summary>8.5 x 11 inches, 215.9 x 279.4 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Legal">
            <summary>8.5 x 14 inches, 215.9 x 355.6 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Executive">
            <summary>7.5 x 10 inches, 190.5 x 254 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A0">
            <summary>841 x 1189 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A1">
            <summary>594 x 841 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A2">
            <summary>420 x 594 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A3">
            <summary>297 x 420 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A5">
            <summary>148 x 210 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A6">
            <summary>105 x 148 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A7">
            <summary>74 x 105 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A8">
            <summary>52 x 74 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.A9">
            <summary>37 x 52 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B0">
            <summary>1000 x 1414 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B1">
            <summary>707 x 1000 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B10">
            <summary>31 x 44 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B2">
            <summary>500 x 707 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B3">
            <summary>353 x 500 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B4">
            <summary>250 x 353 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B6">
            <summary>125 x 176 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B7">
            <summary>88 x 125 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B8">
            <summary>62 x 88 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.B9">
            <summary>44 x 62 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.C5E">
            <summary>163 x 229 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Comm10E">
            <summary>105 x 241 mm, U.S. Common 10 Envelope</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.DLE">
            <summary>110 x 220 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Folio">
            <summary>210 x 330 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Ledger">
            <summary>431.8 x 279.4 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Tabloid">
            <summary>279.4 x 431.8 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Custom">
            <summary>Unknown, or a user defined size.</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.JisB6">
            <summary>,</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.LastPageSize">
            <summary>= EnvelopeYou4</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.AnsiA">
            <summary>= Letter</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.AnsiB">
            <summary>= Ledger</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.EnvelopeC5">
            <summary>= C5E</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.EnvelopeDL">
            <summary>= DLE</summary>
        </member>
        <member name="F:QtGui.QPageSize.PageSizeId.Envelope10">
            <summary>= Comm10E</summary>
        </member>
        <member name="T:QtGui.QPageSize.Unit">
            <summary>
            <para>This enum type is used to specify the measurement unit for page
            sizes.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPageSize.Unit.Point">
            <summary>1/72th of an inch</summary>
        </member>
        <member name="F:QtGui.QPageSize.Unit.Pica">
            <summary>1/72th of a foot, 1/6th of an inch, 12 Points</summary>
        </member>
        <member name="F:QtGui.QPageSize.Unit.Didot">
            <summary>1/72th of a French inch, 0.375 mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.Unit.Cicero">
            <summary>1/6th of a French inch, 12 Didot, 4.5mm</summary>
        </member>
        <member name="F:QtGui.QPageSize.SizeMatchPolicy.FuzzyMatch">
            <summary>Match to a standard page size if within the margin of tolerance.</summary>
        </member>
        <member name="F:QtGui.QPageSize.SizeMatchPolicy.FuzzyOrientationMatch">
            <summary>Match to a standard page size if within the margin of tolerance regardless of orientation.</summary>
        </member>
        <member name="F:QtGui.QPageSize.SizeMatchPolicy.ExactMatch">
            <summary>Only match to a standard page size if the sizes match exactly.</summary>
        </member>
        <member name="T:QtGui.QPageLayout">
            <summary>
            <para>Describes the size, orientation and margins of a page.</para>
            </summary>
            <remarks>
            <para>The QPageLayout class defines the layout of a page in a paged
            document, with the page size, orientation and margins able to be set and
            the full page and paintable page rectangles defined by those attributes
            able to be queried in a variety of units.</para>
            <para>The page size is defined by the QPageSize class which can be
            queried for page size attributes. Note that the QPageSize itself is always
            defined in a Portrait orientation.</para>
            <para>The minimum margins can be defined for the layout but normally
            default to 0. When used in conjunction with Qt's printing support the
            minimum margins will reflect the minimum printable area defined by the
            printer.</para>
            <para>In the default StandardMode the current margins and minimum
            margins are always taken into account. The paintable rectangle is the full
            page rectangle less the current margins, and the current margins can only
            be set to values between the minimum margins and the maximum margins
            allowed by the full page size.</para>
            <para>In FullPageMode the current margins and minimum margins are not
            taken into account. The paintable rectangle is the full page rectangle, and
            the current margins can be set to any values regardless of the minimum
            margins and page size.</para>
            <para></para>
            <para>See also QPageSize.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPageLayout.#ctor">
            <summary>
            <para>Creates an invalid QPageLayout.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.#ctor(QtGui.QPageSize,QtGui.QPageLayout.Orientation,QtCore.QMarginsF,QtGui.QPageLayout.Unit,QtCore.QMarginsF)">
            <summary>
            <para>Creates a QPageLayout with the given pageSize, orientation and
            margins in the given units.</para>
            <para>Optionally define the minimum allowed margins minMargins, e.g.
            the minimum margins able to be printed by a physical print device.</para>
            <para>The constructed QPageLayout will be in StandardMode.</para>
            <para>The margins given will be clamped to the minimum margins and the
            maximum margins allowed by the page size.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.#ctor(QtGui.QPageLayout)">
            <summary>
            <para>Copy constructor, copies other to this.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.#ctor(QtGui.QPageSize,QtGui.QPageLayout.Orientation,QtCore.QMarginsF,QtGui.QPageLayout.Unit)">
            <summary>
            <para>Creates a QPageLayout with the given pageSize, orientation and
            margins in the given units.</para>
            <para>Optionally define the minimum allowed margins minMargins, e.g.
            the minimum margins able to be printed by a physical print device.</para>
            <para>The constructed QPageLayout will be in StandardMode.</para>
            <para>The margins given will be clamped to the minimum margins and the
            maximum margins allowed by the page size.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.Swap(QtGui.QPageLayout)">
            <summary>
            <para>Swaps this page layout with other. This function is very fast and
            never fails.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.IsEquivalentTo(QtGui.QPageLayout)">
            <summary>
            <para>Returns true if this page layout is equivalent to the other page
            layout, i.e. if the page has the same size, margins and orientation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetPageSize(QtGui.QPageSize,QtCore.QMarginsF)">
            <summary>
            <para>Sets the page size of the page layout to pageSize.</para>
            <para>Optionally define the minimum allowed margins minMargins, e.g.
            the minimum margins able to be printed by a physical print device,
            otherwise the minimum margins will default to 0.</para>
            <para>If StandardMode is set then the existing margins will be clamped
            to the new minimum margins and the maximum margins allowed by the page
            size. If FullPageMode is set then the existing margins will be
            unchanged.</para>
            <para>See also pageSize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetMargins(QtCore.QMarginsF)">
            <summary>
            <para>Sets the page margins of the page layout to margins Returns true
            if the margins were successfully set.</para>
            <para>The units used are those currently defined for the layout. To use
            different units then call setUnits() first.</para>
            <para>If in the default StandardMode then all the new margins must fall
            between the minimum margins set and the maximum margins allowed by the page
            size, otherwise the margins will not be set.</para>
            <para>If in FullPageMode then any margin values will be
            accepted.</para>
            <para>See also margins() and units().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetLeftMargin(System.Double)">
            <summary>
            <para>Sets the left page margin of the page layout to leftMargin.
            Returns true if the margin was successfully set.</para>
            <para>The units used are those currently defined for the layout. To use
            different units call setUnits() first.</para>
            <para>If in the default StandardMode then the new margin must fall
            between the minimum margin set and the maximum margin allowed by the page
            size, otherwise the margin will not be set.</para>
            <para>If in FullPageMode then any margin values will be
            accepted.</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetRightMargin(System.Double)">
            <summary>
            <para>Sets the right page margin of the page layout to rightMargin.
            Returns true if the margin was successfully set.</para>
            <para>The units used are those currently defined for the layout. To use
            different units call setUnits() first.</para>
            <para>If in the default StandardMode then the new margin must fall
            between the minimum margin set and the maximum margin allowed by the page
            size, otherwise the margin will not be set.</para>
            <para>If in FullPageMode then any margin values will be
            accepted.</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetTopMargin(System.Double)">
            <summary>
            <para>Sets the top page margin of the page layout to topMargin. Returns
            true if the margin was successfully set.</para>
            <para>The units used are those currently defined for the layout. To use
            different units call setUnits() first.</para>
            <para>If in the default StandardMode then the new margin must fall
            between the minimum margin set and the maximum margin allowed by the page
            size, otherwise the margin will not be set.</para>
            <para>If in FullPageMode then any margin values will be
            accepted.</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetBottomMargin(System.Double)">
            <summary>
            <para>Sets the bottom page margin of the page layout to bottomMargin.
            Returns true if the margin was successfully set.</para>
            <para>The units used are those currently defined for the layout. To use
            different units call setUnits() first.</para>
            <para>If in the default StandardMode then the new margin must fall
            between the minimum margin set and the maximum margin allowed by the page
            size, otherwise the margin will not be set.</para>
            <para>If in FullPageMode then any margin values will be
            accepted.</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.Margins">
            <summary>
            <para>Returns the margins of the page layout using the currently set
            units.</para>
            <para>See also setMargins() and units().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.Margins(QtGui.QPageLayout.Unit)">
            <summary>
            <para>Returns the margins of the page layout using the requested
            units.</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.MarginsPixels(System.Int32)">
            <summary>
            <para>Returns the margins of the page layout in device pixels for the
            given resolution.</para>
            <para>See also setMargins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.FullRect">
            <summary>
            <para>Returns the full page rectangle in the current layout
            units.</para>
            <para>The page rectangle takes into account the page size and page
            orientation, but not the page margins.</para>
            <para>See also paintRect() and units().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.FullRect(QtGui.QPageLayout.Unit)">
            <summary>
            <para>Returns the full page rectangle in the required units.</para>
            <para>The page rectangle takes into account the page size and page
            orientation, but not the page margins.</para>
            <para>See also paintRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.FullRectPixels(System.Int32)">
            <summary>
            <para>Returns the full page rectangle in device pixels for the given
            resolution.</para>
            <para>The page rectangle takes into account the page size and page
            orientation, but not the page margins.</para>
            <para>See also paintRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.PaintRect">
            <summary>
            <para>Returns the page rectangle in the current layout units.</para>
            <para>The paintable rectangle takes into account the page size,
            orientation and margins.</para>
            <para>If the FullPageMode mode is set then the fullRect() is returned
            and the margins must be manually managed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.PaintRect(QtGui.QPageLayout.Unit)">
            <summary>
            <para>Returns the page rectangle in the required units.</para>
            <para>The paintable rectangle takes into account the page size,
            orientation and margins.</para>
            <para>If the FullPageMode mode is set then the fullRect() is returned
            and the margins must be manually managed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.PaintRectPixels(System.Int32)">
            <summary>
            <para>Returns the paintable rectangle in rounded device pixels for the
            given resolution.</para>
            <para>The paintable rectangle takes into account the page size,
            orientation and margins.</para>
            <para>If the FullPageMode mode is set then the fullRect() is returned
            and the margins must be manually managed.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.SetPageSize(QtGui.QPageSize)">
            <summary>
            <para>Sets the page size of the page layout to pageSize.</para>
            <para>Optionally define the minimum allowed margins minMargins, e.g.
            the minimum margins able to be printed by a physical print device,
            otherwise the minimum margins will default to 0.</para>
            <para>If StandardMode is set then the existing margins will be clamped
            to the new minimum margins and the maximum margins allowed by the page
            size. If FullPageMode is set then the existing margins will be
            unchanged.</para>
            <para>See also pageSize().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.op_Equality(QtGui.QPageLayout,QtGui.QPageLayout)">
            <summary>
            <para>Returns true if page layout lhs is equal to page layout rhs, i.e.
            if all the attributes are exactly equal.</para>
            <para>Note that this is a strict equality, especially for page size
            where the QPageSize ID, name and size must exactly match, and the margins
            where the units must match.</para>
            <para>See also QPageLayout::isEquivalentTo().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPageLayout.op_Inequality(QtGui.QPageLayout,QtGui.QPageLayout)">
            <summary>
            <para>Returns true if page layout lhs is not equal to page layout rhs,
            i.e. if any of the attributes differ.</para>
            <para>Note that this is a strict equality, especially for page size
            where the QPageSize ID, name and size must exactly match, and the margins
            where the units must match.</para>
            <para>See also QPageLayout::isEquivalentTo().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.mode">
            <summary>
            <para>Returns the page layout mode.</para>
            <para>See also setMode().</para>
            <para></para>
            <para>Sets a page layout mode to mode.</para>
            <para>See also mode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.orientation">
            <summary>
            <para>Returns the page orientation of the page layout.</para>
            <para>See also setOrientation().</para>
            <para></para>
            <para>Sets the page orientation of the page layout to
            orientation.</para>
            <para>Changing the orientation does not affect the current margins or
            the minimum margins.</para>
            <para>See also orientation().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.Units">
            <summary>
            <para>Returns the units the page layout is currently defined in.</para>
            <para>See also setUnits().</para>
            <para></para>
            <para>Sets the units used to define the page layout.</para>
            <para>See also units().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.MinimumMargins">
            <summary>
            <para>Returns the minimum margins of the page layout.</para>
            <para>See also setMinimumMargins() and maximumMargins().</para>
            <para></para>
            <para>Sets the minimum page margins of the page layout to
            minMargins.</para>
            <para>It is not recommended to override the default values set for a
            page size as this may be the minimum printable area for a physical print
            device.</para>
            <para>If the StandardMode mode is set then the existing margins will be
            clamped to the new minMargins and the maximum allowed by the page size. If
            the FullPageMode is set then the existing margins will be unchanged.</para>
            <para>See also minimumMargins() and setMargins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.PageSize">
            <summary>
            <para>Returns the page size of the page layout.</para>
            <para>Note that the QPageSize is always defined in a Portrait
            orientation. To obtain a size that takes the set orientation into account
            you must use fullRect().</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.IsValid">
            <summary>
            <para>Returns true if this page layout is valid.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.MarginsPoints">
            <summary>
            <para>Returns the margins of the page layout in Postscript Points (1/72
            of an inch).</para>
            <para>See also setMargins() and margins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.MaximumMargins">
            <summary>
            <para>Returns the maximum margins that would be applied if the page
            layout was in StandardMode.</para>
            <para>The maximum margins allowed are calculated as the full size of
            the page minus the minimum margins set. For example, if the page width is
            100 points and the minimum right margin is 10 points, then the maximum left
            margin will be 90 points.</para>
            <para>See also setMinimumMargins() and minimumMargins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.FullRectPoints">
            <summary>
            <para>Returns the full page rectangle in Postscript Points (1/72 of an
            inch).</para>
            <para>The page rectangle takes into account the page size and page
            orientation, but not the page margins.</para>
            <para>See also paintRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPageLayout.PaintRectPoints">
            <summary>
            <para>Returns the paintable rectangle in rounded Postscript Points
            (1/72 of an inch).</para>
            <para>The paintable rectangle takes into account the page size,
            orientation and margins.</para>
            <para>If the FullPageMode mode is set then the fullRect() is returned
            and the margins must be manually managed.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPageLayout.Unit">
            <summary>
            <para>This enum type is used to specify the measurement unit for page
            layout and margins.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPageLayout.Unit.Point">
            <summary>1/72th of an inch</summary>
        </member>
        <member name="F:QtGui.QPageLayout.Unit.Pica">
            <summary>1/72th of a foot, 1/6th of an inch, 12 Points</summary>
        </member>
        <member name="F:QtGui.QPageLayout.Unit.Didot">
            <summary>1/72th of a French inch, 0.375 mm</summary>
        </member>
        <member name="F:QtGui.QPageLayout.Unit.Cicero">
            <summary>1/6th of a French inch, 12 Didot, 4.5mm</summary>
        </member>
        <member name="T:QtGui.QPageLayout.Orientation">
            <summary>
            <para>This enum type defines the page orientation</para>
            <para>Note that some standard page sizes are defined with a width
            larger than their height, hence the orientation is defined relative to the
            standard page size and not using the relative page dimensions.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPageLayout.Orientation.Portrait">
            <summary>The page size is used in its default orientation</summary>
        </member>
        <member name="F:QtGui.QPageLayout.Orientation.Landscape">
            <summary>The page size is rotated through 90 degrees</summary>
        </member>
        <member name="T:QtGui.QPageLayout.Mode">
            <summary>
            <para>Defines the page layout mode</para>
            </summary>
        </member>
        <member name="F:QtGui.QPageLayout.Mode.StandardMode">
            <summary>Paint Rect includes margins, margins must fall between the minimum and maximum.</summary>
        </member>
        <member name="F:QtGui.QPageLayout.Mode.FullPageMode">
            <summary>Paint Rect excludes margins, margins can be any value and must be managed manually.</summary>
        </member>
        <member name="T:QtGui.QPagedPaintDevice">
            <summary>
            <para>The QPagedPaintDevice class is a represents a paintdevice that
            supports multiple pages.</para>
            </summary>
            <remarks>
            <para>Paged paint devices are used to generate output for printing or
            for formats like PDF. QPdfWriter and QPrinter inherit from it.</para>
            </remarks>
        </member>
        <member name="T:QtGui.IQPagedPaintDevice">
            <summary>
            <para>The QPagedPaintDevice class is a represents a paintdevice that
            supports multiple pages.</para>
            </summary>
            <remarks>
            <para>Paged paint devices are used to generate output for printing or
            for formats like PDF. QPdfWriter and QPrinter inherit from it.</para>
            </remarks>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.NewPage">
            <summary>
            <para>Starts a new page. Returns true on success.</para>
            </summary>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.SetPageLayout(QtGui.QPageLayout)">
            <summary>
            <para>Sets the page layout to newPageLayout.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page layout to a new
            page. You should not call any painting methods between a call to
            setPageLayout() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>Returns true if the page layout was successfully set to
            newPageLayout.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.SetPageSize(QtGui.QPageSize)">
            <summary>
            <para>Sets the page size to pageSize.</para>
            <para>To get the current QPageSize use pageLayout().pageSize().</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page size to a new
            page. You should not call any painting methods between a call to
            setPageSize() and newPage() as the wrong paint metrics may be used.</para>
            <para>Returns true if the page size was successfully set to
            pageSize.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageSize() and pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.SetPageOrientation(QtGui.QPageLayout.Orientation)">
            <summary>
            <para>Sets the page orientation.</para>
            <para>The page orientation is used to define the orientation of the
            page size when obtaining the page rect.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new orientation to a new
            page. You should not call any painting methods between a call to
            setPageOrientation() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current QPageLayout::Orientation use
            pageLayout().pageOrientation().</para>
            <para>Returns true if the page orientation was successfully set to
            orientation.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.SetPageMargins(QtCore.QMarginsF)">
            <summary>
            <para>Set the page margins in the current page layout units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.IQPagedPaintDevice.SetPageMargins(QtCore.QMarginsF,QtGui.QPageLayout.Unit)">
            <summary>
            <para>Set the page margins defined in the given units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPagedPaintDevice.pageSize">
            <summary>
            <para>Returns the currently used page size.</para>
            <para>See also setPageSize().</para>
            <para></para>
            <para>Sets the size of the a page to size.</para>
            <para>See also setPageSizeMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPagedPaintDevice.PageSizeMM">
            <summary>
            <para>Returns the page size in millimeters.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Sets the page size to size. size is specified in
            millimeters.</para>
            <para>If the size matches a standard QPagedPaintDevice::PageSize then
            that page size will be used, otherwise QPagedPaintDevice::Custom will be
            set.</para>
            <para>See also pageSizeMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPagedPaintDevice.margins">
            <summary>
            <para>Returns the current margins of the paint device. The default is
            0.</para>
            <para>Margins are specified in millimeters.</para>
            <para>See also setMargins().</para>
            <para></para>
            <para>Sets the margins to be used to margins.</para>
            <para>Margins are specified in millimeters.</para>
            <para>The margins are purely a hint to the drawing method. They don't
            affect the coordinate system or clipping.</para>
            <para>See also margins().</para>
            </summary>
        </member>
        <member name="P:QtGui.IQPagedPaintDevice.PageLayout">
            <summary>
            <para>Returns the current page layout. Use this method to access the
            current QPageSize, QPageLayout::Orientation, QMarginsF, fullRect() and
            paintRect().</para>
            <para>Note that you cannot use the setters on the returned object, you
            must either call the individual QPagedPaintDevice setters or use
            setPageLayout().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setPageLayout(), setPageSize(), setPageOrientation(),
            and setPageMargins().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.#ctor">
            <summary>
            <para>Constructs a new paged paint device.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.NewPage">
            <summary>
            <para>Starts a new page. Returns true on success.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.SetPageLayout(QtGui.QPageLayout)">
            <summary>
            <para>Sets the page layout to newPageLayout.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page layout to a new
            page. You should not call any painting methods between a call to
            setPageLayout() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>Returns true if the page layout was successfully set to
            newPageLayout.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.SetPageSize(QtGui.QPageSize)">
            <summary>
            <para>Sets the page size to pageSize.</para>
            <para>To get the current QPageSize use pageLayout().pageSize().</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page size to a new
            page. You should not call any painting methods between a call to
            setPageSize() and newPage() as the wrong paint metrics may be used.</para>
            <para>Returns true if the page size was successfully set to
            pageSize.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageSize() and pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.SetPageOrientation(QtGui.QPageLayout.Orientation)">
            <summary>
            <para>Sets the page orientation.</para>
            <para>The page orientation is used to define the orientation of the
            page size when obtaining the page rect.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new orientation to a new
            page. You should not call any painting methods between a call to
            setPageOrientation() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current QPageLayout::Orientation use
            pageLayout().pageOrientation().</para>
            <para>Returns true if the page orientation was successfully set to
            orientation.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.SetPageMargins(QtCore.QMarginsF)">
            <summary>
            <para>Set the page margins in the current page layout units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPagedPaintDevice.SetPageMargins(QtCore.QMarginsF,QtGui.QPageLayout.Unit)">
            <summary>
            <para>Set the page margins defined in the given units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPagedPaintDevice.pageSize">
            <summary>
            <para>Returns the currently used page size.</para>
            <para>See also setPageSize().</para>
            <para></para>
            <para>Sets the size of the a page to size.</para>
            <para>See also setPageSizeMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPagedPaintDevice.PageSizeMM">
            <summary>
            <para>Returns the page size in millimeters.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Sets the page size to size. size is specified in
            millimeters.</para>
            <para>If the size matches a standard QPagedPaintDevice::PageSize then
            that page size will be used, otherwise QPagedPaintDevice::Custom will be
            set.</para>
            <para>See also pageSizeMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPagedPaintDevice.margins">
            <summary>
            <para>Returns the current margins of the paint device. The default is
            0.</para>
            <para>Margins are specified in millimeters.</para>
            <para>See also setMargins().</para>
            <para></para>
            <para>Sets the margins to be used to margins.</para>
            <para>Margins are specified in millimeters.</para>
            <para>The margins are purely a hint to the drawing method. They don't
            affect the coordinate system or clipping.</para>
            <para>See also margins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPagedPaintDevice.PageLayout">
            <summary>
            <para>Returns the current page layout. Use this method to access the
            current QPageSize, QPageLayout::Orientation, QMarginsF, fullRect() and
            paintRect().</para>
            <para>Note that you cannot use the setters on the returned object, you
            must either call the individual QPagedPaintDevice setters or use
            setPageLayout().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setPageLayout(), setPageSize(), setPageOrientation(),
            and setPageMargins().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPagedPaintDevice.PageSize">
            <summary>
            <para>This enum type lists the available page sizes as defined in the
            Postscript PPD standard. These values are duplicated in QPageSize and
            QPrinter.</para>
            <para>The defined sizes are:</para>
            <para>Due to historic reasons QPageSize::Executive is not the same as
            the standard Postscript and Windows Executive size, use
            QPageSize::ExecutiveStandard instead.</para>
            <para>The Postscript standard size QPageSize::Folio is different to the
            Windows DMPAPER_FOLIO size, use the Postscript standard size
            QPageSize::FanFoldGermanLegal if needed.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A4">
            <summary>210 x 297 mm, 8.26 x 11.69 inches</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B5">
            <summary>176 x 250 mm, 6.93 x 9.84 inches</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Letter">
            <summary>8.5 x 11 inches, 215.9 x 279.4 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Legal">
            <summary>8.5 x 14 inches, 215.9 x 355.6 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Executive">
            <summary>7.5 x 10 inches, 190.5 x 254 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A0">
            <summary>841 x 1189 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A1">
            <summary>594 x 841 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A2">
            <summary>420 x 594 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A3">
            <summary>297 x 420 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A5">
            <summary>148 x 210 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A6">
            <summary>105 x 148 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A7">
            <summary>74 x 105 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A8">
            <summary>52 x 74 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.A9">
            <summary>37 x 52 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B0">
            <summary>1000 x 1414 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B1">
            <summary>707 x 1000 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B10">
            <summary>31 x 44 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B2">
            <summary>500 x 707 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B3">
            <summary>353 x 500 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B4">
            <summary>250 x 353 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B6">
            <summary>125 x 176 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B7">
            <summary>88 x 125 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B8">
            <summary>62 x 88 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.B9">
            <summary>33 x 62 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.C5E">
            <summary>163 x 229 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Comm10E">
            <summary>105 x 241 mm, U.S. Common 10 Envelope</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.DLE">
            <summary>110 x 220 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Folio">
            <summary>210 x 330 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Ledger">
            <summary>431.8 x 279.4 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Tabloid">
            <summary>279.4 x 431.8 mm</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Custom">
            <summary>Unknown, or a user defined size.</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.JisB6">
            <summary>,</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.LastPageSize">
            <summary>= EnvelopeYou4</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.AnsiA">
            <summary>= Letter</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.AnsiB">
            <summary>= Ledger</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.EnvelopeC5">
            <summary>= C5E</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.EnvelopeDL">
            <summary>= DLE</summary>
        </member>
        <member name="F:QtGui.QPagedPaintDevice.PageSize.Envelope10">
            <summary>= Comm10E</summary>
        </member>
        <member name="T:QtGui.QTextOption">
            <summary>
            <para>The QTextOption class provides a description of general rich text
            properties.</para>
            </summary>
            <remarks>
            <para>QTextOption is used to encapsulate common rich text properties in
            a single object. It contains information about text alignment, layout
            direction, word wrapping, and other standard properties associated with
            text rendering and layout.</para>
            <para></para>
            <para>See also QTextEdit, QTextDocument, and QTextCursor.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextOption.#ctor">
            <summary>
            <para>Constructs a text option with default properties for text. The
            text alignment property is set to Qt::AlignLeft. The word wrap property is
            set to QTextOption::WordWrap. The using of design metrics flag is set to
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.#ctor(QtCore.Qt.AlignmentFlag)">
            <summary>
            <para>Constructs a text option with the given alignment for text. The
            word wrap property is set to QTextOption::WordWrap. The using of design
            metrics flag is set to false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.#ctor(QtGui.QTextOption)">
            <summary>
            <para>Construct a copy of the other text option.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.Alignment">
            <summary>
            <para>Returns the text alignment defined by the option.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the option's text alignment to the specified
            alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.TextDirection">
            <summary>
            <para>Returns the direction of the text layout defined by the
            option.</para>
            <para>See also setTextDirection().</para>
            <para></para>
            <para>Sets the direction of the text layout defined by the option to
            the given direction.</para>
            <para>See also textDirection().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.wrapMode">
            <summary>
            <para>Returns the text wrap mode defined by the option.</para>
            <para>See also setWrapMode().</para>
            <para></para>
            <para>Sets the option's text wrap mode to the given mode.</para>
            <para>See also wrapMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.Flags">
            <summary>
            <para>Returns the flags associated with the option.</para>
            <para>See also setFlags().</para>
            <para></para>
            <para>Sets the flags associated with the option to the given
            flags.</para>
            <para>See also flags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.TabStop">
            <summary>
            <para>Returns the distance in device units between tab stops.
            Convenient function for the above method</para>
            <para>See also setTabStop(), tabArray(), setTabs(), and tabs().</para>
            <para></para>
            <para>Sets the default distance in device units between tab stops to
            the value specified by tabStop.</para>
            <para>See also tabStop(), setTabArray(), setTabs(), and tabs().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.UseDesignMetrics">
            <summary>
            <para>Returns true if the layout uses design rather than device
            metrics; otherwise returns false.</para>
            <para>See also setUseDesignMetrics().</para>
            <para></para>
            <para>If enable is true then the layout will use design metrics;
            otherwise it will use the metrics of the paint device (which is the default
            behavior).</para>
            <para>See also useDesignMetrics().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextOption.TabType">
            <summary>
            <para>This enum holds the different types of tabulator</para>
            <para>This enum was introduced or modified in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextOption.TabType.LeftTab">
            <summary>A left-tab</summary>
        </member>
        <member name="F:QtGui.QTextOption.TabType.RightTab">
            <summary>A right-tab</summary>
        </member>
        <member name="F:QtGui.QTextOption.TabType.CenterTab">
            <summary>A centered-tab</summary>
        </member>
        <member name="F:QtGui.QTextOption.TabType.DelimiterTab">
            <summary>A tab stopping at a certain delimiter-character</summary>
        </member>
        <member name="T:QtGui.QTextOption.WrapMode">
            <summary>
            <para>This enum describes how text is wrapped in a document.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextOption.WrapMode.NoWrap">
            <summary>Text is not wrapped at all.</summary>
        </member>
        <member name="F:QtGui.QTextOption.WrapMode.WordWrap">
            <summary>Text is wrapped at word boundaries.</summary>
        </member>
        <member name="F:QtGui.QTextOption.WrapMode.ManualWrap">
            <summary>Same as QTextOption::NoWrap</summary>
        </member>
        <member name="F:QtGui.QTextOption.WrapMode.WrapAnywhere">
            <summary>Text can be wrapped at any point on a line, even if it occurs in the middle of a word.</summary>
        </member>
        <member name="F:QtGui.QTextOption.WrapMode.WrapAtWordBoundaryOrAnywhere">
            <summary>If possible, wrapping occurs at a word boundary; otherwise it will occur at the appropriate point on the line, even in the middle of a word.</summary>
        </member>
        <member name="T:QtGui.QTextOption.Flag">
            <summary>
            <para>The Flags type is a typedef for QFlags&lt;Flag&gt;. It stores an
            OR combination of Flag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextOption.Flag.ShowTabsAndSpaces">
            <summary>Visualize spaces with little dots, and tabs with little arrows.</summary>
        </member>
        <member name="F:QtGui.QTextOption.Flag.ShowLineAndParagraphSeparators">
            <summary>Visualize line and paragraph separators with appropriate symbol characters.</summary>
        </member>
        <member name="F:QtGui.QTextOption.Flag.AddSpaceForLineAndParagraphSeparators">
            <summary>While determining the line-break positions take into account the space added for drawing a separator character.</summary>
        </member>
        <member name="F:QtGui.QTextOption.Flag.SuppressColors">
            <summary>Suppress all color changes in the character formats (except the main selection).</summary>
        </member>
        <member name="F:QtGui.QTextOption.Flag.IncludeTrailingSpaces">
            <summary>When this option is set, QTextLine::naturalTextWidth() and naturalTextRect() will return a value that includes the width of trailing spaces in the text; otherwise this width is excluded.</summary>
        </member>
        <member name="T:QtGui.QTextOption.Tab">
            <summary>
            <para>Each tab definition is represented by this struct.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.Tab.#ctor">
            <summary>
            <para>Creates a default left tab with position 80.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.Tab.#ctor(System.Double,QtGui.QTextOption.TabType,QtCore.QChar)">
            <summary>
            <para>Creates a tab with the given position, tab type, and delimiter
            (pos, tabType, delim).</para>
            <para>Note: delim is only used when tabType is DelimiterTab.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.Tab.#ctor(System.Double,QtGui.QTextOption.TabType)">
            <summary>
            <para>Creates a tab with the given position, tab type, and delimiter
            (pos, tabType, delim).</para>
            <para>Note: delim is only used when tabType is DelimiterTab.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.Tab.op_Equality(QtGui.QTextOption.Tab,QtGui.QTextOption.Tab)">
            <summary>
            <para>Returns true if tab other is equal to this tab; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextOption.Tab.op_Inequality(QtGui.QTextOption.Tab,QtGui.QTextOption.Tab)">
            <summary>
            <para>Returns true if tab other is not equal to this tab; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.Tab.Position">
            <summary>
            <para>Distance from the start of the paragraph. The position of a tab
            is from the start of the paragraph which implies that when the alignment of
            the paragraph is set to centered, the tab is interpreted to be moved the
            same distance as the left ege of the paragraph does. In case the paragraph
            is set to have a layoutDirection() RightToLeft the position is interpreted
            to be from the right side of the paragraph with higher numbers moving the
            tab to the left.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.Tab.Type">
            <summary>
            <para>Determine which type is used. In a paragraph that has
            layoutDirection() RightToLeft the type LeftTab will be interpreted to be a
            RightTab and vice versa.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextOption.Tab.Delimiter">
            <summary>
            <para>If type is DelimitorTab; tab until this char is found in the
            text.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPen">
            <summary>
            <para>The QPen class defines how a QPainter should draw lines and
            outlines of shapes.</para>
            </summary>
            <remarks>
            <para>A pen has a style(), width(), brush(), capStyle() and
            joinStyle().</para>
            <para>The pen style defines the line type. The brush is used to fill
            strokes generated with the pen. Use the QBrush class to specify fill
            styles. The cap style determines the line end caps that can be drawn using
            QPainter, while the join style describes how joins between two lines are
            drawn. The pen width can be specified in both integer (width()) and
            floating point (widthF()) precision. A line width of zero indicates a
            cosmetic pen. This means that the pen width is always drawn one pixel wide,
            independent of the transformation set on the painter.</para>
            <para>The various settings can easily be modified using the
            corresponding setStyle(), setWidth(), setBrush(), setCapStyle() and
            setJoinStyle() functions (note that the painter's pen must be reset when
            altering the pen's properties).</para>
            <para>For example:</para>
            <para>QPainter painter(this);</para>
            <para>QPen pen(Qt::green, 3, Qt::DashDotLine, Qt::RoundCap,
            Qt::RoundJoin);</para>
            <para>painter.setPen(pen);</para>
            <para>which is equivalent to</para>
            <para>QPainter painter(this);</para>
            <para>QPen pen;  // creates a default pen</para>
            <para></para>
            <para>pen.setStyle(Qt::DashDotLine);</para>
            <para>pen.setWidth(3);</para>
            <para>pen.setBrush(Qt::green);</para>
            <para>pen.setCapStyle(Qt::RoundCap);</para>
            <para>pen.setJoinStyle(Qt::RoundJoin);</para>
            <para></para>
            <para>painter.setPen(pen);</para>
            <para>The default pen is a solid black brush with 1 width, square cap
            style (Qt::SquareCap), and bevel join style (Qt::BevelJoin).</para>
            <para>In addition QPen provides the color() and setColor() convenience
            functions to extract and set the color of the pen's brush, respectively.
            Pens may also be compared and streamed.</para>
            <para>For more information about painting in general, see the Paint
            System documentation.</para>
            <para></para>
            <para>Pen Style</para>
            <para>Qt provides several built-in styles represented by the
            Qt::PenStyle enum:</para>
            <para></para>
            <para> 	</para>
            <para>Qt::SolidLine	Qt::DashLine	Qt::DotLine</para>
            <para>	</para>
            <para>Qt::DashDotLine	Qt::DashDotDotLine	Qt::CustomDashLine</para>
            <para></para>
            <para>Simply use the setStyle() function to convert the pen style to
            either of the built-in styles, except the Qt::CustomDashLine style which we
            will come back to shortly. Setting the style to Qt::NoPen tells the painter
            to not draw lines or outlines. The default pen style is
            Qt::SolidLine.</para>
            <para>Since Qt 4.1 it is also possible to specify a custom dash pattern
            using the setDashPattern() function which implicitly converts the style of
            the pen to Qt::CustomDashLine. The pattern argument, a QVector, must be
            specified as an even number of qreal entries where the entries 1, 3, 5...
            are the dashes and 2, 4, 6... are the spaces. For example, the custom
            pattern shown above is created using the following code:</para>
            <para>QPen pen;</para>
            <para>QVector&lt;qreal&gt; dashes;</para>
            <para>qreal space = 4;</para>
            <para></para>
            <para>dashes &lt;&lt; 1 &lt;&lt; space &lt;&lt; 3 &lt;&lt; space
            &lt;&lt; 9 &lt;&lt; space</para>
            <para>           &lt;&lt; 27 &lt;&lt; space &lt;&lt; 9 &lt;&lt;
            space;</para>
            <para></para>
            <para>pen.setDashPattern(dashes);</para>
            <para>Note that the dash pattern is specified in units of the pens
            width, e.g. a dash of length 5 in width 10 is 50 pixels long.</para>
            <para>The currently set dash pattern can be retrieved using the
            dashPattern() function. Use the isSolid() function to determine whether the
            pen has a solid fill, or not.</para>
            <para></para>
            <para>Cap Style</para>
            <para>The cap style defines how the end points of lines are drawn using
            QPainter. The cap style only apply to wide lines, i.e. when the width is 1
            or greater. The Qt::PenCapStyle enum provides the following styles:</para>
            <para></para>
            <para> 	</para>
            <para>Qt::SquareCap	Qt::FlatCap	Qt::RoundCap</para>
            <para></para>
            <para>The Qt::SquareCap style is a square line end that covers the end
            point and extends beyond it by half the line width. The Qt::FlatCap style
            is a square line end that does not cover the end point of the line. And the
            Qt::RoundCap style is a rounded line end covering the end point.</para>
            <para>The default is Qt::SquareCap.</para>
            <para>Whether or not end points are drawn when the pen width is 0 or 1
            depends on the cap style. Using Qt::SquareCap or Qt::RoundCap they are
            drawn, using Qt::FlatCap they are not drawn.</para>
            <para></para>
            <para>Join Style</para>
            <para>The join style defines how joins between two connected lines can
            be drawn using QPainter. The join style only apply to wide lines, i.e. when
            the width is 1 or greater. The Qt::PenJoinStyle enum provides the following
            styles:</para>
            <para></para>
            <para> 	</para>
            <para>Qt::BevelJoin	Qt::MiterJoin	Qt::RoundJoin</para>
            <para></para>
            <para>The Qt::BevelJoin style fills the triangular notch between the
            two lines. The Qt::MiterJoin style extends the lines to meet at an angle.
            And the Qt::RoundJoin style fills a circular arc between the two
            lines.</para>
            <para>The default is Qt::BevelJoin.</para>
            <para></para>
            <para>When the Qt::MiterJoin style is applied, it is possible to use
            the setMiterLimit() function to specify how far the miter join can extend
            from the join point. The miterLimit() is used to reduce artifacts between
            line joins where the lines are close to parallel.</para>
            <para>The miterLimit() must be specified in units of the pens width,
            e.g. a miter limit of 5 in width 10 is 50 pixels long. The default miter
            limit is 2, i.e. twice the pen width in pixels.</para>
            <para></para>
            <para> 	The Path Stroking ExampleThe Path Stroking example shows Qt's
            built-in dash patterns and shows how custom patterns can be used to extend
            the range of available patterns.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>See also QPainter, QBrush, Path Stroking Example, and Scribble
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPen.#ctor">
            <summary>
            <para>Constructs a default black solid line pen with 1 width.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.#ctor(QtCore.Qt.PenStyle)">
            <summary>
            <para>Constructs a black pen with 1 width and the given style.</para>
            <para>See also setStyle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.#ctor(QtGui.QColor)">
            <summary>
            <para>Constructs a solid line pen with 1 width and the given
            color.</para>
            <para>See also setBrush() and setColor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.#ctor(QtGui.QBrush,System.Double,QtCore.Qt.PenStyle,QtCore.Qt.PenCapStyle,QtCore.Qt.PenJoinStyle)">
            <summary>
            <para>Constructs a pen with the specified brush, width, pen style, cap
            style and join style.</para>
            <para>See also setBrush(), setWidth(), setStyle(), setCapStyle(), and
            setJoinStyle().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.#ctor(QtGui.QPen)">
            <summary>
            <para>Constructs a pen that is a copy of the given pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.Swap(QtGui.QPen)">
            <summary>
            <para>Swaps pen other with this pen. This operation is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.op_Equality(QtGui.QPen,QtGui.QPen)">
            <summary>
            <para>Returns true if the pen is equal to the given pen; otherwise
            false. Two pens are equal if they have equal styles, widths and
            colors.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.op_Inequality(QtGui.QPen,QtGui.QPen)">
            <summary>
            <para>Returns true if the pen is different from the given pen;
            otherwise false. Two pens are different if they have different styles,
            widths or colors.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPen.op_Implicit(QtGui.QPen)~QtCore.QVariant">
            <summary>
            <para>Returns the pen as a QVariant.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.Style">
            <summary>
            <para>Returns the pen style.</para>
            <para>See also setStyle() and Pen Style.</para>
            <para></para>
            <para>Sets the pen style to the given style.</para>
            <para>See the Qt::PenStyle documentation for a list of the available
            styles. Since Qt 4.1 it is also possible to specify a custom dash pattern
            using the setDashPattern() function which implicitly converts the style of
            the pen to Qt::CustomDashLine.</para>
            <para>Note: This function resets the dash offset to zero.</para>
            <para>See also style() and Pen Style.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.DashOffset">
            <summary>
            <para>Returns the dash offset for the pen.</para>
            <para>See also setDashOffset().</para>
            <para></para>
            <para>Sets the dash offset (the starting point on the dash pattern) for
            this pen to the offset specified. The offset is measured in terms of the
            units used to specify the dash pattern.</para>
            <para></para>
            <para> 	For example, a pattern where each stroke is four units long,
            followed by a gap of two units, will begin with the stroke when drawn as a
            line.However, if the dash offset is set to 4.0, any line drawn will begin
            with the gap. Values of the offset up to 4.0 will cause part of the stroke
            to be drawn first, and values of the offset between 4.0 and 6.0 will cause
            the line to begin with part of the gap.</para>
            <para></para>
            <para></para>
            <para>Note: This implicitly converts the style of the pen to
            Qt::CustomDashLine.</para>
            <para>See also dashOffset().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.MiterLimit">
            <summary>
            <para>Returns the miter limit of the pen. The miter limit is only
            relevant when the join style is set to Qt::MiterJoin.</para>
            <para>See also setMiterLimit() and Join Style.</para>
            <para></para>
            <para>Sets the miter limit of this pen to the given limit.</para>
            <para></para>
            <para>The miter limit describes how far a miter join can extend from
            the join point. This is used to reduce artifacts between line joins where
            the lines are close to parallel.</para>
            <para>This value does only have effect when the pen style is set to
            Qt::MiterJoin. The value is specified in units of the pen's width, e.g. a
            miter limit of 5 in width 10 is 50 pixels long. The default miter limit is
            2, i.e. twice the pen width in pixels.</para>
            <para>See also miterLimit(), setJoinStyle(), and Join Style.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.WidthF">
            <summary>
            <para>Returns the pen width with floating point precision.</para>
            <para>See also setWidthF() and width().</para>
            <para></para>
            <para>Sets the pen width to the given width in pixels with floating
            point precision.</para>
            <para>A line width of zero indicates a cosmetic pen. This means that
            the pen width is always drawn one pixel wide, independent of the
            transformation on the painter.</para>
            <para>Setting a pen width with a negative value is not
            supported.</para>
            <para>See also setWidth() and widthF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.Width">
            <summary>
            <para>Returns the pen width with integer precision.</para>
            <para>See also setWidth() and widthF().</para>
            <para></para>
            <para>Sets the pen width to the given width in pixels with integer
            precision.</para>
            <para>A line width of zero indicates a cosmetic pen. This means that
            the pen width is always drawn one pixel wide, independent of the
            transformation set on the painter.</para>
            <para>Setting a pen width with a negative value is not
            supported.</para>
            <para>See also setWidthF() and width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.Color">
            <summary>
            <para>Returns the color of this pen's brush.</para>
            <para>See also brush() and setColor().</para>
            <para></para>
            <para>Sets the color of this pen's brush to the given color.</para>
            <para>See also setBrush() and color().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.Brush">
            <summary>
            <para>Returns the brush used to fill strokes generated with this
            pen.</para>
            <para>See also setBrush().</para>
            <para></para>
            <para>Sets the brush used to fill strokes generated with this pen to
            the given brush.</para>
            <para>See also brush() and setColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.CapStyle">
            <summary>
            <para>Returns the pen's cap style.</para>
            <para>See also setCapStyle() and Cap Style.</para>
            <para></para>
            <para>Sets the pen's cap style to the given style. The default value is
            Qt::SquareCap.</para>
            <para>See also capStyle() and Cap Style.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.JoinStyle">
            <summary>
            <para>Returns the pen's join style.</para>
            <para>See also setJoinStyle() and Join Style.</para>
            <para></para>
            <para>Sets the pen's join style to the given style. The default value
            is Qt::BevelJoin.</para>
            <para>See also joinStyle() and Join Style.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.Cosmetic">
            <summary>
            <para>Returns true if the pen is cosmetic; otherwise returns
            false.</para>
            <para>Cosmetic pens are used to draw strokes that have a constant width
            regardless of any transformations applied to the QPainter they are used
            with. Drawing a shape with a cosmetic pen ensures that its outline will
            have the same thickness at different scale factors.</para>
            <para>A zero width pen is cosmetic by default.</para>
            <para>See also setCosmetic() and widthF().</para>
            <para></para>
            <para>Sets this pen to cosmetic or non-cosmetic, depending on the value
            of cosmetic.</para>
            <para>See also isCosmetic().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPen.IsSolid">
            <summary>
            <para>Returns true if the pen has a solid fill, otherwise false.</para>
            <para>See also style() and dashPattern().</para>
            </summary>
        </member>
        <member name="T:QtGui.QFontInfo">
            <summary>
            <para>The QFontInfo class provides general information about
            fonts.</para>
            </summary>
            <remarks>
            <para>The QFontInfo class provides the same access functions as QFont,
            e.g. family(), pointSize(), italic(), weight(), fixedPitch(), styleHint()
            etc. But whilst the QFont access functions return the values that were set,
            a QFontInfo object returns the values that apply to the font that will
            actually be used to draw the text.</para>
            <para>For example, when the program asks for a 25pt Courier font on a
            machine that has a non-scalable 24pt Courier font, QFont will (normally)
            use the 24pt Courier for rendering. In this case, QFont::pointSize()
            returns 25 and QFontInfo::pointSize() returns 24.</para>
            <para>There are three ways to create a QFontInfo object.</para>
            <para></para>
            <para>Calling the QFontInfo constructor with a QFont creates a font
            info object for a screen-compatible font, i.e. the font cannot be a printer
            font. If the font is changed later, the font info object is not
            updated.(Note: If you use a printer font the values returned may be
            inaccurate. Printer fonts are not always accessible so the nearest screen
            font is used if a printer font is supplied.)</para>
            <para></para>
            <para>QWidget::fontInfo() returns the font info for a widget's font.
            This is equivalent to calling QFontInfo(widget-&gt;font()). If the widget's
            font is changed later, the font info object is not updated.</para>
            <para>QPainter::fontInfo() returns the font info for a painter's
            current font. If the painter's font is changed later, the font info object
            is not updated.</para>
            <para></para>
            <para></para>
            <para>See also QFont, QFontMetrics, and QFontDatabase.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFontInfo.#ctor(QtGui.QFont)">
            <summary>
            <para>Constructs a font info object for font.</para>
            <para>The font must be screen-compatible, i.e. a font you use when
            drawing text in widgets or pixmaps, not QPicture or QPrinter.</para>
            <para>The font info object holds the information for the font that is
            passed in the constructor at the time it is created, and is not updated if
            the font's attributes are changed later.</para>
            <para>Use QPainter::fontInfo() to get the font info when painting. This
            will give correct results also when painting on paint device that is not
            screen-compatible.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontInfo.#ctor(QtGui.QFontInfo)">
            <summary>
            <para>Constructs a copy of fi.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontInfo.Swap(QtGui.QFontInfo)">
            <summary>
            <para>Swaps this font info instance with other. This function is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontInfo.ExactMatch">
            <summary>
            <para>Returns true if the matched window system font is exactly the
            same as the one specified by the font; otherwise returns false.</para>
            <para>See also QFont::exactMatch().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.Family">
            <summary>
            <para>Returns the family name of the matched window system font.</para>
            <para>See also QFont::family().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.StyleName">
            <summary>
            <para>Returns the style name of the matched window system font on
            systems that support it.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QFont::styleName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.PixelSize">
            <summary>
            <para>Returns the pixel size of the matched window system font.</para>
            <para>See also QFont::pointSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.PointSize">
            <summary>
            <para>Returns the point size of the matched window system font.</para>
            <para>See also pointSizeF() and QFont::pointSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.PointSizeF">
            <summary>
            <para>Returns the point size of the matched window system font.</para>
            <para>See also QFont::pointSizeF().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.Italic">
            <summary>
            <para>Returns the italic value of the matched window system
            font.</para>
            <para>See also QFont::italic().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.Style">
            <summary>
            <para>Returns the style value of the matched window system font.</para>
            <para>See also QFont::style().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.Weight">
            <summary>
            <para>Returns the weight of the matched window system font.</para>
            <para>See also QFont::weight() and bold().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.Bold">
            <summary>
            <para>Returns true if weight() would return a value greater than
            QFont::Normal; otherwise returns false.</para>
            <para>See also weight() and QFont::bold().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.FixedPitch">
            <summary>
            <para>Returns the fixed pitch value of the matched window system
            font.</para>
            <para>See also QFont::fixedPitch().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.StyleHint">
            <summary>
            <para>Returns the style of the matched window system font.</para>
            <para>Currently only returns the style hint set in QFont.</para>
            <para>See also QFont::styleHint() and QFont::StyleHint.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontInfo.RawMode">
            <summary>
            <para>Returns true if the font is a raw mode font; otherwise returns
            false.</para>
            <para>If it is a raw mode font, all other functions in QFontInfo will
            return the same values set in the QFont, regardless of the font actually
            used.</para>
            <para>See also QFont::rawMode().</para>
            </summary>
        </member>
        <member name="T:QtGui.QFontMetrics">
            <summary>
            <para>The QFontMetrics class provides font metrics information.</para>
            </summary>
            <remarks>
            <para>QFontMetrics functions calculate the size of characters and
            strings for a given font. There are three ways you can create a
            QFontMetrics object:</para>
            <para></para>
            <para>Calling the QFontMetrics constructor with a QFont creates a font
            metrics object for a screen-compatible font, i.e. the font cannot be a
            printer font. If the font is changed later, the font metrics object is not
            updated.(Note: If you use a printer font the values returned may be
            inaccurate. Printer fonts are not always accessible so the nearest screen
            font is used if a printer font is supplied.)</para>
            <para></para>
            <para>QWidget::fontMetrics() returns the font metrics for a widget's
            font. This is equivalent to QFontMetrics(widget-&gt;font()). If the
            widget's font is changed later, the font metrics object is not
            updated.</para>
            <para>QPainter::fontMetrics() returns the font metrics for a painter's
            current font. If the painter's font is changed later, the font metrics
            object is not updated.</para>
            <para></para>
            <para>Once created, the object provides functions to access the
            individual metrics of the font, its characters, and for strings rendered in
            the font.</para>
            <para>There are several functions that operate on the font: ascent(),
            descent(), height(), leading() and lineSpacing() return the basic size
            properties of the font. The underlinePos(), overlinePos(), strikeOutPos()
            and lineWidth() functions, return the properties of the line that
            underlines, overlines or strikes out the characters. These functions are
            all fast.</para>
            <para>There are also some functions that operate on the set of glyphs
            in the font: minLeftBearing(), minRightBearing() and maxWidth(). These are
            by necessity slow, and we recommend avoiding them if possible.</para>
            <para>For each character, you can get its width(), leftBearing() and
            rightBearing() and find out whether it is in the font using inFont(). You
            can also treat the character as a string, and use the string functions on
            it.</para>
            <para>The string functions include width(), to return the width of a
            string in pixels (or points, for a printer), boundingRect(), to return a
            rectangle large enough to contain the rendered string, and size(), to
            return the size of that rectangle.</para>
            <para>Example:</para>
            <para>QFont font(&quot;times&quot;, 24);</para>
            <para>QFontMetrics fm(font);</para>
            <para>int pixelsWide = fm.width(&quot;What's the width of this
            text?&quot;);</para>
            <para>int pixelsHigh = fm.height();</para>
            <para></para>
            <para>See also QFont, QFontInfo, QFontDatabase, and Character Map
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFontMetrics.#ctor(QtGui.QFont)">
            <summary>
            <para>Constructs a font metrics object for font.</para>
            <para>The font metrics will be compatible with the paintdevice used to
            create font.</para>
            <para>The font metrics object holds the information for the font that
            is passed in the constructor at the time it is created, and is not updated
            if the font's attributes are changed later.</para>
            <para>Use QFontMetrics(const QFont &amp;, QPaintDevice *) to get the
            font metrics that are compatible with a certain paint device.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.#ctor(QtGui.QFont,QtGui.IQPaintDevice)">
            <summary>
            <para>Constructs a font metrics object for font and paintdevice.</para>
            <para>The font metrics will be compatible with the paintdevice passed.
            If the paintdevice is 0, the metrics will be screen-compatible, ie. the
            metrics you get if you use the font for drawing text on a widgets or
            pixmaps, not on a QPicture or QPrinter.</para>
            <para>The font metrics object holds the information for the font that
            is passed in the constructor at the time it is created, and is not updated
            if the font's attributes are changed later.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.#ctor(QtGui.QFontMetrics)">
            <summary>
            <para>Constructs a copy of fm.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.Swap(QtGui.QFontMetrics)">
            <summary>
            <para>Swaps this font metrics instance with other. This function is
            very fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.InFont(QtCore.QChar)">
            <summary>
            <para>Returns true if character ch is a valid character in the font;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.InFontUcs4(System.UInt32)">
            <summary>
            <para>Returns true if the character ucs4 encoded in UCS-4/UTF-32 is a
            valid character in the font; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.LeftBearing(QtCore.QChar)">
            <summary>
            <para>Returns the left bearing of character ch in the font.</para>
            <para>The left bearing is the right-ward distance of the left-most
            pixel of the character from the logical origin of the character. This value
            is negative if the pixels of the character extend to the left of the
            logical origin.</para>
            <para>See width(QChar) for a graphical description of this
            metric.</para>
            <para>See also rightBearing(), minLeftBearing(), and width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.RightBearing(QtCore.QChar)">
            <summary>
            <para>Returns the right bearing of character ch in the font.</para>
            <para>The right bearing is the left-ward distance of the right-most
            pixel of the character from the logical origin of a subsequent character.
            This value is negative if the pixels of the character extend to the right
            of the width() of the character.</para>
            <para>See width() for a graphical description of this metric.</para>
            <para>See also leftBearing(), minRightBearing(), and width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.Width(System.String,System.Int32)">
            <summary>
            <para>Returns the width in pixels of the first len characters of text.
            If len is negative (the default), the entire string is used.</para>
            <para>Note that this value is not equal to boundingRect().width();
            boundingRect() returns a rectangle describing the pixels this string will
            cover whereas width() returns the distance to where the next string should
            be drawn.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.Width(QtCore.QChar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para></para>
            <para>Returns the logical width of character ch in pixels. This is a
            distance appropriate for drawing a subsequent character after ch.</para>
            <para>Some of the metrics are described in the image to the right. The
            central dark rectangles cover the logical width() of each character. The
            outer pale rectangles cover the leftBearing() and rightBearing() of each
            character. Notice that the bearings of &quot;f&quot; in this particular
            font are both negative, while the bearings of &quot;o&quot; are both
            positive.</para>
            <para>Warning: This function will produce incorrect results for Arabic
            characters or non-spacing marks in the middle of a string, as the glyph
            shaping and positioning of marks that happens when processing strings
            cannot be taken into account. When implementing an interactive text
            control, use QTextLayout instead.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.CharWidth(System.String,System.Int32)">
            <summary>
            <para>Returns the width of the character at position pos in the string
            text.</para>
            <para>The whole string is needed, as the glyph drawn may change
            depending on the context (the letter before and after the current one) for
            some languages (e.g. Arabic).</para>
            <para>This function also takes non spacing marks and ligatures into
            account.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(QtCore.QChar)">
            <summary>
            <para>Returns the rectangle that is covered by ink if character ch were
            to be drawn at the origin of the coordinate system.</para>
            <para>Note that the bounding rectangle may extend to the left of (0, 0)
            (e.g., for italicized fonts), and that the text output may cover all pixels
            in the bounding rectangle. For a space character the rectangle will usually
            be empty.</para>
            <para>Note that the rectangle usually extends both above and below the
            base line.</para>
            <para>Warning: The width of the returned rectangle is not the advance
            width of the character. Use boundingRect(const QString &amp;) or width()
            instead.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(System.String)">
            <summary>
            <para>Returns the bounding rectangle of the characters in the string
            specified by text. The bounding rectangle always covers at least the set of
            pixels the text would cover if drawn at (0, 0).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the width of the returned rectangle
            might be different than what the width() method returns.</para>
            <para>If you want to know the advance width of the string (to lay out a
            set of strings next to each other), use width() instead.</para>
            <para>Newline characters are processed as normal characters, not as
            linebreaks.</para>
            <para>The height of the bounding rectangle is at least as large as the
            value returned by height().</para>
            <para>See also width(), height(), QPainter::boundingRect(), and
            tightBoundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(QtCore.QRect,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the characters in the string
            specified by text, which is the set of pixels the text would cover if drawn
            at (0, 0). The drawing, and hence the bounding rectangle, is constrained to
            the rectangle rect.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::AlignLeft aligns to the left border, except for Arabic and
            Hebrew where it aligns to the right.</para>
            <para>Qt::AlignRight aligns to the right border, except for Arabic and
            Hebrew where it aligns to the left.</para>
            <para>Qt::AlignJustify produces justified text.</para>
            <para>Qt::AlignHCenter aligns horizontally centered.</para>
            <para>Qt::AlignTop aligns to the top border.</para>
            <para>Qt::AlignBottom aligns to the bottom border.</para>
            <para>Qt::AlignVCenter aligns vertically centered</para>
            <para>Qt::AlignCenter (== Qt::AlignHCenter | Qt::AlignVCenter)</para>
            <para>Qt::TextSingleLine ignores newline characters in the text.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordWrap breaks the text to fit the rectangle.</para>
            <para></para>
            <para>Qt::Horizontal alignment defaults to Qt::AlignLeft and vertical
            alignment defaults to Qt::AlignTop.</para>
            <para>If several of the horizontal or several of the vertical alignment
            flags are set, the resulting alignment is undefined.</para>
            <para>If Qt::TextExpandTabs is set in flags, then: if tabArray is
            non-null, it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the text output may cover all
            pixels in the bounding rectangle.</para>
            <para>Newline characters are processed as linebreaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>The bounding rectangle returned by this function is somewhat
            larger than that calculated by the simpler boundingRect() function. This
            function uses the maximum left and right font bearings as is necessary for
            multi-line text to align correctly. Also, fontHeight() and lineSpacing()
            are used to calculate the height, rather than individual character
            heights.</para>
            <para>See also width(), QPainter::boundingRect(), and
            Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle for the given text within the
            rectangle specified by the x and y coordinates, width, and height.</para>
            <para>If Qt::TextExpandTabs is set in flags and tabArray is non-null,
            it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise, if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.Size(System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            <para>Returns the size in pixels of text.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::TextSingleLine ignores newline characters.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordBreak breaks the text to fit the rectangle.</para>
            <para></para>
            <para>If Qt::TextExpandTabs is set in flags, then: if tabArray is
            non-null, it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para>Newline characters are processed as linebreaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.TightBoundingRect(System.String)">
            <summary>
            <para>Returns a tight bounding rectangle around the characters in the
            string specified by text. The bounding rectangle always covers at least the
            set of pixels the text would cover if drawn at (0, 0).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the width of the returned rectangle
            might be different than what the width() method returns.</para>
            <para>If you want to know the advance width of the string (to lay out a
            set of strings next to each other), use width() instead.</para>
            <para>Newline characters are processed as normal characters, not as
            linebreaks.</para>
            <para>Warning: Calling this method is very slow on Windows.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also width(), height(), and boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.ElidedText(System.String,QtCore.Qt.TextElideMode,System.Int32,System.Int32)">
            <summary>
            <para>If the string text is wider than width, returns an elided version
            of the string (i.e., a string with &quot;...&quot; in it). Otherwise,
            returns the original string.</para>
            <para>The mode parameter specifies whether the text is elided on the
            left (e.g., &quot;...tech&quot;), in the middle (e.g.,
            &quot;Tr...ch&quot;), or on the right (e.g., &quot;Trol...&quot;).</para>
            <para>The width is specified in pixels, not characters.</para>
            <para>The flags argument is optional and currently only supports
            Qt::TextShowMnemonic as value.</para>
            <para>The elide mark follows the layoutdirection. For example, it will
            be on the right side of the text for right-to-left layouts if the mode is
            Qt::ElideLeft, and on the left side of the text if the mode is
            Qt::ElideRight.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.op_Equality(QtGui.QFontMetrics,QtGui.QFontMetrics)">
            <summary>
            <para>Returns true if other is equal to this object; otherwise returns
            false.</para>
            <para>Two font metrics are considered equal if they were constructed
            from the same QFont and the paint devices they were constructed for are
            considered compatible.</para>
            <para>See also operator!=().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.op_Inequality(QtGui.QFontMetrics,QtGui.QFontMetrics)">
            <summary>
            <para>Returns true if other is not equal to this object; otherwise
            returns false.</para>
            <para>Two font metrics are considered equal if they were constructed
            from the same QFont and the paint devices they were constructed for are
            considered compatible.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(QtCore.QRect,System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the characters in the string
            specified by text, which is the set of pixels the text would cover if drawn
            at (0, 0). The drawing, and hence the bounding rectangle, is constrained to
            the rectangle rect.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::AlignLeft aligns to the left border, except for Arabic and
            Hebrew where it aligns to the right.</para>
            <para>Qt::AlignRight aligns to the right border, except for Arabic and
            Hebrew where it aligns to the left.</para>
            <para>Qt::AlignJustify produces justified text.</para>
            <para>Qt::AlignHCenter aligns horizontally centered.</para>
            <para>Qt::AlignTop aligns to the top border.</para>
            <para>Qt::AlignBottom aligns to the bottom border.</para>
            <para>Qt::AlignVCenter aligns vertically centered</para>
            <para>Qt::AlignCenter (== Qt::AlignHCenter | Qt::AlignVCenter)</para>
            <para>Qt::TextSingleLine ignores newline characters in the text.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordWrap breaks the text to fit the rectangle.</para>
            <para></para>
            <para>Qt::Horizontal alignment defaults to Qt::AlignLeft and vertical
            alignment defaults to Qt::AlignTop.</para>
            <para>If several of the horizontal or several of the vertical alignment
            flags are set, the resulting alignment is undefined.</para>
            <para>If Qt::TextExpandTabs is set in flags, then: if tabArray is
            non-null, it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the text output may cover all
            pixels in the bounding rectangle.</para>
            <para>Newline characters are processed as linebreaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>The bounding rectangle returned by this function is somewhat
            larger than that calculated by the simpler boundingRect() function. This
            function uses the maximum left and right font bearings as is necessary for
            multi-line text to align correctly. Also, fontHeight() and lineSpacing()
            are used to calculate the height, rather than individual character
            heights.</para>
            <para>See also width(), QPainter::boundingRect(), and
            Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.BoundingRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle for the given text within the
            rectangle specified by the x and y coordinates, width, and height.</para>
            <para>If Qt::TextExpandTabs is set in flags and tabArray is non-null,
            it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise, if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetrics.Size(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Returns the size in pixels of text.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::TextSingleLine ignores newline characters.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordBreak breaks the text to fit the rectangle.</para>
            <para></para>
            <para>If Qt::TextExpandTabs is set in flags, then: if tabArray is
            non-null, it specifies a 0-terminated sequence of pixel-positions for tabs;
            otherwise if tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para>Newline characters are processed as linebreaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.Ascent">
            <summary>
            <para>Returns the ascent of the font.</para>
            <para>The ascent of a font is the distance from the baseline to the
            highest position characters extend to. In practice, some font designers
            break this rule, e.g. when they put more than one accent on top of a
            character, or to accommodate an unusual character in an exotic language, so
            it is possible (though rare) that this value will be too small.</para>
            <para>See also descent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.Descent">
            <summary>
            <para>Returns the descent of the font.</para>
            <para>The descent is the distance from the base line to the lowest
            point characters extend to. In practice, some font designers break this
            rule, e.g. to accommodate an unusual character in an exotic language, so it
            is possible (though rare) that this value will be too small.</para>
            <para>See also ascent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.Height">
            <summary>
            <para>Returns the height of the font.</para>
            <para>This is always equal to ascent()+descent().</para>
            <para>See also leading() and lineSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.Leading">
            <summary>
            <para>Returns the leading of the font.</para>
            <para>This is the natural inter-line spacing.</para>
            <para>See also height() and lineSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.LineSpacing">
            <summary>
            <para>Returns the distance from one base line to the next.</para>
            <para>This value is always equal to leading()+height().</para>
            <para>See also height() and leading().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.MinLeftBearing">
            <summary>
            <para>Returns the minimum left bearing of the font.</para>
            <para>This is the smallest leftBearing(char) of all characters in the
            font.</para>
            <para>Note that this function can be very slow if the font is
            large.</para>
            <para>See also minRightBearing() and leftBearing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.MinRightBearing">
            <summary>
            <para>Returns the minimum right bearing of the font.</para>
            <para>This is the smallest rightBearing(char) of all characters in the
            font.</para>
            <para>Note that this function can be very slow if the font is
            large.</para>
            <para>See also minLeftBearing() and rightBearing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.MaxWidth">
            <summary>
            <para>Returns the width of the widest character in the font.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.XHeight">
            <summary>
            <para>Returns the 'x' height of the font. This is often but not always
            the same as the height of the character 'x'.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.AverageCharWidth">
            <summary>
            <para>Returns the average width of glyphs in the font.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.UnderlinePos">
            <summary>
            <para>Returns the distance from the base line to where an underscore
            should be drawn.</para>
            <para>See also overlinePos(), strikeOutPos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.OverlinePos">
            <summary>
            <para>Returns the distance from the base line to where an overline
            should be drawn.</para>
            <para>See also underlinePos(), strikeOutPos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.StrikeOutPos">
            <summary>
            <para>Returns the distance from the base line to where the strikeout
            line should be drawn.</para>
            <para>See also underlinePos(), overlinePos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetrics.LineWidth">
            <summary>
            <para>Returns the width of the underline and strikeout lines, adjusted
            for the point size of the font.</para>
            <para>See also underlinePos(), overlinePos(), and
            strikeOutPos().</para>
            </summary>
        </member>
        <member name="T:QtGui.QFontMetricsF">
            <summary>
            <para>The QFontMetricsF class provides font metrics information.</para>
            </summary>
            <remarks>
            <para>QFontMetricsF functions calculate the size of characters and
            strings for a given font. You can construct a QFontMetricsF object with an
            existing QFont to obtain metrics for that font. If the font is changed
            later, the font metrics object is not updated.</para>
            <para>Once created, the object provides functions to access the
            individual metrics of the font, its characters, and for strings rendered in
            the font.</para>
            <para>There are several functions that operate on the font: ascent(),
            descent(), height(), leading() and lineSpacing() return the basic size
            properties of the font. The underlinePos(), overlinePos(), strikeOutPos()
            and lineWidth() functions, return the properties of the line that
            underlines, overlines or strikes out the characters. These functions are
            all fast.</para>
            <para>There are also some functions that operate on the set of glyphs
            in the font: minLeftBearing(), minRightBearing() and maxWidth(). These are
            by necessity slow, and we recommend avoiding them if possible.</para>
            <para>For each character, you can get its width(), leftBearing() and
            rightBearing() and find out whether it is in the font using inFont(). You
            can also treat the character as a string, and use the string functions on
            it.</para>
            <para>The string functions include width(), to return the width of a
            string in pixels (or points, for a printer), boundingRect(), to return a
            rectangle large enough to contain the rendered string, and size(), to
            return the size of that rectangle.</para>
            <para>Example:</para>
            <para>QFont font(&quot;times&quot;, 24);</para>
            <para>QFontMetricsF fm(font);</para>
            <para>qreal pixelsWide = fm.width(&quot;What's the width of this
            text?&quot;);</para>
            <para>qreal pixelsHigh = fm.height();</para>
            <para></para>
            <para>See also QFont, QFontInfo, and QFontDatabase.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFontMetricsF.#ctor(QtGui.QFont)">
            <summary>
            <para>Constructs a font metrics object for font.</para>
            <para>The font metrics will be compatible with the paintdevice used to
            create font.</para>
            <para>The font metrics object holds the information for the font that
            is passed in the constructor at the time it is created, and is not updated
            if the font's attributes are changed later.</para>
            <para>Use QFontMetricsF(const QFont &amp;, QPaintDevice *) to get the
            font metrics that are compatible with a certain paint device.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.#ctor(QtGui.QFont,QtGui.IQPaintDevice)">
            <summary>
            <para>Constructs a font metrics object for font and paintdevice.</para>
            <para>The font metrics will be compatible with the paintdevice passed.
            If the paintdevice is 0, the metrics will be screen-compatible, ie. the
            metrics you get if you use the font for drawing text on a widgets or
            pixmaps, not on a QPicture or QPrinter.</para>
            <para>The font metrics object holds the information for the font that
            is passed in the constructor at the time it is created, and is not updated
            if the font's attributes are changed later.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.#ctor(QtGui.QFontMetrics)">
            <summary>
            <para>Constructs a font metrics object with floating point precision
            from the given fontMetrics object.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.#ctor(QtGui.QFontMetricsF)">
            <summary>
            <para>Constructs a copy of fm.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.Swap(QtGui.QFontMetricsF)">
            <summary>
            <para>Swaps this font metrics instance with other. This function is
            very fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.InFont(QtCore.QChar)">
            <summary>
            <para>Returns true if character ch is a valid character in the font;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.InFontUcs4(System.UInt32)">
            <summary>
            <para>Returns true if the character given by ch, encoded in
            UCS-4/UTF-32, is a valid character in the font; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.LeftBearing(QtCore.QChar)">
            <summary>
            <para>Returns the left bearing of character ch in the font.</para>
            <para>The left bearing is the right-ward distance of the left-most
            pixel of the character from the logical origin of the character. This value
            is negative if the pixels of the character extend to the left of the
            logical origin.</para>
            <para>See width(QChar) for a graphical description of this
            metric.</para>
            <para>See also rightBearing(), minLeftBearing(), and width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.RightBearing(QtCore.QChar)">
            <summary>
            <para>Returns the right bearing of character ch in the font.</para>
            <para>The right bearing is the left-ward distance of the right-most
            pixel of the character from the logical origin of a subsequent character.
            This value is negative if the pixels of the character extend to the right
            of the width() of the character.</para>
            <para>See width() for a graphical description of this metric.</para>
            <para>See also leftBearing(), minRightBearing(), and width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.Width(System.String)">
            <summary>
            <para>Returns the width in pixels of the characters in the given
            text.</para>
            <para>Note that this value is not equal to the width returned by
            boundingRect().width() because boundingRect() returns a rectangle
            describing the pixels this string will cover whereas width() returns the
            distance to where the next string should be drawn.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.Width(QtCore.QChar)">
            <summary>
            <para>This is an overloaded function.</para>
            <para></para>
            <para>Returns the logical width of character ch in pixels. This is a
            distance appropriate for drawing a subsequent character after ch.</para>
            <para>Some of the metrics are described in the image to the right. The
            central dark rectangles cover the logical width() of each character. The
            outer pale rectangles cover the leftBearing() and rightBearing() of each
            character. Notice that the bearings of &quot;f&quot; in this particular
            font are both negative, while the bearings of &quot;o&quot; are both
            positive.</para>
            <para>Warning: This function will produce incorrect results for Arabic
            characters or non-spacing marks in the middle of a string, as the glyph
            shaping and positioning of marks that happens when processing strings
            cannot be taken into account. When implementing an interactive text
            control, use QTextLayout instead.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.BoundingRect(System.String)">
            <summary>
            <para>Returns the bounding rectangle of the characters in the string
            specified by text. The bounding rectangle always covers at least the set of
            pixels the text would cover if drawn at (0, 0).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the width of the returned rectangle
            might be different than what the width() method returns.</para>
            <para>If you want to know the advance width of the string (to lay out a
            set of strings next to each other), use width() instead.</para>
            <para>Newline characters are processed as normal characters, not as
            linebreaks.</para>
            <para>The height of the bounding rectangle is at least as large as the
            value returned height().</para>
            <para>See also width(), height(), and QPainter::boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.BoundingRect(QtCore.QChar)">
            <summary>
            <para>Returns the bounding rectangle of the character ch relative to
            the left-most point on the base line.</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the text output may cover all
            pixels in the bounding rectangle.</para>
            <para>Note that the rectangle usually extends both above and below the
            base line.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.BoundingRect(QtCore.QRectF,System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the characters in the given
            text. This is the set of pixels the text would cover if drawn when
            constrained to the bounding rectangle specified by rect.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::AlignLeft aligns to the left border, except for Arabic and
            Hebrew where it aligns to the right.</para>
            <para>Qt::AlignRight aligns to the right border, except for Arabic and
            Hebrew where it aligns to the left.</para>
            <para>Qt::AlignJustify produces justified text.</para>
            <para>Qt::AlignHCenter aligns horizontally centered.</para>
            <para>Qt::AlignTop aligns to the top border.</para>
            <para>Qt::AlignBottom aligns to the bottom border.</para>
            <para>Qt::AlignVCenter aligns vertically centered</para>
            <para>Qt::AlignCenter (== Qt::AlignHCenter | Qt::AlignVCenter)</para>
            <para>Qt::TextSingleLine ignores newline characters in the text.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordWrap breaks the text to fit the rectangle.</para>
            <para></para>
            <para>Qt::Horizontal alignment defaults to Qt::AlignLeft and vertical
            alignment defaults to Qt::AlignTop.</para>
            <para>If several of the horizontal or several of the vertical alignment
            flags are set, the resulting alignment is undefined.</para>
            <para>These flags are defined in Qt::AlignmentFlag.</para>
            <para>If Qt::TextExpandTabs is set in flags, the following behavior is
            used to interpret tab characters in the text:</para>
            <para></para>
            <para>If tabArray is non-null, it specifies a 0-terminated sequence of
            pixel-positions for tabs in the text.</para>
            <para>If tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para></para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts.</para>
            <para>Newline characters are processed as line breaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>The bounding rectangle returned by this function is somewhat
            larger than that calculated by the simpler boundingRect() function. This
            function uses the maximum left and right font bearings as is necessary for
            multi-line text to align correctly. Also, fontHeight() and lineSpacing()
            are used to calculate the height, rather than individual character
            heights.</para>
            <para>See also width(), QPainter::boundingRect(), and
            Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.Size(System.Int32,System.String,System.Int32,System.Int32@)">
            <summary>
            <para>Returns the size in pixels of the characters in the given
            text.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::TextSingleLine ignores newline characters.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordBreak breaks the text to fit the rectangle.</para>
            <para></para>
            <para>These flags are defined in the Qt::TextFlag enum.</para>
            <para>If Qt::TextExpandTabs is set in flags, the following behavior is
            used to interpret tab characters in the text:</para>
            <para></para>
            <para>If tabArray is non-null, it specifies a 0-terminated sequence of
            pixel-positions for tabs in the text.</para>
            <para>If tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para></para>
            <para>Newline characters are processed as line breaks.</para>
            <para>Note: Despite the different actual character heights, the heights
            of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.TightBoundingRect(System.String)">
            <summary>
            <para>Returns a tight bounding rectangle around the characters in the
            string specified by text. The bounding rectangle always covers at least the
            set of pixels the text would cover if drawn at (0, 0).</para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts, and that the width of the returned rectangle
            might be different than what the width() method returns.</para>
            <para>If you want to know the advance width of the string (to lay out a
            set of strings next to each other), use width() instead.</para>
            <para>Newline characters are processed as normal characters, not as
            linebreaks.</para>
            <para>Warning: Calling this method is very slow on Windows.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also width(), height(), and boundingRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.ElidedText(System.String,QtCore.Qt.TextElideMode,System.Double,System.Int32)">
            <summary>
            <para>If the string text is wider than width, returns an elided version
            of the string (i.e., a string with &quot;...&quot; in it). Otherwise,
            returns the original string.</para>
            <para>The mode parameter specifies whether the text is elided on the
            left (for example, &quot;...tech&quot;), in the middle (for example,
            &quot;Tr...ch&quot;), or on the right (for example,
            &quot;Trol...&quot;).</para>
            <para>The width is specified in pixels, not characters.</para>
            <para>The flags argument is optional and currently only supports
            Qt::TextShowMnemonic as value.</para>
            <para>The elide mark follows the layoutdirection. For example, it will
            be on the right side of the text for right-to-left layouts if the mode is
            Qt::ElideLeft, and on the left side of the text if the mode is
            Qt::ElideRight.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.op_Equality(QtGui.QFontMetricsF,QtGui.QFontMetricsF)">
            <summary>
            <para>Returns true if the font metrics are equal to the other font
            metrics; otherwise returns false.</para>
            <para>Two font metrics are considered equal if they were constructed
            from the same QFont and the paint devices they were constructed for are
            considered to be compatible.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.op_Inequality(QtGui.QFontMetricsF,QtGui.QFontMetricsF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the font metrics are not equal to the other font
            metrics; otherwise returns false.</para>
            <para>See also operator==().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.BoundingRect(QtCore.QRectF,System.Int32,System.String,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the characters in the given
            text. This is the set of pixels the text would cover if drawn when
            constrained to the bounding rectangle specified by rect.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::AlignLeft aligns to the left border, except for Arabic and
            Hebrew where it aligns to the right.</para>
            <para>Qt::AlignRight aligns to the right border, except for Arabic and
            Hebrew where it aligns to the left.</para>
            <para>Qt::AlignJustify produces justified text.</para>
            <para>Qt::AlignHCenter aligns horizontally centered.</para>
            <para>Qt::AlignTop aligns to the top border.</para>
            <para>Qt::AlignBottom aligns to the bottom border.</para>
            <para>Qt::AlignVCenter aligns vertically centered</para>
            <para>Qt::AlignCenter (== Qt::AlignHCenter | Qt::AlignVCenter)</para>
            <para>Qt::TextSingleLine ignores newline characters in the text.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordWrap breaks the text to fit the rectangle.</para>
            <para></para>
            <para>Qt::Horizontal alignment defaults to Qt::AlignLeft and vertical
            alignment defaults to Qt::AlignTop.</para>
            <para>If several of the horizontal or several of the vertical alignment
            flags are set, the resulting alignment is undefined.</para>
            <para>These flags are defined in Qt::AlignmentFlag.</para>
            <para>If Qt::TextExpandTabs is set in flags, the following behavior is
            used to interpret tab characters in the text:</para>
            <para></para>
            <para>If tabArray is non-null, it specifies a 0-terminated sequence of
            pixel-positions for tabs in the text.</para>
            <para>If tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para></para>
            <para>Note that the bounding rectangle may extend to the left of (0,
            0), e.g. for italicized fonts.</para>
            <para>Newline characters are processed as line breaks.</para>
            <para>Despite the different actual character heights, the heights of
            the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>The bounding rectangle returned by this function is somewhat
            larger than that calculated by the simpler boundingRect() function. This
            function uses the maximum left and right font bearings as is necessary for
            multi-line text to align correctly. Also, fontHeight() and lineSpacing()
            are used to calculate the height, rather than individual character
            heights.</para>
            <para>See also width(), QPainter::boundingRect(), and
            Qt::Alignment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontMetricsF.Size(System.Int32,System.String,System.Int32)">
            <summary>
            <para>Returns the size in pixels of the characters in the given
            text.</para>
            <para>The flags argument is the bitwise OR of the following
            flags:</para>
            <para></para>
            <para>Qt::TextSingleLine ignores newline characters.</para>
            <para>Qt::TextExpandTabs expands tabs (see below)</para>
            <para>Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as x; i.e.,
            underlined.</para>
            <para>Qt::TextWordBreak breaks the text to fit the rectangle.</para>
            <para></para>
            <para>These flags are defined in the Qt::TextFlag enum.</para>
            <para>If Qt::TextExpandTabs is set in flags, the following behavior is
            used to interpret tab characters in the text:</para>
            <para></para>
            <para>If tabArray is non-null, it specifies a 0-terminated sequence of
            pixel-positions for tabs in the text.</para>
            <para>If tabStops is non-zero, it is used as the tab spacing (in
            pixels).</para>
            <para></para>
            <para>Newline characters are processed as line breaks.</para>
            <para>Note: Despite the different actual character heights, the heights
            of the bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the
            same.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.Ascent">
            <summary>
            <para>Returns the ascent of the font.</para>
            <para>The ascent of a font is the distance from the baseline to the
            highest position characters extend to. In practice, some font designers
            break this rule, e.g. when they put more than one accent on top of a
            character, or to accommodate an unusual character in an exotic language, so
            it is possible (though rare) that this value will be too small.</para>
            <para>See also descent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.Descent">
            <summary>
            <para>Returns the descent of the font.</para>
            <para>The descent is the distance from the base line to the lowest
            point characters extend to. (Note that this is different from X, which adds
            1 pixel.) In practice, some font designers break this rule, e.g. to
            accommodate an unusual character in an exotic language, so it is possible
            (though rare) that this value will be too small.</para>
            <para>See also ascent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.Height">
            <summary>
            <para>Returns the height of the font.</para>
            <para>This is always equal to ascent()+descent().</para>
            <para>See also leading() and lineSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.Leading">
            <summary>
            <para>Returns the leading of the font.</para>
            <para>This is the natural inter-line spacing.</para>
            <para>See also height() and lineSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.LineSpacing">
            <summary>
            <para>Returns the distance from one base line to the next.</para>
            <para>This value is always equal to leading()+height().</para>
            <para>See also height() and leading().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.MinLeftBearing">
            <summary>
            <para>Returns the minimum left bearing of the font.</para>
            <para>This is the smallest leftBearing(char) of all characters in the
            font.</para>
            <para>Note that this function can be very slow if the font is
            large.</para>
            <para>See also minRightBearing() and leftBearing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.MinRightBearing">
            <summary>
            <para>Returns the minimum right bearing of the font.</para>
            <para>This is the smallest rightBearing(char) of all characters in the
            font.</para>
            <para>Note that this function can be very slow if the font is
            large.</para>
            <para>See also minLeftBearing() and rightBearing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.MaxWidth">
            <summary>
            <para>Returns the width of the widest character in the font.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.XHeight">
            <summary>
            <para>Returns the 'x' height of the font. This is often but not always
            the same as the height of the character 'x'.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.AverageCharWidth">
            <summary>
            <para>Returns the average width of glyphs in the font.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.UnderlinePos">
            <summary>
            <para>Returns the distance from the base line to where an underscore
            should be drawn.</para>
            <para>See also overlinePos(), strikeOutPos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.OverlinePos">
            <summary>
            <para>Returns the distance from the base line to where an overline
            should be drawn.</para>
            <para>See also underlinePos(), strikeOutPos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.StrikeOutPos">
            <summary>
            <para>Returns the distance from the base line to where the strikeout
            line should be drawn.</para>
            <para>See also underlinePos(), overlinePos(), and lineWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontMetricsF.LineWidth">
            <summary>
            <para>Returns the width of the underline and strikeout lines, adjusted
            for the point size of the font.</para>
            <para>See also underlinePos(), overlinePos(), and
            strikeOutPos().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPainter">
            <summary>
            <para>The QPainter class performs low-level painting on widgets and
            other paint devices.</para>
            </summary>
            <remarks>
            <para>QPainter provides highly optimized functions to do most of the
            drawing GUI programs require. It can draw everything from simple lines to
            complex shapes like pies and chords. It can also draw aligned text and
            pixmaps. Normally, it draws in a &quot;natural&quot; coordinate system, but
            it can also do view and world transformation. QPainter can operate on any
            object that inherits the QPaintDevice class.</para>
            <para>The common use of QPainter is inside a widget's paint event:
            Construct and customize (e.g. set the pen or the brush) the painter. Then
            draw. Remember to destroy the QPainter object after drawing. For
            example:</para>
            <para>void SimpleExampleWidget::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter painter(this);</para>
            <para>    painter.setPen(Qt::blue);</para>
            <para>    painter.setFont(QFont(&quot;Arial&quot;, 30));</para>
            <para>    painter.drawText(rect(), Qt::AlignCenter,
            &quot;Qt&quot;);</para>
            <para>}</para>
            <para>The core functionality of QPainter is drawing, but the class also
            provide several functions that allows you to customize QPainter's settings
            and its rendering quality, and others that enable clipping. In addition you
            can control how different shapes are merged together by specifying the
            painter's composition mode.</para>
            <para>The isActive() function indicates whether the painter is active.
            A painter is activated by the begin() function and the constructor that
            takes a QPaintDevice argument. The end() function, and the destructor,
            deactivates it.</para>
            <para>Together with the QPaintDevice and QPaintEngine classes, QPainter
            form the basis for Qt's paint system. QPainter is the class used to perform
            drawing operations. QPaintDevice represents a device that can be painted on
            using a QPainter. QPaintEngine provides the interface that the painter uses
            to draw onto different types of devices. If the painter is active, device()
            returns the paint device on which the painter paints, and paintEngine()
            returns the paint engine that the painter is currently operating on. For
            more information, see the Paint System.</para>
            <para>Sometimes it is desirable to make someone else paint on an
            unusual QPaintDevice. QPainter supports a static function to do this,
            setRedirected().</para>
            <para>Warning: When the paintdevice is a widget, QPainter can only be
            used inside a paintEvent() function or in a function called by
            paintEvent().</para>
            <para></para>
            <para>Settings</para>
            <para>There are several settings that you can customize to make
            QPainter draw according to your preferences:</para>
            <para></para>
            <para>font() is the font used for drawing text. If the painter
            isActive(), you can retrieve information about the currently set font, and
            its metrics, using the fontInfo() and fontMetrics() functions
            respectively.</para>
            <para>brush() defines the color or pattern that is used for filling
            shapes.</para>
            <para>pen() defines the color or stipple that is used for drawing lines
            or boundaries.</para>
            <para>backgroundMode() defines whether there is a background() or not,
            i.e it is either Qt::OpaqueMode or Qt::TransparentMode.</para>
            <para>background() only applies when backgroundMode() is Qt::OpaqueMode
            and pen() is a stipple. In that case, it describes the color of the
            background pixels in the stipple.</para>
            <para>brushOrigin() defines the origin of the tiled brushes, normally
            the origin of widget's background.</para>
            <para>viewport(), window(), worldTransform() make up the painter's
            coordinate transformation system. For more information, see the Coordinate
            Transformations section and the Coordinate System documentation.</para>
            <para>hasClipping() tells whether the painter clips at all. (The paint
            device clips, too.) If the painter clips, it clips to clipRegion().</para>
            <para>layoutDirection() defines the layout direction used by the
            painter when drawing text.</para>
            <para>worldMatrixEnabled() tells whether world transformation is
            enabled.</para>
            <para>viewTransformEnabled() tells whether view transformation is
            enabled.</para>
            <para></para>
            <para>Note that some of these settings mirror settings in some paint
            devices, e.g. QWidget::font(). The QPainter::begin() function (or
            equivalently the QPainter constructor) copies these attributes from the
            paint device.</para>
            <para>You can at any time save the QPainter's state by calling the
            save() function which saves all the available settings on an internal
            stack. The restore() function pops them back.</para>
            <para></para>
            <para>Drawing</para>
            <para>QPainter provides functions to draw most primitives: drawPoint(),
            drawPoints(), drawLine(), drawRect(), drawRoundedRect(), drawEllipse(),
            drawArc(), drawPie(), drawChord(), drawPolyline(), drawPolygon(),
            drawConvexPolygon() and drawCubicBezier(). The two convenience functions,
            drawRects() and drawLines(), draw the given number of rectangles or lines
            in the given array of QRects or QLines using the current pen and
            brush.</para>
            <para>The QPainter class also provides the fillRect() function which
            fills the given QRect, with the given QBrush, and the eraseRect() function
            that erases the area inside the given rectangle.</para>
            <para>All of these functions have both integer and floating point
            versions.</para>
            <para></para>
            <para> 	Basic Drawing ExampleThe Basic Drawing example shows how to
            display basic graphics primitives in a variety of styles using the QPainter
            class.</para>
            <para></para>
            <para></para>
            <para>If you need to draw a complex shape, especially if you need to do
            so repeatedly, consider creating a QPainterPath and drawing it using
            drawPath().</para>
            <para></para>
            <para> Painter Paths exampleThe QPainterPath class provides a container
            for painting operations, enabling graphical shapes to be constructed and
            reused.</para>
            <para>The Painter Paths example shows how painter paths can be used to
            build complex shapes for rendering.</para>
            <para>	</para>
            <para></para>
            <para>QPainter also provides the fillPath() function which fills the
            given QPainterPath with the given QBrush, and the strokePath() function
            that draws the outline of the given path (i.e. strokes the path).</para>
            <para>See also the Vector Deformation example which shows how to use
            advanced vector techniques to draw text using a QPainterPath, the Gradients
            example which shows the different types of gradients that are available in
            Qt, and the Path Stroking example which shows Qt's built-in dash patterns
            and shows how custom patterns can be used to extend the range of available
            patterns.</para>
            <para></para>
            <para> Vector DeformationGradientsPath Stroking</para>
            <para>	</para>
            <para></para>
            <para>Text drawing is done using drawText(). When you need fine-grained
            positioning, boundingRect() tells you where a given drawText() command will
            draw.</para>
            <para></para>
            <para>Drawing Pixmaps and Images</para>
            <para>There are functions to draw pixmaps/images, namely drawPixmap(),
            drawImage() and drawTiledPixmap(). Both drawPixmap() and drawImage()
            produce the same result, except that drawPixmap() is faster on-screen while
            drawImage() may be faster on a QPrinter or other devices.</para>
            <para>There is a drawPicture() function that draws the contents of an
            entire QPicture. The drawPicture() function is the only function that
            disregards all the painter's settings as QPicture has its own
            settings.</para>
            <para></para>
            <para>Drawing High Resolution Versions of Pixmaps and Images</para>
            <para>High resolution versions of pixmaps have a device pixel ratio
            value larger than 1 (see QImageReader, QPixmap::devicePixelRatio()). Should
            it match the value of the underlying QPaintDevice, it is drawn directly
            onto the device with no additional transformation applied.</para>
            <para>This is for example the case when drawing a QPixmap of 64x64
            pixels size with a device pixel ratio of 2 onto a high DPI screen which
            also has a device pixel ratio of 2. Note that the pixmap is then
            effectively 32x32 pixels in user space. Code paths in Qt that calculate
            layout geometry based on the pixmap size will use this size. The net effect
            of this is that the pixmap is displayed as high DPI pixmap rather than a
            large pixmap.</para>
            <para></para>
            <para>Rendering Quality</para>
            <para>To get the optimal rendering result using QPainter, you should
            use the platform independent QImage as paint device; i.e. using QImage will
            ensure that the result has an identical pixel representation on any
            platform.</para>
            <para>The QPainter class also provides a means of controlling the
            rendering quality through its RenderHint enum and the support for floating
            point precision: All the functions for drawing primitives has a floating
            point version. These are often used in combination with the
            QPainter::Antialiasing render hint.</para>
            <para></para>
            <para> 	Concentric Circles ExampleThe Concentric Circles example shows
            the improved rendering quality that can be obtained using floating point
            precision and anti-aliasing when drawing custom widgets.</para>
            <para>The application's main window displays several widgets which are
            drawn using the various combinations of precision and anti-aliasing.</para>
            <para></para>
            <para></para>
            <para>The RenderHint enum specifies flags to QPainter that may or may
            not be respected by any given engine. QPainter::Antialiasing indicates that
            the engine should antialias edges of primitives if possible,
            QPainter::TextAntialiasing indicates that the engine should antialias text
            if possible, and the QPainter::SmoothPixmapTransform indicates that the
            engine should use a smooth pixmap transformation algorithm.</para>
            <para>The renderHints() function returns a flag that specifies the
            rendering hints that are set for this painter. Use the setRenderHint()
            function to set or clear the currently set RenderHints.</para>
            <para></para>
            <para>Coordinate Transformations</para>
            <para>Normally, the QPainter operates on the device's own coordinate
            system (usually pixels), but QPainter has good support for coordinate
            transformations.</para>
            <para></para>
            <para> noprotate()scale()translate()</para>
            <para>	</para>
            <para></para>
            <para>The most commonly used transformations are scaling, rotation,
            translation and shearing. Use the scale() function to scale the coordinate
            system by a given offset, the rotate() function to rotate it clockwise and
            translate() to translate it (i.e. adding a given offset to the points). You
            can also twist the coordinate system around the origin using the shear()
            function. See the Affine Transformations example for a visualization of a
            sheared coordinate system.</para>
            <para>See also the Transformations example which shows how
            transformations influence the way that QPainter renders graphics
            primitives. In particular it shows how the order of transformations affects
            the result.</para>
            <para></para>
            <para> Affine Transformations ExampleThe Affine Transformations example
            shows Qt's ability to perform affine transformations on painting
            operations. The demo also allows the user to experiment with the
            transformation operations and see the results immediately.</para>
            <para>	</para>
            <para></para>
            <para>All the tranformation operations operate on the transformation
            worldTransform(). A matrix transforms a point in the plane to another
            point. For more information about the transformation matrix, see the
            Coordinate System and QTransform documentation.</para>
            <para>The setWorldTransform() function can replace or add to the
            currently set worldTransform(). The resetTransform() function resets any
            transformations that were made using translate(), scale(), shear(),
            rotate(), setWorldTransform(), setViewport() and setWindow() functions. The
            deviceTransform() returns the matrix that transforms from logical
            coordinates to device coordinates of the platform dependent paint device.
            The latter function is only needed when using platform painting commands on
            the platform dependent handle, and the platform does not do transformations
            nativly.</para>
            <para>When drawing with QPainter, we specify points using logical
            coordinates which then are converted into the physical coordinates of the
            paint device. The mapping of the logical coordinates to the physical
            coordinates are handled by QPainter's combinedTransform(), a combination of
            viewport() and window() and worldTransform(). The viewport() represents the
            physical coordinates specifying an arbitrary rectangle, the window()
            describes the same rectangle in logical coordinates, and the
            worldTransform() is identical with the transformation matrix.</para>
            <para>See also Coordinate System</para>
            <para></para>
            <para>Clipping</para>
            <para>QPainter can clip any drawing operation to a rectangle, a region,
            or a vector path. The current clip is available using the functions
            clipRegion() and clipPath(). Whether paths or regions are preferred
            (faster) depends on the underlying paintEngine(). For example, the QImage
            paint engine prefers paths while the X11 paint engine prefers regions.
            Setting a clip is done in the painters logical coordinates.</para>
            <para>After QPainter's clipping, the paint device may also clip. For
            example, most widgets clip away the pixels used by child widgets, and most
            printers clip away an area near the edges of the paper. This additional
            clipping is not reflected by the return value of clipRegion() or
            hasClipping().</para>
            <para></para>
            <para>Composition Modes</para>
            <para></para>
            <para>QPainter provides the CompositionMode enum which defines the
            Porter-Duff rules for digital image compositing; it describes a model for
            combining the pixels in one image, the source, with the pixels in another
            image, the destination.</para>
            <para>The two most common forms of composition are Source and
            SourceOver. Source is used to draw opaque objects onto a paint device. In
            this mode, each pixel in the source replaces the corresponding pixel in the
            destination. In SourceOver composition mode, the source object is
            transparent and is drawn on top of the destination.</para>
            <para>Note that composition transformation operates pixelwise. For that
            reason, there is a difference between using the graphic primitive itself
            and its bounding rectangle: The bounding rect contains pixels with alpha ==
            0 (i.e the pixels surrounding the primitive). These pixels will overwrite
            the other image's pixels, affectively clearing those, while the primitive
            only overwrites its own area.</para>
            <para></para>
            <para> 	Composition Modes ExampleThe Composition Modes example,
            available in Qt's examples directory, allows you to experiment with the
            various composition modes and see the results immediately.</para>
            <para></para>
            <para></para>
            <para></para>
            <para>Limitations</para>
            <para></para>
            <para>If you are using coordinates with Qt's raster-based paint engine,
            it is important to note that, while coordinates greater than +/- 215 can be
            used, any painting performed with coordinates outside this range is not
            guaranteed to be shown; the drawing may be clipped. This is due to the use
            of short int in the implementation.</para>
            <para>The outlines generated by Qt's stroker are only an approximation
            when dealing with curved shapes. It is in most cases impossible to
            represent the outline of a bezier curve segment using another bezier curve
            segment, and so Qt approximates the curve outlines by using several smaller
            curves. For performance reasons there is a limit to how many curves Qt uses
            for these outlines, and thus when using large pen widths or scales the
            outline error increases. To generate outlines with smaller errors it is
            possible to use the QPainterPathStroker class, which has the
            setCurveThreshold member function which let's the user specify the error
            tolerance. Another workaround is to convert the paths to polygons first and
            then draw the polygons instead.</para>
            <para></para>
            <para>Performance</para>
            <para>QPainter is a rich framework that allows developers to do a great
            variety of graphical operations, such as gradients, composition modes and
            vector graphics. And QPainter can do this across a variety of different
            hardware and software stacks. Naturally the underlying combination of
            hardware and software has some implications for performance, and ensuring
            that every single operation is fast in combination with all the various
            combinations of composition modes, brushes, clipping, transformation, etc,
            is close to an impossible task because of the number of permutations. As a
            compromise we have selected a subset of the QPainter API and backends,
            where performance is guaranteed to be as good as we can sensibly get it for
            the given combination of hardware and software.</para>
            <para>The backends we focus on as high-performance engines are:</para>
            <para></para>
            <para>Raster - This backend implements all rendering in pure software
            and is always used to render into QImages. For optimal performance only use
            the format types QImage::Format_ARGB32_Premultiplied, QImage::Format_RGB32
            or QImage::Format_RGB16. Any other format, including QImage::Format_ARGB32,
            has significantly worse performance. This engine is used by default for
            QWidget and QPixmap.</para>
            <para>OpenGL 2.0 (ES) - This backend is the primary backend for
            hardware accelerated graphics. It can be run on desktop machines and
            embedded devices supporting the OpenGL 2.0 or OpenGL/ES 2.0 specification.
            This includes most graphics chips produced in the last couple of years. The
            engine can be enabled by using QPainter onto a QOpenGLWidget.</para>
            <para></para>
            <para>These operations are:</para>
            <para></para>
            <para>Simple transformations, meaning translation and scaling, pluss 0,
            90, 180, 270 degree rotations.</para>
            <para>drawPixmap() in combination with simple transformations and
            opacity with non-smooth transformation mode
            (QPainter::SmoothPixmapTransform not enabled as a render hint).</para>
            <para>Rectangle fills with solid color, two-color linear gradients and
            simple transforms.</para>
            <para>Rectangular clipping with simple transformations and intersect
            clip.</para>
            <para>Composition Modes QPainter::CompositionMode_Source and
            QPainter::CompositionMode_SourceOver</para>
            <para>Rounded rectangle filling using solid color and two-color linear
            gradients fills.</para>
            <para>3x3 patched pixmaps, via qDrawBorderPixmap.</para>
            <para></para>
            <para>This list gives an indication of which features to safely use in
            an application where performance is critical. For certain setups, other
            operations may be fast too, but before making extensive use of them, it is
            recommended to benchmark and verify them on the system where the software
            will run in the end. There are also cases where expensive operations are ok
            to use, for instance when the result is cached in a QPixmap.</para>
            <para></para>
            <para>See also QPaintDevice, QPaintEngine, Qt SVG, Basic Drawing
            Example, and Drawing Utility Functions.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPainter.#ctor">
            <summary>
            <para>Constructs a painter.</para>
            <para>See also begin() and end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.#ctor(QtGui.IQPaintDevice)">
            <summary>
            <para>Constructs a painter that begins painting the paint device
            immediately.</para>
            <para>This constructor is convenient for short-lived painters, e.g. in
            a QWidget::paintEvent() and should be used only once. The constructor calls
            begin() for you and the QPainter destructor automatically calls
            end().</para>
            <para>Here's an example using begin() and end():</para>
            <para>void MyWidget::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter p;</para>
            <para>    p.begin(this);</para>
            <para>    p.drawLine(...);        // drawing code</para>
            <para>    p.end();</para>
            <para>}</para>
            <para>The same example using this constructor:</para>
            <para>void MyWidget::paintEvent(QPaintEvent *)</para>
            <para>{</para>
            <para>    QPainter p(this);</para>
            <para>    p.drawLine(...);        // drawing code</para>
            <para>}</para>
            <para>Since the constructor cannot provide feedback when the
            initialization of the painter failed you should rather use begin() and
            end() to paint on external devices, e.g. printers.</para>
            <para>See also begin() and end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Begin(QtGui.IQPaintDevice)">
            <summary>
            <para>Begins painting the paint device and returns true if successful;
            otherwise returns false.</para>
            <para>Notice that all painter settings (setPen(), setBrush() etc.) are
            reset to default values when begin() is called.</para>
            <para>The errors that can occur are serious problems, such as
            these:</para>
            <para>painter-&gt;begin(0); // impossible - paint device cannot be
            0</para>
            <para></para>
            <para>QPixmap image(0, 0);</para>
            <para>painter-&gt;begin(&amp;image); // impossible - image.isNull() ==
            true;</para>
            <para></para>
            <para>painter-&gt;begin(myWidget);</para>
            <para>painter2-&gt;begin(myWidget); // impossible - only one painter at
            a time</para>
            <para>Note that most of the time, you can use one of the constructors
            instead of begin(), and that end() is automatically done at
            destruction.</para>
            <para>Warning: A paint device can only be painted by one painter at a
            time.</para>
            <para>Warning: Painting on a QImage with the format
            QImage::Format_Indexed8 is not supported.</para>
            <para>See also end() and QPainter().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.End">
            <summary>
            <para>Ends painting. Any resources used while painting are released.
            You don't normally need to call this since it is called by the
            destructor.</para>
            <para>Returns true if the painter is no longer active; otherwise
            returns false.</para>
            <para>See also begin() and isActive().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.InitFrom(QtGui.IQPaintDevice)">
            <summary>
            <para>Initializes the painters pen, background and font to the same as
            the given device.</para>
            <para>See also begin() and Settings.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetPen(QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the painter's pen to have style Qt::SolidLine, width 1 and
            the specified color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetPen(QtCore.Qt.PenStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the painter's pen to have the given style, width 1 and black
            color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetBrush(QtCore.Qt.BrushStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the painter's brush to black color and the specified
            style.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetBrushOrigin(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the brush's origin to point (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetBrushOrigin(QtCore.QPointF)">
            <summary>
            <para>Sets the brush origin to position.</para>
            <para>The brush origin specifies the (0, 0) coordinate of the painter's
            brush.</para>
            <para>Note that while the brushOrigin() was necessary to adopt the
            parent's background for a widget in Qt 3, this is no longer the case since
            the Qt 4 painter doesn't paint the background unless you explicitly tell it
            to do so by setting the widget's autoFillBackground property to
            true.</para>
            <para>See also brushOrigin() and Settings.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipRect(QtCore.QRectF,QtCore.Qt.ClipOperation)">
            <summary>
            <para>Enables clipping, and sets the clip region to the given rectangle
            using the given clip operation. The default operation is to replace the
            current clip rectangle.</para>
            <para>Note that the clip rectangle is specified in logical (painter)
            coordinates.</para>
            <para>See also clipRegion(), setClipping(), and Clipping.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipRect(QtCore.QRect,QtCore.Qt.ClipOperation)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Enables clipping, and sets the clip region to the given rectangle
            using the given clip operation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipRect(System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.ClipOperation)">
            <summary>
            <para>Enables clipping, and sets the clip region to the rectangle
            beginning at (x, y) with the given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipRegion(QtGui.QRegion,QtCore.Qt.ClipOperation)">
            <summary>
            <para>Sets the clip region to the given region using the specified clip
            operation. The default clip operation is to replace the current clip
            region.</para>
            <para>Note that the clip region is given in logical coordinates.</para>
            <para>See also clipRegion(), setClipRect(), and Clipping.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipPath(QtGui.QPainterPath,QtCore.Qt.ClipOperation)">
            <summary>
            <para>Enables clipping, and sets the clip path for the painter to the
            given path, with the clip operation.</para>
            <para>Note that the clip path is specified in logical (painter)
            coordinates.</para>
            <para>See also clipPath(), clipRegion(), and Clipping.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetClipping(System.Boolean)">
            <summary>
            <para>Enables clipping if enable is true, or disables clipping if
            enable is false.</para>
            <para>See also hasClipping() and Clipping.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Save">
            <summary>
            <para>Saves the current painter state (pushes the state onto a stack).
            A save() must be followed by a corresponding restore(); the end() function
            unwinds the stack.</para>
            <para>See also restore().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Restore">
            <summary>
            <para>Restores the current painter state (pops a saved state off the
            stack).</para>
            <para>See also save().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Use setWorldTransform() instead.</para>
            <para>See also matrix() and setWorldTransform().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.ResetMatrix">
            <summary>
            <para>Resets any transformations that were made using translate(),
            scale(), shear(), rotate(), setWorldMatrix(), setViewport() and
            setWindow().</para>
            <para>It is advisable to use resetTransform() instead of this function
            to preserve the properties of perspective transformations.</para>
            <para>See also Coordinate Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the world transformation matrix. If combine is true, the
            specified transform is combined with the current matrix; otherwise it
            replaces the current matrix.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also transform() and setWorldTransform().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.ResetTransform">
            <summary>
            <para>Resets any transformations that were made using translate(),
            scale(), shear(), rotate(), setWorldTransform(), setViewport() and
            setWindow().</para>
            <para>See also Coordinate Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetWorldMatrix(QtGui.QMatrix,System.Boolean)">
            <summary>
            <para>Sets the transformation matrix to matrix and enables
            transformations.</para>
            <para>Note: It is advisable to use setWorldTransform() instead of this
            function to preserve the properties of perspective transformations.</para>
            <para>If combine is true, then matrix is combined with the current
            transformation matrix; otherwise matrix replaces the current transformation
            matrix.</para>
            <para>If matrix is the identity matrix and combine is false, this
            function calls setWorldMatrixEnabled(false). (The identity matrix is the
            matrix where QMatrix::m11() and QMatrix::m22() are 1.0 and the rest are
            0.0.)</para>
            <para>The following functions can transform the coordinate system
            without using a QMatrix:</para>
            <para></para>
            <para>translate()</para>
            <para>scale()</para>
            <para>shear()</para>
            <para>rotate()</para>
            <para></para>
            <para>They operate on the painter's worldMatrix() and are implemented
            like this:</para>
            <para>void QPainter::rotate(qreal angle)</para>
            <para>{</para>
            <para>    QMatrix matrix;</para>
            <para>    matrix.rotate(angle);</para>
            <para>    setWorldMatrix(matrix, true);</para>
            <para>}</para>
            <para>Note that when using setWorldMatrix() function you should always
            have combine be true when you are drawing into a QPicture. Otherwise it may
            not be possible to replay the picture with additional transformations;
            using the translate(), scale(), etc. convenience functions is safe.</para>
            <para>For more information about the coordinate system, transformations
            and window-viewport conversion, see Coordinate System.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also worldMatrix(), setWorldTransform(), and
            QTransform.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetWorldTransform(QtGui.QTransform,System.Boolean)">
            <summary>
            <para>Sets the world transformation matrix. If combine is true, the
            specified matrix is combined with the current matrix; otherwise it replaces
            the current matrix.</para>
            <para>See also worldTransform(), transform(), and
            setTransform().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Scale(System.Double,System.Double)">
            <summary>
            <para>Scales the coordinate system by (sx, sy).</para>
            <para>See also setWorldTransform() and Coordinate
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Shear(System.Double,System.Double)">
            <summary>
            <para>Shears the coordinate system by (sh, sv).</para>
            <para>See also setWorldTransform() and Coordinate
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Rotate(System.Double)">
            <summary>
            <para>Rotates the coordinate system clockwise. The given angle
            parameter uses degree unit.</para>
            <para>See also setWorldTransform() and Coordinate
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Translate(QtCore.QPointF)">
            <summary>
            <para>Translates the coordinate system by the given offset; i.e. the
            given offset is added to points.</para>
            <para>See also setWorldTransform() and Coordinate
            Transformations.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Translate(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates the coordinate system by the given offset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Translate(System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Translates the coordinate system by the vector (dx, dy).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetWindow(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the painter's window to the rectangle beginning at (x, y)
            and the given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the painter's viewport rectangle to be the rectangle
            beginning at (x, y) with the given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.StrokePath(QtGui.QPainterPath,QtGui.QPen)">
            <summary>
            <para>Draws the outline (strokes) the path path with the pen specified
            by pen</para>
            <para>See also fillPath() and Drawing.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillPath(QtGui.QPainterPath,QtGui.QBrush)">
            <summary>
            <para>Fills the given path using the given brush. The outline is not
            drawn.</para>
            <para>Alternatively, you can specify a QColor instead of a QBrush; the
            QBrush constructor (taking a QColor argument) will automatically create a
            solid pattern brush.</para>
            <para>See also drawPath().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPath(QtGui.QPainterPath)">
            <summary>
            <para>Draws the given painter path using the current pen for outline
            and the current brush for filling.</para>
            <para></para>
            <para> 	QPainterPath path;</para>
            <para>path.moveTo(20, 80);</para>
            <para>path.lineTo(20, 30);</para>
            <para>path.cubicTo(80, 0, 50, 50, 80, 80);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawPath(path);</para>
            <para></para>
            <para></para>
            <para>See also the Painter Paths example and the Vector Deformation
            example.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoint(QtCore.QPointF)">
            <summary>
            <para>Draws a single point at the given position using the current
            pen's color.</para>
            <para>See also Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoint(QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a single point at the given position using the current
            pen's color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoint(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a single point at position (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoints(QtCore.QPointF,System.Int32)">
            <summary>
            <para>Draws the first pointCount points in the array points using the
            current pen's color.</para>
            <para>See also Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoints(QtGui.QPolygonF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the points in the vector points.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoints(QtCore.QPoint,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the first pointCount points in the array points using the
            current pen's color.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPoints(QtGui.QPolygon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the points in the vector points.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLine(QtCore.QLineF)">
            <summary>
            <para>Draws a line defined by line.</para>
            <para></para>
            <para> 	QLineF line(10.0, 80.0, 90.0, 20.0);</para>
            <para></para>
            <para>QPainter(this);</para>
            <para>painter.drawLine(line);</para>
            <para></para>
            <para></para>
            <para>See also drawLines(), drawPolyline(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLine(QtCore.QLine)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a line defined by line.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a line from (x1, y1) to (x2, y2).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLine(QtCore.QPoint,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a line from p1 to p2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLine(QtCore.QPointF,QtCore.QPointF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a line from p1 to p2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLines(QtCore.QLineF,System.Int32)">
            <summary>
            <para>Draws the first lineCount lines in the array lines using the
            current pen.</para>
            <para>See also drawLine() and drawPolyline().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLines(QtCore.QPointF,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the first lineCount lines in the array pointPairs using the
            current pen. The lines are specified as pairs of points so the number of
            entries in pointPairs must be at least lineCount * 2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLines(QtCore.QLine,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the first lineCount lines in the array lines using the
            current pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawLines(QtCore.QPoint,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the first lineCount lines in the array pointPairs using the
            current pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRect(QtCore.QRectF)">
            <summary>
            <para>Draws the current rectangle with the current pen and
            brush.</para>
            <para>A filled rectangle has a size of rectangle.size(). A stroked
            rectangle has a size of rectangle.size() plus the pen width.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawRect(rectangle);</para>
            <para></para>
            <para></para>
            <para>See also drawRects(), drawPolygon(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a rectangle with upper left corner at (x, y) and with the
            given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRect(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the current rectangle with the current pen and
            brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRects(QtCore.QRectF,System.Int32)">
            <summary>
            <para>Draws the first rectCount of the given rectangles using the
            current pen and brush.</para>
            <para>See also drawRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRects(QtCore.QRect,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the first rectCount of the given rectangles using the
            current pen and brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawEllipse(QtCore.QRectF)">
            <summary>
            <para>Draws the ellipse defined by the given rectangle.</para>
            <para>A filled ellipse has a size of rectangle.size(). A stroked
            ellipse has a size of rectangle.size() plus the pen width.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawEllipse(rectangle);</para>
            <para></para>
            <para></para>
            <para>See also drawPie() and Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawEllipse(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the ellipse defined by the given rectangle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawEllipse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the ellipse defined by the rectangle beginning at (x, y)
            with the given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawEllipse(QtCore.QPointF,System.Double,System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the ellipse positioned at center with radii rx and
            ry.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawEllipse(QtCore.QPoint,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the ellipse positioned at center with radii rx and
            ry.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolyline(QtCore.QPointF,System.Int32)">
            <summary>
            <para>Draws the polyline defined by the first pointCount points in
            points using the current pen.</para>
            <para>Note that unlike the drawPolygon() function the last point is not
            connected to the first, neither is the polyline filled.</para>
            <para></para>
            <para> static const QPointF points[3] = {</para>
            <para>    QPointF(10.0, 80.0),</para>
            <para>    QPointF(20.0, 10.0),</para>
            <para>    QPointF(80.0, 30.0),</para>
            <para>};</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawPolyline(points, 3);</para>
            <para></para>
            <para></para>
            <para>See also drawLines(), drawPolygon(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolyline(QtGui.QPolygonF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polyline defined by the given points using the current
            pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolyline(QtCore.QPoint,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polyline defined by the first pointCount points in
            points using the current pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolyline(QtGui.QPolygon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polyline defined by the given points using the current
            pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolygon(QtCore.QPointF,System.Int32,QtCore.Qt.FillRule)">
            <summary>
            <para>Draws the polygon defined by the first pointCount points in the
            array points using the current pen and brush.</para>
            <para></para>
            <para> 	static const QPointF points[4] = {</para>
            <para>    QPointF(10.0, 80.0),</para>
            <para>    QPointF(20.0, 10.0),</para>
            <para>    QPointF(80.0, 30.0),</para>
            <para>    QPointF(90.0, 70.0)</para>
            <para>};</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawPolygon(points, 4);</para>
            <para></para>
            <para></para>
            <para>The first point is implicitly connected to the last point, and
            the polygon is filled with the current brush().</para>
            <para>If fillRule is Qt::WindingFill, the polygon is filled using the
            winding fill algorithm. If fillRule is Qt::OddEvenFill, the polygon is
            filled using the odd-even fill algorithm. See Qt::FillRule for a more
            detailed description of these fill rules.</para>
            <para>See also drawConvexPolygon(), drawPolyline(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolygon(QtGui.QPolygonF,QtCore.Qt.FillRule)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polygon defined by the given points using the fill rule
            fillRule.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolygon(QtCore.QPoint,System.Int32,QtCore.Qt.FillRule)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polygon defined by the first pointCount points in the
            array points.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPolygon(QtGui.QPolygon,QtCore.Qt.FillRule)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the polygon defined by the given points using the fill rule
            fillRule.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawConvexPolygon(QtCore.QPointF,System.Int32)">
            <summary>
            <para>Draws the convex polygon defined by the first pointCount points
            in the array points using the current pen.</para>
            <para></para>
            <para> 	static const QPointF points[4] = {</para>
            <para>    QPointF(10.0, 80.0),</para>
            <para>    QPointF(20.0, 10.0),</para>
            <para>    QPointF(80.0, 30.0),</para>
            <para>    QPointF(90.0, 70.0)</para>
            <para>};</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawConvexPolygon(points, 4);</para>
            <para></para>
            <para></para>
            <para>The first point is implicitly connected to the last point, and
            the polygon is filled with the current brush(). If the supplied polygon is
            not convex, i.e. it contains at least one angle larger than 180 degrees,
            the results are undefined.</para>
            <para>On some platforms (e.g. X11), the drawConvexPolygon() function
            can be faster than the drawPolygon() function.</para>
            <para>See also drawPolygon(), drawPolyline(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawConvexPolygon(QtGui.QPolygonF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the convex polygon defined by polygon using the current pen
            and brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawConvexPolygon(QtCore.QPoint,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the convex polygon defined by the first pointCount points
            in the array points using the current pen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawConvexPolygon(QtGui.QPolygon)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the convex polygon defined by polygon using the current pen
            and brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawArc(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Draws the arc defined by the given rectangle, startAngle and
            spanAngle.</para>
            <para>The startAngle and spanAngle must be specified in 1/16th of a
            degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the
            angles mean counter-clockwise while negative values mean the clockwise
            direction. Zero degrees is at the 3 o'clock position.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para>int startAngle = 30 * 16;</para>
            <para>int spanAngle = 120 * 16;</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawArc(rectangle, startAngle, spanAngle);</para>
            <para></para>
            <para></para>
            <para>See also drawPie(), drawChord(), and Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawArc(QtCore.QRect,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the arc defined by the given rectangle, startAngle and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the arc defined by the rectangle beginning at (x, y) with
            the specified width and height, and the given startAngle and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPie(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Draws a pie defined by the given rectangle, startAngle and
            spanAngle.</para>
            <para>The pie is filled with the current brush().</para>
            <para>The startAngle and spanAngle must be specified in 1/16th of a
            degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the
            angles mean counter-clockwise while negative values mean the clockwise
            direction. Zero degrees is at the 3 o'clock position.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para>int startAngle = 30 * 16;</para>
            <para>int spanAngle = 120 * 16;</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawPie(rectangle, startAngle, spanAngle);</para>
            <para></para>
            <para></para>
            <para>See also drawEllipse(), drawChord(), and Coordinate
            System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the pie defined by the rectangle beginning at (x, y) with
            the specified width and height, and the given startAngle and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPie(QtCore.QRect,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a pie defined by the given rectangle, startAngle and and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawChord(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Draws the chord defined by the given rectangle, startAngle and
            spanAngle. The chord is filled with the current brush().</para>
            <para>The startAngle and spanAngle must be specified in 1/16th of a
            degree, i.e. a full circle equals 5760 (16 * 360). Positive values for the
            angles mean counter-clockwise while negative values mean the clockwise
            direction. Zero degrees is at the 3 o'clock position.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para>int startAngle = 30 * 16;</para>
            <para>int spanAngle = 120 * 16;</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawChord(rect, startAngle, spanAngle);</para>
            <para></para>
            <para></para>
            <para>See also drawArc(), drawPie(), and Coordinate System.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawChord(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the chord defined by the rectangle beginning at (x, y) with
            the specified width and height, and the given startAngle and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawChord(QtCore.QRect,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the chord defined by the given rectangle, startAngle and
            spanAngle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundedRect(QtCore.QRectF,System.Double,System.Double,QtCore.Qt.SizeMode)">
            <summary>
            <para>Draws the given rectangle rect with rounded corners.</para>
            <para>The xRadius and yRadius arguments specify the radii of the
            ellipses defining the corners of the rounded rectangle. When mode is
            Qt::RelativeSize, xRadius and yRadius are specified in percentage of half
            the rectangle's width and height respectively, and should be in the range
            0.0 to 100.0.</para>
            <para>A filled rectangle has a size of rect.size(). A stroked rectangle
            has a size of rect.size() plus the pen width.</para>
            <para></para>
            <para> 	QRectF rectangle(10.0, 20.0, 80.0, 60.0);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawRoundedRect(rectangle, 20.0, 15.0);</para>
            <para></para>
            <para></para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also drawRect() and QPen.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundedRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,QtCore.Qt.SizeMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given rectangle x, y, w, h with rounded corners.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundedRect(QtCore.QRect,System.Double,System.Double,QtCore.Qt.SizeMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given rectangle rect with rounded corners.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundRect(QtCore.QRectF,System.Int32,System.Int32)">
            <summary>
            <para>Draws a rectangle r with rounded corners.</para>
            <para>The xRnd and yRnd arguments specify how rounded the corners
            should be. 0 is angled corners, 99 is maximum roundedness.</para>
            <para>A filled rectangle has a size of r.size(). A stroked rectangle
            has a size of r.size() plus the pen width.</para>
            <para>See also drawRoundedRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangle x, y, w, h with rounded corners.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawRoundRect(QtCore.QRect,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangle r with rounded corners.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawTiledPixmap(QtCore.QRectF,QtGui.QPixmap,QtCore.QPointF)">
            <summary>
            <para>Draws a tiled pixmap, inside the given rectangle with its origin
            at the given position.</para>
            <para>Calling drawTiledPixmap() is similar to calling drawPixmap()
            several times to fill (tile) an area with a pixmap, but is potentially much
            more efficient depending on the underlying window system.</para>
            <para>See also drawPixmap().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawTiledPixmap(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPixmap,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a tiled pixmap in the specified rectangle.</para>
            <para>(x, y) specifies the top-left point in the paint device that is
            to be drawn onto; with the given width and height. (sx, sy) specifies the
            top-left point in the pixmap that is to be drawn; this defaults to (0,
            0).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawTiledPixmap(QtCore.QRect,QtGui.QPixmap,QtCore.QPoint)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a tiled pixmap, inside the given rectangle with its origin
            at the given position.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPicture(QtCore.QPointF,QtGui.QPicture)">
            <summary>
            <para>Replays the given picture at the given point.</para>
            <para>The QPicture class is a paint device that records and replays
            QPainter commands. A picture serializes the painter commands to an IO
            device in a platform-independent format. Everything that can be painted on
            a widget or pixmap can also be stored in a picture.</para>
            <para>This function does exactly the same as QPicture::play() when
            called with point = QPoint(0, 0).</para>
            <para></para>
            <para> QPicture picture;</para>
            <para>QPointF point(10.0, 20.0)</para>
            <para>picture.load(&quot;drawing.pic&quot;);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawPicture(0, 0, picture);</para>
            <para></para>
            <para></para>
            <para>See also QPicture::play().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPicture(System.Int32,System.Int32,QtGui.QPicture)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given picture at point (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPicture(QtCore.QPoint,QtGui.QPicture)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Replays the given picture at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QRectF,QtGui.QPixmap,QtCore.QRectF)">
            <summary>
            <para>Draws the rectangular portion source of the given pixmap into the
            given target in the paint device.</para>
            <para>Note: The pixmap is scaled to fit the rectangle, if both the
            pixmap and rectangle size disagree.</para>
            <para>Note: See Drawing High Resolution Versions of Pixmaps and Images
            on how this is affected by QPixmap::devicePixelRatio().</para>
            <para></para>
            <para> QRectF target(10.0, 20.0, 80.0, 60.0);</para>
            <para>QRectF source(0.0, 0.0, 70.0, 40.0);</para>
            <para>QPixmap pixmap(&quot;:myPixmap.png&quot;);</para>
            <para></para>
            <para>QPainter(this);</para>
            <para>painter.drawPixmap(target, pixmap, source);</para>
            <para></para>
            <para></para>
            <para>If pixmap is a QBitmap it is drawn with the bits that are
            &quot;set&quot; using the pens color. If backgroundMode is Qt::OpaqueMode,
            the &quot;unset&quot; bits are drawn using the color of the background
            brush; if backgroundMode is Qt::TransparentMode, the &quot;unset&quot; bits
            are transparent. Drawing bitmaps with gradient or texture colors is not
            supported.</para>
            <para>See also drawImage() and QPixmap::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QRect,QtGui.QPixmap,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given pixmap into the
            given target in the paint device.</para>
            <para>Note: The pixmap is scaled to fit the rectangle, if both the
            pixmap and rectangle size disagree.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPixmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion with the origin (sx, sy), width sw
            and height sh, of the given pixmap , at the point (x, y), with a width of w
            and a height of h. If sw or sh are equal to zero the width/height of the
            pixmap is used and adjusted by the offset sx/sy;</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(System.Int32,System.Int32,QtGui.QPixmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a pixmap at (x, y) by copying a part of the given pixmap
            into the paint device.</para>
            <para>(x, y) specifies the top-left point in the paint device that is
            to be drawn onto. (sx, sy) specifies the top-left point in pixmap that is
            to be drawn. The default is (0, 0).</para>
            <para>(sw, sh) specifies the size of the pixmap that is to be drawn.
            The default, (0, 0) (and negative) means all the way to the bottom-right of
            the pixmap.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QPointF,QtGui.QPixmap,QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given pixmap with its
            origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QPoint,QtGui.QPixmap,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given pixmap with its
            origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QPointF,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given pixmap with its origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QPoint,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given pixmap with its origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(System.Int32,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given pixmap at position (x, y).</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(QtCore.QRect,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given pixmap into the given rectangle.</para>
            <para>Note: The pixmap is scaled to fit the rectangle, if both the
            pixmap and rectangle size disagree.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmap(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QPixmap)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the pixmap into the rectangle at position (x, y) with the
            given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawPixmapFragments(QtGui.QPainter.PixmapFragment,System.Int32,QtGui.QPixmap,QtGui.QPainter.PixmapFragmentHint)">
            <summary>
            <para>This function is used to draw pixmap, or a sub-rectangle of
            pixmap, at multiple positions with different scale, rotation and opacity.
            fragments is an array of fragmentCount elements specifying the parameters
            used to draw each pixmap fragment. The hints parameter can be used to pass
            in drawing hints.</para>
            <para>This function is potentially faster than multiple calls to
            drawPixmap(), since the backend can optimize state changes.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QPainter::PixmapFragment and
            QPainter::PixmapFragmentHint.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QRectF,QtGui.QImage,QtCore.QRectF,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Draws the rectangular portion source of the given image into the
            target rectangle in the paint device.</para>
            <para>Note: The image is scaled to fit the rectangle, if both the image
            and rectangle size disagree.</para>
            <para>Note: See Drawing High Resolution Versions of Pixmaps and Images
            on how this is affected by QImage::devicePixelRatio().</para>
            <para>If the image needs to be modified to fit in a lower-resolution
            result (e.g. converting from 32-bit to 8-bit), use the flags to specify how
            you would prefer this to happen.</para>
            <para></para>
            <para> QRectF target(10.0, 20.0, 80.0, 60.0);</para>
            <para>QRectF source(0.0, 0.0, 70.0, 40.0);</para>
            <para>QImage image(&quot;:/images/myImage.png&quot;);</para>
            <para></para>
            <para>QPainter painter(this);</para>
            <para>painter.drawImage(target, image, source);</para>
            <para></para>
            <para></para>
            <para>See also drawPixmap() and QImage::devicePixelRatio().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QRect,QtGui.QImage,QtCore.QRect,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given image into the
            target rectangle in the paint device.</para>
            <para>Note: The image is scaled to fit the rectangle, if both the image
            and rectangle size disagree.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QPointF,QtGui.QImage,QtCore.QRectF,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given image with its
            origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QPoint,QtGui.QImage,QtCore.QRect,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the rectangular portion source of the given image with its
            origin at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QRectF,QtGui.QImage)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given image into the given rectangle.</para>
            <para>Note: The image is scaled to fit the rectangle, if both the image
            and rectangle size disagree.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QRect,QtGui.QImage)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given image into the given rectangle.</para>
            <para>Note: The image is scaled to fit the rectangle, if both the image
            and rectangle size disagree.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QPointF,QtGui.QImage)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given image at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(QtCore.QPoint,QtGui.QImage)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given image at the given point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawImage(System.Int32,System.Int32,QtGui.QImage,System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws an image at (x, y) by copying a part of image into the
            paint device.</para>
            <para>(x, y) specifies the top-left point in the paint device that is
            to be drawn onto. (sx, sy) specifies the top-left point in image that is to
            be drawn. The default is (0, 0).</para>
            <para>(sw, sh) specifies the size of the image that is to be drawn. The
            default, (0, 0) (and negative) means all the way to the bottom-right of the
            image.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawGlyphRun(QtCore.QPointF,QtGui.QGlyphRun)">
            <summary>
            <para>Draws the glyphs represented by glyphs at position. The position
            gives the edge of the baseline for the string of glyphs. The glyphs will be
            retrieved from the font selected on glyphs and at offsets given by the
            positions in glyphs.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also QGlyphRun::setRawFont(), QGlyphRun::setPositions(), and
            QGlyphRun::setGlyphIndexes().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawStaticText(QtCore.QPointF,QtGui.QStaticText)">
            <summary>
            <para>Draws the given staticText at the given topLeftPosition.</para>
            <para>The text will be drawn using the font and the transformation set
            on the painter. If the font and/or transformation set on the painter are
            different from the ones used to initialize the layout of the QStaticText,
            then the layout will have to be recalculated. Use QStaticText::prepare() to
            initialize staticText with the font and transformation with which it will
            later be drawn.</para>
            <para>If topLeftPosition is not the same as when staticText was
            initialized, or when it was last drawn, then there will be a slight
            overhead when translating the text to its new position.</para>
            <para>Note: If the painter's transformation is not affine, then
            staticText will be drawn using regular calls to drawText(), losing any
            potential for performance improvement.</para>
            <para>Note: The y-position is used as the top of the font.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QStaticText.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawStaticText(QtCore.QPoint,QtGui.QStaticText)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the staticText at the topLeftPosition.</para>
            <para>Note: The y-position is used as the top of the font.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawStaticText(System.Int32,System.Int32,QtGui.QStaticText)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the staticText at coordinates left and top.</para>
            <para>Note: The y-position is used as the top of the font.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QPointF,System.String)">
            <summary>
            <para>Draws the given text with the currently defined text direction,
            beginning at the given position.</para>
            <para>This function does not handle the newline character (\n), as it
            cannot break text into multiple lines, and it cannot display the newline
            character. Use the QPainter::drawText() overload that takes a rectangle
            instead if you want to draw multiple lines of text with the newline
            character, or if you want the text to be wrapped.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-position is used as the baseline of the font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QPoint,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text with the currently defined text direction,
            beginning at the given position.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-position is used as the baseline of the font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(System.Int32,System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text at position (x, y), using the painter's
            currently defined text direction.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-position is used as the baseline of the font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QRectF,System.Int32,System.String,QtCore.QRectF)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text within the provided rectangle. The rectangle
            along with alignment flags defines the anchors for the text.</para>
            <para></para>
            <para> 	QPainter painter(this);</para>
            <para>painter.drawText(rect, Qt::AlignCenter,
            tr(&quot;Qt\nProject&quot;));</para>
            <para></para>
            <para></para>
            <para>The boundingRect (if not null) is set to the what the bounding
            rectangle should be in order to enclose the whole text. The flags argument
            is a bitwise OR of the following flags:</para>
            <para></para>
            <para>Qt::AlignLeft</para>
            <para>Qt::AlignRight</para>
            <para>Qt::AlignHCenter</para>
            <para>Qt::AlignJustify</para>
            <para>Qt::AlignTop</para>
            <para>Qt::AlignBottom</para>
            <para>Qt::AlignVCenter</para>
            <para>Qt::AlignCenter</para>
            <para>Qt::TextDontClip</para>
            <para>Qt::TextSingleLine</para>
            <para>Qt::TextExpandTabs</para>
            <para>Qt::TextShowMnemonic</para>
            <para>Qt::TextWordWrap</para>
            <para>Qt::TextIncludeTrailingSpaces</para>
            <para></para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-coordinate of rectangle is used as the top of the
            font.</para>
            <para>See also Qt::AlignmentFlag, Qt::TextFlag, boundingRect(), and
            layoutDirection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QRect,System.Int32,System.String,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text within the provided rectangle according to
            the specified flags. The boundingRect (if not null) is set to the what the
            bounding rectangle should be in order to enclose the whole text.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-coordinate of rectangle is used as the top of the
            font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text within the rectangle with origin (x, y),
            width and height.</para>
            <para>The boundingRect (if not null) is set to the actual bounding
            rectangle of the output. The flags argument is a bitwise OR of the
            following flags:</para>
            <para></para>
            <para>Qt::AlignLeft</para>
            <para>Qt::AlignRight</para>
            <para>Qt::AlignHCenter</para>
            <para>Qt::AlignJustify</para>
            <para>Qt::AlignTop</para>
            <para>Qt::AlignBottom</para>
            <para>Qt::AlignVCenter</para>
            <para>Qt::AlignCenter</para>
            <para>Qt::TextSingleLine</para>
            <para>Qt::TextExpandTabs</para>
            <para>Qt::TextShowMnemonic</para>
            <para>Qt::TextWordWrap</para>
            <para></para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-position is used as the top of the font.</para>
            <para>See also Qt::AlignmentFlag, Qt::TextFlag, setFont(), and
            setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QRectF,System.String,QtGui.QTextOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text in the rectangle specified using the option
            to control its positioning and orientation.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-coordinate of rectangle is used as the top of the
            font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BoundingRect(QtCore.QRectF,System.Int32,System.String)">
            <summary>
            <para>Returns the bounding rectangle of the text as it will appear when
            drawn inside the given rectangle with the specified flags using the
            currently set font(); i.e the function tells you where the drawText()
            function will draw when given the same arguments.</para>
            <para>If the text does not fit within the given rectangle using the
            specified flags, the function returns the required rectangle.</para>
            <para>The flags argument is a bitwise OR of the following flags:</para>
            <para></para>
            <para>Qt::AlignLeft</para>
            <para>Qt::AlignRight</para>
            <para>Qt::AlignHCenter</para>
            <para>Qt::AlignTop</para>
            <para>Qt::AlignBottom</para>
            <para>Qt::AlignVCenter</para>
            <para>Qt::AlignCenter</para>
            <para>Qt::TextSingleLine</para>
            <para>Qt::TextExpandTabs</para>
            <para>Qt::TextShowMnemonic</para>
            <para>Qt::TextWordWrap</para>
            <para>Qt::TextIncludeTrailingSpaces</para>
            <para></para>
            <para>If several of the horizontal or several of the vertical alignment
            flags are set, the resulting alignment is undefined.</para>
            <para>See also drawText(), Qt::Alignment, and Qt::TextFlag.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BoundingRect(QtCore.QRect,System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the text as it will appear when
            drawn inside the given rectangle with the specified flags using the
            currently set font().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BoundingRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the bounding rectangle of the given text as it will
            appear when drawn inside the rectangle beginning at the point (x, y) with
            width w and height h.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BoundingRect(QtCore.QRectF,System.String,QtGui.QTextOption)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Instead of specifying flags as a bitwise OR of the
            Qt::AlignmentFlag and Qt::TextFlag, this overloaded function takes an
            option argument. The QTextOption class provides a description of general
            rich text properties.</para>
            <para>See also QTextOption.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRectF,QtGui.QBrush)">
            <summary>
            <para>Fills the given rectangle with the brush specified.</para>
            <para>Alternatively, you can specify a QColor instead of a QBrush; the
            QBrush constructor (taking a QColor argument) will automatically create a
            solid pattern brush.</para>
            <para>See also drawRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the rectangle beginning at (x, y) with the given width and
            height, using the given brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRect,QtGui.QBrush)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the specified brush.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRectF,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the color specified.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the rectangle beginning at (x, y) with the given width and
            height, using the given color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRect,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the color specified.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the rectangle beginning at (x, y) with the given width and
            height, using the given color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRect,QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the specified color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRectF,QtCore.Qt.GlobalColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the specified color.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(System.Int32,System.Int32,System.Int32,System.Int32,QtCore.Qt.BrushStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the rectangle beginning at (x, y) with the given width and
            height, using the brush style specified.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRect,QtCore.Qt.BrushStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the brush style specified.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.FillRect(QtCore.QRectF,QtCore.Qt.BrushStyle)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Fills the given rectangle with the brush style specified.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.EraseRect(QtCore.QRectF)">
            <summary>
            <para>Erases the area inside the given rectangle. Equivalent to
            calling</para>
            <para>fillRect(rectangle, background()).</para>
            <para>See also fillRect().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.EraseRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Erases the area inside the rectangle beginning at (x, y) with the
            given width and height.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.EraseRect(QtCore.QRect)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Erases the area inside the given rectangle.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetRenderHint(QtGui.QPainter.RenderHint,System.Boolean)">
            <summary>
            <para>Sets the given render hint on the painter if on is true;
            otherwise clears the render hint.</para>
            <para>See also setRenderHints(), renderHints(), and Rendering
            Quality.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetRenderHints(QtGui.QPainter.RenderHint,System.Boolean)">
            <summary>
            <para>Sets the given render hints on the painter if on is true;
            otherwise clears the render hints.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setRenderHint(), renderHints(), and Rendering
            Quality.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.TestRenderHint(QtGui.QPainter.RenderHint)">
            <summary>
            <para>Returns true if hint is set; otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also renderHints() and setRenderHint().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BeginNativePainting">
            <summary>
            <para>Flushes the painting pipeline and prepares for the user issuing
            commands directly to the underlying graphics context. Must be followed by a
            call to endNativePainting().</para>
            <para>Note that only the states the underlying paint engine changes
            will be reset to their respective default states. The states we reset may
            change from release to release. The following states are currently reset in
            the OpenGL 2 engine:</para>
            <para></para>
            <para>blending is disabled</para>
            <para>the depth, stencil and scissor tests are disabled</para>
            <para>the active texture unit is reset to 0</para>
            <para>the depth mask, depth function and the clear depth are reset to
            their default values</para>
            <para>the stencil mask, stencil operation and stencil function are
            reset to their default values</para>
            <para>the current color is reset to solid white</para>
            <para></para>
            <para>If, for example, the OpenGL polygon mode is changed by the user
            inside a beginNativePaint()/endNativePainting() block, it will not be reset
            to the default state by endNativePainting(). Here is an example that shows
            intermixing of painter commands and raw OpenGL commands:</para>
            <para>QPainter painter(this);</para>
            <para>painter.fillRect(0, 0, 128, 128, Qt::green);</para>
            <para>painter.beginNativePainting();</para>
            <para></para>
            <para>glEnable(GL_SCISSOR_TEST);</para>
            <para>glScissor(0, 0, 64, 64);</para>
            <para></para>
            <para>glClearColor(1, 0, 0, 1);</para>
            <para>glClear(GL_COLOR_BUFFER_BIT);</para>
            <para></para>
            <para>glDisable(GL_SCISSOR_TEST);</para>
            <para></para>
            <para>painter.endNativePainting();</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also endNativePainting().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.EndNativePainting">
            <summary>
            <para>Restores the painter after manually issuing native painting
            commands. Lets the painter restore any native state that it relies on
            before calling any other painter commands.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also beginNativePainting().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.DrawText(QtCore.QRectF,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws the given text in the rectangle specified using the option
            to control its positioning and orientation.</para>
            <para>By default, QPainter draws text anti-aliased.</para>
            <para>Note: The y-coordinate of rectangle is used as the top of the
            font.</para>
            <para>See also setFont() and setPen().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.BoundingRect(QtCore.QRectF,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Instead of specifying flags as a bitwise OR of the
            Qt::AlignmentFlag and Qt::TextFlag, this overloaded function takes an
            option argument. The QTextOption class provides a description of general
            rich text properties.</para>
            <para>See also QTextOption.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.SetRedirected(QtGui.IQPaintDevice,QtGui.IQPaintDevice,QtCore.QPoint)">
            <summary>
            <para>Please use QWidget::render() instead.</para>
            <para>Redirects all paint commands for the given paint device, to the
            replacement device. The optional point offset defines an offset within the
            source device.</para>
            <para>The redirection will not be effective until the begin() function
            has been called; make sure to call end() for the given device's painter (if
            any) before redirecting. Call restoreRedirected() to restore the previous
            redirection.</para>
            <para>Warning: Making use of redirections in the QPainter API implies
            that QPainter::begin() and QPaintDevice destructors need to hold a mutex
            for a short period. This can impact performance. Use of QWidget::render is
            strongly encouraged.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also redirected() and restoreRedirected().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.Redirected(QtGui.IQPaintDevice,QtCore.QPoint)">
            <summary>
            <para>Using QWidget::render() obsoletes the use of this
            function.</para>
            <para>Returns the replacement for given device. The optional out
            parameter offset returns the offset within the replaced device.</para>
            <para>Warning: Making use of redirections in the QPainter API implies
            that QPainter::begin() and QPaintDevice destructors need to hold a mutex
            for a short period. This can impact performance. Use of QWidget::render is
            strongly encouraged.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also setRedirected() and restoreRedirected().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPainter.RestoreRedirected(QtGui.IQPaintDevice)">
            <summary>
            <para>Using QWidget::render() obsoletes the use of this
            function.</para>
            <para>Restores the previous redirection for the given device after a
            call to setRedirected().</para>
            <para>Warning: Making use of redirections in the QPainter API implies
            that QPainter::begin() and QPaintDevice destructors need to hold a mutex
            for a short period. This can impact performance. Use of QWidget::render is
            strongly encouraged.</para>
            <para>Note: This function is thread-safe.</para>
            <para>See also redirected().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.compositionMode">
            <summary>
            <para>Returns the current composition mode.</para>
            <para>See also CompositionMode and setCompositionMode().</para>
            <para></para>
            <para>Sets the composition mode to the given mode.</para>
            <para>Warning: Only a QPainter operating on a QImage fully supports all
            composition modes. The RasterOp modes are supported for X11 as described in
            compositionMode().</para>
            <para>See also compositionMode().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Font">
            <summary>
            <para>Returns the currently set font used for drawing text.</para>
            <para>See also setFont(), drawText(), and Settings.</para>
            <para></para>
            <para>Sets the painter's font to the given font.</para>
            <para>This font is used by subsequent drawText() functions. The text
            color is the same as the pen color.</para>
            <para>If you set a font that isn't available, Qt finds a close match.
            font() will return what you set using setFont() and fontInfo() returns the
            font actually being used (which may be the same).</para>
            <para>See also font(), drawText(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Pen">
            <summary>
            <para>Returns the painter's current pen.</para>
            <para>See also setPen() and Settings.</para>
            <para></para>
            <para>Sets the painter's pen to be the given pen.</para>
            <para>The pen defines how to draw lines and outlines, and it also
            defines the text color.</para>
            <para>See also pen() and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Brush">
            <summary>
            <para>Returns the painter's current brush.</para>
            <para>See also QPainter::setBrush() and Settings.</para>
            <para></para>
            <para>Sets the painter's brush to the given brush.</para>
            <para>The painter's brush defines how shapes are filled.</para>
            <para>See also brush() and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.BackgroundMode">
            <summary>
            <para>Returns the current background mode.</para>
            <para>See also setBackgroundMode() and Settings.</para>
            <para></para>
            <para>Sets the background mode of the painter to the given mode</para>
            <para>Qt::TransparentMode (the default) draws stippled lines and text
            without setting the background pixels. Qt::OpaqueMode fills these space
            with the current background color.</para>
            <para>Note that in order to draw a bitmap or pixmap transparently, you
            must use QPixmap::setMask().</para>
            <para>See also backgroundMode(), setBackground(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.BrushOrigin">
            <summary>
            <para>Returns the currently set brush origin.</para>
            <para>See also setBrushOrigin() and Settings.</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Sets the brush's origin to the given position.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Background">
            <summary>
            <para>Returns the current background brush.</para>
            <para>See also setBackground() and Settings.</para>
            <para></para>
            <para>Sets the background brush of the painter to the given
            brush.</para>
            <para>The background brush is the brush that is filled in when drawing
            opaque text, stippled lines and bitmaps. The background brush has no effect
            in transparent background mode (which is the default).</para>
            <para>See also background(), setBackgroundMode(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Opacity">
            <summary>
            <para>Returns the opacity of the painter. The default value is
            1.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setOpacity().</para>
            <para></para>
            <para>Sets the opacity of the painter to opacity. The value should be
            in the range 0.0 to 1.0, where 0.0 is fully transparent and 1.0 is fully
            opaque.</para>
            <para>Opacity set on the painter will apply to all drawing operations
            individually.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also opacity().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.MatrixEnabled">
            <summary>
            <para>Use worldMatrixEnabled() instead</para>
            <para>See also setMatrixEnabled() and worldMatrixEnabled().</para>
            <para></para>
            <para>Use setWorldMatrixEnabled() instead.</para>
            <para>See also matrixEnabled() and setWorldMatrixEnabled().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.WorldMatrixEnabled">
            <summary>
            <para>Returns true if world transformation is enabled; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setWorldMatrixEnabled(), worldTransform(), and
            Coordinate System.</para>
            <para></para>
            <para>Enables transformations if enable is true, or disables
            transformations if enable is false. The world transformation matrix is not
            changed.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also worldMatrixEnabled(), worldTransform(), and Coordinate
            Transformations.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Window">
            <summary>
            <para>Returns the window rectangle.</para>
            <para>See also setWindow() and setViewTransformEnabled().</para>
            <para></para>
            <para>Sets the painter's window to the given rectangle, and enables
            view transformations.</para>
            <para>The window rectangle is part of the view transformation. The
            window specifies the logical coordinate system. Its sister, the viewport(),
            specifies the device coordinate system.</para>
            <para>The default window rectangle is the same as the device's
            rectangle.</para>
            <para>See also window(), viewTransformEnabled(), and Window-Viewport
            Conversion.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Viewport">
            <summary>
            <para>Returns the viewport rectangle.</para>
            <para>See also setViewport() and setViewTransformEnabled().</para>
            <para></para>
            <para>Sets the painter's viewport rectangle to the given rectangle, and
            enables view transformations.</para>
            <para>The viewport rectangle is part of the view transformation. The
            viewport specifies the device coordinate system. Its sister, the window(),
            specifies the logical coordinate system.</para>
            <para>The default viewport rectangle is the same as the device's
            rectangle.</para>
            <para>See also viewport(), viewTransformEnabled(), and Window-Viewport
            Conversion.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.ViewTransformEnabled">
            <summary>
            <para>Returns true if view transformation is enabled; otherwise returns
            false.</para>
            <para>See also setViewTransformEnabled() and worldTransform().</para>
            <para></para>
            <para>Enables view transformations if enable is true, or disables view
            transformations if enable is false.</para>
            <para>See also viewTransformEnabled() and Window-Viewport
            Conversion.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.LayoutDirection">
            <summary>
            <para>Returns the layout direction used by the painter when drawing
            text.</para>
            <para>See also QTextOption::textDirection(), setLayoutDirection(),
            drawText(), and Settings.</para>
            <para></para>
            <para>Sets the layout direction used by the painter when drawing text,
            to the specified direction.</para>
            <para>The default is Qt::LayoutDirectionAuto, which will implicitly
            determine the direction from the text drawn.</para>
            <para>See also QTextOption::setTextDirection(), layoutDirection(),
            drawText(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.ClipRegion">
            <summary>
            <para>Returns the currently set clip region. Note that the clip region
            is given in logical coordinates.</para>
            <para>Warning: QPainter does not store the combined clip explicitly as
            this is handled by the underlying QPaintEngine, so the path is recreated on
            demand and transformed to the current logical coordinate system. This is
            potentially an expensive operation.</para>
            <para>See also setClipRegion(), clipPath(), and setClipping().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.ClipPath">
            <summary>
            <para>Returns the current clip path in logical coordinates.</para>
            <para>Warning: QPainter does not store the combined clip explicitly as
            this is handled by the underlying QPaintEngine, so the path is recreated on
            demand and transformed to the current logical coordinate system. This is
            potentially an expensive operation.</para>
            <para>See also setClipPath(), clipRegion(), and setClipping().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Matrix">
            <summary>
            <para>Use worldTransform() instead.</para>
            <para>See also setMatrix() and worldTransform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Transform">
            <summary>
            <para>Returns the world transformation matrix.</para>
            <para>See also setTransform() and worldTransform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.WorldMatrix">
            <summary>
            <para>Returns the world transformation matrix.</para>
            <para>It is advisable to use worldTransform() because worldMatrix()
            does not preserve the properties of perspective transformations.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setWorldMatrix(), Coordinate Transformations, and
            Coordinate System.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.WorldTransform">
            <summary>
            <para>Returns the world transformation matrix.</para>
            <para>See also setWorldTransform().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.RenderHints">
            <summary>
            <para>Returns a flag that specifies the rendering hints that are set
            for this painter.</para>
            <para>See also setRenderHints(), testRenderHint(), and Rendering
            Quality.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.Device">
            <summary>
            <para>Returns the paint device on which this painter is currently
            painting, or 0 if the painter is not active.</para>
            <para>See also isActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.IsActive">
            <summary>
            <para>Returns true if begin() has been called and end() has not yet
            been called; otherwise returns false.</para>
            <para>See also begin() and QPaintDevice::paintingActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.FontMetrics">
            <summary>
            <para>Returns the font metrics for the painter if the painter is
            active. Otherwise, the return value is undefined.</para>
            <para>See also font(), isActive(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.FontInfo">
            <summary>
            <para>Returns the font info for the painter if the painter is active.
            Otherwise, the return value is undefined.</para>
            <para>See also font(), isActive(), and Settings.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.HasClipping">
            <summary>
            <para>Returns true if clipping has been set; otherwise returns
            false.</para>
            <para>See also setClipping() and Clipping.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.ClipBoundingRect">
            <summary>
            <para>Returns the bounding rectangle of the current clip if there is a
            clip; otherwise returns an empty rectangle. Note that the clip region is
            given in logical coordinates.</para>
            <para>The bounding rectangle is not guaranteed to be tight.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setClipRect(), setClipPath(), and
            setClipRegion().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.DeviceMatrix">
            <summary>
            <para>Returns the matrix that transforms from logical coordinates to
            device coordinates of the platform dependent paint device.</para>
            <para>Note: It is advisable to use deviceTransform() instead of this
            function to preserve the properties of perspective transformations.</para>
            <para>This function is only needed when using platform painting
            commands on the platform dependent handle (Qt::HANDLE), and the platform
            does not do transformations nativly.</para>
            <para>The QPaintEngine::PaintEngineFeature enum can be queried to
            determine whether the platform performs the transformations or not.</para>
            <para>See also worldMatrix() and QPaintEngine::hasFeature().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.DeviceTransform">
            <summary>
            <para>Returns the matrix that transforms from logical coordinates to
            device coordinates of the platform dependent paint device.</para>
            <para>This function is only needed when using platform painting
            commands on the platform dependent handle (Qt::HANDLE), and the platform
            does not do transformations nativly.</para>
            <para>The QPaintEngine::PaintEngineFeature enum can be queried to
            determine whether the platform performs the transformations or not.</para>
            <para>See also worldTransform() and QPaintEngine::hasFeature().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.CombinedMatrix">
            <summary>
            <para>Returns the transformation matrix combining the current
            window/viewport and world transformation.</para>
            <para>It is advisable to use combinedTransform() instead of this
            function to preserve the properties of perspective transformations.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setWorldTransform(), setWindow(), and
            setViewport().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.CombinedTransform">
            <summary>
            <para>Returns the transformation matrix combining the current
            window/viewport and world transformation.</para>
            <para>See also setWorldTransform(), setWindow(), and
            setViewport().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PaintEngine">
            <summary>
            <para>Returns the paint engine that the painter is currently operating
            on if the painter is active; otherwise 0.</para>
            <para>See also isActive().</para>
            </summary>
        </member>
        <member name="T:QtGui.QPainter.RenderHint">
            <summary>
            <para>Renderhints are used to specify flags to QPainter that may or may
            not be respected by any given engine.</para>
            <para>The RenderHints type is a typedef for QFlags&lt;RenderHint&gt;.
            It stores an OR combination of RenderHint values.</para>
            <para>See also renderHints(), setRenderHint(), Rendering Quality, and
            Concentric Circles Example.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.Antialiasing">
            <summary>Indicates that the engine should antialias edges of primitives if possible.</summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.TextAntialiasing">
            <summary>Indicates that the engine should antialias text if possible. To forcibly disable antialiasing for text, do not use this hint. Instead, set QFont::NoAntialias on your font's style strategy.</summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.SmoothPixmapTransform">
            <summary>Indicates that the engine should use a smooth pixmap transformation algorithm (such as bilinear) rather than nearest neighbor.</summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.HighQualityAntialiasing">
            <summary>This value is obsolete and will be ignored, use the Antialiasing render hint instead.</summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.NonCosmeticDefaultPen">
            <summary>This value is obsolete, the default for QPen is now non-cosmetic.</summary>
        </member>
        <member name="F:QtGui.QPainter.RenderHint.Qt4CompatiblePainting">
            <summary>Compatibility hint telling the engine to use the same X11 based fill rules as in Qt 4, where aliased rendering is offset by slightly less than half a pixel. Also will treat default constructed pens as cosmetic. Potentially useful when porting a Qt 4 application to Qt 5.</summary>
        </member>
        <member name="T:QtGui.QPainter.PixmapFragmentHint">
            <summary>
            <para>This enum was introduced or modified in  Qt 4.7.</para>
            <para>The PixmapFragmentHints type is a typedef for
            QFlags&lt;PixmapFragmentHint&gt;. It stores an OR combination of
            PixmapFragmentHint values.</para>
            <para>See also QPainter::drawPixmapFragments() and
            QPainter::PixmapFragment.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPainter.PixmapFragmentHint.OpaqueHint">
            <summary>Indicates that the pixmap fragments to be drawn are opaque. Opaque fragments are potentially faster to draw.</summary>
        </member>
        <member name="T:QtGui.QPainter.CompositionMode">
            <summary>
            <para>Defines the modes supported for digital image compositing.
            Composition modes are used to specify how the pixels in one image, the
            source, are merged with the pixel in another image, the destination.</para>
            <para>Please note that the bitwise raster operation modes, denoted with
            a RasterOp prefix, are only natively supported in the X11 and raster paint
            engines. This means that the only way to utilize these modes on the Mac is
            via a QImage. The RasterOp denoted blend modes are not supported for pens
            and brushes with alpha components. Also, turning on the
            QPainter::Antialiasing render hint will effectively disable the RasterOp
            modes.</para>
            <para></para>
            <para></para>
            <para>The most common type is SourceOver (often referred to as just
            alpha blending) where the source pixel is blended on top of the destination
            pixel in such a way that the alpha component of the source defines the
            translucency of the pixel.</para>
            <para>When the paint device is a QImage, the image format must be set
            to Format_ARGB32_Premultiplied or Format_ARGB32 for the composition modes
            to have any effect. For performance the premultiplied version is the
            preferred format.</para>
            <para>When a composition mode is set it applies to all painting
            operator, pens, brushes, gradients and pixmap/image drawing.</para>
            <para>See also compositionMode(), setCompositionMode(), Composition
            Modes, and Image Composition Example.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_SourceOver">
            <summary>This is the default mode. The alpha of the source is used to blend the pixel on top of the destination.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_DestinationOver">
            <summary>The alpha of the destination is used to blend it on top of the source pixels. This mode is the inverse of CompositionMode_SourceOver.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Clear">
            <summary>The pixels in the destination are cleared (set to fully transparent) independent of the source.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Source">
            <summary>The output is the source pixel. (This means a basic copy operation and is identical to SourceOver when the source pixel is opaque).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Destination">
            <summary>The output is the destination pixel. This means that the blending has no effect. This mode is the inverse of CompositionMode_Source.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_SourceIn">
            <summary>The output is the source, where the alpha is reduced by that of the destination.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_DestinationIn">
            <summary>The output is the destination, where the alpha is reduced by that of the source. This mode is the inverse of CompositionMode_SourceIn.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_SourceOut">
            <summary>The output is the source, where the alpha is reduced by the inverse of destination.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_DestinationOut">
            <summary>The output is the destination, where the alpha is reduced by the inverse of the source. This mode is the inverse of CompositionMode_SourceOut.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_SourceAtop">
            <summary>The source pixel is blended on top of the destination, with the alpha of the source pixel reduced by the alpha of the destination pixel.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_DestinationAtop">
            <summary>The destination pixel is blended on top of the source, with the alpha of the destination pixel is reduced by the alpha of the destination pixel. This mode is the inverse of CompositionMode_SourceAtop.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Xor">
            <summary>The source, whose alpha is reduced with the inverse of the destination alpha, is merged with the destination, whose alpha is reduced by the inverse of the source alpha. CompositionMode_Xor is not the same as the bitwise Xor.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Plus">
            <summary>Both the alpha and color of the source and destination pixels are added together.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Multiply">
            <summary>The output is the source color multiplied by the destination. Multiplying a color with white leaves the color unchanged, while multiplying a color with black produces black.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Screen">
            <summary>The source and destination colors are inverted and then multiplied. Screening a color with white produces white, whereas screening a color with black leaves the color unchanged.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Overlay">
            <summary>Multiplies or screens the colors depending on the destination color. The destination color is mixed with the source color to reflect the lightness or darkness of the destination.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Darken">
            <summary>The darker of the source and destination colors is selected.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Lighten">
            <summary>The lighter of the source and destination colors is selected.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_ColorDodge">
            <summary>The destination color is brightened to reflect the source color. A black source color leaves the destination color unchanged.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_ColorBurn">
            <summary>The destination color is darkened to reflect the source color. A white source color leaves the destination color unchanged.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_HardLight">
            <summary>Multiplies or screens the colors depending on the source color. A light source color will lighten the destination color, whereas a dark source color will darken the destination color.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_SoftLight">
            <summary>Darkens or lightens the colors depending on the source color. Similar to CompositionMode_HardLight.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Difference">
            <summary>Subtracts the darker of the colors from the lighter. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.CompositionMode_Exclusion">
            <summary>Similar to CompositionMode_Difference, but with a lower contrast. Painting with white inverts the destination color, whereas painting with black leaves the destination color unchanged.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SourceOrDestination">
            <summary>Does a bitwise OR operation on the source and destination pixels (src OR dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SourceAndDestination">
            <summary>Does a bitwise AND operation on the source and destination pixels (src AND dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SourceXorDestination">
            <summary>Does a bitwise XOR operation on the source and destination pixels (src XOR dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSourceAndNotDestination">
            <summary>Does a bitwise NOR operation on the source and destination pixels ((NOT src) AND (NOT dst)).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSourceOrNotDestination">
            <summary>Does a bitwise NAND operation on the source and destination pixels ((NOT src) OR (NOT dst)).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSourceXorDestination">
            <summary>Does a bitwise operation where the source pixels are inverted and then XOR'ed with the destination ((NOT src) XOR dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSource">
            <summary>Does a bitwise operation where the source pixels are inverted (NOT src).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSourceAndDestination">
            <summary>Does a bitwise operation where the source is inverted and then AND'ed with the destination ((NOT src) AND dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SourceAndNotDestination">
            <summary>Does a bitwise operation where the source is AND'ed with the inverted destination pixels (src AND (NOT dst)).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotSourceOrDestination">
            <summary>Does a bitwise operation where the source is inverted and then OR'ed with the destination ((NOT src) OR dst).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SourceOrNotDestination">
            <summary>Does a bitwise operation where the source is OR'ed with the inverted destination pixels (src OR (NOT dst)).</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_ClearDestination">
            <summary>The pixels in the destination are cleared (set to 0) independent of the source.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_SetDestination">
            <summary>The pixels in the destination are set (set to 1) independent of the source.</summary>
        </member>
        <member name="F:QtGui.QPainter.CompositionMode.RasterOp_NotDestination">
            <summary>Does a bitwise operation where the destination pixels are inverted (NOT dst).</summary>
        </member>
        <member name="T:QtGui.QPainter.PixmapFragment">
            <summary>
            <para>This class is used in conjunction with the
            QPainter::drawPixmapFragments() function to specify how a pixmap, or
            sub-rect of a pixmap, is drawn.</para>
            </summary>
            <remarks>
            <para>The sourceLeft, sourceTop, width and height variables are used as
            a source rectangle within the pixmap passed into the
            QPainter::drawPixmapFragments() function. The variables x, y, width and
            height are used to calculate the target rectangle that is drawn. x and y
            denotes the center of the target rectangle. The width and height in the
            target rectangle is scaled by the scaleX and scaleY values. The resulting
            target rectangle is then rotated rotation degrees around the x, y center
            point.</para>
            <para></para>
            <para>See also QPainter::drawPixmapFragments().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPainter.PixmapFragment.Create(QtCore.QPointF,QtCore.QRectF,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            <para>This is a convenience function that returns a
            QPainter::PixmapFragment that is initialized with the pos, sourceRect,
            scaleX, scaleY, rotation, opacity parameters.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.X">
            <summary>
            <para>This variable holds the x coordinate of center point in the
            target rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.Y">
            <summary>
            <para>This variable holds the y coordinate of the center point in the
            target rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.SourceLeft">
            <summary>
            <para>This variable holds the left coordinate of the source
            rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.SourceTop">
            <summary>
            <para>This variable holds the top coordinate of the source
            rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.Width">
            <summary>
            <para>This variable holds the width of the source rectangle and is used
            to calculate the width of the target rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.Height">
            <summary>
            <para>This variable holds the height of the source rectangle and is
            used to calculate the height of the target rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.ScaleX">
            <summary>
            <para>This variable holds the horizontal scale of the target
            rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.ScaleY">
            <summary>
            <para>This variable holds the vertical scale of the target
            rectangle.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.Rotation">
            <summary>
            <para>This variable holds the rotation of the target rectangle in
            degrees. The target rectangle is rotated after it has been scaled.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPainter.PixmapFragment.Opacity">
            <summary>
            <para>This variable holds the opacity of the target rectangle, where
            0.0 is fully transparent and 1.0 is fully opaque.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextItem">
            <summary>
            <para>The QTextItem class provides all the information required to draw
            text in a custom paint engine.</para>
            </summary>
            <remarks>
            <para>When you reimplement your own paint engine, you must reimplement
            QPaintEngine::drawTextItem(), a function that takes a QTextItem as one of
            its arguments.</para>
            </remarks>
        </member>
        <member name="P:QtGui.QTextItem.Descent">
            <summary>
            <para>Corresponds to the descent of the piece of text that is
            drawn.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextItem.Ascent">
            <summary>
            <para>Corresponds to the ascent of the piece of text that is
            drawn.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextItem.Width">
            <summary>
            <para>Specifies the total width of the text to be drawn.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextItem.RenderFlags">
            <summary>
            <para>Returns the render flags used.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextItem.Text">
            <summary>
            <para>Returns the text that should be drawn.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextItem.Font">
            <summary>
            <para>Returns the font that should be used to draw the text.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextItem.RenderFlag">
            <summary>
            <para>The RenderFlags type is a typedef for QFlags&lt;RenderFlag&gt;.
            It stores an OR combination of RenderFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextItem.RenderFlag.RightToLeft">
            <summary>Render the text from right to left.</summary>
        </member>
        <member name="F:QtGui.QTextItem.RenderFlag.Overline">
            <summary>Paint a line above the text.</summary>
        </member>
        <member name="F:QtGui.QTextItem.RenderFlag.Underline">
            <summary>Paint a line under the text.</summary>
        </member>
        <member name="F:QtGui.QTextItem.RenderFlag.StrikeOut">
            <summary>Paint a line through the text.</summary>
        </member>
        <member name="T:QtGui.QPaintEngine">
            <summary>
            <para>The QPaintEngine class provides an abstract definition of how
            QPainter draws to a given device on a given platform.</para>
            </summary>
            <remarks>
            <para>Qt provides several premade implementations of QPaintEngine for
            the different painter backends we support. The primary paint engine
            provided is the raster paint engine, which contains a software rasterizer
            which supports the full feature set on all supported platforms. This is the
            default for painting on QWidget-based classes in e.g. on Windows, X11 and
            Mac OS X, it is the backend for painting on QImage and it is used as a
            fallback for paint engines that do not support a certain capability. In
            addition we provide QPaintEngine implementations for OpenGL (accessible
            through QGLWidget) and printing (which allows using QPainter to draw on a
            QPrinter object).</para>
            <para>If one wants to use QPainter to draw to a different backend, one
            must subclass QPaintEngine and reimplement all its virtual functions. The
            QPaintEngine implementation is then made available by subclassing
            QPaintDevice and reimplementing the virtual function
            QPaintDevice::paintEngine().</para>
            <para>QPaintEngine is created and owned by the QPaintDevice that
            created it.</para>
            <para></para>
            <para>See also QPainter, QPaintDevice::paintEngine(), and Paint
            System.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPaintEngine.#ctor(QtGui.QPaintEngine.PaintEngineFeature)">
            <summary>
            <para>Creates a paint engine with the featureset specified by
            caps.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.active">
            <summary>
            <para>Returns true if the paint engine is actively drawing; otherwise
            returns false.</para>
            <para>See also setActive().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.SetActive(System.Boolean)">
            <summary>
            <para>Sets the active state of the paint engine to state.</para>
            <para>See also isActive().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.Begin(QtGui.IQPaintDevice)">
            <summary>
            <para>Reimplement this function to initialise your paint engine when
            painting is to start on the paint device pdev. Return true if the
            initialization was successful; otherwise return false.</para>
            <para>See also end() and isActive().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.End">
            <summary>
            <para>Reimplement this function to finish painting on the current paint
            device. Return true if painting was finished successfully; otherwise return
            false.</para>
            <para>See also begin() and isActive().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.UpdateState(QtGui.QPaintEngineState)">
            <summary>
            <para>Reimplement this function to update the state of a paint
            engine.</para>
            <para>When implemented, this function is responsible for checking the
            paint engine's current state and update the properties that are changed.
            Use the QPaintEngineState::state() function to find out which properties
            that must be updated, then use the corresponding get function to retrieve
            the current values for the given properties.</para>
            <para>See also QPaintEngineState.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawRects(QtCore.QRect,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The default implementation converts the first rectCount
            rectangles in the buffer rects to a QRectF and calls the floating point
            version of this function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawRects(QtCore.QRectF,System.Int32)">
            <summary>
            <para>Draws the first rectCount rectangles in the buffer rects. The
            default implementation of this function calls drawPath() or drawPolygon()
            depending on the feature set of the paint engine.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawLines(QtCore.QLine,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The default implementation converts the first lineCount lines in
            lines to a QLineF and calls the floating point version of this
            function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawLines(QtCore.QLineF,System.Int32)">
            <summary>
            <para>The default implementation splits the list of lines in lines into
            lineCount separate calls to drawPath() or drawPolygon() depending on the
            feature set of the paint engine.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawEllipse(QtCore.QRectF)">
            <summary>
            <para>Reimplement this function to draw the largest ellipse that can be
            contained within rectangle rect.</para>
            <para>The default implementation calls drawPolygon().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawEllipse(QtCore.QRect)">
            <summary>
            <para>The default implementation of this function calls the floating
            point version of this function</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPath(QtGui.QPainterPath)">
            <summary>
            <para>The default implementation ignores the path and does
            nothing.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPoints(QtCore.QPointF,System.Int32)">
            <summary>
            <para>Draws the first pointCount points in the buffer points</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPoints(QtCore.QPoint,System.Int32)">
            <summary>
            <para>Draws the first pointCount points in the buffer points</para>
            <para>The default implementation converts the first pointCount QPoints
            in points to QPointFs and calls the floating point version of
            drawPoints.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPolygon(QtCore.QPointF,System.Int32,QtGui.QPaintEngine.PolygonDrawMode)">
            <summary>
            <para>Reimplement this virtual function to draw the polygon defined by
            the pointCount first points in points, using mode mode.</para>
            <para>Note: At least one of the drawPolygon() functions must be
            reimplemented.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPolygon(QtCore.QPoint,System.Int32,QtGui.QPaintEngine.PolygonDrawMode)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Reimplement this virtual function to draw the polygon defined by
            the pointCount first points in points, using mode mode.</para>
            <para>Note: At least one of the drawPolygon() functions must be
            reimplemented.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawPixmap(QtCore.QRectF,QtGui.QPixmap,QtCore.QRectF)">
            <summary>
            <para>Reimplement this function to draw the part of the pm specified by
            the sr rectangle in the given r.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawTextItem(QtCore.QPointF,QtGui.QTextItem)">
            <summary>
            <para>This function draws the text item textItem at position p. The
            default implementation of this function converts the text to a QPainterPath
            and paints the resulting path.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawTiledPixmap(QtCore.QRectF,QtGui.QPixmap,QtCore.QPointF)">
            <summary>
            <para>Reimplement this function to draw the pixmap in the given rect,
            starting at the given p. The pixmap will be drawn repeatedly until the rect
            is filled.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.DrawImage(QtCore.QRectF,QtGui.QImage,QtCore.QRectF,QtCore.Qt.ImageConversionFlag)">
            <summary>
            <para>Reimplement this function to draw the part of the image specified
            by the sr rectangle in the given rectangle using the given conversion flags
            flags, to convert it to a pixmap.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPaintEngine.HasFeature(QtGui.QPaintEngine.PaintEngineFeature)">
            <summary>
            <para>Returns true if the paint engine supports the specified feature;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngine.PaintDevice">
            <summary>
            <para>Returns the device that this engine is painting on, if painting
            is active; otherwise returns 0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngine.type">
            <summary>
            <para>Reimplement this function to return the paint engine Type.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngine.Painter">
            <summary>
            <para>Returns the paint engine's painter.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPaintEngine.PaintEngineFeature">
            <summary>
            <para>This enum is used to describe the features or capabilities that
            the paint engine has. If a feature is not supported by the engine, QPainter
            will do a best effort to emulate that feature through other means and pass
            on an alpha blended QImage to the engine with the emulated results. Some
            features cannot be emulated: AlphaBlend and PorterDuff.</para>
            <para>The PaintEngineFeatures type is a typedef for
            QFlags&lt;PaintEngineFeature&gt;. It stores an OR combination of
            PaintEngineFeature values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PrimitiveTransform">
            <summary>The engine has support for transforming drawing primitives.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PatternTransform">
            <summary>The engine has support for transforming brush patterns.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PixmapTransform">
            <summary>The engine can transform pixmaps, including rotation and shearing.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PatternBrush">
            <summary>The engine is capable of rendering brushes with the brush patterns specified in Qt::BrushStyle.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.LinearGradientFill">
            <summary>The engine supports linear gradient fills.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.RadialGradientFill">
            <summary>The engine supports radial gradient fills.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.ConicalGradientFill">
            <summary>The engine supports conical gradient fills.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.AlphaBlend">
            <summary>The engine can alpha blend primitives.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PorterDuff">
            <summary>The engine supports Porter-Duff operations</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PainterPaths">
            <summary>The engine has path support.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.Antialiasing">
            <summary>The engine can use antialising to improve the appearance of rendered primitives.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.BrushStroke">
            <summary>The engine supports drawing strokes that contain brushes as fills, not just solid colors (e.g. a dashed gradient line of width 2).</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.ConstantOpacity">
            <summary>The engine supports the feature provided by QPainter::setOpacity().</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.MaskedBrush">
            <summary>The engine is capable of rendering brushes that has a texture with an alpha channel or a mask.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PerspectiveTransform">
            <summary>The engine has support for performing perspective transformations on primitives.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.BlendModes">
            <summary>The engine supports blending modes.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.ObjectBoundingModeGradients">
            <summary>The engine has native support for gradients with coordinate mode QGradient::ObjectBoundingMode. Otherwise, if QPaintEngine::PatternTransform is supported, object bounding mode gradients are converted to gradients with coordinate mode QGradient::LogicalMode and a brush transform for the coordinate mapping.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.RasterOpModes">
            <summary>The engine supports bitwise raster operations.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.PaintOutsidePaintEvent">
            <summary>The engine is capable of painting outside of paint events.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PaintEngineFeature.AllFeatures">
            <summary>All of the above features. This enum value is usually used as a bit mask.</summary>
        </member>
        <member name="T:QtGui.QPaintEngine.DirtyFlag">
            <summary>
            <para>These types are used by QPainter to trigger lazy updates of the
            various states in the QPaintEngine using
            QPaintEngine::updateState().</para>
            <para>A paint engine must update every dirty state.</para>
            <para>The DirtyFlags type is a typedef for QFlags&lt;DirtyFlag&gt;. It
            stores an OR combination of DirtyFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyPen">
            <summary>The pen is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyBrush">
            <summary>The brush is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyBrushOrigin">
            <summary>The brush origin is dirty and needs to updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyFont">
            <summary>The font is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyBackground">
            <summary>The background is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyBackgroundMode">
            <summary>The background mode is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyTransform">
            <summary>The transform is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyClipRegion">
            <summary>The clip region is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyClipPath">
            <summary>The clip path is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyHints">
            <summary>The render hints is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyCompositionMode">
            <summary>The composition mode is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyClipEnabled">
            <summary>Whether clipping is enabled or not is dirty and needs to be updated.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.DirtyOpacity">
            <summary>The constant opacity has changed and needs to be updated as part of the state change in QPaintEngine::updateState().</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.DirtyFlag.AllDirty">
            <summary>Convenience enum used internally.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PolygonDrawMode.OddEvenMode">
            <summary>The polygon should be drawn using OddEven fill rule.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PolygonDrawMode.WindingMode">
            <summary>The polygon should be drawn using Winding fill rule.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PolygonDrawMode.ConvexMode">
            <summary>The polygon is a convex polygon and can be drawn using specialized algorithms where available.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.PolygonDrawMode.PolylineMode">
            <summary>Only the outline of the polygon should be drawn.</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.QuickDraw">
            <summary>Mac OS X's QuickDraw</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.CoreGraphics">
            <summary>Mac OS X's Quartz2D (CoreGraphics)</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.QWindowSystem">
            <summary>Qt for Embedded Linux</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.PostScript">
            <summary>(No longer supported)</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.Picture">
            <summary>QPicture format</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.SVG">
            <summary>Scalable Vector Graphics XML format</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.Direct3D">
            <summary>Windows only, Direct3D based engine</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.Pdf">
            <summary>Portable Document Format</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.Direct2D">
            <summary>Windows only, Direct2D based engine</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.User">
            <summary>First user type ID</summary>
        </member>
        <member name="F:QtGui.QPaintEngine.Type.MaxUser">
            <summary>Last user type ID</summary>
        </member>
        <member name="T:QtGui.QPaintEngineState">
            <summary>
            <para>The QPaintEngineState class provides information about the active
            paint engine's current state.</para>
            </summary>
            <remarks>
            <para>QPaintEngineState records which properties that have changed
            since the last time the paint engine was updated, as well as their current
            value.</para>
            <para>Which properties that have changed can at any time be retrieved
            using the state() function. This function returns an instance of the
            QPaintEngine::DirtyFlags type which stores an OR combination of
            QPaintEngine::DirtyFlag values. The QPaintEngine::DirtyFlag enum defines
            whether a property has changed since the last update or not.</para>
            <para>If a property is marked with a dirty flag, its current value can
            be retrieved using the corresponding get function:</para>
            <para></para>
            <para></para>
            <para> Property FlagCurrent Property Value</para>
            <para>QPaintEngine::DirtyBackground	backgroundBrush()</para>
            <para>QPaintEngine::DirtyBackgroundMode	backgroundMode()</para>
            <para>QPaintEngine::DirtyBrush	brush()</para>
            <para>QPaintEngine::DirtyBrushOrigin	brushOrigin()</para>
            <para>QPaintEngine::DirtyClipRegion or QPaintEngine::DirtyClipPath
            clipOperation()</para>
            <para>QPaintEngine::DirtyClipPath	clipPath()</para>
            <para>QPaintEngine::DirtyClipRegion	clipRegion()</para>
            <para>QPaintEngine::DirtyCompositionMode	compositionMode()</para>
            <para>QPaintEngine::DirtyFont	font()</para>
            <para>QPaintEngine::DirtyTransform	transform()</para>
            <para>QPaintEngine::DirtyClipEnabled	isClipEnabled()</para>
            <para>QPaintEngine::DirtyPen	pen()</para>
            <para>QPaintEngine::DirtyHints	renderHints()</para>
            <para></para>
            <para>The QPaintEngineState class also provide the painter() function
            which returns a pointer to the painter that is currently updating the paint
            engine.</para>
            <para>An instance of this class, representing the current state of the
            active paint engine, is passed as argument to the
            QPaintEngine::updateState() function. The only situation in which you will
            have to use this class directly is when implementing your own paint
            engine.</para>
            <para></para>
            <para>See also QPaintEngine.</para>
            </remarks>
        </member>
        <member name="P:QtGui.QPaintEngineState.State">
            <summary>
            <para>Returns a combination of flags identifying the set of properties
            that need to be updated when updating the paint engine's state (i.e. during
            a call to the QPaintEngine::updateState() function).</para>
            <para>See also QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Pen">
            <summary>
            <para>Returns the pen in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyPen flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Brush">
            <summary>
            <para>Returns the brush in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyBrush flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.BrushOrigin">
            <summary>
            <para>Returns the brush origin in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyBrushOrigin flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.BackgroundBrush">
            <summary>
            <para>Returns the background brush in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyBackground flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.BackgroundMode">
            <summary>
            <para>Returns the background mode in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyBackgroundMode
            flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Font">
            <summary>
            <para>Returns the font in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyFont flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Matrix">
            <summary>
            <para>Returns the matrix in the current paint engine state.</para>
            <para>Note: It is advisable to use transform() instead of this function
            to preserve the properties of perspective transformations.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyTransform flag.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Transform">
            <summary>
            <para>Returns the matrix in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyTransform flag.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.ClipOperation">
            <summary>
            <para>Returns the clip operation in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes either the QPaintEngine::DirtyClipPath or the
            QPaintEngine::DirtyClipRegion flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.ClipRegion">
            <summary>
            <para>Returns the clip region in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyClipRegion flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.ClipPath">
            <summary>
            <para>Returns the clip path in the current paint engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyClipPath flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.IsClipEnabled">
            <summary>
            <para>Returns whether clipping is enabled or not in the current paint
            engine state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyClipEnabled flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.RenderHints">
            <summary>
            <para>Returns the render hints in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyHints flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.CompositionMode">
            <summary>
            <para>Returns the composition mode in the current paint engine
            state.</para>
            <para>This variable should only be used when the state() returns a
            combination which includes the QPaintEngine::DirtyCompositionMode
            flag.</para>
            <para>See also state() and QPaintEngine::updateState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Opacity">
            <summary>
            <para>Returns the opacity in the current paint engine state.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.Painter">
            <summary>
            <para>Returns a pointer to the painter currently updating the paint
            engine.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.BrushNeedsResolving">
            <summary>
            <para>Returns whether the coordinate of the fill have been specified as
            bounded by the current rendering operation and have to be resolved (about
            the currently rendered primitive).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPaintEngineState.PenNeedsResolving">
            <summary>
            <para>Returns whether the coordinate of the stroke have been specified
            as bounded by the current rendering operation and have to be resolved
            (about the currently rendered primitive).</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="T:QtGui.QPdfWriter">
            <summary>
            <para>The QPdfWriter class is a class to generate PDFs that can be used
            as a paint device.</para>
            </summary>
            <remarks>
            <para>QPdfWriter generates PDF out of a series of drawing commands
            using QPainter. The newPage() method can be used to create several
            pages.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QPdfWriter.#ctor(System.String)">
            <summary>
            <para>Constructs a PDF writer that will write the pdf to
            filename.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.#ctor(QtCore.QIODevice)">
            <summary>
            <para>Constructs a PDF writer that will write the pdf to device.</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.NewPage">
            <summary>
            <para>Reimplemented from QPagedPaintDevice::newPage().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.SetPageLayout(QtGui.QPageLayout)">
            <summary>
            <para>Sets the page layout to newPageLayout.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page layout to a new
            page. You should not call any painting methods between a call to
            setPageLayout() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>Returns true if the page layout was successfully set to
            newPageLayout.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.SetPageSize(QtGui.QPageSize)">
            <summary>
            <para>Sets the page size to pageSize.</para>
            <para>To get the current QPageSize use pageLayout().pageSize().</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new page size to a new
            page. You should not call any painting methods between a call to
            setPageSize() and newPage() as the wrong paint metrics may be used.</para>
            <para>Returns true if the page size was successfully set to
            pageSize.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageSize() and pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.SetPageOrientation(QtGui.QPageLayout.Orientation)">
            <summary>
            <para>Sets the page orientation.</para>
            <para>The page orientation is used to define the orientation of the
            page size when obtaining the page rect.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new orientation to a new
            page. You should not call any painting methods between a call to
            setPageOrientation() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current QPageLayout::Orientation use
            pageLayout().pageOrientation().</para>
            <para>Returns true if the page orientation was successfully set to
            orientation.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.SetPageMargins(QtCore.QMarginsF)">
            <summary>
            <para>Set the page margins in the current page layout units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QPdfWriter.SetPageMargins(QtCore.QMarginsF,QtGui.QPageLayout.Unit)">
            <summary>
            <para>Set the page margins defined in the given units.</para>
            <para>You should call this before calling QPainter::begin(), or
            immediately before calling newPage() to apply the new margins to a new
            page. You should not call any painting methods between a call to
            setPageMargins() and newPage() as the wrong paint metrics may be
            used.</para>
            <para>To get the current page margins use
            pageLayout().pageMargins().</para>
            <para>Returns true if the page margins were successfully set to
            margins.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also pageLayout().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Title">
            <summary>
            <para>Returns the title of the document.</para>
            <para>See also setTitle().</para>
            <para></para>
            <para>Sets the title of the document being created to title.</para>
            <para>See also title().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Creator">
            <summary>
            <para>Returns the creator of the document.</para>
            <para>See also setCreator().</para>
            <para></para>
            <para>Sets the creator of the document to creator.</para>
            <para>See also creator().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Resolution">
            <summary>
            <para>Returns the resolution of the PDF in DPI.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setResolution().</para>
            <para></para>
            <para>Sets the PDF resolution in DPI.</para>
            <para>This setting affects the coordinate system as returned by, for
            example QPainter::viewport().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also resolution().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.pageSize">
            <summary>
            <para>Returns the currently used page size.</para>
            <para>See also setPageSize().</para>
            <para></para>
            <para>Sets the size of the a page to size.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setPageSize().</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PageSizeMM">
            <summary>
            <para>Returns the page size in millimeters.</para>
            <para>See also setPageSizeMM().</para>
            <para></para>
            <para>Sets the page size to size. size is specified in
            millimeters.</para>
            <para>If the size matches a standard QPagedPaintDevice::PageSize then
            that page size will be used, otherwise QPagedPaintDevice::Custom will be
            set.</para>
            <para>See also pageSizeMM().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setPageSizeMM().</para>
            <para>See also setPageSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.margins">
            <summary>
            <para>Returns the current margins of the paint device. The default is
            0.</para>
            <para>Margins are specified in millimeters.</para>
            <para>See also setMargins().</para>
            <para></para>
            <para>Sets the margins to be used to margins.</para>
            <para>Margins are specified in millimeters.</para>
            <para>The margins are purely a hint to the drawing method. They don't
            affect the coordinate system or clipping.</para>
            <para>See also margins().</para>
            <para></para>
            <para>Reimplemented from QPagedPaintDevice::setMargins().</para>
            <para>See also setPageMargins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PaintEngine">
            <summary>
            <para>Reimplemented from QPaintDevice::paintEngine().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PageLayout">
            <summary>
            <para>Returns the current page layout. Use this method to access the
            current QPageSize, QPageLayout::Orientation, QMarginsF, fullRect() and
            paintRect().</para>
            <para>Note that you cannot use the setters on the returned object, you
            must either call the individual QPagedPaintDevice setters or use
            setPageLayout().</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also setPageLayout(), setPageSize(), setPageOrientation(),
            and setPageMargins().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PaintingActive">
            <summary>
            <para>Returns true if the device is currently being painted on, i.e.
            someone has called QPainter::begin() but not yet called QPainter::end() for
            this device; otherwise returns false.</para>
            <para>See also QPainter::isActive().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Width">
            <summary>
            <para>Returns the width of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also widthMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Height">
            <summary>
            <para>Returns the height of the paint device in default coordinate
            system units (e.g. pixels for QPixmap and QWidget).</para>
            <para>See also heightMM().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.WidthMM">
            <summary>
            <para>Returns the width of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.HeightMM">
            <summary>
            <para>Returns the height of the paint device in millimeters. Due to
            platform limitations it may not be possible to use this function to
            determine the actual physical size of a widget on the screen.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.LogicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from widthMM().</para>
            <para>Note that if the logicalDpiX() doesn't equal the physicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiY() and physicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.LogicalDpiY">
            <summary>
            <para>Returns the vertical resolution of the device in dots per inch,
            which is used when computing font sizes. For X11, this is usually the same
            as could be computed from heightMM().</para>
            <para>Note that if the logicalDpiY() doesn't equal the physicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also logicalDpiX() and physicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PhysicalDpiX">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiX() doesn't equal the logicalDpiX(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiY() and logicalDpiX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.PhysicalDpiY">
            <summary>
            <para>Returns the horizontal resolution of the device in dots per inch.
            For example, when printing, this resolution refers to the physical
            printer's resolution. The logical DPI on the other hand, refers to the
            resolution used by the actual paint engine.</para>
            <para>Note that if the physicalDpiY() doesn't equal the logicalDpiY(),
            the corresponding QPaintEngine must handle the resolution mapping.</para>
            <para>See also physicalDpiX() and logicalDpiY().</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.DevicePixelRatio">
            <summary>
            <para>Returns the device pixel ratio for device.</para>
            <para>Common values are 1 for normal-dpi displays and 2 for high-dpi
            &quot;retina&quot; displays.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.ColorCount">
            <summary>
            <para>Returns the number of different colors available for the paint
            device. If the number of colors available is too great to be represented by
            the int data type, then INT_MAX will be returned instead.</para>
            </summary>
        </member>
        <member name="P:QtGui.QPdfWriter.Depth">
            <summary>
            <para>Returns the bit depth (number of bit planes) of the paint
            device.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextLength">
            <summary>
            <para>The QTextLength class encapsulates the different types of length
            used in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>When we specify a value for the length of an element in a text
            document, we often need to provide some other information so that the
            length is used in the way we expect. For example, when we specify a table
            width, the value can represent a fixed number of pixels, or it can be a
            percentage value. This information changes both the meaning of the value
            and the way it is used.</para>
            <para>Generally, this class is used to specify table widths. These can
            be specified either as a fixed amount of pixels, as a percentage of the
            containing frame's width, or by a variable width that allows it to take up
            just the space it requires.</para>
            <para></para>
            <para>See also QTextTable.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextLength.#ctor">
            <summary>
            <para>Constructs a new length object which represents a variable
            size.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLength.#ctor(QtGui.QTextLength.Type,System.Double)">
            <summary>
            <para>Constructs a new length object of the given type and
            value.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLength.Value(System.Double)">
            <summary>
            <para>Returns the effective length, constrained by the type of the
            length object and the specified maximumLength.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLength.op_Equality(QtGui.QTextLength,QtGui.QTextLength)">
            <summary>
            <para>Returns true if this text length is the same as the other text
            length.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLength.op_Inequality(QtGui.QTextLength,QtGui.QTextLength)">
            <summary>
            <para>Returns true if this text length is different from the other text
            length.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLength.op_Implicit(QtGui.QTextLength)~QtCore.QVariant">
            <summary>
            <para>Returns the text length as a QVariant</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLength.type">
            <summary>
            <para>Returns the type of this length object.</para>
            <para>See also QTextLength::Type.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLength.RawValue">
            <summary>
            <para>Returns the constraint value that is specific for the type of the
            length. If the length is QTextLength::PercentageLength then the raw value
            is in percent, in the range of 0 to 100. If the length is
            QTextLength::FixedLength then that fixed amount is returned. For variable
            lengths, zero is returned.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextLength.Type">
            <summary>
            <para>This enum describes the different types a length object can
            have.</para>
            <para>See also type().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextLength.Type.VariableLength">
            <summary>The width of the object is variable</summary>
        </member>
        <member name="F:QtGui.QTextLength.Type.FixedLength">
            <summary>The width of the object is fixed</summary>
        </member>
        <member name="F:QtGui.QTextLength.Type.PercentageLength">
            <summary>The width of the object is in percentage of the maximum width</summary>
        </member>
        <member name="T:QtGui.QTextFormat">
            <summary>
            <para>The QTextFormat class provides formatting information for a
            QTextDocument.</para>
            </summary>
            <remarks>
            <para>A QTextFormat is a generic class used for describing the format
            of parts of a QTextDocument. The derived classes QTextCharFormat,
            QTextBlockFormat, QTextListFormat, and QTextTableFormat are usually more
            useful, and describe the formatting that is applied to specific parts of
            the document.</para>
            <para>A format has a FormatType which specifies the kinds of text item
            it can format; e.g. a block of text, a list, a table, etc. A format also
            has various properties (some specific to particular format types), as
            described by the Property enum. Every property has a corresponding
            Property.</para>
            <para>The format type is given by type(), and the format can be tested
            with isCharFormat(), isBlockFormat(), isListFormat(), isTableFormat(),
            isFrameFormat(), and isImageFormat(). If the type is determined, it can be
            retrieved with toCharFormat(), toBlockFormat(), toListFormat(),
            toTableFormat(), toFrameFormat(), and toImageFormat().</para>
            <para>A format's properties can be set with the setProperty()
            functions, and retrieved with boolProperty(), intProperty(),
            doubleProperty(), and stringProperty() as appropriate. All the property IDs
            used in the format can be retrieved with allPropertyIds(). One format can
            be merged into another using merge().</para>
            <para>A format's object index can be set with setObjectIndex(), and
            retrieved with objectIndex(). These methods can be used to associate the
            format with a QTextObject. It is used to represent lists, frames, and
            tables inside the document.</para>
            <para></para>
            <para>See also Rich Text Processing.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextFormat.#ctor">
            <summary>
            <para>Creates a new text format with an InvalidFormat.</para>
            <para>See also FormatType.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.#ctor(System.Int32)">
            <summary>
            <para>Creates a new text format of the given type.</para>
            <para>See also FormatType.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.#ctor(QtGui.QTextFormat)">
            <summary>
            <para>Creates a new text format with the same attributes as the other
            text format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.Swap(QtGui.QTextFormat)">
            <summary>
            <para>Swaps this text format with other. This function is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.Merge(QtGui.QTextFormat)">
            <summary>
            <para>Merges the other format with this format; where there are
            conflicts the other format takes precedence.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.property(System.Int32)">
            <summary>
            <para>Returns the property specified by the given propertyId.</para>
            <para>See also setProperty() and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.SetProperty(System.Int32,QtCore.QVariant)">
            <summary>
            <para>Sets the property specified by the propertyId to the given
            value.</para>
            <para>See also property() and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ClearProperty(System.Int32)">
            <summary>
            <para>Clears the value of the property given by propertyId</para>
            <para>See also Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.HasProperty(System.Int32)">
            <summary>
            <para>Returns true if the text format has a property with the given
            propertyId; otherwise returns false.</para>
            <para>See also properties() and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.BoolProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property specified by propertyId. If the
            property isn't of QTextFormat::Bool type, false is returned instead.</para>
            <para>See also setProperty(), intProperty(), doubleProperty(),
            stringProperty(), colorProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.IntProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property specified by propertyId. If the
            property is not of QTextFormat::Integer type, 0 is returned instead.</para>
            <para>See also setProperty(), boolProperty(), doubleProperty(),
            stringProperty(), colorProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.DoubleProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property specified by propertyId. If the
            property isn't of QVariant::Double or QMetaType::Float type, 0 is returned
            instead.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            stringProperty(), colorProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.StringProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property given by propertyId; if the
            property isn't of QVariant::String type, an empty string is returned
            instead.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            doubleProperty(), colorProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ColorProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property given by propertyId; if the
            property isn't of QVariant::Color type, an invalid color is returned
            instead.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            doubleProperty(), stringProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.PenProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property given by propertyId; if the
            property isn't of QVariant::Pen type, Qt::NoPen is returned instead.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            doubleProperty(), stringProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.BrushProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property given by propertyId; if the
            property isn't of QVariant::Brush type, Qt::NoBrush is returned
            instead.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            doubleProperty(), stringProperty(), lengthProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.LengthProperty(System.Int32)">
            <summary>
            <para>Returns the value of the property given by propertyId.</para>
            <para>See also setProperty(), boolProperty(), intProperty(),
            doubleProperty(), stringProperty(), colorProperty(),
            lengthVectorProperty(), and Property.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToBlockFormat">
            <summary>
            <para>Returns this format as a block format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToCharFormat">
            <summary>
            <para>Returns this format as a character format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToListFormat">
            <summary>
            <para>Returns this format as a list format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToTableFormat">
            <summary>
            <para>Returns this format as a table format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToFrameFormat">
            <summary>
            <para>Returns this format as a frame format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToImageFormat">
            <summary>
            <para>Returns this format as an image format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ToTableCellFormat">
            <summary>
            <para>Returns this format as a table cell format.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.op_Equality(QtGui.QTextFormat,QtGui.QTextFormat)">
            <summary>
            <para>Returns true if this text format is the same as the other text
            format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.op_Inequality(QtGui.QTextFormat,QtGui.QTextFormat)">
            <summary>
            <para>Returns true if this text format is different from the other text
            format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.op_Implicit(QtGui.QTextFormat)~QtCore.QVariant">
            <summary>
            <para>Returns the text format as a QVariant</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ClearBackground">
            <summary>
            <para>Clears the brush used to paint the document's background. The
            default brush will be used.</para>
            <para>See also background(), setBackground(), and
            clearForeground().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFormat.ClearForeground">
            <summary>
            <para>Clears the brush used to paint the document's foreground. The
            default brush will be used.</para>
            <para>See also foreground(), setForeground(), and
            clearBackground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.ObjectIndex">
            <summary>
            <para>Returns the index of the format object, or -1 if the format
            object is invalid.</para>
            <para>See also setObjectIndex().</para>
            <para></para>
            <para>Sets the format object's object index.</para>
            <para>See also objectIndex().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.ObjectType">
            <summary>
            <para>Returns the text format's object type.</para>
            <para>See also ObjectTypes and setObjectType().</para>
            <para></para>
            <para>Sets the text format's object type to type.</para>
            <para>See also ObjectTypes and objectType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.LayoutDirection">
            <summary>
            <para>Returns the document's layout direction.</para>
            <para>See also setLayoutDirection().</para>
            <para></para>
            <para>Sets the document's layout direction to the specified
            direction.</para>
            <para>See also layoutDirection().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.Background">
            <summary>
            <para>Returns the brush used to paint the document's background.</para>
            <para>See also setBackground(), clearBackground(), and
            foreground().</para>
            <para></para>
            <para>Sets the brush use to paint the document's background to the
            brush specified.</para>
            <para>See also background(), clearBackground(), and
            setForeground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.Foreground">
            <summary>
            <para>Returns the brush used to render foreground details, such as
            text, frame outlines, and table borders.</para>
            <para>See also setForeground(), clearForeground(), and
            background().</para>
            <para></para>
            <para>Sets the foreground brush to the specified brush. The foreground
            brush is mostly used to render text.</para>
            <para>See also foreground(), clearForeground(), and
            setBackground().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsValid">
            <summary>
            <para>Returns true if the format is valid (i.e. is not InvalidFormat);
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsEmpty">
            <summary>
            <para>Returns true if the format does not store any properties; false
            otherwise.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also propertyCount() and properties().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.Type">
            <summary>
            <para>Returns the type of this format.</para>
            <para>See also FormatType.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.PropertyCount">
            <summary>
            <para>Returns the number of properties stored in the format.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsCharFormat">
            <summary>
            <para>Returns true if this text format is a CharFormat; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsBlockFormat">
            <summary>
            <para>Returns true if this text format is a BlockFormat; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsListFormat">
            <summary>
            <para>Returns true if this text format is a ListFormat; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsFrameFormat">
            <summary>
            <para>Returns true if this text format is a FrameFormat; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsImageFormat">
            <summary>
            <para>Returns true if this text format is an image format; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsTableFormat">
            <summary>
            <para>Returns true if this text format is a TableFormat; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFormat.IsTableCellFormat">
            <summary>
            <para>Returns true if this text format is a TableCellFormat; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFormat.FormatType">
            <summary>
            <para>This enum describes the text item a QTextFormat object is
            formatting.</para>
            <para>See also QTextCharFormat, QTextBlockFormat, QTextListFormat,
            QTextTableFormat, and type().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextFormat.FormatType.InvalidFormat">
            <summary>An invalid format as created by the default constructor</summary>
        </member>
        <member name="F:QtGui.QTextFormat.FormatType.BlockFormat">
            <summary>The object formats a text block</summary>
        </member>
        <member name="F:QtGui.QTextFormat.FormatType.CharFormat">
            <summary>The object formats a single character</summary>
        </member>
        <member name="F:QtGui.QTextFormat.FormatType.ListFormat">
            <summary>The object formats a list Unused Value, a table's FormatType is FrameFormat.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.FormatType.FrameFormat">
            <summary>The object formats a frame</summary>
        </member>
        <member name="T:QtGui.QTextFormat.Property">
            <summary>
            <para>This enum describes the different properties a format can
            have.</para>
            <para>Paragraph and character properties</para>
            <para>Paragraph properties</para>
            <para>Character properties</para>
            <para>List properties</para>
            <para>Table and frame properties</para>
            <para>Table cell properties</para>
            <para>Image properties</para>
            <para>Selection properties</para>
            <para>Page break properties</para>
            <para>See also property() and setProperty().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.ObjectIndex">
            <summary>The index of the formatted object. See objectIndex().</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.CssFloat">
            <summary>How a frame is located relative to the surrounding text</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.LayoutDirection">
            <summary>The layout direction of the text in the document (Qt::LayoutDirection).</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:QtGui.QTextFormat.Property.TabPositions" -->
        <member name="F:QtGui.QTextFormat.Property.BlockTrailingHorizontalRulerWidth">
            <summary>The width of a horizontal ruler element.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontCapitalization">
            <summary>Specifies the capitalization type that is to be applied to the text.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontLetterSpacingType">
            <summary>Specifies the meaning of the FontLetterSpacing property. The default is QFont::PercentageSpacing.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontLetterSpacing">
            <summary>Changes the default spacing between individual letters in the font. The value is specified as a percentage or absolute value, depending on FontLetterSpacingType. The default value is 100%.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontWordSpacing">
            <summary>Changes the default spacing between individual words. A positive value increases the word spacing by the corresponding pixels; a negative value decreases the spacing.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontStretch">
            <summary>Corresponds to the QFont::Stretch property</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontStyleHint">
            <summary>Corresponds to the QFont::StyleHint property</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontStyleStrategy">
            <summary>Corresponds to the QFont::StyleStrategy property</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontKerning">
            <summary>Specifies whether the font has kerning turned on.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontHintingPreference">
            <summary>Controls the use of hinting according to values of the QFont::HintingPreference enum.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontSizeAdjustment">
            <summary>Specifies the change in size given to the fontsize already set using FontPointSize or FontPixelSize.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FontUnderline">
            <summary>This property has been deprecated. Use QTextFormat::TextUnderlineStyle instead.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.TextToolTip">
            <summary>Specifies the (optional) tool tip to be displayed for a fragment of text.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.ListStyle">
            <summary>Specifies the style used for the items in a list, described by values of the QTextListFormat::Style enum.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.ListIndent">
            <summary>Specifies the amount of indentation used for a list.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.ListNumberPrefix">
            <summary>Defines the text which is prepended to item numbers in numeric lists.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.ListNumberSuffix">
            <summary>Defines the text which is appended to item numbers in numeric lists.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FrameBorderStyle">
            <summary>See the BorderStyle enum.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.FullWidthSelection">
            <summary>When set on the characterFormat of a selection, the whole width of the text will be shown selected.</summary>
        </member>
        <member name="F:QtGui.QTextFormat.Property.PageBreakPolicy">
            <summary>Specifies how pages are broken. See the PageBreakFlag enum.</summary>
        </member>
        <member name="T:QtGui.QTextFormat.ObjectTypes">
            <summary>
            <para>This enum describes what kind of QTextObject this format is
            associated with.</para>
            <para>See also QTextObject, QTextTable, and
            QTextObject::format().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextFormat.ObjectTypes.UserObject">
            <summary>The first object that can be used for application-specific purposes.</summary>
        </member>
        <member name="T:QtGui.QTextFormat.PageBreakFlag">
            <summary>
            <para>This enum describes how page breaking is performed when printing.
            It maps to the corresponding css properties.</para>
            <para>This enum was introduced or modified in  Qt 4.2.</para>
            <para>The PageBreakFlags type is a typedef for
            QFlags&lt;PageBreakFlag&gt;. It stores an OR combination of PageBreakFlag
            values.</para>
            <para>See also QTextBlockFormat::pageBreakPolicy(),
            QTextFrameFormat::pageBreakPolicy(), and PageBreakPolicy.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextFormat.PageBreakFlag.PageBreak_Auto">
            <summary>The page break is determined automatically depending on the available space on the current page</summary>
        </member>
        <member name="F:QtGui.QTextFormat.PageBreakFlag.PageBreak_AlwaysBefore">
            <summary>The page is always broken before the paragraph/table</summary>
        </member>
        <member name="F:QtGui.QTextFormat.PageBreakFlag.PageBreak_AlwaysAfter">
            <summary>A new page is always started after the paragraph/table</summary>
        </member>
        <member name="T:QtGui.QTextCharFormat">
            <summary>
            <para>The QTextCharFormat class provides formatting information for
            characters in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>The character format of text in a document specifies the visual
            properties of the text, as well as information about its role in a
            hypertext document.</para>
            <para>The font used can be set by supplying a font to the setFont()
            function, and each aspect of its appearance can be adjusted to give the
            desired effect. setFontFamily() and setFontPointSize() define the font's
            family (e.g. Times) and printed size; setFontWeight() and setFontItalic()
            provide control over the style of the font. setFontUnderline(),
            setFontOverline(), setFontStrikeOut(), and setFontFixedPitch() provide
            additional effects for text.</para>
            <para>The color is set with setForeground(). If the text is intended to
            be used as an anchor (for hyperlinks), this can be enabled with
            setAnchor(). The setAnchorHref() and setAnchorNames() functions are used to
            specify the information about the hyperlink's destination and the anchor's
            name.</para>
            <para></para>
            <para>See also QTextFormat, QTextBlockFormat, QTextTableFormat, and
            QTextListFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextCharFormat.#ctor">
            <summary>
            <para>Constructs a new character format object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCharFormat.SetFont(QtGui.QFont,QtGui.QTextCharFormat.FontPropertiesInheritanceBehavior)">
            <summary>
            <para>Sets the text format's font.</para>
            <para>If behavior is QTextCharFormat::FontPropertiesAll, the font
            property that has not been explicitly set is treated like as it were set
            with default value; If behavior is
            QTextCharFormat::FontPropertiesSpecifiedOnly, the font property that has
            not been explicitly set is ignored and the respective property value
            remains unchanged.</para>
            <para>This function was introduced in  Qt 5.3.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCharFormat.SetFontStyleHint(QtGui.QFont.StyleHint,QtGui.QFont.StyleStrategy)">
            <summary>
            <para>Sets the font style hint and strategy.</para>
            <para>Qt does not support style hints on X11 since this information is
            not provided by the window system.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also fontStyleHint(), setFont(), and
            QFont::setStyleHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.Font">
            <summary>
            <para>Returns the font for this character format.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>This is an overloaded function.</para>
            <para>Sets the text format's font.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontFamily">
            <summary>
            <para>Returns the text format's font family.</para>
            <para>See also setFontFamily() and font().</para>
            <para></para>
            <para>Sets the text format's font family.</para>
            <para>See also fontFamily() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontPointSize">
            <summary>
            <para>Returns the font size used to display text in this format.</para>
            <para>See also setFontPointSize() and font().</para>
            <para></para>
            <para>Sets the text format's font size.</para>
            <para>See also fontPointSize() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontWeight">
            <summary>
            <para>Returns the text format's font weight.</para>
            <para>See also setFontWeight(), font(), and QFont::Weight.</para>
            <para></para>
            <para>Sets the text format's font weight to weight.</para>
            <para>See also fontWeight(), setFont(), and QFont::Weight.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontItalic">
            <summary>
            <para>Returns true if the text format's font is italic; otherwise
            returns false.</para>
            <para>See also setFontItalic() and font().</para>
            <para></para>
            <para>If italic is true, sets the text format's font to be italic;
            otherwise the font will be non-italic.</para>
            <para>See also fontItalic() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontCapitalization">
            <summary>
            <para>Returns the current capitalization type of the font.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setFontCapitalization().</para>
            <para></para>
            <para>Sets the capitalization of the text that apppears in this font to
            capitalization.</para>
            <para>A font's capitalization makes the text appear in the selected
            capitalization mode.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also fontCapitalization().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontLetterSpacingType">
            <summary>
            <para>Returns the letter spacing type of this format..</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setFontLetterSpacingType(), setFontLetterSpacing(), and
            fontLetterSpacing().</para>
            <para></para>
            <para>Sets the letter spacing type of this format to
            letterSpacingType.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also fontLetterSpacingType(), setFontLetterSpacing(), and
            fontLetterSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontLetterSpacing">
            <summary>
            <para>Returns the current letter spacing.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setFontLetterSpacing(), setFontLetterSpacingType(), and
            fontLetterSpacingType().</para>
            <para></para>
            <para>Sets the letter spacing of this format to the given spacing. The
            meaning of the value depends on the font letter spacing type.</para>
            <para>For percentage spacing a value of 100 indicates default spacing;
            a value of 200 doubles the amount of space a letter takes.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also fontLetterSpacing(), setFontLetterSpacingType(), and
            fontLetterSpacingType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontWordSpacing">
            <summary>
            <para>Returns the current word spacing value.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setFontWordSpacing().</para>
            <para></para>
            <para>Sets the word spacing of this format to the given spacing, in
            pixels.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also fontWordSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontUnderline">
            <summary>
            <para>Returns true if the text format's font is underlined; otherwise
            returns false.</para>
            <para>See also setFontUnderline() and font().</para>
            <para></para>
            <para>If underline is true, sets the text format's font to be
            underlined; otherwise it is displayed non-underlined.</para>
            <para>See also fontUnderline() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontOverline">
            <summary>
            <para>Returns true if the text format's font is overlined; otherwise
            returns false.</para>
            <para>See also setFontOverline() and font().</para>
            <para></para>
            <para>If overline is true, sets the text format's font to be overlined;
            otherwise the font is displayed non-overlined.</para>
            <para>See also fontOverline() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontStrikeOut">
            <summary>
            <para>Returns true if the text format's font is struck out (has a
            horizontal line drawn through it); otherwise returns false.</para>
            <para>See also setFontStrikeOut() and font().</para>
            <para></para>
            <para>If strikeOut is true, sets the text format's font with strike-out
            enabled (with a horizontal line through it); otherwise it is displayed
            without strikeout.</para>
            <para>See also fontStrikeOut() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.UnderlineColor">
            <summary>
            <para>Returns the color used to underline the characters with this
            format.</para>
            <para>See also setUnderlineColor().</para>
            <para></para>
            <para>Sets the underline color used for the characters with this format
            to the color specified.</para>
            <para>See also underlineColor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontFixedPitch">
            <summary>
            <para>Returns true if the text format's font is fixed pitch; otherwise
            returns false.</para>
            <para>See also setFontFixedPitch() and font().</para>
            <para></para>
            <para>If fixedPitch is true, sets the text format's font to be fixed
            pitch; otherwise a non-fixed pitch font is used.</para>
            <para>See also fontFixedPitch() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontStretch">
            <summary>
            <para>Returns the current font stretching.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setFontStretch().</para>
            <para></para>
            <para>Sets the stretch factor for the font to factor.</para>
            <para>The stretch factor changes the width of all characters in the
            font by factor percent. For example, setting factor to 150 results in all
            characters in the font being 1.5 times (ie. 150%) wider. The default
            stretch factor is 100. The minimum stretch factor is 1, and the maximum
            stretch factor is 4000.</para>
            <para>The stretch factor is only applied to outline fonts. The stretch
            factor is ignored for bitmap fonts.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also fontStretch().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontStyleStrategy">
            <summary>
            <para>Returns the current font style strategy.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setFontStyleStrategy() and font().</para>
            <para></para>
            <para>Sets the font style strategy.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also fontStyleStrategy(), setFont(), and
            QFont::setStyleStrategy().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontHintingPreference">
            <summary>
            <para>Returns the hinting preference set for this text format.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setFontHintingPreference(), font(), and
            QFont::hintingPreference().</para>
            <para></para>
            <para>Sets the hinting preference of the text format's font to be
            hintingPreference.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also fontHintingPreference(), setFont(), and
            QFont::setHintingPreference().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontKerning">
            <summary>
            <para>Returns true if the font kerning is enabled.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setFontKerning() and font().</para>
            <para></para>
            <para>Enables kerning for this font if enable is true; otherwise
            disables it.</para>
            <para>When kerning is enabled, glyph metrics do not add up anymore,
            even for Latin text. In other words, the assumption that width('a') +
            width('b') is equal to width(&quot;ab&quot;) is not neccesairly
            true.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also fontKerning() and setFont().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.underlineStyle">
            <summary>
            <para>Returns the style of underlining the text.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setUnderlineStyle().</para>
            <para></para>
            <para>Sets the style of underlining the text to style.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also underlineStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.verticalAlignment">
            <summary>
            <para>Returns the vertical alignment used for characters with this
            format.</para>
            <para>See also setVerticalAlignment().</para>
            <para></para>
            <para>Sets the vertical alignment used for the characters with this
            format to the alignment specified.</para>
            <para>See also verticalAlignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.TextOutline">
            <summary>
            <para>Returns the pen used to draw the outlines of characters in this
            format.</para>
            <para>See also setTextOutline().</para>
            <para></para>
            <para>Sets the pen used to draw the outlines of characters to the given
            pen.</para>
            <para>See also textOutline().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.ToolTip">
            <summary>
            <para>Returns the tool tip that is displayed for a fragment of
            text.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setToolTip().</para>
            <para></para>
            <para>Sets the tool tip for a fragment of text to the given
            text.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also toolTip().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.Anchor">
            <summary>
            <para>Returns true if the text is formatted as an anchor; otherwise
            returns false.</para>
            <para>See also setAnchor(), setAnchorHref(), and
            setAnchorNames().</para>
            <para></para>
            <para>If anchor is true, text with this format represents an anchor,
            and is formatted in the appropriate way; otherwise the text is formatted
            normally. (Anchors are hyperlinks which are often shown underlined and in a
            different color from plain text.)</para>
            <para>The way the text is rendered is independent of whether or not the
            format has a valid anchor defined. Use setAnchorHref(), and optionally
            setAnchorNames() to create a hypertext link.</para>
            <para>See also isAnchor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.AnchorHref">
            <summary>
            <para>Returns the text format's hypertext link, or an empty string if
            none has been set.</para>
            <para>See also setAnchorHref().</para>
            <para></para>
            <para>Sets the hypertext link for the text format to the given value.
            This is typically a URL like
            &quot;http://example.com/index.html&quot;.</para>
            <para>The anchor will be displayed with the value as its display text;
            if you want to display different text call setAnchorNames().</para>
            <para>To format the text as a hypertext link use setAnchor().</para>
            <para>See also anchorHref().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.AnchorName">
            <summary>
            <para>This function is deprecated. Use anchorNames() instead.</para>
            <para>Returns the anchor name associated with this text format, or an
            empty string if none has been set. If the anchor name is set, text with
            this format can be the destination of a hypertext link.</para>
            <para>See also setAnchorName().</para>
            <para></para>
            <para>This function is deprecated. Use setAnchorNames() instead.</para>
            <para>Sets the text format's anchor name. For the anchor to work as a
            hyperlink, the destination must be set with setAnchorHref() and the anchor
            must be enabled with setAnchor().</para>
            <para>See also anchorName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.AnchorNames">
            <summary>
            <para>Returns the anchor names associated with this text format, or an
            empty string list if none has been set. If the anchor names are set, text
            with this format can be the destination of a hypertext link.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setAnchorNames().</para>
            <para></para>
            <para>Sets the text format's anchor names. For the anchor to work as a
            hyperlink, the destination must be set with setAnchorHref() and the anchor
            must be enabled with setAnchor().</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also anchorNames().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.FontStyleHint">
            <summary>
            <para>Returns the font style hint.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setFontStyleHint() and font().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCharFormat.IsValid">
            <summary>
            <para>Returns true if this character format is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextCharFormat.VerticalAlignment">
            <summary>
            <para>This enum describes the ways that adjacent characters can be
            vertically aligned.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignNormal">
            <summary>Adjacent characters are positioned in the standard way for text in the writing system in use.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignSuperScript">
            <summary>Characters are placed above the base line for normal text.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignSubScript">
            <summary>Characters are placed below the base line for normal text.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignMiddle">
            <summary>The center of the object is vertically aligned with the base line. Currently, this is only implemented for inline objects.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignTop">
            <summary>The top edge of the object is vertically aligned with the base line.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignBottom">
            <summary>The bottom edge of the object is vertically aligned with the base line.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.VerticalAlignment.AlignBaseline">
            <summary>The base lines of the characters are aligned.</summary>
        </member>
        <member name="T:QtGui.QTextCharFormat.UnderlineStyle">
            <summary>
            <para>This enum describes the different ways drawing underlined
            text.</para>
            <para>See also Qt::PenStyle.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.NoUnderline">
            <summary>Text is draw without any underlining decoration.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.SingleUnderline">
            <summary>A line is drawn using Qt::SolidLine.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.DashUnderline">
            <summary>Dashes are drawn using Qt::DashLine.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.DotLine">
            <summary>Dots are drawn using Qt::DotLine;</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.DashDotLine">
            <summary>Dashs and dots are drawn using Qt::DashDotLine.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.DashDotDotLine">
            <summary>Underlines draw drawn using Qt::DashDotDotLine.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.WaveUnderline">
            <summary>The text is underlined using a wave shaped line.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.UnderlineStyle.SpellCheckUnderline">
            <summary>The underline is drawn depending on the QStyle::SH_SpellCeckUnderlineStyle style hint of the QApplication style. By default this is mapped to WaveUnderline, on Mac OS X it is mapped to DashDotLine.</summary>
        </member>
        <member name="T:QtGui.QTextCharFormat.FontPropertiesInheritanceBehavior">
            <summary>
            <para>This enum specifies how the setFont() function should behave with
            respect to unset font properties.</para>
            <para>This enum was introduced or modified in  Qt 5.3.</para>
            <para>See also setFont().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.FontPropertiesInheritanceBehavior.FontPropertiesSpecifiedOnly">
            <summary>If a property is not explicitly set, do not change the text format's property value.</summary>
        </member>
        <member name="F:QtGui.QTextCharFormat.FontPropertiesInheritanceBehavior.FontPropertiesAll">
            <summary>If a property is not explicitly set, override the text format's property with a default value.</summary>
        </member>
        <member name="T:QtGui.QTextBlockFormat">
            <summary>
            <para>The QTextBlockFormat class provides formatting information for
            blocks of text in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>A document is composed of a list of blocks, represented by
            QTextBlock objects. Each block can contain an item of some kind, such as a
            paragraph of text, a table, a list, or an image. Every block has an
            associated QTextBlockFormat that specifies its characteristics.</para>
            <para>To cater for left-to-right and right-to-left languages you can
            set a block's direction with setDirection(). Paragraph alignment is set
            with setAlignment(). Margins are controlled by setTopMargin(),
            setBottomMargin(), setLeftMargin(), setRightMargin(). Overall indentation
            is set with setIndent(), the indentation of the first line with
            setTextIndent().</para>
            <para>Line spacing is set with setLineHeight() and retrieved via
            lineHeight() and lineHeightType(). The types of line spacing available are
            in the LineHeightTypes enum.</para>
            <para>Line breaking can be enabled and disabled with
            setNonBreakableLines().</para>
            <para>The brush used to paint the paragraph's background is set with
            setBackground(), and other aspects of the text's appearance can be
            customized by using the setProperty() function with the OutlinePen,
            ForegroundBrush, and BackgroundBrush QTextFormat::Property values.</para>
            <para>If a text block is part of a list, it can also have a list format
            that is accessible with the listFormat() function.</para>
            <para></para>
            <para>See also QTextBlock and QTextCharFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextBlockFormat.#ctor">
            <summary>
            <para>Constructs a new QTextBlockFormat.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlockFormat.SetLineHeight(System.Double,System.Int32)">
            <summary>
            <para>Sets the line height for the paragraph to the value given by
            height which is dependent on heightType in the way described by the
            LineHeightTypes enum.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also LineHeightTypes, lineHeight(), and
            lineHeightType().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlockFormat.GetLineHeight(System.Double,System.Double)">
            <summary>
            <para>Returns the height of the lines in the paragraph based on the
            height of the script line given by scriptLineHeight and the specified
            scaling factor.</para>
            <para>The value that is returned is also dependent on the given
            LineHeightType of the paragraph as well as the LineHeight setting that has
            been set for the paragraph.</para>
            <para>The scaling is needed for heights that include a fixed number of
            pixels, to scale them appropriately for printing.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also LineHeightTypes, setLineHeight(), and
            lineHeightType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.Alignment">
            <summary>
            <para>Returns the paragraph's alignment.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the paragraph's alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.TopMargin">
            <summary>
            <para>Returns the paragraph's top margin.</para>
            <para>See also setTopMargin() and bottomMargin().</para>
            <para></para>
            <para>Sets the paragraph's top margin.</para>
            <para>See also topMargin(), setBottomMargin(), setLeftMargin(), and
            setRightMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.BottomMargin">
            <summary>
            <para>Returns the paragraph's bottom margin.</para>
            <para>See also setBottomMargin() and topMargin().</para>
            <para></para>
            <para>Sets the paragraph's bottom margin.</para>
            <para>See also bottomMargin(), setTopMargin(), setLeftMargin(), and
            setRightMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.LeftMargin">
            <summary>
            <para>Returns the paragraph's left margin.</para>
            <para>See also setLeftMargin(), rightMargin(), and indent().</para>
            <para></para>
            <para>Sets the paragraph's left margin. Indentation can be applied
            separately with setIndent().</para>
            <para>See also leftMargin(), setRightMargin(), setTopMargin(), and
            setBottomMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.RightMargin">
            <summary>
            <para>Returns the paragraph's right margin.</para>
            <para>See also setRightMargin() and leftMargin().</para>
            <para></para>
            <para>Sets the paragraph's right margin.</para>
            <para>See also rightMargin(), setLeftMargin(), setTopMargin(), and
            setBottomMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.TextIndent">
            <summary>
            <para>Returns the paragraph's text indent.</para>
            <para>See also setTextIndent().</para>
            <para></para>
            <para>Sets the indent for the first line in the block. This allows the
            first line of a paragraph to be indented differently to the other lines,
            enhancing the readability of the text.</para>
            <para>See also textIndent(), setLeftMargin(), setRightMargin(),
            setTopMargin(), and setBottomMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.Indent">
            <summary>
            <para>Returns the paragraph's indent.</para>
            <para>See also setIndent().</para>
            <para></para>
            <para>Sets the paragraph's indentation. Margins are set independently
            of indentation with setLeftMargin() and setTextIndent(). The indentation is
            an integer that is multiplied with the document-wide standard indent,
            resulting in the actual indent of the paragraph.</para>
            <para>See also indent() and QTextDocument::indentWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.NonBreakableLines">
            <summary>
            <para>Returns true if the lines in the paragraph are non-breakable;
            otherwise returns false.</para>
            <para>See also setNonBreakableLines().</para>
            <para></para>
            <para>If b is true, the lines in the paragraph are treated as
            non-breakable; otherwise they are breakable.</para>
            <para>See also nonBreakableLines().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.PageBreakPolicy">
            <summary>
            <para>Returns the currently set page break policy for the paragraph.
            The default is QTextFormat::PageBreak_Auto.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setPageBreakPolicy().</para>
            <para></para>
            <para>Sets the page break policy for the paragraph to policy.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also pageBreakPolicy().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.LineHeight">
            <summary>
            <para>This returns the LineHeight property for the paragraph.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also LineHeightTypes, setLineHeight(), and
            lineHeightType().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.IsValid">
            <summary>
            <para>Returns true if this block format is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlockFormat.LineHeightType">
            <summary>
            <para>This returns the LineHeightType property of the paragraph.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also LineHeightTypes, setLineHeight(), and
            lineHeight().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextBlockFormat.LineHeightTypes">
            <summary>
            <para>This enum describes the various types of line spacing support
            paragraphs can have.</para>
            <para>This enum was introduced or modified in  Qt 4.8.</para>
            <para>See also lineHeight(), lineHeightType(), and
            setLineHeight().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextBlockFormat.LineHeightTypes.SingleHeight">
            <summary>This is the default line height: single spacing.</summary>
        </member>
        <member name="F:QtGui.QTextBlockFormat.LineHeightTypes.ProportionalHeight">
            <summary>This sets the spacing proportional to the line (in percentage). For example, set to 200 for double spacing.</summary>
        </member>
        <member name="F:QtGui.QTextBlockFormat.LineHeightTypes.FixedHeight">
            <summary>This sets the line height to a fixed line height (in pixels).</summary>
        </member>
        <member name="F:QtGui.QTextBlockFormat.LineHeightTypes.MinimumHeight">
            <summary>This sets the minimum line height (in pixels).</summary>
        </member>
        <member name="F:QtGui.QTextBlockFormat.LineHeightTypes.LineDistanceHeight">
            <summary>This adds the specified height between lines (in pixels).</summary>
        </member>
        <member name="T:QtGui.QTextListFormat">
            <summary>
            <para>The QTextListFormat class provides formatting information for
            lists in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>A list is composed of one or more items, represented as text
            blocks. The list's format specifies the appearance of items in the list. In
            particular, it determines the indentation and the style of each
            item.</para>
            <para>The indentation of the items is an integer value that causes each
            item to be offset from the left margin by a certain amount. This value is
            read with indent() and set with setIndent().</para>
            <para>The style used to decorate each item is set with setStyle() and
            can be read with the style() function. The style controls the type of
            bullet points and numbering scheme used for items in the list. Note that
            lists that use the decimal numbering scheme begin counting at 1 rather than
            0.</para>
            <para>Style properties can be set to further configure the appearance
            of list items; for example, the ListNumberPrefix and ListNumberSuffix
            properties can be used to customize the numbers used in an ordered list so
            that they appear as (1), (2), (3), etc.:</para>
            <para>QTextListFormat listFormat;</para>
            <para></para>
            <para>listFormat.setStyle(QTextListFormat::ListDecimal);</para>
            <para>listFormat.setNumberPrefix(&quot;(&quot;);</para>
            <para>listFormat.setNumberSuffix(&quot;)&quot;);</para>
            <para></para>
            <para>cursor.insertList(listFormat);</para>
            <para></para>
            <para>See also QTextList.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextListFormat.#ctor">
            <summary>
            <para>Constructs a new list format object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextListFormat.style">
            <summary>
            <para>Returns the list format's style.</para>
            <para>See also setStyle() and Style.</para>
            <para></para>
            <para>Sets the list format's style.</para>
            <para>See also style() and Style.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextListFormat.Indent">
            <summary>
            <para>Returns the list format's indentation. The indentation is
            multiplied by the QTextDocument::indentWidth property to get the effective
            indent in pixels.</para>
            <para>See also setIndent().</para>
            <para></para>
            <para>Sets the list format's indentation. The indentation is multiplied
            by the QTextDocument::indentWidth property to get the effective indent in
            pixels.</para>
            <para>See also indent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextListFormat.NumberPrefix">
            <summary>
            <para>Returns the list format's number prefix.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setNumberPrefix().</para>
            <para></para>
            <para>Sets the list format's number prefix to the string specified by
            numberPrefix. This can be used with all sorted list types. It does not have
            any effect on unsorted list types.</para>
            <para>The default prefix is an empty string.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also numberPrefix().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextListFormat.NumberSuffix">
            <summary>
            <para>Returns the list format's number suffix.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setNumberSuffix().</para>
            <para></para>
            <para>Sets the list format's number suffix to the string specified by
            numberSuffix. This can be used with all sorted list types. It does not have
            any effect on unsorted list types.</para>
            <para>The default suffix is &quot;.&quot;.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also numberSuffix().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextListFormat.IsValid">
            <summary>
            <para>Returns true if this list format is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextListFormat.Style">
            <summary>
            <para>This enum describes the symbols used to decorate list
            items:</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListDisc">
            <summary>a filled circle</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListCircle">
            <summary>an empty circle</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListSquare">
            <summary>a filled square</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListDecimal">
            <summary>decimal values in ascending order</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListLowerAlpha">
            <summary>lower case Latin characters in alphabetical order</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListUpperAlpha">
            <summary>upper case Latin characters in alphabetical order</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListLowerRoman">
            <summary>lower case roman numerals (supports up to 4999 items only)</summary>
        </member>
        <member name="F:QtGui.QTextListFormat.Style.ListUpperRoman">
            <summary>upper case roman numerals (supports up to 4999 items only)</summary>
        </member>
        <member name="T:QtGui.QTextImageFormat">
            <summary>
            <para>The QTextImageFormat class provides formatting information for
            images in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>Inline images are represented by a Unicode value U+FFFC (OBJECT
            REPLACEMENT CHARACTER) which has an associated QTextImageFormat. The image
            format specifies a name with setName() that is used to locate the image.
            The size of the rectangle that the image will occupy is specified using
            setWidth() and setHeight().</para>
            <para>Images can be supplied in any format for which Qt has an image
            reader, so SVG drawings can be included alongside PNG, TIFF and other
            bitmap formats.</para>
            <para></para>
            <para>See also QImage and QImageReader.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextImageFormat.#ctor">
            <summary>
            <para>Creates a new image format object.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextImageFormat.Name">
            <summary>
            <para>Returns the name of the image. The name refers to an entry in the
            application's resources file.</para>
            <para>See also setName().</para>
            <para></para>
            <para>Sets the name of the image. The name is used to locate the image
            in the application's resources.</para>
            <para>See also name().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextImageFormat.Width">
            <summary>
            <para>Returns the width of the rectangle occupied by the image.</para>
            <para>See also height() and setWidth().</para>
            <para></para>
            <para>Sets the width of the rectangle occupied by the image.</para>
            <para>See also width() and setHeight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextImageFormat.Height">
            <summary>
            <para>Returns the height of the rectangle occupied by the image.</para>
            <para>See also width() and setHeight().</para>
            <para></para>
            <para>Sets the height of the rectangle occupied by the image.</para>
            <para>See also height() and setWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextImageFormat.IsValid">
            <summary>
            <para>Returns true if this image format is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFrameFormat">
            <summary>
            <para>The QTextFrameFormat class provides formatting information for
            frames in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>A text frame groups together one or more blocks of text,
            providing a layer of structure larger than the paragraph. The format of a
            frame specifies how it is rendered and positioned on the screen. It does
            not directly specify the behavior of the text formatting within, but
            provides constraints on the layout of its children.</para>
            <para>The frame format defines the width() and height() of the frame on
            the screen. Each frame can have a border() that surrounds its contents with
            a rectangular box. The border is surrounded by a margin() around the frame,
            and the contents of the frame are kept separate from the border by the
            frame's padding(). This scheme is similar to the box model used by
            Cascading Style Sheets for HTML pages.</para>
            <para></para>
            <para>The position() of a frame is set using setPosition() and
            determines how it is located relative to the surrounding text.</para>
            <para>The validity of a QTextFrameFormat object can be determined with
            the isValid() function.</para>
            <para></para>
            <para>See also QTextFrame and QTextBlockFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextFrameFormat.#ctor">
            <summary>
            <para>Constructs a text frame format object with the default
            properties.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrameFormat.SetWidth(System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Convenience method that sets the width of the frame's border
            rectangle's width to the specified fixed width.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrameFormat.SetHeight(System.Double)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Sets the frame's height.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.position">
            <summary>
            <para>Returns the positioning policy for frames with this frame
            format.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Sets the policy for positioning frames with this frame
            format.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.Border">
            <summary>
            <para>Returns the width of the border in pixels.</para>
            <para>See also setBorder().</para>
            <para></para>
            <para>Sets the width (in pixels) of the frame's border.</para>
            <para>See also border().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.BorderBrush">
            <summary>
            <para>Returns the brush used for the frame's border.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setBorderBrush().</para>
            <para></para>
            <para>Sets the brush used for the frame's border.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also borderBrush().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.borderStyle">
            <summary>
            <para>Returns the style of the frame's border.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setBorderStyle().</para>
            <para></para>
            <para>Sets the style of the frame's border.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also borderStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.Margin">
            <summary>
            <para>Returns the width of the frame's external margin in
            pixels.</para>
            <para>See also setMargin().</para>
            <para></para>
            <para>Sets the frame's margin in pixels. This method also sets the
            left, right, top and bottom margins of the frame to the same value. The
            individual margins override the general margin.</para>
            <para>See also margin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.TopMargin">
            <summary>
            <para>Returns the width of the frame's top margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setTopMargin().</para>
            <para></para>
            <para>Sets the frame's top margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also topMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.BottomMargin">
            <summary>
            <para>Returns the width of the frame's bottom margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setBottomMargin().</para>
            <para></para>
            <para>Sets the frame's bottom margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also bottomMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.LeftMargin">
            <summary>
            <para>Returns the width of the frame's left margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setLeftMargin().</para>
            <para></para>
            <para>Sets the frame's left margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also leftMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.RightMargin">
            <summary>
            <para>Returns the width of the frame's right margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also setRightMargin().</para>
            <para></para>
            <para>Sets the frame's right margin in pixels.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            <para>See also rightMargin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.Padding">
            <summary>
            <para>Returns the width of the frame's internal padding in
            pixels.</para>
            <para>See also setPadding().</para>
            <para></para>
            <para>Sets the width of the frame's internal padding in pixels.</para>
            <para>See also padding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.Width">
            <summary>
            <para>Returns the width of the frame's border rectangle.</para>
            <para>See also setWidth() and QTextLength.</para>
            <para></para>
            <para>Sets the frame's border rectangle's width.</para>
            <para>See also width() and QTextLength.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.Height">
            <summary>
            <para>Returns the height of the frame's border rectangle.</para>
            <para>See also setHeight().</para>
            <para></para>
            <para>Sets the frame's height.</para>
            <para>See also height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.PageBreakPolicy">
            <summary>
            <para>Returns the currently set page break policy for the frame/table.
            The default is QTextFormat::PageBreak_Auto.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setPageBreakPolicy().</para>
            <para></para>
            <para>Sets the page break policy for the frame/table to policy.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also pageBreakPolicy().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrameFormat.IsValid">
            <summary>
            <para>Returns true if the format description is valid; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFrameFormat.Position">
            <summary>
            <para>This enum describes how a frame is located relative to the
            surrounding text.</para>
            <para>See also position() and CssFloat.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFrameFormat.BorderStyle">
            <summary>
            <para>This enum describes different border styles for the text
            frame.</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            <para>See also borderStyle() and FrameBorderStyle.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextTableFormat">
            <summary>
            <para>The QTextTableFormat class provides formatting information for
            tables in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>A table is a group of cells ordered into rows and columns. Each
            table contains at least one row and one column. Each cell contains a block.
            Tables in rich text documents are formatted using the properties defined in
            this class.</para>
            <para>Tables are horizontally justified within their parent frame
            according to the table's alignment. This can be read with the alignment()
            function and set with setAlignment().</para>
            <para>Cells within the table are separated by cell spacing. The number
            of pixels between cells is set with setCellSpacing() and read with
            cellSpacing(). The contents of each cell is surrounded by cell padding. The
            number of pixels between each cell edge and its contents is set with
            setCellPadding() and read with cellPadding().</para>
            <para></para>
            <para>The table's background color can be read with the background()
            function, and can be specified with setBackground(). The background color
            of each cell can be set independently, and will control the color of the
            cell within the padded area.</para>
            <para>The table format also provides a way to constrain the widths of
            the columns in the table. Columns can be assigned a fixed width, a variable
            width, or a percentage of the available width (see QTextLength). The
            columns() function returns the number of columns with constraints, and the
            columnWidthConstraints() function returns the constraints defined for the
            table. These quantities can also be set by calling
            setColumnWidthConstraints() with a vector containing new constraints. If no
            constraints are required, clearColumnWidthConstraints() can be used to
            remove them.</para>
            <para></para>
            <para>See also QTextTable, QTextTableCell, and QTextLength.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextTableFormat.#ctor">
            <summary>
            <para>Constructs a new table format object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableFormat.ClearColumnWidthConstraints">
            <summary>
            <para>Clears the column width constraints for the table.</para>
            <para>See also columnWidthConstraints() and
            setColumnWidthConstraints().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.Columns">
            <summary>
            <para>Returns the number of columns specified by the table
            format.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.CellSpacing">
            <summary>
            <para>Returns the table's cell spacing. This describes the distance
            between adjacent cells.</para>
            <para>See also setCellSpacing().</para>
            <para></para>
            <para>Sets the cell spacing for the table. This determines the distance
            between adjacent cells.</para>
            <para>See also cellSpacing().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.CellPadding">
            <summary>
            <para>Returns the table's cell padding. This describes the distance
            between the border of a cell and its contents.</para>
            <para>See also setCellPadding().</para>
            <para></para>
            <para>Sets the cell padding for the table. This determines the distance
            between the border of a cell and its contents.</para>
            <para>See also cellPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.Alignment">
            <summary>
            <para>Returns the table's alignment.</para>
            <para>See also setAlignment().</para>
            <para></para>
            <para>Sets the table's alignment.</para>
            <para>See also alignment().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.HeaderRowCount">
            <summary>
            <para>Returns the number of rows in the table that define the
            header.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setHeaderRowCount().</para>
            <para></para>
            <para>Declares the first count rows of the table as table header. The
            table header rows get repeated when a table is broken across a page
            boundary.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also headerRowCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableFormat.IsValid">
            <summary>
            <para>Returns true if this table format is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextTableCellFormat">
            <summary>
            <para>The QTextTableCellFormat class provides formatting information
            for table cells in a QTextDocument.</para>
            </summary>
            <remarks>
            <para>The table cell format of a table cell in a document specifies the
            visual properties of the table cell.</para>
            <para>The padding properties of a table cell are controlled by
            setLeftPadding(), setRightPadding(), setTopPadding(), and
            setBottomPadding(). All the paddings can be set at once using
            setPadding().</para>
            <para></para>
            <para>See also QTextFormat, QTextBlockFormat, QTextTableFormat, and
            QTextCharFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextTableCellFormat.#ctor">
            <summary>
            <para>Constructs a new table cell format object.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCellFormat.SetPadding(System.Double)">
            <summary>
            <para>Sets the left, right, top, and bottom padding of the table
            cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setLeftPadding(), setRightPadding(), setTopPadding(),
            and setBottomPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCellFormat.TopPadding">
            <summary>
            <para>Gets the top padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setTopPadding(), leftPadding(), rightPadding(), and
            bottomPadding().</para>
            <para></para>
            <para>Sets the top padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also topPadding(), setLeftPadding(), setRightPadding(), and
            setBottomPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCellFormat.BottomPadding">
            <summary>
            <para>Gets the bottom padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setBottomPadding(), leftPadding(), rightPadding(), and
            topPadding().</para>
            <para></para>
            <para>Sets the bottom padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also bottomPadding(), setLeftPadding(), setRightPadding(),
            and setTopPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCellFormat.LeftPadding">
            <summary>
            <para>Gets the left padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setLeftPadding(), rightPadding(), topPadding(), and
            bottomPadding().</para>
            <para></para>
            <para>Sets the left padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also leftPadding(), setRightPadding(), setTopPadding(), and
            setBottomPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCellFormat.RightPadding">
            <summary>
            <para>Gets the right padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setRightPadding(), leftPadding(), topPadding(), and
            bottomPadding().</para>
            <para></para>
            <para>Sets the right padding of the table cell.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also rightPadding(), setLeftPadding(), setTopPadding(), and
            setBottomPadding().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCellFormat.IsValid">
            <summary>
            <para>Returns true if this table cell format is valid; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtGui.QFontDatabase">
            <summary>
            <para>The QFontDatabase class provides information about the fonts
            available in the underlying window system.</para>
            </summary>
            <remarks>
            <para>The most common uses of this class are to query the database for
            the list of font families() and for the pointSizes() and styles() that are
            available for each family. An alternative to pointSizes() is smoothSizes()
            which returns the sizes at which a given family and style will look
            attractive.</para>
            <para>If the font family is available from two or more foundries the
            foundry name is included in the family name; for example: &quot;Helvetica
            [Adobe]&quot; and &quot;Helvetica [Cronyx]&quot;. When you specify a
            family, you can either use the old hyphenated &quot;foundry-family&quot;
            format or the bracketed &quot;family [foundry]&quot; format; for example:
            &quot;Cronyx-Helvetica&quot; or &quot;Helvetica [Cronyx]&quot;. If the
            family has a foundry it is always returned using the bracketed format, as
            is the case with the value returned by families().</para>
            <para>The font() function returns a QFont given a family, style and
            point size.</para>
            <para>A family and style combination can be checked to see if it is
            italic() or bold(), and to retrieve its weight(). Similarly we can call
            isBitmapScalable(), isSmoothlyScalable(), isScalable() and
            isFixedPitch().</para>
            <para>Use the styleString() to obtain a text version of a style.</para>
            <para>The QFontDatabase class also supports some static functions, for
            example, standardSizes(). You can retrieve the description of a writing
            system using writingSystemName(), and a sample of characters in a writing
            system with writingSystemSample().</para>
            <para>Example:</para>
            <para>    QFontDatabase database;</para>
            <para>    QTreeWidget fontTree;</para>
            <para>    fontTree.setColumnCount(2);</para>
            <para>    fontTree.setHeaderLabels(QStringList() &lt;&lt;
            &quot;Font&quot; &lt;&lt; &quot;Smooth Sizes&quot;);</para>
            <para></para>
            <para>    foreach (const QString &amp;family, database.families())
            {</para>
            <para>        QTreeWidgetItem *familyItem = new
            QTreeWidgetItem(&amp;fontTree);</para>
            <para>        familyItem-&gt;setText(0, family);</para>
            <para></para>
            <para>        foreach (const QString &amp;style,
            database.styles(family)) {</para>
            <para>            QTreeWidgetItem *styleItem = new
            QTreeWidgetItem(familyItem);</para>
            <para>            styleItem-&gt;setText(0, style);</para>
            <para></para>
            <para>            QString sizes;</para>
            <para>            foreach (int points, database.smoothSizes(family,
            style))</para>
            <para>                sizes += QString::number(points) + &quot;
            &quot;;</para>
            <para></para>
            <para>            styleItem-&gt;setText(1, sizes.trimmed());</para>
            <para>        }</para>
            <para>    }</para>
            <para>This example gets the list of font families, the list of styles
            for each family, and the point sizes that are available for each
            combination of family and style, displaying this information in a tree
            view.</para>
            <para></para>
            <para>See also QFont, QFontInfo, QFontMetrics, and Character Map
            Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QFontDatabase.#ctor">
            <summary>
            <para>Creates a font database object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Families(QtGui.QFontDatabase.WritingSystem)">
            <summary>
            <para>Returns a sorted list of the available font families which
            support the writingSystem.</para>
            <para>If a family exists in several foundries, the returned name for
            that font is in the form &quot;family [foundry]&quot;. Examples:
            &quot;Times [Adobe]&quot;, &quot;Times [Cronyx]&quot;,
            &quot;Palatino&quot;.</para>
            <para>See also writingSystems().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Styles(System.String)">
            <summary>
            <para>Returns a list of the styles available for the font family
            family. Some example styles: &quot;Light&quot;, &quot;Light Italic&quot;,
            &quot;Bold&quot;, &quot;Oblique&quot;, &quot;Demi&quot;. The list may be
            empty.</para>
            <para>See also families().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.StyleString(QtGui.QFont)">
            <summary>
            <para>Returns a string that describes the style of the font. For
            example, &quot;Bold Italic&quot;, &quot;Bold&quot;, &quot;Italic&quot; or
            &quot;Normal&quot;. An empty string may be returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.StyleString(QtGui.QFontInfo)">
            <summary>
            <para>Returns a string that describes the style of the fontInfo. For
            example, &quot;Bold Italic&quot;, &quot;Bold&quot;, &quot;Italic&quot; or
            &quot;Normal&quot;. An empty string may be returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Font(System.String,System.String,System.Int32)">
            <summary>
            <para>Returns a QFont object that has family family, style style and
            point size pointSize. If no matching font could be created, a QFont object
            that uses the application's default font is returned.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.IsBitmapScalable(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is a scalable bitmap font; otherwise returns false. Scaling a bitmap font
            usually produces an unattractive hardly readable result, because the pixels
            of the font are scaled. If you need to scale a bitmap font it is better to
            scale it to one of the fixed sizes returned by smoothSizes().</para>
            <para>See also isScalable() and isSmoothlyScalable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.IsSmoothlyScalable(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is smoothly scalable; otherwise returns false. If this function returns
            true, it's safe to scale this font to any size, and the result will always
            look attractive.</para>
            <para>See also isScalable() and isBitmapScalable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.IsScalable(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is scalable; otherwise returns false.</para>
            <para>See also isBitmapScalable() and isSmoothlyScalable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.IsFixedPitch(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is fixed pitch; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Italic(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is italic; otherwise returns false.</para>
            <para>See also weight() and bold().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Bold(System.String,System.String)">
            <summary>
            <para>Returns true if the font that has family family and style style
            is bold; otherwise returns false.</para>
            <para>See also italic() and weight().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.Weight(System.String,System.String)">
            <summary>
            <para>Returns the weight of the font that has family family and style
            style. If there is no such family and style combination, returns -1.</para>
            <para>See also italic() and bold().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.IsPrivateFamily(System.String)">
            <summary>
            <para>Returns true if and only if the family font family is
            private.</para>
            <para>This happens, for instance, on OS X and iOS, where the system UI
            fonts are not accessible to the user. For completeness,
            QFontDatabase::families() returns all font families, including the private
            ones. You should use this function if you are developing a font selection
            control in order to keep private fonts hidden.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            <para>See also families().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.WritingSystemName(QtGui.QFontDatabase.WritingSystem)">
            <summary>
            <para>Returns the names the writingSystem (e.g. for displaying to the
            user in a dialog).</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.WritingSystemSample(QtGui.QFontDatabase.WritingSystem)">
            <summary>
            <para>Returns a string with sample characters from
            writingSystem.</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.AddApplicationFont(System.String)">
            <summary>
            <para>Loads the font from the file specified by fileName and makes it
            available to the application. An ID is returned that can be used to remove
            the font again with removeApplicationFont() or to retrieve the list of
            family names contained in the font.</para>
            <para>The function returns -1 if the font could not be loaded.</para>
            <para>Currently only TrueType fonts, TrueType font collections, and
            OpenType fonts are supported.</para>
            <para>Note: Adding application fonts on Unix/X11 platforms without
            fontconfig is currently not supported.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addApplicationFontFromData(), applicationFontFamilies(),
            and removeApplicationFont().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.AddApplicationFontFromData(QtCore.QByteArray)">
            <summary>
            <para>Loads the font from binary data specified by fontData and makes
            it available to the application. An ID is returned that can be used to
            remove the font again with removeApplicationFont() or to retrieve the list
            of family names contained in the font.</para>
            <para>The function returns -1 if the font could not be loaded.</para>
            <para>Currently only TrueType fonts and TrueType font collections are
            supported.</para>
            <para>Note: Adding application fonts on Unix/X11 platforms without
            fontconfig is currently not supported.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addApplicationFont(), applicationFontFamilies(), and
            removeApplicationFont().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.ApplicationFontFamilies(System.Int32)">
            <summary>
            <para>Returns a list of font families for the given application font
            identified by id.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also addApplicationFont() and
            addApplicationFontFromData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.RemoveApplicationFont(System.Int32)">
            <summary>
            <para>Removes the previously loaded application font identified by id.
            Returns true if unloading of the font succeeded; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also removeAllApplicationFonts(), addApplicationFont(), and
            addApplicationFontFromData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QFontDatabase.systemFont(QtGui.QFontDatabase.SystemFont)">
            <summary>
            <para>Returns the most adequate font for a given type case for proper
            integration with the system's look and feel.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            <para>See also QGuiApplication::font().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontDatabase.RemoveAllApplicationFonts">
            <summary>
            <para>Removes all application-local fonts previously added using
            addApplicationFont() and addApplicationFontFromData().</para>
            <para>Returns true if unloading of the fonts succeeded; otherwise
            returns false.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also removeApplicationFont(), addApplicationFont(), and
            addApplicationFontFromData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QFontDatabase.SupportsThreadedFontRendering">
            <summary>
            <para>Returns true if font rendering is supported outside the GUI
            thread, false otherwise. In other words, a return value of false means that
            all QPainter::drawText() calls outside the GUI thread will not produce
            readable output.</para>
            <para>As of 5.0, always returns true.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also Painting In Threads.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFontDatabase.WritingSystem.Other">
            <summary>(the same as Symbol)</summary>
        </member>
        <member name="T:QtGui.QFontDatabase.SystemFont">
            <summary>
            <para>This enum was introduced or modified in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="F:QtGui.QFontDatabase.SystemFont.GeneralFont">
            <summary>The default system font.</summary>
        </member>
        <member name="F:QtGui.QFontDatabase.SystemFont.FixedFont">
            <summary>The fixed font that the system recommends.</summary>
        </member>
        <member name="F:QtGui.QFontDatabase.SystemFont.TitleFont">
            <summary>The system standard font for titles.</summary>
        </member>
        <member name="F:QtGui.QFontDatabase.SystemFont.SmallestReadableFont">
            <summary>The smallest readable system font.</summary>
        </member>
        <member name="T:QtGui.QRawFont">
            <summary>
            <para>The QRawFont class provides access to a single physical instance
            of a font.</para>
            </summary>
            <remarks>
            <para>Note: QRawFont is a low level class. For most purposes QFont is a
            more appropriate class.</para>
            <para>Most commonly, when presenting text in a user interface, the
            exact fonts used to render the characters is to some extent unknown. This
            can be the case for several reasons: For instance, the actual, physical
            fonts present on the target system could be unexpected to the developers,
            or the text could contain user selected styles, sizes or writing systems
            that are not supported by font chosen in the code.</para>
            <para>Therefore, Qt's QFont class really represents a query for fonts.
            When text is interpreted, Qt will do its best to match the text to the
            query, but depending on the support, different fonts can be used behind the
            scenes.</para>
            <para>For most use cases, this is both expected and necessary, as it
            minimizes the possibility of text in the user interface being
            undisplayable. In some cases, however, more direct control over the process
            might be useful. It is for these use cases the QRawFont class
            exists.</para>
            <para>A QRawFont object represents a single, physical instance of a
            given font in a given pixel size. I.e. in the typical case it represents a
            set of TrueType or OpenType font tables and uses a user specified pixel
            size to convert metrics into logical pixel units. It can be used in
            combination with the QGlyphRun class to draw specific glyph indexes at
            specific positions, and also have accessors to some relevant data in the
            physical font.</para>
            <para>QRawFont only provides support for the main font technologies:
            GDI and DirectWrite on Windows platforms, FreeType on Linux platforms and
            CoreText on Mac OS X. For other font back-ends, the APIs will be
            disabled.</para>
            <para>QRawFont can be constructed in a number of ways:</para>
            <para></para>
            <para>It can be constructed by calling QTextLayout::glyphs() or
            QTextFragment::glyphs(). The returned QGlyphs objects will contain QRawFont
            objects which represent the actual fonts used to render each portion of the
            text.</para>
            <para>It can be constructed by passing a QFont object to
            QRawFont::fromFont(). The function will return a QRawFont object
            representing the font that will be selected as response to the QFont query
            and the selected writing system.</para>
            <para>It can be constructed by passing a file name or QByteArray
            directly to the QRawFont constructor, or by calling loadFromFile() or
            loadFromData(). In this case, the font will not be registered in
            QFontDatabase, and it will not be available as part of regular font
            selection.</para>
            <para></para>
            <para>QRawFont is considered local to the thread in which it is
            constructed (either using a constructor, or by calling loadFromData() or
            loadFromFile()). The QRawFont cannot be moved to a different thread, but
            will have to be recreated in the thread in question.</para>
            <para>Note: For the requirement of caching glyph indexes and font
            selections for static text to avoid reshaping and relayouting in the inner
            loop of an application, a better choice is the QStaticText class, since it
            optimizes the memory cost of the cache and also provides the possibility of
            paint engine specific caches for an additional speed-up.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QRawFont.#ctor">
            <summary>
            <para>Constructs an invalid QRawFont.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.#ctor(System.String,System.Double,QtGui.QFont.HintingPreference)">
            <summary>
            <para>Constructs a QRawFont representing the font contained in the file
            referenced by fileName for the size (in pixels) given by pixelSize, and
            using the hinting preference specified by hintingPreference.</para>
            <para>Note: The referenced file must contain a TrueType or OpenType
            font.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.#ctor(QtCore.QByteArray,System.Double,QtGui.QFont.HintingPreference)">
            <summary>
            <para>Constructs a QRawFont representing the font contained in the
            supplied fontData for the size (in pixels) given by pixelSize, and using
            the hinting preference specified by hintingPreference.</para>
            <para>Note: The data must contain a TrueType or OpenType font.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.#ctor(QtGui.QRawFont)">
            <summary>
            <para>Creates a QRawFont which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.Swap(QtGui.QRawFont)">
            <summary>
            <para>Swaps this raw font with other. This function is very fast and
            never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.op_Equality(QtGui.QRawFont,QtGui.QRawFont)">
            <summary>
            <para>Returns true if this QRawFont is equal to other. Otherwise,
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.op_Inequality(QtGui.QRawFont,QtGui.QRawFont)">
            <summary>
            <para>Returns true if this QRawFont is not equal to other. Otherwise,
            returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.GlyphIndexesForChars(QtCore.QChar,System.Int32,System.UInt32@,System.Int32@)">
            <summary>
            <para>Converts a string of unicode points to glyph indexes using the
            CMAP table in the underlying font. The function works like
            glyphIndexesForString() except it take an array (chars), the results will
            be returned though glyphIndexes array and number of glyphs will be set in
            numGlyphs. The size of glyphIndexes array must be at least numChars, if
            that's still not enough, this function will return false, then you can
            resize glyphIndexes from the size returned in numGlyphs.</para>
            <para>See also glyphIndexesForString(), advancesForGlyphIndexes(),
            QGlyphRun, QTextLayout::glyphRuns(), and QTextFragment::glyphRuns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.AdvancesForGlyphIndexes(System.UInt32@,QtCore.QPointF,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the QRawFont's advances for each of the glyphIndexes in
            pixel units. The advances give the distance from the position of a given
            glyph to where the next glyph should be drawn to make it appear as if the
            two glyphs are unspaced. The glyph indexes are given with the array
            glyphIndexes while the results are returned through advances, both of them
            must have numGlyphs elements. The advance of each glyph is calculated
            separately</para>
            <para>See also QTextLine::horizontalAdvance() and
            QFontMetricsF::width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.AdvancesForGlyphIndexes(System.UInt32@,QtCore.QPointF,System.Int32,QtGui.QRawFont.LayoutFlag)">
            <summary>
            <para>Returns the QRawFont's advances for each of the glyphIndexes in
            pixel units. The advances give the distance from the position of a given
            glyph to where the next glyph should be drawn to make it appear as if the
            two glyphs are unspaced. The glyph indexes are given with the array
            glyphIndexes while the results are returned through advances, both of them
            must have numGlyphs elements. How the advances are calculated is controlled
            by layoutFlags.</para>
            <para>This function was introduced in  Qt 5.1.</para>
            <para>See also QTextLine::horizontalAdvance() and
            QFontMetricsF::width().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.AlphaMapForGlyph(System.UInt32,QtGui.QRawFont.AntialiasingType,QtGui.QTransform)">
            <summary>
            <para>This function returns a rasterized image of the glyph at the
            given glyphIndex in the underlying font, using the transform specified. If
            the QRawFont is not valid, this function will return an invalid
            QImage.</para>
            <para>If antialiasingType is set to QRawFont::SubPixelAntialiasing,
            then the resulting image will be in QImage::Format_RGB32 and the RGB values
            of each pixel will represent the subpixel opacities of the pixel in the
            rasterization of the glyph. Otherwise, the image will be in the format of
            QImage::Format_Indexed8 and each pixel will contain the opacity of the
            pixel in the rasterization.</para>
            <para>See also pathForGlyph() and QPainter::drawGlyphRun().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.PathForGlyph(System.UInt32)">
            <summary>
            <para>This function returns the shape of the glyph at a given
            glyphIndex in the underlying font if the QRawFont is valid. Otherwise, it
            returns an empty QPainterPath.</para>
            <para>The returned glyph will always be unhinted.</para>
            <para>See also alphaMapForGlyph() and QPainterPath::addText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.BoundingRect(System.UInt32)">
            <summary>
            <para>Returns the smallest rectangle containing the glyph with the
            given glyphIndex.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.LoadFromFile(System.String,System.Double,QtGui.QFont.HintingPreference)">
            <summary>
            <para>Replaces the current QRawFont with the contents of the file
            referenced by fileName for the size (in pixels) given by pixelSize, and
            using the hinting preference specified by hintingPreference.</para>
            <para>The file must reference a TrueType or OpenType font.</para>
            <para>See also loadFromData().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.LoadFromData(QtCore.QByteArray,System.Double,QtGui.QFont.HintingPreference)">
            <summary>
            <para>Replaces the current QRawFont with the font contained in the
            supplied fontData for the size (in pixels) given by pixelSize, and using
            the hinting preference specified by hintingPreference.</para>
            <para>The fontData must contain a TrueType or OpenType font.</para>
            <para>See also loadFromFile().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.SupportsCharacter(System.UInt32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns true if the font has a glyph that corresponds to the
            UCS-4 encoded character ucs4.</para>
            <para>See also supportedWritingSystems().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.SupportsCharacter(QtCore.QChar)">
            <summary>
            <para>Returns true if the font has a glyph that corresponds to the
            given character.</para>
            <para>See also supportedWritingSystems().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.FontTable(System.String)">
            <summary>
            <para>Retrieves the sfnt table named tagName from the underlying
            physical font, or an empty byte array if no such table was found. The
            returned font table's byte order is Big Endian, like the sfnt format
            specifies. The tagName must be four characters long and should be formatted
            in the default endianness of the current platform.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.AlphaMapForGlyph(System.UInt32,QtGui.QRawFont.AntialiasingType)">
            <summary>
            <para>This function returns a rasterized image of the glyph at the
            given glyphIndex in the underlying font, using the transform specified. If
            the QRawFont is not valid, this function will return an invalid
            QImage.</para>
            <para>If antialiasingType is set to QRawFont::SubPixelAntialiasing,
            then the resulting image will be in QImage::Format_RGB32 and the RGB values
            of each pixel will represent the subpixel opacities of the pixel in the
            rasterization of the glyph. Otherwise, the image will be in the format of
            QImage::Format_Indexed8 and each pixel will contain the opacity of the
            pixel in the rasterization.</para>
            <para>See also pathForGlyph() and QPainter::drawGlyphRun().</para>
            </summary>
        </member>
        <member name="M:QtGui.QRawFont.FromFont(QtGui.QFont,QtGui.QFontDatabase.WritingSystem)">
            <summary>
            <para>Fetches the physical representation based on a font query. The
            physical font returned is the font that will be preferred by Qt in order to
            display text in the selected writingSystem.</para>
            <para>Warning: This function is potentially expensive and should not be
            called in performance sensitive code.</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.PixelSize">
            <summary>
            <para>Returns the pixel size set for this QRawFont. The pixel size
            affects how glyphs are rasterized, the size of glyphs returned by
            pathForGlyph(), and is used to convert internal metrics from design units
            to logical pixel units.</para>
            <para>See also setPixelSize().</para>
            <para></para>
            <para>Sets the pixel size with which this font should be rendered to
            pixelSize.</para>
            <para>See also pixelSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.IsValid">
            <summary>
            <para>Returns true if the QRawFont is valid and false otherwise.</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.FamilyName">
            <summary>
            <para>Returns the family name of this QRawFont.</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.StyleName">
            <summary>
            <para>Returns the style name of this QRawFont.</para>
            <para>See also QFont::styleName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.Style">
            <summary>
            <para>Returns the style of this QRawFont.</para>
            <para>See also QFont::style().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.Weight">
            <summary>
            <para>Returns the weight of this QRawFont.</para>
            <para>See also QFont::weight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.HintingPreference">
            <summary>
            <para>Returns the hinting preference used to construct this
            QRawFont.</para>
            <para>See also QFont::hintingPreference().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.Ascent">
            <summary>
            <para>Returns the ascent of this QRawFont in pixel units.</para>
            <para>See also QFontMetricsF::ascent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.Descent">
            <summary>
            <para>Returns the descent of this QRawFont in pixel units.</para>
            <para>See also QFontMetricsF::descent().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.Leading">
            <summary>
            <para>Returns the leading of this QRawFont in pixel units.</para>
            <para>See also QFontMetricsF::leading().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.XHeight">
            <summary>
            <para>Returns the xHeight of this QRawFont in pixel units.</para>
            <para>See also QFontMetricsF::xHeight().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.AverageCharWidth">
            <summary>
            <para>Returns the average character width of this QRawFont in pixel
            units.</para>
            <para>See also QFontMetricsF::averageCharWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.MaxCharWidth">
            <summary>
            <para>Returns the width of the widest character in the font.</para>
            <para>See also QFontMetricsF::maxWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.LineThickness">
            <summary>
            <para>Returns the thickness for drawing lines (underline, overline,
            etc.) along with text drawn in this font.</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.UnderlinePosition">
            <summary>
            <para>Returns the position from baseline for drawing underlines below
            the text rendered with this font.</para>
            </summary>
        </member>
        <member name="P:QtGui.QRawFont.UnitsPerEm">
            <summary>
            <para>Returns the number of design units define the width and height of
            the em square for this QRawFont. This value is used together with the pixel
            size when converting design metrics to pixel units, as the internal metrics
            are specified in design units and the pixel size gives the size of 1 em in
            pixels.</para>
            <para>See also pixelSize() and setPixelSize().</para>
            </summary>
        </member>
        <member name="T:QtGui.QRawFont.AntialiasingType">
            <summary>
            <para>This enum represents the different ways a glyph can be rasterized
            in the function alphaMapForGlyph().</para>
            </summary>
        </member>
        <member name="F:QtGui.QRawFont.AntialiasingType.PixelAntialiasing">
            <summary>Will rasterize by measuring the coverage of the shape on whole pixels. The returned image contains the alpha values of each pixel based on the coverage of the glyph shape.</summary>
        </member>
        <member name="F:QtGui.QRawFont.AntialiasingType.SubPixelAntialiasing">
            <summary>Will rasterize by measuring the coverage of each subpixel, returning a separate alpha value for each of the red, green and blue components of each pixel.</summary>
        </member>
        <member name="T:QtGui.QRawFont.LayoutFlag">
            <summary>
            <para>This enum tells the function advancesForGlyphIndexes() how to
            calculate the advances.</para>
            <para>This enum was introduced or modified in  Qt 5.1.</para>
            <para>The LayoutFlags type is a typedef for QFlags&lt;LayoutFlag&gt;.
            It stores an OR combination of LayoutFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QRawFont.LayoutFlag.SeparateAdvances">
            <summary>Will calculate the advance for each glyph separately.</summary>
        </member>
        <member name="F:QtGui.QRawFont.LayoutFlag.KernedAdvances">
            <summary>Will apply kerning between adjacent glyphs. Note that OpenType GPOS based kerning is currently not supported.</summary>
        </member>
        <member name="F:QtGui.QRawFont.LayoutFlag.UseDesignMetrics">
            <summary>Use design metrics instead of hinted metrics adjusted to the resolution of the paint device. Can be OR-ed with any of the options above.</summary>
        </member>
        <member name="T:QtGui.QGlyphRun">
            <summary>
            <para>The QGlyphRun class provides direct access to the internal glyphs
            in a font.</para>
            </summary>
            <remarks>
            <para>When Qt displays a string of text encoded in Unicode, it will
            first convert the Unicode points into a list of glyph indexes and a list of
            positions based on one or more fonts. The Unicode representation of the
            text and the QFont object will in this case serve as a convenient
            abstraction that hides the details of what actually takes place when
            displaying the text on-screen. For instance, by the time the text actually
            reaches the screen, it may be represented by a set of fonts in addition to
            the one specified by the user, e.g. in case the originally selected font
            did not support all the writing systems contained in the text.</para>
            <para>Under certain circumstances, it can be useful as an application
            developer to have more low-level control over which glyphs in a specific
            font are drawn to the screen. This could for instance be the case in
            applications that use an external font engine and text shaper together with
            Qt. QGlyphRun provides an interface to the raw data needed to get text on
            the screen. It contains a list of glyph indexes, a position for each glyph
            and a font.</para>
            <para>It is the user's responsibility to ensure that the selected font
            actually contains the provided glyph indexes.</para>
            <para>QTextLayout::glyphRuns() or QTextFragment::glyphRuns() can be
            used to convert unicode encoded text into a list of QGlyphRun objects, and
            QPainter::drawGlyphRun() can be used to draw the glyphs.</para>
            <para>Note: Please note that QRawFont is considered local to the thread
            in which it is constructed. This in turn means that a new QRawFont will
            have to be created and set on the QGlyphRun if it is moved to a different
            thread. If the QGlyphRun contains a reference to a QRawFont from a
            different thread than the current, it will not be possible to draw the
            glyphs using a QPainter, as the QRawFont is considered invalid and
            inaccessible in this case.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QGlyphRun.#ctor">
            <summary>
            <para>Constructs an empty QGlyphRun object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.#ctor(QtGui.QGlyphRun)">
            <summary>
            <para>Constructs a QGlyphRun object which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.Swap(QtGui.QGlyphRun)">
            <summary>
            <para>Swaps this glyph run instance with other. This function is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.SetRawData(System.UInt32@,QtCore.QPointF,System.Int32)">
            <summary>
            <para>Sets the glyph indexes and positions of this QGlyphRun to use the
            first size elements in the arrays glyphIndexArray and glyphPositionArray.
            The data is not copied. The caller must guarantee that the arrays are not
            deleted as long as this QGlyphRun and any copies of it exists.</para>
            <para>See also setGlyphIndexes() and setPositions().</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.Clear">
            <summary>
            <para>Clears all data in the QGlyphRun object.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.op_Equality(QtGui.QGlyphRun,QtGui.QGlyphRun)">
            <summary>
            <para>Compares other to this QGlyphRun object. Returns true if the list
            of glyph indexes, the list of positions and the font are all equal,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.op_Inequality(QtGui.QGlyphRun,QtGui.QGlyphRun)">
            <summary>
            <para>Compares other to this QGlyphRun object. Returns true if any of
            the list of glyph indexes, the list of positions or the font are different,
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QGlyphRun.SetFlag(QtGui.QGlyphRun.GlyphRunFlag,System.Boolean)">
            <summary>
            <para>If enabled is true, then flag is enabled; otherwise, it is
            disabled.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also flags() and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.RawFont">
            <summary>
            <para>Returns the font selected for this QGlyphRun object.</para>
            <para>See also setRawFont().</para>
            <para></para>
            <para>Sets the font in which to look up the glyph indexes to the
            rawFont specified.</para>
            <para>See also rawFont() and setGlyphIndexes().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.Overline">
            <summary>
            <para>Returns true if this QGlyphRun should be painted with an overline
            decoration.</para>
            <para>See also setOverline() and flags().</para>
            <para></para>
            <para>Indicates that this QGlyphRun should be painted with an overline
            decoration if overline is true. Otherwise the QGlyphRun should be painted
            with no overline decoration.</para>
            <para>See also overline(), setFlag(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.Underline">
            <summary>
            <para>Returns true if this QGlyphRun should be painted with an
            underline decoration.</para>
            <para>See also setUnderline() and flags().</para>
            <para></para>
            <para>Indicates that this QGlyphRun should be painted with an underline
            decoration if underline is true. Otherwise the QGlyphRun should be painted
            with no underline decoration.</para>
            <para>See also underline(), setFlag(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.StrikeOut">
            <summary>
            <para>Returns true if this QGlyphRun should be painted with a strike
            out decoration.</para>
            <para>See also setStrikeOut() and flags().</para>
            <para></para>
            <para>Indicates that this QGlyphRun should be painted with an strike
            out decoration if strikeOut is true. Otherwise the QGlyphRun should be
            painted with no strike out decoration.</para>
            <para>See also strikeOut(), setFlag(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.RightToLeft">
            <summary>
            <para>Returns true if this QGlyphRun contains glyphs that are painted
            from the right to the left.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setRightToLeft() and flags().</para>
            <para></para>
            <para>Indicates that this QGlyphRun contains glyphs that should be
            ordered from the right to left if rightToLeft is true. Otherwise the order
            of the glyphs is assumed to be left to right.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also isRightToLeft(), setFlag(), and setFlags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.Flags">
            <summary>
            <para>Returns the flags set for this QGlyphRun.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setFlags(), setFlag(), and setFlag().</para>
            <para></para>
            <para>Sets the flags of this QGlyphRun to flags.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setFlag() and flags().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.BoundingRect">
            <summary>
            <para>Returns the smallest rectangle that contains all glyphs in this
            QGlyphRun. If a bounding rect has been set using setBoundingRect(), then
            this will be returned. Otherwise the bounding rect will be calculated based
            on the font metrics of the glyphs in the glyph run.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also setBoundingRect().</para>
            <para></para>
            <para>Sets the bounding rect of the glyphs in this QGlyphRun to be
            boundingRect. This rectangle will be returned by boundingRect() unless it
            is empty, in which case the bounding rectangle of the glyphs in the glyph
            run will be returned instead.</para>
            <para>Note: Unless you are implementing text shaping, you should not
            have to use this function. It is used specifically when the QGlyphRun
            should represent an area which is smaller than the area of the glyphs it
            contains. This could happen e.g. if the glyph run is retrieved by calling
            QTextLayout::glyphRuns() and the specified range only includes part of a
            ligature (where two or more characters are combined to a single glyph.)
            When this is the case, the bounding rect should only include the
            appropriate part of the ligature glyph, based on a calculation of the
            average width of the characters in the ligature.</para>
            <para>In order to support such a case (an example is selections which
            should be drawn with a different color than the main text color), it is
            necessary to clip the painting mechanism to the rectangle returned from
            boundingRect() to avoid drawing the entire ligature glyph.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            <para>See also boundingRect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QGlyphRun.IsEmpty">
            <summary>
            <para>Returns true if the QGlyphRun does not contain any glyphs.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="T:QtGui.QGlyphRun.GlyphRunFlag">
            <summary>
            <para>This enum describes flags that alter the way the run of glyphs
            might be presented or behave in a visual layout. The layout which generates
            the glyph runs can set these flags based on relevant internal data, to
            retain information needed to present the text as intended by the user of
            the layout.</para>
            <para>This enum was introduced or modified in  Qt 5.0.</para>
            <para>The GlyphRunFlags type is a typedef for
            QFlags&lt;GlyphRunFlag&gt;. It stores an OR combination of GlyphRunFlag
            values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QGlyphRun.GlyphRunFlag.Overline">
            <summary>Indicates that the glyphs should be visualized together with an overline.</summary>
        </member>
        <member name="F:QtGui.QGlyphRun.GlyphRunFlag.Underline">
            <summary>Indicates that the glyphs should be visualized together with an underline.</summary>
        </member>
        <member name="F:QtGui.QGlyphRun.GlyphRunFlag.StrikeOut">
            <summary>Indicates that the glyphs should be struck out visually.</summary>
        </member>
        <member name="F:QtGui.QGlyphRun.GlyphRunFlag.RightToLeft">
            <summary>Indicates that the glyphs are ordered right to left. This can affect the positioning of other screen elements that are relative to the glyph run, such as an inline text object.</summary>
        </member>
        <member name="F:QtGui.QGlyphRun.GlyphRunFlag.SplitLigature">
            <summary>Indicates that the glyph run splits a ligature glyph. This means that a ligature glyph is included in the run, but the characters represented by it corresponds only to part of that ligature. The glyph run's boundingRect() function can in this case be used to retrieve the area covered by glyphs that correspond to the characters represented by the glyph run. When visualizing the glyphs, care needs to be taken to clip to this bounding rect to ensure that only the corresponding part of the ligature is painted. In particular, this can be the case when retrieving a glyph run from a QTextLayout for a specific character range, e.g. when retrieving the selected area of a QTextLayout.</summary>
        </member>
        <member name="T:QtGui.QTextCursor">
            <summary>
            <para>The QTextCursor class offers an API to access and modify
            QTextDocuments.</para>
            </summary>
            <remarks>
            <para>Text cursors are objects that are used to access and modify the
            contents and underlying structure of text documents via a programming
            interface that mimics the behavior of a cursor in a text editor.
            QTextCursor contains information about both the cursor's position within a
            QTextDocument and any selection that it has made.</para>
            <para>QTextCursor is modeled on the way a text cursor behaves in a text
            editor, providing a programmatic means of performing standard actions
            through the user interface. A document can be thought of as a single string
            of characters. The cursor's current position() then is always either
            between two consecutive characters in the string, or else before the very
            first character or after the very last character in the string. Documents
            can also contain tables, lists, images, and other objects in addition to
            text but, from the developer's point of view, the document can be treated
            as one long string. Some portions of that string can be considered to lie
            within particular blocks (e.g. paragraphs), or within a table's cell, or a
            list's item, or other structural elements. When we refer to &quot;current
            character&quot; we mean the character immediately before the cursor
            position() in the document. Similarly, the &quot;current block&quot; is the
            block that contains the cursor position().</para>
            <para>A QTextCursor also has an anchor() position. The text that is
            between the anchor() and the position() is the selection. If anchor() ==
            position() there is no selection.</para>
            <para>The cursor position can be changed programmatically using
            setPosition() and movePosition(); the latter can also be used to select
            text. For selections see selectionStart(), selectionEnd(), hasSelection(),
            clearSelection(), and removeSelectedText().</para>
            <para>If the position() is at the start of a block, atBlockStart()
            returns true; and if it is at the end of a block, atBlockEnd() returns
            true. The format of the current character is returned by charFormat(), and
            the format of the current block is returned by blockFormat().</para>
            <para>Formatting can be applied to the current text document using the
            setCharFormat(), mergeCharFormat(), setBlockFormat() and mergeBlockFormat()
            functions. The 'set' functions will replace the cursor's current character
            or block format, while the 'merge' functions add the given format
            properties to the cursor's current format. If the cursor has a selection,
            the given format is applied to the current selection. Note that when only a
            part of a block is selected, the block format is applied to the entire
            block. The text at the current character position can be turned into a list
            using createList().</para>
            <para>Deletions can be achieved using deleteChar(),
            deletePreviousChar(), and removeSelectedText().</para>
            <para>Text strings can be inserted into the document with the
            insertText() function, blocks (representing new paragraphs) can be inserted
            with insertBlock().</para>
            <para>Existing fragments of text can be inserted with insertFragment()
            but, if you want to insert pieces of text in various formats, it is usually
            still easier to use insertText() and supply a character format.</para>
            <para>Various types of higher-level structure can also be inserted into
            the document with the cursor:</para>
            <para></para>
            <para>Lists are ordered sequences of block elements that are decorated
            with bullet points or symbols. These are inserted in a specified format
            with insertList().</para>
            <para>Tables are inserted with the insertTable() function, and can be
            given an optional format. These contain an array of cells that can be
            traversed using the cursor.</para>
            <para>Inline images are inserted with insertImage(). The image to be
            used can be specified in an image format, or by name.</para>
            <para>Frames are inserted by calling insertFrame() with a specified
            format.</para>
            <para></para>
            <para>Actions can be grouped (i.e. treated as a single action for
            undo/redo) using beginEditBlock() and endEditBlock().</para>
            <para>Cursor movements are limited to valid cursor positions. In Latin
            writing this is between any two consecutive characters in the text, before
            the first character, or after the last character. In some other writing
            systems cursor movements are limited to &quot;clusters&quot; (e.g. a
            syllable in Devanagari, or a base letter plus diacritics). Functions such
            as movePosition() and deleteChar() limit cursor movement to these valid
            positions.</para>
            <para></para>
            <para>See also Rich Text Processing.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextCursor.#ctor">
            <summary>
            <para>Constructs a null cursor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Constructs a cursor pointing to the beginning of the
            document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.#ctor(QtGui.QTextFrame)">
            <summary>
            <para>Constructs a cursor pointing to the beginning of the
            frame.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.#ctor(QtGui.QTextBlock)">
            <summary>
            <para>Constructs a cursor pointing to the beginning of the
            block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.#ctor(QtGui.QTextCursor)">
            <summary>
            <para>Constructs a new cursor that is a copy of cursor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.Swap(QtGui.QTextCursor)">
            <summary>
            <para>Swaps this text cursor instance with other. This function is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.SetPosition(System.Int32,QtGui.QTextCursor.MoveMode)">
            <summary>
            <para>Moves the cursor to the absolute position in the document
            specified by pos using a MoveMode specified by m. The cursor is positioned
            between characters.</para>
            <para>See also position(), movePosition(), and anchor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertText(System.String)">
            <summary>
            <para>Inserts text at the current position, using the current character
            format.</para>
            <para>If there is a selection, the selection is deleted and replaced by
            text, for example:</para>
            <para>cursor.clearSelection();</para>
            <para>cursor.movePosition(QTextCursor::NextWord,
            QTextCursor::KeepAnchor);</para>
            <para>cursor.insertText(&quot;Hello World&quot;);</para>
            <para>This clears any existing selection, selects the word at the
            cursor (i.e. from position() forward), and replaces the selection with the
            phrase &quot;Hello World&quot;.</para>
            <para>Any ASCII linefeed characters (\n) in the inserted text are
            transformed into unicode block separators, corresponding to insertBlock()
            calls.</para>
            <para>See also charFormat() and hasSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertText(System.String,QtGui.QTextCharFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts text at the current position with the given
            format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.MovePosition(QtGui.QTextCursor.MoveOperation,QtGui.QTextCursor.MoveMode,System.Int32)">
            <summary>
            <para>Moves the cursor by performing the given operation n times, using
            the specified mode, and returns true if all operations were completed
            successfully; otherwise returns false.</para>
            <para>For example, if this function is repeatedly used to seek to the
            end of the next word, it will eventually fail when the end of the document
            is reached.</para>
            <para>By default, the move operation is performed once (n = 1).</para>
            <para>If mode is KeepAnchor, the cursor selects the text it moves over.
            This is the same effect that the user achieves when they hold down the
            Shift key and move the cursor with the cursor keys.</para>
            <para>See also setVisualNavigation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.DeleteChar">
            <summary>
            <para>If there is no selected text, deletes the character at the
            current cursor position; otherwise deletes the selected text.</para>
            <para>See also deletePreviousChar(), hasSelection(), and
            clearSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.DeletePreviousChar">
            <summary>
            <para>If there is no selected text, deletes the character before the
            current cursor position; otherwise deletes the selected text.</para>
            <para>See also deleteChar(), hasSelection(), and
            clearSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.Select(QtGui.QTextCursor.SelectionType)">
            <summary>
            <para>Selects text in the document according to the given
            selection.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.RemoveSelectedText">
            <summary>
            <para>If there is a selection, its content is deleted; otherwise does
            nothing.</para>
            <para>See also hasSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.ClearSelection">
            <summary>
            <para>Clears the current selection by setting the anchor to the cursor
            position.</para>
            <para>Note that it does not delete the text of the selection.</para>
            <para>See also removeSelectedText() and hasSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.SelectedTableCells(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            <para>If the selection spans over table cells, firstRow is populated
            with the number of the first row in the selection, firstColumn with the
            number of the first column in the selection, and numRows and numColumns
            with the number of rows and columns in the selection. If the selection does
            not span any table cells the results are harmless but undefined.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.MergeCharFormat(QtGui.QTextCharFormat)">
            <summary>
            <para>Merges the cursor's current character format with the properties
            described by format modifier. If the cursor has a selection, this function
            applies all the properties set in modifier to all the character formats
            that are part of the selection.</para>
            <para>See also hasSelection() and setCharFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.MergeBlockFormat(QtGui.QTextBlockFormat)">
            <summary>
            <para>Modifies the block format of the current block (or all blocks
            that are contained in the selection) with the block format specified by
            modifier.</para>
            <para>See also setBlockFormat() and blockFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.MergeBlockCharFormat(QtGui.QTextCharFormat)">
            <summary>
            <para>Modifies the block char format of the current block (or all
            blocks that are contained in the selection) with the block format specified
            by modifier.</para>
            <para>See also setBlockCharFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertBlock">
            <summary>
            <para>Inserts a new empty block at the cursor position() with the
            current blockFormat() and charFormat().</para>
            <para>See also setBlockFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertBlock(QtGui.QTextBlockFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a new empty block at the cursor position() with block
            format format and the current charFormat() as block char format.</para>
            <para>See also setBlockFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertBlock(QtGui.QTextBlockFormat,QtGui.QTextCharFormat)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a new empty block at the cursor position() with block
            format format and charFormat as block char format.</para>
            <para>See also setBlockFormat().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertList(QtGui.QTextListFormat)">
            <summary>
            <para>Inserts a new block at the current position and makes it the
            first list item of a newly created list with the given format. Returns the
            created list.</para>
            <para>See also currentList(), createList(), and insertBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertList(QtGui.QTextListFormat.Style)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts a new block at the current position and makes it the
            first list item of a newly created list with the given style. Returns the
            created list.</para>
            <para>See also currentList(), createList(), and insertBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.CreateList(QtGui.QTextListFormat)">
            <summary>
            <para>Creates and returns a new list with the given format, and makes
            the current paragraph the cursor is in the first list item.</para>
            <para>See also insertList() and currentList().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.CreateList(QtGui.QTextListFormat.Style)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates and returns a new list with the given style, making the
            cursor's current paragraph the first list item.</para>
            <para>The style to be used is defined by the QTextListFormat::Style
            enum.</para>
            <para>See also insertList() and currentList().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertTable(System.Int32,System.Int32,QtGui.QTextTableFormat)">
            <summary>
            <para>Creates a new table with the given number of rows and columns in
            the specified format, inserts it at the current cursor position() in the
            document, and returns the table object. The cursor is moved to the
            beginning of the first cell.</para>
            <para>There must be at least one row and one column in the
            table.</para>
            <para>See also currentTable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertTable(System.Int32,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Creates a new table with the given number of rows and columns,
            inserts it at the current cursor position() in the document, and returns
            the table object. The cursor is moved to the beginning of the first
            cell.</para>
            <para>There must be at least one row and one column in the
            table.</para>
            <para>See also currentTable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertFrame(QtGui.QTextFrameFormat)">
            <summary>
            <para>Inserts a frame with the given format at the current cursor
            position(), moves the cursor position() inside the frame, and returns the
            frame.</para>
            <para>If the cursor holds a selection, the whole selection is moved
            inside the frame.</para>
            <para>See also hasSelection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertFragment(QtGui.QTextDocumentFragment)">
            <summary>
            <para>Inserts the text fragment at the current position().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertHtml(System.String)">
            <summary>
            <para>Inserts the text html at the current position(). The text is
            interpreted as HTML.</para>
            <para>Note: When using this function with a style sheet, the style
            sheet will only apply to the current block in the document. In order to
            apply a style sheet throughout a document, use
            QTextDocument::setDefaultStyleSheet() instead.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertImage(QtGui.QTextImageFormat,QtGui.QTextFrameFormat.Position)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Inserts the image defined by the given format at the cursor's
            current position with the specified alignment.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertImage(QtGui.QTextImageFormat)">
            <summary>
            <para>Inserts the image defined by format at the current
            position().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertImage(System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Convenience method for inserting the image with the given name at
            the current position().</para>
            <para>QImage img = ...</para>
            <para>textDocument-&gt;addResource(QTextDocument::ImageResource,
            QUrl(&quot;myimage&quot;), img);</para>
            <para>cursor.insertImage(&quot;myimage&quot;);</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.InsertImage(QtGui.QImage,System.String)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Convenience function for inserting the given image with an
            optional name at the current position().</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.BeginEditBlock">
            <summary>
            <para>Indicates the start of a block of editing operations on the
            document that should appear as a single operation from an undo/redo point
            of view.</para>
            <para>For example:</para>
            <para>QTextCursor cursor(textDocument);</para>
            <para>cursor.beginEditBlock();</para>
            <para>cursor.insertText(&quot;Hello&quot;);</para>
            <para>cursor.insertText(&quot;World&quot;);</para>
            <para>cursor.endEditBlock();</para>
            <para></para>
            <para>textDocument-&gt;undo();</para>
            <para>The call to undo() will cause both insertions to be undone,
            causing both &quot;World&quot; and &quot;Hello&quot; to be removed.</para>
            <para>It is possible to nest calls to beginEditBlock and endEditBlock.
            The top-most pair will determine the scope of the undo/redo
            operation.</para>
            <para>See also endEditBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.JoinPreviousEditBlock">
            <summary>
            <para>Like beginEditBlock() indicates the start of a block of editing
            operations that should appear as a single operation for undo/redo. However
            unlike beginEditBlock() it does not start a new block but reverses the
            previous call to endEditBlock() and therefore makes following operations
            part of the previous edit block created.</para>
            <para>For example:</para>
            <para>QTextCursor cursor(textDocument);</para>
            <para>cursor.beginEditBlock();</para>
            <para>cursor.insertText(&quot;Hello&quot;);</para>
            <para>cursor.insertText(&quot;World&quot;);</para>
            <para>cursor.endEditBlock();</para>
            <para></para>
            <para>...</para>
            <para></para>
            <para>cursor.joinPreviousEditBlock();</para>
            <para>cursor.insertText(&quot;Hey&quot;);</para>
            <para>cursor.endEditBlock();</para>
            <para></para>
            <para>textDocument-&gt;undo();</para>
            <para>The call to undo() will cause all three insertions to be
            undone.</para>
            <para>See also beginEditBlock() and endEditBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.EndEditBlock">
            <summary>
            <para>Indicates the end of a block of editing operations on the
            document that should appear as a single operation from an undo/redo point
            of view.</para>
            <para>See also beginEditBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_Inequality(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is at a different position in
            the document as this cursor; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_LessThan(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is positioned later in the
            document than this cursor; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_LessThanOrEqual(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is positioned later or at the
            same position in the document as this cursor; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_Equality(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is at the same position in the
            document as this cursor; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_GreaterThanOrEqual(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is positioned earlier or at the
            same position in the document as this cursor; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.op_GreaterThan(QtGui.QTextCursor,QtGui.QTextCursor)">
            <summary>
            <para>Returns true if the other cursor is positioned earlier in the
            document than this cursor; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextCursor.IsCopyOf(QtGui.QTextCursor)">
            <summary>
            <para>Returns true if this cursor and other are copies of each other,
            i.e. one of them was created as a copy of the other and neither has moved
            since. This is much stricter than equality.</para>
            <para>See also operator=() and operator==().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.VisualNavigation">
            <summary>
            <para>Returns true if the cursor does visual navigation; otherwise
            returns false.</para>
            <para>Visual navigation means skipping over hidden text paragraphs. The
            default is false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setVisualNavigation() and movePosition().</para>
            <para></para>
            <para>Sets visual navigation to b.</para>
            <para>Visual navigation means skipping over hidden text paragraphs. The
            default is false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also visualNavigation() and movePosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.VerticalMovementX">
            <summary>
            <para>Returns the visual x position for vertical cursor
            movements.</para>
            <para>A value of -1 indicates no predefined x position. It will then be
            set automatically the next time the cursor moves up or down.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setVerticalMovementX().</para>
            <para></para>
            <para>Sets the visual x position for vertical cursor movements to
            x.</para>
            <para>The vertical movement x position is cleared automatically when
            the cursor moves horizontally, and kept unchanged when the cursor moves
            vertically. The mechanism allows the cursor to move up and down on a
            visually straight line with proportional fonts, and to gently
            &quot;jump&quot; over short lines.</para>
            <para>A value of -1 indicates no predefined x position. It will then be
            set automatically the next time the cursor moves up or down.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also verticalMovementX().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.KeepPositionOnInsert">
            <summary>
            <para>Returns whether the cursor should keep its current position when
            text gets inserted at the position of the cursor.</para>
            <para>The default is false;</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also setKeepPositionOnInsert().</para>
            <para></para>
            <para>Defines whether the cursor should keep its current position when
            text gets inserted at the current position of the cursor.</para>
            <para>If b is true, the cursor keeps its current position when text
            gets inserted at the positing of the cursor. If b is false, the cursor
            moves along with the inserted text.</para>
            <para>The default is false.</para>
            <para>Note that a cursor always moves when text is inserted before the
            current position of the cursor, and it always keeps its position when text
            is inserted after the current position of the cursor.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also keepPositionOnInsert().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.CharFormat">
            <summary>
            <para>Returns the format of the character immediately before the cursor
            position(). If the cursor is positioned at the beginning of a text block
            that is not empty then the format of the character immediately after the
            cursor is returned.</para>
            <para>See also setCharFormat(), insertText(), and blockFormat().</para>
            <para></para>
            <para>Sets the cursor's current character format to the given format.
            If the cursor has a selection, the given format is applied to the current
            selection.</para>
            <para>See also charFormat(), hasSelection(), and
            mergeCharFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.BlockFormat">
            <summary>
            <para>Returns the block format of the block the cursor is in.</para>
            <para>See also setBlockFormat() and charFormat().</para>
            <para></para>
            <para>Sets the block format of the current block (or all blocks that
            are contained in the selection) to format.</para>
            <para>See also blockFormat() and mergeBlockFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.BlockCharFormat">
            <summary>
            <para>Returns the block character format of the block the cursor is
            in.</para>
            <para>The block char format is the format used when inserting text at
            the beginning of an empty block.</para>
            <para>See also setBlockCharFormat().</para>
            <para></para>
            <para>Sets the block char format of the current block (or all blocks
            that are contained in the selection) to format.</para>
            <para>See also blockCharFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.Position">
            <summary>
            <para>Returns the absolute position of the cursor within the document.
            The cursor is positioned between characters.</para>
            <para>See also setPosition(), movePosition(), anchor(), and
            positionInBlock().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.IsNull">
            <summary>
            <para>Returns true if the cursor is null; otherwise returns false. A
            null cursor is created by the default constructor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.PositionInBlock">
            <summary>
            <para>Returns the relative position of the cursor within the block. The
            cursor is positioned between characters.</para>
            <para>This is equivalent to position() - block().position().</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.Anchor">
            <summary>
            <para>Returns the anchor position; this is the same as position()
            unless there is a selection in which case position() marks one end of the
            selection and anchor() marks the other end. Just like the cursor position,
            the anchor position is between characters.</para>
            <para>See also position(), setPosition(), movePosition(),
            selectionStart(), and selectionEnd().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.HasSelection">
            <summary>
            <para>Returns true if the cursor contains a selection; otherwise
            returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.HasComplexSelection">
            <summary>
            <para>Returns true if the cursor contains a selection that is not
            simply a range from selectionStart() to selectionEnd(); otherwise returns
            false.</para>
            <para>Complex selections are ones that span at least two cells in a
            table; their extent is specified by selectedTableCells().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.SelectionStart">
            <summary>
            <para>Returns the start of the selection or position() if the cursor
            doesn't have a selection.</para>
            <para>See also selectionEnd(), position(), and anchor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.SelectionEnd">
            <summary>
            <para>Returns the end of the selection or position() if the cursor
            doesn't have a selection.</para>
            <para>See also selectionStart(), position(), and anchor().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.SelectedText">
            <summary>
            <para>Returns the current selection's text (which may be empty). This
            only returns the text, with no rich text formatting information. If you
            want a document fragment (i.e. formatted rich text) use selection()
            instead.</para>
            <para>Note: If the selection obtained from an editor spans a line
            break, the text will contain a Unicode U+2029 paragraph separator character
            instead of a newline \n character. Use QString::replace() to replace these
            characters with newlines.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.Selection">
            <summary>
            <para>Returns the current selection (which may be empty) with all its
            formatting information. If you just want the selected text (i.e. plain
            text) use selectedText() instead.</para>
            <para>Note: Unlike QTextDocumentFragment::toPlainText(), selectedText()
            may include special unicode characters such as
            QChar::ParagraphSeparator.</para>
            <para>See also QTextDocumentFragment::toPlainText().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.Block">
            <summary>
            <para>Returns the block that contains the cursor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.AtBlockStart">
            <summary>
            <para>Returns true if the cursor is at the start of a block; otherwise
            returns false.</para>
            <para>See also atBlockEnd() and atStart().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.AtBlockEnd">
            <summary>
            <para>Returns true if the cursor is at the end of a block; otherwise
            returns false.</para>
            <para>See also atBlockStart() and atEnd().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.AtStart">
            <summary>
            <para>Returns true if the cursor is at the start of the document;
            otherwise returns false.</para>
            <para>See also atBlockStart() and atEnd().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.AtEnd">
            <summary>
            <para>Returns true if the cursor is at the end of the document;
            otherwise returns false.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also atStart() and atBlockEnd().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.CurrentList">
            <summary>
            <para>Returns the current list if the cursor position() is inside a
            block that is part of a list; otherwise returns 0.</para>
            <para>See also insertList() and createList().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.CurrentTable">
            <summary>
            <para>Returns a pointer to the current table if the cursor position()
            is inside a block that is part of a table; otherwise returns 0.</para>
            <para>See also insertTable().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.CurrentFrame">
            <summary>
            <para>Returns a pointer to the current frame. Returns 0 if the cursor
            is invalid.</para>
            <para>See also insertFrame().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.BlockNumber">
            <summary>
            <para>Returns the number of the block the cursor is in, or 0 if the
            cursor is invalid.</para>
            <para>Note that this function only makes sense in documents without
            complex objects such as tables or frames.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.ColumnNumber">
            <summary>
            <para>Returns the position of the cursor within its containing
            line.</para>
            <para>Note that this is the column number relative to a wrapped line,
            not relative to the block (i.e. the paragraph).</para>
            <para>You probably want to call positionInBlock() instead.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also positionInBlock().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextCursor.Document">
            <summary>
            <para>Returns the document this cursor is associated with.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextCursor.MoveMode">
            <summary>
            <para>If the anchor() is kept where it is and the position() is moved,
            the text in between will be selected.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveMode.MoveAnchor">
            <summary>Moves the anchor to the same position as the cursor itself.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveMode.KeepAnchor">
            <summary>Keeps the anchor where it is.</summary>
        </member>
        <member name="T:QtGui.QTextCursor.MoveOperation">
            <summary>
            <para>See also movePosition().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NoMove">
            <summary>Keep the cursor where it is</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.Start">
            <summary>Move to the start of the document.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.Up">
            <summary>Move up one line.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.StartOfLine">
            <summary>Move to the start of the current line.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.StartOfBlock">
            <summary>Move to the start of the current block.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.StartOfWord">
            <summary>Move to the start of the current word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.PreviousBlock">
            <summary>Move to the start of the previous block.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.PreviousCharacter">
            <summary>Move to the previous character.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.PreviousWord">
            <summary>Move to the beginning of the previous word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.Left">
            <summary>Move left one character.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.WordLeft">
            <summary>Move left one word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.End">
            <summary>Move to the end of the document.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.Down">
            <summary>Move down one line.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.EndOfLine">
            <summary>Move to the end of the current line.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.EndOfWord">
            <summary>Move to the end of the current word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.EndOfBlock">
            <summary>Move to the end of the current block.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NextBlock">
            <summary>Move to the beginning of the next block.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NextCharacter">
            <summary>Move to the next character.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NextWord">
            <summary>Move to the next word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.Right">
            <summary>Move right one character.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.WordRight">
            <summary>Move right one word.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NextCell">
            <summary>Move to the beginning of the next table cell inside the current table. If the current cell is the last cell in the row, the cursor will move to the first cell in the next row.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.PreviousCell">
            <summary>Move to the beginning of the previous table cell inside the current table. If the current cell is the first cell in the row, the cursor will move to the last cell in the previous row.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.NextRow">
            <summary>Move to the first new cell of the next row in the current table.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.MoveOperation.PreviousRow">
            <summary>Move to the last cell of the previous row in the current table.</summary>
        </member>
        <member name="T:QtGui.QTextCursor.SelectionType">
            <summary>
            <para>This enum describes the types of selection that can be applied
            with the select() function.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextCursor.SelectionType.WordUnderCursor">
            <summary>Selects the word under the cursor. If the cursor is not positioned within a string of selectable characters, no text is selected.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.SelectionType.LineUnderCursor">
            <summary>Selects the line of text under the cursor.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.SelectionType.BlockUnderCursor">
            <summary>Selects the block of text under the cursor.</summary>
        </member>
        <member name="F:QtGui.QTextCursor.SelectionType.Document">
            <summary>Selects the entire document.</summary>
        </member>
        <member name="T:QtGui.QTextInlineObject">
            <summary>
            <para>The QTextInlineObject class represents an inline object in a
            QAbstractTextDocumentLayout and its implementations.</para>
            </summary>
            <remarks>
            <para>Normally, you do not need to create a QTextInlineObject. It is
            used by QAbstractTextDocumentLayout to handle inline objects when
            implementing a custom layout.</para>
            <para>The inline object has various attributes that can be set, for
            example using, setWidth(), setAscent(), and setDescent(). The rectangle it
            occupies is given by rect(), and its direction by textDirection(). Its
            position in the text layout is given by textPosition(), and its format is
            given by format().</para>
            </remarks>
        </member>
        <member name="P:QtGui.QTextInlineObject.Width">
            <summary>
            <para>Returns the inline object's width.</para>
            <para>See also setWidth(), ascent(), descent(), and rect().</para>
            <para></para>
            <para>Sets the inline object's width to w.</para>
            <para>See also width(), ascent(), descent(), and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.Ascent">
            <summary>
            <para>Returns the inline object's ascent.</para>
            <para>See also setAscent(), descent(), width(), and rect().</para>
            <para></para>
            <para>Sets the inline object's ascent to a.</para>
            <para>See also ascent(), setDescent(), width(), and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.Descent">
            <summary>
            <para>Returns the inline object's descent.</para>
            <para>See also setDescent(), ascent(), width(), and rect().</para>
            <para></para>
            <para>Sets the inline object's descent to d.</para>
            <para>See also descent(), setAscent(), width(), and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.IsValid">
            <summary>
            <para>Returns true if this inline object is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.Rect">
            <summary>
            <para>Returns the inline object's rectangle.</para>
            <para>See also ascent(), descent(), and width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.Height">
            <summary>
            <para>Returns the inline object's total height. This is equal to
            ascent() + descent() + 1.</para>
            <para>See also ascent(), descent(), width(), and rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.TextDirection">
            <summary>
            <para>Returns if the object should be laid out right-to-left or
            left-to-right.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.TextPosition">
            <summary>
            <para>The position of the inline object within the text layout.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.FormatIndex">
            <summary>
            <para>Returns an integer describing the format of the inline object
            within the text layout.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextInlineObject.Format">
            <summary>
            <para>Returns format of the inline object within the text
            layout.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextLayout">
            <summary>
            <para>The QTextLayout class is used to lay out and render text.</para>
            </summary>
            <remarks>
            <para>It offers many features expected from a modern text layout
            engine, including Unicode compliant rendering, line breaking and handling
            of cursor positioning. It can also produce and render device independent
            layout, something that is important for WYSIWYG applications.</para>
            <para>The class has a rather low level API and unless you intend to
            implement your own text rendering for some specialized widget, you probably
            won't need to use it directly.</para>
            <para>QTextLayout can be used with both plain and rich text.</para>
            <para>QTextLayout can be used to create a sequence of QTextLine
            instances with given widths and can position them independently on the
            screen. Once the layout is done, these lines can be drawn on a paint
            device.</para>
            <para>The text to be laid out can be provided in the constructor or set
            with setText().</para>
            <para>The layout can be seen as a sequence of QTextLine objects; use
            createLine() to create a QTextLine instance, and lineAt() or
            lineForTextPosition() to retrieve created lines.</para>
            <para>Here is a code snippet that demonstrates the layout phase:</para>
            <para>int leading = fontMetrics.leading();</para>
            <para>qreal height = 0;</para>
            <para>textLayout.setCacheEnabled(true);</para>
            <para>textLayout.beginLayout();</para>
            <para>while (1) {</para>
            <para>    QTextLine line = textLayout.createLine();</para>
            <para>    if (!line.isValid())</para>
            <para>        break;</para>
            <para></para>
            <para>    line.setLineWidth(lineWidth);</para>
            <para>    height += leading;</para>
            <para>    line.setPosition(QPointF(0, height));</para>
            <para>    height += line.height();</para>
            <para>}</para>
            <para>textLayout.endLayout();</para>
            <para>The text can then be rendered by calling the layout's draw()
            function:</para>
            <para>QPainter painter(this);</para>
            <para>textLayout.draw(&amp;painter, QPoint(0, 0));</para>
            <para>For a given position in the text you can find a valid cursor
            position with isValidCursorPosition(), nextCursorPosition(), and
            previousCursorPosition().</para>
            <para>The QTextLayout itself can be positioned with setPosition(); it
            has a boundingRect(), and a minimumWidth() and a maximumWidth().</para>
            <para></para>
            <para>See also QStaticText.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextLayout.#ctor">
            <summary>
            <para>Constructs an empty text layout.</para>
            <para>See also setText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.#ctor(System.String)">
            <summary>
            <para>Constructs a text layout to lay out the given text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.#ctor(System.String,QtGui.QFont,QtGui.IQPaintDevice)">
            <summary>
            <para>Constructs a text layout to lay out the given text with the
            specified font.</para>
            <para>All the metric and layout calculations will be done in terms of
            the paint device, paintdevice. If paintdevice is 0 the calculations will be
            done in screen metrics.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.SetPreeditArea(System.Int32,System.String)">
            <summary>
            <para>Sets the position and text of the area in the layout that is
            processed before editing occurs. The layout is invalidated and must be laid
            out again.</para>
            <para>See also preeditAreaPosition() and preeditAreaText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.PreeditAreaPosition">
            <summary>
            <para>Returns the position of the area in the text layout that will be
            processed before editing occurs.</para>
            <para>See also preeditAreaText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.PreeditAreaText">
            <summary>
            <para>Returns the text that is inserted in the layout before editing
            occurs.</para>
            <para>See also preeditAreaPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.ClearAdditionalFormats">
            <summary>
            <para>Clears the list of additional formats supported by the text
            layout.</para>
            <para>See also additionalFormats() and setAdditionalFormats().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.BeginLayout">
            <summary>
            <para>Begins the layout process.</para>
            <para>See also endLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.EndLayout">
            <summary>
            <para>Ends the layout process.</para>
            <para>See also beginLayout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.ClearLayout">
            <summary>
            <para>Clears the line information in the layout. After having called
            this function, lineCount() returns 0.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.CreateLine">
            <summary>
            <para>Returns a new text line to be laid out if there is text to be
            inserted into the layout; otherwise returns an invalid text line.</para>
            <para>The text layout creates a new line object that starts after the
            last line in the layout, or at the beginning if the layout is empty. The
            layout maintains an internal cursor, and each line is filled with text from
            the cursor position onwards when the QTextLine::setLineWidth() function is
            called.</para>
            <para>Once QTextLine::setLineWidth() is called, a new line can be
            created and filled with text. Repeating this process will lay out the whole
            block of text contained in the QTextLayout. If there is no text left to be
            inserted into the layout, the QTextLine returned will not be valid
            (isValid() will return false).</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.LineAt(System.Int32)">
            <summary>
            <para>Returns the i-th line of text in this text layout.</para>
            <para>See also lineCount() and lineForTextPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.LineForTextPosition(System.Int32)">
            <summary>
            <para>Returns the line that contains the cursor position specified by
            pos.</para>
            <para>See also isValidCursorPosition() and lineAt().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.IsValidCursorPosition(System.Int32)">
            <summary>
            <para>/ Returns true if position pos is a valid cursor position.</para>
            <para>In a Unicode context some positions in the text are not valid
            cursor positions, because the position is inside a Unicode surrogate or a
            grapheme cluster.</para>
            <para>A grapheme cluster is a sequence of two or more Unicode
            characters that form one indivisible entity on the screen. For example the
            latin character `&#196;' can be represented in Unicode by two characters,
            `A' (0x41), and the combining diaresis (0x308). A text cursor can only
            validly be positioned before or after these two characters, never between
            them since that wouldn't make sense. In indic languages every syllable
            forms a grapheme cluster.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.NextCursorPosition(System.Int32,QtGui.QTextLayout.CursorMode)">
            <summary>
            <para>Returns the next valid cursor position after oldPos that respects
            the given cursor mode. Returns value of oldPos, if oldPos is not a valid
            cursor position.</para>
            <para>See also isValidCursorPosition() and
            previousCursorPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.PreviousCursorPosition(System.Int32,QtGui.QTextLayout.CursorMode)">
            <summary>
            <para>Returns the first valid cursor position before oldPos that
            respects the given cursor mode. Returns value of oldPos, if oldPos is not a
            valid cursor position.</para>
            <para>See also isValidCursorPosition() and nextCursorPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.LeftCursorPosition(System.Int32)">
            <summary>
            <para>Returns the cursor position to the left of oldPos, next to it.
            It's dependent on the visual position of characters, after bi-directional
            reordering.</para>
            <para>See also rightCursorPosition() and
            previousCursorPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.RightCursorPosition(System.Int32)">
            <summary>
            <para>Returns the cursor position to the right of oldPos, next to it.
            It's dependent on the visual position of characters, after bi-directional
            reordering.</para>
            <para>See also leftCursorPosition() and nextCursorPosition().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.DrawCursor(QtGui.QPainter,QtCore.QPointF,System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Draws a text cursor with the current pen at the given position
            using the painter specified. The corresponding position within the text is
            specified by cursorPosition.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLayout.DrawCursor(QtGui.QPainter,QtCore.QPointF,System.Int32,System.Int32)">
            <summary>
            <para>Draws a text cursor with the current pen and the specified width
            at the given position using the painter specified. The corresponding
            position within the text is specified by cursorPosition.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.Font">
            <summary>
            <para>Returns the current font that is used for the layout, or a
            default font if none is set.</para>
            <para>See also setFont().</para>
            <para></para>
            <para>Sets the layout's font to the given font. The layout is
            invalidated and must be laid out again.</para>
            <para>See also font().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.Text">
            <summary>
            <para>Returns the layout's text.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the layout's text to the given string. The layout is
            invalidated and must be laid out again.</para>
            <para>Notice that when using this QTextLayout as part of a
            QTextDocument this method will have no effect.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.TextOption">
            <summary>
            <para>Returns the current text option used to control the layout
            process.</para>
            <para>See also setTextOption().</para>
            <para></para>
            <para>Sets the text option structure that controls the layout process
            to the given option.</para>
            <para>See also textOption().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.CacheEnabled">
            <summary>
            <para>Returns true if the complete layout information is cached;
            otherwise returns false.</para>
            <para>See also setCacheEnabled().</para>
            <para></para>
            <para>Enables caching of the complete layout information if enable is
            true; otherwise disables layout caching. Usually QTextLayout throws most of
            the layouting information away after a call to endLayout() to reduce memory
            consumption. If you however want to draw the laid out text directly
            afterwards enabling caching might speed up drawing significantly.</para>
            <para>See also cacheEnabled().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.CursorMoveStyle">
            <summary>
            <para>The cursor movement style of this QTextLayout. The default is
            Qt::LogicalMoveStyle.</para>
            <para>See also setCursorMoveStyle().</para>
            <para></para>
            <para>Sets the visual cursor movement style to the given style. If the
            QTextLayout is backed by a document, you can ignore this and use the option
            in QTextDocument, this option is for widgets like QLineEdit or custom
            widgets without a QTextDocument. Default value is
            Qt::LogicalMoveStyle.</para>
            <para>See also cursorMoveStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.Position">
            <summary>
            <para>The global position of the layout. This is independent of the
            bounding rectangle and of the layout process.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Moves the text layout to point p.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.LineCount">
            <summary>
            <para>Returns the number of lines in this text layout.</para>
            <para>See also lineAt().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.BoundingRect">
            <summary>
            <para>The smallest rectangle that contains all the lines in the
            layout.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.MinimumWidth">
            <summary>
            <para>The minimum width the layout needs. This is the width of the
            layout's smallest non-breakable substring.</para>
            <para>Warning: This function only returns a valid value after the
            layout has been done.</para>
            <para>See also maximumWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.MaximumWidth">
            <summary>
            <para>The maximum width the layout could expand to; this is essentially
            the width of the entire text.</para>
            <para>Warning: This function only returns a valid value after the
            layout has been done.</para>
            <para>See also minimumWidth().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextLayout.FormatRange">
            <summary>
            <para>The QTextLayout::FormatRange structure is used to apply extra
            formatting information for a specified area in the text layout's
            content.</para>
            </summary>
            <remarks>
            <para></para>
            <para>See also QTextLayout::setAdditionalFormats() and
            QTextLayout::draw().</para>
            </remarks>
        </member>
        <member name="P:QtGui.QTextLayout.FormatRange.Start">
            <summary>
            <para>Specifies the beginning of the format range within the text
            layout's text.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.FormatRange.Length">
            <summary>
            <para>Specifies the numer of characters the format range spans.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLayout.FormatRange.Format">
            <summary>
            <para>Specifies the format to apply.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextLine">
            <summary>
            <para>The QTextLine class represents a line of text inside a
            QTextLayout.</para>
            </summary>
            <remarks>
            <para>A text line is usually created by
            QTextLayout::createLine().</para>
            <para>After being created, the line can be filled using the
            setLineWidth() or setNumColumns() functions. A line has a number of
            attributes including the rectangle it occupies, rect(), its coordinates,
            x() and y(), its textLength(), width() and naturalTextWidth(), and its
            ascent() and descent() relative to the text. The position of the cursor in
            terms of the line is available from cursorToX() and its inverse from
            xToCursor(). A line can be moved with setPosition().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextLine.#ctor">
            <summary>
            <para>Creates an invalid line.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.CursorToX(System.Int32@,QtGui.QTextLine.Edge)">
            <summary>
            <para>Converts the cursor position cursorPos to the corresponding x
            position inside the line, taking account of the edge.</para>
            <para>If cursorPos is not a valid cursor position, the nearest valid
            cursor position will be used instead, and cpos will be modified to point to
            this valid cursor position.</para>
            <para>See also xToCursor().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.CursorToX(System.Int32,QtGui.QTextLine.Edge)">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.XToCursor(System.Double,QtGui.QTextLine.CursorPosition)">
            <summary>
            <para>Converts the x-coordinate x, to the nearest matching cursor
            position, depending on the cursor position type, cpos. Note that result
            cursor position includes possible preedit area text.</para>
            <para>See also cursorToX().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.SetLineWidth(System.Double)">
            <summary>
            <para>Lays out the line with the given width. The line is filled from
            its starting position with as many characters as will fit into the line. In
            case the text cannot be split at the end of the line, it will be filled
            with additional characters to the next whitespace or end of the
            text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.SetNumColumns(System.Int32)">
            <summary>
            <para>Lays out the line. The line is filled from its starting position
            with as many characters as are specified by numColumns. In case the text
            cannot be split until numColumns characters, the line will be filled with
            as many characters to the next whitespace or end of the text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.SetNumColumns(System.Int32,System.Double)">
            <summary>
            <para>Lays out the line. The line is filled from its starting position
            with as many characters as are specified by numColumns. In case the text
            cannot be split until numColumns characters, the line will be filled with
            as many characters to the next whitespace or end of the text. The provided
            alignmentWidth is used as reference width for alignment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextLine.Draw(QtGui.QPainter,QtCore.QPointF,QtGui.QTextLayout.FormatRange)">
            <summary>
            <para>Draws a line on the given painter at the specified position. The
            selection is reserved for internal use.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.LeadingIncluded">
            <summary>
            <para>Returns true if positive leading is included into the line's
            height; otherwise returns false.</para>
            <para>By default, leading is not included.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also setLeadingIncluded().</para>
            <para></para>
            <para>Includes positive leading into the line's height if included is
            true; otherwise does not include leading.</para>
            <para>By default, leading is not included.</para>
            <para>Note that negative leading is ignored, it must be handled in the
            code using the text lines by letting the lines overlap.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also leadingIncluded().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Position">
            <summary>
            <para>Returns the line's position relative to the text layout's
            position.</para>
            <para>See also setPosition().</para>
            <para></para>
            <para>Moves the line to position pos.</para>
            <para>See also position().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.IsValid">
            <summary>
            <para>Returns true if this text line is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Rect">
            <summary>
            <para>Returns the line's bounding rectangle.</para>
            <para>See also x(), y(), textLength(), and width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.X">
            <summary>
            <para>Returns the line's x position.</para>
            <para>See also rect(), y(), textLength(), and width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Y">
            <summary>
            <para>Returns the line's y position.</para>
            <para>See also x(), rect(), textLength(), and width().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Width">
            <summary>
            <para>Returns the line's width as specified by the layout()
            function.</para>
            <para>See also naturalTextWidth(), x(), y(), textLength(), and
            rect().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Ascent">
            <summary>
            <para>Returns the line's ascent.</para>
            <para>See also descent() and height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Descent">
            <summary>
            <para>Returns the line's descent.</para>
            <para>See also ascent() and height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Height">
            <summary>
            <para>Returns the line's height. This is equal to ascent() + descent()
            if leading is not included. If leading is included, this equals to ascent()
            + descent() + leading().</para>
            <para>See also ascent(), descent(), leading(), and
            setLeadingIncluded().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.Leading">
            <summary>
            <para>Returns the line's leading.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also ascent(), descent(), and height().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.NaturalTextWidth">
            <summary>
            <para>Returns the width of the line that is occupied by text. This is
            always &lt;= to width(), and is the minimum width that could be used by
            layout() without changing the line break position.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.HorizontalAdvance">
            <summary>
            <para>Returns the horizontal advance of the text. The advance of the
            text is the distance from its position to the next position at which text
            would naturally be drawn.</para>
            <para>By adding the advance to the position of the text line and using
            this as the position of a second text line, you will be able to position
            the two lines side-by-side without gaps in-between.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.NaturalTextRect">
            <summary>
            <para>Returns the rectangle covered by the line.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.TextStart">
            <summary>
            <para>Returns the start of the line from the beginning of the string
            passed to the QTextLayout.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.TextLength">
            <summary>
            <para>Returns the length of the text in the line.</para>
            <para>See also naturalTextWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextLine.LineNumber">
            <summary>
            <para>Returns the position of the line in the text engine.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextDocument">
            <summary>
            <para>The QTextDocument class holds formatted text.</para>
            </summary>
            <remarks>
            <para>QTextDocument is a container for structured rich text documents,
            providing support for styled text and various types of document elements,
            such as lists, tables, frames, and images. They can be created for use in a
            QTextEdit, or used independently.</para>
            <para>Each document element is described by an associated format
            object. Each format object is treated as a unique object by QTextDocuments,
            and can be passed to objectForFormat() to obtain the document element that
            it is applied to.</para>
            <para>A QTextDocument can be edited programmatically using a
            QTextCursor, and its contents can be examined by traversing the document
            structure. The entire document structure is stored as a hierarchy of
            document elements beneath the root frame, found with the rootFrame()
            function. Alternatively, if you just want to iterate over the textual
            contents of the document you can use begin(), end(), and findBlock() to
            retrieve text blocks that you can examine and iterate over.</para>
            <para>The layout of a document is determined by the documentLayout();
            you can create your own QAbstractTextDocumentLayout subclass and set it
            using setDocumentLayout() if you want to use your own layout logic. The
            document's title and other meta-information can be obtained by calling the
            metaInformation() function. For documents that are exposed to users through
            the QTextEdit class, the document title is also available via the
            QTextEdit::documentTitle() function.</para>
            <para>The toPlainText() and toHtml() convenience functions allow you to
            retrieve the contents of the document as plain text and HTML. The
            document's text can be searched using the find() functions.</para>
            <para>Undo/redo of operations performed on the document can be
            controlled using the setUndoRedoEnabled() function. The undo/redo system
            can be controlled by an editor widget through the undo() and redo() slots;
            the document also provides contentsChanged(), undoAvailable(), and
            redoAvailable() signals that inform connected editor widgets about the
            state of the undo/redo system. The following are the undo/redo operations
            of a QTextDocument:</para>
            <para></para>
            <para>Insertion or removal of characters. A sequence of insertions or
            removals within the same text block are regarded as a single undo/redo
            operation.</para>
            <para>Insertion or removal of text blocks. Sequences of insertion or
            removals in a single operation (e.g., by selecting and then deleting text)
            are regarded as a single undo/redo operation.</para>
            <para>Text character format changes.</para>
            <para>Text block format changes.</para>
            <para>Text block group format changes.</para>
            <para></para>
            <para></para>
            <para>See also QTextCursor, QTextEdit, Rich Text Processing, and Text
            Object Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextDocument.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs an empty QTextDocument with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.#ctor(System.String,QtCore.QObject)">
            <summary>
            <para>Constructs a QTextDocument containing the plain (unformatted)
            text specified, and with the given parent.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Clone(QtCore.QObject)">
            <summary>
            <para>Creates a new QTextDocument that is a copy of this text document.
            parent is the parent of the returned text document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Clear">
            <summary>
            <para>Clears the document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.SetMetaInformation(QtGui.QTextDocument.MetaInformation,System.String)">
            <summary>
            <para>Sets the document's meta information of the type specified by
            info to the given string.</para>
            <para>See also metaInformation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.metaInformation(QtGui.QTextDocument.MetaInformation)">
            <summary>
            <para>Returns meta information about the document of the type specified
            by info.</para>
            <para>See also setMetaInformation().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.ToHtml(QtCore.QByteArray)">
            <summary>
            <para>Returns a string containing an HTML representation of the
            document.</para>
            <para>The encoding parameter specifies the value for the charset
            attribute in the html header. For example if 'utf-8' is specified then the
            beginning of the generated html will look like this:</para>
            <para>&lt;html&gt;&lt;head&gt;&lt;meta
            http-equiv=&quot;Content-Type&quot; content=&quot;text/html;
            charset=utf-8&quot;&gt;&lt;/head&gt;&lt;body&gt;...</para>
            <para>If no encoding is specified then no such meta information is
            generated.</para>
            <para>If you later on convert the returned html string into a byte
            array for transmission over a network or when saving to disk you should
            specify the encoding you're going to use for the conversion to a byte array
            here.</para>
            <para>See also Supported HTML Subset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.SetHtml(System.String)">
            <summary>
            <para>Replaces the entire contents of the document with the given
            HTML-formatted text in the html string. The undo/redo history is reset when
            this function is called.</para>
            <para>The HTML formatting is respected as much as possible; for
            example, &quot;&lt;b&gt;bold&lt;/b&gt; text&quot; will produce text where
            the first word has a font weight that gives it a bold appearance:
            &quot;bold text&quot;.</para>
            <para>Note: It is the responsibility of the caller to make sure that
            the text is correctly decoded when a QString containing HTML is created and
            passed to setHtml().</para>
            <para>See also setPlainText() and Supported HTML Subset.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.ToPlainText">
            <summary>
            <para>Returns the plain text contained in the document. If you want
            formatting information use a QTextCursor instead.</para>
            <para>Note: Embedded objects, such as images, are represented by a
            Unicode value U+FFFC (OBJECT REPLACEMENT CHARACTER).</para>
            <para>See also toHtml().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.SetPlainText(System.String)">
            <summary>
            <para>Replaces the entire contents of the document with the given plain
            text. The undo/redo history is reset when this function is called.</para>
            <para>See also setHtml().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.CharacterAt(System.Int32)">
            <summary>
            <para>Returns the character at position pos, or a null character if the
            position is out of range.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also characterCount().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(System.String,System.Int32,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Finds the next occurrence of the string, subString, in the
            document. The search starts at the given position, and proceeds forwards
            through the document unless specified otherwise in the search options. The
            options control the type of search performed.</para>
            <para>Returns a cursor with the match selected if subString was found;
            otherwise returns a null cursor.</para>
            <para>If the position is 0 (the default) the search begins from the
            beginning of the document; otherwise it begins at the specified
            position.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(System.String,QtGui.QTextCursor,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>Finds the next occurrence of the string, subString, in the
            document. The search starts at the position of the given cursor, and
            proceeds forwards through the document unless specified otherwise in the
            search options. The options control the type of search performed.</para>
            <para>Returns a cursor with the match selected if subString was found;
            otherwise returns a null cursor.</para>
            <para>If the given cursor has a selection, the search begins after the
            selection; otherwise it begins at the cursor's position.</para>
            <para>By default the search is case-sensitive, and can match text
            anywhere in the document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(QtCore.QRegExp,System.Int32,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Finds the next occurrence, matching the regular expression, expr,
            in the document. The search starts at the given from position, and proceeds
            forwards through the document unless specified otherwise in the search
            options. The options control the type of search performed. The
            FindCaseSensitively option is ignored for this overload, use
            QRegExp::caseSensitivity instead.</para>
            <para>Returns a cursor with the match selected if a match was found;
            otherwise returns a null cursor.</para>
            <para>If the from position is 0 (the default) the search begins from
            the beginning of the document; otherwise it begins at the specified
            position.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(QtCore.QRegExp,QtGui.QTextCursor,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Finds the next occurrence, matching the regular expression, expr,
            in the document. The search starts at the position of the given from
            cursor, and proceeds forwards through the document unless specified
            otherwise in the search options. The options control the type of search
            performed. The FindCaseSensitively option is ignored for this overload, use
            QRegExp::caseSensitivity instead.</para>
            <para>Returns a cursor with the match selected if a match was found;
            otherwise returns a null cursor.</para>
            <para>If the given from cursor has a selection, the search begins after
            the selection; otherwise it begins at the cursor's position.</para>
            <para>By default the search is case-sensitive, and can match text
            anywhere in the document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(QtCore.QRegularExpression,System.Int32,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>Finds the next occurrence, matching the regular expression, expr,
            in the document. The search starts at the given from position, and proceeds
            forwards through the document unless specified otherwise in the search
            options. The options control the type of search performed.</para>
            <para>Returns a cursor with the match selected if a match was found;
            otherwise returns a null cursor.</para>
            <para>If the from position is 0 (the default) the search begins from
            the beginning of the document; otherwise it begins at the specified
            position.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Find(QtCore.QRegularExpression,QtGui.QTextCursor,QtGui.QTextDocument.FindFlag)">
            <summary>
            <para>Finds the next occurrence, matching the regular expression, expr,
            in the document. The search starts at the position of the given cursor, and
            proceeds forwards through the document unless specified otherwise in the
            search options. The options control the type of search performed.</para>
            <para>Returns a cursor with the match selected if a match was found;
            otherwise returns a null cursor.</para>
            <para>If the given cursor has a selection, the search begins after the
            selection; otherwise it begins at the cursor's position.</para>
            <para>By default the search is case-sensitive, and can match text
            anywhere in the document.</para>
            <para>This function was introduced in  Qt 5.5.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Object(System.Int32)">
            <summary>
            <para>Returns the text object associated with the given
            objectIndex.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.ObjectForFormat(QtGui.QTextFormat)">
            <summary>
            <para>Returns the text object associated with the format f.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.FindBlock(System.Int32)">
            <summary>
            <para>Returns the text block that contains the pos-th character.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.FindBlockByNumber(System.Int32)">
            <summary>
            <para>Returns the text block with the specified blockNumber.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QTextBlock::blockNumber().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.FindBlockByLineNumber(System.Int32)">
            <summary>
            <para>Returns the text block that contains the specified
            lineNumber.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QTextBlock::firstLineNumber().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Begin">
            <summary>
            <para>Returns the document's first text block.</para>
            <para>See also firstBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.End">
            <summary>
            <para>This function returns a block to test for the end of the document
            while iterating over it.</para>
            <para>    for (QTextBlock it = doc-&gt;begin(); it != doc-&gt;end(); it
            = it.next())</para>
            <para>        cout &lt;&lt; it.text().toStdString() &lt;&lt;
            endl;</para>
            <para>The block returned is invalid and represents the block after the
            last block in the document. You can use lastBlock() to retrieve the last
            valid block of the document.</para>
            <para>See also lastBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Print(QtGui.IQPagedPaintDevice)">
            <summary>
            <para>Prints the document to the given printer. The
            QPageablePaintDevice must be set up before being used with this
            function.</para>
            <para>This is only a convenience method to print the whole document to
            the printer.</para>
            <para>If the document is already paginated through a specified height
            in the pageSize() property it is printed as-is.</para>
            <para>If the document is not paginated, like for example a document
            used in a QTextEdit, then a temporary copy of the document is created and
            the copy is broken into multiple pages according to the size of the paint
            device's paperRect(). By default a 2 cm margin is set around the document
            contents. In addition the current page number is printed at the bottom of
            each page.</para>
            <para>See also QTextEdit::print().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Resource(System.Int32,QtCore.QUrl)">
            <summary>
            <para>Returns data of the specified type from the resource with the
            given name.</para>
            <para>This function is called by the rich text engine to request data
            that isn't directly stored by QTextDocument, but still associated with it.
            For example, images are referenced indirectly by the name attribute of a
            QTextImageFormat object.</para>
            <para>Resources are cached internally in the document. If a resource
            can not be found in the cache, loadResource is called to try to load the
            resource. loadResource should then use addResource to add the resource to
            the cache.</para>
            <para>See also QTextDocument::ResourceType.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.AddResource(System.Int32,QtCore.QUrl,QtCore.QVariant)">
            <summary>
            <para>Adds the resource resource to the resource cache, using type and
            name as identifiers. type should be a value from
            QTextDocument::ResourceType.</para>
            <para>For example, you can add an image as a resource in order to
            reference it from within the document:</para>
            <para>    document-&gt;addResource(QTextDocument::ImageResource,</para>
            <para>        QUrl(&quot;mydata://image.png&quot;),
            QVariant(image));</para>
            <para>The image can be inserted into the document using the QTextCursor
            API:</para>
            <para>    QTextImageFormat imageFormat;</para>
            <para>    imageFormat.setName(&quot;mydata://image.png&quot;);</para>
            <para>    cursor.insertImage(imageFormat);</para>
            <para>Alternatively, you can insert images using the HTML img
            tag:</para>
            <para>    editor-&gt;append(&quot;&lt;img
            src=\&quot;mydata://image.png\&quot; /&gt;&quot;);</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.MarkContentsDirty(System.Int32,System.Int32)">
            <summary>
            <para>Marks the contents specified by the given position and length as
            &quot;dirty&quot;, informing the document that it needs to be laid out
            again.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.DrawContents(QtGui.QPainter,QtCore.QRectF)">
            <summary>
            <para>Draws the content of the document with painter p, clipped to
            rect. If rect is a null rectangle (default) then the document is painted
            unclipped.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.AdjustSize">
            <summary>
            <para>Adjusts the document to a reasonable size.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also idealWidth(), textWidth, and size.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Undo(QtGui.QTextCursor)">
            <summary>
            <para>Undoes the last editing operation on the document if undo is
            available. The provided cursor is positioned at the end of the location
            where the edition operation was undone.</para>
            <para>See the Qt Undo Framework documentation for details.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also undoAvailable() and isUndoRedoEnabled().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Redo(QtGui.QTextCursor)">
            <summary>
            <para>Redoes the last editing operation on the document if redo is
            available.</para>
            <para>The provided cursor is positioned at the end of the location
            where the edition operation was redone.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.ClearUndoRedoStacks(QtGui.QTextDocument.Stacks)">
            <summary>
            <para>Clears the stacks specified by stacksToClear.</para>
            <para>This method clears any commands on the undo stack, the redo
            stack, or both (the default). If commands are cleared, the appropriate
            signals are emitted, QTextDocument::undoAvailable() or
            QTextDocument::redoAvailable().</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QTextDocument::undoAvailable() and
            QTextDocument::redoAvailable().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Undo">
            <summary>
            <para>This is an overloaded function.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.Redo">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Redoes the last editing operation on the document if redo is
            available.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.CreateObject(QtGui.QTextFormat)">
            <summary>
            <para>Creates and returns a new document object (a QTextObject), based
            on the given format.</para>
            <para>QTextObjects will always get created through this method, so you
            must reimplement it if you use custom text objects inside your
            document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocument.LoadResource(System.Int32,QtCore.QUrl)">
            <summary>
            <para>Loads data of the specified type from the resource with the given
            name.</para>
            <para>This function is called by the rich text engine to request data
            that isn't directly stored by QTextDocument, but still associated with it.
            For example, images are referenced indirectly by the name attribute of a
            QTextImageFormat object.</para>
            <para>When called by Qt, type is one of the values of
            QTextDocument::ResourceType.</para>
            <para>If the QTextDocument is a child object of a QObject that has an
            invokable loadResource method such as QTextEdit, QTextBrowser or a
            QTextDocument itself then the default implementation tries to retrieve the
            data from the parent.</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.ContentsChange">
            <summary>
            <para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</para>
            <para>Information is provided about the position of the character in the document where the change occurred, the number of characters removed (charsRemoved), and the number of characters added (charsAdded).</para>
            <para>The signal is emitted before the document's layout manager is notified about the change. This hook allows you to implement syntax highlighting for the document.</para>
            <para>See also QAbstractTextDocumentLayout::documentChanged() and contentsChanged().</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.ContentsChanged">
            <summary>
            <para>This signal is emitted whenever the document's content changes; for example, when text is inserted or deleted, or when formatting is applied.</para>
            <para>See also contentsChange().</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.UndoAvailable">
            <summary>
            <para>This signal is emitted whenever undo operations become available (available is true) or unavailable (available is false).</para>
            <para>See the Qt Undo Framework documentation for details.</para>
            <para>See also undo() and isUndoRedoEnabled().</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.RedoAvailable">
            <summary>
            <para>This signal is emitted whenever redo operations become available (available is true) or unavailable (available is false).</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.UndoCommandAdded">
            <summary>
            <para>This signal is emitted every time a new level of undo is added to the QTextDocument.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.ModificationChanged">
            <summary>
            <para>This signal is emitted whenever the content of the document changes in a way that affects the modification state. If changed is true, the document has been modified; otherwise it is false.</para>
            <para>For example, calling setModified(false) on a document and then inserting text causes the signal to get emitted. If you undo that operation, causing the document to return to its original unmodified state, the signal will get emitted again.</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.CursorPositionChanged">
            <summary>
            <para>This signal is emitted whenever the position of a cursor changed due to an editing operation. The cursor that changed is passed in cursor. If the document is used with the QTextEdit class and you need a signal when the cursor is moved with the arrow keys you can use the cursorPositionChanged() signal in QTextEdit.</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.BlockCountChanged">
            <summary>
            <para>This signal is emitted when the total number of text blocks in the document changes. The value passed in newBlockCount is the new total.</para>
            <para>This function was introduced in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.BaseUrlChanged">
            <summary>
            <para>This property holds the base URL used to resolve relative resource URLs within the document.</para>
            <para>Resource URLs are resolved to be within the same directory as the target of the base URL meaning any portion of the path after the last '/' will be ignored.</para>
            <para></para>
            <para> Base URLRelative URLResolved URL</para>
            <para>file:///path/to/content	images/logo.png	file:///path/to/images/logo.png</para>
            <para>file:///path/to/content/	images/logo.png	file:///path/to/content/images/logo.png</para>
            <para>file:///path/to/content/index.html	images/logo.png	file:///path/to/content/images/logo.png</para>
            <para>file:///path/to/content/images/	../images/logo.png	file:///path/to/content/images/logo.png</para>
            <para></para>
            <para>This property was introduced in  Qt 5.3.</para>
            <para>Access functions:</para>
            <para></para>
            <para> QUrl 	baseUrl() const</para>
            <para> void 	setBaseUrl(const QUrl &amp; url)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	baseUrlChanged(const QUrl &amp; url)</para>
            <para></para>
            </summary>
        </member>
        <member name="E:QtGui.QTextDocument.DocumentLayoutChanged">
            <summary>
            <para>This signal is emitted when a new document layout is set.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setDocumentLayout().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.UndoRedoEnabled">
            <summary>
            <para>This property holds whether undo/redo are enabled for this
            document.</para>
            <para>This defaults to true. If disabled, the undo stack is cleared and
            no items will be added to it.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DocumentLayout">
            <summary>
            <para>Returns the document layout for this document.</para>
            <para>See also setDocumentLayout().</para>
            <para></para>
            <para>Sets the document to use the given layout. The previous layout is
            deleted.</para>
            <para>See also documentLayoutChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.PageSize">
            <summary>
            <para>This property holds the page size that should be used for laying
            out the document.</para>
            <para>By default, for a newly-created, empty document, this property
            contains an undefined size.</para>
            <para>See also modificationChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DefaultFont">
            <summary>
            <para>This property holds the default font used to display the
            document's text.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.UseDesignMetrics">
            <summary>
            <para>This property holds whether the document uses design metrics of
            fonts to improve the accuracy of text layout.</para>
            <para>If this property is set to true, the layout will use design
            metrics. Otherwise, the metrics of the paint device as set on
            QAbstractTextDocumentLayout::setPaintDevice() will be used.</para>
            <para>Using design metrics makes a layout have a width that is no
            longer dependent on hinting and pixel-rounding. This means that WYSIWYG
            text layout becomes possible because the width scales much more linearly
            based on paintdevice metrics than it would otherwise.</para>
            <para>By default, this property is false.</para>
            <para>This property was introduced in  Qt 4.1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.TextWidth">
            <summary>
            <para>The text width specifies the preferred width for text in the
            document. If the text (or content in general) is wider than the specified
            with it is broken into multiple lines and grows vertically. If the text
            cannot be broken into multiple lines to fit into the specified text width
            it will be larger and the size() and the idealWidth() property will reflect
            that.</para>
            <para>If the text width is set to -1 then the text will not be broken
            into multiple lines unless it is enforced through an explicit line break or
            a new paragraph.</para>
            <para>The default value is -1.</para>
            <para>Setting the text width will also set the page height to -1,
            causing the document to grow or shrink vertically in a continuous way. If
            you want the document layout to break the text into multiple pages then you
            have to set the pageSize property instead.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also size(), idealWidth(), and pageSize().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.IndentWidth">
            <summary>
            <para>Returns the width used for text list and text block
            indenting.</para>
            <para>The indent properties of QTextListFormat and QTextBlockFormat
            specify multiples of this value. The default indent width is 40.</para>
            <para>This property was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DocumentMargin">
            <summary>
            <para>The margin around the document. The default is 4.</para>
            <para>This property was introduced in  Qt 4.5.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DefaultStyleSheet">
            <summary>
            <para>The default style sheet is applied to all newly HTML formatted
            text that is inserted into the document, for example using setHtml() or
            QTextCursor::insertHtml().</para>
            <para>The style sheet needs to be compliant to CSS 2.1 syntax.</para>
            <para>Note: Changing the default style sheet does not have any effect
            to the existing content of the document.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also Supported HTML Subset.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.MaximumBlockCount">
            <summary>
            <para>This property specifies the limit for blocks in the
            document.</para>
            <para>Specifies the maximum number of blocks the document may have. If
            there are more blocks in the document that specified with this property
            blocks are removed from the beginning of the document.</para>
            <para>A negative or zero value specifies that the document may contain
            an unlimited amount of blocks.</para>
            <para>The default value is 0.</para>
            <para>Note that setting this property will apply the limit immediately
            to the document contents.</para>
            <para>Setting this property also disables the undo redo history.</para>
            <para>This property is undefined in documents with tables or
            frames.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DefaultTextOption">
            <summary>
            <para>This property holds the default text option will be set on all
            QTextLayouts in the document.</para>
            <para>When QTextBlocks are created, the defaultTextOption is set on
            their QTextLayout. This allows setting global properties for the document
            such as the default word wrap mode.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.BaseUrl">
            <summary>
            <para>This property holds the base URL used to resolve relative
            resource URLs within the document.</para>
            <para>Resource URLs are resolved to be within the same directory as the
            target of the base URL meaning any portion of the path after the last '/'
            will be ignored.</para>
            <para></para>
            <para> Base URLRelative URLResolved URL</para>
            <para>file:///path/to/content	images/logo.png
            file:///path/to/images/logo.png</para>
            <para>file:///path/to/content/	images/logo.png
            file:///path/to/content/images/logo.png</para>
            <para>file:///path/to/content/index.html	images/logo.png
            file:///path/to/content/images/logo.png</para>
            <para>file:///path/to/content/images/	../images/logo.png
            file:///path/to/content/images/logo.png</para>
            <para></para>
            <para>This property was introduced in  Qt 5.3.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.DefaultCursorMoveStyle">
            <summary>
            <para>The default cursor movement style is used by all QTextCursor
            objects created from the document. The default is
            Qt::LogicalMoveStyle.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also setDefaultCursorMoveStyle().</para>
            <para></para>
            <para>Sets the default cursor movement style to the given style.</para>
            <para>This function was introduced in  Qt 4.8.</para>
            <para>See also defaultCursorMoveStyle().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.Modified">
            <summary>
            <para>This property holds whether the document has been modified by the
            user.</para>
            <para>By default, this property is false.</para>
            <para>See also modificationChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.IsEmpty">
            <summary>
            <para>Returns true if the document is empty; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.IsUndoAvailable">
            <summary>
            <para>Returns true if undo is available; otherwise returns
            false.</para>
            <para>See also isRedoAvailable() and availableUndoSteps().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.IsRedoAvailable">
            <summary>
            <para>Returns true if redo is available; otherwise returns
            false.</para>
            <para>See also isUndoAvailable() and availableRedoSteps().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.AvailableUndoSteps">
            <summary>
            <para>Returns the number of available undo steps.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isUndoAvailable().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.AvailableRedoSteps">
            <summary>
            <para>Returns the number of available redo steps.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also isRedoAvailable().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.Revision">
            <summary>
            <para>Returns the document's revision (if undo is enabled).</para>
            <para>The revision is guaranteed to increase when a document that is
            not modified is edited.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QTextBlock::revision() and isModified().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.RootFrame">
            <summary>
            <para>Returns the document's root frame.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.FirstBlock">
            <summary>
            <para>Returns the document's first text block.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.LastBlock">
            <summary>
            <para>Returns the document's last (valid) text block.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.PageCount">
            <summary>
            <para>returns the number of pages in this document.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.IdealWidth">
            <summary>
            <para>Returns the ideal width of the text document. The ideal width is
            the actually used width of the document without optional alignments taken
            into account. It is always &lt;= size().width().</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also adjustSize() and textWidth.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.Size">
            <summary>
            <para>Returns the actual size of the document. This is equivalent to
            documentLayout()-&gt;documentSize();</para>
            <para>The size of the document can be changed either by setting a text
            width or setting an entire page size.</para>
            <para>Note that the width is always &gt;= pageSize().width().</para>
            <para>By default, for a newly-created, empty document, this property
            contains a configuration-dependent size.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also setTextWidth(), setPageSize(), and idealWidth().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.BlockCount">
            <summary>
            <para>Returns the number of text blocks in the document.</para>
            <para>The value of this property is undefined in documents with tables
            or frames.</para>
            <para>By default, if defined, this property contains a value of
            1.</para>
            <para>This property was introduced in  Qt 4.2.</para>
            <para>See also lineCount() and characterCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.LineCount">
            <summary>
            <para>Returns the number of lines of this document (if the layout
            supports this). Otherwise, this is identical to the number of
            blocks.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also blockCount() and characterCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocument.CharacterCount">
            <summary>
            <para>Returns the number of characters of this document.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also blockCount() and characterAt().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextDocument.MetaInformation">
            <summary>
            <para>This enum describes the different types of meta information that
            can be added to a document.</para>
            <para>See also metaInformation() and setMetaInformation().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextDocument.MetaInformation.DocumentTitle">
            <summary>The title of the document.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.MetaInformation.DocumentUrl">
            <summary>The url of the document. The loadResource() function uses this url as the base when loading relative resources.</summary>
        </member>
        <member name="T:QtGui.QTextDocument.FindFlag">
            <summary>
            <para>This enum describes the options available to QTextDocument's find
            function. The options can be OR-ed together from the following list:</para>
            <para>The FindFlags type is a typedef for QFlags&lt;FindFlag&gt;. It
            stores an OR combination of FindFlag values.</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextDocument.FindFlag.FindBackward">
            <summary>Search backwards instead of forwards.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.FindFlag.FindCaseSensitively">
            <summary>By default find works case insensitive. Specifying this option changes the behaviour to a case sensitive find operation.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.FindFlag.FindWholeWords">
            <summary>Makes find match only complete words.</summary>
        </member>
        <member name="T:QtGui.QTextDocument.ResourceType">
            <summary>
            <para>This enum describes the types of resources that can be loaded by
            QTextDocument's loadResource() function.</para>
            <para>See also loadResource().</para>
            </summary>
        </member>
        <member name="F:QtGui.QTextDocument.ResourceType.HtmlResource">
            <summary>The resource contains HTML.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.ResourceType.ImageResource">
            <summary>The resource contains image data. Currently supported data types are QVariant::Pixmap and QVariant::Image. If the corresponding variant is of type QVariant::ByteArray then Qt attempts to load the image using QImage::loadFromData. QVariant::Icon is currently not supported. The icon needs to be converted to one of the supported types first, for example using QIcon::pixmap.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.ResourceType.StyleSheetResource">
            <summary>The resource contains CSS.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.ResourceType.UserResource">
            <summary>The first available value for user defined resource types.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.Stacks.UndoStack">
            <summary>The undo stack.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.Stacks.RedoStack">
            <summary>The redo stack.</summary>
        </member>
        <member name="F:QtGui.QTextDocument.Stacks.UndoAndRedoStacks">
            <summary>Both the undo and redo stacks.</summary>
        </member>
        <member name="T:QtGui.QAbstractTextDocumentLayout">
            <summary>
            <para>The QAbstractTextDocumentLayout class is an abstract base class
            used to implement custom layouts for QTextDocuments.</para>
            </summary>
            <remarks>
            <para>The standard layout provided by Qt can handle simple word
            processing including inline images, lists and tables.</para>
            <para>Some applications, e.g., a word processor or a DTP application
            might need more features than the ones provided by Qt's layout engine, in
            which case you can subclass QAbstractTextDocumentLayout to provide custom
            layout behavior for your text documents.</para>
            <para>An instance of the QAbstractTextDocumentLayout subclass can be
            installed on a QTextDocument object with the setDocumentLayout()
            function.</para>
            <para>You can insert custom objects into a QTextDocument; see the
            QTextObjectInterface class description for details.</para>
            <para></para>
            <para>See also QTextObjectInterface.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Creates a new text document layout for the given document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.Draw(QtGui.QPainter,QtGui.QAbstractTextDocumentLayout.PaintContext)">
            <summary>
            <para>Draws the layout with the given painter using the given
            context.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.HitTest(QtCore.QPointF,QtCore.Qt.HitTestAccuracy)">
            <summary>
            <para>Returns the cursor position for the given point with the
            specified accuracy. Returns -1 if no valid cursor position was
            found.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.AnchorAt(QtCore.QPointF)">
            <summary>
            <para>Returns the reference of the anchor the given position, or an
            empty string if no anchor exists at that point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.FrameBoundingRect(QtGui.QTextFrame)">
            <summary>
            <para>Returns the bounding rectangle of frame.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.BlockBoundingRect(QtGui.QTextBlock)">
            <summary>
            <para>Returns the bounding rectangle of block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.RegisterHandler(System.Int32,QtCore.QObject)">
            <summary>
            <para>Registers the given component as a handler for items of the given
            objectType.</para>
            <para>Note: registerHandler() has to be called once for each object
            type. This means that there is only one handler for multiple replacement
            characters of the same object type.</para>
            <para>The text document layout does not take ownership of
            component.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.UnregisterHandler(System.Int32,QtCore.QObject)">
            <summary>
            <para>Unregisters the given component as a handler for items of the
            given objectType, or any handler if the component is not specified.</para>
            <para>This function was introduced in  Qt 5.2.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.HandlerForObject(System.Int32)">
            <summary>
            <para>Returns a handler for objects of the given objectType.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.DocumentChanged(System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>This function is called whenever the contents of the document
            change. A change occurs when text is inserted, removed, or a combination of
            these two. The change is specified by position, charsRemoved, and
            charsAdded corresponding to the starting character position of the change,
            the number of characters removed from the document, and the number of
            characters added.</para>
            <para>For example, when inserting the text &quot;Hello&quot; into an
            empty document, charsRemoved would be 0 and charsAdded would be 5 (the
            length of the string).</para>
            <para>Replacing text is a combination of removing and inserting. For
            example, if the text &quot;Hello&quot; gets replaced by &quot;Hi&quot;,
            charsRemoved would be 5 and charsAdded would be 2.</para>
            <para>For subclasses of QAbstractTextDocumentLayout, this is the
            central function where a large portion of the work to lay out and position
            document contents is done.</para>
            <para>For example, in a subclass that only arranges blocks of text, an
            implementation of this function would have to do the following:</para>
            <para></para>
            <para>Determine the list of changed QTextBlock(s) using the parameters
            provided.</para>
            <para>Each QTextBlock object's corresponding QTextLayout object needs
            to be processed. You can access the QTextBlock's layout using the
            QTextBlock::layout() function. This processing should take the document's
            page size into consideration.</para>
            <para>If the total number of pages changed, the pageCountChanged()
            signal should be emitted.</para>
            <para>If the total size changed, the documentSizeChanged() signal
            should be emitted.</para>
            <para>The update() signal should be emitted to schedule a repaint of
            areas in the layout that require repainting.</para>
            <para></para>
            <para>See also QTextLayout.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.ResizeInlineObject(QtGui.QTextInlineObject,System.Int32,QtGui.QTextFormat)">
            <summary>
            <para>Sets the size of the inline object item corresponding to the text
            format.</para>
            <para>posInDocument specifies the position of the object within the
            document.</para>
            <para>The default implementation resizes the item to the size returned
            by the object handler's intrinsicSize() function. This function is called
            only within Qt. Subclasses can reimplement this function to customize the
            resizing of inline objects.</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.PositionInlineObject(QtGui.QTextInlineObject,System.Int32,QtGui.QTextFormat)">
            <summary>
            <para>Lays out the inline object item using the given text
            format.</para>
            <para>posInDocument specifies the position of the object within the
            document.</para>
            <para>The default implementation does nothing. This function is called
            only within Qt. Subclasses can reimplement this function to customize the
            position of inline objects.</para>
            <para>See also drawInlineObject().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.DrawInlineObject(QtGui.QPainter,QtCore.QRectF,QtGui.QTextInlineObject,System.Int32,QtGui.QTextFormat)">
            <summary>
            <para>This function is called to draw the inline object, object, with
            the given painter within the rectangle specified by rect using the
            specified text format.</para>
            <para>posInDocument specifies the position of the object within the
            document.</para>
            <para>The default implementation calls drawObject() on the object
            handlers. This function is called only within Qt. Subclasses can
            reimplement this function to customize the drawing of inline
            objects.</para>
            <para>See also draw().</para>
            </summary>
        </member>
        <member name="M:QtGui.QAbstractTextDocumentLayout.Format(System.Int32)">
            <summary>
            <para>Returns the character format that is applicable at the given
            position.</para>
            </summary>
        </member>
        <member name="E:QtGui.QAbstractTextDocumentLayout.Update">
            <summary>
            <para>This signal is emitted when the rectangle rect has been updated.</para>
            <para>Subclasses of QAbstractTextDocumentLayout should emit this signal when the layout of the contents change in order to repaint.</para>
            </summary>
        </member>
        <member name="E:QtGui.QAbstractTextDocumentLayout.UpdateBlock">
            <summary>
            <para>This signal is emitted when the specified block has been updated.</para>
            <para>Subclasses of QAbstractTextDocumentLayout should emit this signal when the layout of block has changed in order to repaint.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="E:QtGui.QAbstractTextDocumentLayout.DocumentSizeChanged">
            <summary>
            <para>This signal is emitted when the size of the document layout changes to newSize.</para>
            <para>Subclasses of QAbstractTextDocumentLayout should emit this signal when the document's entire layout size changes. This signal is useful for widgets that display text documents since it enables them to update their scroll bars correctly.</para>
            <para>See also documentSize().</para>
            </summary>
        </member>
        <member name="E:QtGui.QAbstractTextDocumentLayout.PageCountChanged">
            <summary>
            <para>This signal is emitted when the number of pages in the layout changes; newPages is the updated page count.</para>
            <para>Subclasses of QAbstractTextDocumentLayout should emit this signal when the number of pages in the layout has changed. Changes to the page count are caused by changes to the layout or the document content itself.</para>
            <para>See also pageCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.PaintDevice">
            <summary>
            <para>Returns the paint device used to render the document's
            layout.</para>
            <para>See also setPaintDevice().</para>
            <para></para>
            <para>Sets the paint device used for rendering the document's layout to
            the given device.</para>
            <para>See also paintDevice().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.PageCount">
            <summary>
            <para>Returns the number of pages contained in the layout.</para>
            <para>See also pageCountChanged().</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.DocumentSize">
            <summary>
            <para>Returns the total size of the document's layout.</para>
            <para>This information can be used by display widgets to update their
            scroll bars correctly.</para>
            <para>See also documentSizeChanged() and
            QTextDocument::pageSize.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.Document">
            <summary>
            <para>Returns the text document that this layout is operating
            on.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAbstractTextDocumentLayout.Selection">
            <summary>
            <para>The QAbstractTextDocumentLayout::Selection class is a convenience
            class defining the parameters of a selection.</para>
            </summary>
            <remarks>
            <para>A selection can be used to specify a part of a document that
            should be highlighted when drawing custom layouts for QTextDocuments with
            the QAbstractTextDocumentLayout::draw() function. It is specified using
            cursor and a format.</para>
            <para></para>
            <para>See also QAbstractTextDocumentLayout and PaintContext.</para>
            </remarks>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.Selection.Cursor">
            <summary>
            <para>This variable holds the selection's cursor.</para>
            <para>The default value is a null cursor.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.Selection.Format">
            <summary>
            <para>This variable holds the format of the selection.</para>
            <para>The default value is QTextFormat::InvalidFormat.</para>
            </summary>
        </member>
        <member name="T:QtGui.QAbstractTextDocumentLayout.PaintContext">
            <summary>
            <para>The QAbstractTextDocumentLayout::PaintContext class is a
            convenience class defining the parameters used when painting a document's
            layout.</para>
            </summary>
            <remarks>
            <para>A paint context is used when rendering custom layouts for
            QTextDocuments with the QAbstractTextDocumentLayout::draw() function. It is
            specified by a cursor position, default text color, clip rectangle and a
            collection of selections.</para>
            <para></para>
            <para>See also QAbstractTextDocumentLayout.</para>
            </remarks>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.PaintContext.CursorPosition">
            <summary>
            <para>This variable holds the position within the document, where the
            cursor line should be drawn.</para>
            <para>The default value is -1.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.PaintContext.Palette">
            <summary>
            <para>This variable holds the default color that is used for the text,
            when no color is specified.</para>
            <para>The default value is the application's default palette.</para>
            </summary>
        </member>
        <member name="P:QtGui.QAbstractTextDocumentLayout.PaintContext.Clip">
            <summary>
            <para>This variable holds a hint to the layout specifying the area
            around paragraphs, frames or text require painting.</para>
            <para>Everything outside of this rectangle does not need to be
            painted.</para>
            <para>Specifying a clip rectangle can speed up drawing of large
            documents significantly. Note that the clip rectangle is in document
            coordinates (not in viewport coordinates). It is not a substitute for a
            clip region set on the painter but merely a hint.</para>
            <para>The default value is a null rectangle indicating everything needs
            to be painted.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextObjectInterface">
            <summary>
            <para>The QTextObjectInterface class allows drawing of custom text
            objects in QTextDocuments.</para>
            </summary>
            <remarks>
            <para>A text object describes the structure of one or more elements in
            a text document; for instance, images imported from HTML are implemented
            using text objects. A text object knows how to lay out and draw its
            elements when a document is being rendered.</para>
            <para>Qt allows custom text objects to be inserted into a document by
            registering a custom object type with QTextCharFormat. A
            QTextObjectInterface must also be implemented for this type and be
            registered with the QAbstractTextDocumentLayout of the document. When the
            object type is encountered while rendering a QTextDocument, the
            intrinsicSize() and drawObject() functions of the interface are
            called.</para>
            <para>The following list explains the required steps of inserting a
            custom text object into a document:</para>
            <para></para>
            <para>Choose an objectType. The objectType is an integer with a value
            greater or equal to QTextFormat::UserObject.</para>
            <para>Create a QTextCharFormat object and set the object type to the
            chosen type using the setObjectType() function.</para>
            <para>Implement the QTextObjectInterface class.</para>
            <para>Call QAbstractTextDocumentLayout::registerHandler() with an
            instance of your QTextObjectInterface subclass to register your object
            type.</para>
            <para>Insert QChar::ObjectReplacementCharacter with the aforementioned
            QTextCharFormat of the chosen object type into the document. As mentioned,
            the functions of QTextObjectInterface intrinsicSize() and drawObject() will
            then be called with the QTextFormat as parameter whenever the replacement
            character is encountered.</para>
            <para></para>
            <para>A class implementing a text object needs to inherit both QObject
            and QTextObjectInterface. QObject must be the first class inherited. For
            instance:</para>
            <para>class SvgTextObject : public QObject, public
            QTextObjectInterface</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>    Q_INTERFACES(QTextObjectInterface)</para>
            <para>The data of a text object is usually stored in the
            QTextCharFormat using QTextCharFormat::setProperty(), and then retrieved
            with QTextCharFormat::property().</para>
            <para>Warning: Copy and Paste operations ignore custom text
            objects.</para>
            <para></para>
            <para>See also Text Object Example, QTextCharFormat, and
            QTextLayout.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextObjectInterface.IntrinsicSize(QtGui.QTextDocument,System.Int32,QtGui.QTextFormat)">
            <summary>
            <para>The intrinsicSize() function returns the size of the text object
            represented by format in the given document (doc) at the given position
            (posInDocument).</para>
            <para>The size calculated will be used for subsequent calls to
            drawObject() for this format.</para>
            <para>See also drawObject().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextObjectInterface.DrawObject(QtGui.QPainter,QtCore.QRectF,QtGui.QTextDocument,System.Int32,QtGui.QTextFormat)">
            <summary>
            <para>Draws this text object using the specified painter.</para>
            <para>The size of the rectangle, rect, to draw in is the size
            previously calculated by intrinsicSize(). The rectangles position is
            relative to the painter.</para>
            <para>You also get the document (doc) and the position (posInDocument)
            of the format in that document.</para>
            <para>See also intrinsicSize().</para>
            </summary>
        </member>
        <member name="T:QtGui.QStaticText">
            <summary>
            <para>The QStaticText class enables optimized drawing of text when the
            text and its layout is updated rarely.</para>
            </summary>
            <remarks>
            <para>QStaticText provides a way to cache layout data for a block of
            text so that it can be drawn more efficiently than by using
            QPainter::drawText() in which the layout information is recalculated with
            every call.</para>
            <para>The class primarily provides an optimization for cases where the
            text, its font and the transformations on the painter are static over
            several paint events. If the text or its layout is changed for every
            iteration, QPainter::drawText() is the more efficient alternative, since
            the static text's layout would have to be recalculated to take the new
            state into consideration.</para>
            <para>Translating the painter will not cause the layout of the text to
            be recalculated, but will cause a very small performance impact on
            drawStaticText(). Altering any other parts of the painter's transformation
            or the painter's font will cause the layout of the static text to be
            recalculated. This should be avoided as often as possible to maximize the
            performance benefit of using QStaticText.</para>
            <para>In addition, only affine transformations are supported by
            drawStaticText(). Calling drawStaticText() on a projected painter will
            perform slightly worse than using the regular drawText() call, so this
            should be avoided.</para>
            <para>class MyWidget: public QWidget</para>
            <para>{</para>
            <para>public:</para>
            <para>    MyWidget(QWidget *parent = 0) : QWidget(parent),
            m_staticText(&quot;This is static text&quot;)</para>
            <para></para>
            <para>protected:</para>
            <para>    void paintEvent(QPaintEvent *)</para>
            <para>    {</para>
            <para>        QPainter painter(this);</para>
            <para>        painter.drawStaticText(0, 0, m_staticText);</para>
            <para>    }</para>
            <para></para>
            <para>private:</para>
            <para>    QStaticText m_staticText;</para>
            <para>};</para>
            <para>The QStaticText class can be used to mimic the behavior of
            QPainter::drawText() to a specific point with no boundaries, and also when
            QPainter::drawText() is called with a bounding rectangle.</para>
            <para>If a bounding rectangle is not required, create a QStaticText
            object without setting a preferred text width. The text will then occupy a
            single line.</para>
            <para>If you set a text width on the QStaticText object, this will
            bound the text. The text will be formatted so that no line exceeds the
            given width. The text width set for QStaticText will not automatically be
            used for clipping. To achieve clipping in addition to line breaks, use
            QPainter::setClipRect(). The position of the text is decided by the
            argument passed to QPainter::drawStaticText() and can change from call to
            call with a minimal impact on performance.</para>
            <para>For extra convenience, it is possible to apply formatting to the
            text using the HTML subset supported by QTextDocument. QStaticText will
            attempt to guess the format of the input text using Qt::mightBeRichText(),
            and interpret it as rich text if this function returns true. To force
            QStaticText to display its contents as either plain text or rich text, use
            the function QStaticText::setTextFormat() and pass in, respectively,
            Qt::PlainText and Qt::RichText.</para>
            <para>QStaticText can only represent text, so only HTML tags which
            alter the layout or appearance of the text will be respected. Adding an
            image to the input HTML, for instance, will cause the image to be included
            as part of the layout, affecting the positions of the text glyphs, but it
            will not be displayed. The result will be an empty area the size of the
            image in the output. Similarly, using tables will cause the text to be laid
            out in table format, but the borders will not be drawn.</para>
            <para>If it's the first time the static text is drawn, or if the static
            text, or the painter's font has been altered since the last time it was
            drawn, the text's layout has to be recalculated. On some paint engines,
            changing the matrix of the painter will also cause the layout to be
            recalculated. In particular, this will happen for any engine except for the
            OpenGL2 paint engine. Recalculating the layout will impose an overhead on
            the QPainter::drawStaticText() call where it occurs. To avoid this overhead
            in the paint event, you can call prepare() ahead of time to ensure that the
            layout is calculated.</para>
            <para></para>
            <para>See also QPainter::drawText(), QPainter::drawStaticText(),
            QTextLayout, and QTextDocument.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QStaticText.#ctor">
            <summary>
            <para>Constructs an empty QStaticText</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.#ctor(System.String)">
            <summary>
            <para>Constructs a QStaticText object with the given text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.#ctor(QtGui.QStaticText)">
            <summary>
            <para>Constructs a QStaticText object which is a copy of other.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.Swap(QtGui.QStaticText)">
            <summary>
            <para>Swaps this static text instance with other. This function is very
            fast and never fails.</para>
            <para>This function was introduced in  Qt 5.0.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.Prepare(QtGui.QTransform,QtGui.QFont)">
            <summary>
            <para>Prepares the QStaticText object for being painted with the given
            matrix and the given font to avoid overhead when the actual
            drawStaticText() call is made.</para>
            <para>When drawStaticText() is called, the layout of the QStaticText
            will be recalculated if any part of the QStaticText object has changed
            since the last time it was drawn. It will also be recalculated if the
            painter's font is not the same as when the QStaticText was last drawn, or,
            on any other paint engine than the OpenGL2 engine, if the painter's matrix
            has been altered since the static text was last drawn.</para>
            <para>To avoid the overhead of creating the layout the first time you
            draw the QStaticText after making changes, you can use the prepare()
            function and pass in the matrix and font you expect to use when drawing the
            text.</para>
            <para>See also QPainter::setFont() and QPainter::setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.op_Equality(QtGui.QStaticText,QtGui.QStaticText)">
            <summary>
            <para>Compares other to this QStaticText. Returns true if the texts,
            fonts and text widths are equal.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.op_Inequality(QtGui.QStaticText,QtGui.QStaticText)">
            <summary>
            <para>Compares other to this QStaticText. Returns true if the texts,
            fonts or maximum sizes are different.</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.Prepare">
            <summary>
            <para>Prepares the QStaticText object for being painted with the given
            matrix and the given font to avoid overhead when the actual
            drawStaticText() call is made.</para>
            <para>When drawStaticText() is called, the layout of the QStaticText
            will be recalculated if any part of the QStaticText object has changed
            since the last time it was drawn. It will also be recalculated if the
            painter's font is not the same as when the QStaticText was last drawn, or,
            on any other paint engine than the OpenGL2 engine, if the painter's matrix
            has been altered since the static text was last drawn.</para>
            <para>To avoid the overhead of creating the layout the first time you
            draw the QStaticText after making changes, you can use the prepare()
            function and pass in the matrix and font you expect to use when drawing the
            text.</para>
            <para>See also QPainter::setFont() and QPainter::setMatrix().</para>
            </summary>
        </member>
        <member name="M:QtGui.QStaticText.Prepare(QtGui.QTransform)">
            <summary>
            <para>Prepares the QStaticText object for being painted with the given
            matrix and the given font to avoid overhead when the actual
            drawStaticText() call is made.</para>
            <para>When drawStaticText() is called, the layout of the QStaticText
            will be recalculated if any part of the QStaticText object has changed
            since the last time it was drawn. It will also be recalculated if the
            painter's font is not the same as when the QStaticText was last drawn, or,
            on any other paint engine than the OpenGL2 engine, if the painter's matrix
            has been altered since the static text was last drawn.</para>
            <para>To avoid the overhead of creating the layout the first time you
            draw the QStaticText after making changes, you can use the prepare()
            function and pass in the matrix and font you expect to use when drawing the
            text.</para>
            <para>See also QPainter::setFont() and QPainter::setMatrix().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.Text">
            <summary>
            <para>Returns the text of the QStaticText.</para>
            <para>See also setText().</para>
            <para></para>
            <para>Sets the text of the QStaticText to text.</para>
            <para>Note: This function will cause the layout of the text to require
            recalculation.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.TextFormat">
            <summary>
            <para>Returns the text format of the QStaticText.</para>
            <para>See also setTextFormat(), setText(), and text().</para>
            <para></para>
            <para>Sets the text format of the QStaticText to textFormat. If
            textFormat is set to Qt::AutoText (the default), the format of the text
            will try to be determined using the function Qt::mightBeRichText(). If the
            text format is Qt::PlainText, then the text will be displayed as is,
            whereas it will be interpreted as HTML if the format is Qt::RichText. HTML
            tags that alter the font of the text, its color, or its layout are
            supported by QStaticText.</para>
            <para>Note: This function will cause the layout of the text to require
            recalculation.</para>
            <para>See also textFormat(), setText(), and text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.TextWidth">
            <summary>
            <para>Returns the preferred width for this QStaticText.</para>
            <para>See also setTextWidth().</para>
            <para></para>
            <para>Sets the preferred width for this QStaticText. If the text is
            wider than the specified width, it will be broken into multiple lines and
            grow vertically. If the text cannot be split into multiple lines, it will
            be larger than the specified textWidth.</para>
            <para>Setting the preferred text width to a negative number will cause
            the text to be unbounded.</para>
            <para>Use size() to get the actual size of the text.</para>
            <para>Note: This function will cause the layout of the text to require
            recalculation.</para>
            <para>See also textWidth() and size().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.TextOption">
            <summary>
            <para>Returns the current text option used to control the layout
            process.</para>
            <para>See also setTextOption().</para>
            <para></para>
            <para>Sets the text option structure that controls the layout process
            to the given textOption.</para>
            <para>See also textOption().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.performanceHint">
            <summary>
            <para>Returns which performance hint is set for the QStaticText.</para>
            <para>See also setPerformanceHint().</para>
            <para></para>
            <para>Sets the performance hint of the QStaticText according to the
            performanceHint provided. The performanceHint is used to customize how much
            caching is done internally to improve performance.</para>
            <para>The default is QStaticText::ModerateCaching.</para>
            <para>Note: This function will cause the layout of the text to require
            recalculation.</para>
            <para>See also performanceHint().</para>
            </summary>
        </member>
        <member name="P:QtGui.QStaticText.Size">
            <summary>
            <para>Returns the size of the bounding rect for this
            QStaticText.</para>
            <para>See also textWidth().</para>
            </summary>
        </member>
        <member name="T:QtGui.QStaticText.PerformanceHint">
            <summary>
            <para>This enum the different performance hints that can be set on the
            QStaticText. These hints can be used to indicate that the QStaticText
            should use additional caches, if possible, to improve performance at the
            expense of memory. In particular, setting the performance hint
            AggressiveCaching on the QStaticText will improve performance when using
            the OpenGL graphics system or when drawing to a QOpenGLWidget.</para>
            </summary>
        </member>
        <member name="F:QtGui.QStaticText.PerformanceHint.ModerateCaching">
            <summary>Do basic caching for high performance at a low memory cost.</summary>
        </member>
        <member name="F:QtGui.QStaticText.PerformanceHint.AggressiveCaching">
            <summary>Use additional caching when available. This may improve performance at a higher memory cost.</summary>
        </member>
        <member name="T:QtGui.QTextObject">
            <summary>
            <para>The QTextObject class is a base class for different kinds of
            objects that can group parts of a QTextDocument together.</para>
            </summary>
            <remarks>
            <para>The common grouping text objects are lists (QTextList), frames
            (QTextFrame), and tables (QTextTable). A text object has an associated
            format() and document().</para>
            <para>There are essentially two kinds of text objects: those that are
            used with blocks (block formats), and those that are used with characters
            (character formats). The first kind are derived from QTextBlockGroup, and
            the second kind from QTextFrame.</para>
            <para>You rarely need to use this class directly. When creating custom
            text objects, you will also need to reimplement
            QTextDocument::createObject() which acts as a factory method for creating
            text objects.</para>
            <para></para>
            <para>See also QTextDocument and Text Object Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextObject.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Creates a new QTextObject for the given document.</para>
            <para>Warning: This function should never be called directly, but only
            from QTextDocument::createObject().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextObject.Format">
            <summary>
            <para>Returns the text object's format.</para>
            <para>See also setFormat() and document().</para>
            <para></para>
            <para>Sets the text object's format.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextObject.FormatIndex">
            <summary>
            <para>Returns the index of the object's format in the document's
            internal list of formats.</para>
            <para>See also QTextDocument::allFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextObject.Document">
            <summary>
            <para>Returns the document this object belongs to.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextObject.ObjectIndex">
            <summary>
            <para>Returns the object index of this object. This can be used
            together with QTextFormat::setObjectIndex().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextBlockGroup">
            <summary>
            <para>The QTextBlockGroup class provides a container for text blocks
            within a QTextDocument.</para>
            </summary>
            <remarks>
            <para>Block groups can be used to organize blocks of text within a
            document. They maintain an up-to-date list of the text blocks that belong
            to them, even when text blocks are being edited.</para>
            <para>Each group has a parent document which is specified when the
            group is constructed.</para>
            <para>Text blocks can be inserted into a group with blockInserted(),
            and removed with blockRemoved(). If a block's format is changed,
            blockFormatChanged() is called.</para>
            <para>The list of blocks in the group is returned by blockList(). Note
            that the blocks in the list are not necessarily adjacent elements in the
            document; for example, the top-level items in a multi-level list will be
            separated by the items in lower levels of the list.</para>
            <para></para>
            <para>See also QTextBlock and QTextDocument.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextBlockGroup.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Creates a new new block group for the given document.</para>
            <para>Warning: This function should only be called from
            QTextDocument::createObject().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlockGroup.BlockInserted(QtGui.QTextBlock)">
            <summary>
            <para>Appends the given block to the end of the group.</para>
            <para>Warning: If you reimplement this function you must call the base
            class implementation.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlockGroup.BlockRemoved(QtGui.QTextBlock)">
            <summary>
            <para>Removes the given block from the group; the block itself is not
            deleted, it simply isn't a member of this group anymore.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlockGroup.BlockFormatChanged(QtGui.QTextBlock)">
            <summary>
            <para>This function is called whenever the specified block of text is
            changed. The text block is a member of this group.</para>
            <para>The base class implementation does nothing.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFrame">
            <summary>
            <para>The QTextFrame class represents a frame in a
            QTextDocument.</para>
            </summary>
            <remarks>
            <para>Text frames provide structure for the text in a document. They
            are used as generic containers for other document elements. Frames are
            usually created by using QTextCursor::insertFrame().</para>
            <para>Frames can be used to create hierarchical structures in rich text
            documents. Each document has a root frame (QTextDocument::rootFrame()), and
            each frame beneath the root frame has a parent frame and a (possibly empty)
            list of child frames. The parent frame can be found with parentFrame(), and
            the childFrames() function provides a list of child frames.</para>
            <para>Each frame contains at least one text block to enable text
            cursors to insert new document elements within. As a result, the
            QTextFrame::iterator class is used to traverse both the blocks and child
            frames within a given frame. The first and last child elements in the frame
            can be found with begin() and end().</para>
            <para>A frame also has a format (specified using QTextFrameFormat)
            which can be set with setFormat() and read with format().</para>
            <para>Text cursors can be obtained that point to the first and last
            valid cursor positions within a frame; use the firstCursorPosition() and
            lastCursorPosition() functions for this. The frame's extent in the document
            can be found with firstPosition() and lastPosition().</para>
            <para>You can iterate over a frame's contents using the
            QTextFrame::iterator class: this provides read-only access to its internal
            list of text blocks and child frames.</para>
            <para></para>
            <para>See also QTextCursor and QTextDocument.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextFrame.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Creates a new empty frame for the text document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Begin">
            <summary>
            <para>Returns an iterator pointing to the first document element inside
            the frame. Please see the document STL-style-Iterators for more
            information.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.End">
            <summary>
            <para>Returns an iterator pointing to the position past the last
            document element inside the frame. Please see the document STL-Style
            Iterators for more information.</para>
            <para>See also begin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.FrameFormat">
            <summary>
            <para>Returns the frame's format.</para>
            <para>See also setFrameFormat().</para>
            <para></para>
            <para>Sets the frame's format.</para>
            <para>See also frameFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.FirstCursorPosition">
            <summary>
            <para>Returns the first cursor position inside the frame.</para>
            <para>See also lastCursorPosition(), firstPosition(), and
            lastPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.LastCursorPosition">
            <summary>
            <para>Returns the last cursor position inside the frame.</para>
            <para>See also firstCursorPosition(), firstPosition(), and
            lastPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.FirstPosition">
            <summary>
            <para>Returns the first document position inside the frame.</para>
            <para>See also lastPosition(), firstCursorPosition(), and
            lastCursorPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.LastPosition">
            <summary>
            <para>Returns the last document position inside the frame.</para>
            <para>See also firstPosition(), firstCursorPosition(), and
            lastCursorPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.ParentFrame">
            <summary>
            <para>Returns the frame's parent frame. If the frame is the root frame
            of a document, this will return 0.</para>
            <para>See also childFrames() and QTextDocument::rootFrame().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFrame.Iterator">
            <summary>
            <para>The QTextBlock::iterator class provides an iterator for reading
            the contents of a QTextBlock.</para>
            </summary>
            <remarks>
            <para>A block consists of a sequence of text fragments. This class
            provides a way to iterate over these, and read their contents. It does not
            provide a way to modify the internal structure or contents of the
            block.</para>
            <para>An iterator can be constructed and used to access the fragments
            within a text block in the following way:</para>
            <para>    QTextBlock::iterator it;</para>
            <para>    for (it = currentBlock.begin(); !(it.atEnd()); ++it) {</para>
            <para>        QTextFragment currentFragment = it.fragment();</para>
            <para>        if (currentFragment.isValid())</para>
            <para>            processFragment(currentFragment);</para>
            <para>    }</para>
            <para></para>
            <para>See also QTextFragment.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.#ctor">
            <summary>
            <para>Constructs an invalid iterator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.#ctor(QtGui.QTextFrame.Iterator)">
            <summary>
            <para>Copy constructor. Constructs a copy of the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.op_Equality(QtGui.QTextFrame.Iterator,QtGui.QTextFrame.Iterator)">
            <summary>
            <para>Retuns true if the iterator is the same as the other iterator;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.op_Inequality(QtGui.QTextFrame.Iterator,QtGui.QTextFrame.Iterator)">
            <summary>
            <para>Retuns true if the iterator is different from the other iterator;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.op_Increment(QtGui.QTextFrame.Iterator)">
            <summary>
            <para>Moves the iterator to the next frame or block.</para>
            <para>See also currentBlock() and currentFrame().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFrame.Iterator.op_Decrement(QtGui.QTextFrame.Iterator)">
            <summary>
            <para>Moves the iterator to the previous frame or block.</para>
            <para>See also currentBlock() and currentFrame().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.Iterator.ParentFrame">
            <summary>
            <para>Returns the parent frame of the current frame.</para>
            <para>See also currentFrame() and QTextFrame::parentFrame().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.Iterator.CurrentFrame">
            <summary>
            <para>Returns the current frame pointed to by the iterator, or 0 if the
            iterator currently points to a block.</para>
            <para>See also currentBlock().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.Iterator.CurrentBlock">
            <summary>
            <para>Returns the current block the iterator points to. If the iterator
            points to a child frame, the returned block is invalid.</para>
            <para>See also currentFrame().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFrame.Iterator.AtEnd">
            <summary>
            <para>Returns true if the current item is the last item in the text
            frame.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextBlockUserData">
            <summary>
            <para>The QTextBlockUserData class is used to associate custom data
            with blocks of text.</para>
            </summary>
            <remarks>
            <para>QTextBlockUserData provides an abstract interface for container
            classes that are used to associate application-specific user data with text
            blocks in a QTextDocument.</para>
            <para>Generally, subclasses of this class provide functions to allow
            data to be stored and retrieved, and instances are attached to blocks of
            text using QTextBlock::setUserData(). This makes it possible to store
            additional data per text block in a way that can be retrieved safely by the
            application.</para>
            <para>Each subclass should provide a reimplementation of the destructor
            to ensure that any private data is automatically cleaned up when user data
            objects are deleted.</para>
            <para></para>
            <para>See also QTextBlock.</para>
            </remarks>
        </member>
        <member name="T:QtGui.QTextBlock">
            <summary>
            <para>The QTextBlock class provides a container for text fragments in a
            QTextDocument.</para>
            </summary>
            <remarks>
            <para>A text block encapsulates a block or paragraph of text in a
            QTextDocument. QTextBlock provides read-only access to the block/paragraph
            structure of QTextDocuments. It is mainly of use if you want to implement
            your own layouts for the visual representation of a QTextDocument, or if
            you want to iterate over a document and write out the contents in your own
            custom format.</para>
            <para>Text blocks are created by their parent documents. If you need to
            create a new text block, or modify the contents of a document while
            examining its contents, use the cursor-based interface provided by
            QTextCursor instead.</para>
            <para>Each text block is located at a specific position() in a
            document(). The contents of the block can be obtained by using the text()
            function. The length() function determines the block's size within the
            document (including formatting characters). The visual properties of the
            block are determined by its text layout(), its charFormat(), and its
            blockFormat().</para>
            <para>The next() and previous() functions enable iteration over
            consecutive valid blocks in a document under the condition that the
            document is not modified by other means during the iteration process. Note
            that, although blocks are returned in sequence, adjacent blocks may come
            from different places in the document structure. The validity of a block
            can be determined by calling isValid().</para>
            <para>QTextBlock provides comparison operators to make it easier to
            work with blocks: operator==() compares two block for equality,
            operator!=() compares two blocks for inequality, and operator&lt;()
            determines whether a block precedes another in the same document.</para>
            <para></para>
            <para></para>
            <para>See also QTextBlockFormat, QTextCharFormat, and
            QTextFragment.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextBlock.#ctor(QtGui.QTextBlock)">
            <summary>
            <para>Copies the other text block's attributes to this text
            block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.op_Equality(QtGui.QTextBlock,QtGui.QTextBlock)">
            <summary>
            <para>Returns true if this text block is the same as the other text
            block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.op_Inequality(QtGui.QTextBlock,QtGui.QTextBlock)">
            <summary>
            <para>Returns true if this text block is different from the other text
            block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.op_LessThan(QtGui.QTextBlock,QtGui.QTextBlock)">
            <summary>
            <para>Returns true if this text block occurs before the other text
            block in the document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Contains(System.Int32)">
            <summary>
            <para>Returns true if the given position is located within the text
            block; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.ClearLayout">
            <summary>
            <para>Clears the QTextLayout that is used to lay out and display the
            block's contents.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also layout().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Begin">
            <summary>
            <para>Returns a text block iterator pointing to the beginning of the
            text block.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.End">
            <summary>
            <para>Returns a text block iterator pointing to the end of the text
            block.</para>
            <para>See also begin(), next(), and previous().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.UserData">
            <summary>
            <para>Returns a pointer to a QTextBlockUserData object if previously
            set with setUserData() or a null pointer.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setUserData().</para>
            <para></para>
            <para>Attaches the given data object to the text block.</para>
            <para>QTextBlockUserData can be used to store custom settings. The
            ownership is passed to the underlying text document, i.e. the provided
            QTextBlockUserData object will be deleted if the corresponding text block
            gets deleted. The user data object is not stored in the undo history, so it
            will not be available after undoing the deletion of a text block.</para>
            <para>For example, if you write a programming editor in an IDE, you may
            want to let your user set breakpoints visually in your code for an
            integrated debugger. In a programming editor a line of text usually
            corresponds to one QTextBlock. The QTextBlockUserData interface allows the
            developer to store data for each QTextBlock, like for example in which
            lines of the source code the user has a breakpoint set. Of course this
            could also be stored externally, but by storing it inside the
            QTextDocument, it will for example be automatically deleted when the user
            deletes the associated line. It's really just a way to store custom
            information in the QTextDocument without using custom properties in
            QTextFormat which would affect the undo/redo stack.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also userData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.UserState">
            <summary>
            <para>Returns the integer value previously set with setUserState() or
            -1.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also setUserState().</para>
            <para></para>
            <para>Stores the specified state integer value in the text block. This
            may be useful for example in a syntax highlighter to store a text parsing
            state.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also userState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Revision">
            <summary>
            <para>Returns the blocks revision.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setRevision() and QTextDocument::revision().</para>
            <para></para>
            <para>Sets a blocks revision to rev.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also revision() and QTextDocument::revision().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Visible">
            <summary>
            <para>Returns true if the block is visible; otherwise returns
            false.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also setVisible().</para>
            <para></para>
            <para>Sets the block's visibility to visible.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also isVisible().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.LineCount">
            <summary>
            <para>Returns the line count. Not all document layouts support this
            feature.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also setLineCount().</para>
            <para></para>
            <para>Sets the line count to count.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also lineCount().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.IsValid">
            <summary>
            <para>Returns true if this text block is valid; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Position">
            <summary>
            <para>Returns the index of the block's first character within the
            document.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Length">
            <summary>
            <para>Returns the length of the block in characters.</para>
            <para>Note: The length returned includes all formatting characters, for
            example, newline.</para>
            <para>See also text(), charFormat(), and blockFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Layout">
            <summary>
            <para>Returns the QTextLayout that is used to lay out and display the
            block's contents.</para>
            <para>Note that the returned QTextLayout object can only be modified
            from the documentChanged implementation of a QAbstractTextDocumentLayout
            subclass. Any changes applied from the outside cause undefined
            behavior.</para>
            <para>See also clearLayout().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.BlockFormat">
            <summary>
            <para>Returns the QTextBlockFormat that describes block-specific
            properties.</para>
            <para>See also charFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.BlockFormatIndex">
            <summary>
            <para>Returns an index into the document's internal list of block
            formats for the text block's format.</para>
            <para>See also QTextDocument::allFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.CharFormat">
            <summary>
            <para>Returns the QTextCharFormat that describes the block's character
            format. The block's character format is used when inserting text into an
            empty block.</para>
            <para>See also blockFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.CharFormatIndex">
            <summary>
            <para>Returns an index into the document's internal list of character
            formats for the text block's character format.</para>
            <para>See also QTextDocument::allFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.TextDirection">
            <summary>
            <para>Returns the resolved text direction.</para>
            <para>If the block has no explicit direction set, it will resolve the
            direction from the blocks content. Returns either Qt::LeftToRight or
            Qt::RightToLeft.</para>
            <para>This function was introduced in  Qt 4.7.</para>
            <para>See also QTextFormat::layoutDirection(),
            QString::isRightToLeft(), and Qt::LayoutDirection.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Text">
            <summary>
            <para>Returns the block's contents as plain text.</para>
            <para>See also length(), charFormat(), and blockFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Document">
            <summary>
            <para>Returns the text document this text block belongs to, or 0 if the
            text block does not belong to any document.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.TextList">
            <summary>
            <para>If the block represents a list item, returns the list that the
            item belongs to; otherwise returns 0.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.BlockNumber">
            <summary>
            <para>Returns the number of this block, or -1 if the block is
            invalid.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            <para>See also QTextCursor::blockNumber().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.FirstLineNumber">
            <summary>
            <para>Returns the first line number of this block, or -1 if the block
            is invalid. Unless the layout supports it, the line number is identical to
            the block number.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QTextBlock::blockNumber().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Next">
            <summary>
            <para>Returns the text block in the document after this block, or an
            empty text block if this is the last one.</para>
            <para>Note that the next block may be in a different frame or table to
            this block.</para>
            <para>See also previous(), begin(), and end().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Previous">
            <summary>
            <para>Returns the text block in the document before this block, or an
            empty text block if this is the first one.</para>
            <para>Note that the previous block may be in a different frame or table
            to this block.</para>
            <para>See also next(), begin(), and end().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextBlock.Iterator">
            <summary>
            <para>The QTextBlock::iterator class provides an iterator for reading
            the contents of a QTextBlock.</para>
            </summary>
            <remarks>
            <para>A block consists of a sequence of text fragments. This class
            provides a way to iterate over these, and read their contents. It does not
            provide a way to modify the internal structure or contents of the
            block.</para>
            <para>An iterator can be constructed and used to access the fragments
            within a text block in the following way:</para>
            <para>    QTextBlock::iterator it;</para>
            <para>    for (it = currentBlock.begin(); !(it.atEnd()); ++it) {</para>
            <para>        QTextFragment currentFragment = it.fragment();</para>
            <para>        if (currentFragment.isValid())</para>
            <para>            processFragment(currentFragment);</para>
            <para>    }</para>
            <para></para>
            <para>See also QTextFragment.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.#ctor">
            <summary>
            <para>Constructs an iterator for this text block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.#ctor(QtGui.QTextBlock.Iterator)">
            <summary>
            <para>Copy constructor. Constructs a copy of the other iterator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.op_Equality(QtGui.QTextBlock.Iterator,QtGui.QTextBlock.Iterator)">
            <summary>
            <para>Retuns true if this iterator is the same as the other iterator;
            otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.op_Inequality(QtGui.QTextBlock.Iterator,QtGui.QTextBlock.Iterator)">
            <summary>
            <para>Retuns true if this iterator is different from the other
            iterator; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.op_Increment(QtGui.QTextBlock.Iterator)">
            <summary>
            <para>The prefix ++ operator (++i) advances the iterator to the next
            item in the hash and returns an iterator to the new current item.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextBlock.Iterator.op_Decrement(QtGui.QTextBlock.Iterator)">
            <summary>
            <para>The prefix -- operator (--i) makes the preceding item current and
            returns an iterator pointing to the new current item.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Iterator.Fragment">
            <summary>
            <para>Returns the text fragment the iterator currently points
            to.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextBlock.Iterator.AtEnd">
            <summary>
            <para>Returns true if the current item is the last item in the text
            block.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextFragment">
            <summary>
            <para>The QTextFragment class holds a piece of text in a QTextDocument
            with a single QTextCharFormat.</para>
            </summary>
            <remarks>
            <para>A text fragment describes a piece of text that is stored with a
            single character format. Text in which the character format changes can be
            represented by sequences of text fragments with different formats.</para>
            <para>If the user edits the text in a fragment and introduces a
            different character format, the fragment's text will be split at each point
            where the format changes, and new fragments will be created. For example,
            changing the style of some text in the middle of a sentence will cause the
            fragment to be broken into three separate fragments: the first and third
            with the same format as before, and the second with the new style. The
            first fragment will contain the text from the beginning of the sentence,
            the second will contain the text from the middle, and the third takes the
            text from the end of the sentence.</para>
            <para></para>
            <para>A fragment's text and character format can be obtained with the
            text() and charFormat() functions. The length() function gives the length
            of the text in the fragment. position() gives the position in the document
            of the start of the fragment. To determine whether the fragment contains a
            particular position within the document, use the contains()
            function.</para>
            <para></para>
            <para>See also QTextDocument and Rich Text Document Structure.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextFragment.#ctor">
            <summary>
            <para>Creates a new empty text fragment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFragment.#ctor(QtGui.QTextFragment)">
            <summary>
            <para>Copies the content (text and format) of the other text fragment
            to this text fragment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFragment.op_Equality(QtGui.QTextFragment,QtGui.QTextFragment)">
            <summary>
            <para>Returns true if this text fragment is the same (at the same
            position) as the other text fragment; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFragment.op_Inequality(QtGui.QTextFragment,QtGui.QTextFragment)">
            <summary>
            <para>Returns true if this text fragment is different (at a different
            position) from the other text fragment; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFragment.op_LessThan(QtGui.QTextFragment,QtGui.QTextFragment)">
            <summary>
            <para>Returns true if this text fragment appears earlier in the
            document than the other text fragment; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextFragment.Contains(System.Int32)">
            <summary>
            <para>Returns true if the text fragment contains the text at the given
            position in the document; otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.IsValid">
            <summary>
            <para>Returns true if this is a valid text fragment (i.e. has a valid
            position in a document); otherwise returns false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.Position">
            <summary>
            <para>Returns the position of this text fragment in the
            document.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.Length">
            <summary>
            <para>Returns the number of characters in the text fragment.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.CharFormat">
            <summary>
            <para>Returns the text fragment's character format.</para>
            <para>See also text().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.CharFormatIndex">
            <summary>
            <para>Returns an index into the document's internal list of character
            formats for the text fragment's character format.</para>
            <para>See also QTextDocument::allFormats().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextFragment.Text">
            <summary>
            <para>Returns the text fragment's as plain text.</para>
            <para>See also length() and charFormat().</para>
            </summary>
        </member>
        <member name="T:QtGui.QSyntaxHighlighter">
            <summary>
            <para>The QSyntaxHighlighter class allows you to define syntax
            highlighting rules, and in addition you can use the class to query a
            document's current formatting or user data.</para>
            </summary>
            <remarks>
            <para>The QSyntaxHighlighter class is a base class for implementing
            QTextDocument syntax highlighters. A syntax highligher automatically
            highlights parts of the text in a QTextDocument. Syntax highlighters are
            often used when the user is entering text in a specific format (for example
            source code) and help the user to read the text and identify syntax
            errors.</para>
            <para>To provide your own syntax highlighting, you must subclass
            QSyntaxHighlighter and reimplement highlightBlock().</para>
            <para>When you create an instance of your QSyntaxHighlighter subclass,
            pass it the QTextDocument that you want the syntax highlighting to be
            applied to. For example:</para>
            <para>QTextEdit *editor = new QTextEdit;</para>
            <para>MyHighlighter *highlighter = new
            MyHighlighter(editor-&gt;document());</para>
            <para>After this your highlightBlock() function will be called
            automatically whenever necessary. Use your highlightBlock() function to
            apply formatting (e.g. setting the font and color) to the text that is
            passed to it. QSyntaxHighlighter provides the setFormat() function which
            applies a given QTextCharFormat on the current text block. For
            example:</para>
            <para>void MyHighlighter::highlightBlock(const QString
            &amp;text)</para>
            <para>{</para>
            <para>    QTextCharFormat myClassFormat;</para>
            <para>    myClassFormat.setFontWeight(QFont::Bold);</para>
            <para>    myClassFormat.setForeground(Qt::darkMagenta);</para>
            <para>    QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;</para>
            <para></para>
            <para>    QRegExp expression(pattern);</para>
            <para>    int index = text.indexOf(expression);</para>
            <para>    while (index &gt;= 0) {</para>
            <para>        int length = expression.matchedLength();</para>
            <para>        setFormat(index, length, myClassFormat);</para>
            <para>        index = text.indexOf(expression, index + length);</para>
            <para>    }</para>
            <para>}</para>
            <para>Some syntaxes can have constructs that span several text blocks.
            For example, a C++ syntax highlighter should be able to cope with /*...*/
            multiline comments. To deal with these cases it is necessary to know the
            end state of the previous text block (e.g. &quot;in comment&quot;).</para>
            <para>Inside your highlightBlock() implementation you can query the end
            state of the previous text block using the previousBlockState() function.
            After parsing the block you can save the last state using
            setCurrentBlockState().</para>
            <para>The currentBlockState() and previousBlockState() functions return
            an int value. If no state is set, the returned value is -1. You can
            designate any other value to identify any given state using the
            setCurrentBlockState() function. Once the state is set the QTextBlock keeps
            that value until it is set set again or until the corresponding paragraph
            of text is deleted.</para>
            <para>For example, if you're writing a simple C++ syntax highlighter,
            you might designate 1 to signify &quot;in comment&quot;:</para>
            <para>QTextCharFormat multiLineCommentFormat;</para>
            <para>multiLineCommentFormat.setForeground(Qt::red);</para>
            <para></para>
            <para>QRegExp startExpression(&quot;/\\*&quot;);</para>
            <para>QRegExp endExpression(&quot;\\*/&quot;);</para>
            <para></para>
            <para>setCurrentBlockState(0);</para>
            <para></para>
            <para>int startIndex = 0;</para>
            <para>if (previousBlockState() != 1)</para>
            <para>    startIndex = text.indexOf(startExpression);</para>
            <para></para>
            <para>while (startIndex &gt;= 0) {</para>
            <para>   int endIndex = text.indexOf(endExpression, startIndex);</para>
            <para>   int commentLength;</para>
            <para>   if (endIndex == -1) {</para>
            <para>       setCurrentBlockState(1);</para>
            <para>       commentLength = text.length() - startIndex;</para>
            <para>   } else {</para>
            <para>       commentLength = endIndex - startIndex</para>
            <para>                       + endExpression.matchedLength();</para>
            <para>   }</para>
            <para>   setFormat(startIndex, commentLength,
            multiLineCommentFormat);</para>
            <para>   startIndex = text.indexOf(startExpression,</para>
            <para>                             startIndex + commentLength);</para>
            <para>}</para>
            <para>In the example above, we first set the current block state to 0.
            Then, if the previous block ended within a comment, we higlight from the
            beginning of the current block (startIndex = 0). Otherwise, we search for
            the given start expression. If the specified end expression cannot be found
            in the text block, we change the current block state by calling
            setCurrentBlockState(), and make sure that the rest of the block is
            higlighted.</para>
            <para>In addition you can query the current formatting and user data
            using the format() and currentBlockUserData() functions respectively. You
            can also attach user data to the current text block using the
            setCurrentBlockUserData() function. QTextBlockUserData can be used to store
            custom settings. In the case of syntax highlighting, it is in particular
            interesting as cache storage for information that you may figure out while
            parsing the paragraph's text. For an example, see the
            setCurrentBlockUserData() documentation.</para>
            <para></para>
            <para>See also QTextDocument and Syntax Highlighter Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a QSyntaxHighlighter with the given parent.</para>
            <para>If the parent is a QTextEdit, it installs the syntaxhighlighter
            on the parents document. The specified QTextEdit also becomes the owner of
            the QSyntaxHighlighter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Constructs a QSyntaxHighlighter and installs it on parent. The
            specified QTextDocument also becomes the owner of the
            QSyntaxHighlighter.</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.Rehighlight">
            <summary>
            <para>Reapplies the highlighting to the whole document.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also rehighlightBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.RehighlightBlock(QtGui.QTextBlock)">
            <summary>
            <para>Reapplies the highlighting to the given QTextBlock block.</para>
            <para>This function was introduced in  Qt 4.6.</para>
            <para>See also rehighlight().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.HighlightBlock(System.String)">
            <summary>
            <para>Highlights the given text block. This function is called when
            necessary by the rich text engine, i.e. on text blocks which have
            changed.</para>
            <para>To provide your own syntax highlighting, you must subclass
            QSyntaxHighlighter and reimplement highlightBlock(). In your
            reimplementation you should parse the block's text and call setFormat() as
            often as necessary to apply any font and color changes that you require.
            For example:</para>
            <para>void MyHighlighter::highlightBlock(const QString
            &amp;text)</para>
            <para>{</para>
            <para>    QTextCharFormat myClassFormat;</para>
            <para>    myClassFormat.setFontWeight(QFont::Bold);</para>
            <para>    myClassFormat.setForeground(Qt::darkMagenta);</para>
            <para>    QString pattern = &quot;\\bMy[A-Za-z]+\\b&quot;;</para>
            <para></para>
            <para>    QRegExp expression(pattern);</para>
            <para>    int index = text.indexOf(expression);</para>
            <para>    while (index &gt;= 0) {</para>
            <para>        int length = expression.matchedLength();</para>
            <para>        setFormat(index, length, myClassFormat);</para>
            <para>        index = text.indexOf(expression, index + length);</para>
            <para>     }</para>
            <para> }</para>
            <para>Some syntaxes can have constructs that span several text blocks.
            For example, a C++ syntax highlighter should be able to cope with /*...*/
            multiline comments. To deal with these cases it is necessary to know the
            end state of the previous text block (e.g. &quot;in comment&quot;).</para>
            <para>Inside your highlightBlock() implementation you can query the end
            state of the previous text block using the previousBlockState() function.
            After parsing the block you can save the last state using
            setCurrentBlockState().</para>
            <para>The currentBlockState() and previousBlockState() functions return
            an int value. If no state is set, the returned value is -1. You can
            designate any other value to identify any given state using the
            setCurrentBlockState() function. Once the state is set the QTextBlock keeps
            that value until it is set set again or until the corresponding paragraph
            of text gets deleted.</para>
            <para>For example, if you're writing a simple C++ syntax highlighter,
            you might designate 1 to signify &quot;in comment&quot;. For a text block
            that ended in the middle of a comment you'd set 1 using
            setCurrentBlockState, and for other paragraphs you'd set 0. In your parsing
            code if the return value of previousBlockState() is 1, you would highlight
            the text as a C++ comment until you reached the closing */.</para>
            <para>See also previousBlockState(), setFormat(), and
            setCurrentBlockState().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.SetFormat(System.Int32,System.Int32,QtGui.QTextCharFormat)">
            <summary>
            <para>This function is applied to the syntax highlighter's current text
            block (i.e. the text that is passed to the highlightBlock()
            function).</para>
            <para>The specified format is applied to the text from the start
            position for a length of count characters (if count is 0, nothing is done).
            The formatting properties set in format are merged at display time with the
            formatting information stored directly in the document, for example as
            previously set with QTextCursor's functions. Note that the document itself
            remains unmodified by the format set through this function.</para>
            <para>See also format() and highlightBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.SetFormat(System.Int32,System.Int32,QtGui.QColor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The specified color is applied to the current text block from the
            start position for a length of count characters.</para>
            <para>The other attributes of the current text block, e.g. the font and
            background color, are reset to default values.</para>
            <para>See also format() and highlightBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.SetFormat(System.Int32,System.Int32,QtGui.QFont)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>The specified font is applied to the current text block from the
            start position for a length of count characters.</para>
            <para>The other attributes of the current text block, e.g. the font and
            background color, are reset to default values.</para>
            <para>See also format() and highlightBlock().</para>
            </summary>
        </member>
        <member name="M:QtGui.QSyntaxHighlighter.Format(System.Int32)">
            <summary>
            <para>Returns the format at position inside the syntax highlighter's
            current text block.</para>
            <para>See also setFormat().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSyntaxHighlighter.Document">
            <summary>
            <para>Returns the QTextDocument on which this syntax highlighter is
            installed.</para>
            <para>See also setDocument().</para>
            <para></para>
            <para>Installs the syntax highlighter on the given QTextDocument doc. A
            QSyntaxHighlighter can only be used with one document at a time.</para>
            <para>See also document().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSyntaxHighlighter.CurrentBlockState">
            <summary>
            <para>Returns the state of the current text block. If no value is set,
            the returned value is -1.</para>
            <para>See also setCurrentBlockState().</para>
            <para></para>
            <para>Sets the state of the current text block to newState.</para>
            <para>See also currentBlockState() and highlightBlock().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSyntaxHighlighter.CurrentBlockUserData">
            <summary>
            <para>Returns the QTextBlockUserData object previously attached to the
            current text block.</para>
            <para>See also QTextBlock::userData() and
            setCurrentBlockUserData().</para>
            <para></para>
            <para>Attaches the given data to the current text block. The ownership
            is passed to the underlying text document, i.e. the provided
            QTextBlockUserData object will be deleted if the corresponding text block
            gets deleted.</para>
            <para>QTextBlockUserData can be used to store custom settings. In the
            case of syntax highlighting, it is in particular interesting as cache
            storage for information that you may figure out while parsing the
            paragraph's text.</para>
            <para>For example while parsing the text, you can keep track of
            parenthesis characters that you encounter ('{[(' and the like), and store
            their relative position and the actual QChar in a simple class derived from
            QTextBlockUserData:</para>
            <para>struct ParenthesisInfo</para>
            <para>{</para>
            <para>    QChar char;</para>
            <para>    int position;</para>
            <para>};</para>
            <para></para>
            <para>struct BlockData : public QTextBlockUserData</para>
            <para>{</para>
            <para>    QVector&lt;ParenthesisInfo&gt; parentheses;</para>
            <para>};</para>
            <para>During cursor navigation in the associated editor, you can ask
            the current QTextBlock (retrieved using the QTextCursor::block() function)
            if it has a user data object set and cast it to your BlockData object. Then
            you can check if the current cursor position matches with a previously
            recorded parenthesis position, and, depending on the type of parenthesis
            (opening or closing), find the next opening or closing parenthesis on the
            same level.</para>
            <para>In this way you can do a visual parenthesis matching and
            highlight from the current cursor position to the matching parenthesis.
            That makes it easier to spot a missing parenthesis in your code and to find
            where a corresponding opening/closing parenthesis is when editing
            parenthesis intensive code.</para>
            <para>See also currentBlockUserData() and
            QTextBlock::setUserData().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSyntaxHighlighter.PreviousBlockState">
            <summary>
            <para>Returns the end state of the text block previous to the syntax
            highlighter's current block. If no value was previously set, the returned
            value is -1.</para>
            <para>See also highlightBlock() and setCurrentBlockState().</para>
            </summary>
        </member>
        <member name="P:QtGui.QSyntaxHighlighter.CurrentBlock">
            <summary>
            <para>Returns the current text block.</para>
            <para>This function was introduced in  Qt 4.4.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextDocumentFragment">
            <summary>
            <para>The QTextDocumentFragment class represents a piece of formatted
            text from a QTextDocument.</para>
            </summary>
            <remarks>
            <para>A QTextDocumentFragment is a fragment of rich text, that can be
            inserted into a QTextDocument. A document fragment can be created from a
            QTextDocument, from a QTextCursor's selection, or from another document
            fragment. Document fragments can also be created by the static functions,
            fromPlainText() and fromHtml().</para>
            <para>The contents of a document fragment can be obtained as plain text
            by using the toPlainText() function, or it can be obtained as HTML with
            toHtml().</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.#ctor">
            <summary>
            <para>Constructs an empty QTextDocumentFragment.</para>
            <para>See also isEmpty().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.#ctor(QtGui.QTextDocument)">
            <summary>
            <para>Converts the given document into a QTextDocumentFragment. Note
            that the QTextDocumentFragment only stores the document contents, not meta
            information like the document's title.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.#ctor(QtGui.QTextCursor)">
            <summary>
            <para>Creates a QTextDocumentFragment from the cursor's selection. If
            the cursor doesn't have a selection, the created fragment is empty.</para>
            <para>See also isEmpty() and QTextCursor::selection().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.#ctor(QtGui.QTextDocumentFragment)">
            <summary>
            <para>Copy constructor. Creates a copy of the other fragment.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.ToPlainText">
            <summary>
            <para>Returns the document fragment's text as plain text (i.e. with no
            formatting information).</para>
            <para>See also toHtml().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.ToHtml(QtCore.QByteArray)">
            <summary>
            <para>Returns the contents of the document fragment as HTML, using the
            specified encoding (e.g., &quot;UTF-8&quot;, &quot;ISO
            8859-1&quot;).</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also toPlainText(), QTextDocument::toHtml(), and
            QTextCodec.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.FromPlainText(System.String)">
            <summary>
            <para>Returns a document fragment that contains the given
            plainText.</para>
            <para>When inserting such a fragment into a QTextDocument the current
            char format of the QTextCursor used for insertion is used as format for the
            text.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.FromHtml(System.String)">
            <summary>
            <para>Returns a QTextDocumentFragment based on the arbitrary piece of
            HTML in the given text. The formatting is preserved as much as possible;
            for example, &quot;&lt;b&gt;bold&lt;/b&gt;&quot; will become a document
            fragment with the text &quot;bold&quot; with a bold character
            format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentFragment.FromHtml(System.String,QtGui.QTextDocument)">
            <summary>
            <para>Returns a QTextDocumentFragment based on the arbitrary piece of
            HTML in the given text. The formatting is preserved as much as possible;
            for example, &quot;&lt;b&gt;bold&lt;/b&gt;&quot; will become a document
            fragment with the text &quot;bold&quot; with a bold character
            format.</para>
            <para>If the provided HTML contains references to external resources
            such as imported style sheets, then they will be loaded through the
            resourceProvider.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocumentFragment.IsEmpty">
            <summary>
            <para>Returns true if the fragment is empty; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextDocumentWriter">
            <summary>
            <para>The QTextDocumentWriter class provides a format-independent
            interface for writing a QTextDocument to files or other devices.</para>
            </summary>
            <remarks>
            <para>To write a document, construct a QTextDocumentWriter object with
            either a file name or a device object, and specify the document format to
            be written. You can construct a writer and set the format using setFormat()
            later.</para>
            <para>Call write() to write the document to the device. If the document
            is successfully written, this function returns true. However, if an error
            occurs when writing the document, it will return false.</para>
            <para>Call supportedDocumentFormats() for a list of formats that
            QTextDocumentWriter can write.</para>
            <para>Since the capabilities of the supported output formats vary
            considerably, the writer simply outputs the appropriate subset of objects
            for each format. This typically includes the formatted text and images
            contained in a document.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextDocumentWriter.#ctor">
            <summary>
            <para>Constructs an empty QTextDocumentWriter object. Before writing,
            you must call setFormat() to set a document format, then setDevice() or
            setFileName().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentWriter.#ctor(QtCore.QIODevice,QtCore.QByteArray)">
            <summary>
            <para>Constructs a QTextDocumentWriter object to write to the given
            device in the document format specified by format.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentWriter.#ctor(System.String,QtCore.QByteArray)">
            <summary>
            <para>Constructs an QTextDocumentWriter object that will write to a
            file with the name fileName, using the document format specified by format.
            If format is not provided, QTextDocumentWriter will detect the document
            format by inspecting the extension of fileName.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentWriter.Write(QtGui.QTextDocument)">
            <summary>
            <para>Writes the given document to the assigned device or file and
            returns true if successful; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextDocumentWriter.Write(QtGui.QTextDocumentFragment)">
            <summary>
            <para>Writes the document fragment specified by fragment to the
            assigned device or file and returns true if successful; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocumentWriter.Format">
            <summary>
            <para>Returns the format used for writing documents.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the format used to write documents to the format specified.
            format is a case insensitive text string. For example:</para>
            <para>        QTextDocumentWriter writer;</para>
            <para>        writer.setFormat(&quot;odf&quot;); // same as
            writer.setFormat(&quot;ODF&quot;);</para>
            <para>You can call supportedDocumentFormats() for the full list of
            formats QTextDocumentWriter supports.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocumentWriter.Device">
            <summary>
            <para>Returns the device currently assigned, or 0 if no device has been
            assigned.</para>
            <para>See also setDevice().</para>
            <para></para>
            <para>Sets the writer's device to the device specified. If a device has
            already been set, the old device is removed but otherwise left
            unchanged.</para>
            <para>If the device is not already open, QTextDocumentWriter will
            attempt to open the device in QIODevice::WriteOnly mode by calling
            open().</para>
            <para>Note: This will not work for certain devices, such as QProcess,
            QTcpSocket and QUdpSocket, where some configuration is required before the
            device can be opened.</para>
            <para>See also device() and setFileName().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocumentWriter.FileName">
            <summary>
            <para>If the currently assigned device is a QFile, or if setFileName()
            has been called, this function returns the name of the file to be written
            to. In all other cases, it returns an empty string.</para>
            <para>See also setFileName() and setDevice().</para>
            <para></para>
            <para>Sets the name of the file to be written to fileName. Internally,
            QTextDocumentWriter will create a QFile and open it in QIODevice::WriteOnly
            mode, and use this file when writing the document.</para>
            <para>See also fileName() and setDevice().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextDocumentWriter.Codec">
            <summary>
            <para>Returns the codec that is currently assigned to the
            writer.</para>
            <para>See also setCodec().</para>
            <para></para>
            <para>Sets the codec for this stream to codec. The codec is used for
            encoding any data that is written. By default, QTextDocumentWriter uses
            UTF-8.</para>
            <para>See also codec().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextList">
            <summary>
            <para>The QTextList class provides a decorated list of items in a
            QTextDocument.</para>
            </summary>
            <remarks>
            <para>A list contains a sequence of text blocks, each of which is
            marked with a bullet point or other symbol. Multiple levels of lists can be
            used, and the automatic numbering feature provides support for ordered
            numeric and alphabetical lists.</para>
            <para>Lists are created by using a text cursor to insert an empty list
            at the current position or by moving existing text into a new list. The
            QTextCursor::insertList() function inserts an empty block into the document
            at the cursor position, and makes it the first item in a list.</para>
            <para>    QTextListFormat listFormat;</para>
            <para>    if (list) {</para>
            <para>        listFormat = list-&gt;format();</para>
            <para>        listFormat.setIndent(listFormat.indent() + 1);</para>
            <para>    }</para>
            <para></para>
            <para>    listFormat.setStyle(QTextListFormat::ListDisc);</para>
            <para>    cursor.insertList(listFormat);</para>
            <para>The QTextCursor::createList() function takes the contents of the
            cursor's current block and turns it into the first item of a new
            list.</para>
            <para>The cursor's current list is found with
            QTextCursor::currentList().</para>
            <para>The number of items in a list is given by count(). Each item can
            be obtained by its index in the list with the item() function. Similarly,
            the index of a given item can be found with itemNumber(). The text of each
            item can be found with the itemText() function.</para>
            <para>Note that the items in the list may not be adjacent elements in
            the document. For example, the top-level items in a multi-level list will
            be separated by the items in lower levels of the list.</para>
            <para>List items can be deleted by index with the removeItem()
            function. remove() deletes the specified item in the list.</para>
            <para>The list's format is set with setFormat() and read with format().
            The format describes the decoration of the list itself, and not the
            individual items.</para>
            <para></para>
            <para>See also QTextBlock, QTextListFormat, and QTextCursor.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextList.Item(System.Int32)">
            <summary>
            <para>Returns the i-th text block in the list.</para>
            <para>See also count() and itemText().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextList.ItemNumber(QtGui.QTextBlock)">
            <summary>
            <para>Returns the index of the list item that corresponds to the given
            block. Returns -1 if the block was not present in the list.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextList.ItemText(QtGui.QTextBlock)">
            <summary>
            <para>Returns the text of the list item that corresponds to the given
            block.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextList.RemoveItem(System.Int32)">
            <summary>
            <para>Removes the item at item position i from the list. When the last
            item in the list is removed, the list is automatically deleted by the
            QTextDocument that owns it.</para>
            <para>See also add() and remove().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextList.Remove(QtGui.QTextBlock)">
            <summary>
            <para>Removes the given block from the list.</para>
            <para>See also add() and removeItem().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextList.Add(QtGui.QTextBlock)">
            <summary>
            <para>Makes the given block part of the list.</para>
            <para>See also remove() and removeItem().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextList.Format">
            <summary>
            <para>Returns the list's format.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the list's format to format.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextList.Count">
            <summary>
            <para>Returns the number of items in the list.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextList.IsEmpty">
            <summary>
            <para>Returns true if the list has no items; otherwise returns
            false.</para>
            <para>Note: Empty lists are automatically deleted by the QTextDocument
            that owns them.</para>
            <para>See also count().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextTableCell">
            <summary>
            <para>The QTextTableCell class represents the properties of a cell in a
            QTextTable.</para>
            </summary>
            <remarks>
            <para>Table cells are pieces of document structure that belong to a
            table. The table orders cells into particular rows and columns; cells can
            also span multiple columns and rows.</para>
            <para>Cells are usually created when a table is inserted into a
            document with QTextCursor::insertTable(), but they are also created and
            destroyed when a table is resized.</para>
            <para>Cells contain information about their location in a table; you
            can obtain the row() and column() numbers of a cell, and its rowSpan() and
            columnSpan().</para>
            <para>The format() of a cell describes the default character format of
            its contents. The firstCursorPosition() and lastCursorPosition() functions
            are used to obtain the extent of the cell in the document.</para>
            <para></para>
            <para>See also QTextTable and QTextTableFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextTableCell.#ctor">
            <summary>
            <para>Constructs an invalid table cell.</para>
            <para>See also isValid().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCell.#ctor(QtGui.QTextTableCell)">
            <summary>
            <para>Copy constructor. Creates a new QTextTableCell object based on
            the other cell.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCell.op_Equality(QtGui.QTextTableCell,QtGui.QTextTableCell)">
            <summary>
            <para>Returns true if this cell object and the other cell object
            describe the same cell; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCell.op_Inequality(QtGui.QTextTableCell,QtGui.QTextTableCell)">
            <summary>
            <para>Returns true if this cell object and the other cell object
            describe different cells; otherwise returns false.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCell.Begin">
            <summary>
            <para>Returns a frame iterator pointing to the beginning of the table's
            cell.</para>
            <para>See also end().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTableCell.End">
            <summary>
            <para>Returns a frame iterator pointing to the end of the table's
            cell.</para>
            <para>See also begin().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.Format">
            <summary>
            <para>Returns the cell's character format.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the cell's character format to format. This can for example
            be used to change the background color of the entire cell:</para>
            <para>QTextTableCell cell = table-&gt;cellAt(2, 3); QTextCharFormat
            format = cell.format(); format.setBackground(Qt::blue);
            cell.setFormat(format);</para>
            <para>Note that the cell's row or column span cannot be changed through
            this function. You have to use QTextTable::mergeCells and
            QTextTable::splitCell instead.</para>
            <para>This function was introduced in  Qt 4.2.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.Row">
            <summary>
            <para>Returns the number of the row in the table that contains this
            cell.</para>
            <para>See also column().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.Column">
            <summary>
            <para>Returns the number of the column in the table that contains this
            cell.</para>
            <para>See also row().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.RowSpan">
            <summary>
            <para>Returns the number of rows this cell spans. The default is
            1.</para>
            <para>See also columnSpan().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.ColumnSpan">
            <summary>
            <para>Returns the number of columns this cell spans. The default is
            1.</para>
            <para>See also rowSpan().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.IsValid">
            <summary>
            <para>Returns true if this is a valid table cell; otherwise returns
            false.</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.FirstCursorPosition">
            <summary>
            <para>Returns the first valid cursor position in this cell.</para>
            <para>See also lastCursorPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.LastCursorPosition">
            <summary>
            <para>Returns the last valid cursor position in this cell.</para>
            <para>See also firstCursorPosition().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTableCell.TableCellFormatIndex">
            <summary>
            <para>Returns the index of the tableCell's format in the document's
            internal list of formats.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also QTextDocument::allFormats().</para>
            </summary>
        </member>
        <member name="T:QtGui.QTextTable">
            <summary>
            <para>The QTextTable class represents a table in a
            QTextDocument.</para>
            </summary>
            <remarks>
            <para>A table is a group of cells ordered into rows and columns. Each
            table contains at least one row and one column. Each cell contains a block,
            and is surrounded by a frame.</para>
            <para>Tables are usually created and inserted into a document with the
            QTextCursor::insertTable() function. For example, we can insert a table
            with three rows and two columns at the current cursor position in an editor
            using the following lines of code:</para>
            <para>    QTextCursor cursor(editor-&gt;textCursor());</para>
            <para>    cursor.movePosition(QTextCursor::Start);</para>
            <para></para>
            <para>    QTextTable *table = cursor.insertTable(rows, columns,
            tableFormat);</para>
            <para>The table format is either defined when the table is created or
            changed later with setFormat().</para>
            <para>The table currently being edited by the cursor is found with
            QTextCursor::currentTable(). This allows its format or dimensions to be
            changed after it has been inserted into a document.</para>
            <para>A table's size can be changed with resize(), or by using
            insertRows(), insertColumns(), removeRows(), or removeColumns(). Use
            cellAt() to retrieve table cells.</para>
            <para>The starting and ending positions of table rows can be found by
            moving a cursor within a table, and using the rowStart() and rowEnd()
            functions to obtain cursors at the start and end of each row.</para>
            <para>Rows and columns within a QTextTable can be merged and split
            using the mergeCells() and splitCell() functions. However, only cells that
            span multiple rows or columns can be split. (Merging or splitting does not
            increase or decrease the number of rows and columns.)</para>
            <para>Note that if you have merged multiple columns and rows into one
            cell, you will not be able to split the merged cell into new cells spanning
            over more than one row or column. To be able to split cells spanning over
            several rows and columns you need to do this over several
            iterations.</para>
            <para></para>
            <para> 	Suppose we have a 2x3 table of names and addresses. To merge
            both columns in the first row we invoke mergeCells() with row = 0, column =
            0, numRows = 1 and numColumns = 2.    table-&gt;mergeCells(0, 0, 1,
            2);</para>
            <para></para>
            <para>	This gives us the following table. To split the first row of the
            table back into two cells, we invoke the splitCell() function with numRows
            and numCols = 1.    table-&gt;splitCell(0, 0, 1, 1);</para>
            <para></para>
            <para>	This results in the original table.</para>
            <para></para>
            <para></para>
            <para>See also QTextTableFormat.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QTextTable.Resize(System.Int32,System.Int32)">
            <summary>
            <para>Resizes the table to contain the required number of rows and
            columns.</para>
            <para>See also insertRows(), insertColumns(), removeRows(), and
            removeColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.InsertRows(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a number of rows before the row with the specified
            index.</para>
            <para>See also resize(), insertColumns(), removeRows(),
            removeColumns(), appendRows(), and appendColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.InsertColumns(System.Int32,System.Int32)">
            <summary>
            <para>Inserts a number of columns before the column with the specified
            index.</para>
            <para>See also insertRows(), resize(), removeRows(), removeColumns(),
            appendRows(), and appendColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.AppendRows(System.Int32)">
            <summary>
            <para>Appends count rows at the bottom of the table.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also insertColumns(), insertRows(), resize(), removeRows(),
            removeColumns(), and appendColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.AppendColumns(System.Int32)">
            <summary>
            <para>Appends count columns at the right side of the table.</para>
            <para>This function was introduced in  Qt 4.5.</para>
            <para>See also insertColumns(), insertRows(), resize(), removeRows(),
            removeColumns(), and appendRows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.RemoveRows(System.Int32,System.Int32)">
            <summary>
            <para>Removes a number of rows starting with the row at the specified
            index.</para>
            <para>See also insertRows(), insertColumns(), resize(),
            removeColumns(), appendRows(), and appendColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            <para>Removes a number of columns starting with the column at the
            specified index.</para>
            <para>See also insertRows(), insertColumns(), removeRows(), resize(),
            appendRows(), and appendColumns().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Merges the cell at the specified row and column with the adjacent
            cells into one cell. The new cell will span numRows rows and numCols
            columns. If numRows or numCols is less than the current number of rows or
            columns the cell spans then this method does nothing.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also splitCell().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.MergeCells(QtGui.QTextCursor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Merges the cells selected by the provided cursor.</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also splitCell().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.SplitCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            <para>Splits the specified cell at row and column into an array of
            multiple cells with dimensions specified by numRows and numCols.</para>
            <para>Note: It is only possible to split cells that span multiple rows
            or columns, such as rows that have been merged using mergeCells().</para>
            <para>This function was introduced in  Qt 4.1.</para>
            <para>See also mergeCells().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.CellAt(System.Int32,System.Int32)">
            <summary>
            <para>Returns the table cell at the given row and column in the
            table.</para>
            <para>See also columns() and rows().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.CellAt(System.Int32)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the table cell that contains the character at the given
            position in the document.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.CellAt(QtGui.QTextCursor)">
            <summary>
            <para>This is an overloaded function.</para>
            <para>Returns the table cell containing the given cursor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.RowStart(QtGui.QTextCursor)">
            <summary>
            <para>Returns a cursor pointing to the start of the row that contains
            the given cursor.</para>
            <para>See also rowEnd().</para>
            </summary>
        </member>
        <member name="M:QtGui.QTextTable.RowEnd(QtGui.QTextCursor)">
            <summary>
            <para>Returns a cursor pointing to the end of the row that contains the
            given cursor.</para>
            <para>See also rowStart().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTable.Format">
            <summary>
            <para>Returns the table's format.</para>
            <para>See also setFormat().</para>
            <para></para>
            <para>Sets the table's format.</para>
            <para>See also format().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTable.Rows">
            <summary>
            <para>Returns the number of rows in the table.</para>
            <para>See also columns().</para>
            </summary>
        </member>
        <member name="P:QtGui.QTextTable.Columns">
            <summary>
            <para>Returns the number of columns in the table.</para>
            <para>See also rows().</para>
            </summary>
        </member>
        <member name="T:QtGui.QDesktopServices">
            <summary>
            <para>The QDesktopServices class provides methods for accessing common
            desktop services.</para>
            </summary>
            <remarks>
            <para>Many desktop environments provide services that can be used by
            applications to perform common tasks, such as opening a web page, in a way
            that is both consistent and takes into account the user's application
            preferences.</para>
            <para>This class contains functions that provide simple interfaces to
            these services that indicate whether they succeeded or failed.</para>
            <para>The openUrl() function is used to open files located at arbitrary
            URLs in external applications. For URLs that correspond to resources on the
            local filing system (where the URL scheme is &quot;file&quot;), a suitable
            application will be used to open the file; otherwise, a web browser will be
            used to fetch and display the file.</para>
            <para>The user's desktop settings control whether certain executable
            file types are opened for browsing, or if they are executed instead. Some
            desktop environments are configured to prevent users from executing files
            obtained from non-local URLs, or to ask the user's permission before doing
            so.</para>
            <para></para>
            <para>URL Handlers</para>
            <para>The behavior of the openUrl() function can be customized for
            individual URL schemes to allow applications to override the default
            handling behavior for certain types of URLs.</para>
            <para>The dispatch mechanism allows only one custom handler to be used
            for each URL scheme; this is set using the setUrlHandler() function. Each
            handler is implemented as a slot which accepts only a single QUrl
            argument.</para>
            <para>The existing handlers for each scheme can be removed with the
            unsetUrlHandler() function. This returns the handling behavior for the
            given scheme to the default behavior.</para>
            <para>This system makes it easy to implement a help system, for
            example. Help could be provided in labels and text browsers using
            help://myapplication/mytopic URLs, and by registering a handler it becomes
            possible to display the help text inside the application:</para>
            <para>class MyHelpHandler : public QObject</para>
            <para>{</para>
            <para>    Q_OBJECT</para>
            <para>public:</para>
            <para>    ...</para>
            <para>public slots:</para>
            <para>    void showHelp(const QUrl &amp;url);</para>
            <para>};</para>
            <para></para>
            <para>QDesktopServices::setUrlHandler(&quot;help&quot;, helpInstance,
            &quot;showHelp&quot;);</para>
            <para>If inside the handler you decide that you can't open the
            requested URL, you can just call QDesktopServices::openUrl() again with the
            same argument, and it will try to open the URL using the appropriate
            mechanism for the user's desktop environment.</para>
            <para>Note: Since Qt 5, storageLocation() and displayName() are
            replaced by functionality provided by the QStandardPaths class.</para>
            <para></para>
            <para>See also QSystemTrayIcon, QProcess, and QStandardPaths.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDesktopServices.OpenUrl(QtCore.QUrl)">
            <summary>
            <para>Opens the given url in the appropriate Web browser for the user's
            desktop environment, and returns true if successful; otherwise returns
            false.</para>
            <para>If the URL is a reference to a local file (i.e., the URL scheme
            is &quot;file&quot;) then it will be opened with a suitable application
            instead of a Web browser.</para>
            <para>The following example opens a file on the Windows file system
            residing on a path that contains spaces:</para>
            <para>QDesktopServices::openUrl(QUrl(&quot;file:///C:/Documents and
            Settings/All Users/Desktop&quot;, QUrl::TolerantMode));</para>
            <para>If a mailto URL is specified, the user's e-mail client will be
            used to open a composer window containing the options specified in the URL,
            similar to the way mailto links are handled by a Web browser.</para>
            <para>For example, the following URL contains a recipient
            (user@foo.com), a subject (Test), and a message body (Just a test):</para>
            <para>mailto:user@foo.com?subject=Test&amp;body=Just a test</para>
            <para>Warning: Although many e-mail clients can send attachments and
            are Unicode-aware, the user may have configured their client without these
            features. Also, certain e-mail clients (e.g., Lotus Notes) have problems
            with long URLs.</para>
            <para>Warning: A return value of true indicates that the application
            has successfully requested the operating system to open the URL in an
            external application. The external application may still fail to launch or
            fail to open the requested URL. This result will not be reported back to
            the application.</para>
            <para>See also setUrlHandler().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDesktopServices.SetUrlHandler(System.String,QtCore.QObject,System.String)">
            <summary>
            <para>Sets the handler for the given scheme to be the handler method
            provided by the receiver object.</para>
            <para>This function provides a way to customize the behavior of
            openUrl(). If openUrl() is called with a URL with the specified scheme then
            the given method on the receiver object is called instead of
            QDesktopServices launching an external application.</para>
            <para>The provided method must be implemented as a slot that only
            accepts a single QUrl argument.</para>
            <para>If setUrlHandler() is used to set a new handler for a scheme
            which already has a handler, the existing handler is simply replaced with
            the new one. Since QDesktopServices does not take ownership of handlers, no
            objects are deleted when a handler is replaced.</para>
            <para>Note that the handler will always be called from within the same
            thread that calls QDesktopServices::openUrl().</para>
            <para>See also openUrl() and unsetUrlHandler().</para>
            </summary>
        </member>
        <member name="M:QtGui.QDesktopServices.UnsetUrlHandler(System.String)">
            <summary>
            <para>Removes a previously set URL handler for the specified
            scheme.</para>
            <para>See also setUrlHandler().</para>
            </summary>
        </member>
        <member name="T:QtGui.QValidator">
            <summary>
            <para>The QValidator class provides validation of input text.</para>
            </summary>
            <remarks>
            <para>The class itself is abstract. Two subclasses, QIntValidator and
            QDoubleValidator, provide basic numeric-range checking, and
            QRegExpValidator provides general checking using a custom regular
            expression.</para>
            <para>If the built-in validators aren't sufficient, you can subclass
            QValidator. The class has two virtual functions: validate() and
            fixup().</para>
            <para>validate() must be implemented by every subclass. It returns
            Invalid, Intermediate or Acceptable depending on whether its argument is
            valid (for the subclass's definition of valid).</para>
            <para>These three states require some explanation. An Invalid string is
            clearly invalid. Intermediate is less obvious: the concept of validity is
            difficult to apply when the string is incomplete (still being edited).
            QValidator defines Intermediate as the property of a string that is neither
            clearly invalid nor acceptable as a final result. Acceptable means that the
            string is acceptable as a final result. One might say that any string that
            is a plausible intermediate state during entry of an Acceptable string is
            Intermediate.</para>
            <para>Here are some examples:</para>
            <para></para>
            <para>For a line edit that accepts integers from 10 to 1000 inclusive,
            42 and 123 are Acceptable, the empty string and 5 are Intermediate, and
            &quot;asdf&quot; and 1114 is Invalid.</para>
            <para>For an editable combobox that accepts URLs, any well-formed URL
            is Acceptable, &quot;http://example.com/,&quot; is Intermediate (it might
            be a cut and paste action that accidentally took in a comma at the end),
            the empty string is Intermediate (the user might select and delete all of
            the text in preparation for entering a new URL) and &quot;http:///./&quot;
            is Invalid.</para>
            <para>For a spin box that accepts lengths, &quot;11cm&quot; and
            &quot;1in&quot; are Acceptable, &quot;11&quot; and the empty string are
            Intermediate, and &quot;http://example.com&quot; and &quot;hour&quot; are
            Invalid.</para>
            <para></para>
            <para>fixup() is provided for validators that can repair some user
            errors. The default implementation does nothing. QLineEdit, for example,
            will call fixup() if the user presses Enter (or Return) and the content is
            not currently valid. This allows the fixup() function the opportunity of
            performing some magic to make an Invalid string Acceptable.</para>
            <para>A validator has a locale, set with setLocale(). It is typically
            used to parse localized data. For example, QIntValidator and
            QDoubleValidator use it to parse localized representations of integers and
            doubles.</para>
            <para>QValidator is typically used with QLineEdit, QSpinBox and
            QComboBox.</para>
            <para></para>
            <para>See also QIntValidator, QDoubleValidator, QRegExpValidator, and
            Line Edits Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QValidator.#ctor(QtCore.QObject)">
            <summary>
            <para>Sets up the validator. The parent parameter is passed on to the
            QObject constructor.</para>
            </summary>
        </member>
        <member name="M:QtGui.QValidator.Validate(System.String,System.Int32@)">
            <summary>
            <para>This virtual function returns Invalid if input is invalid
            according to this validator's rules, Intermediate if it is likely that a
            little more editing will make the input acceptable (e.g. the user types
            &quot;4&quot; into a widget which accepts integers between 10 and 99), and
            Acceptable if the input is valid.</para>
            <para>The function can change both input and pos (the cursor position)
            if required.</para>
            </summary>
        </member>
        <member name="M:QtGui.QValidator.Fixup(System.String)">
            <summary>
            <para>This function attempts to change input to be valid according to
            this validator's rules. It need not result in a valid string: callers of
            this function must re-test afterwards; the default does nothing.</para>
            <para>Reimplementations of this function can change input even if they
            do not produce a valid string. For example, an ISBN validator might want to
            delete every character except digits and &quot;-&quot;, even if the result
            is still not a valid ISBN; a surname validator might want to remove
            whitespace from the start and end of the string, even if the resulting
            string is not in the list of accepted surnames.</para>
            </summary>
        </member>
        <member name="E:QtGui.QValidator.Changed">
            <summary>
            <para>This signal is emitted when any property that may affect the validity of a string has changed.</para>
            </summary>
        </member>
        <member name="P:QtGui.QValidator.Locale">
            <summary>
            <para>Returns the locale for the validator. The locale is by default
            initialized to the same as QLocale().</para>
            <para>See also setLocale() and QLocale::QLocale().</para>
            <para></para>
            <para>Sets the locale that will be used for the validator. Unless
            setLocale has been called, the validator will use the default locale set
            with QLocale::setDefault(). If a default locale has not been set, it is the
            operating system's locale.</para>
            <para>See also locale() and QLocale::setDefault().</para>
            </summary>
        </member>
        <member name="T:QtGui.QValidator.State">
            <summary>
            <para>This enum type defines the states in which a validated string can
            exist.</para>
            </summary>
        </member>
        <member name="F:QtGui.QValidator.State.Invalid">
            <summary>The string is clearly invalid.</summary>
        </member>
        <member name="F:QtGui.QValidator.State.Intermediate">
            <summary>The string is a plausible intermediate value.</summary>
        </member>
        <member name="F:QtGui.QValidator.State.Acceptable">
            <summary>The string is acceptable as a final result; i.e. it is valid.</summary>
        </member>
        <member name="T:QtGui.QIntValidator">
            <summary>
            <para>The QIntValidator class provides a validator that ensures a
            string contains a valid integer within a specified range.</para>
            </summary>
            <remarks>
            <para>Example of use:</para>
            <para>QValidator *validator = new QIntValidator(100, 999, this);</para>
            <para>QLineEdit *edit = new QLineEdit(this);</para>
            <para></para>
            <para>// the edit lineedit will only accept integers between 100 and
            999</para>
            <para>edit-&gt;setValidator(validator);</para>
            <para>Below we present some examples of validators. In practice they
            would normally be associated with a widget as in the example above.</para>
            <para>QString str;</para>
            <para>int pos = 0;</para>
            <para>QIntValidator v(100, 900, this);</para>
            <para></para>
            <para>str = &quot;1&quot;;</para>
            <para>v.validate(str, pos);     // returns Intermediate</para>
            <para>str = &quot;012&quot;;</para>
            <para>v.validate(str, pos);     // returns Intermediate</para>
            <para></para>
            <para>str = &quot;123&quot;;</para>
            <para>v.validate(str, pos);     // returns Acceptable</para>
            <para>str = &quot;678&quot;;</para>
            <para>v.validate(str, pos);     // returns Acceptable</para>
            <para></para>
            <para>str = &quot;999&quot;;</para>
            <para>v.validate(str, pos);    // returns Intermediate</para>
            <para></para>
            <para>str = &quot;1234&quot;;</para>
            <para>v.validate(str, pos);     // returns Invalid</para>
            <para>str = &quot;-123&quot;;</para>
            <para>v.validate(str, pos);     // returns Invalid</para>
            <para>str = &quot;abc&quot;;</para>
            <para>v.validate(str, pos);     // returns Invalid</para>
            <para>str = &quot;12cm&quot;;</para>
            <para>v.validate(str, pos);     // returns Invalid</para>
            <para>Notice that the value 999 returns Intermediate. Values consisting
            of a number of digits equal to or less than the max value are considered
            intermediate. This is intended because the digit that prevents a number
            from being in range is not necessarily the last digit typed. This also
            means that an intermediate number can have leading zeros.</para>
            <para>The minimum and maximum values are set in one call with
            setRange(), or individually with setBottom() and setTop().</para>
            <para>QIntValidator uses its locale() to interpret the number. For
            example, in Arabic locales, QIntValidator will accept Arabic digits.</para>
            <para>Note: The QLocale::NumberOptions set on the locale() also affect
            the way the number is interpreted. For example, since
            QLocale::RejectGroupSeparator is not set by default, the validator will
            accept group separators. It is thus recommended to use QLocale::toInt() to
            obtain the numeric value.</para>
            <para></para>
            <para>See also QDoubleValidator, QRegExpValidator, QLocale::toInt(),
            and Line Edits Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QIntValidator.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent object that accepts all
            integers.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIntValidator.#ctor(System.Int32,System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent, that accepts integers from
            minimum to maximum inclusive.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIntValidator.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QValidator::validate().</para>
            <para>Returns Acceptable if the input is an integer within the valid
            range, Intermediate if the input is a prefix of an integer in the valid
            range, and Invalid otherwise.</para>
            <para>If the valid range consists of just positive integers (e.g., 32
            to 100) and input is a negative integer, then Invalid is returned. (On the
            other hand, if the range consists of negative integers (e.g., -100 to -32)
            and input is a positive integer, then Intermediate is returned, because the
            user might be just about to type the minus (especially for right-to-left
            languages).</para>
            <para>int pos = 0;</para>
            <para></para>
            <para>s = &quot;abc&quot;;</para>
            <para>v.validate(s, pos);    // returns Invalid</para>
            <para></para>
            <para>s = &quot;5&quot;;</para>
            <para>v.validate(s, pos);    // returns Intermediate</para>
            <para></para>
            <para>s = &quot;50&quot;;</para>
            <para>v.validate(s, pos);    // returns Acceptable</para>
            <para>By default, the pos parameter is not used by this
            validator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QIntValidator.Fixup(System.String)">
            <summary>
            <para>Reimplemented from QValidator::fixup().</para>
            </summary>
        </member>
        <member name="M:QtGui.QIntValidator.SetRange(System.Int32,System.Int32)">
            <summary>
            <para>Sets the range of the validator to only accept integers between
            bottom and top inclusive.</para>
            </summary>
        </member>
        <member name="P:QtGui.QIntValidator.Bottom">
            <summary>
            <para>This property holds the validator's lowest acceptable
            value.</para>
            <para>By default, this property's value is derived from the lowest
            signed integer available (typically -2147483647).</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QIntValidator.Top">
            <summary>
            <para>This property holds the validator's highest acceptable
            value.</para>
            <para>By default, this property's value is derived from the highest
            signed integer available (typically 2147483647).</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="T:QtGui.QDoubleValidator">
            <summary>
            <para>The QDoubleValidator class provides range checking of
            floating-point numbers.</para>
            </summary>
            <remarks>
            <para>QDoubleValidator provides an upper bound, a lower bound, and a
            limit on the number of digits after the decimal point. It does not provide
            a fixup() function.</para>
            <para>You can set the acceptable range in one call with setRange(), or
            with setBottom() and setTop(). Set the number of decimal places with
            setDecimals(). The validate() function returns the validation state.</para>
            <para>QDoubleValidator uses its locale() to interpret the number. For
            example, in the German locale, &quot;1,234&quot; will be accepted as the
            fractional number 1.234. In Arabic locales, QDoubleValidator will accept
            Arabic digits.</para>
            <para>Note: The QLocale::NumberOptions set on the locale() also affect
            the way the number is interpreted. For example, since
            QLocale::RejectGroupSeparator is not set by default, the validator will
            accept group separators. It is thus recommended to use QLocale::toDouble()
            to obtain the numeric value.</para>
            <para></para>
            <para>See also QIntValidator, QRegExpValidator, QLocale::toDouble(),
            and Line Edits Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QDoubleValidator.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a validator object with a parent object that accepts
            any double.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDoubleValidator.#ctor(System.Double,System.Double,System.Int32,QtCore.QObject)">
            <summary>
            <para>Constructs a validator object with a parent object. This
            validator will accept doubles from bottom to top inclusive, with up to
            decimals digits after the decimal point.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDoubleValidator.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QValidator::validate().</para>
            <para>Returns Acceptable if the string input contains a double that is
            within the valid range and is in the correct format.</para>
            <para>Returns Intermediate if input contains a double that is outside
            the range or is in the wrong format; e.g. with too many digits after the
            decimal point or is empty.</para>
            <para>Returns Invalid if the input is not a double.</para>
            <para>Note: If the valid range consists of just positive doubles (e.g.
            0.0 to 100.0) and input is a negative double then Invalid is returned. If
            notation() is set to StandardNotation, and the input contains more digits
            before the decimal point than a double in the valid range may have, Invalid
            is returned. If notation() is ScientificNotation, and the input is not in
            the valid range, Intermediate is returned. The value may yet become valid
            by changing the exponent.</para>
            <para>By default, the pos parameter is not used by this
            validator.</para>
            </summary>
        </member>
        <member name="M:QtGui.QDoubleValidator.SetRange(System.Double,System.Double,System.Int32)">
            <summary>
            <para>Sets the validator to accept doubles from minimum to maximum
            inclusive, with at most decimals digits after the decimal point.</para>
            </summary>
        </member>
        <member name="P:QtGui.QDoubleValidator.Bottom">
            <summary>
            <para>This property holds the validator's minimum acceptable
            value.</para>
            <para>By default, this property contains a value of -infinity.</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDoubleValidator.Top">
            <summary>
            <para>This property holds the validator's maximum acceptable
            value.</para>
            <para>By default, this property contains a value of infinity.</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDoubleValidator.Decimals">
            <summary>
            <para>This property holds the validator's maximum number of digits
            after the decimal point.</para>
            <para>By default, this property contains a value of 1000.</para>
            <para>See also setRange().</para>
            </summary>
        </member>
        <member name="P:QtGui.QDoubleValidator.notation">
            <summary>
            <para>This property holds the notation of how a string can describe a
            number.</para>
            <para>By default, this property is set to ScientificNotation.</para>
            <para>This property was introduced in  Qt 4.3.</para>
            <para>See also Notation.</para>
            </summary>
        </member>
        <member name="T:QtGui.QDoubleValidator.Notation">
            <summary>
            <para>This enum defines the allowed notations for entering a
            double.</para>
            <para>This enum was introduced or modified in  Qt 4.3.</para>
            </summary>
        </member>
        <member name="F:QtGui.QDoubleValidator.Notation.StandardNotation">
            <summary>The string is written as a standard number (i.e. 0.015).</summary>
        </member>
        <member name="F:QtGui.QDoubleValidator.Notation.ScientificNotation">
            <summary>The string is written in scientific form. It may have an exponent part(i.e. 1.5E-2).</summary>
        </member>
        <member name="T:QtGui.QRegExpValidator">
            <summary>
            <para>The QRegExpValidator class is used to check a string against a
            regular expression.</para>
            </summary>
            <remarks>
            <para>QRegExpValidator uses a regular expression (regexp) to determine
            whether an input string is Acceptable, Intermediate, or Invalid. The regexp
            can either be supplied when the QRegExpValidator is constructed, or at a
            later time.</para>
            <para>When QRegExpValidator determines whether a string is Acceptable
            or not, the regexp is treated as if it begins with the start of string
            assertion (^) and ends with the end of string assertion ($); the match is
            against the entire input string, or from the given position if a start
            position greater than zero is given.</para>
            <para>If a string is a prefix of an Acceptable string, it is considered
            Intermediate. For example, &quot;&quot; and &quot;A&quot; are Intermediate
            for the regexp [A-Z][0-9] (whereas &quot;_&quot; would be Invalid).</para>
            <para>For a brief introduction to Qt's regexp engine, see
            QRegExp.</para>
            <para>Example of use:</para>
            <para>// regexp: optional '-' followed by between 1 and 3 digits</para>
            <para>QRegExp rx(&quot;-?\\d{1,3}&quot;);</para>
            <para>QValidator *validator = new QRegExpValidator(rx, this);</para>
            <para></para>
            <para>QLineEdit *edit = new QLineEdit(this);</para>
            <para>edit-&gt;setValidator(validator);</para>
            <para>Below we present some examples of validators. In practice they
            would normally be associated with a widget as in the example above.</para>
            <para>// integers 1 to 9999</para>
            <para>QRegExp rx(&quot;[1-9]\\d{0,3}&quot;);</para>
            <para>// the validator treats the regexp as
            &quot;^[1-9]\\d{0,3}$&quot;</para>
            <para>QRegExpValidator v(rx, 0);</para>
            <para>QString s;</para>
            <para>int pos = 0;</para>
            <para></para>
            <para>s = &quot;0&quot;;     v.validate(s, pos);    // returns
            Invalid</para>
            <para>s = &quot;12345&quot;; v.validate(s, pos);    // returns
            Invalid</para>
            <para>s = &quot;1&quot;;     v.validate(s, pos);    // returns
            Acceptable</para>
            <para></para>
            <para>rx.setPattern(&quot;\\S+&quot;);            // one or more
            non-whitespace characters</para>
            <para>v.setRegExp(rx);</para>
            <para>s = &quot;myfile.txt&quot;;  v.validate(s, pos); // Returns
            Acceptable</para>
            <para>s = &quot;my file.txt&quot;; v.validate(s, pos); // Returns
            Invalid</para>
            <para></para>
            <para>// A, B or C followed by exactly five digits followed by W, X, Y
            or Z</para>
            <para>rx.setPattern(&quot;[A-C]\\d{5}[W-Z]&quot;);</para>
            <para>v.setRegExp(rx);</para>
            <para>s = &quot;a12345Z&quot;; v.validate(s, pos);        // Returns
            Invalid</para>
            <para>s = &quot;A12345Z&quot;; v.validate(s, pos);        // Returns
            Acceptable</para>
            <para>s = &quot;B12&quot;;     v.validate(s, pos);        // Returns
            Intermediate</para>
            <para></para>
            <para>// match most 'readme' files</para>
            <para>rx.setPattern(&quot;read\\S?me(\.(txt|asc|1st))?&quot;);</para>
            <para>rx.setCaseSensitive(false);</para>
            <para>v.setRegExp(rx);</para>
            <para>s = &quot;readme&quot;;      v.validate(s, pos); // Returns
            Acceptable</para>
            <para>s = &quot;README.1ST&quot;;  v.validate(s, pos); // Returns
            Acceptable</para>
            <para>s = &quot;read me.txt&quot;; v.validate(s, pos); // Returns
            Invalid</para>
            <para>s = &quot;readm&quot;;       v.validate(s, pos); // Returns
            Intermediate</para>
            <para></para>
            <para>See also QRegExp, QIntValidator, QDoubleValidator, and Settings
            Editor Example.</para>
            </remarks>
        </member>
        <member name="M:QtGui.QRegExpValidator.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent object that accepts any
            string (including an empty one) as valid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegExpValidator.#ctor(QtCore.QRegExp,QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent object that accepts all
            strings that match the regular expression rx.</para>
            <para>The match is made against the entire string; e.g. if the regexp
            is [A-Fa-f0-9]+ it will be treated as ^[A-Fa-f0-9]+$.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegExpValidator.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QValidator::validate().</para>
            <para>Returns Acceptable if input is matched by the regular expression
            for this validator, Intermediate if it has matched partially (i.e. could be
            a valid match if additional valid characters are added), and Invalid if
            input is not matched.</para>
            <para>Additionally, if input is not matched, the pos parameter is set
            to the length of the input parameter.</para>
            <para>For example, if the regular expression is \w\d\d (word-character,
            digit, digit) then &quot;A57&quot; is Acceptable, &quot;E5&quot; is
            Intermediate, and &quot;+9&quot; is Invalid.</para>
            <para>See also QRegExp::exactMatch().</para>
            </summary>
        </member>
        <member name="P:QtGui.QRegExpValidator.RegExp">
            <summary>
            <para>This property holds the regular expression used for
            validation.</para>
            <para>By default, this property contains a regular expression with the
            pattern .* that matches any string.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:QtGui.QRegularExpressionValidator" -->
        <member name="M:QtGui.QRegularExpressionValidator.#ctor(QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent object that accepts any
            string (including an empty one) as valid.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegularExpressionValidator.#ctor(QtCore.QRegularExpression,QtCore.QObject)">
            <summary>
            <para>Constructs a validator with a parent object that accepts all
            strings that match the regular expression re.</para>
            </summary>
        </member>
        <member name="M:QtGui.QRegularExpressionValidator.Validate(System.String,System.Int32@)">
            <summary>
            <para>Reimplemented from QValidator::validate().</para>
            <para>Returns Acceptable if input is matched by the regular expression
            for this validator, Intermediate if it has matched partially (i.e. could be
            a valid match if additional valid characters are added), and Invalid if
            input is not matched.</para>
            <para>In case the input is not matched, the pos parameter is set to the
            length of the input parameter; otherwise, it is not modified.</para>
            <para>For example, if the regular expression is \w\d\d (word-character,
            digit, digit) then &quot;A57&quot; is Acceptable, &quot;E5&quot; is
            Intermediate, and &quot;+9&quot; is Invalid.</para>
            <para>See also QRegularExpression::match().</para>
            </summary>
        </member>
        <member name="E:QtGui.QRegularExpressionValidator.RegularExpressionChanged">
            <summary>
            <para>This property holds the regular expression used for validation.</para>
            <para>By default, this property contains a regular expression with an empty pattern (which therefore matches any string).</para>
            <para>Access functions:</para>
            <para></para>
            <para> QRegularExpression 	regularExpression() const</para>
            <para> void 	setRegularExpression(const QRegularExpression &amp; re)</para>
            <para></para>
            <para>Notifier signal:</para>
            <para></para>
            <para> void 	regularExpressionChanged(const QRegularExpression &amp; re)</para>
            <para></para>
            </summary>
        </member>
        <member name="P:QtGui.QRegularExpressionValidator.RegularExpression">
            <summary>
            <para>This property holds the regular expression used for
            validation.</para>
            <para>By default, this property contains a regular expression with an
            empty pattern (which therefore matches any string).</para>
            </summary>
        </member>
    </members>
</doc>
